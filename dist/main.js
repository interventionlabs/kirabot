!function(e){var t={};function a(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=e,a.c=t,a.d=function(e,t,i){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(a.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(i,r,function(t){return e[t]}.bind(null,r));return i},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=264)}([function(e,t,a){var i=a(21),r=a(20).Stream,o=a(1),n=/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;function s(e){return e.charAt(0).toUpperCase()+e.slice(1)}function u(e,t,a,r,n){throw new i.AssertionError({message:o.format("%s (%s) is required",e,t),actual:void 0===n?typeof r:n(r),expected:t,operator:a||"===",stackStartFunction:u.caller})}function c(e){return Object.prototype.toString.call(e).slice(8,-1)}function p(){}var l={bool:{check:function(e){return"boolean"==typeof e}},func:{check:function(e){return"function"==typeof e}},string:{check:function(e){return"string"==typeof e}},object:{check:function(e){return"object"==typeof e&&null!==e}},number:{check:function(e){return"number"==typeof e&&!isNaN(e)}},finite:{check:function(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}},buffer:{check:function(e){return Buffer.isBuffer(e)},operator:"Buffer.isBuffer"},array:{check:function(e){return Array.isArray(e)},operator:"Array.isArray"},stream:{check:function(e){return e instanceof r},operator:"instanceof",actual:c},date:{check:function(e){return e instanceof Date},operator:"instanceof",actual:c},regexp:{check:function(e){return e instanceof RegExp},operator:"instanceof",actual:c},uuid:{check:function(e){return"string"==typeof e&&n.test(e)},operator:"isUUID"}};e.exports=function e(t){var a,r=Object.keys(l);return a=process.env.NODE_NDEBUG?p:function(e,t){e||u(t,"true",e)},r.forEach(function(e){if(t)a[e]=p;else{var i=l[e];a[e]=function(t,a){i.check(t)||u(a,e,i.operator,t,i.actual)}}}),r.forEach(function(e){var i="optional"+s(e);if(t)a[i]=p;else{var r=l[e];a[i]=function(t,a){null!=t&&(r.check(t)||u(a,e,r.operator,t,r.actual))}}}),r.forEach(function(e){var i="arrayOf"+s(e);if(t)a[i]=p;else{var r=l[e],o="["+e+"]";a[i]=function(e,t){var a;for(Array.isArray(e)||u(t,o,r.operator,e,r.actual),a=0;a<e.length;a++)r.check(e[a])||u(t,o,r.operator,e,r.actual)}}}),r.forEach(function(e){var i="optionalArrayOf"+s(e);if(t)a[i]=p;else{var r=l[e],o="["+e+"]";a[i]=function(e,t){var a;if(null!=e)for(Array.isArray(e)||u(t,o,r.operator,e,r.actual),a=0;a<e.length;a++)r.check(e[a])||u(t,o,r.operator,e,r.actual)}}}),Object.keys(i).forEach(function(e){a[e]="AssertionError"!==e&&t?p:i[e]}),a._setExports=e,a}(process.env.NODE_NDEBUG)},function(e,t){e.exports=require("util")},function(e,t){e.exports=require("crypto")},function(e,t,a){"use strict";var i,r=a(55),o=r.Buffer,n={};for(i in r)r.hasOwnProperty(i)&&"SlowBuffer"!==i&&"Buffer"!==i&&(n[i]=r[i]);var s=n.Buffer={};for(i in o)o.hasOwnProperty(i)&&"allocUnsafe"!==i&&"allocUnsafeSlow"!==i&&(s[i]=o[i]);if(n.Buffer.prototype=o.prototype,s.from&&s.from!==Uint8Array.from||(s.from=function(e,t,a){if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof e);if(e&&void 0===e.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);return o(e,t,a)}),s.alloc||(s.alloc=function(e,t,a){if("number"!=typeof e)throw new TypeError('The "size" argument must be of type number. Received type '+typeof e);if(e<0||e>=2*(1<<30))throw new RangeError('The value "'+e+'" is invalid for option "size"');var i=o(e);return t&&0!==t.length?"string"==typeof a?i.fill(t,a):i.fill(t):i.fill(0),i}),!n.kStringMaxLength)try{n.kStringMaxLength=process.binding("buffer").kStringMaxLength}catch(e){}n.constants||(n.constants={MAX_LENGTH:n.kMaxLength},n.kStringMaxLength&&(n.constants.MAX_STRING_LENGTH=n.kStringMaxLength)),e.exports=n},function(e,t,a){e.exports=g;var i,r=a(0),o=a(7),n=a(2),s=a(25),u=a(11),c=a(41).DiffieHellman,p=a(9),l=a(5),m=a(6);try{i=a(56)}catch(e){}var h=p.InvalidAlgorithmError,d=p.KeyParseError,f={};function g(e){r.object(e,"options"),r.arrayOfObject(e.parts,"options.parts"),r.string(e.type,"options.type"),r.optionalString(e.comment,"options.comment");var t=o.info[e.type];if("object"!=typeof t)throw new h(e.type);for(var a,i={},n=0;n<e.parts.length;++n){var s=e.parts[n];i[s.name]=s}if(this.type=e.type,this.parts=e.parts,this.part=i,this.comment=void 0,this.source=e.source,this._rfc4253Cache=e._rfc4253Cache,this._hashCache={},this.curve=void 0,"ecdsa"===this.type){var u=this.part.curve.data.toString();this.curve=u,a=o.curves[u].size}else if("ed25519"===this.type||"curve25519"===this.type)a=256,this.curve="curve25519";else{var c=this.part[t.sizePart];a=8*(a=c.data.length)-l.countZeros(c.data)}this.size=a}f.auto=a(57),f.pem=a(15),f.pkcs1=a(42),f.pkcs8=a(29),f.rfc4253=a(16),f.ssh=a(59),f["ssh-private"]=a(34),f.openssh=f["ssh-private"],f.dnssec=a(43),f.putty=a(60),f.ppk=f.putty,g.formats=f,g.prototype.toBuffer=function(e,t){return void 0===e&&(e="ssh"),r.string(e,"format"),r.object(f[e],"formats[format]"),r.optionalObject(t,"options"),"rfc4253"===e?(void 0===this._rfc4253Cache&&(this._rfc4253Cache=f.rfc4253.write(this)),this._rfc4253Cache):f[e].write(this,t)},g.prototype.toString=function(e,t){return this.toBuffer(e,t).toString()},g.prototype.hash=function(e,t){if(r.string(e,"algorithm"),r.optionalString(t,"type"),void 0===t&&(t="ssh"),e=e.toLowerCase(),void 0===o.hashAlgs[e])throw new h(e);var a,i=e+"||"+t;if(this._hashCache[i])return this._hashCache[i];if("ssh"===t)a=this.toBuffer("rfc4253");else{if("spki"!==t)throw new Error("Hash type "+t+" not supported");a=f.pkcs8.pkcs8ToBuffer(this)}var s=n.createHash(e).update(a).digest();return this._hashCache[i]=s,s},g.prototype.fingerprint=function(e,t){void 0===e&&(e="sha256"),void 0===t&&(t="ssh"),r.string(e,"algorithm"),r.string(t,"type");var a={type:"key",hash:this.hash(e,t),algorithm:e,hashType:t};return new s(a)},g.prototype.defaultHashAlgorithm=function(){var e="sha1";return"rsa"===this.type&&(e="sha256"),"dsa"===this.type&&this.size>1024&&(e="sha256"),"ed25519"===this.type&&(e="sha512"),"ecdsa"===this.type&&(e=this.size<=256?"sha256":this.size<=384?"sha384":"sha512"),e},g.prototype.createVerify=function(e){if(void 0===e&&(e=this.defaultHashAlgorithm()),r.string(e,"hash algorithm"),"ed25519"===this.type&&void 0!==i)return new i.Verifier(this,e);if("curve25519"===this.type)throw new Error("Curve25519 keys are not suitable for signing or verification");var t,a,o;try{a=e.toUpperCase(),t=n.createVerify(a)}catch(e){o=e}(void 0===t||o instanceof Error&&o.message.match(/Unknown message digest/))&&(a="RSA-",a+=e.toUpperCase(),t=n.createVerify(a)),r.ok(t,"failed to create verifier");var s=t.verify.bind(t),c=this.toBuffer("pkcs8"),p=this.curve,l=this;return t.verify=function(t,a){if(u.isSignature(t,[2,0]))return t.type===l.type&&((!t.hashAlgorithm||t.hashAlgorithm===e)&&((!t.curve||"ecdsa"!==l.type||t.curve===p)&&s(c,t.toBuffer("asn1"))));if("string"==typeof t||Buffer.isBuffer(t))return s(c,t,a);throw u.isSignature(t,[1,0])?new Error("signature was created by too old a version of sshpk and cannot be verified"):new TypeError("signature must be a string, Buffer, or Signature object")},t},g.prototype.createDiffieHellman=function(){if("rsa"===this.type)throw new Error("RSA keys do not support Diffie-Hellman");return new c(this)},g.prototype.createDH=g.prototype.createDiffieHellman,g.parse=function(e,t,a){"string"!=typeof e&&r.buffer(e,"data"),void 0===t&&(t="auto"),r.string(t,"format"),"string"==typeof a&&(a={filename:a}),r.optionalObject(a,"options"),void 0===a&&(a={}),r.optionalString(a.filename,"options.filename"),void 0===a.filename&&(a.filename="(unnamed)"),r.object(f[t],"formats[format]");try{var i=f[t].read(e,a);return i instanceof m&&(i=i.toPublic()),i.comment||(i.comment=a.filename),i}catch(e){if("KeyEncryptedError"===e.name)throw e;throw new d(a.filename,t,e)}},g.isKey=function(e,t){return l.isCompatible(e,g,t)},g.prototype._sshpkApiVersion=[1,7],g._oldVersionDetect=function(e){return r.func(e.toBuffer),r.func(e.fingerprint),e.createDH?[1,4]:e.defaultHashAlgorithm?[1,3]:e.formats.auto?[1,2]:e.formats.pkcs1?[1,1]:[1,0]}},function(e,t,a){e.exports={bufferSplit:function(e,t){i.buffer(e),i.string(t);for(var a=[],r=0,o=0,n=0;n<e.length;++n)if(e[n]===t.charCodeAt(o)?++o:o=e[n]===t.charCodeAt(0)?1:0,o>=t.length){var s=n+1;a.push(e.slice(r,s-o)),r=s,o=0}r<=e.length&&a.push(e.slice(r,e.length));return a},addRSAMissing:function(e){i.object(e),d(e,o,[1,1]);var t,a=new l(e.part.d.data);if(!e.part.dmodp){var r=new l(e.part.p.data),n=a.mod(r.subtract(1));t=y(n),e.part.dmodp={name:"dmodp",data:t},e.parts.push(e.part.dmodp)}if(!e.part.dmodq){var s=new l(e.part.q.data),u=a.mod(s.subtract(1));t=y(u),e.part.dmodq={name:"dmodq",data:t},e.parts.push(e.part.dmodq)}},calculateDSAPublic:function(e,t,a){return i.buffer(e),i.buffer(t),i.buffer(a),e=new l(e),t=new l(t),a=new l(a),y(e.modPow(a,t))},calculateED25519Public:function(e){i.buffer(e);var t=m.sign.keyPair.fromSeed(new Uint8Array(e));return r.from(t.publicKey)},calculateX25519Public:function(e){i.buffer(e);var t=m.box.keyPair.fromSeed(new Uint8Array(e));return r.from(t.publicKey)},mpNormalize:v,mpDenormalize:function(e){i.buffer(e);for(;e.length>1&&0===e[0];)e=e.slice(1);return e},ecNormalize:function(e,t){if(i.buffer(e),0===e[0]&&4===e[1])return t?e:e.slice(1);if(4===e[0]){if(!t)return e}else{for(;0===e[0];)e=e.slice(1);if(2===e[0]||3===e[0])throw new Error("Compressed elliptic curve points are not supported");if(4!==e[0])throw new Error("Not a valid elliptic curve point");if(!t)return e}var a=r.alloc(e.length+1);return a[0]=0,e.copy(a,1),a},countZeros:function(e){var t=0,a=8;for(;t<e.length;){var i=1<<a;if((e[t]&i)===i)break;--a<0&&(t++,a=8)}return 8*t+(8-a)-1},assertCompatible:d,isCompatible:function(e,t,a){if(null===e||"object"!=typeof e)return!1;void 0===a&&(a=t.prototype._sshpkApiVersion);if(e instanceof t&&t.prototype._sshpkApiVersion[0]==a[0])return!0;var i=Object.getPrototypeOf(e),r=0;for(;i.constructor.name!==t.name;)if(!(i=Object.getPrototypeOf(i))||++r>h)return!1;if(i.constructor.name!==t.name)return!1;var o=i._sshpkApiVersion;void 0===o&&(o=t._oldVersionDetect(e));return!(o[0]!=a[0]||o[1]<a[1])},opensslKeyDeriv:function(e,t,a,o){i.buffer(t,"salt"),i.buffer(a,"passphrase"),i.number(o,"iteration count");var n,u,c,p=f[e];i.object(p,"supported cipher"),t=t.slice(0,g);var l=r.alloc(0);for(;l.length<p.key+p.iv;){c=[],u&&c.push(u),c.push(a),c.push(t),n=r.concat(c);for(var m=0;m<o;++m)n=s.createHash("md5").update(n).digest();l=r.concat([l,n]),u=n}return{key:l.slice(0,p.key),iv:l.slice(p.key,p.key+p.iv)}},opensshCipherInfo:function(e){var t={};switch(e){case"3des-cbc":t.keySize=24,t.blockSize=8,t.opensslName="des-ede3-cbc";break;case"blowfish-cbc":t.keySize=16,t.blockSize=8,t.opensslName="bf-cbc";break;case"aes128-cbc":case"aes128-ctr":case"aes128-gcm@openssh.com":t.keySize=16,t.blockSize=16,t.opensslName="aes-128-"+e.slice(7,10);break;case"aes192-cbc":case"aes192-ctr":case"aes192-gcm@openssh.com":t.keySize=24,t.blockSize=16,t.opensslName="aes-192-"+e.slice(7,10);break;case"aes256-cbc":case"aes256-ctr":case"aes256-gcm@openssh.com":t.keySize=32,t.blockSize=16,t.opensslName="aes-256-"+e.slice(7,10);break;default:throw new Error('Unsupported openssl cipher "'+e+'"')}return t},publicFromPrivateECDSA:function(e,t){i.string(e,"curveName"),i.buffer(t);var a=u.curves[e],o=new l(a.p),s=new l(a.a),c=new l(a.b),m=new p.ECCurveFp(o,s,c),h=m.decodePointHex(a.G.toString("hex")),d=new l(v(t)),f=h.multiply(d);f=r.from(m.encodePointHex(f),"hex");var g=[];return g.push({name:"curve",data:r.from(e)}),g.push({name:"Q",data:f}),new n({type:"ecdsa",curve:m,parts:g})},zeroPadToLength:function(e,t){i.buffer(e),i.number(t);for(;e.length>t;)i.equal(e[0],0),e=e.slice(1);for(;e.length<t;){var a=r.alloc(e.length+1);a[0]=0,e.copy(a,1),e=a}return e},writeBitString:function(e,t,a){void 0===a&&(a=c.Ber.BitString);var i=r.alloc(t.length+1);i[0]=0,t.copy(i,1),e.writeBuffer(i,a)},readBitString:function(e,t){void 0===t&&(t=c.Ber.BitString);var a=e.readString(t,!0);return i.strictEqual(a[0],0,"bit strings with unused bits are not supported (0x"+a[0].toString(16)+")"),a.slice(1)},pbkdf2:function(e,t,a,i,o){var n=r.alloc(t.length+4);t.copy(n);var u=0,c=[],p=1;for(;u<i;){var l=m(p++);u+=l.length,c.push(l)}return r.concat(c).slice(0,i);function m(t){n.writeUInt32BE(t,n.length-4);var i=s.createHmac(e,o);i.update(n);for(var r=i.digest(),u=r,c=1;c++<a;){(i=s.createHmac(e,o)).update(u),u=i.digest();for(var p=0;p<r.length;++p)r[p]^=u[p]}return r}}};var i=a(0),r=a(3).Buffer,o=a(6),n=a(4),s=a(2),u=a(7),c=a(12),p=a(33),l=a(26).BigInteger,m=a(27),h=3;function d(e,t,a,r){if(void 0===r&&(r="object"),i.ok(e,r+" must not be null"),i.object(e,r+" must be an object"),void 0===a&&(a=t.prototype._sshpkApiVersion),!(e instanceof t&&t.prototype._sshpkApiVersion[0]==a[0])){for(var o=Object.getPrototypeOf(e),n=0;o.constructor.name!==t.name;)o=Object.getPrototypeOf(o),i.ok(o&&++n<=h,r+" must be a "+t.name+" instance");i.strictEqual(o.constructor.name,t.name,r+" must be a "+t.name+" instance");var s=o._sshpkApiVersion;void 0===s&&(s=t._oldVersionDetect(e)),i.ok(s[0]==a[0]&&s[1]>=a[1],r+" must be compatible with "+t.name+" klass version "+a[0]+"."+a[1])}}var f={"des-ede3-cbc":{key:24,iv:8},"aes-128-cbc":{key:16,iv:16},"aes-256-cbc":{key:32,iv:16}},g=8;function v(e){for(i.buffer(e);e.length>1&&0===e[0]&&0==(128&e[1]);)e=e.slice(1);if(128==(128&e[0])){var t=r.alloc(e.length+1);t[0]=0,e.copy(t,1),e=t}return e}function y(e){var t=r.from(e.toByteArray());return t=v(t)}},function(e,t,a){e.exports=b;var i=a(0),r=a(3).Buffer,o=a(7),n=a(2),s=(a(25),a(11)),u=a(9),c=a(1),p=a(5),l=a(41),m=l.generateECDSA,h=l.generateED25519,d=a(56),f=a(27),g=a(4),v=(u.InvalidAlgorithmError,u.KeyParseError),y=(u.KeyEncryptedError,{});function b(e){i.object(e,"options"),g.call(this,e),this._pubCache=void 0}y.auto=a(57),y.pem=a(15),y.pkcs1=a(42),y.pkcs8=a(29),y.rfc4253=a(16),y["ssh-private"]=a(34),y.openssh=y["ssh-private"],y.ssh=y["ssh-private"],y.dnssec=a(43),c.inherits(b,g),b.formats=y,b.prototype.toBuffer=function(e,t){return void 0===e&&(e="pkcs1"),i.string(e,"format"),i.object(y[e],"formats[format]"),i.optionalObject(t,"options"),y[e].write(this,t)},b.prototype.hash=function(e,t){return this.toPublic().hash(e,t)},b.prototype.fingerprint=function(e,t){return this.toPublic().fingerprint(e,t)},b.prototype.toPublic=function(){if(this._pubCache)return this._pubCache;for(var e=o.info[this.type],t=[],a=0;a<e.parts.length;++a){var i=e.parts[a];t.push(this.part[i])}return this._pubCache=new g({type:this.type,source:this,parts:t}),this.comment&&(this._pubCache.comment=this.comment),this._pubCache},b.prototype.derive=function(e){var t,a,o;if(i.string(e,"type"),"ed25519"===this.type&&"curve25519"===e)return 0===(t=this.part.k.data)[0]&&(t=t.slice(1)),o=f.box.keyPair.fromSecretKey(new Uint8Array(t)),a=r.from(o.publicKey),new b({type:"curve25519",parts:[{name:"A",data:p.mpNormalize(a)},{name:"k",data:p.mpNormalize(t)}]});if("curve25519"===this.type&&"ed25519"===e)return 0===(t=this.part.k.data)[0]&&(t=t.slice(1)),o=f.sign.keyPair.fromSeed(new Uint8Array(t)),a=r.from(o.publicKey),new b({type:"ed25519",parts:[{name:"A",data:p.mpNormalize(a)},{name:"k",data:p.mpNormalize(t)}]});throw new Error("Key derivation not supported from "+this.type+" to "+e)},b.prototype.createVerify=function(e){return this.toPublic().createVerify(e)},b.prototype.createSign=function(e){if(void 0===e&&(e=this.defaultHashAlgorithm()),i.string(e,"hash algorithm"),"ed25519"===this.type&&void 0!==d)return new d.Signer(this,e);if("curve25519"===this.type)throw new Error("Curve25519 keys are not suitable for signing or verification");var t,a,o;try{a=e.toUpperCase(),t=n.createSign(a)}catch(e){o=e}(void 0===t||o instanceof Error&&o.message.match(/Unknown message digest/))&&(a="RSA-",a+=e.toUpperCase(),t=n.createSign(a)),i.ok(t,"failed to create verifier");var u=t.sign.bind(t),c=this.toBuffer("pkcs1"),p=this.type,l=this.curve;return t.sign=function(){var t=u(c);return"string"==typeof t&&(t=r.from(t,"binary")),(t=s.parse(t,p,"asn1")).hashAlgorithm=e,t.curve=l,t},t},b.parse=function(e,t,a){"string"!=typeof e&&i.buffer(e,"data"),void 0===t&&(t="auto"),i.string(t,"format"),"string"==typeof a&&(a={filename:a}),i.optionalObject(a,"options"),void 0===a&&(a={}),i.optionalString(a.filename,"options.filename"),void 0===a.filename&&(a.filename="(unnamed)"),i.object(y[t],"formats[format]");try{var r=y[t].read(e,a);return i.ok(r instanceof b,"key is not a private key"),r.comment||(r.comment=a.filename),r}catch(e){if("KeyEncryptedError"===e.name)throw e;throw new v(a.filename,t,e)}},b.isPrivateKey=function(e,t){return p.isCompatible(e,b,t)},b.generate=function(e,t){switch(void 0===t&&(t={}),i.object(t,"options"),e){case"ecdsa":return void 0===t.curve&&(t.curve="nistp256"),i.string(t.curve,"options.curve"),m(t.curve);case"ed25519":return h();default:throw new Error('Key generation not supported with key type "'+e+'"')}},b.prototype._sshpkApiVersion=[1,6],b._oldVersionDetect=function(e){return i.func(e.toPublic),i.func(e.createSign),e.derive?[1,3]:e.defaultHashAlgorithm?[1,2]:e.formats.auto?[1,1]:[1,0]}},function(e,t,a){var i=a(3).Buffer,r={dsa:{parts:["p","q","g","y"],sizePart:"p"},rsa:{parts:["e","n"],sizePart:"n"},ecdsa:{parts:["curve","Q"],sizePart:"Q"},ed25519:{parts:["A"],sizePart:"A"}};r.curve25519=r.ed25519;var o={dsa:{parts:["p","q","g","y","x"]},rsa:{parts:["n","e","d","iqmp","p","q"]},ecdsa:{parts:["curve","Q","d"]},ed25519:{parts:["A","k"]}};o.curve25519=o.ed25519;var n={nistp256:{size:256,pkcs8oid:"1.2.840.10045.3.1.7",p:i.from("00ffffffff 00000001 00000000 0000000000000000 ffffffff ffffffff ffffffff".replace(/ /g,""),"hex"),a:i.from("00FFFFFFFF 00000001 00000000 0000000000000000 FFFFFFFF FFFFFFFF FFFFFFFC".replace(/ /g,""),"hex"),b:i.from("5ac635d8 aa3a93e7 b3ebbd55 769886bc651d06b0 cc53b0f6 3bce3c3e 27d2604b".replace(/ /g,""),"hex"),s:i.from("00c49d3608 86e70493 6a6678e1 139d26b7819f7e90".replace(/ /g,""),"hex"),n:i.from("00ffffffff 00000000 ffffffff ffffffffbce6faad a7179e84 f3b9cac2 fc632551".replace(/ /g,""),"hex"),G:i.from("046b17d1f2 e12c4247 f8bce6e5 63a440f277037d81 2deb33a0 f4a13945 d898c2964fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e162bce3357 6b315ece cbb64068 37bf51f5".replace(/ /g,""),"hex")},nistp384:{size:384,pkcs8oid:"1.3.132.0.34",p:i.from("00ffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff fffffffeffffffff 00000000 00000000 ffffffff".replace(/ /g,""),"hex"),a:i.from("00FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFEFFFFFFFF 00000000 00000000 FFFFFFFC".replace(/ /g,""),"hex"),b:i.from("b3312fa7 e23ee7e4 988e056b e3f82d19181d9c6e fe814112 0314088f 5013875ac656398d 8a2ed19d 2a85c8ed d3ec2aef".replace(/ /g,""),"hex"),s:i.from("00a335926a a319a27a 1d00896a 6773a4827acdac73".replace(/ /g,""),"hex"),n:i.from("00ffffffff ffffffff ffffffff ffffffffffffffff ffffffff c7634d81 f4372ddf581a0db2 48b0a77a ecec196a ccc52973".replace(/ /g,""),"hex"),G:i.from("04aa87ca22 be8b0537 8eb1c71e f320ad746e1d3b62 8ba79b98 59f741e0 82542a385502f25d bf55296c 3a545e38 72760ab73617de4a 96262c6f 5d9e98bf 9292dc29f8f41dbd 289a147c e9da3113 b5f0b8c00a60b1ce 1d7e819d 7a431d7c 90ea0e5f".replace(/ /g,""),"hex")},nistp521:{size:521,pkcs8oid:"1.3.132.0.35",p:i.from("01ffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff ffffffffffff".replace(/ /g,""),"hex"),a:i.from("01FFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC".replace(/ /g,""),"hex"),b:i.from("51953eb961 8e1c9a1f 929a21a0 b68540eea2da725b 99b315f3 b8b48991 8ef109e156193951 ec7e937b 1652c0bd 3bb1bf073573df88 3d2c34f1 ef451fd4 6b503f00".replace(/ /g,""),"hex"),s:i.from("00d09e8800 291cb853 96cc6717 393284aaa0da64ba".replace(/ /g,""),"hex"),n:i.from("01ffffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff fffffffa51868783 bf2f966b 7fcc0148 f709a5d03bb5c9b8 899c47ae bb6fb71e 91386409".replace(/ /g,""),"hex"),G:i.from("0400c6 858e06b7 0404e9cd 9e3ecb66 2395b4429c648139 053fb521 f828af60 6b4d3dbaa14b5e77 efe75928 fe1dc127 a2ffa8de3348b3c1 856a429b f97e7e31 c2e5bd660118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd998f54449 579b4468 17afbd17 273e662c97ee7299 5ef42640 c550b901 3fad0761353c7086 a272c240 88be9476 9fd16650".replace(/ /g,""),"hex")}};e.exports={info:r,privInfo:o,hashAlgs:{md5:!0,sha1:!0,sha256:!0,sha384:!0,sha512:!0},curves:n}},function(e,t){e.exports=require("url")},function(e,t,a){a(0);var i=a(1);function r(e,t){Error.captureStackTrace&&Error.captureStackTrace(this,r),this.name="FingerprintFormatError",this.fingerprint=e,this.format=t,this.message="Fingerprint format is not supported, or is invalid: ",void 0!==e&&(this.message+=" fingerprint = "+e),void 0!==t&&(this.message+=" format = "+t)}function o(e){Error.captureStackTrace&&Error.captureStackTrace(this,o),this.name="InvalidAlgorithmError",this.algorithm=e,this.message='Algorithm "'+e+'" is not supported'}function n(e,t,a){Error.captureStackTrace&&Error.captureStackTrace(this,n),this.name="KeyParseError",this.format=t,this.keyName=e,this.innerErr=a,this.message="Failed to parse "+e+" as a valid "+t+" format key: "+a.message}function s(e,t,a){Error.captureStackTrace&&Error.captureStackTrace(this,s),this.name="SignatureParseError",this.type=e,this.format=t,this.innerErr=a,this.message="Failed to parse the given data as a "+e+" signature in "+t+" format: "+a.message}function u(e,t,a){Error.captureStackTrace&&Error.captureStackTrace(this,u),this.name="CertificateParseError",this.format=t,this.certName=e,this.innerErr=a,this.message="Failed to parse "+e+" as a valid "+t+" format certificate: "+a.message}function c(e,t){Error.captureStackTrace&&Error.captureStackTrace(this,c),this.name="KeyEncryptedError",this.format=t,this.keyName=e,this.message="The "+t+" format key "+e+" is encrypted (password-protected), and no passphrase was provided in `options`"}i.inherits(r,Error),i.inherits(o,Error),i.inherits(n,Error),i.inherits(s,Error),i.inherits(u,Error),i.inherits(c,Error),e.exports={FingerprintFormatError:r,InvalidAlgorithmError:o,KeyParseError:n,SignatureParseError:s,KeyEncryptedError:c,CertificateParseError:u}},function(e,t,a){"use strict";t.NO_HOST_ERROR="Missing 'host' property.",t.NO_CONSUMER_KEY_ERROR="Missing 'oauth_consumer_key' property.",t.NO_PRIVATE_KEY_ERROR="Missing 'oauth_private_key' property.",t.NO_OAUTH_TOKEN_ERROR="Missing 'oauth_token' property.",t.NO_OAUTH_TOKEN_SECRET_ERROR="Missing 'oauth_token_secret' property.",t.NO_USERNAME_ERROR="Missing 'username' property.",t.NO_PASSWORD_ERROR="Missing 'password' property.",t.NO_AUTHENTICATION_ERROR="Missing 'auth' property.",t.NO_VERIFIER_ERROR="Missing 'oauth_verifier' property.",t.INVALID_AUTHENTICATION_PROPERTY_ERROR="Invalid 'auth' property.",t.NO_ISSUE_IDENTIFIER="Missing Issue ID or Key",t.NO_COMMENT_ID="Missing 'commentID' property.",t.NO_COMMENT_ERROR="Missing 'comment' property.",t.NO_NOTIFICATION_ERROR="Missing 'notification' property",t.NO_GLOBAL_ID_ERROR="Missing 'globalId' property.",t.NO_LINK_ID_ERROR="Missing 'linkId' property.",t.NO_TRANSITION_ERROR="Missing 'transition' property.",t.NO_ISSUE_ERROR="Missing 'issue' property",t.NO_ASSIGNEE_ERROR="Missing 'assignee' property",t.NO_WATCHER_ERROR="Missing 'watcher' property",t.NO_WORKLOG_ERROR="Missing 'worklog' property",t.NO_WORKLOG_ID_ERROR="Missing 'worklogId' property",t.NO_FILENAME_ERROR="Missing 'filename' property",t.NO_PROPERTY_KEY_ERROR="Missing 'propertyKey' property",t.NO_PROPERTY_VALUE_ERROR="Missing 'propertyValue' property",t.NO_ATTACHMENT_ID_ERROR="Missing 'attachmentId' property",t.NO_AUDIT_ERROR="Missing 'audit' property",t.NO_AVATAR_TYPE_ERROR="Missing 'avatarType' property",t.NO_COMMENT_PROPERTY_KEY_ERROR="Missing 'propertyKey' property",t.NO_COMMENT_PROPERTY_VALUE_ERROR="Missing 'propertyValue' property",t.NO_ISSUE_LINK_ERROR="Missing'issueLink' property",t.NO_ISSUE_LINK_ID_ERROR="Missing'linkId' property",t.NO_ISSUE_LINK_TYPE_ID="Missing 'issueLinkTypeId' property.",t.NO_FIELD_OPTION_ID_ERROR="Missing 'fieldOptionId' property."},function(e,t,a){e.exports=l;var i=a(0),r=a(3).Buffer,o=(a(7),a(2),a(9)),n=a(5),s=a(12),u=a(28),c=o.InvalidAlgorithmError,p=o.SignatureParseError;function l(e){i.object(e,"options"),i.arrayOfObject(e.parts,"options.parts"),i.string(e.type,"options.type");for(var t={},a=0;a<e.parts.length;++a){var r=e.parts[a];t[r.name]=r}this.type=e.type,this.hashAlgorithm=e.hashAlgo,this.curve=e.curve,this.parts=e.parts,this.part=t}function m(e,t,a,r){if("ssh"===a){try{var o=new u({buffer:e}),n=o.readString()}catch(e){}if(void 0!==o){var s="SSH signature does not match expected type (expected "+t+", got "+n+")";switch(n){case"ssh-rsa":i.strictEqual(t,"rsa",s),r.hashAlgo="sha1";break;case"rsa-sha2-256":i.strictEqual(t,"rsa",s),r.hashAlgo="sha256";break;case"rsa-sha2-512":i.strictEqual(t,"rsa",s),r.hashAlgo="sha512";break;case"ssh-ed25519":i.strictEqual(t,"ed25519",s),r.hashAlgo="sha512";break;default:throw new Error("Unknown SSH signature type: "+n)}var c=o.readPart();return i.ok(o.atEnd(),"extra trailing bytes"),c.name="sig",r.parts.push(c),new l(r)}}return r.parts.push({name:"sig",data:e}),new l(r)}l.prototype.toBuffer=function(e){var t;void 0===e&&(e="asn1"),i.string(e,"format");var a="ssh-"+this.type;switch(this.type){case"rsa":switch(this.hashAlgorithm){case"sha256":a="rsa-sha2-256";break;case"sha512":a="rsa-sha2-512";break;case"sha1":case void 0:break;default:throw new Error("SSH signature format does not support hash algorithm "+this.hashAlgorithm)}return"ssh"===e?((t=new u({})).writeString(a),t.writePart(this.part.sig),t.toBuffer()):this.part.sig.data;case"ed25519":return"ssh"===e?((t=new u({})).writeString(a),t.writePart(this.part.sig),t.toBuffer()):this.part.sig.data;case"dsa":case"ecdsa":var o,c;if("asn1"===e){var p=new s.BerWriter;return p.startSequence(),o=n.mpNormalize(this.part.r.data),c=n.mpNormalize(this.part.s.data),p.writeBuffer(o,s.Ber.Integer),p.writeBuffer(c,s.Ber.Integer),p.endSequence(),p.buffer}if("ssh"===e&&"dsa"===this.type){if((t=new u({})).writeString("ssh-dss"),(o=this.part.r.data).length>20&&0===o[0]&&(o=o.slice(1)),(c=this.part.s.data).length>20&&0===c[0]&&(c=c.slice(1)),this.hashAlgorithm&&"sha1"!==this.hashAlgorithm||o.length+c.length!==40)throw new Error("OpenSSH only supports DSA signatures with SHA1 hash");return t.writeBuffer(r.concat([o,c])),t.toBuffer()}if("ssh"===e&&"ecdsa"===this.type){var l,m=new u({});o=this.part.r.data,m.writeBuffer(o),m.writePart(this.part.s),t=new u({}),0===o[0]&&(o=o.slice(1));var h=8*o.length;return 256===h?l="nistp256":384===h?l="nistp384":528===h&&(l="nistp521"),t.writeString("ecdsa-sha2-"+l),t.writeBuffer(m.toBuffer()),t.toBuffer()}throw new Error("Invalid signature format");default:throw new Error("Invalid signature data")}},l.prototype.toString=function(e){return i.optionalString(e,"format"),this.toBuffer(e).toString("base64")},l.parse=function(e,t,a){"string"==typeof e&&(e=r.from(e,"base64")),i.buffer(e,"data"),i.string(a,"format"),i.string(t,"type");var o={};o.type=t.toLowerCase(),o.parts=[];try{switch(i.ok(e.length>0,"signature must not be empty"),o.type){case"rsa":case"ed25519":return m(e,t,a,o);case"dsa":case"ecdsa":return"asn1"===a?function(e,t,a,i){var r=new s.BerReader(e);r.readSequence();var o=r.readString(s.Ber.Integer,!0),u=r.readString(s.Ber.Integer,!0);return i.parts.push({name:"r",data:n.mpNormalize(o)}),i.parts.push({name:"s",data:n.mpNormalize(u)}),new l(i)}(e,0,0,o):"dsa"===o.type?function(e,t,a,r){if(40!=e.length){var o=new u({buffer:e}),n=o.readBuffer();"ssh-dss"===n.toString("ascii")&&(n=o.readBuffer()),i.ok(o.atEnd(),"extra trailing bytes"),i.strictEqual(n.length,40,"invalid inner length"),e=n}return r.parts.push({name:"r",data:e.slice(0,20)}),r.parts.push({name:"s",data:e.slice(20,40)}),new l(r)}(e,0,0,o):function(e,t,a,r){var o,n,s=new u({buffer:e}),c=s.readBuffer(),p=c.toString("ascii");if("ecdsa-"===p.slice(0,6)){var m=p.split("-");switch(i.strictEqual(m[0],"ecdsa"),i.strictEqual(m[1],"sha2"),r.curve=m[2],r.curve){case"nistp256":r.hashAlgo="sha256";break;case"nistp384":r.hashAlgo="sha384";break;case"nistp521":r.hashAlgo="sha512";break;default:throw new Error("Unsupported ECDSA curve: "+r.curve)}c=s.readBuffer(),i.ok(s.atEnd(),"extra trailing bytes on outer"),s=new u({buffer:c}),o=s.readPart()}else o={data:c};return n=s.readPart(),i.ok(s.atEnd(),"extra trailing bytes"),o.name="r",n.name="s",r.parts.push(o),r.parts.push(n),new l(r)}(e,0,0,o);default:throw new c(t)}}catch(e){if(e instanceof c)throw e;throw new p(t,a,e)}},l.isSignature=function(e,t){return n.isCompatible(e,l,t)},l.prototype._sshpkApiVersion=[2,1],l._oldVersionDetect=function(e){return i.func(e.toBuffer),e.hasOwnProperty("hashAlgorithm")?[2,0]:[1,0]}},function(e,t,a){var i=a(112);e.exports={Ber:i,BerReader:i.Reader,BerWriter:i.Writer}},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t,a){e.exports={read:function(e,t,a){var u=e;"string"!=typeof e&&(i.buffer(e,"buf"),e=e.toString("ascii"));var c,y,k=e.trim().split(/[\r\n]+/g),j=-1;for(;!c&&j<k.length;)c=k[++j].match(/[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);i.ok(c,"invalid PEM header");var w=k.length;for(;!y&&w>0;)y=k[--w].match(/[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);i.ok(y,"invalid PEM footer"),i.equal(c[2],y[2]);var x,E=c[2].toLowerCase();c[1]&&(i.equal(c[1],y[1],"PEM header and footer mismatch"),x=c[1].trim());k=k.slice(j,w+1);var S,_,R,A={};for(;k=k.slice(1),c=k[0].match(/^([A-Za-z0-9-]+): (.+)$/);)A[c[1].toLowerCase()]=c[2];if(k=k.slice(0,-1).join(""),e=n.from(k,"base64"),A["proc-type"]){var C=A["proc-type"].split(",");if("4"===C[0]&&"ENCRYPTED"===C[1]){if("string"==typeof t.passphrase&&(t.passphrase=n.from(t.passphrase,"utf-8")),!n.isBuffer(t.passphrase))throw new d.KeyEncryptedError(t.filename,"PEM");C=A["dek-info"].split(","),i.ok(2===C.length),S=C[0].toLowerCase(),R=n.from(C[1],"hex"),_=s.opensslKeyDeriv(S,R,t.passphrase,1).key}}if(x&&"encrypted"===x.toLowerCase()){var q,O=new r.BerReader(e);O.readSequence(),O.readSequence(),q=O.offset+O.length;var P=O.readOID();if(P!==f)throw new Error("Unsupported PEM/PKCS8 encryption scheme: "+P);O.readSequence(),O.readSequence();var F=O.offset+O.length,z=O.readOID();if(z!==g)throw new Error("Unsupported PBES2 KDF: "+z);O.readSequence();var T=O.readString(r.Ber.OctetString,!0),I=O.readInt(),D="sha1";if(O.offset<F){O.readSequence();var B=O.readOID();if(void 0===(D=b[B]))throw new Error("Unsupported PBKDF2 hash: "+B)}O._offset=F,O.readSequence();var L=O.readOID();if(void 0===(S=v[L]))throw new Error("Unsupported PBES2 cipher: "+L);if(R=O.readString(r.Ber.OctetString,!0),O._offset=q,e=O.readString(r.Ber.OctetString,!0),"string"==typeof t.passphrase&&(t.passphrase=n.from(t.passphrase,"utf-8")),!n.isBuffer(t.passphrase))throw new d.KeyEncryptedError(t.filename,"PEM");var U=s.opensshCipherInfo(S);S=U.opensslName,_=s.pbkdf2(D,T,I,U.keySize,t.passphrase),x=void 0}if(S&&_&&R){var N,H=o.createDecipheriv(S,_,R),M=[];for(H.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),H.write(e),H.end();null!==(N=H.read());)M.push(N);e=n.concat(M)}if(x&&"openssh"===x.toLowerCase())return m.readSSHPrivate(E,e,t);if(x&&"ssh2"===x.toLowerCase())return h.readType(E,e,t);var K=new r.BerReader(e);return K.originalInput=u,K.readSequence(),x?(a&&i.strictEqual(a,"pkcs1"),p.readPkcs1(x,E,K)):(a&&i.strictEqual(a,"pkcs8"),l.readPkcs8(x,E,K))},write:function(e,t,a){i.object(e);var o,s={ecdsa:"EC",rsa:"RSA",dsa:"DSA",ed25519:"EdDSA"}[e.type],m=new r.BerWriter;if(c.isPrivateKey(e))a&&"pkcs8"===a?(o="PRIVATE KEY",l.writePkcs8(m,e)):(a&&i.strictEqual(a,"pkcs1"),o=s+" PRIVATE KEY",p.writePkcs1(m,e));else{if(!u.isKey(e))throw new Error("key is not a Key or PrivateKey");a&&"pkcs1"===a?(o=s+" PUBLIC KEY",p.writePkcs1(m,e)):(a&&i.strictEqual(a,"pkcs8"),o="PUBLIC KEY",l.writePkcs8(m,e))}var h=m.buffer.toString("base64"),d=h.length+h.length/64+18+16+2*o.length+10,f=n.alloc(d),g=0;g+=f.write("-----BEGIN "+o+"-----\n",g);for(var v=0;v<h.length;){var y=v+64;y>h.length&&(y=h.length),g+=f.write(h.slice(v,y),g),f[g++]=10,v=y}return g+=f.write("-----END "+o+"-----\n",g),f.slice(0,g)}};var i=a(0),r=a(12),o=a(2),n=a(3).Buffer,s=(a(7),a(5)),u=a(4),c=a(6),p=a(42),l=a(29),m=a(34),h=a(16),d=a(9),f="1.2.840.113549.1.5.13",g="1.2.840.113549.1.5.12",v={"1.2.840.113549.3.7":"3des-cbc","2.16.840.1.101.3.4.1.2":"aes128-cbc","2.16.840.1.101.3.4.1.42":"aes256-cbc"},y={};Object.keys(v).forEach(function(e){y[v[e]]=e});var b={"1.2.840.113549.2.7":"sha1","1.2.840.113549.2.9":"sha256","1.2.840.113549.2.11":"sha512"},k={};Object.keys(b).forEach(function(e){k[b[e]]=e})},function(e,t,a){e.exports={read:m.bind(void 0,!1,void 0),readType:m.bind(void 0,!1),write:function(e,t){i.object(e);var a,s=l(e),p=o.info[e.type];u.isPrivateKey(e)&&(p=o.privInfo[e.type]);var m=p.parts,h=new c({});for(h.writeString(s),a=0;a<m.length;++a){var d=e.part[m[a]].data;!1!==p.normalize&&(d="ed25519"===e.type?n.zeroPadToLength(d,32):n.mpNormalize(d)),"ed25519"===e.type&&"k"===m[a]&&(d=r.concat([d,e.part.A.data])),h.writeBuffer(d)}return h.toBuffer()},readPartial:m.bind(void 0,!0),readInternal:m,keyTypeToAlg:l,algToKeyType:p};var i=a(0),r=a(3).Buffer,o=a(7),n=a(5),s=a(4),u=a(6),c=a(28);function p(e){if(i.string(e),"ssh-dss"===e)return"dsa";if("ssh-rsa"===e)return"rsa";if("ssh-ed25519"===e)return"ed25519";if("ssh-curve25519"===e)return"curve25519";if(e.match(/^ecdsa-sha2-/))return"ecdsa";throw new Error("Unknown algorithm "+e)}function l(e){if(i.object(e),"dsa"===e.type)return"ssh-dss";if("rsa"===e.type)return"ssh-rsa";if("ed25519"===e.type)return"ssh-ed25519";if("curve25519"===e.type)return"ssh-curve25519";if("ecdsa"===e.type)return"ecdsa-sha2-"+e.part.curve.data.toString();throw new Error("Unknown key type "+e.type)}function m(e,t,a,l){"string"==typeof a&&(a=r.from(a)),i.buffer(a,"buf");var m={},h=m.parts=[],d=new c({buffer:a}),f=d.readString();i.ok(!d.atEnd(),"key must have at least one part"),m.type=p(f);var g=o.info[m.type].parts.length;for(t&&"private"===t&&(g=o.privInfo[m.type].parts.length);!d.atEnd()&&h.length<g;)h.push(d.readPart());for(;!e&&!d.atEnd();)h.push(d.readPart());i.ok(h.length>=1,"key must have at least one part"),i.ok(e||d.atEnd(),"leftover bytes at end of key");var v=s,y=o.info[m.type];if("private"!==t&&y.parts.length===h.length||(y=o.privInfo[m.type],v=u),i.strictEqual(y.parts.length,h.length),"ecdsa"===m.type){var b=/^ecdsa-sha2-(.+)$/.exec(f);i.ok(null!==b),i.strictEqual(b[1],h[0].data.toString())}for(var k=!0,j=0;j<y.parts.length;++j){var w,x=h[j];if(x.name=y.parts[j],"ed25519"===m.type&&"k"===x.name&&(x.data=x.data.slice(0,32)),"curve"!==x.name&&!1!==y.normalize)(w="ed25519"===m.type?n.zeroPadToLength(x.data,32):n.mpNormalize(x.data)).toString("binary")!==x.data.toString("binary")&&(x.data=w,k=!1)}return k&&(m._rfc4253Cache=d.toBuffer()),e&&"object"==typeof e&&(e.remainder=d.remainder(),e.consumed=d._offset),new v(m)}},function(e,t,a){"use strict";function i(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var r=i(a(87)),o=i(a(88)),n=i(a(89)),s=i(a(90)),u=i(a(2)),c=a(91),p=i(a(92)),l=i(a(93)),m=a(1),h=a(14),d=i(h),f=i(a(13));const g={chat:{read:[["messages",null,"msg","reactions","reactions",null]]}};function v(e,t){if(!e)return e;const a={...e};return a.parent?(a.parent=a.parent.slice(),a.parent.push(t)):a.parent=[t],a}function y(e,t){return null==e||"object"!=typeof e?e:Array.isArray(e)?e.map((e,a)=>y(e,v(t,a))):Object.keys(e).reduce((a,i)=>{const r=function(e){if(!e||!g[e.apiName]||!g[e.apiName][e.method])return!1;const t=e.parent?e.parent.length:0;for(const a of g[e.apiName][e.method]){if(a.length!==t)continue;let i=!1;for(const[t,r]of a.entries())if(null!==r&&"object"==typeof e.parent&&e.parent[t]!==r){i=!0;break}if(!i)return!0}return!1}(t)?i:o(i);return"object"==typeof e[i]?{...a,[r]:y(e[i],v(t,i))}:{...a,[r]:e[i]}},{})}const b=(e,t,a,i={stdinBuffer:void 0,onStdOut:void 0})=>{const r=[...a];t&&r.unshift("--home",t);const o=c.spawn(f.join(e,"keybase"),r),n=[],s=[];i.stdinBuffer&&o.stdin.write(i.stdinBuffer),o.stdin.end();const u=p.createInterface({input:o.stdout});return i.onStdOut?u.on("line",i.onStdOut):o.stdout.on("data",e=>{n.push(e)}),o.stderr.on("data",e=>{s.push(e)}),new Promise((e,t)=>{o.on("close",a=>{let r=null;if(a){const e=Buffer.concat(s).toString("utf8");t(new Error(e))}else{const e=Buffer.concat(n).toString("utf8");try{r=i.json?JSON.parse(e):e}catch(e){t(e)}}e(r)})})};async function k(e,t){const a=await b(e,t,["status","--json"],{json:!0});if(a&&a.Username&&a.Device&&a.Device.name)return{username:a.Username,devicename:a.Device.name,homeDir:t};throw new Error("Failed to get current username and device name.")}async function j(e,t){try{return await b(e,t,["--no-auto-fork","status","--json"],{json:!0}),!0}catch(e){return!1}}const w=m.promisify(c.exec);function x(e){return new Promise(t=>{setTimeout(()=>{t()},e)})}class E{constructor(e){this.workingDir=e,this.initialized=!1,this.verbose=!1,this.botLite=!0,this.disableTyping=!0}async init(e,t,a){if(!e||"string"!=typeof e)throw new Error(`Please provide a username to initialize the bot. Got: ${JSON.stringify(e)}`);if(!t||"string"!=typeof t)throw new Error("Please provide a paperkey to initialize the bot.");if(this.initialized)throw new Error("Cannot initialize an already initialized bot.");this.homeDir=this.workingDir,this.serviceLogFile=f.join(this.homeDir,"Library","Logs","keybase.service.log"),this.botLite=!a||Boolean("boolean"!=typeof a.botLite||a.botLite),this.disableTyping=!a||Boolean("boolean"!=typeof a.disableTyping||a.disableTyping);try{await this.startupService(),await b(this.workingDir,this.homeDir,["oneshot","--username",e],{stdinBuffer:t}),await b(this.workingDir,this.homeDir,["chat","notification-settings","disable-typing",this.disableTyping.toString()]);const i=await k(this.workingDir,this.homeDir);if(i&&i.username&&i.devicename&&(this.initialized="paperkey",this.username=i.username,this.devicename=i.devicename,this.verbose=!!a&&Boolean(a.verbose)),this.username!==e)throw new Error("Failed to initialize service.")}catch(e){throw await this._killCustomService(),e}}async initFromRunningService(e,t){if(this.initialized)throw new Error("Cannot initialize an already initialized bot.");this.homeDir=e;const a=await k(this.workingDir,this.homeDir);a&&a.username&&a.devicename&&(this.initialized="runningService",this.username=a.username,this.devicename=a.devicename,this.verbose=!!t&&Boolean(t.verbose))}async _killCustomService(){try{await b(this.workingDir,this.homeDir,["logout"])}catch(e){}try{await b(this.workingDir,this.homeDir,["ctl","stop","--shutdown"])}catch(e){}let e=0;for(;await x(100),this.running;)if(++e>=100)throw new Error(`The service didn't finish shutting down in time (${this.workingDir})`)}async deinit(){if(!this.initialized)throw new Error("Cannot deinitialize an uninitialized bot.");"paperkey"===this.initialized&&await this._killCustomService(),this.initialized=!1}myInfo(){return this.username&&this.devicename?{username:this.username,devicename:this.devicename,homeDir:this.homeDir?this.homeDir:void 0,botLite:this.botLite,disableTyping:this.disableTyping}:null}async startupService(){const e=["service"];this.homeDir&&e.unshift("--home",this.homeDir),this.serviceLogFile&&e.unshift("-d","--log-file",this.serviceLogFile),this.botLite&&e.unshift("--enable-bot-lite-mode");const t=c.spawn("keybase",e,{env:process.env});return this.running=!0,t.on("exit",e=>{this.running=!1}),new Promise(async(e,a)=>{t.on("close",e=>{a(new Error(`keybase service exited with code ${e} (${this.workingDir})`))});let i=0;for(;!await j(this.workingDir,this.homeDir);)if(await x(100),++i>=100)throw new Error("Couldn't start up service fast enough");e()})}}const S={chat:1,team:1,wallet:1};class _{constructor(e){this._workingDir=e,this.initialized=!1,this.verbose=!1,this.spawnedProcesses=[]}async _init(e,t){const a=await k(this._workingDir,e);this.homeDir=e,this.username=a.username,this.devicename=a.devicename,this.initialized=!0}async _deinit(){for(const e of this.spawnedProcesses)e.kill()}async _runApiCommand(e){const t=e.options?function e(t,a){return null==t||"object"!=typeof t?t:Array.isArray(t)?t.map(t=>e(t,a)):Object.keys(t).reduce((i,o)=>{let s;return s="wallet"===a?n(o):r(o),"object"==typeof t[o]?{...i,[s]:e(t[o],a)}:{...i,[s]:t[o]}},{})}(e.options,e.apiName):void 0,a={method:e.method,params:{version:S[e.apiName],options:t}},i=JSON.stringify(a),o=i.length,s=await b(this._workingDir,this.homeDir,[e.apiName,"api"],{stdinBuffer:Buffer.alloc(o,i,"utf8"),json:!0});if(s.hasOwnProperty("error"))throw new Error(s.error.message);return y(s.result,{apiName:e.apiName,method:e.method})}async _guardInitialized(){if(!this.initialized)throw new Error("The client is not yet initialized.")}_pathToKeybaseBinary(){return f.join(this._workingDir,"keybase")}}class R extends _{async list(e){await this._guardInitialized();const t=await this._runApiCommand({apiName:"chat",method:"list",options:e});if(!t)throw new Error("Keybase chat list returned nothing.");return t.conversations||[]}async listChannels(e,t){await this._guardInitialized();const a={...t,name:e,membersType:t&&t.membersType?t.membersType:"team"},i=await this._runApiCommand({apiName:"chat",method:"listconvsonname",options:a});if(!i)throw new Error("Keybase chat list convs on name returned nothing.");return i.conversations||[]}async read(e,t){await this._guardInitialized();const a={...t,channel:e,peek:!(!t||!t.peek)&&t.peek,unreadOnly:!(!t||void 0===t.unreadOnly)&&t.unreadOnly},i=await this._runApiCommand({apiName:"chat",method:"read",options:a});if(!i)throw new Error("Keybase chat read returned nothing.");return{pagination:i.pagination,messages:i.messages.map(e=>e.msg)}}async joinChannel(e){if(await this._guardInitialized(),!await this._runApiCommand({apiName:"chat",method:"join",options:{channel:e}}))throw new Error("Keybase chat join returned nothing")}async leaveChannel(e){if(await this._guardInitialized(),!await this._runApiCommand({apiName:"chat",method:"leave",options:{channel:e}}))throw new Error("Keybase chat leave returned nothing")}async send(e,t,a){await this._guardInitialized();const i={...a,channel:e,message:t},r=await this._runApiCommand({apiName:"chat",method:"send",options:i});if(!r)throw new Error("Keybase chat send returned nothing");return{id:r.id}}async createChannel(e){await this._guardInitialized();const t={channel:e};if(!await this._runApiCommand({apiName:"chat",method:"newconv",options:t}))throw new Error("Keybase chat newconv returned nothing")}async attach(e,t,a){await this._guardInitialized();const i={...a,channel:e,filename:t},r=await this._runApiCommand({apiName:"chat",method:"attach",options:i});if(!r)throw new Error("Keybase chat attach returned nothing");return{id:r.id}}async download(e,t,a,i){await this._guardInitialized();const r={...i,channel:e,messageId:t,output:a};if(!await this._runApiCommand({apiName:"chat",method:"download",options:r}))throw new Error("Keybase chat download returned nothing")}async react(e,t,a,i){await this._guardInitialized();const r={...i,channel:e,messageId:t,message:{body:a}},o=await this._runApiCommand({apiName:"chat",method:"reaction",options:r});if(!o)throw new Error("Keybase chat react returned nothing.");return{id:o.id}}async delete(e,t,a){await this._guardInitialized();const i={...a,channel:e,messageId:t};if(!await this._runApiCommand({apiName:"chat",method:"delete",options:i}))throw new Error("Keybase chat delete returned nothing.")}async watchChannelForNewMessages(e,t,a,i){await this._guardInitialized(),this._chatListen(t,a,e,i)}async watchAllChannelsForNewMessages(e,t,a){await this._guardInitialized(),this._chatListen(e,t,void 0,a)}_channelMatch(e,t){const a=void 0!==e.public&&e.public,i=void 0===e.topicType?"chat":e.topicType,r=void 0===e.topicName?"general":e.topicName;return t.name===e.name&&t.public===a&&t.topicType===i&&t.topicName===r}_chatListen(e,t,a,i){const r=["chat","api-listen"];this.homeDir&&r.unshift("--home",this.homeDir),(!i||i&&!1!==i.hideExploding)&&r.push("--hide-exploding");const o=c.spawn(this._pathToKeybaseBinary(),r);this.spawnedProcesses.push(o);p.createInterface({input:o.stdout}).on("line",i=>{try{const r=y(JSON.parse(i));if(r.hasOwnProperty("error"))throw new Error(r.error);a&&!this._channelMatch(a,r.msg.channel.topicName)||!this.username||!this.devicename||r.msg.sender.username===this.username.toLowerCase()&&r.msg.sender.deviceName===this.devicename||e(r.msg)}catch(e){t&&t(e)}})}}class A extends _{async balances(){await this._guardInitialized();const e=await this._runApiCommand({apiName:"wallet",method:"balances"});if(!e)throw new Error("Keybase wallet balanaces returned nothing.");return e||[]}async history(e){await this._guardInitialized();const t={accountId:e},a=await this._runApiCommand({apiName:"wallet",method:"history",options:t});if(!a)throw new Error("Keybase wallet history returned nothing.");return a.map(e=>e.payment)}async details(e){await this._guardInitialized();const t={txid:e},a=await this._runApiCommand({apiName:"wallet",method:"details",options:t});if(!a)throw new Error("Keybase wallet details returned nothing.");return a}async lookup(e){await this._guardInitialized();const t={name:e},a=await this._runApiCommand({apiName:"wallet",method:"lookup",options:t});if(!a)throw new Error("Keybase wallet lookup returned nothing.");return a}async send(e,t,a,i){await this._guardInitialized();const r={recipient:e,amount:t,currency:a,message:i},o=await this._runApiCommand({apiName:"wallet",method:"send",options:r});if(!o)throw new Error("Keybase wallet send returned nothing.");return o}async batch(e,t){await this._guardInitialized();const a={batchId:e,payments:t},i=await this._runApiCommand({apiName:"wallet",method:"batch",options:a});if(!i)throw new Error("Keybase wallet batch returned nothing.");return i}async cancel(e){await this._guardInitialized();const t={txid:e};if(!await this._runApiCommand({apiName:"wallet",method:"cancel",options:t}))throw new Error("Keybase wallet cancel returned nothing.")}}e.exports=class{constructor(){this._workingDir=function(){const e=u.randomBytes(16).toString("hex");return f.join(s.tmpdir(),`keybase_bot_${e}`)}(),this._service=new E(this._workingDir),this.chat=new R(this._workingDir),this.wallet=new A(this._workingDir)}async init(e,t,a){await this._prepWorkingDir(),await this._service.init(e,t,a),await this._initSubBots(a)}async initFromRunningService(e,t){await this._prepWorkingDir(),await this._service.initFromRunningService(e,t),await this._initSubBots(t)}myInfo(){return this._service.myInfo()}async deinit(){await this.chat._deinit(),await this._service.deinit(),await async function e(t){const a=m.promisify(d.lstat),i=m.promisify(d.unlink),r=m.promisify(d.rmdir),o=m.promisify(d.readdir);if(await a(t)){for(const r of await o(t)){const o=f.join(t,r);(await a(o)).isDirectory()?await e(o):await i(o)}await r(t)}}(this._workingDir)}async _prepWorkingDir(){const e=await async function(){const{stdout:e}=await w("which keybase");if(!e||!e.trim().length)throw new Error("Could not find keybase binary");return e.trim()}(),t=f.join(this._workingDir,"keybase");await m.promisify(l)(this._workingDir),await m.promisify(h.copyFile)(e,t)}async _initSubBots(e){const t=this.myInfo();if(!t)throw new Error("Issue initializing bot.");await this.chat._init(t.homeDir,e),await this.wallet._init(t.homeDir,e)}}},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("stream")},function(e,t){e.exports=require("assert")},function(e,t,a){"use strict";function i(e,t,a){var i=a?" !== ":" === ",r=a?" || ":" && ",o=a?"!":"",n=a?"":"!";switch(e){case"null":return t+i+"null";case"array":return o+"Array.isArray("+t+")";case"object":return"("+o+t+r+"typeof "+t+i+'"object"'+r+n+"Array.isArray("+t+"))";case"integer":return"(typeof "+t+i+'"number"'+r+n+"("+t+" % 1)"+r+t+i+t+")";default:return"typeof "+t+i+'"'+e+'"'}}e.exports={copy:function(e,t){for(var a in t=t||{},e)t[a]=e[a];return t},checkDataType:i,checkDataTypes:function(e,t){switch(e.length){case 1:return i(e[0],t,!0);default:var a="",r=o(e);for(var n in r.array&&r.object&&(a=r.null?"(":"(!"+t+" || ",a+="typeof "+t+' !== "object")',delete r.null,delete r.array,delete r.object),r.number&&delete r.integer,r)a+=(a?" && ":"")+i(n,t,!0);return a}},coerceToTypes:function(e,t){if(Array.isArray(t)){for(var a=[],i=0;i<t.length;i++){var o=t[i];r[o]?a[a.length]=o:"array"===e&&"array"===o&&(a[a.length]=o)}if(a.length)return a}else{if(r[t])return[t];if("array"===e&&"array"===t)return["array"]}},toHash:o,getProperty:u,escapeQuotes:c,equal:a(46),ucs2length:a(148),varOccurences:function(e,t){t+="[^0-9]";var a=e.match(new RegExp(t,"g"));return a?a.length:0},varReplace:function(e,t,a){return t+="([^0-9])",a=a.replace(/\$/g,"$$$$"),e.replace(new RegExp(t,"g"),a+"$1")},cleanUpCode:function(e){return e.replace(p,"").replace(l,"").replace(m,"if (!($1))")},finalCleanUpCode:function(e,t){var a=e.match(h);a&&2==a.length&&(e=t?e.replace(f,"").replace(y,b):e.replace(d,"").replace(g,v));return(a=e.match(k))&&3===a.length?e.replace(j,""):e},schemaHasRules:function(e,t){if("boolean"==typeof e)return!e;for(var a in e)if(t[a])return!0},schemaHasRulesExcept:function(e,t,a){if("boolean"==typeof e)return!e&&"not"!=a;for(var i in e)if(i!=a&&t[i])return!0},toQuotedString:w,getPathExpr:function(e,t,a,i){return S(e,a?"'/' + "+t+(i?"":".replace(/~/g, '~0').replace(/\\//g, '~1')"):i?"'[' + "+t+" + ']'":"'[\\'' + "+t+" + '\\']'")},getPath:function(e,t,a){var i=w(a?"/"+_(t):u(t));return S(e,i)},getData:function(e,t,a){var i,r,o,n;if(""===e)return"rootData";if("/"==e[0]){if(!x.test(e))throw new Error("Invalid JSON-pointer: "+e);r=e,o="rootData"}else{if(!(n=e.match(E)))throw new Error("Invalid JSON-pointer: "+e);if(i=+n[1],"#"==(r=n[2])){if(i>=t)throw new Error("Cannot access property/index "+i+" levels up, current level is "+t);return a[t-i]}if(i>t)throw new Error("Cannot access data "+i+" levels up, current level is "+t);if(o="data"+(t-i||""),!r)return o}for(var s=o,c=r.split("/"),p=0;p<c.length;p++){var l=c[p];l&&(o+=u(R(l)),s+=" && "+o)}return s},unescapeFragment:function(e){return R(decodeURIComponent(e))},unescapeJsonPointer:R,escapeFragment:function(e){return encodeURIComponent(_(e))},escapeJsonPointer:_};var r=o(["string","number","integer","boolean","null"]);function o(e){for(var t={},a=0;a<e.length;a++)t[e[a]]=!0;return t}var n=/^[a-z$_][a-z$_0-9]*$/i,s=/'|\\/g;function u(e){return"number"==typeof e?"["+e+"]":n.test(e)?"."+e:"['"+c(e)+"']"}function c(e){return e.replace(s,"\\$&").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\f/g,"\\f").replace(/\t/g,"\\t")}var p=/else\s*{\s*}/g,l=/if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g,m=/if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;var h=/[^v.]errors/g,d=/var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g,f=/var errors = 0;|var vErrors = null;/g,g="return errors === 0;",v="validate.errors = null; return true;",y=/if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/,b="return data;",k=/[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g,j=/if \(rootData === undefined\) rootData = data;/;function w(e){return"'"+c(e)+"'"}var x=/^\/(?:[^~]|~0|~1)*$/,E=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function S(e,t){return'""'==e?t:(e+" + "+t).replace(/' \+ '/g,"")}function _(e){return e.replace(/~/g,"~0").replace(/\//g,"~1")}function R(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}},function(e,t,a){var i=a(55),r=i.Buffer;function o(e,t){for(var a in e)t[a]=e[a]}function n(e,t,a){return r(e,t,a)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?e.exports=i:(o(i,t),t.Buffer=n),o(r,n),n.from=function(e,t,a){if("number"==typeof e)throw new TypeError("Argument must not be a number");return r(e,t,a)},n.alloc=function(e,t,a){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=r(e);return void 0!==t?"string"==typeof a?i.fill(t,a):i.fill(t):i.fill(0),i},n.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r(e)},n.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},function(e,t){e.exports=require("querystring")},function(e,t,a){e.exports=d;var i=a(0),r=a(3).Buffer,o=a(7),n=a(2),s=a(9),u=a(4),c=a(6),p=a(30),l=a(5),m=s.FingerprintFormatError,h=s.InvalidAlgorithmError;function d(e){if(i.object(e,"options"),i.string(e.type,"options.type"),i.buffer(e.hash,"options.hash"),i.string(e.algorithm,"options.algorithm"),this.algorithm=e.algorithm.toLowerCase(),!0!==o.hashAlgs[this.algorithm])throw new h(this.algorithm);this.hash=e.hash,this.type=e.type,this.hashType=e.hashType}d.prototype.toString=function(e){switch(void 0===e&&(e="md5"===this.algorithm||"spki"===this.hashType?"hex":"base64"),i.string(e),e){case"hex":return"spki"===this.hashType?this.hash.toString("hex"):this.hash.toString("hex").replace(/(.{2})(?=.)/g,"$1:");case"base64":return"spki"===this.hashType?this.hash.toString("base64"):function(e,t){return e.toUpperCase()+":"+(a=t,a.replace(/=*$/,""));var a}(this.algorithm,this.hash.toString("base64"));default:throw new m(void 0,e)}},d.prototype.matches=function(e){i.object(e,"key or certificate"),"key"===this.type&&"ssh"!==this.hashType?(l.assertCompatible(e,u,[1,7],"key with spki"),c.isPrivateKey(e)&&l.assertCompatible(e,c,[1,6],"privatekey with spki support")):"key"===this.type?l.assertCompatible(e,u,[1,0],"key"):l.assertCompatible(e,p,[1,0],"certificate");var t=e.hash(this.algorithm,this.hashType),a=n.createHash(this.algorithm).update(t).digest("base64");return void 0===this.hash2&&(this.hash2=n.createHash(this.algorithm).update(this.hash).digest("base64")),this.hash2===a};var f=/^[A-Za-z0-9+\/=]+$/,g=/^[a-fA-F0-9]+$/;d.parse=function(e,t){var a,n,s;i.string(e,"fingerprint"),Array.isArray(t)&&(s=t,t={}),i.optionalObject(t,"options"),void 0===t&&(t={}),void 0!==t.enAlgs&&(s=t.enAlgs),void 0!==t.algorithms&&(s=t.algorithms),i.optionalArrayOfString(s,"algorithms");var u="ssh";void 0!==t.hashType&&(u=t.hashType),i.string(u,"options.hashType");var c=e.split(":");if(2==c.length){if(a=c[0].toLowerCase(),!f.test(c[1]))throw new m(e);try{n=r.from(c[1],"base64")}catch(t){throw new m(e)}}else if(c.length>2){if(a="md5","md5"===c[0].toLowerCase()&&(c=c.slice(1)),c=(c=c.map(function(t){for(;t.length<2;)t="0"+t;if(t.length>2)throw new m(e);return t})).join(""),!g.test(c)||c.length%2!=0)throw new m(e);try{n=r.from(c,"hex")}catch(t){throw new m(e)}}else{if(g.test(e))n=r.from(e,"hex");else{if(!f.test(e))throw new m(e);n=r.from(e,"base64")}switch(n.length){case 32:a="sha256";break;case 16:a="md5";break;case 20:a="sha1";break;case 64:a="sha512";break;default:throw new m(e)}void 0===t.hashType&&(u="spki")}if(void 0===a)throw new m(e);if(void 0===o.hashAlgs[a])throw new h(a);if(void 0!==s&&-1===(s=s.map(function(e){return e.toLowerCase()})).indexOf(a))throw new h(a);return new d({algorithm:a,hash:n,type:t.type||"key",hashType:u})},d.isFingerprint=function(e,t){return l.isCompatible(e,d,t)},d.prototype._sshpkApiVersion=[1,2],d._oldVersionDetect=function(e){return i.func(e.toString),i.func(e.matches),[1,0]}},function(e,t,a){(function(){var t;function a(e,t,a){null!=e&&("number"==typeof e?this.fromNumber(e,t,a):null==t&&"string"!=typeof e?this.fromString(e,256):this.fromString(e,t))}function i(){return new a(null)}var r="undefined"!=typeof navigator;r&&"Microsoft Internet Explorer"==navigator.appName?(a.prototype.am=function(e,t,a,i,r,o){for(var n=32767&t,s=t>>15;--o>=0;){var u=32767&this[e],c=this[e++]>>15,p=s*u+c*n;r=((u=n*u+((32767&p)<<15)+a[i]+(1073741823&r))>>>30)+(p>>>15)+s*c+(r>>>30),a[i++]=1073741823&u}return r},t=30):r&&"Netscape"!=navigator.appName?(a.prototype.am=function(e,t,a,i,r,o){for(;--o>=0;){var n=t*this[e++]+a[i]+r;r=Math.floor(n/67108864),a[i++]=67108863&n}return r},t=26):(a.prototype.am=function(e,t,a,i,r,o){for(var n=16383&t,s=t>>14;--o>=0;){var u=16383&this[e],c=this[e++]>>14,p=s*u+c*n;r=((u=n*u+((16383&p)<<14)+a[i]+r)>>28)+(p>>14)+s*c,a[i++]=268435455&u}return r},t=28),a.prototype.DB=t,a.prototype.DM=(1<<t)-1,a.prototype.DV=1<<t;a.prototype.FV=Math.pow(2,52),a.prototype.F1=52-t,a.prototype.F2=2*t-52;var o,n,s="0123456789abcdefghijklmnopqrstuvwxyz",u=new Array;for(o="0".charCodeAt(0),n=0;n<=9;++n)u[o++]=n;for(o="a".charCodeAt(0),n=10;n<36;++n)u[o++]=n;for(o="A".charCodeAt(0),n=10;n<36;++n)u[o++]=n;function c(e){return s.charAt(e)}function p(e,t){var a=u[e.charCodeAt(t)];return null==a?-1:a}function l(e){var t=i();return t.fromInt(e),t}function m(e){var t,a=1;return 0!=(t=e>>>16)&&(e=t,a+=16),0!=(t=e>>8)&&(e=t,a+=8),0!=(t=e>>4)&&(e=t,a+=4),0!=(t=e>>2)&&(e=t,a+=2),0!=(t=e>>1)&&(e=t,a+=1),a}function h(e){this.m=e}function d(e){this.m=e,this.mp=e.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<e.DB-15)-1,this.mt2=2*e.t}function f(e,t){return e&t}function g(e,t){return e|t}function v(e,t){return e^t}function y(e,t){return e&~t}function b(e){if(0==e)return-1;var t=0;return 0==(65535&e)&&(e>>=16,t+=16),0==(255&e)&&(e>>=8,t+=8),0==(15&e)&&(e>>=4,t+=4),0==(3&e)&&(e>>=2,t+=2),0==(1&e)&&++t,t}function k(e){for(var t=0;0!=e;)e&=e-1,++t;return t}function j(){}function w(e){return e}function x(e){this.r2=i(),this.q3=i(),a.ONE.dlShiftTo(2*e.t,this.r2),this.mu=this.r2.divide(e),this.m=e}h.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},h.prototype.revert=function(e){return e},h.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},h.prototype.mulTo=function(e,t,a){e.multiplyTo(t,a),this.reduce(a)},h.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},d.prototype.convert=function(e){var t=i();return e.abs().dlShiftTo(this.m.t,t),t.divRemTo(this.m,null,t),e.s<0&&t.compareTo(a.ZERO)>0&&this.m.subTo(t,t),t},d.prototype.revert=function(e){var t=i();return e.copyTo(t),this.reduce(t),t},d.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var a=32767&e[t],i=a*this.mpl+((a*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[a=t+this.m.t]+=this.m.am(0,i,e,t,0,this.m.t);e[a]>=e.DV;)e[a]-=e.DV,e[++a]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},d.prototype.mulTo=function(e,t,a){e.multiplyTo(t,a),this.reduce(a)},d.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},a.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e[t]=this[t];e.t=this.t,e.s=this.s},a.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},a.prototype.fromString=function(e,t){var i;if(16==t)i=4;else if(8==t)i=3;else if(256==t)i=8;else if(2==t)i=1;else if(32==t)i=5;else{if(4!=t)return void this.fromRadix(e,t);i=2}this.t=0,this.s=0;for(var r=e.length,o=!1,n=0;--r>=0;){var s=8==i?255&e[r]:p(e,r);s<0?"-"==e.charAt(r)&&(o=!0):(o=!1,0==n?this[this.t++]=s:n+i>this.DB?(this[this.t-1]|=(s&(1<<this.DB-n)-1)<<n,this[this.t++]=s>>this.DB-n):this[this.t-1]|=s<<n,(n+=i)>=this.DB&&(n-=this.DB))}8==i&&0!=(128&e[0])&&(this.s=-1,n>0&&(this[this.t-1]|=(1<<this.DB-n)-1<<n)),this.clamp(),o&&a.ZERO.subTo(this,this)},a.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},a.prototype.dlShiftTo=function(e,t){var a;for(a=this.t-1;a>=0;--a)t[a+e]=this[a];for(a=e-1;a>=0;--a)t[a]=0;t.t=this.t+e,t.s=this.s},a.prototype.drShiftTo=function(e,t){for(var a=e;a<this.t;++a)t[a-e]=this[a];t.t=Math.max(this.t-e,0),t.s=this.s},a.prototype.lShiftTo=function(e,t){var a,i=e%this.DB,r=this.DB-i,o=(1<<r)-1,n=Math.floor(e/this.DB),s=this.s<<i&this.DM;for(a=this.t-1;a>=0;--a)t[a+n+1]=this[a]>>r|s,s=(this[a]&o)<<i;for(a=n-1;a>=0;--a)t[a]=0;t[n]=s,t.t=this.t+n+1,t.s=this.s,t.clamp()},a.prototype.rShiftTo=function(e,t){t.s=this.s;var a=Math.floor(e/this.DB);if(a>=this.t)t.t=0;else{var i=e%this.DB,r=this.DB-i,o=(1<<i)-1;t[0]=this[a]>>i;for(var n=a+1;n<this.t;++n)t[n-a-1]|=(this[n]&o)<<r,t[n-a]=this[n]>>i;i>0&&(t[this.t-a-1]|=(this.s&o)<<r),t.t=this.t-a,t.clamp()}},a.prototype.subTo=function(e,t){for(var a=0,i=0,r=Math.min(e.t,this.t);a<r;)i+=this[a]-e[a],t[a++]=i&this.DM,i>>=this.DB;if(e.t<this.t){for(i-=e.s;a<this.t;)i+=this[a],t[a++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;a<e.t;)i-=e[a],t[a++]=i&this.DM,i>>=this.DB;i-=e.s}t.s=i<0?-1:0,i<-1?t[a++]=this.DV+i:i>0&&(t[a++]=i),t.t=a,t.clamp()},a.prototype.multiplyTo=function(e,t){var i=this.abs(),r=e.abs(),o=i.t;for(t.t=o+r.t;--o>=0;)t[o]=0;for(o=0;o<r.t;++o)t[o+i.t]=i.am(0,r[o],t,o,0,i.t);t.s=0,t.clamp(),this.s!=e.s&&a.ZERO.subTo(t,t)},a.prototype.squareTo=function(e){for(var t=this.abs(),a=e.t=2*t.t;--a>=0;)e[a]=0;for(a=0;a<t.t-1;++a){var i=t.am(a,t[a],e,2*a,0,1);(e[a+t.t]+=t.am(a+1,2*t[a],e,2*a+1,i,t.t-a-1))>=t.DV&&(e[a+t.t]-=t.DV,e[a+t.t+1]=1)}e.t>0&&(e[e.t-1]+=t.am(a,t[a],e,2*a,0,1)),e.s=0,e.clamp()},a.prototype.divRemTo=function(e,t,r){var o=e.abs();if(!(o.t<=0)){var n=this.abs();if(n.t<o.t)return null!=t&&t.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=i());var s=i(),u=this.s,c=e.s,p=this.DB-m(o[o.t-1]);p>0?(o.lShiftTo(p,s),n.lShiftTo(p,r)):(o.copyTo(s),n.copyTo(r));var l=s.t,h=s[l-1];if(0!=h){var d=h*(1<<this.F1)+(l>1?s[l-2]>>this.F2:0),f=this.FV/d,g=(1<<this.F1)/d,v=1<<this.F2,y=r.t,b=y-l,k=null==t?i():t;for(s.dlShiftTo(b,k),r.compareTo(k)>=0&&(r[r.t++]=1,r.subTo(k,r)),a.ONE.dlShiftTo(l,k),k.subTo(s,s);s.t<l;)s[s.t++]=0;for(;--b>=0;){var j=r[--y]==h?this.DM:Math.floor(r[y]*f+(r[y-1]+v)*g);if((r[y]+=s.am(0,j,r,b,0,l))<j)for(s.dlShiftTo(b,k),r.subTo(k,r);r[y]<--j;)r.subTo(k,r)}null!=t&&(r.drShiftTo(l,t),u!=c&&a.ZERO.subTo(t,t)),r.t=l,r.clamp(),p>0&&r.rShiftTo(p,r),u<0&&a.ZERO.subTo(r,r)}}},a.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},a.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},a.prototype.exp=function(e,t){if(e>4294967295||e<1)return a.ONE;var r=i(),o=i(),n=t.convert(this),s=m(e)-1;for(n.copyTo(r);--s>=0;)if(t.sqrTo(r,o),(e&1<<s)>0)t.mulTo(o,n,r);else{var u=r;r=o,o=u}return t.revert(r)},a.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var a,i=(1<<t)-1,r=!1,o="",n=this.t,s=this.DB-n*this.DB%t;if(n-- >0)for(s<this.DB&&(a=this[n]>>s)>0&&(r=!0,o=c(a));n>=0;)s<t?(a=(this[n]&(1<<s)-1)<<t-s,a|=this[--n]>>(s+=this.DB-t)):(a=this[n]>>(s-=t)&i,s<=0&&(s+=this.DB,--n)),a>0&&(r=!0),r&&(o+=c(a));return r?o:"0"},a.prototype.negate=function(){var e=i();return a.ZERO.subTo(this,e),e},a.prototype.abs=function(){return this.s<0?this.negate():this},a.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var a=this.t;if(0!=(t=a-e.t))return this.s<0?-t:t;for(;--a>=0;)if(0!=(t=this[a]-e[a]))return t;return 0},a.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+m(this[this.t-1]^this.s&this.DM)},a.prototype.mod=function(e){var t=i();return this.abs().divRemTo(e,null,t),this.s<0&&t.compareTo(a.ZERO)>0&&e.subTo(t,t),t},a.prototype.modPowInt=function(e,t){var a;return a=e<256||t.isEven()?new h(t):new d(t),this.exp(e,a)},a.ZERO=l(0),a.ONE=l(1),j.prototype.convert=w,j.prototype.revert=w,j.prototype.mulTo=function(e,t,a){e.multiplyTo(t,a)},j.prototype.sqrTo=function(e,t){e.squareTo(t)},x.prototype.convert=function(e){if(e.s<0||e.t>2*this.m.t)return e.mod(this.m);if(e.compareTo(this.m)<0)return e;var t=i();return e.copyTo(t),this.reduce(t),t},x.prototype.revert=function(e){return e},x.prototype.reduce=function(e){for(e.drShiftTo(this.m.t-1,this.r2),e.t>this.m.t+1&&(e.t=this.m.t+1,e.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);e.compareTo(this.r2)<0;)e.dAddOffset(1,this.m.t+1);for(e.subTo(this.r2,e);e.compareTo(this.m)>=0;)e.subTo(this.m,e)},x.prototype.mulTo=function(e,t,a){e.multiplyTo(t,a),this.reduce(a)},x.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)};var E,S,_,R=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],A=(1<<26)/R[R.length-1];function C(){var e;e=(new Date).getTime(),S[_++]^=255&e,S[_++]^=e>>8&255,S[_++]^=e>>16&255,S[_++]^=e>>24&255,_>=I&&(_-=I)}if(a.prototype.chunkSize=function(e){return Math.floor(Math.LN2*this.DB/Math.log(e))},a.prototype.toRadix=function(e){if(null==e&&(e=10),0==this.signum()||e<2||e>36)return"0";var t=this.chunkSize(e),a=Math.pow(e,t),r=l(a),o=i(),n=i(),s="";for(this.divRemTo(r,o,n);o.signum()>0;)s=(a+n.intValue()).toString(e).substr(1)+s,o.divRemTo(r,o,n);return n.intValue().toString(e)+s},a.prototype.fromRadix=function(e,t){this.fromInt(0),null==t&&(t=10);for(var i=this.chunkSize(t),r=Math.pow(t,i),o=!1,n=0,s=0,u=0;u<e.length;++u){var c=p(e,u);c<0?"-"==e.charAt(u)&&0==this.signum()&&(o=!0):(s=t*s+c,++n>=i&&(this.dMultiply(r),this.dAddOffset(s,0),n=0,s=0))}n>0&&(this.dMultiply(Math.pow(t,n)),this.dAddOffset(s,0)),o&&a.ZERO.subTo(this,this)},a.prototype.fromNumber=function(e,t,i){if("number"==typeof t)if(e<2)this.fromInt(1);else for(this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(a.ONE.shiftLeft(e-1),g,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(t);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(a.ONE.shiftLeft(e-1),this);else{var r=new Array,o=7&e;r.length=1+(e>>3),t.nextBytes(r),o>0?r[0]&=(1<<o)-1:r[0]=0,this.fromString(r,256)}},a.prototype.bitwiseTo=function(e,t,a){var i,r,o=Math.min(e.t,this.t);for(i=0;i<o;++i)a[i]=t(this[i],e[i]);if(e.t<this.t){for(r=e.s&this.DM,i=o;i<this.t;++i)a[i]=t(this[i],r);a.t=this.t}else{for(r=this.s&this.DM,i=o;i<e.t;++i)a[i]=t(r,e[i]);a.t=e.t}a.s=t(this.s,e.s),a.clamp()},a.prototype.changeBit=function(e,t){var i=a.ONE.shiftLeft(e);return this.bitwiseTo(i,t,i),i},a.prototype.addTo=function(e,t){for(var a=0,i=0,r=Math.min(e.t,this.t);a<r;)i+=this[a]+e[a],t[a++]=i&this.DM,i>>=this.DB;if(e.t<this.t){for(i+=e.s;a<this.t;)i+=this[a],t[a++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;a<e.t;)i+=e[a],t[a++]=i&this.DM,i>>=this.DB;i+=e.s}t.s=i<0?-1:0,i>0?t[a++]=i:i<-1&&(t[a++]=this.DV+i),t.t=a,t.clamp()},a.prototype.dMultiply=function(e){this[this.t]=this.am(0,e-1,this,0,0,this.t),++this.t,this.clamp()},a.prototype.dAddOffset=function(e,t){if(0!=e){for(;this.t<=t;)this[this.t++]=0;for(this[t]+=e;this[t]>=this.DV;)this[t]-=this.DV,++t>=this.t&&(this[this.t++]=0),++this[t]}},a.prototype.multiplyLowerTo=function(e,t,a){var i,r=Math.min(this.t+e.t,t);for(a.s=0,a.t=r;r>0;)a[--r]=0;for(i=a.t-this.t;r<i;++r)a[r+this.t]=this.am(0,e[r],a,r,0,this.t);for(i=Math.min(e.t,t);r<i;++r)this.am(0,e[r],a,r,0,t-r);a.clamp()},a.prototype.multiplyUpperTo=function(e,t,a){--t;var i=a.t=this.t+e.t-t;for(a.s=0;--i>=0;)a[i]=0;for(i=Math.max(t-this.t,0);i<e.t;++i)a[this.t+i-t]=this.am(t-i,e[i],a,0,0,this.t+i-t);a.clamp(),a.drShiftTo(1,a)},a.prototype.modInt=function(e){if(e<=0)return 0;var t=this.DV%e,a=this.s<0?e-1:0;if(this.t>0)if(0==t)a=this[0]%e;else for(var i=this.t-1;i>=0;--i)a=(t*a+this[i])%e;return a},a.prototype.millerRabin=function(e){var t=this.subtract(a.ONE),r=t.getLowestSetBit();if(r<=0)return!1;var o=t.shiftRight(r);(e=e+1>>1)>R.length&&(e=R.length);for(var n=i(),s=0;s<e;++s){n.fromInt(R[Math.floor(Math.random()*R.length)]);var u=n.modPow(o,this);if(0!=u.compareTo(a.ONE)&&0!=u.compareTo(t)){for(var c=1;c++<r&&0!=u.compareTo(t);)if(0==(u=u.modPowInt(2,this)).compareTo(a.ONE))return!1;if(0!=u.compareTo(t))return!1}}return!0},a.prototype.clone=function(){var e=i();return this.copyTo(e),e},a.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},a.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},a.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},a.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},a.prototype.toByteArray=function(){var e=this.t,t=new Array;t[0]=this.s;var a,i=this.DB-e*this.DB%8,r=0;if(e-- >0)for(i<this.DB&&(a=this[e]>>i)!=(this.s&this.DM)>>i&&(t[r++]=a|this.s<<this.DB-i);e>=0;)i<8?(a=(this[e]&(1<<i)-1)<<8-i,a|=this[--e]>>(i+=this.DB-8)):(a=this[e]>>(i-=8)&255,i<=0&&(i+=this.DB,--e)),0!=(128&a)&&(a|=-256),0==r&&(128&this.s)!=(128&a)&&++r,(r>0||a!=this.s)&&(t[r++]=a);return t},a.prototype.equals=function(e){return 0==this.compareTo(e)},a.prototype.min=function(e){return this.compareTo(e)<0?this:e},a.prototype.max=function(e){return this.compareTo(e)>0?this:e},a.prototype.and=function(e){var t=i();return this.bitwiseTo(e,f,t),t},a.prototype.or=function(e){var t=i();return this.bitwiseTo(e,g,t),t},a.prototype.xor=function(e){var t=i();return this.bitwiseTo(e,v,t),t},a.prototype.andNot=function(e){var t=i();return this.bitwiseTo(e,y,t),t},a.prototype.not=function(){for(var e=i(),t=0;t<this.t;++t)e[t]=this.DM&~this[t];return e.t=this.t,e.s=~this.s,e},a.prototype.shiftLeft=function(e){var t=i();return e<0?this.rShiftTo(-e,t):this.lShiftTo(e,t),t},a.prototype.shiftRight=function(e){var t=i();return e<0?this.lShiftTo(-e,t):this.rShiftTo(e,t),t},a.prototype.getLowestSetBit=function(){for(var e=0;e<this.t;++e)if(0!=this[e])return e*this.DB+b(this[e]);return this.s<0?this.t*this.DB:-1},a.prototype.bitCount=function(){for(var e=0,t=this.s&this.DM,a=0;a<this.t;++a)e+=k(this[a]^t);return e},a.prototype.testBit=function(e){var t=Math.floor(e/this.DB);return t>=this.t?0!=this.s:0!=(this[t]&1<<e%this.DB)},a.prototype.setBit=function(e){return this.changeBit(e,g)},a.prototype.clearBit=function(e){return this.changeBit(e,y)},a.prototype.flipBit=function(e){return this.changeBit(e,v)},a.prototype.add=function(e){var t=i();return this.addTo(e,t),t},a.prototype.subtract=function(e){var t=i();return this.subTo(e,t),t},a.prototype.multiply=function(e){var t=i();return this.multiplyTo(e,t),t},a.prototype.divide=function(e){var t=i();return this.divRemTo(e,t,null),t},a.prototype.remainder=function(e){var t=i();return this.divRemTo(e,null,t),t},a.prototype.divideAndRemainder=function(e){var t=i(),a=i();return this.divRemTo(e,t,a),new Array(t,a)},a.prototype.modPow=function(e,t){var a,r,o=e.bitLength(),n=l(1);if(o<=0)return n;a=o<18?1:o<48?3:o<144?4:o<768?5:6,r=o<8?new h(t):t.isEven()?new x(t):new d(t);var s=new Array,u=3,c=a-1,p=(1<<a)-1;if(s[1]=r.convert(this),a>1){var f=i();for(r.sqrTo(s[1],f);u<=p;)s[u]=i(),r.mulTo(f,s[u-2],s[u]),u+=2}var g,v,y=e.t-1,b=!0,k=i();for(o=m(e[y])-1;y>=0;){for(o>=c?g=e[y]>>o-c&p:(g=(e[y]&(1<<o+1)-1)<<c-o,y>0&&(g|=e[y-1]>>this.DB+o-c)),u=a;0==(1&g);)g>>=1,--u;if((o-=u)<0&&(o+=this.DB,--y),b)s[g].copyTo(n),b=!1;else{for(;u>1;)r.sqrTo(n,k),r.sqrTo(k,n),u-=2;u>0?r.sqrTo(n,k):(v=n,n=k,k=v),r.mulTo(k,s[g],n)}for(;y>=0&&0==(e[y]&1<<o);)r.sqrTo(n,k),v=n,n=k,k=v,--o<0&&(o=this.DB-1,--y)}return r.revert(n)},a.prototype.modInverse=function(e){var t=e.isEven();if(this.isEven()&&t||0==e.signum())return a.ZERO;for(var i=e.clone(),r=this.clone(),o=l(1),n=l(0),s=l(0),u=l(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),t?(o.isEven()&&n.isEven()||(o.addTo(this,o),n.subTo(e,n)),o.rShiftTo(1,o)):n.isEven()||n.subTo(e,n),n.rShiftTo(1,n);for(;r.isEven();)r.rShiftTo(1,r),t?(s.isEven()&&u.isEven()||(s.addTo(this,s),u.subTo(e,u)),s.rShiftTo(1,s)):u.isEven()||u.subTo(e,u),u.rShiftTo(1,u);i.compareTo(r)>=0?(i.subTo(r,i),t&&o.subTo(s,o),n.subTo(u,n)):(r.subTo(i,r),t&&s.subTo(o,s),u.subTo(n,u))}return 0!=r.compareTo(a.ONE)?a.ZERO:u.compareTo(e)>=0?u.subtract(e):u.signum()<0?(u.addTo(e,u),u.signum()<0?u.add(e):u):u},a.prototype.pow=function(e){return this.exp(e,new j)},a.prototype.gcd=function(e){var t=this.s<0?this.negate():this.clone(),a=e.s<0?e.negate():e.clone();if(t.compareTo(a)<0){var i=t;t=a,a=i}var r=t.getLowestSetBit(),o=a.getLowestSetBit();if(o<0)return t;for(r<o&&(o=r),o>0&&(t.rShiftTo(o,t),a.rShiftTo(o,a));t.signum()>0;)(r=t.getLowestSetBit())>0&&t.rShiftTo(r,t),(r=a.getLowestSetBit())>0&&a.rShiftTo(r,a),t.compareTo(a)>=0?(t.subTo(a,t),t.rShiftTo(1,t)):(a.subTo(t,a),a.rShiftTo(1,a));return o>0&&a.lShiftTo(o,a),a},a.prototype.isProbablePrime=function(e){var t,a=this.abs();if(1==a.t&&a[0]<=R[R.length-1]){for(t=0;t<R.length;++t)if(a[0]==R[t])return!0;return!1}if(a.isEven())return!1;for(t=1;t<R.length;){for(var i=R[t],r=t+1;r<R.length&&i<A;)i*=R[r++];for(i=a.modInt(i);t<r;)if(i%R[t++]==0)return!1}return a.millerRabin(e)},a.prototype.square=function(){var e=i();return this.squareTo(e),e},a.prototype.Barrett=x,null==S){var q;if(S=new Array,_=0,"undefined"!=typeof window&&window.crypto)if(window.crypto.getRandomValues){var O=new Uint8Array(32);for(window.crypto.getRandomValues(O),q=0;q<32;++q)S[_++]=O[q]}else if("Netscape"==navigator.appName&&navigator.appVersion<"5"){var P=window.crypto.random(32);for(q=0;q<P.length;++q)S[_++]=255&P.charCodeAt(q)}for(;_<I;)q=Math.floor(65536*Math.random()),S[_++]=q>>>8,S[_++]=255&q;_=0,C()}function F(){if(null==E){for(C(),(E=new T).init(S),_=0;_<S.length;++_)S[_]=0;_=0}return E.next()}function z(){}function T(){this.i=0,this.j=0,this.S=new Array}z.prototype.nextBytes=function(e){var t;for(t=0;t<e.length;++t)e[t]=F()},T.prototype.init=function(e){var t,a,i;for(t=0;t<256;++t)this.S[t]=t;for(a=0,t=0;t<256;++t)a=a+this.S[t]+e[t%e.length]&255,i=this.S[t],this.S[t]=this.S[a],this.S[a]=i;this.i=0,this.j=0},T.prototype.next=function(){var e;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,e=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=e,this.S[e+this.S[this.i]&255]};var I=256;a.SecureRandom=z,a.BigInteger=a,e.exports=a}).call(this)},function(e,t,a){!function(e){"use strict";var t=function(e){var t,a=new Float64Array(16);if(e)for(t=0;t<e.length;t++)a[t]=e[t];return a},i=function(){throw new Error("no PRNG")},r=new Uint8Array(16),o=new Uint8Array(32);o[0]=9;var n=t(),s=t([1]),u=t([56129,1]),c=t([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),p=t([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),l=t([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),m=t([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),h=t([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function d(e,t,a,i){e[t]=a>>24&255,e[t+1]=a>>16&255,e[t+2]=a>>8&255,e[t+3]=255&a,e[t+4]=i>>24&255,e[t+5]=i>>16&255,e[t+6]=i>>8&255,e[t+7]=255&i}function f(e,t,a,i,r){var o,n=0;for(o=0;o<r;o++)n|=e[t+o]^a[i+o];return(1&n-1>>>8)-1}function g(e,t,a,i){return f(e,t,a,i,16)}function v(e,t,a,i){return f(e,t,a,i,32)}function y(e,t,a,i){!function(e,t,a,i){for(var r,o=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,n=255&a[0]|(255&a[1])<<8|(255&a[2])<<16|(255&a[3])<<24,s=255&a[4]|(255&a[5])<<8|(255&a[6])<<16|(255&a[7])<<24,u=255&a[8]|(255&a[9])<<8|(255&a[10])<<16|(255&a[11])<<24,c=255&a[12]|(255&a[13])<<8|(255&a[14])<<16|(255&a[15])<<24,p=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,l=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,m=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,h=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,d=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,f=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,g=255&a[16]|(255&a[17])<<8|(255&a[18])<<16|(255&a[19])<<24,v=255&a[20]|(255&a[21])<<8|(255&a[22])<<16|(255&a[23])<<24,y=255&a[24]|(255&a[25])<<8|(255&a[26])<<16|(255&a[27])<<24,b=255&a[28]|(255&a[29])<<8|(255&a[30])<<16|(255&a[31])<<24,k=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,j=o,w=n,x=s,E=u,S=c,_=p,R=l,A=m,C=h,q=d,O=f,P=g,F=v,z=y,T=b,I=k,D=0;D<20;D+=2)j^=(r=(F^=(r=(C^=(r=(S^=(r=j+F|0)<<7|r>>>25)+j|0)<<9|r>>>23)+S|0)<<13|r>>>19)+C|0)<<18|r>>>14,_^=(r=(w^=(r=(z^=(r=(q^=(r=_+w|0)<<7|r>>>25)+_|0)<<9|r>>>23)+q|0)<<13|r>>>19)+z|0)<<18|r>>>14,O^=(r=(R^=(r=(x^=(r=(T^=(r=O+R|0)<<7|r>>>25)+O|0)<<9|r>>>23)+T|0)<<13|r>>>19)+x|0)<<18|r>>>14,I^=(r=(P^=(r=(A^=(r=(E^=(r=I+P|0)<<7|r>>>25)+I|0)<<9|r>>>23)+E|0)<<13|r>>>19)+A|0)<<18|r>>>14,j^=(r=(E^=(r=(x^=(r=(w^=(r=j+E|0)<<7|r>>>25)+j|0)<<9|r>>>23)+w|0)<<13|r>>>19)+x|0)<<18|r>>>14,_^=(r=(S^=(r=(A^=(r=(R^=(r=_+S|0)<<7|r>>>25)+_|0)<<9|r>>>23)+R|0)<<13|r>>>19)+A|0)<<18|r>>>14,O^=(r=(q^=(r=(C^=(r=(P^=(r=O+q|0)<<7|r>>>25)+O|0)<<9|r>>>23)+P|0)<<13|r>>>19)+C|0)<<18|r>>>14,I^=(r=(T^=(r=(z^=(r=(F^=(r=I+T|0)<<7|r>>>25)+I|0)<<9|r>>>23)+F|0)<<13|r>>>19)+z|0)<<18|r>>>14;j=j+o|0,w=w+n|0,x=x+s|0,E=E+u|0,S=S+c|0,_=_+p|0,R=R+l|0,A=A+m|0,C=C+h|0,q=q+d|0,O=O+f|0,P=P+g|0,F=F+v|0,z=z+y|0,T=T+b|0,I=I+k|0,e[0]=j>>>0&255,e[1]=j>>>8&255,e[2]=j>>>16&255,e[3]=j>>>24&255,e[4]=w>>>0&255,e[5]=w>>>8&255,e[6]=w>>>16&255,e[7]=w>>>24&255,e[8]=x>>>0&255,e[9]=x>>>8&255,e[10]=x>>>16&255,e[11]=x>>>24&255,e[12]=E>>>0&255,e[13]=E>>>8&255,e[14]=E>>>16&255,e[15]=E>>>24&255,e[16]=S>>>0&255,e[17]=S>>>8&255,e[18]=S>>>16&255,e[19]=S>>>24&255,e[20]=_>>>0&255,e[21]=_>>>8&255,e[22]=_>>>16&255,e[23]=_>>>24&255,e[24]=R>>>0&255,e[25]=R>>>8&255,e[26]=R>>>16&255,e[27]=R>>>24&255,e[28]=A>>>0&255,e[29]=A>>>8&255,e[30]=A>>>16&255,e[31]=A>>>24&255,e[32]=C>>>0&255,e[33]=C>>>8&255,e[34]=C>>>16&255,e[35]=C>>>24&255,e[36]=q>>>0&255,e[37]=q>>>8&255,e[38]=q>>>16&255,e[39]=q>>>24&255,e[40]=O>>>0&255,e[41]=O>>>8&255,e[42]=O>>>16&255,e[43]=O>>>24&255,e[44]=P>>>0&255,e[45]=P>>>8&255,e[46]=P>>>16&255,e[47]=P>>>24&255,e[48]=F>>>0&255,e[49]=F>>>8&255,e[50]=F>>>16&255,e[51]=F>>>24&255,e[52]=z>>>0&255,e[53]=z>>>8&255,e[54]=z>>>16&255,e[55]=z>>>24&255,e[56]=T>>>0&255,e[57]=T>>>8&255,e[58]=T>>>16&255,e[59]=T>>>24&255,e[60]=I>>>0&255,e[61]=I>>>8&255,e[62]=I>>>16&255,e[63]=I>>>24&255}(e,t,a,i)}function b(e,t,a,i){!function(e,t,a,i){for(var r,o=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,n=255&a[0]|(255&a[1])<<8|(255&a[2])<<16|(255&a[3])<<24,s=255&a[4]|(255&a[5])<<8|(255&a[6])<<16|(255&a[7])<<24,u=255&a[8]|(255&a[9])<<8|(255&a[10])<<16|(255&a[11])<<24,c=255&a[12]|(255&a[13])<<8|(255&a[14])<<16|(255&a[15])<<24,p=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,l=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,m=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,h=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,d=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,f=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,g=255&a[16]|(255&a[17])<<8|(255&a[18])<<16|(255&a[19])<<24,v=255&a[20]|(255&a[21])<<8|(255&a[22])<<16|(255&a[23])<<24,y=255&a[24]|(255&a[25])<<8|(255&a[26])<<16|(255&a[27])<<24,b=255&a[28]|(255&a[29])<<8|(255&a[30])<<16|(255&a[31])<<24,k=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,j=0;j<20;j+=2)o^=(r=(v^=(r=(h^=(r=(c^=(r=o+v|0)<<7|r>>>25)+o|0)<<9|r>>>23)+c|0)<<13|r>>>19)+h|0)<<18|r>>>14,p^=(r=(n^=(r=(y^=(r=(d^=(r=p+n|0)<<7|r>>>25)+p|0)<<9|r>>>23)+d|0)<<13|r>>>19)+y|0)<<18|r>>>14,f^=(r=(l^=(r=(s^=(r=(b^=(r=f+l|0)<<7|r>>>25)+f|0)<<9|r>>>23)+b|0)<<13|r>>>19)+s|0)<<18|r>>>14,k^=(r=(g^=(r=(m^=(r=(u^=(r=k+g|0)<<7|r>>>25)+k|0)<<9|r>>>23)+u|0)<<13|r>>>19)+m|0)<<18|r>>>14,o^=(r=(u^=(r=(s^=(r=(n^=(r=o+u|0)<<7|r>>>25)+o|0)<<9|r>>>23)+n|0)<<13|r>>>19)+s|0)<<18|r>>>14,p^=(r=(c^=(r=(m^=(r=(l^=(r=p+c|0)<<7|r>>>25)+p|0)<<9|r>>>23)+l|0)<<13|r>>>19)+m|0)<<18|r>>>14,f^=(r=(d^=(r=(h^=(r=(g^=(r=f+d|0)<<7|r>>>25)+f|0)<<9|r>>>23)+g|0)<<13|r>>>19)+h|0)<<18|r>>>14,k^=(r=(b^=(r=(y^=(r=(v^=(r=k+b|0)<<7|r>>>25)+k|0)<<9|r>>>23)+v|0)<<13|r>>>19)+y|0)<<18|r>>>14;e[0]=o>>>0&255,e[1]=o>>>8&255,e[2]=o>>>16&255,e[3]=o>>>24&255,e[4]=p>>>0&255,e[5]=p>>>8&255,e[6]=p>>>16&255,e[7]=p>>>24&255,e[8]=f>>>0&255,e[9]=f>>>8&255,e[10]=f>>>16&255,e[11]=f>>>24&255,e[12]=k>>>0&255,e[13]=k>>>8&255,e[14]=k>>>16&255,e[15]=k>>>24&255,e[16]=l>>>0&255,e[17]=l>>>8&255,e[18]=l>>>16&255,e[19]=l>>>24&255,e[20]=m>>>0&255,e[21]=m>>>8&255,e[22]=m>>>16&255,e[23]=m>>>24&255,e[24]=h>>>0&255,e[25]=h>>>8&255,e[26]=h>>>16&255,e[27]=h>>>24&255,e[28]=d>>>0&255,e[29]=d>>>8&255,e[30]=d>>>16&255,e[31]=d>>>24&255}(e,t,a,i)}var k=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function j(e,t,a,i,r,o,n){var s,u,c=new Uint8Array(16),p=new Uint8Array(64);for(u=0;u<16;u++)c[u]=0;for(u=0;u<8;u++)c[u]=o[u];for(;r>=64;){for(y(p,c,n,k),u=0;u<64;u++)e[t+u]=a[i+u]^p[u];for(s=1,u=8;u<16;u++)s=s+(255&c[u])|0,c[u]=255&s,s>>>=8;r-=64,t+=64,i+=64}if(r>0)for(y(p,c,n,k),u=0;u<r;u++)e[t+u]=a[i+u]^p[u];return 0}function w(e,t,a,i,r){var o,n,s=new Uint8Array(16),u=new Uint8Array(64);for(n=0;n<16;n++)s[n]=0;for(n=0;n<8;n++)s[n]=i[n];for(;a>=64;){for(y(u,s,r,k),n=0;n<64;n++)e[t+n]=u[n];for(o=1,n=8;n<16;n++)o=o+(255&s[n])|0,s[n]=255&o,o>>>=8;a-=64,t+=64}if(a>0)for(y(u,s,r,k),n=0;n<a;n++)e[t+n]=u[n];return 0}function x(e,t,a,i,r){var o=new Uint8Array(32);b(o,i,r,k);for(var n=new Uint8Array(8),s=0;s<8;s++)n[s]=i[s+16];return w(e,t,a,n,o)}function E(e,t,a,i,r,o,n){var s=new Uint8Array(32);b(s,o,n,k);for(var u=new Uint8Array(8),c=0;c<8;c++)u[c]=o[c+16];return j(e,t,a,i,r,u,s)}var S=function(e){var t,a,i,r,o,n,s,u;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,t=255&e[0]|(255&e[1])<<8,this.r[0]=8191&t,a=255&e[2]|(255&e[3])<<8,this.r[1]=8191&(t>>>13|a<<3),i=255&e[4]|(255&e[5])<<8,this.r[2]=7939&(a>>>10|i<<6),r=255&e[6]|(255&e[7])<<8,this.r[3]=8191&(i>>>7|r<<9),o=255&e[8]|(255&e[9])<<8,this.r[4]=255&(r>>>4|o<<12),this.r[5]=o>>>1&8190,n=255&e[10]|(255&e[11])<<8,this.r[6]=8191&(o>>>14|n<<2),s=255&e[12]|(255&e[13])<<8,this.r[7]=8065&(n>>>11|s<<5),u=255&e[14]|(255&e[15])<<8,this.r[8]=8191&(s>>>8|u<<8),this.r[9]=u>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function _(e,t,a,i,r,o){var n=new S(o);return n.update(a,i,r),n.finish(e,t),0}function R(e,t,a,i,r,o){var n=new Uint8Array(16);return _(n,0,a,i,r,o),g(e,t,n,0)}function A(e,t,a,i,r){var o;if(a<32)return-1;for(E(e,0,t,0,a,i,r),_(e,16,e,32,a-32,e),o=0;o<16;o++)e[o]=0;return 0}function C(e,t,a,i,r){var o,n=new Uint8Array(32);if(a<32)return-1;if(x(n,0,32,i,r),0!==R(t,16,t,32,a-32,n))return-1;for(E(e,0,t,0,a,i,r),o=0;o<32;o++)e[o]=0;return 0}function q(e,t){var a;for(a=0;a<16;a++)e[a]=0|t[a]}function O(e){var t,a,i=1;for(t=0;t<16;t++)a=e[t]+i+65535,i=Math.floor(a/65536),e[t]=a-65536*i;e[0]+=i-1+37*(i-1)}function P(e,t,a){for(var i,r=~(a-1),o=0;o<16;o++)i=r&(e[o]^t[o]),e[o]^=i,t[o]^=i}function F(e,a){var i,r,o,n=t(),s=t();for(i=0;i<16;i++)s[i]=a[i];for(O(s),O(s),O(s),r=0;r<2;r++){for(n[0]=s[0]-65517,i=1;i<15;i++)n[i]=s[i]-65535-(n[i-1]>>16&1),n[i-1]&=65535;n[15]=s[15]-32767-(n[14]>>16&1),o=n[15]>>16&1,n[14]&=65535,P(s,n,1-o)}for(i=0;i<16;i++)e[2*i]=255&s[i],e[2*i+1]=s[i]>>8}function z(e,t){var a=new Uint8Array(32),i=new Uint8Array(32);return F(a,e),F(i,t),v(a,0,i,0)}function T(e){var t=new Uint8Array(32);return F(t,e),1&t[0]}function I(e,t){var a;for(a=0;a<16;a++)e[a]=t[2*a]+(t[2*a+1]<<8);e[15]&=32767}function D(e,t,a){for(var i=0;i<16;i++)e[i]=t[i]+a[i]}function B(e,t,a){for(var i=0;i<16;i++)e[i]=t[i]-a[i]}function L(e,t,a){var i,r,o=0,n=0,s=0,u=0,c=0,p=0,l=0,m=0,h=0,d=0,f=0,g=0,v=0,y=0,b=0,k=0,j=0,w=0,x=0,E=0,S=0,_=0,R=0,A=0,C=0,q=0,O=0,P=0,F=0,z=0,T=0,I=a[0],D=a[1],B=a[2],L=a[3],U=a[4],N=a[5],H=a[6],M=a[7],K=a[8],$=a[9],G=a[10],V=a[11],Q=a[12],W=a[13],Y=a[14],Z=a[15];o+=(i=t[0])*I,n+=i*D,s+=i*B,u+=i*L,c+=i*U,p+=i*N,l+=i*H,m+=i*M,h+=i*K,d+=i*$,f+=i*G,g+=i*V,v+=i*Q,y+=i*W,b+=i*Y,k+=i*Z,n+=(i=t[1])*I,s+=i*D,u+=i*B,c+=i*L,p+=i*U,l+=i*N,m+=i*H,h+=i*M,d+=i*K,f+=i*$,g+=i*G,v+=i*V,y+=i*Q,b+=i*W,k+=i*Y,j+=i*Z,s+=(i=t[2])*I,u+=i*D,c+=i*B,p+=i*L,l+=i*U,m+=i*N,h+=i*H,d+=i*M,f+=i*K,g+=i*$,v+=i*G,y+=i*V,b+=i*Q,k+=i*W,j+=i*Y,w+=i*Z,u+=(i=t[3])*I,c+=i*D,p+=i*B,l+=i*L,m+=i*U,h+=i*N,d+=i*H,f+=i*M,g+=i*K,v+=i*$,y+=i*G,b+=i*V,k+=i*Q,j+=i*W,w+=i*Y,x+=i*Z,c+=(i=t[4])*I,p+=i*D,l+=i*B,m+=i*L,h+=i*U,d+=i*N,f+=i*H,g+=i*M,v+=i*K,y+=i*$,b+=i*G,k+=i*V,j+=i*Q,w+=i*W,x+=i*Y,E+=i*Z,p+=(i=t[5])*I,l+=i*D,m+=i*B,h+=i*L,d+=i*U,f+=i*N,g+=i*H,v+=i*M,y+=i*K,b+=i*$,k+=i*G,j+=i*V,w+=i*Q,x+=i*W,E+=i*Y,S+=i*Z,l+=(i=t[6])*I,m+=i*D,h+=i*B,d+=i*L,f+=i*U,g+=i*N,v+=i*H,y+=i*M,b+=i*K,k+=i*$,j+=i*G,w+=i*V,x+=i*Q,E+=i*W,S+=i*Y,_+=i*Z,m+=(i=t[7])*I,h+=i*D,d+=i*B,f+=i*L,g+=i*U,v+=i*N,y+=i*H,b+=i*M,k+=i*K,j+=i*$,w+=i*G,x+=i*V,E+=i*Q,S+=i*W,_+=i*Y,R+=i*Z,h+=(i=t[8])*I,d+=i*D,f+=i*B,g+=i*L,v+=i*U,y+=i*N,b+=i*H,k+=i*M,j+=i*K,w+=i*$,x+=i*G,E+=i*V,S+=i*Q,_+=i*W,R+=i*Y,A+=i*Z,d+=(i=t[9])*I,f+=i*D,g+=i*B,v+=i*L,y+=i*U,b+=i*N,k+=i*H,j+=i*M,w+=i*K,x+=i*$,E+=i*G,S+=i*V,_+=i*Q,R+=i*W,A+=i*Y,C+=i*Z,f+=(i=t[10])*I,g+=i*D,v+=i*B,y+=i*L,b+=i*U,k+=i*N,j+=i*H,w+=i*M,x+=i*K,E+=i*$,S+=i*G,_+=i*V,R+=i*Q,A+=i*W,C+=i*Y,q+=i*Z,g+=(i=t[11])*I,v+=i*D,y+=i*B,b+=i*L,k+=i*U,j+=i*N,w+=i*H,x+=i*M,E+=i*K,S+=i*$,_+=i*G,R+=i*V,A+=i*Q,C+=i*W,q+=i*Y,O+=i*Z,v+=(i=t[12])*I,y+=i*D,b+=i*B,k+=i*L,j+=i*U,w+=i*N,x+=i*H,E+=i*M,S+=i*K,_+=i*$,R+=i*G,A+=i*V,C+=i*Q,q+=i*W,O+=i*Y,P+=i*Z,y+=(i=t[13])*I,b+=i*D,k+=i*B,j+=i*L,w+=i*U,x+=i*N,E+=i*H,S+=i*M,_+=i*K,R+=i*$,A+=i*G,C+=i*V,q+=i*Q,O+=i*W,P+=i*Y,F+=i*Z,b+=(i=t[14])*I,k+=i*D,j+=i*B,w+=i*L,x+=i*U,E+=i*N,S+=i*H,_+=i*M,R+=i*K,A+=i*$,C+=i*G,q+=i*V,O+=i*Q,P+=i*W,F+=i*Y,z+=i*Z,k+=(i=t[15])*I,n+=38*(w+=i*B),s+=38*(x+=i*L),u+=38*(E+=i*U),c+=38*(S+=i*N),p+=38*(_+=i*H),l+=38*(R+=i*M),m+=38*(A+=i*K),h+=38*(C+=i*$),d+=38*(q+=i*G),f+=38*(O+=i*V),g+=38*(P+=i*Q),v+=38*(F+=i*W),y+=38*(z+=i*Y),b+=38*(T+=i*Z),o=(i=(o+=38*(j+=i*D))+(r=1)+65535)-65536*(r=Math.floor(i/65536)),n=(i=n+r+65535)-65536*(r=Math.floor(i/65536)),s=(i=s+r+65535)-65536*(r=Math.floor(i/65536)),u=(i=u+r+65535)-65536*(r=Math.floor(i/65536)),c=(i=c+r+65535)-65536*(r=Math.floor(i/65536)),p=(i=p+r+65535)-65536*(r=Math.floor(i/65536)),l=(i=l+r+65535)-65536*(r=Math.floor(i/65536)),m=(i=m+r+65535)-65536*(r=Math.floor(i/65536)),h=(i=h+r+65535)-65536*(r=Math.floor(i/65536)),d=(i=d+r+65535)-65536*(r=Math.floor(i/65536)),f=(i=f+r+65535)-65536*(r=Math.floor(i/65536)),g=(i=g+r+65535)-65536*(r=Math.floor(i/65536)),v=(i=v+r+65535)-65536*(r=Math.floor(i/65536)),y=(i=y+r+65535)-65536*(r=Math.floor(i/65536)),b=(i=b+r+65535)-65536*(r=Math.floor(i/65536)),k=(i=k+r+65535)-65536*(r=Math.floor(i/65536)),o=(i=(o+=r-1+37*(r-1))+(r=1)+65535)-65536*(r=Math.floor(i/65536)),n=(i=n+r+65535)-65536*(r=Math.floor(i/65536)),s=(i=s+r+65535)-65536*(r=Math.floor(i/65536)),u=(i=u+r+65535)-65536*(r=Math.floor(i/65536)),c=(i=c+r+65535)-65536*(r=Math.floor(i/65536)),p=(i=p+r+65535)-65536*(r=Math.floor(i/65536)),l=(i=l+r+65535)-65536*(r=Math.floor(i/65536)),m=(i=m+r+65535)-65536*(r=Math.floor(i/65536)),h=(i=h+r+65535)-65536*(r=Math.floor(i/65536)),d=(i=d+r+65535)-65536*(r=Math.floor(i/65536)),f=(i=f+r+65535)-65536*(r=Math.floor(i/65536)),g=(i=g+r+65535)-65536*(r=Math.floor(i/65536)),v=(i=v+r+65535)-65536*(r=Math.floor(i/65536)),y=(i=y+r+65535)-65536*(r=Math.floor(i/65536)),b=(i=b+r+65535)-65536*(r=Math.floor(i/65536)),k=(i=k+r+65535)-65536*(r=Math.floor(i/65536)),o+=r-1+37*(r-1),e[0]=o,e[1]=n,e[2]=s,e[3]=u,e[4]=c,e[5]=p,e[6]=l,e[7]=m,e[8]=h,e[9]=d,e[10]=f,e[11]=g,e[12]=v,e[13]=y,e[14]=b,e[15]=k}function U(e,t){L(e,t,t)}function N(e,a){var i,r=t();for(i=0;i<16;i++)r[i]=a[i];for(i=253;i>=0;i--)U(r,r),2!==i&&4!==i&&L(r,r,a);for(i=0;i<16;i++)e[i]=r[i]}function H(e,a,i){var r,o,n=new Uint8Array(32),s=new Float64Array(80),c=t(),p=t(),l=t(),m=t(),h=t(),d=t();for(o=0;o<31;o++)n[o]=a[o];for(n[31]=127&a[31]|64,n[0]&=248,I(s,i),o=0;o<16;o++)p[o]=s[o],m[o]=c[o]=l[o]=0;for(c[0]=m[0]=1,o=254;o>=0;--o)P(c,p,r=n[o>>>3]>>>(7&o)&1),P(l,m,r),D(h,c,l),B(c,c,l),D(l,p,m),B(p,p,m),U(m,h),U(d,c),L(c,l,c),L(l,p,h),D(h,c,l),B(c,c,l),U(p,c),B(l,m,d),L(c,l,u),D(c,c,m),L(l,l,c),L(c,m,d),L(m,p,s),U(p,h),P(c,p,r),P(l,m,r);for(o=0;o<16;o++)s[o+16]=c[o],s[o+32]=l[o],s[o+48]=p[o],s[o+64]=m[o];var f=s.subarray(32),g=s.subarray(16);return N(f,f),L(g,g,f),F(e,g),0}function M(e,t){return H(e,t,o)}function K(e,t){return i(t,32),M(e,t)}function $(e,t,a){var i=new Uint8Array(32);return H(i,a,t),b(e,r,i,k)}S.prototype.blocks=function(e,t,a){for(var i,r,o,n,s,u,c,p,l,m,h,d,f,g,v,y,b,k,j,w=this.fin?0:2048,x=this.h[0],E=this.h[1],S=this.h[2],_=this.h[3],R=this.h[4],A=this.h[5],C=this.h[6],q=this.h[7],O=this.h[8],P=this.h[9],F=this.r[0],z=this.r[1],T=this.r[2],I=this.r[3],D=this.r[4],B=this.r[5],L=this.r[6],U=this.r[7],N=this.r[8],H=this.r[9];a>=16;)m=l=0,m+=(x+=8191&(i=255&e[t+0]|(255&e[t+1])<<8))*F,m+=(E+=8191&(i>>>13|(r=255&e[t+2]|(255&e[t+3])<<8)<<3))*(5*H),m+=(S+=8191&(r>>>10|(o=255&e[t+4]|(255&e[t+5])<<8)<<6))*(5*N),m+=(_+=8191&(o>>>7|(n=255&e[t+6]|(255&e[t+7])<<8)<<9))*(5*U),l=(m+=(R+=8191&(n>>>4|(s=255&e[t+8]|(255&e[t+9])<<8)<<12))*(5*L))>>>13,m&=8191,m+=(A+=s>>>1&8191)*(5*B),m+=(C+=8191&(s>>>14|(u=255&e[t+10]|(255&e[t+11])<<8)<<2))*(5*D),m+=(q+=8191&(u>>>11|(c=255&e[t+12]|(255&e[t+13])<<8)<<5))*(5*I),m+=(O+=8191&(c>>>8|(p=255&e[t+14]|(255&e[t+15])<<8)<<8))*(5*T),h=l+=(m+=(P+=p>>>5|w)*(5*z))>>>13,h+=x*z,h+=E*F,h+=S*(5*H),h+=_*(5*N),l=(h+=R*(5*U))>>>13,h&=8191,h+=A*(5*L),h+=C*(5*B),h+=q*(5*D),h+=O*(5*I),l+=(h+=P*(5*T))>>>13,h&=8191,d=l,d+=x*T,d+=E*z,d+=S*F,d+=_*(5*H),l=(d+=R*(5*N))>>>13,d&=8191,d+=A*(5*U),d+=C*(5*L),d+=q*(5*B),d+=O*(5*D),f=l+=(d+=P*(5*I))>>>13,f+=x*I,f+=E*T,f+=S*z,f+=_*F,l=(f+=R*(5*H))>>>13,f&=8191,f+=A*(5*N),f+=C*(5*U),f+=q*(5*L),f+=O*(5*B),g=l+=(f+=P*(5*D))>>>13,g+=x*D,g+=E*I,g+=S*T,g+=_*z,l=(g+=R*F)>>>13,g&=8191,g+=A*(5*H),g+=C*(5*N),g+=q*(5*U),g+=O*(5*L),v=l+=(g+=P*(5*B))>>>13,v+=x*B,v+=E*D,v+=S*I,v+=_*T,l=(v+=R*z)>>>13,v&=8191,v+=A*F,v+=C*(5*H),v+=q*(5*N),v+=O*(5*U),y=l+=(v+=P*(5*L))>>>13,y+=x*L,y+=E*B,y+=S*D,y+=_*I,l=(y+=R*T)>>>13,y&=8191,y+=A*z,y+=C*F,y+=q*(5*H),y+=O*(5*N),b=l+=(y+=P*(5*U))>>>13,b+=x*U,b+=E*L,b+=S*B,b+=_*D,l=(b+=R*I)>>>13,b&=8191,b+=A*T,b+=C*z,b+=q*F,b+=O*(5*H),k=l+=(b+=P*(5*N))>>>13,k+=x*N,k+=E*U,k+=S*L,k+=_*B,l=(k+=R*D)>>>13,k&=8191,k+=A*I,k+=C*T,k+=q*z,k+=O*F,j=l+=(k+=P*(5*H))>>>13,j+=x*H,j+=E*N,j+=S*U,j+=_*L,l=(j+=R*B)>>>13,j&=8191,j+=A*D,j+=C*I,j+=q*T,j+=O*z,x=m=8191&(l=(l=((l+=(j+=P*F)>>>13)<<2)+l|0)+(m&=8191)|0),E=h+=l>>>=13,S=d&=8191,_=f&=8191,R=g&=8191,A=v&=8191,C=y&=8191,q=b&=8191,O=k&=8191,P=j&=8191,t+=16,a-=16;this.h[0]=x,this.h[1]=E,this.h[2]=S,this.h[3]=_,this.h[4]=R,this.h[5]=A,this.h[6]=C,this.h[7]=q,this.h[8]=O,this.h[9]=P},S.prototype.finish=function(e,t){var a,i,r,o,n=new Uint16Array(10);if(this.leftover){for(o=this.leftover,this.buffer[o++]=1;o<16;o++)this.buffer[o]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(a=this.h[1]>>>13,this.h[1]&=8191,o=2;o<10;o++)this.h[o]+=a,a=this.h[o]>>>13,this.h[o]&=8191;for(this.h[0]+=5*a,a=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=a,a=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=a,n[0]=this.h[0]+5,a=n[0]>>>13,n[0]&=8191,o=1;o<10;o++)n[o]=this.h[o]+a,a=n[o]>>>13,n[o]&=8191;for(n[9]-=8192,i=(1^a)-1,o=0;o<10;o++)n[o]&=i;for(i=~i,o=0;o<10;o++)this.h[o]=this.h[o]&i|n[o];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),r=this.h[0]+this.pad[0],this.h[0]=65535&r,o=1;o<8;o++)r=(this.h[o]+this.pad[o]|0)+(r>>>16)|0,this.h[o]=65535&r;e[t+0]=this.h[0]>>>0&255,e[t+1]=this.h[0]>>>8&255,e[t+2]=this.h[1]>>>0&255,e[t+3]=this.h[1]>>>8&255,e[t+4]=this.h[2]>>>0&255,e[t+5]=this.h[2]>>>8&255,e[t+6]=this.h[3]>>>0&255,e[t+7]=this.h[3]>>>8&255,e[t+8]=this.h[4]>>>0&255,e[t+9]=this.h[4]>>>8&255,e[t+10]=this.h[5]>>>0&255,e[t+11]=this.h[5]>>>8&255,e[t+12]=this.h[6]>>>0&255,e[t+13]=this.h[6]>>>8&255,e[t+14]=this.h[7]>>>0&255,e[t+15]=this.h[7]>>>8&255},S.prototype.update=function(e,t,a){var i,r;if(this.leftover){for((r=16-this.leftover)>a&&(r=a),i=0;i<r;i++)this.buffer[this.leftover+i]=e[t+i];if(a-=r,t+=r,this.leftover+=r,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(a>=16&&(r=a-a%16,this.blocks(e,t,r),t+=r,a-=r),a){for(i=0;i<a;i++)this.buffer[this.leftover+i]=e[t+i];this.leftover+=a}};var G=A,V=C;var Q=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function W(e,t,a,i){for(var r,o,n,s,u,c,p,l,m,h,d,f,g,v,y,b,k,j,w,x,E,S,_,R,A,C,q=new Int32Array(16),O=new Int32Array(16),P=e[0],F=e[1],z=e[2],T=e[3],I=e[4],D=e[5],B=e[6],L=e[7],U=t[0],N=t[1],H=t[2],M=t[3],K=t[4],$=t[5],G=t[6],V=t[7],W=0;i>=128;){for(w=0;w<16;w++)x=8*w+W,q[w]=a[x+0]<<24|a[x+1]<<16|a[x+2]<<8|a[x+3],O[w]=a[x+4]<<24|a[x+5]<<16|a[x+6]<<8|a[x+7];for(w=0;w<80;w++)if(r=P,o=F,n=z,s=T,u=I,c=D,p=B,L,m=U,h=N,d=H,f=M,g=K,v=$,y=G,V,_=65535&(S=V),R=S>>>16,A=65535&(E=L),C=E>>>16,_+=65535&(S=(K>>>14|I<<18)^(K>>>18|I<<14)^(I>>>9|K<<23)),R+=S>>>16,A+=65535&(E=(I>>>14|K<<18)^(I>>>18|K<<14)^(K>>>9|I<<23)),C+=E>>>16,_+=65535&(S=K&$^~K&G),R+=S>>>16,A+=65535&(E=I&D^~I&B),C+=E>>>16,E=Q[2*w],_+=65535&(S=Q[2*w+1]),R+=S>>>16,A+=65535&E,C+=E>>>16,E=q[w%16],R+=(S=O[w%16])>>>16,A+=65535&E,C+=E>>>16,A+=(R+=(_+=65535&S)>>>16)>>>16,_=65535&(S=j=65535&_|R<<16),R=S>>>16,A=65535&(E=k=65535&A|(C+=A>>>16)<<16),C=E>>>16,_+=65535&(S=(U>>>28|P<<4)^(P>>>2|U<<30)^(P>>>7|U<<25)),R+=S>>>16,A+=65535&(E=(P>>>28|U<<4)^(U>>>2|P<<30)^(U>>>7|P<<25)),C+=E>>>16,R+=(S=U&N^U&H^N&H)>>>16,A+=65535&(E=P&F^P&z^F&z),C+=E>>>16,l=65535&(A+=(R+=(_+=65535&S)>>>16)>>>16)|(C+=A>>>16)<<16,b=65535&_|R<<16,_=65535&(S=f),R=S>>>16,A=65535&(E=s),C=E>>>16,R+=(S=j)>>>16,A+=65535&(E=k),C+=E>>>16,F=r,z=o,T=n,I=s=65535&(A+=(R+=(_+=65535&S)>>>16)>>>16)|(C+=A>>>16)<<16,D=u,B=c,L=p,P=l,N=m,H=h,M=d,K=f=65535&_|R<<16,$=g,G=v,V=y,U=b,w%16==15)for(x=0;x<16;x++)E=q[x],_=65535&(S=O[x]),R=S>>>16,A=65535&E,C=E>>>16,E=q[(x+9)%16],_+=65535&(S=O[(x+9)%16]),R+=S>>>16,A+=65535&E,C+=E>>>16,k=q[(x+1)%16],_+=65535&(S=((j=O[(x+1)%16])>>>1|k<<31)^(j>>>8|k<<24)^(j>>>7|k<<25)),R+=S>>>16,A+=65535&(E=(k>>>1|j<<31)^(k>>>8|j<<24)^k>>>7),C+=E>>>16,k=q[(x+14)%16],R+=(S=((j=O[(x+14)%16])>>>19|k<<13)^(k>>>29|j<<3)^(j>>>6|k<<26))>>>16,A+=65535&(E=(k>>>19|j<<13)^(j>>>29|k<<3)^k>>>6),C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,q[x]=65535&A|C<<16,O[x]=65535&_|R<<16;_=65535&(S=U),R=S>>>16,A=65535&(E=P),C=E>>>16,E=e[0],R+=(S=t[0])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[0]=P=65535&A|C<<16,t[0]=U=65535&_|R<<16,_=65535&(S=N),R=S>>>16,A=65535&(E=F),C=E>>>16,E=e[1],R+=(S=t[1])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[1]=F=65535&A|C<<16,t[1]=N=65535&_|R<<16,_=65535&(S=H),R=S>>>16,A=65535&(E=z),C=E>>>16,E=e[2],R+=(S=t[2])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[2]=z=65535&A|C<<16,t[2]=H=65535&_|R<<16,_=65535&(S=M),R=S>>>16,A=65535&(E=T),C=E>>>16,E=e[3],R+=(S=t[3])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[3]=T=65535&A|C<<16,t[3]=M=65535&_|R<<16,_=65535&(S=K),R=S>>>16,A=65535&(E=I),C=E>>>16,E=e[4],R+=(S=t[4])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[4]=I=65535&A|C<<16,t[4]=K=65535&_|R<<16,_=65535&(S=$),R=S>>>16,A=65535&(E=D),C=E>>>16,E=e[5],R+=(S=t[5])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[5]=D=65535&A|C<<16,t[5]=$=65535&_|R<<16,_=65535&(S=G),R=S>>>16,A=65535&(E=B),C=E>>>16,E=e[6],R+=(S=t[6])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[6]=B=65535&A|C<<16,t[6]=G=65535&_|R<<16,_=65535&(S=V),R=S>>>16,A=65535&(E=L),C=E>>>16,E=e[7],R+=(S=t[7])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[7]=L=65535&A|C<<16,t[7]=V=65535&_|R<<16,W+=128,i-=128}return i}function Y(e,t,a){var i,r=new Int32Array(8),o=new Int32Array(8),n=new Uint8Array(256),s=a;for(r[0]=1779033703,r[1]=3144134277,r[2]=1013904242,r[3]=2773480762,r[4]=1359893119,r[5]=2600822924,r[6]=528734635,r[7]=1541459225,o[0]=4089235720,o[1]=2227873595,o[2]=4271175723,o[3]=1595750129,o[4]=2917565137,o[5]=725511199,o[6]=4215389547,o[7]=327033209,W(r,o,t,a),a%=128,i=0;i<a;i++)n[i]=t[s-a+i];for(n[a]=128,n[(a=256-128*(a<112?1:0))-9]=0,d(n,a-8,s/536870912|0,s<<3),W(r,o,n,a),i=0;i<8;i++)d(e,8*i,r[i],o[i]);return 0}function Z(e,a){var i=t(),r=t(),o=t(),n=t(),s=t(),u=t(),c=t(),l=t(),m=t();B(i,e[1],e[0]),B(m,a[1],a[0]),L(i,i,m),D(r,e[0],e[1]),D(m,a[0],a[1]),L(r,r,m),L(o,e[3],a[3]),L(o,o,p),L(n,e[2],a[2]),D(n,n,n),B(s,r,i),B(u,n,o),D(c,n,o),D(l,r,i),L(e[0],s,u),L(e[1],l,c),L(e[2],c,u),L(e[3],s,l)}function J(e,t,a){var i;for(i=0;i<4;i++)P(e[i],t[i],a)}function X(e,a){var i=t(),r=t(),o=t();N(o,a[2]),L(i,a[0],o),L(r,a[1],o),F(e,r),e[31]^=T(i)<<7}function ee(e,t,a){var i,r;for(q(e[0],n),q(e[1],s),q(e[2],s),q(e[3],n),r=255;r>=0;--r)J(e,t,i=a[r/8|0]>>(7&r)&1),Z(t,e),Z(e,e),J(e,t,i)}function te(e,a){var i=[t(),t(),t(),t()];q(i[0],l),q(i[1],m),q(i[2],s),L(i[3],l,m),ee(e,i,a)}function ae(e,a,r){var o,n=new Uint8Array(64),s=[t(),t(),t(),t()];for(r||i(a,32),Y(n,a,32),n[0]&=248,n[31]&=127,n[31]|=64,te(s,n),X(e,s),o=0;o<32;o++)a[o+32]=e[o];return 0}var ie=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function re(e,t){var a,i,r,o;for(i=63;i>=32;--i){for(a=0,r=i-32,o=i-12;r<o;++r)t[r]+=a-16*t[i]*ie[r-(i-32)],a=t[r]+128>>8,t[r]-=256*a;t[r]+=a,t[i]=0}for(a=0,r=0;r<32;r++)t[r]+=a-(t[31]>>4)*ie[r],a=t[r]>>8,t[r]&=255;for(r=0;r<32;r++)t[r]-=a*ie[r];for(i=0;i<32;i++)t[i+1]+=t[i]>>8,e[i]=255&t[i]}function oe(e){var t,a=new Float64Array(64);for(t=0;t<64;t++)a[t]=e[t];for(t=0;t<64;t++)e[t]=0;re(e,a)}function ne(e,a,i,r){var o,n,s=new Uint8Array(64),u=new Uint8Array(64),c=new Uint8Array(64),p=new Float64Array(64),l=[t(),t(),t(),t()];Y(s,r,32),s[0]&=248,s[31]&=127,s[31]|=64;var m=i+64;for(o=0;o<i;o++)e[64+o]=a[o];for(o=0;o<32;o++)e[32+o]=s[32+o];for(Y(c,e.subarray(32),i+32),oe(c),te(l,c),X(e,l),o=32;o<64;o++)e[o]=r[o];for(Y(u,e,i+64),oe(u),o=0;o<64;o++)p[o]=0;for(o=0;o<32;o++)p[o]=c[o];for(o=0;o<32;o++)for(n=0;n<32;n++)p[o+n]+=u[o]*s[n];return re(e.subarray(32),p),m}function se(e,a){var i=t(),r=t(),o=t(),u=t(),p=t(),l=t(),m=t();return q(e[2],s),I(e[1],a),U(o,e[1]),L(u,o,c),B(o,o,e[2]),D(u,e[2],u),U(p,u),U(l,p),L(m,l,p),L(i,m,o),L(i,i,u),function(e,a){var i,r=t();for(i=0;i<16;i++)r[i]=a[i];for(i=250;i>=0;i--)U(r,r),1!==i&&L(r,r,a);for(i=0;i<16;i++)e[i]=r[i]}(i,i),L(i,i,o),L(i,i,u),L(i,i,u),L(e[0],i,u),U(r,e[0]),L(r,r,u),z(r,o)&&L(e[0],e[0],h),U(r,e[0]),L(r,r,u),z(r,o)?-1:(T(e[0])===a[31]>>7&&B(e[0],n,e[0]),L(e[3],e[0],e[1]),0)}function ue(e,a,i,r){var o,n=new Uint8Array(32),s=new Uint8Array(64),u=[t(),t(),t(),t()],c=[t(),t(),t(),t()];if(-1,i<64)return-1;if(se(c,r))return-1;for(o=0;o<i;o++)e[o]=a[o];for(o=0;o<32;o++)e[o+32]=r[o];if(Y(s,e,i),oe(s),ee(u,c,s),te(c,a.subarray(32)),Z(u,c),X(n,u),i-=64,v(a,0,n,0)){for(o=0;o<i;o++)e[o]=0;return-1}for(o=0;o<i;o++)e[o]=a[o+64];return i}var ce=32,pe=24,le=32,me=32,he=pe;function de(e,t){if(e.length!==ce)throw new Error("bad key size");if(t.length!==pe)throw new Error("bad nonce size")}function fe(){var e,t;for(t=0;t<arguments.length;t++)if("[object Uint8Array]"!==(e=Object.prototype.toString.call(arguments[t])))throw new TypeError("unexpected type "+e+", use Uint8Array")}function ge(e){for(var t=0;t<e.length;t++)e[t]=0}e.lowlevel={crypto_core_hsalsa20:b,crypto_stream_xor:E,crypto_stream:x,crypto_stream_salsa20_xor:j,crypto_stream_salsa20:w,crypto_onetimeauth:_,crypto_onetimeauth_verify:R,crypto_verify_16:g,crypto_verify_32:v,crypto_secretbox:A,crypto_secretbox_open:C,crypto_scalarmult:H,crypto_scalarmult_base:M,crypto_box_beforenm:$,crypto_box_afternm:G,crypto_box:function(e,t,a,i,r,o){var n=new Uint8Array(32);return $(n,r,o),G(e,t,a,i,n)},crypto_box_open:function(e,t,a,i,r,o){var n=new Uint8Array(32);return $(n,r,o),V(e,t,a,i,n)},crypto_box_keypair:K,crypto_hash:Y,crypto_sign:ne,crypto_sign_keypair:ae,crypto_sign_open:ue,crypto_secretbox_KEYBYTES:ce,crypto_secretbox_NONCEBYTES:pe,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:le,crypto_box_SECRETKEYBYTES:me,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:he,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:64,crypto_sign_PUBLICKEYBYTES:32,crypto_sign_SECRETKEYBYTES:64,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64},e.util||(e.util={},e.util.decodeUTF8=e.util.encodeUTF8=e.util.encodeBase64=e.util.decodeBase64=function(){throw new Error("nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js")}),e.randomBytes=function(e){var t=new Uint8Array(e);return i(t,e),t},e.secretbox=function(e,t,a){fe(e,t,a),de(a,t);for(var i=new Uint8Array(32+e.length),r=new Uint8Array(i.length),o=0;o<e.length;o++)i[o+32]=e[o];return A(r,i,i.length,t,a),r.subarray(16)},e.secretbox.open=function(e,t,a){fe(e,t,a),de(a,t);for(var i=new Uint8Array(16+e.length),r=new Uint8Array(i.length),o=0;o<e.length;o++)i[o+16]=e[o];return!(i.length<32)&&(0===C(r,i,i.length,t,a)&&r.subarray(32))},e.secretbox.keyLength=ce,e.secretbox.nonceLength=pe,e.secretbox.overheadLength=16,e.scalarMult=function(e,t){if(fe(e,t),32!==e.length)throw new Error("bad n size");if(32!==t.length)throw new Error("bad p size");var a=new Uint8Array(32);return H(a,e,t),a},e.scalarMult.base=function(e){if(fe(e),32!==e.length)throw new Error("bad n size");var t=new Uint8Array(32);return M(t,e),t},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(t,a,i,r){var o=e.box.before(i,r);return e.secretbox(t,a,o)},e.box.before=function(e,t){fe(e,t),function(e,t){if(e.length!==le)throw new Error("bad public key size");if(t.length!==me)throw new Error("bad secret key size")}(e,t);var a=new Uint8Array(32);return $(a,e,t),a},e.box.after=e.secretbox,e.box.open=function(t,a,i,r){var o=e.box.before(i,r);return e.secretbox.open(t,a,o)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(le),t=new Uint8Array(me);return K(e,t),{publicKey:e,secretKey:t}},e.box.keyPair.fromSecretKey=function(e){if(fe(e),e.length!==me)throw new Error("bad secret key size");var t=new Uint8Array(le);return M(t,e),{publicKey:t,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=le,e.box.secretKeyLength=me,e.box.sharedKeyLength=32,e.box.nonceLength=he,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,t){if(fe(e,t),64!==t.length)throw new Error("bad secret key size");var a=new Uint8Array(64+e.length);return ne(a,e,e.length,t),a},e.sign.open=function(e,t){if(2!==arguments.length)throw new Error("nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?");if(fe(e,t),32!==t.length)throw new Error("bad public key size");var a=new Uint8Array(e.length),i=ue(a,e,e.length,t);if(i<0)return null;for(var r=new Uint8Array(i),o=0;o<r.length;o++)r[o]=a[o];return r},e.sign.detached=function(t,a){for(var i=e.sign(t,a),r=new Uint8Array(64),o=0;o<r.length;o++)r[o]=i[o];return r},e.sign.detached.verify=function(e,t,a){if(fe(e,t,a),64!==t.length)throw new Error("bad signature size");if(32!==a.length)throw new Error("bad public key size");var i,r=new Uint8Array(64+e.length),o=new Uint8Array(64+e.length);for(i=0;i<64;i++)r[i]=t[i];for(i=0;i<e.length;i++)r[i+64]=e[i];return ue(o,r,r.length,a)>=0},e.sign.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(64);return ae(e,t),{publicKey:e,secretKey:t}},e.sign.keyPair.fromSecretKey=function(e){if(fe(e),64!==e.length)throw new Error("bad secret key size");for(var t=new Uint8Array(32),a=0;a<t.length;a++)t[a]=e[32+a];return{publicKey:t,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(fe(e),32!==e.length)throw new Error("bad seed size");for(var t=new Uint8Array(32),a=new Uint8Array(64),i=0;i<32;i++)a[i]=e[i];return ae(t,a,!0),{publicKey:t,secretKey:a}},e.sign.publicKeyLength=32,e.sign.secretKeyLength=64,e.sign.seedLength=32,e.sign.signatureLength=64,e.hash=function(e){fe(e);var t=new Uint8Array(64);return Y(t,e,e.length),t},e.hash.hashLength=64,e.verify=function(e,t){return fe(e,t),0!==e.length&&0!==t.length&&(e.length===t.length&&0===f(e,0,t,0,e.length))},e.setPRNG=function(e){i=e},function(){var t="undefined"!=typeof self?self.crypto||self.msCrypto:null;if(t&&t.getRandomValues){e.setPRNG(function(e,a){var i,r=new Uint8Array(a);for(i=0;i<a;i+=65536)t.getRandomValues(r.subarray(i,i+Math.min(a-i,65536)));for(i=0;i<a;i++)e[i]=r[i];ge(r)})}else(t=a(2))&&t.randomBytes&&e.setPRNG(function(e,a){var i,r=t.randomBytes(a);for(i=0;i<a;i++)e[i]=r[i];ge(r)})}()}(e.exports?e.exports:self.nacl=self.nacl||{})},function(e,t,a){e.exports=o;var i=a(0),r=a(3).Buffer;function o(e){i.object(e,"options"),void 0!==e.buffer&&i.buffer(e.buffer,"options.buffer"),this._size=e.buffer?e.buffer.length:1024,this._buffer=e.buffer||r.alloc(this._size),this._offset=0}o.prototype.toBuffer=function(){return this._buffer.slice(0,this._offset)},o.prototype.atEnd=function(){return this._offset>=this._buffer.length},o.prototype.remainder=function(){return this._buffer.slice(this._offset)},o.prototype.skip=function(e){this._offset+=e},o.prototype.expand=function(){this._size*=2;var e=r.alloc(this._size);this._buffer.copy(e,0),this._buffer=e},o.prototype.readPart=function(){return{data:this.readBuffer()}},o.prototype.readBuffer=function(){var e=this._buffer.readUInt32BE(this._offset);this._offset+=4,i.ok(this._offset+e<=this._buffer.length,"length out of bounds at +0x"+this._offset.toString(16)+" (data truncated?)");var t=this._buffer.slice(this._offset,this._offset+e);return this._offset+=e,t},o.prototype.readString=function(){return this.readBuffer().toString()},o.prototype.readCString=function(){for(var e=this._offset;e<this._buffer.length&&0!==this._buffer[e];)e++;i.ok(e<this._buffer.length,"c string does not terminate");var t=this._buffer.slice(this._offset,e).toString();return this._offset=e+1,t},o.prototype.readInt=function(){var e=this._buffer.readUInt32BE(this._offset);return this._offset+=4,e},o.prototype.readInt64=function(){i.ok(this._offset+8<this._buffer.length,"buffer not long enough to read Int64");var e=this._buffer.slice(this._offset,this._offset+8);return this._offset+=8,e},o.prototype.readChar=function(){return this._buffer[this._offset++]},o.prototype.writeBuffer=function(e){for(;this._offset+4+e.length>this._size;)this.expand();this._buffer.writeUInt32BE(e.length,this._offset),this._offset+=4,e.copy(this._buffer,this._offset),this._offset+=e.length},o.prototype.writeString=function(e){this.writeBuffer(r.from(e,"utf8"))},o.prototype.writeCString=function(e){for(;this._offset+1+e.length>this._size;)this.expand();this._buffer.write(e,this._offset),this._offset+=e.length,this._buffer[this._offset++]=0},o.prototype.writeInt=function(e){for(;this._offset+4>this._size;)this.expand();this._buffer.writeUInt32BE(e,this._offset),this._offset+=4},o.prototype.writeInt64=function(e){if(i.buffer(e,"value"),e.length>8){for(var t=e.slice(0,e.length-8),a=0;a<t.length;++a)i.strictEqual(t[a],0,"must fit in 64 bits of precision");e=e.slice(e.length-8,e.length)}for(;this._offset+8>this._size;)this.expand();e.copy(this._buffer,this._offset),this._offset+=8},o.prototype.writeChar=function(e){for(;this._offset+1>this._size;)this.expand();this._buffer[this._offset++]=e},o.prototype.writePart=function(e){this.writeBuffer(e.data)},o.prototype.write=function(e){for(;this._offset+e.length>this._size;)this.expand();e.copy(this._buffer,this._offset),this._offset+=e.length}},function(e,t,a){e.exports={read:function(e,t){return p.read(e,t,"pkcs8")},readPkcs8:function(e,t,a){a.peek()===r.Ber.Integer&&(i.strictEqual(t,"private","unexpected Integer at start of public key"),a.readString(r.Ber.Integer,!0));a.readSequence();var n=a.offset+a.length,p=a.readOID();switch(p){case"1.2.840.113549.1.1.1":return a._offset=n,"public"===t?function(e){e.readSequence(r.Ber.BitString),e.readByte(),e.readSequence();var t=l(e,"modulus"),a=l(e,"exponent"),i={type:"rsa",source:e.originalInput,parts:[{name:"e",data:a},{name:"n",data:t}]};return new u(i)}(a):function(e){e.readSequence(r.Ber.OctetString),e.readSequence();var t=l(e,"version");i.equal(t[0],0,"unknown RSA private key version");var a=l(e,"modulus"),o=l(e,"public exponent"),n=l(e,"private exponent"),s=l(e,"prime1"),u=l(e,"prime2"),p=l(e,"exponent1"),m=l(e,"exponent2"),h=l(e,"iqmp");return new c({type:"rsa",parts:[{name:"n",data:a},{name:"e",data:o},{name:"d",data:n},{name:"iqmp",data:h},{name:"p",data:s},{name:"q",data:u},{name:"dmodp",data:p},{name:"dmodq",data:m}]})}(a);case"1.2.840.10040.4.1":return"public"===t?function(e){e.readSequence();var t=l(e,"p"),a=l(e,"q"),i=l(e,"g");e.readSequence(r.Ber.BitString),e.readByte();var o=l(e,"y");return new u({type:"dsa",parts:[{name:"p",data:t},{name:"q",data:a},{name:"g",data:i},{name:"y",data:o}]})}(a):function(e){e.readSequence();var t=l(e,"p"),a=l(e,"q"),i=l(e,"g");e.readSequence(r.Ber.OctetString);var o=l(e,"x"),n=s.calculateDSAPublic(i,t,o);return new c({type:"dsa",parts:[{name:"p",data:t},{name:"q",data:a},{name:"g",data:i},{name:"y",data:n},{name:"x",data:o}]})}(a);case"1.2.840.10045.2.1":return"public"===t?function(e){var t=m(e);i.string(t,"a known elliptic curve");var a=e.readString(r.Ber.BitString,!0);a=s.ecNormalize(a);var n={type:"ecdsa",parts:[{name:"curve",data:o.from(t)},{name:"Q",data:a}]};return new u(n)}(a):function(e){var t=m(e);i.string(t,"a known elliptic curve"),e.readSequence(r.Ber.OctetString),e.readSequence();var a=l(e,"version");i.equal(a[0],1,"unknown version of ECDSA key");var n,u=e.readString(r.Ber.OctetString,!0);160==e.peek()&&(e.readSequence(160),e._offset+=e.length);161==e.peek()&&(e.readSequence(161),n=e.readString(r.Ber.BitString,!0),n=s.ecNormalize(n));if(void 0===n){var p=s.publicFromPrivateECDSA(t,u);n=p.part.Q.data}var h={type:"ecdsa",parts:[{name:"curve",data:o.from(t)},{name:"Q",data:n},{name:"d",data:u}]};return new c(h)}(a);case"1.3.101.112":return"public"===t?function(e){0===e.peek()&&e.readByte();var t=s.readBitString(e),a={type:"ed25519",parts:[{name:"A",data:s.zeroPadToLength(t,32)}]};return new u(a)}(a):function(e){0===e.peek()&&e.readByte();e.readSequence(r.Ber.OctetString);var t,a=e.readString(r.Ber.OctetString,!0);a=s.zeroPadToLength(a,32),e.peek()===r.Ber.BitString?(t=s.readBitString(e),t=s.zeroPadToLength(t,32)):t=s.calculateED25519Public(a);var i={type:"ed25519",parts:[{name:"A",data:s.zeroPadToLength(t,32)},{name:"k",data:s.zeroPadToLength(a,32)}]};return new c(i)}(a);case"1.3.101.110":return"public"===t?function(e){var t=s.readBitString(e),a={type:"curve25519",parts:[{name:"A",data:s.zeroPadToLength(t,32)}]};return new u(a)}(a):function(e){0===e.peek()&&e.readByte();e.readSequence(r.Ber.OctetString);var t=e.readString(r.Ber.OctetString,!0);t=s.zeroPadToLength(t,32);var a=s.calculateX25519Public(t),i={type:"curve25519",parts:[{name:"A",data:s.zeroPadToLength(a,32)},{name:"k",data:s.zeroPadToLength(t,32)}]};return new c(i)}(a);default:throw new Error("Unknown key type OID "+p)}},write:function(e,t){return p.write(e,t,"pkcs8")},writePkcs8:h,pkcs8ToBuffer:function(e){var t=new r.BerWriter;return h(t,e),t.buffer},readECDSACurve:m,writeECDSACurve:d};var i=a(0),r=a(12),o=a(3).Buffer,n=a(7),s=a(5),u=a(4),c=a(6),p=a(15);function l(e,t){return i.strictEqual(e.peek(),r.Ber.Integer,t+" is not an Integer"),s.mpNormalize(e.readString(r.Ber.Integer,!0))}function m(e){var t,a,u,c,p;if(e.peek()===r.Ber.OID){var l=e.readOID();for(a=Object.keys(n.curves),u=0;u<a.length;++u)if(c=a[u],(p=n.curves[c]).pkcs8oid===l){t=c;break}}else{e.readSequence();var m=e.readString(r.Ber.Integer,!0);i.strictEqual(m[0],1,"ECDSA key not version 1");var h={};e.readSequence();var d=e.readOID();i.strictEqual(d,"1.2.840.10045.1.1","ECDSA key is not from a prime-field");var f=h.p=s.mpNormalize(e.readString(r.Ber.Integer,!0));h.size=8*f.length-s.countZeros(f),e.readSequence(),h.a=s.mpNormalize(e.readString(r.Ber.OctetString,!0)),h.b=s.mpNormalize(e.readString(r.Ber.OctetString,!0)),e.peek()===r.Ber.BitString&&(h.s=e.readString(r.Ber.BitString,!0)),h.G=e.readString(r.Ber.OctetString,!0),i.strictEqual(h.G[0],4,"uncompressed G is required"),h.n=s.mpNormalize(e.readString(r.Ber.Integer,!0)),h.h=s.mpNormalize(e.readString(r.Ber.Integer,!0)),i.strictEqual(h.h[0],1,"a cofactor=1 curve is required"),a=Object.keys(n.curves);var g=Object.keys(h);for(u=0;u<a.length;++u){c=a[u],p=n.curves[c];for(var v=!0,y=0;y<g.length;++y){var b=g[y];if(void 0!==p[b])if("object"==typeof p[b]&&void 0!==p[b].equals){if(!p[b].equals(h[b])){v=!1;break}}else if(o.isBuffer(p[b])){if(p[b].toString("binary")!==h[b].toString("binary")){v=!1;break}}else if(p[b]!==h[b]){v=!1;break}}if(v){t=c;break}}}return t}function h(e,t){if(e.startSequence(),c.isPrivateKey(t)){var a=o.from([0]);e.writeBuffer(a,r.Ber.Integer)}switch(e.startSequence(),t.type){case"rsa":e.writeOID("1.2.840.113549.1.1.1"),c.isPrivateKey(t)?function(e,t){t.writeNull(),t.endSequence(),t.startSequence(r.Ber.OctetString),t.startSequence();var a=o.from([0]);t.writeBuffer(a,r.Ber.Integer),t.writeBuffer(e.part.n.data,r.Ber.Integer),t.writeBuffer(e.part.e.data,r.Ber.Integer),t.writeBuffer(e.part.d.data,r.Ber.Integer),t.writeBuffer(e.part.p.data,r.Ber.Integer),t.writeBuffer(e.part.q.data,r.Ber.Integer),e.part.dmodp&&e.part.dmodq||s.addRSAMissing(e);t.writeBuffer(e.part.dmodp.data,r.Ber.Integer),t.writeBuffer(e.part.dmodq.data,r.Ber.Integer),t.writeBuffer(e.part.iqmp.data,r.Ber.Integer),t.endSequence(),t.endSequence()}(t,e):function(e,t){t.writeNull(),t.endSequence(),t.startSequence(r.Ber.BitString),t.writeByte(0),t.startSequence(),t.writeBuffer(e.part.n.data,r.Ber.Integer),t.writeBuffer(e.part.e.data,r.Ber.Integer),t.endSequence(),t.endSequence()}(t,e);break;case"dsa":e.writeOID("1.2.840.10040.4.1"),c.isPrivateKey(t)?function(e,t){t.startSequence(),t.writeBuffer(e.part.p.data,r.Ber.Integer),t.writeBuffer(e.part.q.data,r.Ber.Integer),t.writeBuffer(e.part.g.data,r.Ber.Integer),t.endSequence(),t.endSequence(),t.startSequence(r.Ber.OctetString),t.writeBuffer(e.part.x.data,r.Ber.Integer),t.endSequence()}(t,e):function(e,t){t.startSequence(),t.writeBuffer(e.part.p.data,r.Ber.Integer),t.writeBuffer(e.part.q.data,r.Ber.Integer),t.writeBuffer(e.part.g.data,r.Ber.Integer),t.endSequence(),t.endSequence(),t.startSequence(r.Ber.BitString),t.writeByte(0),t.writeBuffer(e.part.y.data,r.Ber.Integer),t.endSequence()}(t,e);break;case"ecdsa":e.writeOID("1.2.840.10045.2.1"),c.isPrivateKey(t)?function(e,t){d(e,t),t.endSequence(),t.startSequence(r.Ber.OctetString),t.startSequence();var a=o.from([1]);t.writeBuffer(a,r.Ber.Integer),t.writeBuffer(e.part.d.data,r.Ber.OctetString),t.startSequence(161);var i=s.ecNormalize(e.part.Q.data,!0);t.writeBuffer(i,r.Ber.BitString),t.endSequence(),t.endSequence(),t.endSequence()}(t,e):function(e,t){d(e,t),t.endSequence();var a=s.ecNormalize(e.part.Q.data,!0);t.writeBuffer(a,r.Ber.BitString)}(t,e);break;case"ed25519":if(e.writeOID("1.3.101.112"),c.isPrivateKey(t))throw new Error("Ed25519 private keys in pkcs8 format are not supported");!function(e,t){t.endSequence(),s.writeBitString(t,e.part.A.data)}(t,e);break;default:throw new Error("Unsupported key type: "+t.type)}e.endSequence()}function d(e,t){var a=n.curves[e.curve];if(a.pkcs8oid)t.writeOID(a.pkcs8oid);else{t.startSequence();var i=o.from([1]);t.writeBuffer(i,r.Ber.Integer),t.startSequence(),t.writeOID("1.2.840.10045.1.1"),t.writeBuffer(a.p,r.Ber.Integer),t.endSequence(),t.startSequence();var s=a.p;0===s[0]&&(s=s.slice(1)),t.writeBuffer(s,r.Ber.OctetString),t.writeBuffer(a.b,r.Ber.OctetString),t.writeBuffer(a.s,r.Ber.BitString),t.endSequence(),t.writeBuffer(a.G,r.Ber.OctetString),t.writeBuffer(a.n,r.Ber.Integer);var u=a.h;u||(u=o.from([1])),t.writeBuffer(u,r.Ber.Integer),t.endSequence()}}},function(e,t,a){e.exports=g;var i=a(0),r=a(3).Buffer,o=a(7),n=a(2),s=a(25),u=(a(11),a(9)),c=(a(1),a(5)),p=a(4),l=a(6),m=a(31),h={};h.openssh=a(117),h.x509=a(61),h.pem=a(118);var d=u.CertificateParseError,f=u.InvalidAlgorithmError;function g(e){i.object(e,"options"),i.arrayOfObject(e.subjects,"options.subjects"),c.assertCompatible(e.subjects[0],m,[1,0],"options.subjects"),c.assertCompatible(e.subjectKey,p,[1,0],"options.subjectKey"),c.assertCompatible(e.issuer,m,[1,0],"options.issuer"),void 0!==e.issuerKey&&c.assertCompatible(e.issuerKey,p,[1,0],"options.issuerKey"),i.object(e.signatures,"options.signatures"),i.buffer(e.serial,"options.serial"),i.date(e.validFrom,"options.validFrom"),i.date(e.validUntil,"optons.validUntil"),i.optionalArrayOfString(e.purposes,"options.purposes"),this._hashCache={},this.subjects=e.subjects,this.issuer=e.issuer,this.subjectKey=e.subjectKey,this.issuerKey=e.issuerKey,this.signatures=e.signatures,this.serial=e.serial,this.validFrom=e.validFrom,this.validUntil=e.validUntil,this.purposes=e.purposes}g.formats=h,g.prototype.toBuffer=function(e,t){return void 0===e&&(e="x509"),i.string(e,"format"),i.object(h[e],"formats[format]"),i.optionalObject(t,"options"),h[e].write(this,t)},g.prototype.toString=function(e,t){return void 0===e&&(e="pem"),this.toBuffer(e,t).toString()},g.prototype.fingerprint=function(e){void 0===e&&(e="sha256"),i.string(e,"algorithm");var t={type:"certificate",hash:this.hash(e),algorithm:e};return new s(t)},g.prototype.hash=function(e){if(i.string(e,"algorithm"),e=e.toLowerCase(),void 0===o.hashAlgs[e])throw new f(e);if(this._hashCache[e])return this._hashCache[e];var t=n.createHash(e).update(this.toBuffer("x509")).digest();return this._hashCache[e]=t,t},g.prototype.isExpired=function(e){return void 0===e&&(e=new Date),!(e.getTime()>=this.validFrom.getTime()&&e.getTime()<this.validUntil.getTime())},g.prototype.isSignedBy=function(e){return c.assertCompatible(e,g,[1,0],"issuer"),!!this.issuer.equals(e.subjects[0])&&(!(this.issuer.purposes&&this.issuer.purposes.length>0&&-1===this.issuer.purposes.indexOf("ca"))&&this.isSignedByKey(e.subjectKey))},g.prototype.getExtension=function(e){return i.string(e,"keyOrOid"),this.getExtensions().filter(function(t){return"x509"===t.format?t.oid===e:"openssh"===t.format&&t.name===e})[0]},g.prototype.getExtensions=function(){var e=[],t=this.signatures.x509;t&&t.extras&&t.extras.exts&&t.extras.exts.forEach(function(t){t.format="x509",e.push(t)});var a=this.signatures.openssh;return a&&a.exts&&a.exts.forEach(function(t){t.format="openssh",e.push(t)}),e},g.prototype.isSignedByKey=function(e){if(c.assertCompatible(e,p,[1,2],"issuerKey"),void 0!==this.issuerKey)return this.issuerKey.fingerprint("sha512").matches(e);var t=Object.keys(this.signatures)[0],a=h[t].verify(this,e);return a&&(this.issuerKey=e),a},g.prototype.signWith=function(e){c.assertCompatible(e,l,[1,2],"key");for(var t=Object.keys(h),a=!1,i=0;i<t.length;++i){if("pem"!==t[i])!0===h[t[i]].sign(this,e)&&(a=!0)}if(!a)throw new Error("Failed to sign the certificate for any available certificate formats")},g.createSelfSigned=function(e,t,a){var o;o=Array.isArray(e)?e:[e],i.arrayOfObject(o),o.forEach(function(e){c.assertCompatible(e,m,[1,0],"subject")}),c.assertCompatible(t,l,[1,2],"private key"),i.optionalObject(a,"options"),void 0===a&&(a={}),i.optionalObject(a.validFrom,"options.validFrom"),i.optionalObject(a.validUntil,"options.validUntil");var n=a.validFrom,s=a.validUntil;if(void 0===n&&(n=new Date),void 0===s){i.optionalNumber(a.lifetime,"options.lifetime");var u=a.lifetime;void 0===u&&(u=31536e4),(s=new Date).setTime(s.getTime()+1e3*u)}i.optionalBuffer(a.serial,"options.serial");var p=a.serial;void 0===p&&(p=r.from("0000000000000001","hex"));var h=a.purposes;if(void 0===h&&(h=[]),-1===h.indexOf("signature")&&h.push("signature"),-1===h.indexOf("ca")&&h.push("ca"),-1===h.indexOf("crl")&&h.push("crl"),h.length<=3){var d=o.filter(function(e){return"host"===e.type}),f=o.filter(function(e){return"user"===e.type});d.length>0&&-1===h.indexOf("serverAuth")&&h.push("serverAuth"),f.length>0&&-1===h.indexOf("clientAuth")&&h.push("clientAuth"),(f.length>0||d.length>0)&&(-1===h.indexOf("keyAgreement")&&h.push("keyAgreement"),"rsa"===t.type&&-1===h.indexOf("encryption")&&h.push("encryption"))}var v=new g({subjects:o,issuer:o[0],subjectKey:t.toPublic(),issuerKey:t.toPublic(),signatures:{},serial:p,validFrom:n,validUntil:s,purposes:h});return v.signWith(t),v},g.create=function(e,t,a,o,n){var s;s=Array.isArray(e)?e:[e],i.arrayOfObject(s),s.forEach(function(e){c.assertCompatible(e,m,[1,0],"subject")}),c.assertCompatible(t,p,[1,0],"key"),l.isPrivateKey(t)&&(t=t.toPublic()),c.assertCompatible(a,m,[1,0],"issuer"),c.assertCompatible(o,l,[1,2],"issuer key"),i.optionalObject(n,"options"),void 0===n&&(n={}),i.optionalObject(n.validFrom,"options.validFrom"),i.optionalObject(n.validUntil,"options.validUntil");var u=n.validFrom,h=n.validUntil;if(void 0===u&&(u=new Date),void 0===h){i.optionalNumber(n.lifetime,"options.lifetime");var d=n.lifetime;void 0===d&&(d=31536e4),(h=new Date).setTime(h.getTime()+1e3*d)}i.optionalBuffer(n.serial,"options.serial");var f=n.serial;void 0===f&&(f=r.from("0000000000000001","hex"));var v=n.purposes;void 0===v&&(v=[]),-1===v.indexOf("signature")&&v.push("signature"),!0===n.ca&&(-1===v.indexOf("ca")&&v.push("ca"),-1===v.indexOf("crl")&&v.push("crl"));var y=s.filter(function(e){return"host"===e.type}),b=s.filter(function(e){return"user"===e.type});y.length>0&&-1===v.indexOf("serverAuth")&&v.push("serverAuth"),b.length>0&&-1===v.indexOf("clientAuth")&&v.push("clientAuth"),(b.length>0||y.length>0)&&(-1===v.indexOf("keyAgreement")&&v.push("keyAgreement"),"rsa"===t.type&&-1===v.indexOf("encryption")&&v.push("encryption"));var k=new g({subjects:s,issuer:a,subjectKey:t,issuerKey:o.toPublic(),signatures:{},serial:f,validFrom:u,validUntil:h,purposes:v});return k.signWith(o),k},g.parse=function(e,t,a){"string"!=typeof e&&i.buffer(e,"data"),void 0===t&&(t="auto"),i.string(t,"format"),"string"==typeof a&&(a={filename:a}),i.optionalObject(a,"options"),void 0===a&&(a={}),i.optionalString(a.filename,"options.filename"),void 0===a.filename&&(a.filename="(unnamed)"),i.object(h[t],"formats[format]");try{return h[t].read(e,a)}catch(e){throw new d(a.filename,t,e)}},g.isCertificate=function(e,t){return c.isCompatible(e,g,t)},g.prototype._sshpkApiVersion=[1,1],g._oldVersionDetect=function(e){return[1,0]}},function(e,t,a){e.exports=p;var i=a(0),r=(a(7),a(2),a(25),a(11),a(9),a(1),a(5)),o=a(12),n=a(3).Buffer,s=/^([*]|[a-z0-9][a-z0-9\-]{0,62})(?:\.([*]|[a-z0-9][a-z0-9\-]{0,62}))*$/i,u={cn:"2.5.4.3",o:"2.5.4.10",ou:"2.5.4.11",l:"2.5.4.7",s:"2.5.4.8",c:"2.5.4.6",sn:"2.5.4.4",postalCode:"2.5.4.17",serialNumber:"2.5.4.5",street:"2.5.4.9",x500UniqueIdentifier:"2.5.4.45",role:"2.5.4.72",telephoneNumber:"2.5.4.20",description:"2.5.4.13",dc:"0.9.2342.19200300.100.1.25",uid:"0.9.2342.19200300.100.1.1",mail:"0.9.2342.19200300.100.1.3",title:"2.5.4.12",gn:"2.5.4.42",initials:"2.5.4.43",pseudonym:"2.5.4.65",emailAddress:"1.2.840.113549.1.9.1"},c={};function p(e){var t=this;if(i.object(e,"options"),i.arrayOfObject(e.components,"options.components"),this.components=e.components,this.componentLookup={},this.components.forEach(function(e){e.name&&!e.oid&&(e.oid=u[e.name]),e.oid&&!e.name&&(e.name=c[e.oid]),void 0===t.componentLookup[e.name]&&(t.componentLookup[e.name]=[]),t.componentLookup[e.name].push(e)}),this.componentLookup.cn&&this.componentLookup.cn.length>0&&(this.cn=this.componentLookup.cn[0].value),i.optionalString(e.type,"options.type"),void 0===e.type)1===this.components.length&&this.componentLookup.cn&&1===this.componentLookup.cn.length&&this.componentLookup.cn[0].value.match(s)?(this.type="host",this.hostname=this.componentLookup.cn[0].value):this.componentLookup.dc&&this.components.length===this.componentLookup.dc.length?(this.type="host",this.hostname=this.componentLookup.dc.map(function(e){return e.value}).join(".")):this.componentLookup.uid&&this.components.length===this.componentLookup.uid.length?(this.type="user",this.uid=this.componentLookup.uid[0].value):this.componentLookup.cn&&1===this.componentLookup.cn.length&&this.componentLookup.cn[0].value.match(s)?(this.type="host",this.hostname=this.componentLookup.cn[0].value):this.componentLookup.uid&&1===this.componentLookup.uid.length?(this.type="user",this.uid=this.componentLookup.uid[0].value):this.componentLookup.mail&&1===this.componentLookup.mail.length?(this.type="email",this.email=this.componentLookup.mail[0].value):this.componentLookup.cn&&1===this.componentLookup.cn.length?(this.type="user",this.uid=this.componentLookup.cn[0].value):this.type="unknown";else if(this.type=e.type,"host"===this.type)this.hostname=e.hostname;else if("user"===this.type)this.uid=e.uid;else{if("email"!==this.type)throw new Error("Unknown type "+this.type);this.email=e.email}}Object.keys(u).forEach(function(e){c[u[e]]=e}),p.prototype.toString=function(){return this.components.map(function(e){var t=e.name.toUpperCase();t=t.replace(/=/g,"\\=");var a=e.value;return t+"="+(a=a.replace(/,/g,"\\,"))}).join(", ")},p.prototype.get=function(e,t){i.string(e,"name");var a=this.componentLookup[e];if(void 0!==a&&0!==a.length){if(!t&&a.length>1)throw new Error("Multiple values for attribute "+e);return t?a.map(function(e){return e.value}):a[0].value}},p.prototype.toArray=function(e){return this.components.map(function(e){return{name:e.name,value:e.value}})};var l=/[^a-zA-Z0-9 '(),+.\/:=?-]/,m=/[^\x00-\x7f]/;function h(e,t){if("**"===e||"**"===t)return!0;var a=e.split("."),i=t.split(".");if(a.length!==i.length)return!1;for(var r=0;r<a.length;++r)if("*"!==a[r]&&"*"!==i[r]&&a[r]!==i[r])return!1;return!0}p.prototype.toAsn1=function(e,t){e.startSequence(t),this.components.forEach(function(t){if(e.startSequence(o.Ber.Constructor|o.Ber.Set),e.startSequence(),e.writeOID(t.oid),t.asn1type===o.Ber.Utf8String||t.value.match(m)){var a=n.from(t.value,"utf8");e.writeBuffer(a,o.Ber.Utf8String)}else if(t.asn1type===o.Ber.IA5String||t.value.match(l))e.writeString(t.value,o.Ber.IA5String);else{var i=o.Ber.PrintableString;void 0!==t.asn1type&&(i=t.asn1type),e.writeString(t.value,i)}e.endSequence(),e.endSequence()}),e.endSequence()},p.prototype.equals=function(e){if(!p.isIdentity(e,[1,0]))return!1;if(e.components.length!==this.components.length)return!1;for(var t=0;t<this.components.length;++t){if(this.components[t].oid!==e.components[t].oid)return!1;if(!h(this.components[t].value,e.components[t].value))return!1}return!0},p.forHost=function(e){return i.string(e,"hostname"),new p({type:"host",hostname:e,components:[{name:"cn",value:e}]})},p.forUser=function(e){return i.string(e,"uid"),new p({type:"user",uid:e,components:[{name:"uid",value:e}]})},p.forEmail=function(e){return i.string(e,"email"),new p({type:"email",email:e,components:[{name:"mail",value:e}]})},p.parseDN=function(e){i.string(e,"dn");for(var t=[""],a=0,r=e;r.length>0;){var o;if(null!==(o=/^,/.exec(r)))t[++a]="",r=r.slice(o[0].length);else if(null!==(o=/^\\,/.exec(r)))t[a]+=",",r=r.slice(o[0].length);else if(null!==(o=/^\\./.exec(r)))t[a]+=o[0],r=r.slice(o[0].length);else{if(null===(o=/^[^\\,]+/.exec(r)))throw new Error("Failed to parse DN");t[a]+=o[0],r=r.slice(o[0].length)}}return new p({components:t.map(function(e){for(var t=(e=e.trim()).indexOf("=");t>0&&"\\"===e.charAt(t-1);)t=e.indexOf("=",t+1);if(-1===t)throw new Error("Failed to parse DN");return{name:e.slice(0,t).toLowerCase().replace(/\\=/g,"="),value:e.slice(t+1)}})})},p.fromArray=function(e){return i.arrayOfObject(e,"components"),e.forEach(function(e){if(i.object(e,"component"),i.string(e.name,"component.name"),!n.isBuffer(e.value)&&"string"!=typeof e.value)throw new Error("Invalid component value")}),new p({components:e})},p.parseAsn1=function(e,t){var a=[];e.readSequence(t);for(var i=e.offset+e.length;e.offset<i;){e.readSequence(o.Ber.Constructor|o.Ber.Set);var r=e.offset+e.length;e.readSequence();var n,s=e.readOID(),u=e.peek();switch(u){case o.Ber.PrintableString:case o.Ber.IA5String:case o.Ber.OctetString:case o.Ber.T61String:n=e.readString(u);break;case o.Ber.Utf8String:n=(n=e.readString(u,!0)).toString("utf8");break;case o.Ber.CharacterString:case o.Ber.BMPString:n=(n=e.readString(u,!0)).toString("utf16le");break;default:throw new Error("Unknown asn1 type "+u)}a.push({oid:s,asn1type:u,value:n}),e._offset=r}return e._offset=i,new p({components:a})},p.isIdentity=function(e,t){return r.isCompatible(e,p,t)},p.prototype._sshpkApiVersion=[1,0],p._oldVersionDetect=function(e){return[1,0]}},function(e,t,a){var i=a(0),r=a(38),o=a(1),n={sha1:!0,sha256:!0,sha512:!0},s={rsa:!0,dsa:!0,ecdsa:!0};function u(e,t){Error.captureStackTrace&&Error.captureStackTrace(this,t||u),this.message=e,this.name=t.name}function c(e){u.call(this,e,c)}o.inherits(u,Error),o.inherits(c,u),e.exports={HASH_ALGOS:n,PK_ALGOS:s,HttpSignatureError:u,InvalidAlgorithmError:c,validateAlgorithm:function(e){var t=e.toLowerCase().split("-");if(2!==t.length)throw new c(t[0].toUpperCase()+" is not a valid algorithm");if("hmac"!==t[0]&&!s[t[0]])throw new c(t[0].toUpperCase()+" type keys are not supported");if(!n[t[1]])throw new c(t[1].toUpperCase()+" is not a supported hash algorithm");return t},sshKeyToPEM:function(e){return i.string(e,"ssh_key"),r.parseKey(e,"ssh").toString("pem")},fingerprint:function(e){return i.string(e,"ssh_key"),r.parseKey(e,"ssh").fingerprint("md5").toString("hex")},pemToRsaSSHKey:function(e,t){i.equal("string",typeof e,"typeof pem");var a=r.parseKey(e,"pem");return a.comment=t,a.toString("ssh")}}},function(e,t,a){var i=a(26).BigInteger,r=i.prototype.Barrett;function o(e,t){this.x=t,this.q=e}function n(e,t,a,r){this.curve=e,this.x=t,this.y=a,this.z=null==r?i.ONE:r,this.zinv=null}function s(e,t,a){this.q=e,this.a=this.fromBigInteger(t),this.b=this.fromBigInteger(a),this.infinity=new n(this,null,null),this.reducer=new r(this.q)}o.prototype.equals=function(e){return e==this||this.q.equals(e.q)&&this.x.equals(e.x)},o.prototype.toBigInteger=function(){return this.x},o.prototype.negate=function(){return new o(this.q,this.x.negate().mod(this.q))},o.prototype.add=function(e){return new o(this.q,this.x.add(e.toBigInteger()).mod(this.q))},o.prototype.subtract=function(e){return new o(this.q,this.x.subtract(e.toBigInteger()).mod(this.q))},o.prototype.multiply=function(e){return new o(this.q,this.x.multiply(e.toBigInteger()).mod(this.q))},o.prototype.square=function(){return new o(this.q,this.x.square().mod(this.q))},o.prototype.divide=function(e){return new o(this.q,this.x.multiply(e.toBigInteger().modInverse(this.q)).mod(this.q))},n.prototype.getX=function(){null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q));var e=this.x.toBigInteger().multiply(this.zinv);return this.curve.reduce(e),this.curve.fromBigInteger(e)},n.prototype.getY=function(){null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q));var e=this.y.toBigInteger().multiply(this.zinv);return this.curve.reduce(e),this.curve.fromBigInteger(e)},n.prototype.equals=function(e){return e==this||(this.isInfinity()?e.isInfinity():e.isInfinity()?this.isInfinity():!!e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q).equals(i.ZERO)&&e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q).equals(i.ZERO))},n.prototype.isInfinity=function(){return null==this.x&&null==this.y||this.z.equals(i.ZERO)&&!this.y.toBigInteger().equals(i.ZERO)},n.prototype.negate=function(){return new n(this.curve,this.x,this.y.negate(),this.z)},n.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q),a=e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q);if(i.ZERO.equals(a))return i.ZERO.equals(t)?this.twice():this.curve.getInfinity();var r=new i("3"),o=this.x.toBigInteger(),s=this.y.toBigInteger(),u=(e.x.toBigInteger(),e.y.toBigInteger(),a.square()),c=u.multiply(a),p=o.multiply(u),l=t.square().multiply(this.z),m=l.subtract(p.shiftLeft(1)).multiply(e.z).subtract(c).multiply(a).mod(this.curve.q),h=p.multiply(r).multiply(t).subtract(s.multiply(c)).subtract(l.multiply(t)).multiply(e.z).add(t.multiply(c)).mod(this.curve.q),d=c.multiply(this.z).multiply(e.z).mod(this.curve.q);return new n(this.curve,this.curve.fromBigInteger(m),this.curve.fromBigInteger(h),d)},n.prototype.twice=function(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var e=new i("3"),t=this.x.toBigInteger(),a=this.y.toBigInteger(),r=a.multiply(this.z),o=r.multiply(a).mod(this.curve.q),s=this.curve.a.toBigInteger(),u=t.square().multiply(e);i.ZERO.equals(s)||(u=u.add(this.z.square().multiply(s)));var c=(u=u.mod(this.curve.q)).square().subtract(t.shiftLeft(3).multiply(o)).shiftLeft(1).multiply(r).mod(this.curve.q),p=u.multiply(e).multiply(t).subtract(o.shiftLeft(1)).shiftLeft(2).multiply(o).subtract(u.square().multiply(u)).mod(this.curve.q),l=r.square().multiply(r).shiftLeft(3).mod(this.curve.q);return new n(this.curve,this.curve.fromBigInteger(c),this.curve.fromBigInteger(p),l)},n.prototype.multiply=function(e){if(this.isInfinity())return this;if(0==e.signum())return this.curve.getInfinity();var t,a=e,r=a.multiply(new i("3")),o=this.negate(),n=this;for(t=r.bitLength()-2;t>0;--t){n=n.twice();var s=r.testBit(t);s!=a.testBit(t)&&(n=n.add(s?this:o))}return n},n.prototype.multiplyTwo=function(e,t,a){var i;i=e.bitLength()>a.bitLength()?e.bitLength()-1:a.bitLength()-1;for(var r=this.curve.getInfinity(),o=this.add(t);i>=0;)r=r.twice(),e.testBit(i)?r=a.testBit(i)?r.add(o):r.add(this):a.testBit(i)&&(r=r.add(t)),--i;return r},s.prototype.getQ=function(){return this.q},s.prototype.getA=function(){return this.a},s.prototype.getB=function(){return this.b},s.prototype.equals=function(e){return e==this||this.q.equals(e.q)&&this.a.equals(e.a)&&this.b.equals(e.b)},s.prototype.getInfinity=function(){return this.infinity},s.prototype.fromBigInteger=function(e){return new o(this.q,e)},s.prototype.reduce=function(e){this.reducer.reduce(e)},s.prototype.encodePointHex=function(e){if(e.isInfinity())return"00";var t=e.getX().toBigInteger().toString(16),a=e.getY().toBigInteger().toString(16),i=this.getQ().toString(16).length;for(i%2!=0&&i++;t.length<i;)t="0"+t;for(;a.length<i;)a="0"+a;return"04"+t+a},s.prototype.decodePointHex=function(e){var t;switch(parseInt(e.substr(0,2),16)){case 0:return this.infinity;case 2:t=!1;case 3:null==t&&(t=!0);var a=e.length-2,r=e.substr(2,a),o=this.fromBigInteger(new i(r,16)),s=o.multiply(o.square().add(this.getA())).add(this.getB()).sqrt();if(null==s)throw"Invalid point compression";var u=s.toBigInteger();return u.testBit(0)!=t&&(s=this.fromBigInteger(this.getQ().subtract(u))),new n(this,o,s);case 4:case 6:case 7:a=(e.length-2)/2,r=e.substr(2,a);var c=e.substr(a+2,a);return new n(this,this.fromBigInteger(new i(r,16)),this.fromBigInteger(new i(c,16)));default:return null}},s.prototype.encodeCompressedPointHex=function(e){if(e.isInfinity())return"00";var t=e.getX().toBigInteger().toString(16),a=this.getQ().toString(16).length;for(a%2!=0&&a++;t.length<a;)t="0"+t;return(e.getY().toBigInteger().isEven()?"02":"03")+t},o.prototype.getR=function(){if(null!=this.r)return this.r;this.r=null;var e=this.q.bitLength();e>128&&(-1==this.q.shiftRight(e-64).intValue()&&(this.r=i.ONE.shiftLeft(e).subtract(this.q)));return this.r},o.prototype.modMult=function(e,t){return this.modReduce(e.multiply(t))},o.prototype.modReduce=function(e){if(null!=this.getR()){for(var t=q.bitLength();e.bitLength()>t+1;){var a=e.shiftRight(t),r=e.subtract(a.shiftLeft(t));this.getR().equals(i.ONE)||(a=a.multiply(this.getR())),e=a.add(r)}for(;e.compareTo(q)>=0;)e=e.subtract(q)}else e=e.mod(q);return e},o.prototype.sqrt=function(){if(!this.q.testBit(0))throw"unsupported";if(this.q.testBit(1)){var e=new o(this.q,this.x.modPow(this.q.shiftRight(2).add(i.ONE),this.q));return e.square().equals(this)?e:null}var t=this.q.subtract(i.ONE),a=t.shiftRight(1);if(!this.x.modPow(a,this.q).equals(i.ONE))return null;var r,n,s=t.shiftRight(2).shiftLeft(1).add(i.ONE),u=this.x,c=modDouble(modDouble(u));do{var p;do{p=new i(this.q.bitLength(),new SecureRandom)}while(p.compareTo(this.q)>=0||!p.multiply(p).subtract(c).modPow(a,this.q).equals(t));var l=this.lucasSequence(p,u,s);if(r=l[0],n=l[1],this.modMult(n,n).equals(c))return n.testBit(0)&&(n=n.add(q)),n=n.shiftRight(1),new o(q,n)}while(r.equals(i.ONE)||r.equals(t));return null},o.prototype.lucasSequence=function(e,t,a){for(var r=a.bitLength(),o=a.getLowestSetBit(),n=i.ONE,s=i.TWO,u=e,c=i.ONE,p=i.ONE,l=r-1;l>=o+1;--l)c=this.modMult(c,p),a.testBit(l)?(p=this.modMult(c,t),n=this.modMult(n,u),s=this.modReduce(u.multiply(s).subtract(e.multiply(c))),u=this.modReduce(u.multiply(u).subtract(p.shiftLeft(1)))):(p=c,n=this.modReduce(n.multiply(s).subtract(c)),u=this.modReduce(u.multiply(s).subtract(e.multiply(c))),s=this.modReduce(s.multiply(s).subtract(c.shiftLeft(1))));c=this.modMult(c,p),p=this.modMult(c,t),n=this.modReduce(n.multiply(s).subtract(c)),s=this.modReduce(u.multiply(s).subtract(e.multiply(c))),c=this.modMult(c,p);for(l=1;l<=o;++l)n=this.modMult(n,s),s=this.modReduce(s.multiply(s).subtract(c.shiftLeft(1))),c=this.modMult(c,c);return[n,s]};t={ECCurveFp:s,ECPointFp:n,ECFieldElementFp:o};e.exports=t},function(e,t,a){e.exports={read:function(e,t){return c.read(e,t)},readSSHPrivate:function(e,t,u){var c=(t=new l({buffer:t})).readCString();r.strictEqual(c,h,"bad magic string");var d=t.readString(),f=t.readString(),g=t.readBuffer();if(1!==t.readInt())throw new Error("OpenSSH-format key file contains multiple keys: this is unsupported.");var v=t.readBuffer();if("public"===e)return r.ok(t.atEnd(),"excess bytes left after key"),p.read(v);var y=t.readBuffer();r.ok(t.atEnd(),"excess bytes left after key");var b=new l({buffer:g});switch(f){case"none":if("none"!==d)throw new Error('OpenSSH-format key uses KDF "none" but specifies a cipher other than "none"');break;case"bcrypt":var k=b.readBuffer(),j=b.readInt(),w=n.opensshCipherInfo(d);if(void 0===i&&(i=a(58)),"string"==typeof u.passphrase&&(u.passphrase=o.from(u.passphrase,"utf-8")),!o.isBuffer(u.passphrase))throw new m.KeyEncryptedError(u.filename,"OpenSSH");var x=new Uint8Array(u.passphrase),E=new Uint8Array(k),S=new Uint8Array(w.keySize+w.blockSize),_=i.pbkdf(x,x.length,E,E.length,S,S.length,j);if(0!==_)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");var R=(S=o.from(S)).slice(0,w.keySize),A=S.slice(w.keySize,w.keySize+w.blockSize),C=s.createDecipheriv(w.opensslName,R,A);C.setAutoPadding(!1);var q,O=[];for(C.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),C.write(y),C.end();null!==(q=C.read());)O.push(q);y=o.concat(O);break;default:throw new Error('OpenSSH-format key uses unknown KDF "'+f+'"')}var P=(t=new l({buffer:y})).readInt(),F=t.readInt();if(P!==F)throw new Error("Incorrect passphrase supplied, could not decrypt key");var z={},T=p.readInternal(z,"private",t.remainder());t.skip(z.consumed);var I=t.readString();return T.comment=I,T},write:function(e,t){var c;c=u.isPrivateKey(e)?e.toPublic():e;var p,m,d="none",f="none",g=o.alloc(0),v={blockSize:8};void 0!==t&&("string"==typeof(p=t.passphrase)&&(p=o.from(p,"utf-8")),void 0!==p&&(r.buffer(p,"options.passphrase"),r.optionalString(t.cipher,"options.cipher"),void 0===(d=t.cipher)&&(d="aes128-ctr"),v=n.opensshCipherInfo(d),f="bcrypt"));if(u.isPrivateKey(e)){m=new l({});var y=s.randomBytes(4).readUInt32BE(0);m.writeInt(y),m.writeInt(y),m.write(e.toBuffer("rfc4253")),m.writeString(e.comment||"");for(var b=1;m._offset%v.blockSize!=0;)m.writeChar(b++);m=m.toBuffer()}switch(f){case"none":break;case"bcrypt":var k=s.randomBytes(16),j=new l({});j.writeBuffer(k),j.writeInt(16),g=j.toBuffer(),void 0===i&&(i=a(58));var w=new Uint8Array(p),x=new Uint8Array(k),E=new Uint8Array(v.keySize+v.blockSize),S=i.pbkdf(w,w.length,x,x.length,E,E.length,16);if(0!==S)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");var _=(E=o.from(E)).slice(0,v.keySize),R=E.slice(v.keySize,v.keySize+v.blockSize),A=s.createCipheriv(v.opensslName,_,R);A.setAutoPadding(!1);var C,q=[];for(A.once("error",function(e){throw e}),A.write(m),A.end();null!==(C=A.read());)q.push(C);m=o.concat(q);break;default:throw new Error("Unsupported kdf "+f)}var O,P=new l({});P.writeCString(h),P.writeString(d),P.writeString(f),P.writeBuffer(g),P.writeInt(1),P.writeBuffer(c.toBuffer("rfc4253")),m&&P.writeBuffer(m);P=P.toBuffer(),O=u.isPrivateKey(e)?"OPENSSH PRIVATE KEY":"OPENSSH PUBLIC KEY";var F=P.toString("base64"),z=F.length+F.length/70+18+16+2*O.length+10;P=o.alloc(z);var T=0;T+=P.write("-----BEGIN "+O+"-----\n",T);for(var I=0;I<F.length;){var D=I+70;D>F.length&&(D=F.length),T+=P.write(F.slice(I,D),T),P[T++]=10,I=D}return T+=P.write("-----END "+O+"-----\n",T),P.slice(0,T)}};var i,r=a(0),o=(a(12),a(3).Buffer),n=(a(7),a(5)),s=a(2),u=(a(4),a(6)),c=a(15),p=a(16),l=a(28),m=a(9);var h="openssh-key-v1"},function(e,t,a){"use strict";var i=Object.prototype.hasOwnProperty,r=Object.prototype.toString,o=Object.defineProperty,n=Object.getOwnPropertyDescriptor,s=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===r.call(e)},u=function(e){if(!e||"[object Object]"!==r.call(e))return!1;var t,a=i.call(e,"constructor"),o=e.constructor&&e.constructor.prototype&&i.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!a&&!o)return!1;for(t in e);return void 0===t||i.call(e,t)},c=function(e,t){o&&"__proto__"===t.name?o(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},p=function(e,t){if("__proto__"===t){if(!i.call(e,t))return;if(n)return n(e,t).value}return e[t]};e.exports=function e(){var t,a,i,r,o,n,l=arguments[0],m=1,h=arguments.length,d=!1;for("boolean"==typeof l&&(d=l,l=arguments[1]||{},m=2),(null==l||"object"!=typeof l&&"function"!=typeof l)&&(l={});m<h;++m)if(null!=(t=arguments[m]))for(a in t)i=p(l,a),l!==(r=p(t,a))&&(d&&r&&(u(r)||(o=s(r)))?(o?(o=!1,n=i&&s(i)?i:[]):n=i&&u(i)?i:{},c(l,{name:a,newValue:e(d,n,r)})):void 0!==r&&c(l,{name:a,newValue:r}));return l}},function(e,t){e.exports=require("net")},function(e,t,a){"use strict";var i=a(104),r=a(2),o=a(23).Buffer,n="undefined"==typeof setImmediate?process.nextTick:setImmediate;t.paramsHaveRequestBody=function(e){return e.body||e.requestBodyStream||e.json&&"boolean"!=typeof e.json||e.multipart},t.safeStringify=function(e,t){var a;try{a=JSON.stringify(e,t)}catch(r){a=i(e,t)}return a},t.md5=function(e){return r.createHash("md5").update(e).digest("hex")},t.isReadStream=function(e){return e.readable&&e.path&&e.mode},t.toBase64=function(e){return o.from(e||"","utf8").toString("base64")},t.copy=function(e){var t={};return Object.keys(e).forEach(function(a){t[a]=e[a]}),t},t.version=function(){var e=process.version.replace("v","").split(".");return{major:parseInt(e[0],10),minor:parseInt(e[1],10),patch:parseInt(e[2],10)}},t.defer=n},function(e,t,a){var i=a(4),r=a(25),o=a(11),n=a(6),s=a(30),u=a(31),c=a(9);e.exports={Key:i,parseKey:i.parse,Fingerprint:r,parseFingerprint:r.parse,Signature:o,parseSignature:o.parse,PrivateKey:n,parsePrivateKey:n.parse,generatePrivateKey:n.generate,Certificate:s,parseCertificate:s.parse,createSelfSignedCertificate:s.createSelfSigned,createCertificate:s.create,Identity:u,identityFromDN:u.parseDN,identityForHost:u.forHost,identityForUser:u.forUser,identityForEmail:u.forEmail,identityFromArray:u.fromArray,FingerprintFormatError:c.FingerprintFormatError,InvalidAlgorithmError:c.InvalidAlgorithmError,KeyParseError:c.KeyParseError,SignatureParseError:c.SignatureParseError,KeyEncryptedError:c.KeyEncryptedError,CertificateParseError:c.CertificateParseError}},function(e,t){e.exports={newInvalidAsn1Error:function(e){var t=new Error;return t.name="InvalidAsn1Error",t.message=e||"",t}}},function(e,t){e.exports={EOC:0,Boolean:1,Integer:2,BitString:3,OctetString:4,Null:5,OID:6,ObjectDescriptor:7,External:8,Real:9,Enumeration:10,PDV:11,Utf8String:12,RelativeOID:13,Sequence:16,Set:17,NumericString:18,PrintableString:19,T61String:20,VideotexString:21,IA5String:22,UTCTime:23,GeneralizedTime:24,GraphicString:25,VisibleString:26,GeneralString:28,UniversalString:29,CharacterString:30,BMPString:31,Constructor:32,Context:128}},function(e,t,a){e.exports={DiffieHellman:d,generateECDSA:function(e){var t=[];if(l){var a={nistp256:"prime256v1",nistp384:"secp384r1",nistp521:"secp521r1"}[e],i=r.createECDH(a);return i.generateKeys(),t.push({name:"curve",data:o.from(e)}),t.push({name:"Q",data:i.getPublicKey()}),t.push({name:"d",data:i.getPrivateKey()}),new p({type:"ecdsa",curve:e,parts:t})}var n=new f(e),s=n.getN(),u=Math.ceil((s.bitLength()+64)/8),c=new h(r.randomBytes(u)),m=s.subtract(h.ONE),d=c.mod(m).add(h.ONE),g=n.getG().multiply(d);return d=o.from(d.toByteArray()),g=o.from(n.getCurve().encodePointHex(g),"hex"),t.push({name:"curve",data:o.from(e)}),t.push({name:"Q",data:g}),t.push({name:"d",data:d}),new p({type:"ecdsa",curve:e,parts:t})},generateED25519:function(){var e=u.sign.keyPair(),t=o.from(e.secretKey),a=o.from(e.publicKey);i.strictEqual(t.length,64),i.strictEqual(a.length,32);var r=[];return r.push({name:"A",data:a}),r.push({name:"k",data:t.slice(0,32)}),new p({type:"ed25519",parts:r})}};var i=a(0),r=a(2),o=a(3).Buffer,n=a(7),s=a(5),u=a(27),c=a(4),p=a(6),l=void 0!==r.createECDH,m=(a(115),a(33)),h=a(26).BigInteger;function d(e){if(s.assertCompatible(e,c,[1,4],"key"),this._isPriv=p.isPrivateKey(e,[1,3]),this._algo=e.type,this._curve=e.curve,this._key=e,"dsa"===e.type){if(!l)throw new Error("Due to bugs in the node 0.10 crypto API, node 0.12.x or later is required to use DH");this._dh=r.createDiffieHellman(e.part.p.data,void 0,e.part.g.data,void 0),this._p=e.part.p,this._g=e.part.g,this._isPriv&&this._dh.setPrivateKey(e.part.x.data),this._dh.setPublicKey(e.part.y.data)}else if("ecdsa"===e.type){if(!l)return this._ecParams=new f(this._curve),void(this._isPriv&&(this._priv=new v(this._ecParams,e.part.d.data)));var t={nistp256:"prime256v1",nistp384:"secp384r1",nistp521:"secp521r1"}[e.curve];if(this._dh=r.createECDH(t),"object"!=typeof this._dh||"function"!=typeof this._dh.setPrivateKey)return l=!1,void d.call(this,e);this._isPriv&&this._dh.setPrivateKey(e.part.d.data),this._dh.setPublicKey(e.part.Q.data)}else{if("curve25519"!==e.type)throw new Error("DH not supported for "+e.type+" keys");this._isPriv&&(s.assertCompatible(e,p,[1,5],"key"),this._priv=e.part.k.data)}}function f(e){var t=n.curves[e];i.object(t);var a=new h(t.p),r=new h(t.a),o=new h(t.b),s=new h(t.n),u=h.ONE,c=new m.ECCurveFp(a,r,o),p=c.decodePointHex(t.G.toString("hex"));this.curve=c,this.g=p,this.n=s,this.h=u}function g(e,t){this._params=e,0===t[0]&&(t=t.slice(1)),this._pub=e.getCurve().decodePointHex(t.toString("hex"))}function v(e,t){this._params=e,this._priv=new h(s.mpNormalize(t))}d.prototype.getPublicKey=function(){return this._isPriv?this._key.toPublic():this._key},d.prototype.getPrivateKey=function(){return this._isPriv?this._key:void 0},d.prototype.getKey=d.prototype.getPrivateKey,d.prototype._keyCheck=function(e,t){if(i.object(e,"key"),t||s.assertCompatible(e,p,[1,3],"key"),s.assertCompatible(e,c,[1,4],"key"),e.type!==this._algo)throw new Error("A "+e.type+" key cannot be used in "+this._algo+" Diffie-Hellman");if(e.curve!==this._curve)throw new Error("A key from the "+e.curve+" curve cannot be used with a "+this._curve+" Diffie-Hellman");"dsa"===e.type&&(i.deepEqual(e.part.p,this._p,"DSA key prime does not match"),i.deepEqual(e.part.g,this._g,"DSA key generator does not match"))},d.prototype.setKey=function(e){if(this._keyCheck(e),"dsa"===e.type)this._dh.setPrivateKey(e.part.x.data),this._dh.setPublicKey(e.part.y.data);else if("ecdsa"===e.type)l?(this._dh.setPrivateKey(e.part.d.data),this._dh.setPublicKey(e.part.Q.data)):this._priv=new v(this._ecParams,e.part.d.data);else if("curve25519"===e.type){var t=e.part.k;e.part.k||(t=e.part.r),this._priv=t.data,0===this._priv[0]&&(this._priv=this._priv.slice(1)),this._priv=this._priv.slice(0,32)}this._key=e,this._isPriv=!0},d.prototype.setPrivateKey=d.prototype.setKey,d.prototype.computeSecret=function(e){if(this._keyCheck(e,!0),!this._isPriv)throw new Error("DH exchange has not been initialized with a private key yet");var t;if("dsa"===this._algo)return this._dh.computeSecret(e.part.y.data);if("ecdsa"===this._algo)return l?this._dh.computeSecret(e.part.Q.data):(t=new g(this._ecParams,e.part.Q.data),this._priv.deriveSharedSecret(t));if("curve25519"===this._algo){for(t=e.part.A.data;0===t[0]&&t.length>32;)t=t.slice(1);var a=this._priv;i.strictEqual(t.length,32),i.strictEqual(a.length,32);var r=u.box.before(new Uint8Array(t),new Uint8Array(a));return o.from(r)}throw new Error("Invalid algorithm: "+this._algo)},d.prototype.generateKey=function(){var e,t,a=[];if("dsa"===this._algo)return this._dh.generateKeys(),a.push({name:"p",data:this._p.data}),a.push({name:"q",data:this._key.part.q.data}),a.push({name:"g",data:this._g.data}),a.push({name:"y",data:this._dh.getPublicKey()}),a.push({name:"x",data:this._dh.getPrivateKey()}),this._key=new p({type:"dsa",parts:a}),this._isPriv=!0,this._key;if("ecdsa"===this._algo){if(l)return this._dh.generateKeys(),a.push({name:"curve",data:o.from(this._curve)}),a.push({name:"Q",data:this._dh.getPublicKey()}),a.push({name:"d",data:this._dh.getPrivateKey()}),this._key=new p({type:"ecdsa",curve:this._curve,parts:a}),this._isPriv=!0,this._key;var n=this._ecParams.getN(),s=new h(r.randomBytes(n.bitLength())),c=n.subtract(h.ONE);return e=s.mod(c).add(h.ONE),t=this._ecParams.getG().multiply(e),e=o.from(e.toByteArray()),t=o.from(this._ecParams.getCurve().encodePointHex(t),"hex"),this._priv=new v(this._ecParams,e),a.push({name:"curve",data:o.from(this._curve)}),a.push({name:"Q",data:t}),a.push({name:"d",data:e}),this._key=new p({type:"ecdsa",curve:this._curve,parts:a}),this._isPriv=!0,this._key}if("curve25519"===this._algo){var m=u.box.keyPair();return e=o.from(m.secretKey),t=o.from(m.publicKey),e=o.concat([e,t]),i.strictEqual(e.length,64),i.strictEqual(t.length,32),a.push({name:"A",data:t}),a.push({name:"k",data:e}),this._key=new p({type:"curve25519",parts:a}),this._isPriv=!0,this._key}throw new Error("Invalid algorithm: "+this._algo)},d.prototype.generateKeys=d.prototype.generateKey,f.prototype.getCurve=function(){return this.curve},f.prototype.getG=function(){return this.g},f.prototype.getN=function(){return this.n},f.prototype.getH=function(){return this.h},v.prototype.deriveSharedSecret=function(e){i.ok(e instanceof g);var t=e._pub.multiply(this._priv);return o.from(t.getX().toBigInteger().toByteArray())}},function(e,t,a){e.exports={read:function(e,t){return p.read(e,t,"pkcs1")},readPkcs1:function(e,t,a){switch(e){case"RSA":if("public"===t)return function(e){var t=m(e,"modulus"),a=m(e,"exponent");return new u({type:"rsa",parts:[{name:"e",data:a},{name:"n",data:t}]})}(a);if("private"===t)return function(e){var t=m(e,"version");i.strictEqual(t[0],0);var a=m(e,"modulus"),r=m(e,"public exponent"),o=m(e,"private exponent"),n=m(e,"prime1"),s=m(e,"prime2"),u=m(e,"exponent1"),p=m(e,"exponent2"),l=m(e,"iqmp");return new c({type:"rsa",parts:[{name:"n",data:a},{name:"e",data:r},{name:"d",data:o},{name:"iqmp",data:l},{name:"p",data:n},{name:"q",data:s},{name:"dmodp",data:u},{name:"dmodq",data:p}]})}(a);throw new Error("Unknown key type: "+t);case"DSA":if("public"===t)return function(e){var t=m(e,"y"),a=m(e,"p"),i=m(e,"q"),r=m(e,"g");return new u({type:"dsa",parts:[{name:"y",data:t},{name:"p",data:a},{name:"q",data:i},{name:"g",data:r}]})}(a);if("private"===t)return function(e){var t=m(e,"version");i.strictEqual(t.readUInt8(0),0);var a=m(e,"p"),r=m(e,"q"),o=m(e,"g"),n=m(e,"y"),s=m(e,"x");return new c({type:"dsa",parts:[{name:"p",data:a},{name:"q",data:r},{name:"g",data:o},{name:"y",data:n},{name:"x",data:s}]})}(a);throw new Error("Unknown key type: "+t);case"EC":case"ECDSA":if("private"===t)return function(e){var t=m(e,"version");i.strictEqual(t.readUInt8(0),1);var a=e.readString(r.Ber.OctetString,!0);e.readSequence(160);var n=l(e);i.string(n,"a known elliptic curve"),e.readSequence(161);var u=e.readString(r.Ber.BitString,!0);u=s.ecNormalize(u);var p={type:"ecdsa",parts:[{name:"curve",data:o.from(n)},{name:"Q",data:u},{name:"d",data:a}]};return new c(p)}(a);if("public"===t)return function(e){e.readSequence();var t=e.readOID();i.strictEqual(t,"1.2.840.10045.2.1","must be ecPublicKey");for(var a,c=e.readOID(),p=Object.keys(n.curves),l=0;l<p.length;++l){var m=p[l],h=n.curves[m];if(h.pkcs8oid===c){a=m;break}}i.string(a,"a known ECDSA named curve");var d=e.readString(r.Ber.BitString,!0);d=s.ecNormalize(d);var f={type:"ecdsa",parts:[{name:"curve",data:o.from(a)},{name:"Q",data:d}]};return new u(f)}(a);throw new Error("Unknown key type: "+t);case"EDDSA":case"EdDSA":if("private"===t)return function(e){var t=m(e,"version");i.strictEqual(t.readUInt8(0),1);var a=e.readString(r.Ber.OctetString,!0);e.readSequence(160);var o=e.readOID();i.strictEqual(o,"1.3.101.112","the ed25519 curve identifier"),e.readSequence(161);var n=s.readBitString(e),u={type:"ed25519",parts:[{name:"A",data:s.zeroPadToLength(n,32)},{name:"k",data:a}]};return new c(u)}(a);throw new Error(t+" keys not supported with EdDSA");default:throw new Error("Unknown key algo: "+e)}},write:function(e,t){return p.write(e,t,"pkcs1")},writePkcs1:function(e,t){switch(e.startSequence(),t.type){case"rsa":c.isPrivateKey(t)?function(e,t){var a=o.from([0]);e.writeBuffer(a,r.Ber.Integer),e.writeBuffer(t.part.n.data,r.Ber.Integer),e.writeBuffer(t.part.e.data,r.Ber.Integer),e.writeBuffer(t.part.d.data,r.Ber.Integer),e.writeBuffer(t.part.p.data,r.Ber.Integer),e.writeBuffer(t.part.q.data,r.Ber.Integer),t.part.dmodp&&t.part.dmodq||s.addRSAMissing(t);e.writeBuffer(t.part.dmodp.data,r.Ber.Integer),e.writeBuffer(t.part.dmodq.data,r.Ber.Integer),e.writeBuffer(t.part.iqmp.data,r.Ber.Integer)}(e,t):function(e,t){e.writeBuffer(t.part.n.data,r.Ber.Integer),e.writeBuffer(t.part.e.data,r.Ber.Integer)}(e,t);break;case"dsa":c.isPrivateKey(t)?function(e,t){var a=o.from([0]);e.writeBuffer(a,r.Ber.Integer),e.writeBuffer(t.part.p.data,r.Ber.Integer),e.writeBuffer(t.part.q.data,r.Ber.Integer),e.writeBuffer(t.part.g.data,r.Ber.Integer),e.writeBuffer(t.part.y.data,r.Ber.Integer),e.writeBuffer(t.part.x.data,r.Ber.Integer)}(e,t):function(e,t){e.writeBuffer(t.part.y.data,r.Ber.Integer),e.writeBuffer(t.part.p.data,r.Ber.Integer),e.writeBuffer(t.part.q.data,r.Ber.Integer),e.writeBuffer(t.part.g.data,r.Ber.Integer)}(e,t);break;case"ecdsa":c.isPrivateKey(t)?function(e,t){var a=o.from([1]);e.writeBuffer(a,r.Ber.Integer),e.writeBuffer(t.part.d.data,r.Ber.OctetString),e.startSequence(160);var u=t.part.curve.data.toString(),c=n.curves[u].pkcs8oid;i.string(c,"a known ECDSA named curve"),e.writeOID(c),e.endSequence(),e.startSequence(161);var p=s.ecNormalize(t.part.Q.data,!0);e.writeBuffer(p,r.Ber.BitString),e.endSequence()}(e,t):function(e,t){e.startSequence(),e.writeOID("1.2.840.10045.2.1");var a=t.part.curve.data.toString(),o=n.curves[a].pkcs8oid;i.string(o,"a known ECDSA named curve"),e.writeOID(o),e.endSequence();var u=s.ecNormalize(t.part.Q.data,!0);e.writeBuffer(u,r.Ber.BitString)}(e,t);break;case"ed25519":c.isPrivateKey(t)?function(e,t){var a=o.from([1]);e.writeBuffer(a,r.Ber.Integer),e.writeBuffer(t.part.k.data,r.Ber.OctetString),e.startSequence(160),e.writeOID("1.3.101.112"),e.endSequence(),e.startSequence(161),s.writeBitString(e,t.part.A.data),e.endSequence()}(e,t):function(e,t){throw new Error("Public keys are not supported for EdDSA PKCS#1")}();break;default:throw new Error("Unknown key algo: "+t.type)}e.endSequence()}};var i=a(0),r=a(12),o=a(3).Buffer,n=a(7),s=a(5),u=a(4),c=a(6),p=a(15),l=a(29).readECDSACurve;function m(e,t){return i.strictEqual(e.peek(),r.Ber.Integer,t+" is not an Integer"),s.mpNormalize(e.readString(r.Ber.Integer,!0))}},function(e,t,a){e.exports={read:function(e,t){"string"!=typeof e&&(i.buffer(e,"buf"),e=e.toString("ascii"));var a=e.split("\n");if(a[0].match(/^Private-key-format\: v1/)){var u=a[1].split(" "),l=parseInt(u[1],10),m=u[2];if(!c[l])throw new Error("Unsupported algorithm: "+m);return function(e,t){if(c[e].match(/^RSA-/))return function(e){var t={};e.forEach(function(e){"Modulus:"===e.split(" ")[0]?t.n=p(e):"PublicExponent:"===e.split(" ")[0]?t.e=p(e):"PrivateExponent:"===e.split(" ")[0]?t.d=p(e):"Prime1:"===e.split(" ")[0]?t.p=p(e):"Prime2:"===e.split(" ")[0]?t.q=p(e):"Exponent1:"===e.split(" ")[0]?t.dmodp=p(e):"Exponent2:"===e.split(" ")[0]?t.dmodq=p(e):"Coefficient:"===e.split(" ")[0]&&(t.iqmp=p(e))});var a={type:"rsa",parts:[{name:"e",data:s.mpNormalize(t.e)},{name:"n",data:s.mpNormalize(t.n)},{name:"d",data:s.mpNormalize(t.d)},{name:"p",data:s.mpNormalize(t.p)},{name:"q",data:s.mpNormalize(t.q)},{name:"dmodp",data:s.mpNormalize(t.dmodp)},{name:"dmodq",data:s.mpNormalize(t.dmodq)},{name:"iqmp",data:s.mpNormalize(t.iqmp)}]};return new n(a)}(t);if("ECDSA-P384-SHA384"===c[e]||"ECDSA-P256-SHA256"===c[e]){var a=r.from(t[0].split(" ")[1],"base64"),i="nistp384",o=384;"ECDSA-P256-SHA256"===c[e]&&(i="nistp256",o=256);var u=s.publicFromPrivateECDSA(i,a),l=u.part.Q.data,m={type:"ecdsa",curve:i,size:o,parts:[{name:"curve",data:r.from(i)},{name:"d",data:a},{name:"Q",data:l}]};return new n(m)}throw new Error("Unsupported algorithm: "+c[e])}(l,a.slice(2))}var h=0;for(;a[h].match(/^\;/);)h++;if((a[h].match(/\. IN KEY /)||a[h].match(/\. IN DNSKEY /))&&0===a[h+1].length)return function(e){var t=e.split(" "),a=parseInt(t[5],10);if(!c[a])throw new Error("Unsupported algorithm: "+a);var i=t.slice(6,t.length).join(),n=r.from(i,"base64");if(c[a].match(/^RSA-/)){var u=n.readUInt8(0);if(3!=u&&1!=u)throw new Error("Cannot parse dnssec key: unsupported exponent length");var p=n.slice(1,u+1);p=s.mpNormalize(p);var l=n.slice(1+u);l=s.mpNormalize(l);var m={type:"rsa",parts:[]};return m.parts.push({name:"e",data:p}),m.parts.push({name:"n",data:l}),new o(m)}if("ECDSA-P384-SHA384"===c[a]||"ECDSA-P256-SHA256"===c[a]){var h="nistp384",d=384;c[a].match(/^ECDSA-P256-SHA256/)&&(h="nistp256",d=256);var f={type:"ecdsa",curve:h,size:d,parts:[{name:"curve",data:r.from(h)},{name:"Q",data:s.ecNormalize(n)}]};return new o(f)}throw new Error("Unsupported algorithm: "+c[a])}(a[h]);throw new Error("Cannot parse dnssec key")},write:function(e,t){if(n.isPrivateKey(e)){if("rsa"===e.type)return function(e,t){e.part.dmodp&&e.part.dmodq||s.addRSAMissing(e);var a="";a+="Private-key-format: v1.3\n",a+="Algorithm: "+function(e){if(e&&e.hashAlgo&&"sha1"!==e.hashAlgo){if("sha256"===e.hashAlgo)return"8 (RSASHA256)";if("sha512"===e.hashAlgo)return"10 (RSASHA512)";throw new Error("Unknown or unsupported hash: "+e.hashAlgo)}return"5 (RSASHA1)"}(t)+"\n";var i=s.mpDenormalize(e.part.n.data);a+="Modulus: "+i.toString("base64")+"\n";var o=s.mpDenormalize(e.part.e.data);a+="PublicExponent: "+o.toString("base64")+"\n";var n=s.mpDenormalize(e.part.d.data);a+="PrivateExponent: "+n.toString("base64")+"\n";var u=s.mpDenormalize(e.part.p.data);a+="Prime1: "+u.toString("base64")+"\n";var c=s.mpDenormalize(e.part.q.data);a+="Prime2: "+c.toString("base64")+"\n";var p=s.mpDenormalize(e.part.dmodp.data);a+="Exponent1: "+p.toString("base64")+"\n";var m=s.mpDenormalize(e.part.dmodq.data);a+="Exponent2: "+m.toString("base64")+"\n";var h=s.mpDenormalize(e.part.iqmp.data);a+="Coefficient: "+h.toString("base64")+"\n";var d=new Date;return a+="Created: "+l(d)+"\n",a+="Publish: "+l(d)+"\n",a+="Activate: "+l(d)+"\n",r.from(a,"ascii")}(e,t);if("ecdsa"===e.type)return function(e,t){var a="";if(a+="Private-key-format: v1.3\n","nistp256"===e.curve)a+="Algorithm: 13 (ECDSAP256SHA256)\n";else{if("nistp384"!==e.curve)throw new Error("Unsupported curve");a+="Algorithm: 14 (ECDSAP384SHA384)\n"}var i=e.part.d.data.toString("base64");a+="PrivateKey: "+i+"\n";var o=new Date;return a+="Created: "+l(o)+"\n",a+="Publish: "+l(o)+"\n",a+="Activate: "+l(o)+"\n",r.from(a,"ascii")}(e);throw new Error("Unsupported algorithm: "+e.type)}throw o.isKey(e)?new Error('Format "dnssec" only supports writing private keys'):new Error("key is not a Key or PrivateKey")}};var i=a(0),r=a(3).Buffer,o=a(4),n=a(6),s=a(5),u=(a(28),a(41),{"rsa-sha1":5,"rsa-sha256":8,"rsa-sha512":10,"ecdsa-p256-sha256":13,"ecdsa-p384-sha384":14}),c={};function p(e){return r.from(e.split(" ")[1],"base64")}function l(e){var t=e.getFullYear()+""+(e.getMonth()+1)+e.getUTCDate();return t+=""+e.getUTCHours()+e.getUTCMinutes(),t+=e.getUTCSeconds()}Object.keys(u).forEach(function(e){c[u[e]]=e.toUpperCase()})},function(e,t){function a(e){this.dict=e||{}}a.prototype.set=function(e,t,a){if("object"!=typeof e){void 0===a&&(a=!0);var i=this.has(e);return!a&&i?this.dict[i]=this.dict[i]+","+t:this.dict[i||e]=t,i}for(var r in e)this.set(r,e[r],t)},a.prototype.has=function(e){for(var t=Object.keys(this.dict),a=(e=e.toLowerCase(),0);a<t.length;a++)if(t[a].toLowerCase()===e)return t[a];return!1},a.prototype.get=function(e){var t,a;e=e.toLowerCase();var i=this.dict;return Object.keys(i).forEach(function(r){a=r.toLowerCase(),e===a&&(t=i[r])}),t},a.prototype.swap=function(e){var t=this.has(e);if(t!==e){if(!t)throw new Error('There is no header than matches "'+e+'"');this.dict[e]=this.dict[t],delete this.dict[t]}},a.prototype.del=function(e){var t=this.has(e);return delete this.dict[t||e]},e.exports=function(e){return new a(e)},e.exports.httpify=function(e,t){var i=new a(t);return e.setHeader=function(e,t,a){if(void 0!==t)return i.set(e,t,a)},e.hasHeader=function(e){return i.has(e)},e.getHeader=function(e){return i.get(e)},e.removeHeader=function(e){return i.del(e)},e.headers=i.dict,i}},function(e,t,a){"use strict";var i=a(147),r=a(46),o=a(22),n=a(75),s=a(149);function u(e,t,a){var i=this._refs[a];if("string"==typeof i){if(!this._refs[i])return u.call(this,e,t,i);i=this._refs[i]}if((i=i||this._schemas[a])instanceof n)return h(i.schema,this._opts.inlineRefs)?i.schema:i.validate||this._compile(i);var r,o,s,p=c.call(this,t,a);return p&&(r=p.schema,t=p.root,s=p.baseId),r instanceof n?o=r.validate||e.call(this,r.schema,t,void 0,s):void 0!==r&&(o=h(r,this._opts.inlineRefs)?r:e.call(this,r,t,void 0,s)),o}function c(e,t){var a=i.parse(t),r=f(a),o=d(this._getId(e.schema));if(0===Object.keys(e.schema).length||r!==o){var s=v(r),u=this._refs[s];if("string"==typeof u)return function(e,t,a){var i=c.call(this,e,t);if(i){var r=i.schema,o=i.baseId;e=i.root;var n=this._getId(r);return n&&(o=y(o,n)),l.call(this,a,o,r,e)}}.call(this,e,u,a);if(u instanceof n)u.validate||this._compile(u),e=u;else{if(!((u=this._schemas[s])instanceof n))return;if(u.validate||this._compile(u),s==v(t))return{schema:u,root:e,baseId:o};e=u}if(!e.schema)return;o=d(this._getId(e.schema))}return l.call(this,a,o,e.schema,e)}e.exports=u,u.normalizeId=v,u.fullPath=d,u.url=y,u.ids=function(e){var t=v(this._getId(e)),a={"":t},n={"":d(t,!1)},u={},c=this;return s(e,{allKeys:!0},function(e,t,s,p,l,m,h){if(""!==t){var d=c._getId(e),f=a[p],g=n[p]+"/"+l;if(void 0!==h&&(g+="/"+("number"==typeof h?h:o.escapeFragment(h))),"string"==typeof d){d=f=v(f?i.resolve(f,d):d);var y=c._refs[d];if("string"==typeof y&&(y=c._refs[y]),y&&y.schema){if(!r(e,y.schema))throw new Error('id "'+d+'" resolves to more than one schema')}else if(d!=v(g))if("#"==d[0]){if(u[d]&&!r(e,u[d]))throw new Error('id "'+d+'" resolves to more than one schema');u[d]=e}else c._refs[d]=g}a[t]=f,n[t]=g}}),u},u.inlineRef=h,u.schema=c;var p=o.toHash(["properties","patternProperties","enum","dependencies","definitions"]);function l(e,t,a,i){if(e.fragment=e.fragment||"","/"==e.fragment.slice(0,1)){for(var r=e.fragment.split("/"),n=1;n<r.length;n++){var s=r[n];if(s){if(void 0===(a=a[s=o.unescapeFragment(s)]))break;var u;if(!p[s]&&((u=this._getId(a))&&(t=y(t,u)),a.$ref)){var l=y(t,a.$ref),m=c.call(this,i,l);m&&(a=m.schema,i=m.root,t=m.baseId)}}}return void 0!==a&&a!==i.schema?{schema:a,root:i,baseId:t}:void 0}}var m=o.toHash(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum"]);function h(e,t){return!1!==t&&(void 0===t||!0===t?function e(t){var a;if(Array.isArray(t)){for(var i=0;i<t.length;i++)if("object"==typeof(a=t[i])&&!e(a))return!1}else for(var r in t){if("$ref"==r)return!1;if("object"==typeof(a=t[r])&&!e(a))return!1}return!0}(e):t?function e(t){var a,i=0;if(Array.isArray(t)){for(var r=0;r<t.length;r++)if("object"==typeof(a=t[r])&&(i+=e(a)),i==1/0)return 1/0}else for(var o in t){if("$ref"==o)return 1/0;if(m[o])i++;else if("object"==typeof(a=t[o])&&(i+=e(a)+1),i==1/0)return 1/0}return i}(e)<=t:void 0)}function d(e,t){return!1!==t&&(e=v(e)),f(i.parse(e))}function f(e){return i.serialize(e).split("#")[0]+"#"}var g=/#\/?$/;function v(e){return e?e.replace(g,""):""}function y(e,t){return t=v(t),i.resolve(e,t)}},function(e,t,a){"use strict";var i=Array.isArray,r=Object.keys,o=Object.prototype.hasOwnProperty;e.exports=function e(t,a){if(t===a)return!0;if(t&&a&&"object"==typeof t&&"object"==typeof a){var n,s,u,c=i(t),p=i(a);if(c&&p){if((s=t.length)!=a.length)return!1;for(n=s;0!=n--;)if(!e(t[n],a[n]))return!1;return!0}if(c!=p)return!1;var l=t instanceof Date,m=a instanceof Date;if(l!=m)return!1;if(l&&m)return t.getTime()==a.getTime();var h=t instanceof RegExp,d=a instanceof RegExp;if(h!=d)return!1;if(h&&d)return t.toString()==a.toString();var f=r(t);if((s=f.length)!==r(a).length)return!1;for(n=s;0!=n--;)if(!o.call(a,f[n]))return!1;for(n=s;0!=n--;)if(!e(t[u=f[n]],a[u]))return!1;return!0}return t!=t&&a!=a}},function(e,t,a){"use strict";var i=a(45);function r(e,t,a){this.message=a||r.message(e,t),this.missingRef=i.url(e,t),this.missingSchema=i.normalizeId(i.fullPath(this.missingRef))}function o(e){return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}e.exports={Validation:o(function(e){this.message="validation failed",this.errors=e,this.ajv=this.validation=!0}),MissingRef:o(r)},r.message=function(e,t){return"can't resolve reference "+t+" from id "+e}},function(e,t,a){var i=a(201),r=a(202);e.exports=function(e,t,a){var o=t&&a||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var n=(e=e||{}).random||(e.rng||i)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t)for(var s=0;s<16;++s)t[o+s]=n[s];return t||r(n)}},function(e,t,a){"use strict";var i=a(99),r=i.Cookie,o=i.CookieJar;function n(e){this._jar=new o(e,{looseMode:!0})}t.parse=function(e){if(e&&e.uri&&(e=e.uri),"string"!=typeof e)throw new Error("The cookie function only accepts STRING as param");return r.parse(e,{loose:!0})},n.prototype.setCookie=function(e,t,a){return this._jar.setCookieSync(e,t,a||{})},n.prototype.getCookieString=function(e){return this._jar.getCookieStringSync(e)},n.prototype.getCookies=function(e){return this._jar.getCookiesSync(e)},t.jar=function(e){return new n(e)}},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2018, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i=a(100);t.getPublicSuffix=function(e){return i.get(e)}},function(e,t){e.exports=require("punycode")},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */function i(){}t.Store=i,i.prototype.synchronous=!1,i.prototype.findCookie=function(e,t,a,i){throw new Error("findCookie is not implemented")},i.prototype.findCookies=function(e,t,a){throw new Error("findCookies is not implemented")},i.prototype.putCookie=function(e,t){throw new Error("putCookie is not implemented")},i.prototype.updateCookie=function(e,t,a){throw new Error("updateCookie is not implemented")},i.prototype.removeCookie=function(e,t,a,i){throw new Error("removeCookie is not implemented")},i.prototype.removeCookies=function(e,t,a){throw new Error("removeCookies is not implemented")},i.prototype.getAllCookies=function(e){throw new Error("getAllCookies is not implemented (therefore jar cannot be serialized)")}},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i=a(50);t.permuteDomain=function(e){var t=i.getPublicSuffix(e);if(!t)return null;if(t==e)return[e];for(var a=e.slice(0,-(t.length+1)).split(".").reverse(),r=t,o=[r];a.length;)r=a.shift()+"."+r,o.push(r);return o}},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */t.pathMatch=function(e,t){if(t===e)return!0;if(0===e.indexOf(t)){if("/"===t.substr(-1))return!0;if("/"===e.substr(t.length,1))return!0}return!1}},function(e,t){e.exports=require("buffer")},function(e,t,a){e.exports={Verifier:c,Signer:p};var i=a(27),r=a(20),o=a(1),n=a(0),s=a(3).Buffer,u=a(11);function c(e,t){if("sha512"!==t.toLowerCase())throw new Error("ED25519 only supports the use of SHA-512 hashes");this.key=e,this.chunks=[],r.Writable.call(this,{})}function p(e,t){if("sha512"!==t.toLowerCase())throw new Error("ED25519 only supports the use of SHA-512 hashes");this.key=e,this.chunks=[],r.Writable.call(this,{})}o.inherits(c,r.Writable),c.prototype._write=function(e,t,a){this.chunks.push(e),a()},c.prototype.update=function(e){"string"==typeof e&&(e=s.from(e,"binary")),this.chunks.push(e)},c.prototype.verify=function(e,t){var a;if(u.isSignature(e,[2,0])){if("ed25519"!==e.type)return!1;a=e.toBuffer("raw")}else if("string"==typeof e)a=s.from(e,"base64");else if(u.isSignature(e,[1,0]))throw new Error("signature was created by too old a version of sshpk and cannot be verified");return n.buffer(a),i.sign.detached.verify(new Uint8Array(s.concat(this.chunks)),new Uint8Array(a),new Uint8Array(this.key.part.A.data))},o.inherits(p,r.Writable),p.prototype._write=function(e,t,a){this.chunks.push(e),a()},p.prototype.update=function(e){"string"==typeof e&&(e=s.from(e,"binary")),this.chunks.push(e)},p.prototype.sign=function(){var e=i.sign.detached(new Uint8Array(s.concat(this.chunks)),new Uint8Array(s.concat([this.key.part.k.data,this.key.part.A.data]))),t=s.from(e),a=u.parse(t,"ed25519","raw");return a.hashAlgorithm="sha512",a}},function(e,t,a){e.exports={read:function(e,t){if("string"==typeof e){if(e.trim().match(/^[-]+[ ]*BEGIN/))return o.read(e,t);if(e.match(/^\s*ssh-[a-z]/))return n.read(e,t);if(e.match(/^\s*ecdsa-/))return n.read(e,t);if(e.match(/^putty-user-key-file-2:/i))return c.read(e,t);if(l(e))return u.read(e,t);e=r.from(e,"binary")}else{if(i.buffer(e),function(e){var t=0;for(;t<e.length&&(32===e[t]||10===e[t]);)++t;if(45!==e[t])return!1;for(;t<e.length&&45===e[t];)++t;for(;t<e.length&&32===e[t];)++t;return!(t+5>e.length||"BEGIN"!==e.slice(t,t+5).toString("ascii"))}(e))return o.read(e,t);if(function(e){var t=0;for(;t<e.length&&(32===e[t]||10===e[t]||9===e[t]);)++t;return t+4<=e.length&&"ssh-"===e.slice(t,t+4).toString("ascii")||t+6<=e.length&&"ecdsa-"===e.slice(t,t+6).toString("ascii")}(e))return n.read(e,t);if(function(e){var t=0;for(;t<e.length&&(32===e[t]||10===e[t]||9===e[t]);)++t;return t+22<=e.length&&"putty-user-key-file-2:"===e.slice(t,t+22).toString("ascii").toLowerCase()}(e))return c.read(e,t);if(l(e))return u.read(e,t)}if(e.readUInt32BE(0)<e.length)return s.read(e,t);throw new Error("Failed to auto-detect format of key")},write:function(e,t){throw new Error('"auto" format cannot be used for writing')}};var i=a(0),r=a(3).Buffer,o=(a(5),a(4),a(6),a(15)),n=a(59),s=a(16),u=a(43),c=a(60),p="Private-key-format: v1";function l(e){if(e.length<=p.length)return!1;if(e.slice(0,p.length).toString("ascii")===p)return!0;"string"!=typeof e&&(e=e.toString("ascii"));for(var t=e.split("\n"),a=0;t[a].match(/^\;/);)a++;return!!t[a].toString("ascii").match(/\. IN KEY /)||!!t[a].toString("ascii").match(/\. IN DNSKEY /)}},function(e,t,a){"use strict";var i=a(27).lowlevel.crypto_hash,r=0,o=function(){this.S=[new Uint32Array([3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946]),new Uint32Array([1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055]),new Uint32Array([3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504]),new Uint32Array([976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462])],this.P=new Uint32Array([608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731])};function n(e,t,a){return(e[0][t[a+3]]+e[1][t[a+2]]^e[2][t[a+1]])+e[3][t[a]]}function s(e,t){var a,i=0;for(a=0;a<4;a++,r++)r>=t&&(r=0),i=i<<8|e[r];return i}o.prototype.encipher=function(e,t){void 0===t&&(t=new Uint8Array(e.buffer),0!==e.byteOffset&&(t=t.subarray(e.byteOffset))),e[0]^=this.P[0];for(var a=1;a<16;a+=2)e[1]^=n(this.S,t,0)^this.P[a],e[0]^=n(this.S,t,4)^this.P[a+1];var i=e[0];e[0]=e[1]^this.P[17],e[1]=i},o.prototype.decipher=function(e){var t=new Uint8Array(e.buffer);0!==e.byteOffset&&(t=t.subarray(e.byteOffset)),e[0]^=this.P[17];for(var a=16;a>0;a-=2)e[1]^=n(this.S,t,0)^this.P[a],e[0]^=n(this.S,t,4)^this.P[a-1];var i=e[0];e[0]=e[1]^this.P[0],e[1]=i},o.prototype.expand0state=function(e,t){var a,i,o=new Uint32Array(2),n=new Uint8Array(o.buffer);for(a=0,r=0;a<18;a++)this.P[a]^=s(e,t);for(r=0,a=0;a<18;a+=2)this.encipher(o,n),this.P[a]=o[0],this.P[a+1]=o[1];for(a=0;a<4;a++)for(i=0;i<256;i+=2)this.encipher(o,n),this.S[a][i]=o[0],this.S[a][i+1]=o[1]},o.prototype.expandstate=function(e,t,a,i){var o,n,u=new Uint32Array(2);for(o=0,r=0;o<18;o++)this.P[o]^=s(a,i);for(o=0,r=0;o<18;o+=2)u[0]^=s(e,t),u[1]^=s(e,t),this.encipher(u),this.P[o]=u[0],this.P[o+1]=u[1];for(o=0;o<4;o++)for(n=0;n<256;n+=2)u[0]^=s(e,t),u[1]^=s(e,t),this.encipher(u),this.S[o][n]=u[0],this.S[o][n+1]=u[1];r=0},o.prototype.enc=function(e,t){for(var a=0;a<t;a++)this.encipher(e.subarray(2*a))},o.prototype.dec=function(e,t){for(var a=0;a<t;a++)this.decipher(e.subarray(2*a))};var u=8,c=32;function p(e,t,a){var i,r=new o,n=new Uint32Array(u),c=new Uint8Array([79,120,121,99,104,114,111,109,97,116,105,99,66,108,111,119,102,105,115,104,83,119,97,116,68,121,110,97,109,105,116,101]);for(r.expandstate(t,64,e,64),i=0;i<64;i++)r.expand0state(t,64),r.expand0state(e,64);for(i=0;i<u;i++)n[i]=s(c,c.byteLength);for(i=0;i<64;i++)r.enc(n,n.byteLength/8);for(i=0;i<u;i++)a[4*i+3]=n[i]>>>24,a[4*i+2]=n[i]>>>16,a[4*i+1]=n[i]>>>8,a[4*i+0]=n[i]}e.exports={BLOCKS:u,HASHSIZE:c,hash:p,pbkdf:function(e,t,a,r,o,n,s){var u,l,m,h,d,f,g=new Uint8Array(64),v=new Uint8Array(64),y=new Uint8Array(c),b=new Uint8Array(c),k=new Uint8Array(r+4),j=n;if(s<1)return-1;if(0===t||0===r||0===n||n>y.byteLength*y.byteLength||r>1<<20)return-1;for(h=Math.floor((n+y.byteLength-1)/y.byteLength),m=Math.floor((n+h-1)/h),u=0;u<r;u++)k[u]=a[u];for(i(g,e,t),f=1;n>0;f++){for(k[r+0]=f>>>24,k[r+1]=f>>>16,k[r+2]=f>>>8,k[r+3]=f,i(v,k,r+4),p(g,v,b),u=y.byteLength;u--;)y[u]=b[u];for(u=1;u<s;u++)for(i(v,b,b.byteLength),p(g,v,b),l=0;l<y.byteLength;l++)y[l]^=b[l];for(m=Math.min(m,n),u=0;u<m&&!((d=u*h+(f-1))>=j);u++)o[d]=y[u];n-=u}return 0}}},function(e,t,a){e.exports={read:function(e,t){"string"!=typeof e&&(i.buffer(e,"buf"),e=e.toString("ascii"));var a=e.trim().replace(/[\\\r]/g,""),n=a.match(s);n||(n=a.match(u));i.ok(n,"key must match regex");var c,p=o.algToKeyType(n[1]),l=r.from(n[2],"base64"),m={};if(n[4])try{c=o.read(l)}catch(e){n=a.match(u),i.ok(n,"key must match regex"),l=r.from(n[2],"base64"),c=o.readInternal(m,"public",l)}else c=o.readInternal(m,"public",l);if(i.strictEqual(p,c.type),n[4]&&n[4].length>0)c.comment=n[4];else if(m.consumed){var h=n[2]+(n[3]?n[3]:""),d=4*Math.ceil(m.consumed/3);h=h.slice(0,d-2).replace(/[^a-zA-Z0-9+\/=]/g,"")+h.slice(d-2);var f=m.consumed%3;for(f>0&&"="!==h.slice(d-1,d)&&d--;"="===h.slice(d,d+1);)d++;var g=h.slice(d);(g=g.replace(/[\r\n]/g," ").replace(/^\s+/,"")).match(/^[a-zA-Z0-9]/)&&(c.comment=g)}return c},write:function(e,t){if(i.object(e),!n.isKey(e))throw new Error("Must be a public key");var a=[],s=o.keyTypeToAlg(e);a.push(s);var u=o.write(e);a.push(u.toString("base64")),e.comment&&a.push(e.comment);return r.from(a.join(" "))}};var i=a(0),r=a(3).Buffer,o=a(16),n=(a(5),a(4)),s=(a(6),a(34),/^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([ \t]+([^ \t][^\n]*[\n]*)?)?$/),u=/^([a-z0-9-]+)[ \t\n]+([a-zA-Z0-9+\/][a-zA-Z0-9+\/ \t\n=]*)([^a-zA-Z0-9+\/ \t\n=].*)?$/},function(e,t,a){e.exports={read:function(e,t){var a,n=e.toString("ascii").split(/[\r\n]+/),u=!1,c=0;for(;c<n.length;)if((a=s(n[c++]))&&"putty-user-key-file-2"===a[0].toLowerCase()){u=!0;break}if(!u)throw new Error("No PuTTY format first line found");var p=a[1];a=s(n[c++]),i.equal(a[0].toLowerCase(),"encryption"),a=s(n[c++]),i.equal(a[0].toLowerCase(),"comment");var l=a[1];a=s(n[c++]),i.equal(a[0].toLowerCase(),"public-lines");var m=parseInt(a[1],10);if(!isFinite(m)||m<0||m>n.length)throw new Error("Invalid public-lines count");var h=r.from(n.slice(c,c+m).join(""),"base64"),d=o.algToKeyType(p),f=o.read(h);if(f.type!==d)throw new Error("Outer key algorithm mismatch");return f.comment=l,f},write:function(e,t){if(i.object(e),!n.isKey(e))throw new Error("Must be a public key");var a=o.keyTypeToAlg(e),s=o.write(e),u=e.comment||"",c=function(e,t){var a=[],i=0;for(;i<e.length;)a.push(e.slice(i,i+64)),i+=64;return a}(s.toString("base64"));return c.unshift("Public-Lines: "+c.length),c.unshift("Comment: "+u),c.unshift("Encryption: none"),c.unshift("PuTTY-User-Key-File-2: "+a),r.from(c.join("\n")+"\n")}};var i=a(0),r=a(3).Buffer,o=a(16),n=a(4);a(9);function s(e){var t=e.indexOf(":");if(-1===t)return null;var a=e.slice(0,t);for(++t;" "===e[t];)++t;return[a,e.slice(t)]}},function(e,t,a){e.exports={read:function(e,t){"string"==typeof e&&(e=o.from(e,"binary"));i.buffer(e,"buf");var a=new r.BerReader(e);if(a.readSequence(),Math.abs(a.length-a.remain)>1)throw new Error("DER sequence does not contain whole byte stream");var m=a.offset;a.readSequence();var d=a.offset+a.length,g=d;if(a.peek()===l(0)){a.readSequence(l(0));var v=a.readInt();i.ok(v<=3,"only x.509 versions up to v3 supported")}var y={signatures:{}},b=y.signatures.x509={};b.extras={},y.serial=function(e,t){return i.strictEqual(e.peek(),r.Ber.Integer,t+" is not an Integer"),n.mpNormalize(e.readString(r.Ber.Integer,!0))}(a,"serial"),a.readSequence();var k=a.offset+a.length,w=a.readOID();if(void 0===h[w])throw new Error("unknown signature algorithm "+w);a._offset=k,y.issuer=s.parseAsn1(a),a.readSequence(),y.validFrom=f(a),y.validUntil=f(a),y.subjects=[s.parseAsn1(a)],a.readSequence(),k=a.offset+a.length,y.subjectKey=p.readPkcs8(void 0,"public",a),a._offset=k,a.peek()===l(1)&&(a.readSequence(l(1)),b.extras.issuerUniqueID=e.slice(a.offset,a.offset+a.length),a._offset+=a.length);a.peek()===l(2)&&(a.readSequence(l(2)),b.extras.subjectUniqueID=e.slice(a.offset,a.offset+a.length),a._offset+=a.length);if(a.peek()===l(3)){a.readSequence(l(3));var x=a.offset+a.length;for(a.readSequence();a.offset<x;)j(y,e,a);i.strictEqual(a.offset,x)}i.strictEqual(a.offset,d),a.readSequence(),k=a.offset+a.length;var E=a.readOID(),S=h[E];if(void 0===S)throw new Error("unknown signature algorithm "+E);a._offset=k;var _=a.readString(r.Ber.BitString,!0);0===_[0]&&(_=_.slice(1));var R=S.split("-");return b.signature=u.parse(_,R[0],"asn1"),b.signature.hashAlgorithm=R[1],b.algo=S,b.cache=e.slice(m,g),new c(y)},verify:function(e,t){var a=e.signatures.x509;i.object(a,"x509 signature");var o=a.algo.split("-");if(o[0]!==t.type)return!1;var n=a.cache;if(void 0===n){var s=new r.BerWriter;S(e,s),n=s.buffer}var u=t.createVerify(o[1]);return u.write(n),u.verify(a.signature)},sign:function(e,t){void 0===e.signatures.x509&&(e.signatures.x509={});var a=e.signatures.x509;if(a.algo=t.type+"-"+t.defaultHashAlgorithm(),void 0===h[a.algo])return!1;var i=new r.BerWriter;S(e,i);var o=i.buffer;a.cache=o;var n=t.createSign();return n.write(o),e.signatures.x509.signature=n.sign(),!0},signAsync:function(e,t,a){void 0===e.signatures.x509&&(e.signatures.x509={});var i=e.signatures.x509,o=new r.BerWriter;S(e,o);var n=o.buffer;i.cache=n,t(n,function(e,t){e?a(e):(i.algo=t.type+"-"+t.hashAlgorithm,void 0!==h[i.algo]?(i.signature=t,a()):a(new Error('Invalid signing algorithm "'+i.algo+'"')))})},write:function(e,t){var a=e.signatures.x509;i.object(a,"x509 signature");var n=new r.BerWriter;n.startSequence(),a.cache?(n._ensure(a.cache.length),a.cache.copy(n._buf,n._offset),n._offset+=a.cache.length):S(e,n);n.startSequence(),n.writeOID(h[a.algo]),a.algo.match(/^rsa-/)&&n.writeNull();n.endSequence();var s=a.signature.toBuffer("asn1"),u=o.alloc(s.length+1);return u[0]=0,s.copy(u,1),n.writeBuffer(u,r.Ber.BitString),n.endSequence(),n.buffer}};var i=a(0),r=a(12),o=a(3).Buffer,n=(a(7),a(5)),s=(a(4),a(6),a(15),a(31)),u=a(11),c=a(30),p=a(29);function l(e){return r.Ber.Context|r.Ber.Constructor|e}function m(e){return r.Ber.Context|e}var h={"rsa-md5":"1.2.840.113549.1.1.4","rsa-sha1":"1.2.840.113549.1.1.5","rsa-sha256":"1.2.840.113549.1.1.11","rsa-sha384":"1.2.840.113549.1.1.12","rsa-sha512":"1.2.840.113549.1.1.13","dsa-sha1":"1.2.840.10040.4.3","dsa-sha256":"2.16.840.1.101.3.4.3.2","ecdsa-sha1":"1.2.840.10045.4.1","ecdsa-sha256":"1.2.840.10045.4.3.2","ecdsa-sha384":"1.2.840.10045.4.3.3","ecdsa-sha512":"1.2.840.10045.4.3.4","ed25519-sha512":"1.3.101.112"};Object.keys(h).forEach(function(e){h[h[e]]=e}),h["1.3.14.3.2.3"]="rsa-md5",h["1.3.14.3.2.29"]="rsa-sha1";var d={issuerKeyId:"2.5.29.35",altName:"2.5.29.17",basicConstraints:"2.5.29.19",keyUsage:"2.5.29.15",extKeyUsage:"2.5.29.37"};function f(e){if(e.peek()===r.Ber.UTCTime)return function(e){var t=e.match(w);i.ok(t,"timestamps must be in UTC");var a=new Date,r=a.getUTCFullYear(),o=100*Math.floor(r/100),n=parseInt(t[1],10);n+=r%100<50&&n>=60?o-1:o;a.setUTCFullYear(n,parseInt(t[2],10)-1,parseInt(t[3],10)),a.setUTCHours(parseInt(t[4],10),parseInt(t[5],10)),t[6]&&t[6].length>0&&a.setUTCSeconds(parseInt(t[6],10));return a}(e.readString(r.Ber.UTCTime));if(e.peek()===r.Ber.GeneralizedTime)return function(e){var t=e.match(x);i.ok(t);var a=new Date;a.setUTCFullYear(parseInt(t[1],10),parseInt(t[2],10)-1,parseInt(t[3],10)),a.setUTCHours(parseInt(t[4],10),parseInt(t[5],10)),t[6]&&t[6].length>0&&a.setUTCSeconds(parseInt(t[6],10));return a}(e.readString(r.Ber.GeneralizedTime));throw new Error("Unsupported date format")}function g(e,t){var a,i;t.getUTCFullYear()>=2050||t.getUTCFullYear()<1950?e.writeString((i="",i+=E((a=t).getUTCFullYear(),4),i+=E(a.getUTCMonth()+1),i+=E(a.getUTCDate()),i+=E(a.getUTCHours()),i+=E(a.getUTCMinutes()),i+=E(a.getUTCSeconds()),i+="Z"),r.Ber.GeneralizedTime):e.writeString(function(e){var t="";return t+=E(e.getUTCFullYear()%100),t+=E(e.getUTCMonth()+1),t+=E(e.getUTCDate()),t+=E(e.getUTCHours()),t+=E(e.getUTCMinutes()),t+=E(e.getUTCSeconds()),t+="Z"}(t),r.Ber.UTCTime)}var v={OtherName:l(0),RFC822Name:m(1),DNSName:m(2),X400Address:l(3),DirectoryName:l(4),EDIPartyName:l(5),URI:m(6),IPAddress:m(7),OID:m(8)},y={serverAuth:"1.3.6.1.5.5.7.3.1",clientAuth:"1.3.6.1.5.5.7.3.2",codeSigning:"1.3.6.1.5.5.7.3.3",joyentDocker:"1.3.6.1.4.1.38678.1.4.1",joyentCmon:"1.3.6.1.4.1.38678.1.4.2"},b={};Object.keys(y).forEach(function(e){b[y[e]]=e});var k=["signature","identity","keyEncryption","encryption","keyAgreement","ca","crl"];function j(e,t,a){a.readSequence();var i,o,n=a.offset+a.length,u=a.readOID(),c=e.signatures.x509;switch(c.extras.exts||(c.extras.exts=[]),a.peek()===r.Ber.Boolean&&(o=a.readBoolean()),u){case d.basicConstraints:a.readSequence(r.Ber.OctetString),a.readSequence();var p=a.offset+a.length,l=!1;a.peek()===r.Ber.Boolean&&(l=a.readBoolean()),void 0===e.purposes&&(e.purposes=[]),!0===l&&e.purposes.push("ca");var m={oid:u,critical:o};a.offset<p&&a.peek()===r.Ber.Integer&&(m.pathLen=a.readInt()),c.extras.exts.push(m);break;case d.extKeyUsage:a.readSequence(r.Ber.OctetString),a.readSequence(),void 0===e.purposes&&(e.purposes=[]);for(var h=a.offset+a.length;a.offset<h;){var f=a.readOID();e.purposes.push(b[f]||f)}-1!==e.purposes.indexOf("serverAuth")&&-1===e.purposes.indexOf("clientAuth")?e.subjects.forEach(function(e){"host"!==e.type&&(e.type="host",e.hostname=e.uid||e.email||e.components[0].value)}):-1!==e.purposes.indexOf("clientAuth")&&-1===e.purposes.indexOf("serverAuth")&&e.subjects.forEach(function(e){"user"!==e.type&&(e.type="user",e.uid=e.hostname||e.email||e.components[0].value)}),c.extras.exts.push({oid:u,critical:o});break;case d.keyUsage:a.readSequence(r.Ber.OctetString);var g=a.readString(r.Ber.BitString,!0);(function(e,t){for(var a=8*(e.length-1)-e[0],i={},r=0;r<a;++r){var o=1+Math.floor(r/8),n=7-r%8,s=1<<n,u=0!=(e[o]&s),c=t[r];u&&"string"==typeof c&&(i[c]=!0)}return Object.keys(i)})(g,k).forEach(function(t){void 0===e.purposes&&(e.purposes=[]),-1===e.purposes.indexOf(t)&&e.purposes.push(t)}),c.extras.exts.push({oid:u,critical:o,bits:g});break;case d.altName:a.readSequence(r.Ber.OctetString),a.readSequence();for(var y=a.offset+a.length;a.offset<y;)switch(a.peek()){case v.OtherName:case v.EDIPartyName:a.readSequence(),a._offset+=a.length;break;case v.OID:a.readOID(v.OID);break;case v.RFC822Name:var j=a.readString(v.RFC822Name);i=s.forEmail(j),e.subjects[0].equals(i)||e.subjects.push(i);break;case v.DirectoryName:a.readSequence(v.DirectoryName),i=s.parseAsn1(a),e.subjects[0].equals(i)||e.subjects.push(i);break;case v.DNSName:var w=a.readString(v.DNSName);i=s.forHost(w),e.subjects[0].equals(i)||e.subjects.push(i);break;default:a.readString(a.peek())}c.extras.exts.push({oid:u,critical:o});break;default:c.extras.exts.push({oid:u,critical:o,data:a.readString(r.Ber.OctetString,!0)})}a._offset=n}var w=/^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;var x=/^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;function E(e,t){void 0===t&&(t=2);for(var a=""+e;a.length<t;)a="0"+a;return a}function S(e,t){var a=e.signatures.x509;i.object(a,"x509 signature"),t.startSequence(),t.startSequence(l(0)),t.writeInt(2),t.endSequence(),t.writeBuffer(n.mpNormalize(e.serial),r.Ber.Integer),t.startSequence(),t.writeOID(h[a.algo]),a.algo.match(/^rsa-/)&&t.writeNull(),t.endSequence(),e.issuer.toAsn1(t),t.startSequence(),g(t,e.validFrom),g(t,e.validUntil),t.endSequence();var o=e.subjects[0],s=e.subjects.slice(1);if(o.toAsn1(t),p.writePkcs8(t,e.subjectKey),a.extras&&a.extras.issuerUniqueID&&t.writeBuffer(a.extras.issuerUniqueID,l(1)),a.extras&&a.extras.subjectUniqueID&&t.writeBuffer(a.extras.subjectUniqueID,l(2)),s.length>0||"host"===o.type||void 0!==e.purposes&&e.purposes.length>0||a.extras&&a.extras.exts){t.startSequence(l(3)),t.startSequence();var u=[];void 0!==e.purposes&&e.purposes.length>0&&(u.push({oid:d.basicConstraints,critical:!0}),u.push({oid:d.keyUsage,critical:!0}),u.push({oid:d.extKeyUsage,critical:!0})),u.push({oid:d.altName}),a.extras&&a.extras.exts&&(u=a.extras.exts);for(var c=0;c<u.length;++c){if(t.startSequence(),t.writeOID(u[c].oid),void 0!==u[c].critical&&t.writeBoolean(u[c].critical),u[c].oid===d.altName){t.startSequence(r.Ber.OctetString),t.startSequence(),"host"===o.type&&t.writeString(o.hostname,m(2));for(var f=0;f<s.length;++f)"host"===s[f].type?t.writeString(s[f].hostname,v.DNSName):"email"===s[f].type?t.writeString(s[f].email,v.RFC822Name):(t.startSequence(v.DirectoryName),s[f].toAsn1(t),t.endSequence());t.endSequence(),t.endSequence()}else if(u[c].oid===d.basicConstraints){t.startSequence(r.Ber.OctetString),t.startSequence();var b=-1!==e.purposes.indexOf("ca"),j=u[c].pathLen;t.writeBoolean(b),void 0!==j&&t.writeInt(j),t.endSequence(),t.endSequence()}else if(u[c].oid===d.extKeyUsage)t.startSequence(r.Ber.OctetString),t.startSequence(),e.purposes.forEach(function(e){if("ca"!==e&&-1===k.indexOf(e)){var a=e;void 0!==y[e]&&(a=y[e]),t.writeOID(a)}}),t.endSequence(),t.endSequence();else if(u[c].oid===d.keyUsage){if(t.startSequence(r.Ber.OctetString),void 0!==u[c].bits)t.writeBuffer(u[c].bits,r.Ber.BitString);else{var w=_(e.purposes,k);t.writeBuffer(w,r.Ber.BitString)}t.endSequence()}else t.writeBuffer(u[c].data,r.Ber.OctetString);t.endSequence()}t.endSequence(),t.endSequence()}t.endSequence()}function _(e,t){var a=t.length,i=Math.ceil(a/8),r=8*i-a,n=o.alloc(1+i);n[0]=r;for(var s=0;s<a;++s){var u=1+Math.floor(s/8),c=1<<7-s%8,p=t[s];if(void 0!==p)-1!==e.indexOf(p)&&(n[u]|=c)}return n}},function(e,t,a){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i,r,o,n=a(127),s=a(13).extname,u=/^\s*([^;\s]*)(?:;|\s|$)/,c=/^text\//i;function p(e){if(!e||"string"!=typeof e)return!1;var t=u.exec(e),a=t&&n[t[1].toLowerCase()];return a&&a.charset?a.charset:!(!t||!c.test(t[1]))&&"UTF-8"}t.charset=p,t.charsets={lookup:p},t.contentType=function(e){if(!e||"string"!=typeof e)return!1;var a=-1===e.indexOf("/")?t.lookup(e):e;if(!a)return!1;if(-1===a.indexOf("charset")){var i=t.charset(a);i&&(a+="; charset="+i.toLowerCase())}return a},t.extension=function(e){if(!e||"string"!=typeof e)return!1;var a=u.exec(e),i=a&&t.extensions[a[1].toLowerCase()];if(!i||!i.length)return!1;return i[0]},t.extensions=Object.create(null),t.lookup=function(e){if(!e||"string"!=typeof e)return!1;var a=s("x."+e).toLowerCase().substr(1);if(!a)return!1;return t.types[a]||!1},t.types=Object.create(null),i=t.extensions,r=t.types,o=["nginx","apache",void 0,"iana"],Object.keys(n).forEach(function(e){var t=n[e],a=t.extensions;if(a&&a.length){i[e]=a;for(var s=0;s<a.length;s++){var u=a[s];if(r[u]){var c=o.indexOf(n[r[u]].source),p=o.indexOf(t.source);if("application/octet-stream"!==r[u]&&(c>p||c===p&&"application/"===r[u].substr(0,12)))continue}r[u]=e}}})},function(e,t){e.exports=require("tls")},function(e,t,a){var i=a(1),r=a(20).Stream,o=a(131),n=a(132);function s(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null}e.exports=s,i.inherits(s,r),s.create=function(e){var t=new this;for(var a in e=e||{})t[a]=e[a];return t},s.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!Buffer.isBuffer(e)},s.prototype.append=function(e){if(s.isStreamLike(e)){if(!(e instanceof o)){var t=o.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=t}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},s.prototype.pipe=function(e,t){return r.prototype.pipe.call(this,e,t),this.resume(),e},s.prototype._getNext=function(){this._currentStream=null;var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){s.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),n(this._pipeNext.bind(this,e))}.bind(this)):this._pipeNext(e):this.end()},s.prototype._pipeNext=function(e){if(this._currentStream=e,s.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var t=e;this.write(t),this._getNext()},s.prototype._handleErrors=function(e){var t=this;e.on("error",function(e){t._emitError(e)})},s.prototype.write=function(e){this.emit("data",e)},s.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},s.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},s.prototype.end=function(){this._reset(),this.emit("end")},s.prototype.destroy=function(){this._reset(),this.emit("close")},s.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},s.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},s.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach(function(t){t.dataSize&&(e.dataSize+=t.dataSize)}),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},s.prototype._emitError=function(e){this._reset(),this.emit("error",e)}},function(e,t,a){var i=a(66),r=a(67);e.exports=function(e,t,a,o){var n=a.keyedList?a.keyedList[a.index]:a.index;a.jobs[n]=function(e,t,a,r){var o;o=2==e.length?e(a,i(r)):e(a,t,i(r));return o}(t,n,e[n],function(e,t){n in a.jobs&&(delete a.jobs[n],e?r(a):a.results[n]=t,o(e,a.results))})}},function(e,t,a){var i=a(135);e.exports=function(e){var t=!1;return i(function(){t=!0}),function(a,r){t?e(a,r):i(function(){e(a,r)})}}},function(e,t){e.exports=function(e){Object.keys(e.jobs).forEach(function(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}.bind(e)),e.jobs={}}},function(e,t){e.exports=function(e,t){var a=!Array.isArray(e),i={index:0,keyedList:a||t?Object.keys(e):null,jobs:{},results:a?{}:[],size:a?Object.keys(e).length:e.length};t&&i.keyedList.sort(a?t:function(a,i){return t(e[a],e[i])});return i}},function(e,t,a){var i=a(67),r=a(66);e.exports=function(e){if(!Object.keys(this.jobs).length)return;this.index=this.size,i(this),r(e)(null,this.results)}},function(e,t,a){var i=a(65),r=a(68),o=a(69);function n(e,t){return e<t?-1:e>t?1:0}e.exports=function(e,t,a,n){var s=r(e,a);return i(e,t,s,function a(r,o){r?n(r,o):(s.index++,s.index<(s.keyedList||e).length?i(e,t,s,a):n(null,s.results))}),o.bind(s,n)},e.exports.ascending=n,e.exports.descending=function(e,t){return-1*n(e,t)}},function(e,t,a){var i=a(20);function r(e){return e instanceof i.Stream}function o(e){return r(e)&&"function"==typeof e._read&&"object"==typeof e._readableState}function n(e){return r(e)&&"function"==typeof e._write&&"object"==typeof e._writableState}e.exports=r,e.exports.isReadable=o,e.exports.isWritable=n,e.exports.isDuplex=function(e){return o(e)&&n(e)}},function(e,t,a){"use strict";var i=a(141),r=a(142),o=a(74);e.exports={formats:o,parse:r,stringify:i}},function(e,t,a){"use strict";var i=Object.prototype.hasOwnProperty,r=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),o=function(e,t){for(var a=t&&t.plainObjects?Object.create(null):{},i=0;i<e.length;++i)void 0!==e[i]&&(a[i]=e[i]);return a};e.exports={arrayToObject:o,assign:function(e,t){return Object.keys(t).reduce(function(e,a){return e[a]=t[a],e},e)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],a=[],i=0;i<t.length;++i)for(var r=t[i],o=r.obj[r.prop],n=Object.keys(o),s=0;s<n.length;++s){var u=n[s],c=o[u];"object"==typeof c&&null!==c&&-1===a.indexOf(c)&&(t.push({obj:o,prop:u}),a.push(c))}return function(e){for(var t;e.length;){var a=e.pop();if(t=a.obj[a.prop],Array.isArray(t)){for(var i=[],r=0;r<t.length;++r)void 0!==t[r]&&i.push(t[r]);a.obj[a.prop]=i}}return t}(t)},decode:function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(t){return e}},encode:function(e){if(0===e.length)return e;for(var t="string"==typeof e?e:String(e),a="",i=0;i<t.length;++i){var o=t.charCodeAt(i);45===o||46===o||95===o||126===o||o>=48&&o<=57||o>=65&&o<=90||o>=97&&o<=122?a+=t.charAt(i):o<128?a+=r[o]:o<2048?a+=r[192|o>>6]+r[128|63&o]:o<55296||o>=57344?a+=r[224|o>>12]+r[128|o>>6&63]+r[128|63&o]:(i+=1,o=65536+((1023&o)<<10|1023&t.charCodeAt(i)),a+=r[240|o>>18]+r[128|o>>12&63]+r[128|o>>6&63]+r[128|63&o])}return a},isBuffer:function(e){return null!=e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,a,r){if(!a)return t;if("object"!=typeof a){if(Array.isArray(t))t.push(a);else{if("object"!=typeof t)return[t,a];(r.plainObjects||r.allowPrototypes||!i.call(Object.prototype,a))&&(t[a]=!0)}return t}if("object"!=typeof t)return[t].concat(a);var n=t;return Array.isArray(t)&&!Array.isArray(a)&&(n=o(t,r)),Array.isArray(t)&&Array.isArray(a)?(a.forEach(function(a,o){i.call(t,o)?t[o]&&"object"==typeof t[o]?t[o]=e(t[o],a,r):t.push(a):t[o]=a}),t):Object.keys(a).reduce(function(t,o){var n=a[o];return i.call(t,o)?t[o]=e(t[o],n,r):t[o]=n,t},n)}}},function(e,t,a){"use strict";var i=String.prototype.replace,r=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return i.call(e,r,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},function(e,t,a){"use strict";var i=a(22);e.exports=function(e){i.copy(e,this)}},function(e,t,a){"use strict";e.exports=function(e,t){t||(t={}),"function"==typeof t&&(t={cmp:t});var a,i="boolean"==typeof t.cycles&&t.cycles,r=t.cmp&&(a=t.cmp,function(e){return function(t,i){var r={key:t,value:e[t]},o={key:i,value:e[i]};return a(r,o)}}),o=[];return function e(t){if(t&&t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if("number"==typeof t)return isFinite(t)?""+t:"null";if("object"!=typeof t)return JSON.stringify(t);var a,n;if(Array.isArray(t)){for(n="[",a=0;a<t.length;a++)a&&(n+=","),n+=e(t[a])||"null";return n+"]"}if(null===t)return"null";if(-1!==o.indexOf(t)){if(i)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var s=o.push(t)-1,u=Object.keys(t).sort(r&&r(t));for(n="",a=0;a<u.length;a++){var c=u[a],p=e(t[c]);p&&(n&&(n+=","),n+=JSON.stringify(c)+":"+p)}return o.splice(s,1),"{"+n+"}"}}(e)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i="",r=!0===e.schema.$async,o=e.util.schemaHasRulesExcept(e.schema,e.RULES.all,"$ref"),n=e.self._getId(e.schema);if(e.isTop&&(i+=" var validate = ",r&&(e.async=!0,i+="async "),i+="function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ",n&&(e.opts.sourceCode||e.opts.processCode)&&(i+=" /*# sourceURL="+n+" */ ")),"boolean"==typeof e.schema||!o&&!e.schema.$ref){var s=e.level,u=e.dataLevel,c=e.schema["false schema"],p=e.schemaPath+e.util.getProperty("false schema"),l=e.errSchemaPath+"/false schema",m=!e.opts.allErrors,h="data"+(u||""),d="valid"+s;if(!1===e.schema){e.isTop?m=!0:i+=" var "+d+" = false; ",(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'false schema' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'boolean schema is false' "),e.opts.verbose&&(i+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),i+=" } "):i+=" {} ";var f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else e.isTop?i+=r?" return data; ":" validate.errors = null; return true; ":i+=" var "+d+" = true; ";return e.isTop&&(i+=" }; return validate; "),i}if(e.isTop){var g=e.isTop;s=e.level=0,u=e.dataLevel=0,h="data";e.rootId=e.resolve.fullPath(e.self._getId(e.root.schema)),e.baseId=e.baseId||e.rootId,delete e.isTop,e.dataPathArr=[void 0],i+=" var vErrors = null; ",i+=" var errors = 0;     ",i+=" if (rootData === undefined) rootData = data; "}else{s=e.level,h="data"+((u=e.dataLevel)||"");if(n&&(e.baseId=e.resolve.url(e.baseId,n)),r&&!e.async)throw new Error("async schema in sync schema");i+=" var errs_"+s+" = errors;"}d="valid"+s,m=!e.opts.allErrors;var v="",y="",b=e.schema.type,k=Array.isArray(b);if(b&&e.opts.nullable&&!0===e.schema.nullable&&(k?-1==b.indexOf("null")&&(b=b.concat("null")):"null"!=b&&(b=[b,"null"],k=!0)),k&&1==b.length&&(b=b[0],k=!1),e.schema.$ref&&o){if("fail"==e.opts.extendRefs)throw new Error('$ref: validation keywords used in schema at path "'+e.errSchemaPath+'" (see option extendRefs)');!0!==e.opts.extendRefs&&(o=!1,e.logger.warn('$ref: keywords ignored in schema at path "'+e.errSchemaPath+'"'))}if(e.schema.$comment&&e.opts.$comment&&(i+=" "+e.RULES.all.$comment.code(e,"$comment")),b){if(e.opts.coerceTypes)var j=e.util.coerceToTypes(e.opts.coerceTypes,b);var w=e.RULES.types[b];if(j||k||!0===w||w&&!W(w)){p=e.schemaPath+".type",l=e.errSchemaPath+"/type",p=e.schemaPath+".type",l=e.errSchemaPath+"/type";var x=k?"checkDataTypes":"checkDataType";if(i+=" if ("+e.util[x](b,h,!0)+") { ",j){var E="dataType"+s,S="coerced"+s;i+=" var "+E+" = typeof "+h+"; ","array"==e.opts.coerceTypes&&(i+=" if ("+E+" == 'object' && Array.isArray("+h+")) "+E+" = 'array'; "),i+=" var "+S+" = undefined; ";var _="",R=j;if(R)for(var A,C=-1,q=R.length-1;C<q;)A=R[C+=1],C&&(i+=" if ("+S+" === undefined) { ",_+="}"),"array"==e.opts.coerceTypes&&"array"!=A&&(i+=" if ("+E+" == 'array' && "+h+".length == 1) { "+S+" = "+h+" = "+h+"[0]; "+E+" = typeof "+h+";  } "),"string"==A?i+=" if ("+E+" == 'number' || "+E+" == 'boolean') "+S+" = '' + "+h+"; else if ("+h+" === null) "+S+" = ''; ":"number"==A||"integer"==A?(i+=" if ("+E+" == 'boolean' || "+h+" === null || ("+E+" == 'string' && "+h+" && "+h+" == +"+h+" ","integer"==A&&(i+=" && !("+h+" % 1)"),i+=")) "+S+" = +"+h+"; "):"boolean"==A?i+=" if ("+h+" === 'false' || "+h+" === 0 || "+h+" === null) "+S+" = false; else if ("+h+" === 'true' || "+h+" === 1) "+S+" = true; ":"null"==A?i+=" if ("+h+" === '' || "+h+" === 0 || "+h+" === false) "+S+" = null; ":"array"==e.opts.coerceTypes&&"array"==A&&(i+=" if ("+E+" == 'string' || "+E+" == 'number' || "+E+" == 'boolean' || "+h+" == null) "+S+" = ["+h+"]; ");i+=" "+_+" if ("+S+" === undefined) {   ",(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { type: '",i+=k?""+b.join(","):""+b,i+="' } ",!1!==e.opts.messages&&(i+=" , message: 'should be ",i+=k?""+b.join(","):""+b,i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),i+=" } "):i+=" {} ";f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else {  ";var O=u?"data"+(u-1||""):"parentData";i+=" "+h+" = "+S+"; ",u||(i+="if ("+O+" !== undefined)"),i+=" "+O+"["+(u?e.dataPathArr[u]:"parentDataProperty")+"] = "+S+"; } "}else{(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { type: '",i+=k?""+b.join(","):""+b,i+="' } ",!1!==e.opts.messages&&(i+=" , message: 'should be ",i+=k?""+b.join(","):""+b,i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),i+=" } "):i+=" {} ";f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}i+=" } "}}if(e.schema.$ref&&!o)i+=" "+e.RULES.all.$ref.code(e,"$ref")+" ",m&&(i+=" } if (errors === ",i+=g?"0":"errs_"+s,i+=") { ",y+="}");else{var P=e.RULES;if(P)for(var F=-1,z=P.length-1;F<z;)if(W(w=P[F+=1])){if(w.type&&(i+=" if ("+e.util.checkDataType(w.type,h)+") { "),e.opts.useDefaults&&!e.compositeRule)if("object"==w.type&&e.schema.properties){c=e.schema.properties;var T=Object.keys(c);if(T)for(var I,D=-1,B=T.length-1;D<B;){if(void 0!==(U=c[I=T[D+=1]]).default)i+="  if ("+(H=h+e.util.getProperty(I))+" === undefined ","empty"==e.opts.useDefaults&&(i+=" || "+H+" === null || "+H+" === '' "),i+=" ) "+H+" = ","shared"==e.opts.useDefaults?i+=" "+e.useDefault(U.default)+" ":i+=" "+JSON.stringify(U.default)+" ",i+="; "}}else if("array"==w.type&&Array.isArray(e.schema.items)){var L=e.schema.items;if(L){C=-1;for(var U,N=L.length-1;C<N;){var H;if(void 0!==(U=L[C+=1]).default)i+="  if ("+(H=h+"["+C+"]")+" === undefined ","empty"==e.opts.useDefaults&&(i+=" || "+H+" === null || "+H+" === '' "),i+=" ) "+H+" = ","shared"==e.opts.useDefaults?i+=" "+e.useDefault(U.default)+" ":i+=" "+JSON.stringify(U.default)+" ",i+="; "}}}var M=w.rules;if(M)for(var K,$=-1,G=M.length-1;$<G;)if(Y(K=M[$+=1])){var V=K.code(e,K.keyword,w.type);V&&(i+=" "+V+" ",m&&(v+="}"))}if(m&&(i+=" "+v+" ",v=""),w.type&&(i+=" } ",b&&b===w.type&&!j)){i+=" else { ";var Q;p=e.schemaPath+".type",l=e.errSchemaPath+"/type";(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { type: '",i+=k?""+b.join(","):""+b,i+="' } ",!1!==e.opts.messages&&(i+=" , message: 'should be ",i+=k?""+b.join(","):""+b,i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),i+=" } "):i+=" {} ";f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } "}m&&(i+=" if (errors === ",i+=g?"0":"errs_"+s,i+=") { ",y+="}")}}function W(e){for(var t=e.rules,a=0;a<t.length;a++)if(Y(t[a]))return!0}function Y(t){return void 0!==e.schema[t.keyword]||t.implements&&function(t){for(var a=t.implements,i=0;i<a.length;i++)if(void 0!==e.schema[a[i]])return!0}(t)}return m&&(i+=" "+y+" "),g?(r?(i+=" if (errors === 0) return data;           ",i+=" else throw new ValidationError(vErrors); "):(i+=" validate.errors = vErrors; ",i+=" return errors === 0;       "),i+=" }; return validate;"):i+=" var "+d+" = errors === errs_"+s+";",i=e.util.cleanUpCode(i),g&&(i=e.util.finalCleanUpCode(i,r)),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s;var h="maximum"==t,d=h?"exclusiveMaximum":"exclusiveMinimum",f=e.schema[d],g=e.opts.$data&&f&&f.$data,v=h?"<":">",y=h?">":"<",b=void 0;if(g){var k=e.util.getData(f.$data,n,e.dataPathArr),j="exclusive"+o,w="exclType"+o,x="exclIsNumber"+o,E="' + "+(R="op"+o)+" + '";r+=" var schemaExcl"+o+" = "+k+"; ",r+=" var "+j+"; var "+w+" = typeof "+(k="schemaExcl"+o)+"; if ("+w+" != 'boolean' && "+w+" != 'undefined' && "+w+" != 'number') { ";var S;b=d;(S=S||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: '"+(b||"_exclusiveLimit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: {} ",!1!==e.opts.messages&&(r+=" , message: '"+d+" should be boolean' "),e.opts.verbose&&(r+=" , schema: validate.schema"+u+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var _=r;r=S.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+_+"]); ":r+=" validate.errors = ["+_+"]; return false; ":r+=" var err = "+_+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } else if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),r+=" "+w+" == 'number' ? ( ("+j+" = "+i+" === undefined || "+k+" "+v+"= "+i+") ? "+l+" "+y+"= "+k+" : "+l+" "+y+" "+i+" ) : ( ("+j+" = "+k+" === true) ? "+l+" "+y+"= "+i+" : "+l+" "+y+" "+i+" ) || "+l+" !== "+l+") { var op"+o+" = "+j+" ? '"+v+"' : '"+v+"='; ",void 0===s&&(b=d,c=e.errSchemaPath+"/"+d,i=k,m=g)}else{E=v;if((x="number"==typeof f)&&m){var R="'"+E+"'";r+=" if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),r+=" ( "+i+" === undefined || "+f+" "+v+"= "+i+" ? "+l+" "+y+"= "+f+" : "+l+" "+y+" "+i+" ) || "+l+" !== "+l+") { "}else{x&&void 0===s?(j=!0,b=d,c=e.errSchemaPath+"/"+d,i=f,y+="="):(x&&(i=Math[h?"min":"max"](f,s)),f===(!x||i)?(j=!0,b=d,c=e.errSchemaPath+"/"+d,y+="="):(j=!1,E+="="));R="'"+E+"'";r+=" if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),r+=" "+l+" "+y+" "+i+" || "+l+" !== "+l+") { "}}b=b||t,(S=S||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: '"+(b||"_limit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { comparison: "+R+", limit: "+i+", exclusive: "+j+" } ",!1!==e.opts.messages&&(r+=" , message: 'should be "+E+" ",r+=m?"' + "+i:i+"'"),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";_=r;return r=S.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+_+"]); ":r+=" validate.errors = ["+_+"]; return false; ":r+=" var err = "+_+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s,r+="if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),r+=" "+l+".length "+("maxItems"==t?">":"<")+" "+i+") { ";var h=t,d=d||[];d.push(r),r="",!1!==e.createErrors?(r+=" { keyword: '"+(h||"_limitItems")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { limit: "+i+" } ",!1!==e.opts.messages&&(r+=" , message: 'should NOT have ",r+="maxItems"==t?"more":"fewer",r+=" than ",r+=m?"' + "+i+" + '":""+s,r+=" items' "),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var f=r;return r=d.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+f+"]); ":r+=" validate.errors = ["+f+"]; return false; ":r+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+="} ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s;var h="maxLength"==t?">":"<";r+="if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),!1===e.opts.unicode?r+=" "+l+".length ":r+=" ucs2length("+l+") ",r+=" "+h+" "+i+") { ";var d=t,f=f||[];f.push(r),r="",!1!==e.createErrors?(r+=" { keyword: '"+(d||"_limitLength")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { limit: "+i+" } ",!1!==e.opts.messages&&(r+=" , message: 'should NOT be ",r+="maxLength"==t?"longer":"shorter",r+=" than ",r+=m?"' + "+i+" + '":""+s,r+=" characters' "),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var g=r;return r=f.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+g+"]); ":r+=" validate.errors = ["+g+"]; return false; ":r+=" var err = "+g+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+="} ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s,r+="if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),r+=" Object.keys("+l+").length "+("maxProperties"==t?">":"<")+" "+i+") { ";var h=t,d=d||[];d.push(r),r="",!1!==e.createErrors?(r+=" { keyword: '"+(h||"_limitProperties")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { limit: "+i+" } ",!1!==e.opts.messages&&(r+=" , message: 'should NOT have ",r+="maxProperties"==t?"more":"fewer",r+=" than ",r+=m?"' + "+i+" + '":""+s,r+=" properties' "),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var f=r;return r=d.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+f+"]); ":r+=" validate.errors = ["+f+"]; return false; ":r+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+="} ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";var i=a(237),r=a(8),o=a(10);function n(e){var t=(e.path_prefix?e.path_prefix:"")+"/plugins/servlet";if(!e.host)throw new Error(o.NO_HOST_ERROR);if(!e.oauth.consumer_key)throw new Error(o.NO_CONSUMER_KEY_ERROR);if(!e.oauth.private_key)throw new Error(o.NO_PRIVATE_KEY_ERROR);var a=e.oauth.consumer_key,n=e.oauth.private_key,s=r.format({protocol:e.protocol?e.protocol:"https",hostname:e.host,port:e.port?e.port:null,pathname:t+"/oauth/request-token"}),u=r.format({protocol:e.protocol?e.protocol:"https",hostname:e.host,port:e.port?e.port:null,pathname:t+"/oauth/access-token"}),c=e.oauth.callback_url?e.oauth.callback_url:"oob";return new i.OAuth(s,u,a,n,"1.0",c,"RSA-SHA1")}t.getAuthorizeURL=function(e,t){var a=(e.path_prefix?e.path_prefix:"")+"/plugins/servlet",i=r.format({protocol:e.protocol?e.protocol:"https",hostname:e.host,port:e.port?e.port:null,pathname:a+"/oauth/authorize"});n(e).getOAuthRequestToken(function(e,a,r){return e?t(e):t(null,{url:i+"?oauth_token="+a,token:a,token_secret:r})})},t.swapRequestTokenWithAccessToken=function(e,t){if(!e.oauth.oauth_verifier)throw new Error(o.NO_VERIFIER_ERROR);var a=n(e),i=e.oauth.token,r=e.oauth.token_secret,s=e.oauth.oauth_verifier;a.getOAuthAccessToken(i,r,s,t)}},function(e,t,a){var i=a(2),r=a(238),o=a(18),n=a(19),s=a(8),u=a(24),c=a(84);t.OAuth=function(e,t,a,i,r,o,n,s,u){if(this._isEcho=!1,this._requestUrl=e,this._accessUrl=t,this._consumerKey=a,this._consumerSecret=this._encodeData(i),"RSA-SHA1"==n&&(this._privateKey=i),this._version=r,this._authorize_callback=void 0===o?"oob":o,"PLAINTEXT"!=n&&"HMAC-SHA1"!=n&&"RSA-SHA1"!=n)throw new Error("Un-supported signature method: "+n);this._signatureMethod=n,this._nonceSize=s||32,this._headers=u||{Accept:"*/*",Connection:"close","User-Agent":"Node authentication"},this._clientOptions=this._defaultClientOptions={requestTokenHttpMethod:"POST",accessTokenHttpMethod:"POST",followRedirects:!0},this._oauthParameterSeperator=","},t.OAuthEcho=function(e,t,a,i,r,o,n,s){if(this._isEcho=!0,this._realm=e,this._verifyCredentials=t,this._consumerKey=a,this._consumerSecret=this._encodeData(i),"RSA-SHA1"==o&&(this._privateKey=i),this._version=r,"PLAINTEXT"!=o&&"HMAC-SHA1"!=o&&"RSA-SHA1"!=o)throw new Error("Un-supported signature method: "+o);this._signatureMethod=o,this._nonceSize=n||32,this._headers=s||{Accept:"*/*",Connection:"close","User-Agent":"Node authentication"},this._oauthParameterSeperator=","},t.OAuthEcho.prototype=t.OAuth.prototype,t.OAuth.prototype._getTimestamp=function(){return Math.floor((new Date).getTime()/1e3)},t.OAuth.prototype._encodeData=function(e){return null==e||""==e?"":encodeURIComponent(e).replace(/\!/g,"%21").replace(/\'/g,"%27").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/\*/g,"%2A")},t.OAuth.prototype._decodeData=function(e){return null!=e&&(e=e.replace(/\+/g," ")),decodeURIComponent(e)},t.OAuth.prototype._getSignature=function(e,t,a,i){var r=this._createSignatureBase(e,t,a);return this._createSignature(r,i)},t.OAuth.prototype._normalizeUrl=function(e){var t=s.parse(e,!0),a="";return t.port&&("http:"==t.protocol&&"80"!=t.port||"https:"==t.protocol&&"443"!=t.port)&&(a=":"+t.port),t.pathname&&""!=t.pathname||(t.pathname="/"),t.protocol+"//"+t.hostname+a+t.pathname},t.OAuth.prototype._isParameterNameAnOAuthParameter=function(e){var t=e.match("^oauth_");return!(!t||"oauth_"!==t[0])},t.OAuth.prototype._buildAuthorizationHeaders=function(e){var t="OAuth ";this._isEcho&&(t+='realm="'+this._realm+'",');for(var a=0;a<e.length;a++)this._isParameterNameAnOAuthParameter(e[a][0])&&(t+=this._encodeData(e[a][0])+'="'+this._encodeData(e[a][1])+'"'+this._oauthParameterSeperator);return t=t.substring(0,t.length-this._oauthParameterSeperator.length)},t.OAuth.prototype._makeArrayOfArgumentsHash=function(e){var t=[];for(var a in e)if(e.hasOwnProperty(a)){var i=e[a];if(Array.isArray(i))for(var r=0;r<i.length;r++)t[t.length]=[a,i[r]];else t[t.length]=[a,i]}return t},t.OAuth.prototype._sortRequestParams=function(e){return e.sort(function(e,t){return e[0]==t[0]?e[1]<t[1]?-1:1:e[0]<t[0]?-1:1}),e},t.OAuth.prototype._normaliseRequestParams=function(e){for(var t=this._makeArrayOfArgumentsHash(e),a=0;a<t.length;a++)t[a][0]=this._encodeData(t[a][0]),t[a][1]=this._encodeData(t[a][1]);t=this._sortRequestParams(t);for(e="",a=0;a<t.length;a++)e+=t[a][0],e+="=",e+=t[a][1],a<t.length-1&&(e+="&");return e},t.OAuth.prototype._createSignatureBase=function(e,t,a){return t=this._encodeData(this._normalizeUrl(t)),a=this._encodeData(a),e.toUpperCase()+"&"+t+"&"+a},t.OAuth.prototype._createSignature=function(e,t){if(void 0===t)t="";else t=this._encodeData(t);var a=this._consumerSecret+"&"+t,o="";return"PLAINTEXT"==this._signatureMethod?o=a:"RSA-SHA1"==this._signatureMethod?(a=this._privateKey||"",o=i.createSign("RSA-SHA1").update(e).sign(a,"base64")):o=i.Hmac?i.createHmac("sha1",a).update(e).digest("base64"):r.HMACSHA1(a,e),o},t.OAuth.prototype.NONCE_CHARS=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","0","1","2","3","4","5","6","7","8","9"],t.OAuth.prototype._getNonce=function(e){for(var t,a=[],i=this.NONCE_CHARS,r=i.length,o=0;o<e;o++)t=Math.floor(Math.random()*r),a[o]=i[t];return a.join("")},t.OAuth.prototype._createClient=function(e,t,a,i,r,s){var u={host:t,port:e,path:i,method:a,headers:r};return(s?n:o).request(u)},t.OAuth.prototype._prepareParameters=function(e,t,a,i,r){var o,n={oauth_timestamp:this._getTimestamp(),oauth_nonce:this._getNonce(this._nonceSize),oauth_version:this._version,oauth_signature_method:this._signatureMethod,oauth_consumer_key:this._consumerKey};if(e&&(n.oauth_token=e),this._isEcho)o=this._getSignature("GET",this._verifyCredentials,this._normaliseRequestParams(n),t);else{if(r)for(var c in r)r.hasOwnProperty(c)&&(n[c]=r[c]);var p=s.parse(i,!1);if(p.query){var l,m=u.parse(p.query);for(var c in m){var h=m[c];if("object"==typeof h)for(l in h)n[c+"["+l+"]"]=h[l];else n[c]=h}}o=this._getSignature(a,i,this._normaliseRequestParams(n),t)}var d=this._sortRequestParams(this._makeArrayOfArgumentsHash(n));return d[d.length]=["oauth_signature",o],d},t.OAuth.prototype._performSecureRequest=function(e,t,a,i,r,o,n,p){var l=this._prepareParameters(e,t,a,i,r);n||(n="application/x-www-form-urlencoded");var m=s.parse(i,!1);"http:"!=m.protocol||m.port||(m.port=80),"https:"!=m.protocol||m.port||(m.port=443);var h,d,f={},g=this._buildAuthorizationHeaders(l);for(var v in this._isEcho?f["X-Verify-Credentials-Authorization"]=g:f.Authorization=g,f.Host=m.host,this._headers)this._headers.hasOwnProperty(v)&&(f[v]=this._headers[v]);for(var v in r)this._isParameterNameAnOAuthParameter(v)&&delete r[v];"POST"!=a&&"PUT"!=a||null!=o||null==r||(o=u.stringify(r).replace(/\!/g,"%21").replace(/\'/g,"%27").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/\*/g,"%2A")),o?Buffer.isBuffer(o)?f["Content-length"]=o.length:f["Content-length"]=Buffer.byteLength(o):f["Content-length"]=0,f["Content-Type"]=n,m.pathname&&""!=m.pathname||(m.pathname="/"),h=m.query?m.pathname+"?"+m.query:m.pathname,d="https:"==m.protocol?this._createClient(m.port,m.hostname,a,h,f,!0):this._createClient(m.port,m.hostname,a,h,f);var y=this._clientOptions;if(!p)return"POST"!=a&&"PUT"!=a||null==o||""==o||d.write(o),d;var b="",k=this,j=c.isAnEarlyCloseHost(m.hostname),w=!1,x=function(i){w||(w=!0,i.statusCode>=200&&i.statusCode<=299?p(null,b,i):(301==i.statusCode||302==i.statusCode)&&y.followRedirects&&i.headers&&i.headers.location?k._performSecureRequest(e,t,a,i.headers.location,r,o,n,p):p({statusCode:i.statusCode,data:b},b,i))};d.on("response",function(e){e.setEncoding("utf8"),e.on("data",function(e){b+=e}),e.on("end",function(){x(e)}),e.on("close",function(){j&&x(e)})}),d.on("error",function(e){w||(w=!0,p(e))}),"POST"!=a&&"PUT"!=a||null==o||""==o||d.write(o),d.end()},t.OAuth.prototype.setClientOptions=function(e){var t,a={},i=Object.prototype.hasOwnProperty;for(t in this._defaultClientOptions)i.call(e,t)?a[t]=e[t]:a[t]=this._defaultClientOptions[t];this._clientOptions=a},t.OAuth.prototype.getOAuthAccessToken=function(e,t,a,i){var r={};"function"==typeof a?i=a:r.oauth_verifier=a,this._performSecureRequest(e,t,this._clientOptions.accessTokenHttpMethod,this._accessUrl,r,null,null,function(e,t,a){if(e)i(e);else{var r=u.parse(t),o=r.oauth_token;delete r.oauth_token;var n=r.oauth_token_secret;delete r.oauth_token_secret,i(null,o,n,r)}})},t.OAuth.prototype.getProtectedResource=function(e,t,a,i,r){this._performSecureRequest(a,i,t,e,null,"",null,r)},t.OAuth.prototype.delete=function(e,t,a,i){return this._performSecureRequest(t,a,"DELETE",e,null,"",null,i)},t.OAuth.prototype.get=function(e,t,a,i){return this._performSecureRequest(t,a,"GET",e,null,"",null,i)},t.OAuth.prototype._putOrPost=function(e,t,a,i,r,o,n){var s=null;return"function"==typeof o&&(n=o,o=null),"string"==typeof r||Buffer.isBuffer(r)||(o="application/x-www-form-urlencoded",s=r,r=null),this._performSecureRequest(a,i,e,t,s,r,o,n)},t.OAuth.prototype.put=function(e,t,a,i,r,o){return this._putOrPost("PUT",e,t,a,i,r,o)},t.OAuth.prototype.post=function(e,t,a,i,r,o){return this._putOrPost("POST",e,t,a,i,r,o)},t.OAuth.prototype.getOAuthRequestToken=function(e,t){"function"==typeof e&&(t=e,e={}),this._authorize_callback&&(e.oauth_callback=this._authorize_callback),this._performSecureRequest(null,null,this._clientOptions.requestTokenHttpMethod,this._requestUrl,e,null,null,function(e,a,i){if(e)t(e);else{var r=u.parse(a),o=r.oauth_token,n=r.oauth_token_secret;delete r.oauth_token,delete r.oauth_token_secret,t(null,o,n,r)}})},t.OAuth.prototype.signUrl=function(e,t,a,i){if(void 0===i)i="GET";for(var r=this._prepareParameters(t,a,i,e,{}),o=s.parse(e,!1),n="",u=0;u<r.length;u++)n+=r[u][0]+"="+this._encodeData(r[u][1])+"&";return n=n.substring(0,n.length-1),o.protocol+"//"+o.host+o.pathname+"?"+n},t.OAuth.prototype.authHeader=function(e,t,a,i){if(void 0===i)i="GET";var r=this._prepareParameters(t,a,i,e,{});return this._buildAuthorizationHeaders(r)}},function(e,t){e.exports.isAnEarlyCloseHost=function(e){return e&&e.match(".*google(apis)?.com$")}},function(e,t,a){var i=a(94),r=a(95),o=a(13),n=a(96),s=a(1);function u(e,t){t||(t={}),e=n(e);var u=function(e){var t=[],a=!0,i={};Object.keys(e).forEach(function(a){t.push([].concat(e[a],a))});for(;a;){a=!1;for(var r=0;r<t.length;r++)for(var o=r+1;o<t.length;o++){var n=t[r].filter(function(e){return-1!==t[o].indexOf(e)});if(n.length){t[r]=t[r].concat(t[o]),t.splice(o,1),a=!0;break}}}return t.forEach(function(e){e=e.filter(function(e,t,a){return a.indexOf(e)===t}),i[e.pop()]=e}),i}(t.alias||{}),p=function(e,t){var a={};return t=t||{},Object.keys(e).forEach(function(t){a[t]=e[t]}),Object.keys(t).forEach(function(e){a[e]=t[e]}),a}({"short-option-groups":!0,"camel-case-expansion":!0,"dot-notation":!0,"parse-numbers":!0,"boolean-negation":!0,"negation-prefix":"no-","duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"populate--":!1,"combine-arrays":!1,"set-placeholder-key":!1,"halt-at-non-option":!1},t.configuration),l=t.default||{},m=t.configObjects||[],h=t.envPrefix,d=p["populate--"],f=d?"--":"_",g={},v=t.__||function(e){return s.format.apply(s,Array.prototype.slice.call(arguments))},y=null,b={aliases:{},arrays:{},bools:{},strings:{},numbers:{},counts:{},normalize:{},configs:{},defaulted:{},nargs:{},coercions:{},keys:[]},k=/^-[0-9]+(\.[0-9]+)?/,j=new RegExp("^--"+p["negation-prefix"]+"(.+)");[].concat(t.array).filter(Boolean).forEach(function(e){var t=e.key||e;const a=Object.keys(e).map(function(e){return{boolean:"bools",string:"strings",number:"numbers"}[e]}).filter(Boolean).pop();a&&(b[a][t]=!0),b.arrays[t]=!0,b.keys.push(t)}),[].concat(t.boolean).filter(Boolean).forEach(function(e){b.bools[e]=!0,b.keys.push(e)}),[].concat(t.string).filter(Boolean).forEach(function(e){b.strings[e]=!0,b.keys.push(e)}),[].concat(t.number).filter(Boolean).forEach(function(e){b.numbers[e]=!0,b.keys.push(e)}),[].concat(t.count).filter(Boolean).forEach(function(e){b.counts[e]=!0,b.keys.push(e)}),[].concat(t.normalize).filter(Boolean).forEach(function(e){b.normalize[e]=!0,b.keys.push(e)}),Object.keys(t.narg||{}).forEach(function(e){b.nargs[e]=t.narg[e],b.keys.push(e)}),Object.keys(t.coerce||{}).forEach(function(e){b.coercions[e]=t.coerce[e],b.keys.push(e)}),Array.isArray(t.config)||"string"==typeof t.config?[].concat(t.config).filter(Boolean).forEach(function(e){b.configs[e]=!0}):Object.keys(t.config||{}).forEach(function(e){b.configs[e]=t.config[e]}),function(){Array.prototype.slice.call(arguments).forEach(function(e){Object.keys(e||{}).forEach(function(e){b.aliases[e]||(b.aliases[e]=[].concat(u[e]||[]),b.aliases[e].concat(e).forEach(function(t){if(/-/.test(t)&&p["camel-case-expansion"]){var a=i(t);a!==e&&-1===b.aliases[e].indexOf(a)&&(b.aliases[e].push(a),g[a]=!0)}}),b.aliases[e].concat(e).forEach(function(t){if(t.length>1&&/[A-Z]/.test(t)&&p["camel-case-expansion"]){var a=r(t,"-");a!==e&&-1===b.aliases[e].indexOf(a)&&(b.aliases[e].push(a),g[a]=!0)}}),b.aliases[e].forEach(function(t){b.aliases[t]=[e].concat(b.aliases[e].filter(function(e){return t!==e}))}))})})}(t.key,u,t.default,b.arrays),Object.keys(l).forEach(function(e){(b.aliases[e]||[]).forEach(function(t){l[t]=l[e]})});var w={_:[]};Object.keys(b.bools).forEach(function(e){Object.prototype.hasOwnProperty.call(l,e)&&(T(e,l[e]),function(e){[].concat(b.aliases[e]||[],e).forEach(function(e){b.defaulted[e]=!0})}(e))});for(var x=[],E=0;E<e.length;E++){var S,_,R,A,C,q,O=e[E];if(O.match(/^--.+=/)||!p["short-option-groups"]&&O.match(/^-.+=/))M((A=O.match(/^--?([^=]+)=([\s\S]*)$/))[1],b.nargs)?(e.splice(E+1,0,A[2]),E=F(E,A[1],e)):M(A[1],b.arrays)&&e.length>E+1?(e.splice(E+1,0,A[2]),E=z(E,A[1],e)):T(A[1],A[2]);else if(O.match(j)&&p["boolean-negation"])T(_=O.match(j)[1],!1);else if(O.match(/^--.+/)||!p["short-option-groups"]&&O.match(/^-.+/))M(_=O.match(/^--?(.+)/)[1],b.nargs)?E=F(E,_,e):M(_,b.arrays)&&e.length>E+1?E=z(E,_,e):void 0===(C=e[E+1])||C.match(/^-/)&&!C.match(k)||M(_,b.bools)||M(_,b.counts)?/^(true|false)$/.test(C)?(T(_,C),E++):T(_,K(_)):(T(_,C),E++);else if(O.match(/^-.\..+=/))T((A=O.match(/^-([^=]+)=([\s\S]*)$/))[1],A[2]);else if(O.match(/^-.\..+/))C=e[E+1],_=O.match(/^-(.\..+)/)[1],void 0===C||C.match(/^-/)||M(_,b.bools)||M(_,b.counts)?T(_,K(_)):(T(_,C),E++);else if(O.match(/^-[^-]+/)&&!O.match(k)){R=O.slice(1,-1).split(""),S=!1;for(var P=0;P<R.length;P++){if(C=O.slice(P+2),R[P+1]&&"="===R[P+1]){q=O.slice(P+3),M(_=R[P],b.nargs)?(e.splice(E+1,0,q),E=F(E,_,e)):M(_,b.arrays)&&e.length>E+1?(e.splice(E+1,0,q),E=z(E,_,e)):T(_,q),S=!0;break}if("-"!==C){if(/[A-Za-z]/.test(R[P])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(C)){T(R[P],C),S=!0;break}if(R[P+1]&&R[P+1].match(/\W/)){T(R[P],C),S=!0;break}T(R[P],K(R[P]))}else T(R[P],C)}_=O.slice(-1)[0],S||"-"===_||(M(_,b.nargs)?E=F(E,_,e):M(_,b.arrays)&&e.length>E+1?E=z(E,_,e):void 0===(C=e[E+1])||/^(-|--)[^-]/.test(C)&&!C.match(k)||M(_,b.bools)||M(_,b.counts)?/^(true|false)$/.test(C)?(T(_,C),E++):T(_,K(_)):(T(_,C),E++))}else{if("--"===O){x=e.slice(E+1);break}if(p["halt-at-non-option"]){x=e.slice(E);break}w._.push(D("_",O))}}function F(e,t,a){var i;const r=M(t,b.nargs);var o=0;for(i=e+1;i<a.length&&!a[i].match(/^-[^0-9]/);i++)o++;o<r&&(y=Error(v("Not enough arguments following: %s",t)));const n=Math.min(o,r);for(i=e+1;i<n+e+1;i++)T(t,a[i]);return e+n}function z(e,t,a){for(var i=e+1,r=[],o=e>0,n=e+1;n<a.length;n++){if(/^-/.test(a[n])&&!k.test(a[n])){n===i&&T(t,$("array")),o=!0;break}e=n,r.push(a[n])}return o?T(t,r.map(function(e){return I(t,e)})):r.forEach(function(e){T(t,e)}),e}function T(e,t){if(function(e){[].concat(b.aliases[e]||[],e).forEach(function(e){delete b.defaulted[e]})}(e),/-/.test(e)&&p["camel-case-expansion"]){var a=e.split(".").map(function(e){return i(e)}).join(".");!function e(t,a){b.aliases[t]&&b.aliases[t].length||(b.aliases[t]=[a],g[a]=!0);b.aliases[a]&&b.aliases[a].length||e(a,t)}(e,a)}var r=I(e,t),n=e.split(".");(H(w,n,r),b.aliases[e]&&b.aliases[e].forEach(function(e){e=e.split("."),H(w,e,r)}),n.length>1&&p["dot-notation"]&&(b.aliases[n[0]]||[]).forEach(function(e){e=e.split(".");var t=[].concat(n);t.shift(),e=e.concat(t),H(w,e,r)}),M(e,b.normalize)&&!M(e,b.arrays))&&[e].concat(b.aliases[e]||[]).forEach(function(e){w.__defineSetter__(e,function(e){t=o.normalize(e)}),w.__defineGetter__(e,function(){return"string"==typeof t?o.normalize(t):t})})}function I(e,t){"string"!=typeof t||"'"!==t[0]&&'"'!==t[0]||t[t.length-1]!==t[0]||(t=t.substring(1,t.length-1)),(M(e,b.bools)||M(e,b.counts))&&"string"==typeof t&&(t="true"===t);var a=D(e,t);return M(e,b.counts)&&(G(a)||"boolean"==typeof a)&&(a=c),M(e,b.normalize)&&M(e,b.arrays)&&(a=Array.isArray(t)?t.map(o.normalize):o.normalize(t)),a}function D(e,t){if(!M(e,b.strings)&&!M(e,b.coercions)){(null!=(a=t)&&("number"==typeof a||!!/^0x[0-9a-f]+$/i.test(a)||!(a.length>1&&"0"===a[0])&&/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(a))&&p["parse-numbers"]&&Number.isSafeInteger(Math.floor(t))||!G(t)&&M(e,b.numbers))&&(t=Number(t))}var a;return t}function B(e,t){Object.keys(e).forEach(function(a){var i=e[a],r=t?t+"."+a:a;"object"==typeof i&&null!==i&&!Array.isArray(i)&&p["dot-notation"]?B(i,r):(!N(w,r.split("."))||b.defaulted[r]||b.arrays[r]&&p["combine-arrays"])&&T(r,i)})}function L(e,t){if(void 0!==h){var a="string"==typeof h?h:"";Object.keys(process.env).forEach(function(r){if(""===a||0===r.lastIndexOf(a,0)){var o=r.split("__").map(function(e,t){return 0===t&&(e=e.substring(a.length)),i(e)});!(t&&b.configs[o.join(".")]||!t)||N(e,o)&&!b.defaulted[o.join(".")]||T(o.join("."),process.env[r])}})}}function U(e,t,a){Object.keys(a).forEach(function(i){N(e,i.split("."))||(H(e,i.split("."),a[i]),(t[i]||[]).forEach(function(t){N(e,t.split("."))||H(e,t.split("."),a[i])}))})}function N(e,t){var a=e;p["dot-notation"]||(t=[t.join(".")]),t.slice(0,-1).forEach(function(e){a=a[e]||{}});var i=t[t.length-1];return"object"==typeof a&&i in a}function H(e,t,a){var i=e;p["dot-notation"]||(t=[t.join(".")]),t.slice(0,-1).forEach(function(e,t){"object"==typeof i&&void 0===i[e]&&(i[e]={}),"object"!=typeof i[e]||Array.isArray(i[e])?(Array.isArray(i[e])?i[e].push({}):i[e]=[i[e],{}],i=i[e][i[e].length-1]):i=i[e]});var r=t[t.length-1],o=M(t.join("."),b.arrays),n=Array.isArray(a),s=p["duplicate-arguments-array"];a===c?i[r]=c(i[r]):Array.isArray(i[r])?s&&o&&n?i[r]=p["flatten-duplicate-arrays"]?i[r].concat(a):(Array.isArray(i[r][0])?i[r]:[i[r]]).concat([a]):s||Boolean(o)!==Boolean(n)?i[r]=i[r].concat([a]):i[r]=a:void 0===i[r]&&o?i[r]=n?a:[a]:s&&!(void 0===i[r]||M(r,b.bools)||M(t.join("."),b.bools)||M(r,b.counts))?i[r]=[i[r],a]:i[r]=a}function M(e,t){var a=!1;return[].concat(b.aliases[e]||[],e).forEach(function(e){t[e]&&(a=t[e])}),a}function K(e){return!M(e,b.bools)&&!M(e,b.counts)&&`${e}`in l?l[e]:$(function(e){var t="boolean";M(e,b.strings)?t="string":M(e,b.numbers)?t="number":M(e,b.arrays)&&(t="array");return t}(e))}function $(e){return{boolean:!0,string:"",number:void 0,array:[]}[e]}function G(e){return void 0===e}return L(w,!0),L(w,!1),function(e){var t={};U(t,b.aliases,l),Object.keys(b.configs).forEach(function(i){var r=e[i]||t[i];if(r)try{var n=null,s=o.resolve(process.cwd(),r);if("function"==typeof b.configs[i]){try{n=b.configs[i](s)}catch(e){n=e}if(n instanceof Error)return void(y=n)}else n=a(97)(s);B(n)}catch(t){e[i]&&(y=Error(v("Invalid JSON config file: %s",r)))}})}(w),function(){if(void 0===m)return;m.forEach(function(e){B(e)})}(),U(w,b.aliases,l),function(e){var t,a={};Object.keys(e).forEach(function(i){if(!a.hasOwnProperty(i)&&"function"==typeof(t=M(i,b.coercions)))try{var r=t(e[i]);[].concat(b.aliases[i]||[],i).forEach(t=>{a[t]=e[t]=r})}catch(e){y=e}})}(w),p["set-placeholder-key"]&&function(e){b.keys.forEach(t=>{~t.indexOf(".")||void 0===e[t]&&(e[t]=void 0)})}(w),Object.keys(b.counts).forEach(function(e){N(w,e.split("."))||T(e,0)}),d&&x.length&&(w[f]=[]),x.forEach(function(e){w[f].push(e)}),{argv:w,error:y,aliases:b.aliases,newAliases:g,configuration:p}}function c(e){return void 0!==e?e+1:1}function p(e,t){return u(e.slice(),t).argv}p.detailed=function(e,t){return u(e.slice(),t)},e.exports=p},function(e,t,a){"use strict";var i=a(8),r=a(98),o=a(212),n=a(213),s=a(214),u=a(215),c=a(216),p=a(217),l=a(218),m=a(219),h=a(220),d=a(221),f=a(10),g=a(222),v=a(223),y=a(224),b=a(225),k=a(226),j=a(227),w=a(228),x=a(229),E=a(230),S=a(231),_=a(232),R=a(233),A=a(234),C=a(235),q=a(236),O=a(82),P=a(240),F=a(241),z=a(242),T=a(243),I=a(244),D=a(245),B=a(246),L=a(247),U=a(248),N=a(249),H=a(250),M=a(251),K=a(252),$=a(253),G=a(254),V=a(255),Q=a(256),W=a(257),Y=a(258),Z=a(259),J=a(260),X=a(261),ee=a(262),te=a(263),ae=e.exports=function(e){if(!e.host)throw new Error(f.NO_HOST_ERROR);if(this.host=e.host,this.protocol=e.protocol?e.protocol:"https",this.path_prefix=e.path_prefix?e.path_prefix:"/",this.port=e.port,this.apiVersion=2,this.agileApiVersion="1.0",this.authApiVersion="1",this.webhookApiVersion="1.0",this.promise=e.promise||Promise,this.requestLib=e.request||r,this.rejectUnauthorized=e.rejectUnauthorized,e.oauth){if(!e.oauth.consumer_key)throw new Error(f.NO_CONSUMER_KEY_ERROR);if(!e.oauth.private_key)throw new Error(f.NO_PRIVATE_KEY_ERROR);if(!e.oauth.token)throw new Error(f.NO_OAUTH_TOKEN_ERROR);if(!e.oauth.token_secret)throw new Error(f.NO_OAUTH_TOKEN_SECRET_ERROR);this.oauthConfig=e.oauth,this.oauthConfig.signature_method="RSA-SHA1"}else if(e.basic_auth)if(e.basic_auth.base64)this.basic_auth={base64:e.basic_auth.base64};else{if(!e.basic_auth.username)throw new Error(f.NO_USERNAME_ERROR);if(!e.basic_auth.password)throw new Error(f.NO_PASSWORD_ERROR);this.basic_auth={user:e.basic_auth.username,pass:e.basic_auth.password}}e.cookie_jar&&(this.cookie_jar=e.cookie_jar),this.applicationProperties=new o(this),this.attachment=new n(this),this.auditing=new s(this),this.auth=new u(this),this.avatar=new c(this),this.board=new p(this),this.comment=new l(this),this.component=new m(this),this.customFieldOption=new h(this),this.dashboard=new d(this),this.field=new g(this),this.filter=new v(this),this.group=new y(this),this.groupUserPicker=new b(this),this.groups=new k(this),this.issue=new j(this),this.issueLink=new w(this),this.issueLinkType=new x(this),this.issueType=new E(this),this.jql=new S(this),this.licenseRole=new _(this),this.licenseValidator=new R(this),this.myPermissions=new A(this),this.myPreferences=new C(this),this.myself=new q(this),this.password=new P(this),this.permissions=new F(this),this.permissionScheme=new z(this),this.priority=new T(this),this.project=new I(this),this.projectCategory=new D(this),this.projectValidate=new B(this),this.reindex=new L(this),this.resolution=new U(this),this.roles=new N(this),this.screens=new H(this),this.search=new M(this),this.securityLevel=new K(this),this.serverInfo=new $(this),this.settings=new G(this),this.sprint=new V(this),this.status=new Q(this),this.statusCategory=new W(this),this.user=new Y(this),this.version=new Z(this),this.webhook=new J(this),this.workflow=new X(this),this.workflowScheme=new ee(this),this.worklog=new te(this)};(function(){this.buildURL=function(e){var t=this.path_prefix+"rest/api/",a=this.apiVersion,r=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+a+e});return decodeURIComponent(r)},this.buildAgileURL=function(e){var t=this.path_prefix+"rest/agile/",a=this.agileApiVersion,r=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+a+e});return decodeURIComponent(r)},this.buildAuthURL=function(e){var t=this.path_prefix+"rest/auth/",a=this.authApiVersion,r=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+a+e});return decodeURIComponent(r)},this.buildWebhookURL=function(e){var t=this.path_prefix+"rest/webhooks/",a=this.webhookApiVersion,r=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+a+e});return decodeURIComponent(r)},this.makeRequest=function(e,t,a){let i=this.requestLib;if(e.rejectUnauthorized=this.rejectUnauthorized,this.oauthConfig?e.oauth=this.oauthConfig:this.basic_auth&&(this.basic_auth.base64?(e.headers||(e.headers={}),e.headers.Authorization="Basic "+this.basic_auth.base64):e.auth=this.basic_auth),this.cookie_jar&&(e.jar=this.cookie_jar),t)i(e,function(e,i,r){if(e||2!=i.statusCode.toString()[0])return t(e||r,null,i);if("string"==typeof r)try{r=JSON.parse(r)}catch(e){return t(e,null,i)}return t(null,a||r,i)});else if(this.promise)return new this.promise(function(t,a){var r=i(e),o=null;r.on("request",function(e){o=e}),r.on("response",function(i){var r="2"!==i.statusCode.toString()[0],n=[],s=n.push.bind(n);i.on("data",s),i.on("end",function(){var s=n.join("");if("["===s[0]||"{"===s[0])try{s=JSON.parse(s)}catch(e){}if(r)return i.body=s,void(e.debug?a({result:JSON.stringify(i),debug:{options:e,request:{headers:o._headers},response:{headers:i.headers}}}):a(JSON.stringify(i)));e.debug?t({result:s,debug:{options:e,request:{headers:o._headers},response:{headers:i.headers}}}):t(s)})}),r.on("error",a)})}}).call(ae.prototype),ae.oauth_util=a(82),t.oauth_util=O},function(e,t){var a=1/0,i="[object Symbol]",r=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,o=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,n="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",s="["+n+"]",u="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",c="\\d+",p="[\\u2700-\\u27bf]",l="[a-z\\xdf-\\xf6\\xf8-\\xff]",m="[^\\ud800-\\udfff"+n+c+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",h="(?:\\ud83c[\\udde6-\\uddff]){2}",d="[\\ud800-\\udbff][\\udc00-\\udfff]",f="[A-Z\\xc0-\\xd6\\xd8-\\xde]",g="(?:"+l+"|"+m+")",v="(?:"+f+"|"+m+")",y="(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?",b="[\\ufe0e\\ufe0f]?"+y+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",h,d].join("|")+")[\\ufe0e\\ufe0f]?"+y+")*"),k="(?:"+[p,h,d].join("|")+")"+b,j=RegExp("['’]","g"),w=RegExp(u,"g"),x=RegExp([f+"?"+l+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[s,f,"$"].join("|")+")",v+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[s,f+g,"$"].join("|")+")",f+"?"+g+"+(?:['’](?:d|ll|m|re|s|t|ve))?",f+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",c,k].join("|"),"g"),E=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,S="object"==typeof global&&global&&global.Object===Object&&global,_="object"==typeof self&&self&&self.Object===Object&&self,R=S||_||Function("return this")();var A,C=(A={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==A?void 0:A[e]});var q=Object.prototype.toString,O=R.Symbol,P=O?O.prototype:void 0,F=P?P.toString:void 0;function z(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&q.call(e)==i}(e))return F?F.call(e):"";var t=e+"";return"0"==t&&1/e==-a?"-0":t}function T(e){return null==e?"":z(e)}var I,D=(I=function(e,t,a){return e+(a?"_":"")+t.toLowerCase()},function(e){return function(e,t,a,i){var r=-1,o=e?e.length:0;for(i&&o&&(a=e[++r]);++r<o;)a=t(a,e[r],r,e);return a}(function(e,t,a){return e=T(e),void 0===(t=a?void 0:t)?function(e){return E.test(e)}(e)?function(e){return e.match(x)||[]}(e):function(e){return e.match(r)||[]}(e):e.match(t)||[]}(function(e){return(e=T(e))&&e.replace(o,C).replace(w,"")}(e).replace(j,"")),I,"")});e.exports=D},function(e,t){var a=1/0,i="[object Symbol]",r=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,o=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,n="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",s="[\\ud800-\\udfff]",u="["+n+"]",c="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",p="\\d+",l="[\\u2700-\\u27bf]",m="[a-z\\xdf-\\xf6\\xf8-\\xff]",h="[^\\ud800-\\udfff"+n+p+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",d="\\ud83c[\\udffb-\\udfff]",f="[^\\ud800-\\udfff]",g="(?:\\ud83c[\\udde6-\\uddff]){2}",v="[\\ud800-\\udbff][\\udc00-\\udfff]",y="[A-Z\\xc0-\\xd6\\xd8-\\xde]",b="(?:"+m+"|"+h+")",k="(?:"+y+"|"+h+")",j="(?:"+c+"|"+d+")"+"?",w="[\\ufe0e\\ufe0f]?"+j+("(?:\\u200d(?:"+[f,g,v].join("|")+")[\\ufe0e\\ufe0f]?"+j+")*"),x="(?:"+[l,g,v].join("|")+")"+w,E="(?:"+[f+c+"?",c,g,v,s].join("|")+")",S=RegExp("['’]","g"),_=RegExp(c,"g"),R=RegExp(d+"(?="+d+")|"+E+w,"g"),A=RegExp([y+"?"+m+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[u,y,"$"].join("|")+")",k+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[u,y+b,"$"].join("|")+")",y+"?"+b+"+(?:['’](?:d|ll|m|re|s|t|ve))?",y+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",p,x].join("|"),"g"),C=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),q=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,O="object"==typeof global&&global&&global.Object===Object&&global,P="object"==typeof self&&self&&self.Object===Object&&self,F=O||P||Function("return this")();var z,T=(z={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==z?void 0:z[e]});function I(e){return C.test(e)}function D(e){return I(e)?function(e){return e.match(R)||[]}(e):function(e){return e.split("")}(e)}var B=Object.prototype.toString,L=F.Symbol,U=L?L.prototype:void 0,N=U?U.toString:void 0;function H(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&B.call(e)==i}(e))return N?N.call(e):"";var t=e+"";return"0"==t&&1/e==-a?"-0":t}function M(e,t,a){var i=e.length;return a=void 0===a?i:a,!t&&a>=i?e:function(e,t,a){var i=-1,r=e.length;t<0&&(t=-t>r?0:r+t),(a=a>r?r:a)<0&&(a+=r),r=t>a?0:a-t>>>0,t>>>=0;for(var o=Array(r);++i<r;)o[i]=e[i+t];return o}(e,t,a)}function K(e){return null==e?"":H(e)}var $,G=($=function(e,t,a){return t=t.toLowerCase(),e+(a?Q(K(t).toLowerCase()):t)},function(e){return function(e,t,a,i){var r=-1,o=e?e.length:0;for(i&&o&&(a=e[++r]);++r<o;)a=t(a,e[r],r,e);return a}(function(e,t,a){return e=K(e),void 0===(t=a?void 0:t)?function(e){return q.test(e)}(e)?function(e){return e.match(A)||[]}(e):function(e){return e.match(r)||[]}(e):e.match(t)||[]}(function(e){return(e=K(e))&&e.replace(o,T).replace(_,"")}(e).replace(S,"")),$,"")});var V,Q=(V="toUpperCase",function(e){var t=I(e=K(e))?D(e):void 0,a=t?t[0]:e.charAt(0),i=t?M(t,1).join(""):e.slice(1);return a[V]()+i});e.exports=G},function(e,t){var a=1/0,i="[object Symbol]",r=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,o=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,n="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",s="["+n+"]",u="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",c="\\d+",p="[\\u2700-\\u27bf]",l="[a-z\\xdf-\\xf6\\xf8-\\xff]",m="[^\\ud800-\\udfff"+n+c+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",h="(?:\\ud83c[\\udde6-\\uddff]){2}",d="[\\ud800-\\udbff][\\udc00-\\udfff]",f="[A-Z\\xc0-\\xd6\\xd8-\\xde]",g="(?:"+l+"|"+m+")",v="(?:"+f+"|"+m+")",y="(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?",b="[\\ufe0e\\ufe0f]?"+y+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",h,d].join("|")+")[\\ufe0e\\ufe0f]?"+y+")*"),k="(?:"+[p,h,d].join("|")+")"+b,j=RegExp("['’]","g"),w=RegExp(u,"g"),x=RegExp([f+"?"+l+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[s,f,"$"].join("|")+")",v+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[s,f+g,"$"].join("|")+")",f+"?"+g+"+(?:['’](?:d|ll|m|re|s|t|ve))?",f+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",c,k].join("|"),"g"),E=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,S="object"==typeof global&&global&&global.Object===Object&&global,_="object"==typeof self&&self&&self.Object===Object&&self,R=S||_||Function("return this")();var A,C=(A={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==A?void 0:A[e]});var q=Object.prototype.toString,O=R.Symbol,P=O?O.prototype:void 0,F=P?P.toString:void 0;function z(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&q.call(e)==i}(e))return F?F.call(e):"";var t=e+"";return"0"==t&&1/e==-a?"-0":t}function T(e){return null==e?"":z(e)}var I,D=(I=function(e,t,a){return e+(a?"-":"")+t.toLowerCase()},function(e){return function(e,t,a,i){var r=-1,o=e?e.length:0;for(i&&o&&(a=e[++r]);++r<o;)a=t(a,e[r],r,e);return a}(function(e,t,a){return e=T(e),void 0===(t=a?void 0:t)?function(e){return E.test(e)}(e)?function(e){return e.match(x)||[]}(e):function(e){return e.match(r)||[]}(e):e.match(t)||[]}(function(e){return(e=T(e))&&e.replace(o,C).replace(w,"")}(e).replace(j,"")),I,"")});e.exports=D},function(e,t){e.exports=require("os")},function(e,t){e.exports=require("child_process")},function(e,t){e.exports=require("readline")},function(e,t,a){var i=a(13),r=a(14),o=parseInt("0777",8);function n(e,t,a,s){"function"==typeof t?(a=t,t={}):t&&"object"==typeof t||(t={mode:t});var u=t.mode,c=t.fs||r;void 0===u&&(u=o&~process.umask()),s||(s=null);var p=a||function(){};e=i.resolve(e),c.mkdir(e,u,function(a){if(!a)return p(null,s=s||e);switch(a.code){case"ENOENT":n(i.dirname(e),t,function(a,i){a?p(a,i):n(e,t,p,i)});break;default:c.stat(e,function(e,t){e||!t.isDirectory()?p(a,s):p(null,s)})}})}e.exports=n.mkdirp=n.mkdirP=n,n.sync=function e(t,a,n){a&&"object"==typeof a||(a={mode:a});var s=a.mode,u=a.fs||r;void 0===s&&(s=o&~process.umask()),n||(n=null),t=i.resolve(t);try{u.mkdirSync(t,s),n=n||t}catch(r){switch(r.code){case"ENOENT":n=e(i.dirname(t),a,n),e(t,a,n);break;default:var c;try{c=u.statSync(t)}catch(e){throw r}if(!c.isDirectory())throw r}}return n}},function(e,t,a){"use strict";e.exports=((e,t)=>{t=Object.assign({pascalCase:!1},t);const a=e=>t.pascalCase?e.charAt(0).toUpperCase()+e.slice(1):e;return 0===(e=Array.isArray(e)?e.map(e=>e.trim()).filter(e=>e.length).join("-"):e.trim()).length?"":1===e.length?t.pascalCase?e.toUpperCase():e.toLowerCase():/^[a-z\d]+$/.test(e)?a(e):(e!==e.toLowerCase()&&(e=(e=>{let t=!1,a=!1,i=!1;for(let r=0;r<e.length;r++){const o=e[r];t&&/[a-zA-Z]/.test(o)&&o.toUpperCase()===o?(e=e.slice(0,r)+"-"+e.slice(r),t=!1,i=a,a=!0,r++):a&&i&&/[a-zA-Z]/.test(o)&&o.toLowerCase()===o?(e=e.slice(0,r-1)+"-"+e.slice(r-1),i=a,a=!1,t=!0):(t=o.toLowerCase()===o,i=a,a=o.toUpperCase()===o)}return e})(e)),a(e=e.replace(/^[_.\- ]+/,"").toLowerCase().replace(/[_.\- ]+(\w|$)/g,(e,t)=>t.toUpperCase())))})},function(e,t,a){"use strict";e.exports=function(e,t){if("string"!=typeof e)throw new TypeError("Expected a string");return t=void 0===t?"_":t,e.replace(/([a-z\d])([A-Z])/g,"$1"+t+"$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g,"$1"+t+"$2").toLowerCase()}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e;e=e.trim();for(var t=0,a=null,i=null,r=null,o=[],n=0;n<e.length;n++)a=i," "!==(i=e.charAt(n))||r?(i===r?(o[t]||(o[t]=""),r=null):"'"!==i&&'"'!==i||r||(r=i),o[t]||(o[t]=""),o[t]+=i):" "!==a&&t++;return o}},function(e,t){function a(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}a.keys=function(){return[]},a.resolve=a,e.exports=a,a.id=97},function(e,t,a){"use strict";var i=a(35),r=a(49),o=a(37).paramsHaveRequestBody;function n(e,t,a){"function"==typeof t&&(a=t);var r={};return"object"==typeof t?i(r,t,{uri:e}):i(r,"string"==typeof e?{uri:e}:e),r.callback=a||r.callback,r}function s(e,t,a){if(void 0===e)throw new Error("undefined is not a valid uri or options object.");var i=n(e,t,a);if("HEAD"===i.method&&o(i))throw new Error("HTTP HEAD requests MUST NOT include a request body.");return new s.Request(i)}function u(e){var t=e.toUpperCase();return function(e,a,i){var r=n(e,a,i);return r.method=t,s(r,r.callback)}}function c(e,t,a,r){return function(o,s,u){var c=n(o,s,u),p={};return i(!0,p,t,c),p.pool=c.pool||t.pool,r&&(p.method=r.toUpperCase()),"function"==typeof a&&(e=a),e(p,p.callback)}}s.get=u("get"),s.head=u("head"),s.options=u("options"),s.post=u("post"),s.put=u("put"),s.patch=u("patch"),s.del=u("delete"),s.delete=u("delete"),s.jar=function(e){return r.jar(e)},s.cookie=function(e){return r.parse(e)},s.defaults=function(e,t){var a=this;"function"==typeof(e=e||{})&&(t=e,e={});var i=c(a,e,t);return["get","head","post","put","patch","del","delete"].forEach(function(r){i[r]=c(a[r],e,t,r)}),i.cookie=c(a.cookie,e,t),i.jar=a.jar,i.defaults=a.defaults,i},s.forever=function(e,t){var a={};return t&&i(a,t),e&&(a.agentOptions=e),a.forever=!0,s.defaults(a)},e.exports=s,s.Request=a(105),s.initParams=n,Object.defineProperty(s,"debug",{enumerable:!0,get:function(){return s.Request.debug},set:function(e){s.Request.debug=e}})},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i,r=a(36),o=a(8).parse,n=a(1),s=a(50),u=a(52).Store,c=a(102).MemoryCookieStore,p=a(54).pathMatch,l=a(103).version;try{i=a(51)}catch(e){console.warn("tough-cookie: can't load punycode; won't use punycode for domain normalization")}var m=/^[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]+$/,h=/[\x00-\x1F]/,d=["\n","\r","\0"],f=/[\x20-\x3A\x3C-\x7E]+/,g=/[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/,v={jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11},y=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],b=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],k=2147483647e3;function j(e,t,a,i){for(var r=0;r<e.length;){var o=e.charCodeAt(r);if(o<=47||o>=58)break;r++}return r<t||r>a?null:i||r==e.length?parseInt(e.substr(0,r),10):null}function w(e){var t=e.split(":"),a=[0,0,0];if(3!==t.length)return null;for(var i=0;i<3;i++){var r=2==i,o=j(t[i],1,2,r);if(null===o)return null;a[i]=o}return a}function x(e){e=String(e).substr(0,3).toLowerCase();var t=v[e];return t>=0?t:null}function E(e){if(e){var t=e.split(g);if(t){for(var a=null,i=null,r=null,o=null,n=null,s=null,u=0;u<t.length;u++){var c,p=t[u].trim();if(p.length)null===r&&(c=w(p))?(a=c[0],i=c[1],r=c[2]):null!==o||null===(c=j(p,1,2,!0))?null!==n||null===(c=x(p))?null===s&&null!==(c=j(p,2,4,!0))&&((s=c)>=70&&s<=99?s+=1900:s>=0&&s<=69&&(s+=2e3)):n=c:o=c}if(!(null===o||null===n||null===s||null===r||o<1||o>31||s<1601||a>23||i>59||r>59))return new Date(Date.UTC(s,n,o,a,i,r))}}}function S(e){var t=e.getUTCDate();t=t>=10?t:"0"+t;var a=e.getUTCHours();a=a>=10?a:"0"+a;var i=e.getUTCMinutes();i=i>=10?i:"0"+i;var r=e.getUTCSeconds();return r=r>=10?r:"0"+r,b[e.getUTCDay()]+", "+t+" "+y[e.getUTCMonth()]+" "+e.getUTCFullYear()+" "+a+":"+i+":"+r+" GMT"}function _(e){return null==e?null:(e=e.trim().replace(/^\./,""),i&&/[^\u0001-\u007f]/.test(e)&&(e=i.toASCII(e)),e.toLowerCase())}function R(e,t,a){if(null==e||null==t)return null;if(!1!==a&&(e=_(e),t=_(t)),e==t)return!0;if(r.isIP(e))return!1;var i=e.indexOf(t);return!(i<=0)&&(e.length===t.length+i&&"."===e.substr(i-1,1))}function A(e){if(!e||"/"!==e.substr(0,1))return"/";if("/"===e)return e;var t=e.lastIndexOf("/");return 0===t?"/":e.slice(0,t)}function C(e,t){var a,i,r=(e=function(e){for(var t=0;t<d.length;t++){var a=e.indexOf(d[t]);-1!==a&&(e=e.substr(0,a))}return e}(e)).indexOf("=");if(t)0===r&&(r=(e=e.substr(1)).indexOf("="));else if(r<=0)return;if(r<=0?(a="",i=e.trim()):(a=e.substr(0,r).trim(),i=e.substr(r+1).trim()),!h.test(a)&&!h.test(i)){var o=new T;return o.key=a,o.value=i,o}}function q(e,t){t&&"object"==typeof t||(t={});var a=(e=e.trim()).indexOf(";"),i=C(-1===a?e:e.substr(0,a),!!t.loose);if(i){if(-1===a)return i;var r=e.slice(a+1).trim();if(0===r.length)return i;for(var o=r.split(";");o.length;){var n=o.shift().trim();if(0!==n.length){var s,u,c=n.indexOf("=");switch(-1===c?(s=n,u=null):(s=n.substr(0,c),u=n.substr(c+1)),s=s.trim().toLowerCase(),u&&(u=u.trim()),s){case"expires":if(u){var p=E(u);p&&(i.expires=p)}break;case"max-age":if(u&&/^-?[0-9]+$/.test(u)){var l=parseInt(u,10);i.setMaxAge(l)}break;case"domain":if(u){var m=u.trim().replace(/^\./,"");m&&(i.domain=m.toLowerCase())}break;case"path":i.path=u&&"/"===u[0]?u:null;break;case"secure":i.secure=!0;break;case"httponly":i.httpOnly=!0;break;default:i.extensions=i.extensions||[],i.extensions.push(n)}}}return i}}function O(e){var t;try{t=JSON.parse(e)}catch(e){return e}return t}function P(e){if(!e)return null;var t;if("string"==typeof e){if((t=O(e))instanceof Error)return null}else t=e;for(var a=new T,i=0;i<T.serializableProperties.length;i++){var r=T.serializableProperties[i];void 0!==t[r]&&t[r]!==T.prototype[r]&&("expires"===r||"creation"===r||"lastAccessed"===r?null===t[r]?a[r]=null:a[r]="Infinity"==t[r]?"Infinity":new Date(t[r]):a[r]=t[r])}return a}function F(e,t){var a=0,i=e.path?e.path.length:0;return 0!==(a=(t.path?t.path.length:0)-i)?a:0!==(a=(e.creation?e.creation.getTime():k)-(t.creation?t.creation.getTime():k))?a:a=e.creationIndex-t.creationIndex}function z(e){if(e instanceof Object)return e;try{e=decodeURI(e)}catch(e){}return o(e)}function T(e){e=e||{},Object.keys(e).forEach(function(t){T.prototype.hasOwnProperty(t)&&T.prototype[t]!==e[t]&&"_"!==t.substr(0,1)&&(this[t]=e[t])},this),this.creation=this.creation||new Date,Object.defineProperty(this,"creationIndex",{configurable:!1,enumerable:!1,writable:!0,value:++T.cookiesCreated})}function I(e,t){"boolean"==typeof t?t={rejectPublicSuffixes:t}:null==t&&(t={}),null!=t.rejectPublicSuffixes&&(this.rejectPublicSuffixes=t.rejectPublicSuffixes),null!=t.looseMode&&(this.enableLooseMode=t.looseMode),e||(e=new c),this.store=e}T.cookiesCreated=0,T.parse=q,T.fromJSON=P,T.prototype.key="",T.prototype.value="",T.prototype.expires="Infinity",T.prototype.maxAge=null,T.prototype.domain=null,T.prototype.path=null,T.prototype.secure=!1,T.prototype.httpOnly=!1,T.prototype.extensions=null,T.prototype.hostOnly=null,T.prototype.pathIsDefault=null,T.prototype.creation=null,T.prototype.lastAccessed=null,Object.defineProperty(T.prototype,"creationIndex",{configurable:!0,enumerable:!1,writable:!0,value:0}),T.serializableProperties=Object.keys(T.prototype).filter(function(e){return!(T.prototype[e]instanceof Function||"creationIndex"===e||"_"===e.substr(0,1))}),T.prototype.inspect=function(){var e=Date.now();return'Cookie="'+this.toString()+"; hostOnly="+(null!=this.hostOnly?this.hostOnly:"?")+"; aAge="+(this.lastAccessed?e-this.lastAccessed.getTime()+"ms":"?")+"; cAge="+(this.creation?e-this.creation.getTime()+"ms":"?")+'"'},n.inspect.custom&&(T.prototype[n.inspect.custom]=T.prototype.inspect),T.prototype.toJSON=function(){for(var e={},t=T.serializableProperties,a=0;a<t.length;a++){var i=t[a];this[i]!==T.prototype[i]&&("expires"===i||"creation"===i||"lastAccessed"===i?null===this[i]?e[i]=null:e[i]="Infinity"==this[i]?"Infinity":this[i].toISOString():"maxAge"===i?null!==this[i]&&(e[i]=this[i]==1/0||this[i]==-1/0?this[i].toString():this[i]):this[i]!==T.prototype[i]&&(e[i]=this[i]))}return e},T.prototype.clone=function(){return P(this.toJSON())},T.prototype.validate=function(){if(!m.test(this.value))return!1;if(!(this.expires==1/0||this.expires instanceof Date||E(this.expires)))return!1;if(null!=this.maxAge&&this.maxAge<=0)return!1;if(null!=this.path&&!f.test(this.path))return!1;var e=this.cdomain();if(e){if(e.match(/\.$/))return!1;if(null==s.getPublicSuffix(e))return!1}return!0},T.prototype.setExpires=function(e){e instanceof Date?this.expires=e:this.expires=E(e)||"Infinity"},T.prototype.setMaxAge=function(e){this.maxAge=e===1/0||e===-1/0?e.toString():e},T.prototype.cookieString=function(){var e=this.value;return null==e&&(e=""),""===this.key?e:this.key+"="+e},T.prototype.toString=function(){var e=this.cookieString();return this.expires!=1/0&&(this.expires instanceof Date?e+="; Expires="+S(this.expires):e+="; Expires="+this.expires),null!=this.maxAge&&this.maxAge!=1/0&&(e+="; Max-Age="+this.maxAge),this.domain&&!this.hostOnly&&(e+="; Domain="+this.domain),this.path&&(e+="; Path="+this.path),this.secure&&(e+="; Secure"),this.httpOnly&&(e+="; HttpOnly"),this.extensions&&this.extensions.forEach(function(t){e+="; "+t}),e},T.prototype.TTL=function(e){if(null!=this.maxAge)return this.maxAge<=0?0:1e3*this.maxAge;var t=this.expires;return t!=1/0?(t instanceof Date||(t=E(t)||1/0),t==1/0?1/0:t.getTime()-(e||Date.now())):1/0},T.prototype.expiryTime=function(e){if(null!=this.maxAge){var t=e||this.creation||new Date,a=this.maxAge<=0?-1/0:1e3*this.maxAge;return t.getTime()+a}return this.expires==1/0?1/0:this.expires.getTime()},T.prototype.expiryDate=function(e){var t=this.expiryTime(e);return t==1/0?new Date(k):t==-1/0?new Date(0):new Date(t)},T.prototype.isPersistent=function(){return null!=this.maxAge||this.expires!=1/0},T.prototype.cdomain=T.prototype.canonicalizedDomain=function(){return null==this.domain?null:_(this.domain)},I.prototype.store=null,I.prototype.rejectPublicSuffixes=!0,I.prototype.enableLooseMode=!1;var D=[];D.push("setCookie"),I.prototype.setCookie=function(e,t,a,i){var r,o=z(t);a instanceof Function&&(i=a,a={});var n=_(o.hostname),u=this.enableLooseMode;if(null!=a.loose&&(u=a.loose),e instanceof T||(e=T.parse(e,{loose:u})),!e)return r=new Error("Cookie failed to parse"),i(a.ignoreError?null:r);var c=a.now||new Date;if(this.rejectPublicSuffixes&&e.domain&&null==s.getPublicSuffix(e.cdomain()))return r=new Error("Cookie has domain set to a public suffix"),i(a.ignoreError?null:r);if(e.domain){if(!R(n,e.cdomain(),!1))return r=new Error("Cookie not in this host's domain. Cookie:"+e.cdomain()+" Request:"+n),i(a.ignoreError?null:r);null==e.hostOnly&&(e.hostOnly=!1)}else e.hostOnly=!0,e.domain=n;if(e.path&&"/"===e.path[0]||(e.path=A(o.pathname),e.pathIsDefault=!0),!1===a.http&&e.httpOnly)return r=new Error("Cookie is HttpOnly and this isn't an HTTP API"),i(a.ignoreError?null:r);var p=this.store;p.updateCookie||(p.updateCookie=function(e,t,a){this.putCookie(t,a)}),p.findCookie(e.domain,e.path,e.key,function(t,r){if(t)return i(t);var o=function(t){if(t)return i(t);i(null,e)};if(r){if(!1===a.http&&r.httpOnly)return t=new Error("old Cookie is HttpOnly and this isn't an HTTP API"),i(a.ignoreError?null:t);e.creation=r.creation,e.creationIndex=r.creationIndex,e.lastAccessed=c,p.updateCookie(r,e,o)}else e.creation=e.lastAccessed=c,p.putCookie(e,o)})},D.push("getCookies"),I.prototype.getCookies=function(e,t,a){var i=z(e);t instanceof Function&&(a=t,t={});var r=_(i.hostname),o=i.pathname||"/",n=t.secure;null!=n||!i.protocol||"https:"!=i.protocol&&"wss:"!=i.protocol||(n=!0);var s=t.http;null==s&&(s=!0);var u=t.now||Date.now(),c=!1!==t.expire,l=!!t.allPaths,m=this.store;function h(e){if(e.hostOnly){if(e.domain!=r)return!1}else if(!R(r,e.domain,!1))return!1;return!(!l&&!p(o,e.path))&&(!(e.secure&&!n)&&(!(e.httpOnly&&!s)&&(!(c&&e.expiryTime()<=u)||(m.removeCookie(e.domain,e.path,e.key,function(){}),!1))))}m.findCookies(r,l?null:o,function(e,i){if(e)return a(e);i=i.filter(h),!1!==t.sort&&(i=i.sort(F));var r=new Date;i.forEach(function(e){e.lastAccessed=r}),a(null,i)})},D.push("getCookieString"),I.prototype.getCookieString=function(){var e=Array.prototype.slice.call(arguments,0),t=e.pop();e.push(function(e,a){e?t(e):t(null,a.sort(F).map(function(e){return e.cookieString()}).join("; "))}),this.getCookies.apply(this,e)},D.push("getSetCookieStrings"),I.prototype.getSetCookieStrings=function(){var e=Array.prototype.slice.call(arguments,0),t=e.pop();e.push(function(e,a){e?t(e):t(null,a.map(function(e){return e.toString()}))}),this.getCookies.apply(this,e)},D.push("serialize"),I.prototype.serialize=function(e){var t=this.store.constructor.name;"Object"===t&&(t=null);var a={version:"tough-cookie@"+l,storeType:t,rejectPublicSuffixes:!!this.rejectPublicSuffixes,cookies:[]};if(!this.store.getAllCookies||"function"!=typeof this.store.getAllCookies)return e(new Error("store does not support getAllCookies and cannot be serialized"));this.store.getAllCookies(function(t,i){return t?e(t):(a.cookies=i.map(function(e){return delete(e=e instanceof T?e.toJSON():e).creationIndex,e}),e(null,a))})},I.prototype.toJSON=function(){return this.serializeSync()},D.push("_importCookies"),I.prototype._importCookies=function(e,t){var a=this,i=e.cookies;if(!i||!Array.isArray(i))return t(new Error("serialized jar has no cookies array"));i=i.slice(),function e(r){if(r)return t(r);if(!i.length)return t(r,a);var o;try{o=P(i.shift())}catch(e){return t(e)}if(null===o)return e(null);a.store.putCookie(o,e)}()},I.deserialize=function(e,t,a){var i;if(3!==arguments.length&&(a=t,t=null),"string"==typeof e){if((i=O(e))instanceof Error)return a(i)}else i=e;var r=new I(t,i.rejectPublicSuffixes);r._importCookies(i,function(e){if(e)return a(e);a(null,r)})},I.deserializeSync=function(e,t){var a="string"==typeof e?JSON.parse(e):e,i=new I(t,a.rejectPublicSuffixes);if(!i.store.synchronous)throw new Error("CookieJar store is not synchronous; use async API instead.");return i._importCookiesSync(a),i},I.fromJSON=I.deserializeSync,D.push("clone"),I.prototype.clone=function(e,t){1===arguments.length&&(t=e,e=null),this.serialize(function(a,i){if(a)return t(a);I.deserialize(e,i,t)})},D.forEach(function(e){I.prototype[e+"Sync"]=function(e){return function(){if(!this.store.synchronous)throw new Error("CookieJar store is not synchronous; use async API instead.");var t,a,i=Array.prototype.slice.call(arguments);if(i.push(function(e,i){t=e,a=i}),this[e].apply(this,i),t)throw t;return a}}(e)}),t.CookieJar=I,t.Cookie=T,t.Store=u,t.MemoryCookieStore=c,t.parseDate=E,t.formatDate=S,t.parse=q,t.fromJSON=P,t.domainMatch=R,t.defaultPath=A,t.pathMatch=p,t.getPublicSuffix=s.getPublicSuffix,t.cookieCompare=F,t.permuteDomain=a(53).permuteDomain,t.permutePath=function(e){if("/"===e)return["/"];e.lastIndexOf("/")===e.length-1&&(e=e.substr(0,e.length-1));for(var t=[e];e.length>1;){var a=e.lastIndexOf("/");if(0===a)break;e=e.substr(0,a),t.push(e)}return t.push("/"),t},t.canonicalDomain=_},function(e,t,a){"use strict";var i=a(51),r={};r.rules=a(101).map(function(e){return{rule:e,suffix:e.replace(/^(\*\.|\!)/,""),punySuffix:-1,wildcard:"*"===e.charAt(0),exception:"!"===e.charAt(0)}}),r.endsWith=function(e,t){return-1!==e.indexOf(t,e.length-t.length)},r.findRule=function(e){var t=i.toASCII(e);return r.rules.reduce(function(e,a){return-1===a.punySuffix&&(a.punySuffix=i.toASCII(a.suffix)),r.endsWith(t,"."+a.punySuffix)||t===a.punySuffix?a:e},null)},t.errorCodes={DOMAIN_TOO_SHORT:"Domain name too short.",DOMAIN_TOO_LONG:"Domain name too long. It should be no more than 255 chars.",LABEL_STARTS_WITH_DASH:"Domain name label can not start with a dash.",LABEL_ENDS_WITH_DASH:"Domain name label can not end with a dash.",LABEL_TOO_LONG:"Domain name label should be at most 63 chars long.",LABEL_TOO_SHORT:"Domain name label should be at least 1 character long.",LABEL_INVALID_CHARS:"Domain name label can only contain alphanumeric characters or dashes."},r.validate=function(e){var t=i.toASCII(e);if(t.length<1)return"DOMAIN_TOO_SHORT";if(t.length>255)return"DOMAIN_TOO_LONG";for(var a,r=t.split("."),o=0;o<r.length;++o){if(!(a=r[o]).length)return"LABEL_TOO_SHORT";if(a.length>63)return"LABEL_TOO_LONG";if("-"===a.charAt(0))return"LABEL_STARTS_WITH_DASH";if("-"===a.charAt(a.length-1))return"LABEL_ENDS_WITH_DASH";if(!/^[a-z0-9\-]+$/.test(a))return"LABEL_INVALID_CHARS"}},t.parse=function(e){if("string"!=typeof e)throw new TypeError("Domain name must be a string.");var a=e.slice(0).toLowerCase();"."===a.charAt(a.length-1)&&(a=a.slice(0,a.length-1));var o=r.validate(a);if(o)return{input:e,error:{message:t.errorCodes[o],code:o}};var n={input:e,tld:null,sld:null,domain:null,subdomain:null,listed:!1},s=a.split(".");if("local"===s[s.length-1])return n;var u=function(){return/xn--/.test(a)?(n.domain&&(n.domain=i.toASCII(n.domain)),n.subdomain&&(n.subdomain=i.toASCII(n.subdomain)),n):n},c=r.findRule(a);if(!c)return s.length<2?n:(n.tld=s.pop(),n.sld=s.pop(),n.domain=[n.sld,n.tld].join("."),s.length&&(n.subdomain=s.pop()),u());n.listed=!0;var p=c.suffix.split("."),l=s.slice(0,s.length-p.length);return c.exception&&l.push(p.shift()),n.tld=p.join("."),l.length?(c.wildcard&&(p.unshift(l.pop()),n.tld=p.join(".")),l.length?(n.sld=l.pop(),n.domain=[n.sld,n.tld].join("."),l.length&&(n.subdomain=l.join(".")),u()):u()):u()},t.get=function(e){return e&&t.parse(e).domain||null},t.isValid=function(e){var a=t.parse(e);return Boolean(a.domain&&a.listed)}},function(e){e.exports=["ac","com.ac","edu.ac","gov.ac","net.ac","mil.ac","org.ac","ad","nom.ad","ae","co.ae","net.ae","org.ae","sch.ae","ac.ae","gov.ae","mil.ae","aero","accident-investigation.aero","accident-prevention.aero","aerobatic.aero","aeroclub.aero","aerodrome.aero","agents.aero","aircraft.aero","airline.aero","airport.aero","air-surveillance.aero","airtraffic.aero","air-traffic-control.aero","ambulance.aero","amusement.aero","association.aero","author.aero","ballooning.aero","broker.aero","caa.aero","cargo.aero","catering.aero","certification.aero","championship.aero","charter.aero","civilaviation.aero","club.aero","conference.aero","consultant.aero","consulting.aero","control.aero","council.aero","crew.aero","design.aero","dgca.aero","educator.aero","emergency.aero","engine.aero","engineer.aero","entertainment.aero","equipment.aero","exchange.aero","express.aero","federation.aero","flight.aero","freight.aero","fuel.aero","gliding.aero","government.aero","groundhandling.aero","group.aero","hanggliding.aero","homebuilt.aero","insurance.aero","journal.aero","journalist.aero","leasing.aero","logistics.aero","magazine.aero","maintenance.aero","media.aero","microlight.aero","modelling.aero","navigation.aero","parachuting.aero","paragliding.aero","passenger-association.aero","pilot.aero","press.aero","production.aero","recreation.aero","repbody.aero","res.aero","research.aero","rotorcraft.aero","safety.aero","scientist.aero","services.aero","show.aero","skydiving.aero","software.aero","student.aero","trader.aero","trading.aero","trainer.aero","union.aero","workinggroup.aero","works.aero","af","gov.af","com.af","org.af","net.af","edu.af","ag","com.ag","org.ag","net.ag","co.ag","nom.ag","ai","off.ai","com.ai","net.ai","org.ai","al","com.al","edu.al","gov.al","mil.al","net.al","org.al","am","ao","ed.ao","gv.ao","og.ao","co.ao","pb.ao","it.ao","aq","ar","com.ar","edu.ar","gob.ar","gov.ar","int.ar","mil.ar","musica.ar","net.ar","org.ar","tur.ar","arpa","e164.arpa","in-addr.arpa","ip6.arpa","iris.arpa","uri.arpa","urn.arpa","as","gov.as","asia","at","ac.at","co.at","gv.at","or.at","au","com.au","net.au","org.au","edu.au","gov.au","asn.au","id.au","info.au","conf.au","oz.au","act.au","nsw.au","nt.au","qld.au","sa.au","tas.au","vic.au","wa.au","act.edu.au","nsw.edu.au","nt.edu.au","qld.edu.au","sa.edu.au","tas.edu.au","vic.edu.au","wa.edu.au","qld.gov.au","sa.gov.au","tas.gov.au","vic.gov.au","wa.gov.au","aw","com.aw","ax","az","com.az","net.az","int.az","gov.az","org.az","edu.az","info.az","pp.az","mil.az","name.az","pro.az","biz.az","ba","com.ba","edu.ba","gov.ba","mil.ba","net.ba","org.ba","bb","biz.bb","co.bb","com.bb","edu.bb","gov.bb","info.bb","net.bb","org.bb","store.bb","tv.bb","*.bd","be","ac.be","bf","gov.bf","bg","a.bg","b.bg","c.bg","d.bg","e.bg","f.bg","g.bg","h.bg","i.bg","j.bg","k.bg","l.bg","m.bg","n.bg","o.bg","p.bg","q.bg","r.bg","s.bg","t.bg","u.bg","v.bg","w.bg","x.bg","y.bg","z.bg","0.bg","1.bg","2.bg","3.bg","4.bg","5.bg","6.bg","7.bg","8.bg","9.bg","bh","com.bh","edu.bh","net.bh","org.bh","gov.bh","bi","co.bi","com.bi","edu.bi","or.bi","org.bi","biz","bj","asso.bj","barreau.bj","gouv.bj","bm","com.bm","edu.bm","gov.bm","net.bm","org.bm","bn","com.bn","edu.bn","gov.bn","net.bn","org.bn","bo","com.bo","edu.bo","gob.bo","int.bo","org.bo","net.bo","mil.bo","tv.bo","web.bo","academia.bo","agro.bo","arte.bo","blog.bo","bolivia.bo","ciencia.bo","cooperativa.bo","democracia.bo","deporte.bo","ecologia.bo","economia.bo","empresa.bo","indigena.bo","industria.bo","info.bo","medicina.bo","movimiento.bo","musica.bo","natural.bo","nombre.bo","noticias.bo","patria.bo","politica.bo","profesional.bo","plurinacional.bo","pueblo.bo","revista.bo","salud.bo","tecnologia.bo","tksat.bo","transporte.bo","wiki.bo","br","9guacu.br","abc.br","adm.br","adv.br","agr.br","aju.br","am.br","anani.br","aparecida.br","arq.br","art.br","ato.br","b.br","barueri.br","belem.br","bhz.br","bio.br","blog.br","bmd.br","boavista.br","bsb.br","campinagrande.br","campinas.br","caxias.br","cim.br","cng.br","cnt.br","com.br","contagem.br","coop.br","cri.br","cuiaba.br","curitiba.br","def.br","ecn.br","eco.br","edu.br","emp.br","eng.br","esp.br","etc.br","eti.br","far.br","feira.br","flog.br","floripa.br","fm.br","fnd.br","fortal.br","fot.br","foz.br","fst.br","g12.br","ggf.br","goiania.br","gov.br","ac.gov.br","al.gov.br","am.gov.br","ap.gov.br","ba.gov.br","ce.gov.br","df.gov.br","es.gov.br","go.gov.br","ma.gov.br","mg.gov.br","ms.gov.br","mt.gov.br","pa.gov.br","pb.gov.br","pe.gov.br","pi.gov.br","pr.gov.br","rj.gov.br","rn.gov.br","ro.gov.br","rr.gov.br","rs.gov.br","sc.gov.br","se.gov.br","sp.gov.br","to.gov.br","gru.br","imb.br","ind.br","inf.br","jab.br","jampa.br","jdf.br","joinville.br","jor.br","jus.br","leg.br","lel.br","londrina.br","macapa.br","maceio.br","manaus.br","maringa.br","mat.br","med.br","mil.br","morena.br","mp.br","mus.br","natal.br","net.br","niteroi.br","*.nom.br","not.br","ntr.br","odo.br","ong.br","org.br","osasco.br","palmas.br","poa.br","ppg.br","pro.br","psc.br","psi.br","pvh.br","qsl.br","radio.br","rec.br","recife.br","ribeirao.br","rio.br","riobranco.br","riopreto.br","salvador.br","sampa.br","santamaria.br","santoandre.br","saobernardo.br","saogonca.br","sjc.br","slg.br","slz.br","sorocaba.br","srv.br","taxi.br","teo.br","the.br","tmp.br","trd.br","tur.br","tv.br","udi.br","vet.br","vix.br","vlog.br","wiki.br","zlg.br","bs","com.bs","net.bs","org.bs","edu.bs","gov.bs","bt","com.bt","edu.bt","gov.bt","net.bt","org.bt","bv","bw","co.bw","org.bw","by","gov.by","mil.by","com.by","of.by","bz","com.bz","net.bz","org.bz","edu.bz","gov.bz","ca","ab.ca","bc.ca","mb.ca","nb.ca","nf.ca","nl.ca","ns.ca","nt.ca","nu.ca","on.ca","pe.ca","qc.ca","sk.ca","yk.ca","gc.ca","cat","cc","cd","gov.cd","cf","cg","ch","ci","org.ci","or.ci","com.ci","co.ci","edu.ci","ed.ci","ac.ci","net.ci","go.ci","asso.ci","aéroport.ci","int.ci","presse.ci","md.ci","gouv.ci","*.ck","!www.ck","cl","gov.cl","gob.cl","co.cl","mil.cl","cm","co.cm","com.cm","gov.cm","net.cm","cn","ac.cn","com.cn","edu.cn","gov.cn","net.cn","org.cn","mil.cn","公司.cn","网络.cn","網絡.cn","ah.cn","bj.cn","cq.cn","fj.cn","gd.cn","gs.cn","gz.cn","gx.cn","ha.cn","hb.cn","he.cn","hi.cn","hl.cn","hn.cn","jl.cn","js.cn","jx.cn","ln.cn","nm.cn","nx.cn","qh.cn","sc.cn","sd.cn","sh.cn","sn.cn","sx.cn","tj.cn","xj.cn","xz.cn","yn.cn","zj.cn","hk.cn","mo.cn","tw.cn","co","arts.co","com.co","edu.co","firm.co","gov.co","info.co","int.co","mil.co","net.co","nom.co","org.co","rec.co","web.co","com","coop","cr","ac.cr","co.cr","ed.cr","fi.cr","go.cr","or.cr","sa.cr","cu","com.cu","edu.cu","org.cu","net.cu","gov.cu","inf.cu","cv","cw","com.cw","edu.cw","net.cw","org.cw","cx","gov.cx","cy","ac.cy","biz.cy","com.cy","ekloges.cy","gov.cy","ltd.cy","name.cy","net.cy","org.cy","parliament.cy","press.cy","pro.cy","tm.cy","cz","de","dj","dk","dm","com.dm","net.dm","org.dm","edu.dm","gov.dm","do","art.do","com.do","edu.do","gob.do","gov.do","mil.do","net.do","org.do","sld.do","web.do","dz","com.dz","org.dz","net.dz","gov.dz","edu.dz","asso.dz","pol.dz","art.dz","ec","com.ec","info.ec","net.ec","fin.ec","k12.ec","med.ec","pro.ec","org.ec","edu.ec","gov.ec","gob.ec","mil.ec","edu","ee","edu.ee","gov.ee","riik.ee","lib.ee","med.ee","com.ee","pri.ee","aip.ee","org.ee","fie.ee","eg","com.eg","edu.eg","eun.eg","gov.eg","mil.eg","name.eg","net.eg","org.eg","sci.eg","*.er","es","com.es","nom.es","org.es","gob.es","edu.es","et","com.et","gov.et","org.et","edu.et","biz.et","name.et","info.et","net.et","eu","fi","aland.fi","*.fj","*.fk","fm","fo","fr","com.fr","asso.fr","nom.fr","prd.fr","presse.fr","tm.fr","aeroport.fr","assedic.fr","avocat.fr","avoues.fr","cci.fr","chambagri.fr","chirurgiens-dentistes.fr","experts-comptables.fr","geometre-expert.fr","gouv.fr","greta.fr","huissier-justice.fr","medecin.fr","notaires.fr","pharmacien.fr","port.fr","veterinaire.fr","ga","gb","gd","ge","com.ge","edu.ge","gov.ge","org.ge","mil.ge","net.ge","pvt.ge","gf","gg","co.gg","net.gg","org.gg","gh","com.gh","edu.gh","gov.gh","org.gh","mil.gh","gi","com.gi","ltd.gi","gov.gi","mod.gi","edu.gi","org.gi","gl","co.gl","com.gl","edu.gl","net.gl","org.gl","gm","gn","ac.gn","com.gn","edu.gn","gov.gn","org.gn","net.gn","gov","gp","com.gp","net.gp","mobi.gp","edu.gp","org.gp","asso.gp","gq","gr","com.gr","edu.gr","net.gr","org.gr","gov.gr","gs","gt","com.gt","edu.gt","gob.gt","ind.gt","mil.gt","net.gt","org.gt","gu","com.gu","edu.gu","gov.gu","guam.gu","info.gu","net.gu","org.gu","web.gu","gw","gy","co.gy","com.gy","edu.gy","gov.gy","net.gy","org.gy","hk","com.hk","edu.hk","gov.hk","idv.hk","net.hk","org.hk","公司.hk","教育.hk","敎育.hk","政府.hk","個人.hk","个人.hk","箇人.hk","網络.hk","网络.hk","组織.hk","網絡.hk","网絡.hk","组织.hk","組織.hk","組织.hk","hm","hn","com.hn","edu.hn","org.hn","net.hn","mil.hn","gob.hn","hr","iz.hr","from.hr","name.hr","com.hr","ht","com.ht","shop.ht","firm.ht","info.ht","adult.ht","net.ht","pro.ht","org.ht","med.ht","art.ht","coop.ht","pol.ht","asso.ht","edu.ht","rel.ht","gouv.ht","perso.ht","hu","co.hu","info.hu","org.hu","priv.hu","sport.hu","tm.hu","2000.hu","agrar.hu","bolt.hu","casino.hu","city.hu","erotica.hu","erotika.hu","film.hu","forum.hu","games.hu","hotel.hu","ingatlan.hu","jogasz.hu","konyvelo.hu","lakas.hu","media.hu","news.hu","reklam.hu","sex.hu","shop.hu","suli.hu","szex.hu","tozsde.hu","utazas.hu","video.hu","id","ac.id","biz.id","co.id","desa.id","go.id","mil.id","my.id","net.id","or.id","ponpes.id","sch.id","web.id","ie","gov.ie","il","ac.il","co.il","gov.il","idf.il","k12.il","muni.il","net.il","org.il","im","ac.im","co.im","com.im","ltd.co.im","net.im","org.im","plc.co.im","tt.im","tv.im","in","co.in","firm.in","net.in","org.in","gen.in","ind.in","nic.in","ac.in","edu.in","res.in","gov.in","mil.in","info","int","eu.int","io","com.io","iq","gov.iq","edu.iq","mil.iq","com.iq","org.iq","net.iq","ir","ac.ir","co.ir","gov.ir","id.ir","net.ir","org.ir","sch.ir","ایران.ir","ايران.ir","is","net.is","com.is","edu.is","gov.is","org.is","int.is","it","gov.it","edu.it","abr.it","abruzzo.it","aosta-valley.it","aostavalley.it","bas.it","basilicata.it","cal.it","calabria.it","cam.it","campania.it","emilia-romagna.it","emiliaromagna.it","emr.it","friuli-v-giulia.it","friuli-ve-giulia.it","friuli-vegiulia.it","friuli-venezia-giulia.it","friuli-veneziagiulia.it","friuli-vgiulia.it","friuliv-giulia.it","friulive-giulia.it","friulivegiulia.it","friulivenezia-giulia.it","friuliveneziagiulia.it","friulivgiulia.it","fvg.it","laz.it","lazio.it","lig.it","liguria.it","lom.it","lombardia.it","lombardy.it","lucania.it","mar.it","marche.it","mol.it","molise.it","piedmont.it","piemonte.it","pmn.it","pug.it","puglia.it","sar.it","sardegna.it","sardinia.it","sic.it","sicilia.it","sicily.it","taa.it","tos.it","toscana.it","trentin-sud-tirol.it","trentin-süd-tirol.it","trentin-sudtirol.it","trentin-südtirol.it","trentin-sued-tirol.it","trentin-suedtirol.it","trentino-a-adige.it","trentino-aadige.it","trentino-alto-adige.it","trentino-altoadige.it","trentino-s-tirol.it","trentino-stirol.it","trentino-sud-tirol.it","trentino-süd-tirol.it","trentino-sudtirol.it","trentino-südtirol.it","trentino-sued-tirol.it","trentino-suedtirol.it","trentino.it","trentinoa-adige.it","trentinoaadige.it","trentinoalto-adige.it","trentinoaltoadige.it","trentinos-tirol.it","trentinostirol.it","trentinosud-tirol.it","trentinosüd-tirol.it","trentinosudtirol.it","trentinosüdtirol.it","trentinosued-tirol.it","trentinosuedtirol.it","trentinsud-tirol.it","trentinsüd-tirol.it","trentinsudtirol.it","trentinsüdtirol.it","trentinsued-tirol.it","trentinsuedtirol.it","tuscany.it","umb.it","umbria.it","val-d-aosta.it","val-daosta.it","vald-aosta.it","valdaosta.it","valle-aosta.it","valle-d-aosta.it","valle-daosta.it","valleaosta.it","valled-aosta.it","valledaosta.it","vallee-aoste.it","vallée-aoste.it","vallee-d-aoste.it","vallée-d-aoste.it","valleeaoste.it","valléeaoste.it","valleedaoste.it","valléedaoste.it","vao.it","vda.it","ven.it","veneto.it","ag.it","agrigento.it","al.it","alessandria.it","alto-adige.it","altoadige.it","an.it","ancona.it","andria-barletta-trani.it","andria-trani-barletta.it","andriabarlettatrani.it","andriatranibarletta.it","ao.it","aosta.it","aoste.it","ap.it","aq.it","aquila.it","ar.it","arezzo.it","ascoli-piceno.it","ascolipiceno.it","asti.it","at.it","av.it","avellino.it","ba.it","balsan-sudtirol.it","balsan-südtirol.it","balsan-suedtirol.it","balsan.it","bari.it","barletta-trani-andria.it","barlettatraniandria.it","belluno.it","benevento.it","bergamo.it","bg.it","bi.it","biella.it","bl.it","bn.it","bo.it","bologna.it","bolzano-altoadige.it","bolzano.it","bozen-sudtirol.it","bozen-südtirol.it","bozen-suedtirol.it","bozen.it","br.it","brescia.it","brindisi.it","bs.it","bt.it","bulsan-sudtirol.it","bulsan-südtirol.it","bulsan-suedtirol.it","bulsan.it","bz.it","ca.it","cagliari.it","caltanissetta.it","campidano-medio.it","campidanomedio.it","campobasso.it","carbonia-iglesias.it","carboniaiglesias.it","carrara-massa.it","carraramassa.it","caserta.it","catania.it","catanzaro.it","cb.it","ce.it","cesena-forli.it","cesena-forlì.it","cesenaforli.it","cesenaforlì.it","ch.it","chieti.it","ci.it","cl.it","cn.it","co.it","como.it","cosenza.it","cr.it","cremona.it","crotone.it","cs.it","ct.it","cuneo.it","cz.it","dell-ogliastra.it","dellogliastra.it","en.it","enna.it","fc.it","fe.it","fermo.it","ferrara.it","fg.it","fi.it","firenze.it","florence.it","fm.it","foggia.it","forli-cesena.it","forlì-cesena.it","forlicesena.it","forlìcesena.it","fr.it","frosinone.it","ge.it","genoa.it","genova.it","go.it","gorizia.it","gr.it","grosseto.it","iglesias-carbonia.it","iglesiascarbonia.it","im.it","imperia.it","is.it","isernia.it","kr.it","la-spezia.it","laquila.it","laspezia.it","latina.it","lc.it","le.it","lecce.it","lecco.it","li.it","livorno.it","lo.it","lodi.it","lt.it","lu.it","lucca.it","macerata.it","mantova.it","massa-carrara.it","massacarrara.it","matera.it","mb.it","mc.it","me.it","medio-campidano.it","mediocampidano.it","messina.it","mi.it","milan.it","milano.it","mn.it","mo.it","modena.it","monza-brianza.it","monza-e-della-brianza.it","monza.it","monzabrianza.it","monzaebrianza.it","monzaedellabrianza.it","ms.it","mt.it","na.it","naples.it","napoli.it","no.it","novara.it","nu.it","nuoro.it","og.it","ogliastra.it","olbia-tempio.it","olbiatempio.it","or.it","oristano.it","ot.it","pa.it","padova.it","padua.it","palermo.it","parma.it","pavia.it","pc.it","pd.it","pe.it","perugia.it","pesaro-urbino.it","pesarourbino.it","pescara.it","pg.it","pi.it","piacenza.it","pisa.it","pistoia.it","pn.it","po.it","pordenone.it","potenza.it","pr.it","prato.it","pt.it","pu.it","pv.it","pz.it","ra.it","ragusa.it","ravenna.it","rc.it","re.it","reggio-calabria.it","reggio-emilia.it","reggiocalabria.it","reggioemilia.it","rg.it","ri.it","rieti.it","rimini.it","rm.it","rn.it","ro.it","roma.it","rome.it","rovigo.it","sa.it","salerno.it","sassari.it","savona.it","si.it","siena.it","siracusa.it","so.it","sondrio.it","sp.it","sr.it","ss.it","suedtirol.it","südtirol.it","sv.it","ta.it","taranto.it","te.it","tempio-olbia.it","tempioolbia.it","teramo.it","terni.it","tn.it","to.it","torino.it","tp.it","tr.it","trani-andria-barletta.it","trani-barletta-andria.it","traniandriabarletta.it","tranibarlettaandria.it","trapani.it","trento.it","treviso.it","trieste.it","ts.it","turin.it","tv.it","ud.it","udine.it","urbino-pesaro.it","urbinopesaro.it","va.it","varese.it","vb.it","vc.it","ve.it","venezia.it","venice.it","verbania.it","vercelli.it","verona.it","vi.it","vibo-valentia.it","vibovalentia.it","vicenza.it","viterbo.it","vr.it","vs.it","vt.it","vv.it","je","co.je","net.je","org.je","*.jm","jo","com.jo","org.jo","net.jo","edu.jo","sch.jo","gov.jo","mil.jo","name.jo","jobs","jp","ac.jp","ad.jp","co.jp","ed.jp","go.jp","gr.jp","lg.jp","ne.jp","or.jp","aichi.jp","akita.jp","aomori.jp","chiba.jp","ehime.jp","fukui.jp","fukuoka.jp","fukushima.jp","gifu.jp","gunma.jp","hiroshima.jp","hokkaido.jp","hyogo.jp","ibaraki.jp","ishikawa.jp","iwate.jp","kagawa.jp","kagoshima.jp","kanagawa.jp","kochi.jp","kumamoto.jp","kyoto.jp","mie.jp","miyagi.jp","miyazaki.jp","nagano.jp","nagasaki.jp","nara.jp","niigata.jp","oita.jp","okayama.jp","okinawa.jp","osaka.jp","saga.jp","saitama.jp","shiga.jp","shimane.jp","shizuoka.jp","tochigi.jp","tokushima.jp","tokyo.jp","tottori.jp","toyama.jp","wakayama.jp","yamagata.jp","yamaguchi.jp","yamanashi.jp","栃木.jp","愛知.jp","愛媛.jp","兵庫.jp","熊本.jp","茨城.jp","北海道.jp","千葉.jp","和歌山.jp","長崎.jp","長野.jp","新潟.jp","青森.jp","静岡.jp","東京.jp","石川.jp","埼玉.jp","三重.jp","京都.jp","佐賀.jp","大分.jp","大阪.jp","奈良.jp","宮城.jp","宮崎.jp","富山.jp","山口.jp","山形.jp","山梨.jp","岩手.jp","岐阜.jp","岡山.jp","島根.jp","広島.jp","徳島.jp","沖縄.jp","滋賀.jp","神奈川.jp","福井.jp","福岡.jp","福島.jp","秋田.jp","群馬.jp","香川.jp","高知.jp","鳥取.jp","鹿児島.jp","*.kawasaki.jp","*.kitakyushu.jp","*.kobe.jp","*.nagoya.jp","*.sapporo.jp","*.sendai.jp","*.yokohama.jp","!city.kawasaki.jp","!city.kitakyushu.jp","!city.kobe.jp","!city.nagoya.jp","!city.sapporo.jp","!city.sendai.jp","!city.yokohama.jp","aisai.aichi.jp","ama.aichi.jp","anjo.aichi.jp","asuke.aichi.jp","chiryu.aichi.jp","chita.aichi.jp","fuso.aichi.jp","gamagori.aichi.jp","handa.aichi.jp","hazu.aichi.jp","hekinan.aichi.jp","higashiura.aichi.jp","ichinomiya.aichi.jp","inazawa.aichi.jp","inuyama.aichi.jp","isshiki.aichi.jp","iwakura.aichi.jp","kanie.aichi.jp","kariya.aichi.jp","kasugai.aichi.jp","kira.aichi.jp","kiyosu.aichi.jp","komaki.aichi.jp","konan.aichi.jp","kota.aichi.jp","mihama.aichi.jp","miyoshi.aichi.jp","nishio.aichi.jp","nisshin.aichi.jp","obu.aichi.jp","oguchi.aichi.jp","oharu.aichi.jp","okazaki.aichi.jp","owariasahi.aichi.jp","seto.aichi.jp","shikatsu.aichi.jp","shinshiro.aichi.jp","shitara.aichi.jp","tahara.aichi.jp","takahama.aichi.jp","tobishima.aichi.jp","toei.aichi.jp","togo.aichi.jp","tokai.aichi.jp","tokoname.aichi.jp","toyoake.aichi.jp","toyohashi.aichi.jp","toyokawa.aichi.jp","toyone.aichi.jp","toyota.aichi.jp","tsushima.aichi.jp","yatomi.aichi.jp","akita.akita.jp","daisen.akita.jp","fujisato.akita.jp","gojome.akita.jp","hachirogata.akita.jp","happou.akita.jp","higashinaruse.akita.jp","honjo.akita.jp","honjyo.akita.jp","ikawa.akita.jp","kamikoani.akita.jp","kamioka.akita.jp","katagami.akita.jp","kazuno.akita.jp","kitaakita.akita.jp","kosaka.akita.jp","kyowa.akita.jp","misato.akita.jp","mitane.akita.jp","moriyoshi.akita.jp","nikaho.akita.jp","noshiro.akita.jp","odate.akita.jp","oga.akita.jp","ogata.akita.jp","semboku.akita.jp","yokote.akita.jp","yurihonjo.akita.jp","aomori.aomori.jp","gonohe.aomori.jp","hachinohe.aomori.jp","hashikami.aomori.jp","hiranai.aomori.jp","hirosaki.aomori.jp","itayanagi.aomori.jp","kuroishi.aomori.jp","misawa.aomori.jp","mutsu.aomori.jp","nakadomari.aomori.jp","noheji.aomori.jp","oirase.aomori.jp","owani.aomori.jp","rokunohe.aomori.jp","sannohe.aomori.jp","shichinohe.aomori.jp","shingo.aomori.jp","takko.aomori.jp","towada.aomori.jp","tsugaru.aomori.jp","tsuruta.aomori.jp","abiko.chiba.jp","asahi.chiba.jp","chonan.chiba.jp","chosei.chiba.jp","choshi.chiba.jp","chuo.chiba.jp","funabashi.chiba.jp","futtsu.chiba.jp","hanamigawa.chiba.jp","ichihara.chiba.jp","ichikawa.chiba.jp","ichinomiya.chiba.jp","inzai.chiba.jp","isumi.chiba.jp","kamagaya.chiba.jp","kamogawa.chiba.jp","kashiwa.chiba.jp","katori.chiba.jp","katsuura.chiba.jp","kimitsu.chiba.jp","kisarazu.chiba.jp","kozaki.chiba.jp","kujukuri.chiba.jp","kyonan.chiba.jp","matsudo.chiba.jp","midori.chiba.jp","mihama.chiba.jp","minamiboso.chiba.jp","mobara.chiba.jp","mutsuzawa.chiba.jp","nagara.chiba.jp","nagareyama.chiba.jp","narashino.chiba.jp","narita.chiba.jp","noda.chiba.jp","oamishirasato.chiba.jp","omigawa.chiba.jp","onjuku.chiba.jp","otaki.chiba.jp","sakae.chiba.jp","sakura.chiba.jp","shimofusa.chiba.jp","shirako.chiba.jp","shiroi.chiba.jp","shisui.chiba.jp","sodegaura.chiba.jp","sosa.chiba.jp","tako.chiba.jp","tateyama.chiba.jp","togane.chiba.jp","tohnosho.chiba.jp","tomisato.chiba.jp","urayasu.chiba.jp","yachimata.chiba.jp","yachiyo.chiba.jp","yokaichiba.chiba.jp","yokoshibahikari.chiba.jp","yotsukaido.chiba.jp","ainan.ehime.jp","honai.ehime.jp","ikata.ehime.jp","imabari.ehime.jp","iyo.ehime.jp","kamijima.ehime.jp","kihoku.ehime.jp","kumakogen.ehime.jp","masaki.ehime.jp","matsuno.ehime.jp","matsuyama.ehime.jp","namikata.ehime.jp","niihama.ehime.jp","ozu.ehime.jp","saijo.ehime.jp","seiyo.ehime.jp","shikokuchuo.ehime.jp","tobe.ehime.jp","toon.ehime.jp","uchiko.ehime.jp","uwajima.ehime.jp","yawatahama.ehime.jp","echizen.fukui.jp","eiheiji.fukui.jp","fukui.fukui.jp","ikeda.fukui.jp","katsuyama.fukui.jp","mihama.fukui.jp","minamiechizen.fukui.jp","obama.fukui.jp","ohi.fukui.jp","ono.fukui.jp","sabae.fukui.jp","sakai.fukui.jp","takahama.fukui.jp","tsuruga.fukui.jp","wakasa.fukui.jp","ashiya.fukuoka.jp","buzen.fukuoka.jp","chikugo.fukuoka.jp","chikuho.fukuoka.jp","chikujo.fukuoka.jp","chikushino.fukuoka.jp","chikuzen.fukuoka.jp","chuo.fukuoka.jp","dazaifu.fukuoka.jp","fukuchi.fukuoka.jp","hakata.fukuoka.jp","higashi.fukuoka.jp","hirokawa.fukuoka.jp","hisayama.fukuoka.jp","iizuka.fukuoka.jp","inatsuki.fukuoka.jp","kaho.fukuoka.jp","kasuga.fukuoka.jp","kasuya.fukuoka.jp","kawara.fukuoka.jp","keisen.fukuoka.jp","koga.fukuoka.jp","kurate.fukuoka.jp","kurogi.fukuoka.jp","kurume.fukuoka.jp","minami.fukuoka.jp","miyako.fukuoka.jp","miyama.fukuoka.jp","miyawaka.fukuoka.jp","mizumaki.fukuoka.jp","munakata.fukuoka.jp","nakagawa.fukuoka.jp","nakama.fukuoka.jp","nishi.fukuoka.jp","nogata.fukuoka.jp","ogori.fukuoka.jp","okagaki.fukuoka.jp","okawa.fukuoka.jp","oki.fukuoka.jp","omuta.fukuoka.jp","onga.fukuoka.jp","onojo.fukuoka.jp","oto.fukuoka.jp","saigawa.fukuoka.jp","sasaguri.fukuoka.jp","shingu.fukuoka.jp","shinyoshitomi.fukuoka.jp","shonai.fukuoka.jp","soeda.fukuoka.jp","sue.fukuoka.jp","tachiarai.fukuoka.jp","tagawa.fukuoka.jp","takata.fukuoka.jp","toho.fukuoka.jp","toyotsu.fukuoka.jp","tsuiki.fukuoka.jp","ukiha.fukuoka.jp","umi.fukuoka.jp","usui.fukuoka.jp","yamada.fukuoka.jp","yame.fukuoka.jp","yanagawa.fukuoka.jp","yukuhashi.fukuoka.jp","aizubange.fukushima.jp","aizumisato.fukushima.jp","aizuwakamatsu.fukushima.jp","asakawa.fukushima.jp","bandai.fukushima.jp","date.fukushima.jp","fukushima.fukushima.jp","furudono.fukushima.jp","futaba.fukushima.jp","hanawa.fukushima.jp","higashi.fukushima.jp","hirata.fukushima.jp","hirono.fukushima.jp","iitate.fukushima.jp","inawashiro.fukushima.jp","ishikawa.fukushima.jp","iwaki.fukushima.jp","izumizaki.fukushima.jp","kagamiishi.fukushima.jp","kaneyama.fukushima.jp","kawamata.fukushima.jp","kitakata.fukushima.jp","kitashiobara.fukushima.jp","koori.fukushima.jp","koriyama.fukushima.jp","kunimi.fukushima.jp","miharu.fukushima.jp","mishima.fukushima.jp","namie.fukushima.jp","nango.fukushima.jp","nishiaizu.fukushima.jp","nishigo.fukushima.jp","okuma.fukushima.jp","omotego.fukushima.jp","ono.fukushima.jp","otama.fukushima.jp","samegawa.fukushima.jp","shimogo.fukushima.jp","shirakawa.fukushima.jp","showa.fukushima.jp","soma.fukushima.jp","sukagawa.fukushima.jp","taishin.fukushima.jp","tamakawa.fukushima.jp","tanagura.fukushima.jp","tenei.fukushima.jp","yabuki.fukushima.jp","yamato.fukushima.jp","yamatsuri.fukushima.jp","yanaizu.fukushima.jp","yugawa.fukushima.jp","anpachi.gifu.jp","ena.gifu.jp","gifu.gifu.jp","ginan.gifu.jp","godo.gifu.jp","gujo.gifu.jp","hashima.gifu.jp","hichiso.gifu.jp","hida.gifu.jp","higashishirakawa.gifu.jp","ibigawa.gifu.jp","ikeda.gifu.jp","kakamigahara.gifu.jp","kani.gifu.jp","kasahara.gifu.jp","kasamatsu.gifu.jp","kawaue.gifu.jp","kitagata.gifu.jp","mino.gifu.jp","minokamo.gifu.jp","mitake.gifu.jp","mizunami.gifu.jp","motosu.gifu.jp","nakatsugawa.gifu.jp","ogaki.gifu.jp","sakahogi.gifu.jp","seki.gifu.jp","sekigahara.gifu.jp","shirakawa.gifu.jp","tajimi.gifu.jp","takayama.gifu.jp","tarui.gifu.jp","toki.gifu.jp","tomika.gifu.jp","wanouchi.gifu.jp","yamagata.gifu.jp","yaotsu.gifu.jp","yoro.gifu.jp","annaka.gunma.jp","chiyoda.gunma.jp","fujioka.gunma.jp","higashiagatsuma.gunma.jp","isesaki.gunma.jp","itakura.gunma.jp","kanna.gunma.jp","kanra.gunma.jp","katashina.gunma.jp","kawaba.gunma.jp","kiryu.gunma.jp","kusatsu.gunma.jp","maebashi.gunma.jp","meiwa.gunma.jp","midori.gunma.jp","minakami.gunma.jp","naganohara.gunma.jp","nakanojo.gunma.jp","nanmoku.gunma.jp","numata.gunma.jp","oizumi.gunma.jp","ora.gunma.jp","ota.gunma.jp","shibukawa.gunma.jp","shimonita.gunma.jp","shinto.gunma.jp","showa.gunma.jp","takasaki.gunma.jp","takayama.gunma.jp","tamamura.gunma.jp","tatebayashi.gunma.jp","tomioka.gunma.jp","tsukiyono.gunma.jp","tsumagoi.gunma.jp","ueno.gunma.jp","yoshioka.gunma.jp","asaminami.hiroshima.jp","daiwa.hiroshima.jp","etajima.hiroshima.jp","fuchu.hiroshima.jp","fukuyama.hiroshima.jp","hatsukaichi.hiroshima.jp","higashihiroshima.hiroshima.jp","hongo.hiroshima.jp","jinsekikogen.hiroshima.jp","kaita.hiroshima.jp","kui.hiroshima.jp","kumano.hiroshima.jp","kure.hiroshima.jp","mihara.hiroshima.jp","miyoshi.hiroshima.jp","naka.hiroshima.jp","onomichi.hiroshima.jp","osakikamijima.hiroshima.jp","otake.hiroshima.jp","saka.hiroshima.jp","sera.hiroshima.jp","seranishi.hiroshima.jp","shinichi.hiroshima.jp","shobara.hiroshima.jp","takehara.hiroshima.jp","abashiri.hokkaido.jp","abira.hokkaido.jp","aibetsu.hokkaido.jp","akabira.hokkaido.jp","akkeshi.hokkaido.jp","asahikawa.hokkaido.jp","ashibetsu.hokkaido.jp","ashoro.hokkaido.jp","assabu.hokkaido.jp","atsuma.hokkaido.jp","bibai.hokkaido.jp","biei.hokkaido.jp","bifuka.hokkaido.jp","bihoro.hokkaido.jp","biratori.hokkaido.jp","chippubetsu.hokkaido.jp","chitose.hokkaido.jp","date.hokkaido.jp","ebetsu.hokkaido.jp","embetsu.hokkaido.jp","eniwa.hokkaido.jp","erimo.hokkaido.jp","esan.hokkaido.jp","esashi.hokkaido.jp","fukagawa.hokkaido.jp","fukushima.hokkaido.jp","furano.hokkaido.jp","furubira.hokkaido.jp","haboro.hokkaido.jp","hakodate.hokkaido.jp","hamatonbetsu.hokkaido.jp","hidaka.hokkaido.jp","higashikagura.hokkaido.jp","higashikawa.hokkaido.jp","hiroo.hokkaido.jp","hokuryu.hokkaido.jp","hokuto.hokkaido.jp","honbetsu.hokkaido.jp","horokanai.hokkaido.jp","horonobe.hokkaido.jp","ikeda.hokkaido.jp","imakane.hokkaido.jp","ishikari.hokkaido.jp","iwamizawa.hokkaido.jp","iwanai.hokkaido.jp","kamifurano.hokkaido.jp","kamikawa.hokkaido.jp","kamishihoro.hokkaido.jp","kamisunagawa.hokkaido.jp","kamoenai.hokkaido.jp","kayabe.hokkaido.jp","kembuchi.hokkaido.jp","kikonai.hokkaido.jp","kimobetsu.hokkaido.jp","kitahiroshima.hokkaido.jp","kitami.hokkaido.jp","kiyosato.hokkaido.jp","koshimizu.hokkaido.jp","kunneppu.hokkaido.jp","kuriyama.hokkaido.jp","kuromatsunai.hokkaido.jp","kushiro.hokkaido.jp","kutchan.hokkaido.jp","kyowa.hokkaido.jp","mashike.hokkaido.jp","matsumae.hokkaido.jp","mikasa.hokkaido.jp","minamifurano.hokkaido.jp","mombetsu.hokkaido.jp","moseushi.hokkaido.jp","mukawa.hokkaido.jp","muroran.hokkaido.jp","naie.hokkaido.jp","nakagawa.hokkaido.jp","nakasatsunai.hokkaido.jp","nakatombetsu.hokkaido.jp","nanae.hokkaido.jp","nanporo.hokkaido.jp","nayoro.hokkaido.jp","nemuro.hokkaido.jp","niikappu.hokkaido.jp","niki.hokkaido.jp","nishiokoppe.hokkaido.jp","noboribetsu.hokkaido.jp","numata.hokkaido.jp","obihiro.hokkaido.jp","obira.hokkaido.jp","oketo.hokkaido.jp","okoppe.hokkaido.jp","otaru.hokkaido.jp","otobe.hokkaido.jp","otofuke.hokkaido.jp","otoineppu.hokkaido.jp","oumu.hokkaido.jp","ozora.hokkaido.jp","pippu.hokkaido.jp","rankoshi.hokkaido.jp","rebun.hokkaido.jp","rikubetsu.hokkaido.jp","rishiri.hokkaido.jp","rishirifuji.hokkaido.jp","saroma.hokkaido.jp","sarufutsu.hokkaido.jp","shakotan.hokkaido.jp","shari.hokkaido.jp","shibecha.hokkaido.jp","shibetsu.hokkaido.jp","shikabe.hokkaido.jp","shikaoi.hokkaido.jp","shimamaki.hokkaido.jp","shimizu.hokkaido.jp","shimokawa.hokkaido.jp","shinshinotsu.hokkaido.jp","shintoku.hokkaido.jp","shiranuka.hokkaido.jp","shiraoi.hokkaido.jp","shiriuchi.hokkaido.jp","sobetsu.hokkaido.jp","sunagawa.hokkaido.jp","taiki.hokkaido.jp","takasu.hokkaido.jp","takikawa.hokkaido.jp","takinoue.hokkaido.jp","teshikaga.hokkaido.jp","tobetsu.hokkaido.jp","tohma.hokkaido.jp","tomakomai.hokkaido.jp","tomari.hokkaido.jp","toya.hokkaido.jp","toyako.hokkaido.jp","toyotomi.hokkaido.jp","toyoura.hokkaido.jp","tsubetsu.hokkaido.jp","tsukigata.hokkaido.jp","urakawa.hokkaido.jp","urausu.hokkaido.jp","uryu.hokkaido.jp","utashinai.hokkaido.jp","wakkanai.hokkaido.jp","wassamu.hokkaido.jp","yakumo.hokkaido.jp","yoichi.hokkaido.jp","aioi.hyogo.jp","akashi.hyogo.jp","ako.hyogo.jp","amagasaki.hyogo.jp","aogaki.hyogo.jp","asago.hyogo.jp","ashiya.hyogo.jp","awaji.hyogo.jp","fukusaki.hyogo.jp","goshiki.hyogo.jp","harima.hyogo.jp","himeji.hyogo.jp","ichikawa.hyogo.jp","inagawa.hyogo.jp","itami.hyogo.jp","kakogawa.hyogo.jp","kamigori.hyogo.jp","kamikawa.hyogo.jp","kasai.hyogo.jp","kasuga.hyogo.jp","kawanishi.hyogo.jp","miki.hyogo.jp","minamiawaji.hyogo.jp","nishinomiya.hyogo.jp","nishiwaki.hyogo.jp","ono.hyogo.jp","sanda.hyogo.jp","sannan.hyogo.jp","sasayama.hyogo.jp","sayo.hyogo.jp","shingu.hyogo.jp","shinonsen.hyogo.jp","shiso.hyogo.jp","sumoto.hyogo.jp","taishi.hyogo.jp","taka.hyogo.jp","takarazuka.hyogo.jp","takasago.hyogo.jp","takino.hyogo.jp","tamba.hyogo.jp","tatsuno.hyogo.jp","toyooka.hyogo.jp","yabu.hyogo.jp","yashiro.hyogo.jp","yoka.hyogo.jp","yokawa.hyogo.jp","ami.ibaraki.jp","asahi.ibaraki.jp","bando.ibaraki.jp","chikusei.ibaraki.jp","daigo.ibaraki.jp","fujishiro.ibaraki.jp","hitachi.ibaraki.jp","hitachinaka.ibaraki.jp","hitachiomiya.ibaraki.jp","hitachiota.ibaraki.jp","ibaraki.ibaraki.jp","ina.ibaraki.jp","inashiki.ibaraki.jp","itako.ibaraki.jp","iwama.ibaraki.jp","joso.ibaraki.jp","kamisu.ibaraki.jp","kasama.ibaraki.jp","kashima.ibaraki.jp","kasumigaura.ibaraki.jp","koga.ibaraki.jp","miho.ibaraki.jp","mito.ibaraki.jp","moriya.ibaraki.jp","naka.ibaraki.jp","namegata.ibaraki.jp","oarai.ibaraki.jp","ogawa.ibaraki.jp","omitama.ibaraki.jp","ryugasaki.ibaraki.jp","sakai.ibaraki.jp","sakuragawa.ibaraki.jp","shimodate.ibaraki.jp","shimotsuma.ibaraki.jp","shirosato.ibaraki.jp","sowa.ibaraki.jp","suifu.ibaraki.jp","takahagi.ibaraki.jp","tamatsukuri.ibaraki.jp","tokai.ibaraki.jp","tomobe.ibaraki.jp","tone.ibaraki.jp","toride.ibaraki.jp","tsuchiura.ibaraki.jp","tsukuba.ibaraki.jp","uchihara.ibaraki.jp","ushiku.ibaraki.jp","yachiyo.ibaraki.jp","yamagata.ibaraki.jp","yawara.ibaraki.jp","yuki.ibaraki.jp","anamizu.ishikawa.jp","hakui.ishikawa.jp","hakusan.ishikawa.jp","kaga.ishikawa.jp","kahoku.ishikawa.jp","kanazawa.ishikawa.jp","kawakita.ishikawa.jp","komatsu.ishikawa.jp","nakanoto.ishikawa.jp","nanao.ishikawa.jp","nomi.ishikawa.jp","nonoichi.ishikawa.jp","noto.ishikawa.jp","shika.ishikawa.jp","suzu.ishikawa.jp","tsubata.ishikawa.jp","tsurugi.ishikawa.jp","uchinada.ishikawa.jp","wajima.ishikawa.jp","fudai.iwate.jp","fujisawa.iwate.jp","hanamaki.iwate.jp","hiraizumi.iwate.jp","hirono.iwate.jp","ichinohe.iwate.jp","ichinoseki.iwate.jp","iwaizumi.iwate.jp","iwate.iwate.jp","joboji.iwate.jp","kamaishi.iwate.jp","kanegasaki.iwate.jp","karumai.iwate.jp","kawai.iwate.jp","kitakami.iwate.jp","kuji.iwate.jp","kunohe.iwate.jp","kuzumaki.iwate.jp","miyako.iwate.jp","mizusawa.iwate.jp","morioka.iwate.jp","ninohe.iwate.jp","noda.iwate.jp","ofunato.iwate.jp","oshu.iwate.jp","otsuchi.iwate.jp","rikuzentakata.iwate.jp","shiwa.iwate.jp","shizukuishi.iwate.jp","sumita.iwate.jp","tanohata.iwate.jp","tono.iwate.jp","yahaba.iwate.jp","yamada.iwate.jp","ayagawa.kagawa.jp","higashikagawa.kagawa.jp","kanonji.kagawa.jp","kotohira.kagawa.jp","manno.kagawa.jp","marugame.kagawa.jp","mitoyo.kagawa.jp","naoshima.kagawa.jp","sanuki.kagawa.jp","tadotsu.kagawa.jp","takamatsu.kagawa.jp","tonosho.kagawa.jp","uchinomi.kagawa.jp","utazu.kagawa.jp","zentsuji.kagawa.jp","akune.kagoshima.jp","amami.kagoshima.jp","hioki.kagoshima.jp","isa.kagoshima.jp","isen.kagoshima.jp","izumi.kagoshima.jp","kagoshima.kagoshima.jp","kanoya.kagoshima.jp","kawanabe.kagoshima.jp","kinko.kagoshima.jp","kouyama.kagoshima.jp","makurazaki.kagoshima.jp","matsumoto.kagoshima.jp","minamitane.kagoshima.jp","nakatane.kagoshima.jp","nishinoomote.kagoshima.jp","satsumasendai.kagoshima.jp","soo.kagoshima.jp","tarumizu.kagoshima.jp","yusui.kagoshima.jp","aikawa.kanagawa.jp","atsugi.kanagawa.jp","ayase.kanagawa.jp","chigasaki.kanagawa.jp","ebina.kanagawa.jp","fujisawa.kanagawa.jp","hadano.kanagawa.jp","hakone.kanagawa.jp","hiratsuka.kanagawa.jp","isehara.kanagawa.jp","kaisei.kanagawa.jp","kamakura.kanagawa.jp","kiyokawa.kanagawa.jp","matsuda.kanagawa.jp","minamiashigara.kanagawa.jp","miura.kanagawa.jp","nakai.kanagawa.jp","ninomiya.kanagawa.jp","odawara.kanagawa.jp","oi.kanagawa.jp","oiso.kanagawa.jp","sagamihara.kanagawa.jp","samukawa.kanagawa.jp","tsukui.kanagawa.jp","yamakita.kanagawa.jp","yamato.kanagawa.jp","yokosuka.kanagawa.jp","yugawara.kanagawa.jp","zama.kanagawa.jp","zushi.kanagawa.jp","aki.kochi.jp","geisei.kochi.jp","hidaka.kochi.jp","higashitsuno.kochi.jp","ino.kochi.jp","kagami.kochi.jp","kami.kochi.jp","kitagawa.kochi.jp","kochi.kochi.jp","mihara.kochi.jp","motoyama.kochi.jp","muroto.kochi.jp","nahari.kochi.jp","nakamura.kochi.jp","nankoku.kochi.jp","nishitosa.kochi.jp","niyodogawa.kochi.jp","ochi.kochi.jp","okawa.kochi.jp","otoyo.kochi.jp","otsuki.kochi.jp","sakawa.kochi.jp","sukumo.kochi.jp","susaki.kochi.jp","tosa.kochi.jp","tosashimizu.kochi.jp","toyo.kochi.jp","tsuno.kochi.jp","umaji.kochi.jp","yasuda.kochi.jp","yusuhara.kochi.jp","amakusa.kumamoto.jp","arao.kumamoto.jp","aso.kumamoto.jp","choyo.kumamoto.jp","gyokuto.kumamoto.jp","kamiamakusa.kumamoto.jp","kikuchi.kumamoto.jp","kumamoto.kumamoto.jp","mashiki.kumamoto.jp","mifune.kumamoto.jp","minamata.kumamoto.jp","minamioguni.kumamoto.jp","nagasu.kumamoto.jp","nishihara.kumamoto.jp","oguni.kumamoto.jp","ozu.kumamoto.jp","sumoto.kumamoto.jp","takamori.kumamoto.jp","uki.kumamoto.jp","uto.kumamoto.jp","yamaga.kumamoto.jp","yamato.kumamoto.jp","yatsushiro.kumamoto.jp","ayabe.kyoto.jp","fukuchiyama.kyoto.jp","higashiyama.kyoto.jp","ide.kyoto.jp","ine.kyoto.jp","joyo.kyoto.jp","kameoka.kyoto.jp","kamo.kyoto.jp","kita.kyoto.jp","kizu.kyoto.jp","kumiyama.kyoto.jp","kyotamba.kyoto.jp","kyotanabe.kyoto.jp","kyotango.kyoto.jp","maizuru.kyoto.jp","minami.kyoto.jp","minamiyamashiro.kyoto.jp","miyazu.kyoto.jp","muko.kyoto.jp","nagaokakyo.kyoto.jp","nakagyo.kyoto.jp","nantan.kyoto.jp","oyamazaki.kyoto.jp","sakyo.kyoto.jp","seika.kyoto.jp","tanabe.kyoto.jp","uji.kyoto.jp","ujitawara.kyoto.jp","wazuka.kyoto.jp","yamashina.kyoto.jp","yawata.kyoto.jp","asahi.mie.jp","inabe.mie.jp","ise.mie.jp","kameyama.mie.jp","kawagoe.mie.jp","kiho.mie.jp","kisosaki.mie.jp","kiwa.mie.jp","komono.mie.jp","kumano.mie.jp","kuwana.mie.jp","matsusaka.mie.jp","meiwa.mie.jp","mihama.mie.jp","minamiise.mie.jp","misugi.mie.jp","miyama.mie.jp","nabari.mie.jp","shima.mie.jp","suzuka.mie.jp","tado.mie.jp","taiki.mie.jp","taki.mie.jp","tamaki.mie.jp","toba.mie.jp","tsu.mie.jp","udono.mie.jp","ureshino.mie.jp","watarai.mie.jp","yokkaichi.mie.jp","furukawa.miyagi.jp","higashimatsushima.miyagi.jp","ishinomaki.miyagi.jp","iwanuma.miyagi.jp","kakuda.miyagi.jp","kami.miyagi.jp","kawasaki.miyagi.jp","marumori.miyagi.jp","matsushima.miyagi.jp","minamisanriku.miyagi.jp","misato.miyagi.jp","murata.miyagi.jp","natori.miyagi.jp","ogawara.miyagi.jp","ohira.miyagi.jp","onagawa.miyagi.jp","osaki.miyagi.jp","rifu.miyagi.jp","semine.miyagi.jp","shibata.miyagi.jp","shichikashuku.miyagi.jp","shikama.miyagi.jp","shiogama.miyagi.jp","shiroishi.miyagi.jp","tagajo.miyagi.jp","taiwa.miyagi.jp","tome.miyagi.jp","tomiya.miyagi.jp","wakuya.miyagi.jp","watari.miyagi.jp","yamamoto.miyagi.jp","zao.miyagi.jp","aya.miyazaki.jp","ebino.miyazaki.jp","gokase.miyazaki.jp","hyuga.miyazaki.jp","kadogawa.miyazaki.jp","kawaminami.miyazaki.jp","kijo.miyazaki.jp","kitagawa.miyazaki.jp","kitakata.miyazaki.jp","kitaura.miyazaki.jp","kobayashi.miyazaki.jp","kunitomi.miyazaki.jp","kushima.miyazaki.jp","mimata.miyazaki.jp","miyakonojo.miyazaki.jp","miyazaki.miyazaki.jp","morotsuka.miyazaki.jp","nichinan.miyazaki.jp","nishimera.miyazaki.jp","nobeoka.miyazaki.jp","saito.miyazaki.jp","shiiba.miyazaki.jp","shintomi.miyazaki.jp","takaharu.miyazaki.jp","takanabe.miyazaki.jp","takazaki.miyazaki.jp","tsuno.miyazaki.jp","achi.nagano.jp","agematsu.nagano.jp","anan.nagano.jp","aoki.nagano.jp","asahi.nagano.jp","azumino.nagano.jp","chikuhoku.nagano.jp","chikuma.nagano.jp","chino.nagano.jp","fujimi.nagano.jp","hakuba.nagano.jp","hara.nagano.jp","hiraya.nagano.jp","iida.nagano.jp","iijima.nagano.jp","iiyama.nagano.jp","iizuna.nagano.jp","ikeda.nagano.jp","ikusaka.nagano.jp","ina.nagano.jp","karuizawa.nagano.jp","kawakami.nagano.jp","kiso.nagano.jp","kisofukushima.nagano.jp","kitaaiki.nagano.jp","komagane.nagano.jp","komoro.nagano.jp","matsukawa.nagano.jp","matsumoto.nagano.jp","miasa.nagano.jp","minamiaiki.nagano.jp","minamimaki.nagano.jp","minamiminowa.nagano.jp","minowa.nagano.jp","miyada.nagano.jp","miyota.nagano.jp","mochizuki.nagano.jp","nagano.nagano.jp","nagawa.nagano.jp","nagiso.nagano.jp","nakagawa.nagano.jp","nakano.nagano.jp","nozawaonsen.nagano.jp","obuse.nagano.jp","ogawa.nagano.jp","okaya.nagano.jp","omachi.nagano.jp","omi.nagano.jp","ookuwa.nagano.jp","ooshika.nagano.jp","otaki.nagano.jp","otari.nagano.jp","sakae.nagano.jp","sakaki.nagano.jp","saku.nagano.jp","sakuho.nagano.jp","shimosuwa.nagano.jp","shinanomachi.nagano.jp","shiojiri.nagano.jp","suwa.nagano.jp","suzaka.nagano.jp","takagi.nagano.jp","takamori.nagano.jp","takayama.nagano.jp","tateshina.nagano.jp","tatsuno.nagano.jp","togakushi.nagano.jp","togura.nagano.jp","tomi.nagano.jp","ueda.nagano.jp","wada.nagano.jp","yamagata.nagano.jp","yamanouchi.nagano.jp","yasaka.nagano.jp","yasuoka.nagano.jp","chijiwa.nagasaki.jp","futsu.nagasaki.jp","goto.nagasaki.jp","hasami.nagasaki.jp","hirado.nagasaki.jp","iki.nagasaki.jp","isahaya.nagasaki.jp","kawatana.nagasaki.jp","kuchinotsu.nagasaki.jp","matsuura.nagasaki.jp","nagasaki.nagasaki.jp","obama.nagasaki.jp","omura.nagasaki.jp","oseto.nagasaki.jp","saikai.nagasaki.jp","sasebo.nagasaki.jp","seihi.nagasaki.jp","shimabara.nagasaki.jp","shinkamigoto.nagasaki.jp","togitsu.nagasaki.jp","tsushima.nagasaki.jp","unzen.nagasaki.jp","ando.nara.jp","gose.nara.jp","heguri.nara.jp","higashiyoshino.nara.jp","ikaruga.nara.jp","ikoma.nara.jp","kamikitayama.nara.jp","kanmaki.nara.jp","kashiba.nara.jp","kashihara.nara.jp","katsuragi.nara.jp","kawai.nara.jp","kawakami.nara.jp","kawanishi.nara.jp","koryo.nara.jp","kurotaki.nara.jp","mitsue.nara.jp","miyake.nara.jp","nara.nara.jp","nosegawa.nara.jp","oji.nara.jp","ouda.nara.jp","oyodo.nara.jp","sakurai.nara.jp","sango.nara.jp","shimoichi.nara.jp","shimokitayama.nara.jp","shinjo.nara.jp","soni.nara.jp","takatori.nara.jp","tawaramoto.nara.jp","tenkawa.nara.jp","tenri.nara.jp","uda.nara.jp","yamatokoriyama.nara.jp","yamatotakada.nara.jp","yamazoe.nara.jp","yoshino.nara.jp","aga.niigata.jp","agano.niigata.jp","gosen.niigata.jp","itoigawa.niigata.jp","izumozaki.niigata.jp","joetsu.niigata.jp","kamo.niigata.jp","kariwa.niigata.jp","kashiwazaki.niigata.jp","minamiuonuma.niigata.jp","mitsuke.niigata.jp","muika.niigata.jp","murakami.niigata.jp","myoko.niigata.jp","nagaoka.niigata.jp","niigata.niigata.jp","ojiya.niigata.jp","omi.niigata.jp","sado.niigata.jp","sanjo.niigata.jp","seiro.niigata.jp","seirou.niigata.jp","sekikawa.niigata.jp","shibata.niigata.jp","tagami.niigata.jp","tainai.niigata.jp","tochio.niigata.jp","tokamachi.niigata.jp","tsubame.niigata.jp","tsunan.niigata.jp","uonuma.niigata.jp","yahiko.niigata.jp","yoita.niigata.jp","yuzawa.niigata.jp","beppu.oita.jp","bungoono.oita.jp","bungotakada.oita.jp","hasama.oita.jp","hiji.oita.jp","himeshima.oita.jp","hita.oita.jp","kamitsue.oita.jp","kokonoe.oita.jp","kuju.oita.jp","kunisaki.oita.jp","kusu.oita.jp","oita.oita.jp","saiki.oita.jp","taketa.oita.jp","tsukumi.oita.jp","usa.oita.jp","usuki.oita.jp","yufu.oita.jp","akaiwa.okayama.jp","asakuchi.okayama.jp","bizen.okayama.jp","hayashima.okayama.jp","ibara.okayama.jp","kagamino.okayama.jp","kasaoka.okayama.jp","kibichuo.okayama.jp","kumenan.okayama.jp","kurashiki.okayama.jp","maniwa.okayama.jp","misaki.okayama.jp","nagi.okayama.jp","niimi.okayama.jp","nishiawakura.okayama.jp","okayama.okayama.jp","satosho.okayama.jp","setouchi.okayama.jp","shinjo.okayama.jp","shoo.okayama.jp","soja.okayama.jp","takahashi.okayama.jp","tamano.okayama.jp","tsuyama.okayama.jp","wake.okayama.jp","yakage.okayama.jp","aguni.okinawa.jp","ginowan.okinawa.jp","ginoza.okinawa.jp","gushikami.okinawa.jp","haebaru.okinawa.jp","higashi.okinawa.jp","hirara.okinawa.jp","iheya.okinawa.jp","ishigaki.okinawa.jp","ishikawa.okinawa.jp","itoman.okinawa.jp","izena.okinawa.jp","kadena.okinawa.jp","kin.okinawa.jp","kitadaito.okinawa.jp","kitanakagusuku.okinawa.jp","kumejima.okinawa.jp","kunigami.okinawa.jp","minamidaito.okinawa.jp","motobu.okinawa.jp","nago.okinawa.jp","naha.okinawa.jp","nakagusuku.okinawa.jp","nakijin.okinawa.jp","nanjo.okinawa.jp","nishihara.okinawa.jp","ogimi.okinawa.jp","okinawa.okinawa.jp","onna.okinawa.jp","shimoji.okinawa.jp","taketomi.okinawa.jp","tarama.okinawa.jp","tokashiki.okinawa.jp","tomigusuku.okinawa.jp","tonaki.okinawa.jp","urasoe.okinawa.jp","uruma.okinawa.jp","yaese.okinawa.jp","yomitan.okinawa.jp","yonabaru.okinawa.jp","yonaguni.okinawa.jp","zamami.okinawa.jp","abeno.osaka.jp","chihayaakasaka.osaka.jp","chuo.osaka.jp","daito.osaka.jp","fujiidera.osaka.jp","habikino.osaka.jp","hannan.osaka.jp","higashiosaka.osaka.jp","higashisumiyoshi.osaka.jp","higashiyodogawa.osaka.jp","hirakata.osaka.jp","ibaraki.osaka.jp","ikeda.osaka.jp","izumi.osaka.jp","izumiotsu.osaka.jp","izumisano.osaka.jp","kadoma.osaka.jp","kaizuka.osaka.jp","kanan.osaka.jp","kashiwara.osaka.jp","katano.osaka.jp","kawachinagano.osaka.jp","kishiwada.osaka.jp","kita.osaka.jp","kumatori.osaka.jp","matsubara.osaka.jp","minato.osaka.jp","minoh.osaka.jp","misaki.osaka.jp","moriguchi.osaka.jp","neyagawa.osaka.jp","nishi.osaka.jp","nose.osaka.jp","osakasayama.osaka.jp","sakai.osaka.jp","sayama.osaka.jp","sennan.osaka.jp","settsu.osaka.jp","shijonawate.osaka.jp","shimamoto.osaka.jp","suita.osaka.jp","tadaoka.osaka.jp","taishi.osaka.jp","tajiri.osaka.jp","takaishi.osaka.jp","takatsuki.osaka.jp","tondabayashi.osaka.jp","toyonaka.osaka.jp","toyono.osaka.jp","yao.osaka.jp","ariake.saga.jp","arita.saga.jp","fukudomi.saga.jp","genkai.saga.jp","hamatama.saga.jp","hizen.saga.jp","imari.saga.jp","kamimine.saga.jp","kanzaki.saga.jp","karatsu.saga.jp","kashima.saga.jp","kitagata.saga.jp","kitahata.saga.jp","kiyama.saga.jp","kouhoku.saga.jp","kyuragi.saga.jp","nishiarita.saga.jp","ogi.saga.jp","omachi.saga.jp","ouchi.saga.jp","saga.saga.jp","shiroishi.saga.jp","taku.saga.jp","tara.saga.jp","tosu.saga.jp","yoshinogari.saga.jp","arakawa.saitama.jp","asaka.saitama.jp","chichibu.saitama.jp","fujimi.saitama.jp","fujimino.saitama.jp","fukaya.saitama.jp","hanno.saitama.jp","hanyu.saitama.jp","hasuda.saitama.jp","hatogaya.saitama.jp","hatoyama.saitama.jp","hidaka.saitama.jp","higashichichibu.saitama.jp","higashimatsuyama.saitama.jp","honjo.saitama.jp","ina.saitama.jp","iruma.saitama.jp","iwatsuki.saitama.jp","kamiizumi.saitama.jp","kamikawa.saitama.jp","kamisato.saitama.jp","kasukabe.saitama.jp","kawagoe.saitama.jp","kawaguchi.saitama.jp","kawajima.saitama.jp","kazo.saitama.jp","kitamoto.saitama.jp","koshigaya.saitama.jp","kounosu.saitama.jp","kuki.saitama.jp","kumagaya.saitama.jp","matsubushi.saitama.jp","minano.saitama.jp","misato.saitama.jp","miyashiro.saitama.jp","miyoshi.saitama.jp","moroyama.saitama.jp","nagatoro.saitama.jp","namegawa.saitama.jp","niiza.saitama.jp","ogano.saitama.jp","ogawa.saitama.jp","ogose.saitama.jp","okegawa.saitama.jp","omiya.saitama.jp","otaki.saitama.jp","ranzan.saitama.jp","ryokami.saitama.jp","saitama.saitama.jp","sakado.saitama.jp","satte.saitama.jp","sayama.saitama.jp","shiki.saitama.jp","shiraoka.saitama.jp","soka.saitama.jp","sugito.saitama.jp","toda.saitama.jp","tokigawa.saitama.jp","tokorozawa.saitama.jp","tsurugashima.saitama.jp","urawa.saitama.jp","warabi.saitama.jp","yashio.saitama.jp","yokoze.saitama.jp","yono.saitama.jp","yorii.saitama.jp","yoshida.saitama.jp","yoshikawa.saitama.jp","yoshimi.saitama.jp","aisho.shiga.jp","gamo.shiga.jp","higashiomi.shiga.jp","hikone.shiga.jp","koka.shiga.jp","konan.shiga.jp","kosei.shiga.jp","koto.shiga.jp","kusatsu.shiga.jp","maibara.shiga.jp","moriyama.shiga.jp","nagahama.shiga.jp","nishiazai.shiga.jp","notogawa.shiga.jp","omihachiman.shiga.jp","otsu.shiga.jp","ritto.shiga.jp","ryuoh.shiga.jp","takashima.shiga.jp","takatsuki.shiga.jp","torahime.shiga.jp","toyosato.shiga.jp","yasu.shiga.jp","akagi.shimane.jp","ama.shimane.jp","gotsu.shimane.jp","hamada.shimane.jp","higashiizumo.shimane.jp","hikawa.shimane.jp","hikimi.shimane.jp","izumo.shimane.jp","kakinoki.shimane.jp","masuda.shimane.jp","matsue.shimane.jp","misato.shimane.jp","nishinoshima.shimane.jp","ohda.shimane.jp","okinoshima.shimane.jp","okuizumo.shimane.jp","shimane.shimane.jp","tamayu.shimane.jp","tsuwano.shimane.jp","unnan.shimane.jp","yakumo.shimane.jp","yasugi.shimane.jp","yatsuka.shimane.jp","arai.shizuoka.jp","atami.shizuoka.jp","fuji.shizuoka.jp","fujieda.shizuoka.jp","fujikawa.shizuoka.jp","fujinomiya.shizuoka.jp","fukuroi.shizuoka.jp","gotemba.shizuoka.jp","haibara.shizuoka.jp","hamamatsu.shizuoka.jp","higashiizu.shizuoka.jp","ito.shizuoka.jp","iwata.shizuoka.jp","izu.shizuoka.jp","izunokuni.shizuoka.jp","kakegawa.shizuoka.jp","kannami.shizuoka.jp","kawanehon.shizuoka.jp","kawazu.shizuoka.jp","kikugawa.shizuoka.jp","kosai.shizuoka.jp","makinohara.shizuoka.jp","matsuzaki.shizuoka.jp","minamiizu.shizuoka.jp","mishima.shizuoka.jp","morimachi.shizuoka.jp","nishiizu.shizuoka.jp","numazu.shizuoka.jp","omaezaki.shizuoka.jp","shimada.shizuoka.jp","shimizu.shizuoka.jp","shimoda.shizuoka.jp","shizuoka.shizuoka.jp","susono.shizuoka.jp","yaizu.shizuoka.jp","yoshida.shizuoka.jp","ashikaga.tochigi.jp","bato.tochigi.jp","haga.tochigi.jp","ichikai.tochigi.jp","iwafune.tochigi.jp","kaminokawa.tochigi.jp","kanuma.tochigi.jp","karasuyama.tochigi.jp","kuroiso.tochigi.jp","mashiko.tochigi.jp","mibu.tochigi.jp","moka.tochigi.jp","motegi.tochigi.jp","nasu.tochigi.jp","nasushiobara.tochigi.jp","nikko.tochigi.jp","nishikata.tochigi.jp","nogi.tochigi.jp","ohira.tochigi.jp","ohtawara.tochigi.jp","oyama.tochigi.jp","sakura.tochigi.jp","sano.tochigi.jp","shimotsuke.tochigi.jp","shioya.tochigi.jp","takanezawa.tochigi.jp","tochigi.tochigi.jp","tsuga.tochigi.jp","ujiie.tochigi.jp","utsunomiya.tochigi.jp","yaita.tochigi.jp","aizumi.tokushima.jp","anan.tokushima.jp","ichiba.tokushima.jp","itano.tokushima.jp","kainan.tokushima.jp","komatsushima.tokushima.jp","matsushige.tokushima.jp","mima.tokushima.jp","minami.tokushima.jp","miyoshi.tokushima.jp","mugi.tokushima.jp","nakagawa.tokushima.jp","naruto.tokushima.jp","sanagochi.tokushima.jp","shishikui.tokushima.jp","tokushima.tokushima.jp","wajiki.tokushima.jp","adachi.tokyo.jp","akiruno.tokyo.jp","akishima.tokyo.jp","aogashima.tokyo.jp","arakawa.tokyo.jp","bunkyo.tokyo.jp","chiyoda.tokyo.jp","chofu.tokyo.jp","chuo.tokyo.jp","edogawa.tokyo.jp","fuchu.tokyo.jp","fussa.tokyo.jp","hachijo.tokyo.jp","hachioji.tokyo.jp","hamura.tokyo.jp","higashikurume.tokyo.jp","higashimurayama.tokyo.jp","higashiyamato.tokyo.jp","hino.tokyo.jp","hinode.tokyo.jp","hinohara.tokyo.jp","inagi.tokyo.jp","itabashi.tokyo.jp","katsushika.tokyo.jp","kita.tokyo.jp","kiyose.tokyo.jp","kodaira.tokyo.jp","koganei.tokyo.jp","kokubunji.tokyo.jp","komae.tokyo.jp","koto.tokyo.jp","kouzushima.tokyo.jp","kunitachi.tokyo.jp","machida.tokyo.jp","meguro.tokyo.jp","minato.tokyo.jp","mitaka.tokyo.jp","mizuho.tokyo.jp","musashimurayama.tokyo.jp","musashino.tokyo.jp","nakano.tokyo.jp","nerima.tokyo.jp","ogasawara.tokyo.jp","okutama.tokyo.jp","ome.tokyo.jp","oshima.tokyo.jp","ota.tokyo.jp","setagaya.tokyo.jp","shibuya.tokyo.jp","shinagawa.tokyo.jp","shinjuku.tokyo.jp","suginami.tokyo.jp","sumida.tokyo.jp","tachikawa.tokyo.jp","taito.tokyo.jp","tama.tokyo.jp","toshima.tokyo.jp","chizu.tottori.jp","hino.tottori.jp","kawahara.tottori.jp","koge.tottori.jp","kotoura.tottori.jp","misasa.tottori.jp","nanbu.tottori.jp","nichinan.tottori.jp","sakaiminato.tottori.jp","tottori.tottori.jp","wakasa.tottori.jp","yazu.tottori.jp","yonago.tottori.jp","asahi.toyama.jp","fuchu.toyama.jp","fukumitsu.toyama.jp","funahashi.toyama.jp","himi.toyama.jp","imizu.toyama.jp","inami.toyama.jp","johana.toyama.jp","kamiichi.toyama.jp","kurobe.toyama.jp","nakaniikawa.toyama.jp","namerikawa.toyama.jp","nanto.toyama.jp","nyuzen.toyama.jp","oyabe.toyama.jp","taira.toyama.jp","takaoka.toyama.jp","tateyama.toyama.jp","toga.toyama.jp","tonami.toyama.jp","toyama.toyama.jp","unazuki.toyama.jp","uozu.toyama.jp","yamada.toyama.jp","arida.wakayama.jp","aridagawa.wakayama.jp","gobo.wakayama.jp","hashimoto.wakayama.jp","hidaka.wakayama.jp","hirogawa.wakayama.jp","inami.wakayama.jp","iwade.wakayama.jp","kainan.wakayama.jp","kamitonda.wakayama.jp","katsuragi.wakayama.jp","kimino.wakayama.jp","kinokawa.wakayama.jp","kitayama.wakayama.jp","koya.wakayama.jp","koza.wakayama.jp","kozagawa.wakayama.jp","kudoyama.wakayama.jp","kushimoto.wakayama.jp","mihama.wakayama.jp","misato.wakayama.jp","nachikatsuura.wakayama.jp","shingu.wakayama.jp","shirahama.wakayama.jp","taiji.wakayama.jp","tanabe.wakayama.jp","wakayama.wakayama.jp","yuasa.wakayama.jp","yura.wakayama.jp","asahi.yamagata.jp","funagata.yamagata.jp","higashine.yamagata.jp","iide.yamagata.jp","kahoku.yamagata.jp","kaminoyama.yamagata.jp","kaneyama.yamagata.jp","kawanishi.yamagata.jp","mamurogawa.yamagata.jp","mikawa.yamagata.jp","murayama.yamagata.jp","nagai.yamagata.jp","nakayama.yamagata.jp","nanyo.yamagata.jp","nishikawa.yamagata.jp","obanazawa.yamagata.jp","oe.yamagata.jp","oguni.yamagata.jp","ohkura.yamagata.jp","oishida.yamagata.jp","sagae.yamagata.jp","sakata.yamagata.jp","sakegawa.yamagata.jp","shinjo.yamagata.jp","shirataka.yamagata.jp","shonai.yamagata.jp","takahata.yamagata.jp","tendo.yamagata.jp","tozawa.yamagata.jp","tsuruoka.yamagata.jp","yamagata.yamagata.jp","yamanobe.yamagata.jp","yonezawa.yamagata.jp","yuza.yamagata.jp","abu.yamaguchi.jp","hagi.yamaguchi.jp","hikari.yamaguchi.jp","hofu.yamaguchi.jp","iwakuni.yamaguchi.jp","kudamatsu.yamaguchi.jp","mitou.yamaguchi.jp","nagato.yamaguchi.jp","oshima.yamaguchi.jp","shimonoseki.yamaguchi.jp","shunan.yamaguchi.jp","tabuse.yamaguchi.jp","tokuyama.yamaguchi.jp","toyota.yamaguchi.jp","ube.yamaguchi.jp","yuu.yamaguchi.jp","chuo.yamanashi.jp","doshi.yamanashi.jp","fuefuki.yamanashi.jp","fujikawa.yamanashi.jp","fujikawaguchiko.yamanashi.jp","fujiyoshida.yamanashi.jp","hayakawa.yamanashi.jp","hokuto.yamanashi.jp","ichikawamisato.yamanashi.jp","kai.yamanashi.jp","kofu.yamanashi.jp","koshu.yamanashi.jp","kosuge.yamanashi.jp","minami-alps.yamanashi.jp","minobu.yamanashi.jp","nakamichi.yamanashi.jp","nanbu.yamanashi.jp","narusawa.yamanashi.jp","nirasaki.yamanashi.jp","nishikatsura.yamanashi.jp","oshino.yamanashi.jp","otsuki.yamanashi.jp","showa.yamanashi.jp","tabayama.yamanashi.jp","tsuru.yamanashi.jp","uenohara.yamanashi.jp","yamanakako.yamanashi.jp","yamanashi.yamanashi.jp","ke","ac.ke","co.ke","go.ke","info.ke","me.ke","mobi.ke","ne.ke","or.ke","sc.ke","kg","org.kg","net.kg","com.kg","edu.kg","gov.kg","mil.kg","*.kh","ki","edu.ki","biz.ki","net.ki","org.ki","gov.ki","info.ki","com.ki","km","org.km","nom.km","gov.km","prd.km","tm.km","edu.km","mil.km","ass.km","com.km","coop.km","asso.km","presse.km","medecin.km","notaires.km","pharmaciens.km","veterinaire.km","gouv.km","kn","net.kn","org.kn","edu.kn","gov.kn","kp","com.kp","edu.kp","gov.kp","org.kp","rep.kp","tra.kp","kr","ac.kr","co.kr","es.kr","go.kr","hs.kr","kg.kr","mil.kr","ms.kr","ne.kr","or.kr","pe.kr","re.kr","sc.kr","busan.kr","chungbuk.kr","chungnam.kr","daegu.kr","daejeon.kr","gangwon.kr","gwangju.kr","gyeongbuk.kr","gyeonggi.kr","gyeongnam.kr","incheon.kr","jeju.kr","jeonbuk.kr","jeonnam.kr","seoul.kr","ulsan.kr","kw","com.kw","edu.kw","emb.kw","gov.kw","ind.kw","net.kw","org.kw","ky","edu.ky","gov.ky","com.ky","org.ky","net.ky","kz","org.kz","edu.kz","net.kz","gov.kz","mil.kz","com.kz","la","int.la","net.la","info.la","edu.la","gov.la","per.la","com.la","org.la","lb","com.lb","edu.lb","gov.lb","net.lb","org.lb","lc","com.lc","net.lc","co.lc","org.lc","edu.lc","gov.lc","li","lk","gov.lk","sch.lk","net.lk","int.lk","com.lk","org.lk","edu.lk","ngo.lk","soc.lk","web.lk","ltd.lk","assn.lk","grp.lk","hotel.lk","ac.lk","lr","com.lr","edu.lr","gov.lr","org.lr","net.lr","ls","co.ls","org.ls","lt","gov.lt","lu","lv","com.lv","edu.lv","gov.lv","org.lv","mil.lv","id.lv","net.lv","asn.lv","conf.lv","ly","com.ly","net.ly","gov.ly","plc.ly","edu.ly","sch.ly","med.ly","org.ly","id.ly","ma","co.ma","net.ma","gov.ma","org.ma","ac.ma","press.ma","mc","tm.mc","asso.mc","md","me","co.me","net.me","org.me","edu.me","ac.me","gov.me","its.me","priv.me","mg","org.mg","nom.mg","gov.mg","prd.mg","tm.mg","edu.mg","mil.mg","com.mg","co.mg","mh","mil","mk","com.mk","org.mk","net.mk","edu.mk","gov.mk","inf.mk","name.mk","ml","com.ml","edu.ml","gouv.ml","gov.ml","net.ml","org.ml","presse.ml","*.mm","mn","gov.mn","edu.mn","org.mn","mo","com.mo","net.mo","org.mo","edu.mo","gov.mo","mobi","mp","mq","mr","gov.mr","ms","com.ms","edu.ms","gov.ms","net.ms","org.ms","mt","com.mt","edu.mt","net.mt","org.mt","mu","com.mu","net.mu","org.mu","gov.mu","ac.mu","co.mu","or.mu","museum","academy.museum","agriculture.museum","air.museum","airguard.museum","alabama.museum","alaska.museum","amber.museum","ambulance.museum","american.museum","americana.museum","americanantiques.museum","americanart.museum","amsterdam.museum","and.museum","annefrank.museum","anthro.museum","anthropology.museum","antiques.museum","aquarium.museum","arboretum.museum","archaeological.museum","archaeology.museum","architecture.museum","art.museum","artanddesign.museum","artcenter.museum","artdeco.museum","arteducation.museum","artgallery.museum","arts.museum","artsandcrafts.museum","asmatart.museum","assassination.museum","assisi.museum","association.museum","astronomy.museum","atlanta.museum","austin.museum","australia.museum","automotive.museum","aviation.museum","axis.museum","badajoz.museum","baghdad.museum","bahn.museum","bale.museum","baltimore.museum","barcelona.museum","baseball.museum","basel.museum","baths.museum","bauern.museum","beauxarts.museum","beeldengeluid.museum","bellevue.museum","bergbau.museum","berkeley.museum","berlin.museum","bern.museum","bible.museum","bilbao.museum","bill.museum","birdart.museum","birthplace.museum","bonn.museum","boston.museum","botanical.museum","botanicalgarden.museum","botanicgarden.museum","botany.museum","brandywinevalley.museum","brasil.museum","bristol.museum","british.museum","britishcolumbia.museum","broadcast.museum","brunel.museum","brussel.museum","brussels.museum","bruxelles.museum","building.museum","burghof.museum","bus.museum","bushey.museum","cadaques.museum","california.museum","cambridge.museum","can.museum","canada.museum","capebreton.museum","carrier.museum","cartoonart.museum","casadelamoneda.museum","castle.museum","castres.museum","celtic.museum","center.museum","chattanooga.museum","cheltenham.museum","chesapeakebay.museum","chicago.museum","children.museum","childrens.museum","childrensgarden.museum","chiropractic.museum","chocolate.museum","christiansburg.museum","cincinnati.museum","cinema.museum","circus.museum","civilisation.museum","civilization.museum","civilwar.museum","clinton.museum","clock.museum","coal.museum","coastaldefence.museum","cody.museum","coldwar.museum","collection.museum","colonialwilliamsburg.museum","coloradoplateau.museum","columbia.museum","columbus.museum","communication.museum","communications.museum","community.museum","computer.museum","computerhistory.museum","comunicações.museum","contemporary.museum","contemporaryart.museum","convent.museum","copenhagen.museum","corporation.museum","correios-e-telecomunicações.museum","corvette.museum","costume.museum","countryestate.museum","county.museum","crafts.museum","cranbrook.museum","creation.museum","cultural.museum","culturalcenter.museum","culture.museum","cyber.museum","cymru.museum","dali.museum","dallas.museum","database.museum","ddr.museum","decorativearts.museum","delaware.museum","delmenhorst.museum","denmark.museum","depot.museum","design.museum","detroit.museum","dinosaur.museum","discovery.museum","dolls.museum","donostia.museum","durham.museum","eastafrica.museum","eastcoast.museum","education.museum","educational.museum","egyptian.museum","eisenbahn.museum","elburg.museum","elvendrell.museum","embroidery.museum","encyclopedic.museum","england.museum","entomology.museum","environment.museum","environmentalconservation.museum","epilepsy.museum","essex.museum","estate.museum","ethnology.museum","exeter.museum","exhibition.museum","family.museum","farm.museum","farmequipment.museum","farmers.museum","farmstead.museum","field.museum","figueres.museum","filatelia.museum","film.museum","fineart.museum","finearts.museum","finland.museum","flanders.museum","florida.museum","force.museum","fortmissoula.museum","fortworth.museum","foundation.museum","francaise.museum","frankfurt.museum","franziskaner.museum","freemasonry.museum","freiburg.museum","fribourg.museum","frog.museum","fundacio.museum","furniture.museum","gallery.museum","garden.museum","gateway.museum","geelvinck.museum","gemological.museum","geology.museum","georgia.museum","giessen.museum","glas.museum","glass.museum","gorge.museum","grandrapids.museum","graz.museum","guernsey.museum","halloffame.museum","hamburg.museum","handson.museum","harvestcelebration.museum","hawaii.museum","health.museum","heimatunduhren.museum","hellas.museum","helsinki.museum","hembygdsforbund.museum","heritage.museum","histoire.museum","historical.museum","historicalsociety.museum","historichouses.museum","historisch.museum","historisches.museum","history.museum","historyofscience.museum","horology.museum","house.museum","humanities.museum","illustration.museum","imageandsound.museum","indian.museum","indiana.museum","indianapolis.museum","indianmarket.museum","intelligence.museum","interactive.museum","iraq.museum","iron.museum","isleofman.museum","jamison.museum","jefferson.museum","jerusalem.museum","jewelry.museum","jewish.museum","jewishart.museum","jfk.museum","journalism.museum","judaica.museum","judygarland.museum","juedisches.museum","juif.museum","karate.museum","karikatur.museum","kids.museum","koebenhavn.museum","koeln.museum","kunst.museum","kunstsammlung.museum","kunstunddesign.museum","labor.museum","labour.museum","lajolla.museum","lancashire.museum","landes.museum","lans.museum","läns.museum","larsson.museum","lewismiller.museum","lincoln.museum","linz.museum","living.museum","livinghistory.museum","localhistory.museum","london.museum","losangeles.museum","louvre.museum","loyalist.museum","lucerne.museum","luxembourg.museum","luzern.museum","mad.museum","madrid.museum","mallorca.museum","manchester.museum","mansion.museum","mansions.museum","manx.museum","marburg.museum","maritime.museum","maritimo.museum","maryland.museum","marylhurst.museum","media.museum","medical.museum","medizinhistorisches.museum","meeres.museum","memorial.museum","mesaverde.museum","michigan.museum","midatlantic.museum","military.museum","mill.museum","miners.museum","mining.museum","minnesota.museum","missile.museum","missoula.museum","modern.museum","moma.museum","money.museum","monmouth.museum","monticello.museum","montreal.museum","moscow.museum","motorcycle.museum","muenchen.museum","muenster.museum","mulhouse.museum","muncie.museum","museet.museum","museumcenter.museum","museumvereniging.museum","music.museum","national.museum","nationalfirearms.museum","nationalheritage.museum","nativeamerican.museum","naturalhistory.museum","naturalhistorymuseum.museum","naturalsciences.museum","nature.museum","naturhistorisches.museum","natuurwetenschappen.museum","naumburg.museum","naval.museum","nebraska.museum","neues.museum","newhampshire.museum","newjersey.museum","newmexico.museum","newport.museum","newspaper.museum","newyork.museum","niepce.museum","norfolk.museum","north.museum","nrw.museum","nuernberg.museum","nuremberg.museum","nyc.museum","nyny.museum","oceanographic.museum","oceanographique.museum","omaha.museum","online.museum","ontario.museum","openair.museum","oregon.museum","oregontrail.museum","otago.museum","oxford.museum","pacific.museum","paderborn.museum","palace.museum","paleo.museum","palmsprings.museum","panama.museum","paris.museum","pasadena.museum","pharmacy.museum","philadelphia.museum","philadelphiaarea.museum","philately.museum","phoenix.museum","photography.museum","pilots.museum","pittsburgh.museum","planetarium.museum","plantation.museum","plants.museum","plaza.museum","portal.museum","portland.museum","portlligat.museum","posts-and-telecommunications.museum","preservation.museum","presidio.museum","press.museum","project.museum","public.museum","pubol.museum","quebec.museum","railroad.museum","railway.museum","research.museum","resistance.museum","riodejaneiro.museum","rochester.museum","rockart.museum","roma.museum","russia.museum","saintlouis.museum","salem.museum","salvadordali.museum","salzburg.museum","sandiego.museum","sanfrancisco.museum","santabarbara.museum","santacruz.museum","santafe.museum","saskatchewan.museum","satx.museum","savannahga.museum","schlesisches.museum","schoenbrunn.museum","schokoladen.museum","school.museum","schweiz.museum","science.museum","scienceandhistory.museum","scienceandindustry.museum","sciencecenter.museum","sciencecenters.museum","science-fiction.museum","sciencehistory.museum","sciences.museum","sciencesnaturelles.museum","scotland.museum","seaport.museum","settlement.museum","settlers.museum","shell.museum","sherbrooke.museum","sibenik.museum","silk.museum","ski.museum","skole.museum","society.museum","sologne.museum","soundandvision.museum","southcarolina.museum","southwest.museum","space.museum","spy.museum","square.museum","stadt.museum","stalbans.museum","starnberg.museum","state.museum","stateofdelaware.museum","station.museum","steam.museum","steiermark.museum","stjohn.museum","stockholm.museum","stpetersburg.museum","stuttgart.museum","suisse.museum","surgeonshall.museum","surrey.museum","svizzera.museum","sweden.museum","sydney.museum","tank.museum","tcm.museum","technology.museum","telekommunikation.museum","television.museum","texas.museum","textile.museum","theater.museum","time.museum","timekeeping.museum","topology.museum","torino.museum","touch.museum","town.museum","transport.museum","tree.museum","trolley.museum","trust.museum","trustee.museum","uhren.museum","ulm.museum","undersea.museum","university.museum","usa.museum","usantiques.museum","usarts.museum","uscountryestate.museum","usculture.museum","usdecorativearts.museum","usgarden.museum","ushistory.museum","ushuaia.museum","uslivinghistory.museum","utah.museum","uvic.museum","valley.museum","vantaa.museum","versailles.museum","viking.museum","village.museum","virginia.museum","virtual.museum","virtuel.museum","vlaanderen.museum","volkenkunde.museum","wales.museum","wallonie.museum","war.museum","washingtondc.museum","watchandclock.museum","watch-and-clock.museum","western.museum","westfalen.museum","whaling.museum","wildlife.museum","williamsburg.museum","windmill.museum","workshop.museum","york.museum","yorkshire.museum","yosemite.museum","youth.museum","zoological.museum","zoology.museum","ירושלים.museum","иком.museum","mv","aero.mv","biz.mv","com.mv","coop.mv","edu.mv","gov.mv","info.mv","int.mv","mil.mv","museum.mv","name.mv","net.mv","org.mv","pro.mv","mw","ac.mw","biz.mw","co.mw","com.mw","coop.mw","edu.mw","gov.mw","int.mw","museum.mw","net.mw","org.mw","mx","com.mx","org.mx","gob.mx","edu.mx","net.mx","my","com.my","net.my","org.my","gov.my","edu.my","mil.my","name.my","mz","ac.mz","adv.mz","co.mz","edu.mz","gov.mz","mil.mz","net.mz","org.mz","na","info.na","pro.na","name.na","school.na","or.na","dr.na","us.na","mx.na","ca.na","in.na","cc.na","tv.na","ws.na","mobi.na","co.na","com.na","org.na","name","nc","asso.nc","nom.nc","ne","net","nf","com.nf","net.nf","per.nf","rec.nf","web.nf","arts.nf","firm.nf","info.nf","other.nf","store.nf","ng","com.ng","edu.ng","gov.ng","i.ng","mil.ng","mobi.ng","name.ng","net.ng","org.ng","sch.ng","ni","ac.ni","biz.ni","co.ni","com.ni","edu.ni","gob.ni","in.ni","info.ni","int.ni","mil.ni","net.ni","nom.ni","org.ni","web.ni","nl","bv.nl","no","fhs.no","vgs.no","fylkesbibl.no","folkebibl.no","museum.no","idrett.no","priv.no","mil.no","stat.no","dep.no","kommune.no","herad.no","aa.no","ah.no","bu.no","fm.no","hl.no","hm.no","jan-mayen.no","mr.no","nl.no","nt.no","of.no","ol.no","oslo.no","rl.no","sf.no","st.no","svalbard.no","tm.no","tr.no","va.no","vf.no","gs.aa.no","gs.ah.no","gs.bu.no","gs.fm.no","gs.hl.no","gs.hm.no","gs.jan-mayen.no","gs.mr.no","gs.nl.no","gs.nt.no","gs.of.no","gs.ol.no","gs.oslo.no","gs.rl.no","gs.sf.no","gs.st.no","gs.svalbard.no","gs.tm.no","gs.tr.no","gs.va.no","gs.vf.no","akrehamn.no","åkrehamn.no","algard.no","ålgård.no","arna.no","brumunddal.no","bryne.no","bronnoysund.no","brønnøysund.no","drobak.no","drøbak.no","egersund.no","fetsund.no","floro.no","florø.no","fredrikstad.no","hokksund.no","honefoss.no","hønefoss.no","jessheim.no","jorpeland.no","jørpeland.no","kirkenes.no","kopervik.no","krokstadelva.no","langevag.no","langevåg.no","leirvik.no","mjondalen.no","mjøndalen.no","mo-i-rana.no","mosjoen.no","mosjøen.no","nesoddtangen.no","orkanger.no","osoyro.no","osøyro.no","raholt.no","råholt.no","sandnessjoen.no","sandnessjøen.no","skedsmokorset.no","slattum.no","spjelkavik.no","stathelle.no","stavern.no","stjordalshalsen.no","stjørdalshalsen.no","tananger.no","tranby.no","vossevangen.no","afjord.no","åfjord.no","agdenes.no","al.no","ål.no","alesund.no","ålesund.no","alstahaug.no","alta.no","áltá.no","alaheadju.no","álaheadju.no","alvdal.no","amli.no","åmli.no","amot.no","åmot.no","andebu.no","andoy.no","andøy.no","andasuolo.no","ardal.no","årdal.no","aremark.no","arendal.no","ås.no","aseral.no","åseral.no","asker.no","askim.no","askvoll.no","askoy.no","askøy.no","asnes.no","åsnes.no","audnedaln.no","aukra.no","aure.no","aurland.no","aurskog-holand.no","aurskog-høland.no","austevoll.no","austrheim.no","averoy.no","averøy.no","balestrand.no","ballangen.no","balat.no","bálát.no","balsfjord.no","bahccavuotna.no","báhccavuotna.no","bamble.no","bardu.no","beardu.no","beiarn.no","bajddar.no","bájddar.no","baidar.no","báidár.no","berg.no","bergen.no","berlevag.no","berlevåg.no","bearalvahki.no","bearalváhki.no","bindal.no","birkenes.no","bjarkoy.no","bjarkøy.no","bjerkreim.no","bjugn.no","bodo.no","bodø.no","badaddja.no","bådåddjå.no","budejju.no","bokn.no","bremanger.no","bronnoy.no","brønnøy.no","bygland.no","bykle.no","barum.no","bærum.no","bo.telemark.no","bø.telemark.no","bo.nordland.no","bø.nordland.no","bievat.no","bievát.no","bomlo.no","bømlo.no","batsfjord.no","båtsfjord.no","bahcavuotna.no","báhcavuotna.no","dovre.no","drammen.no","drangedal.no","dyroy.no","dyrøy.no","donna.no","dønna.no","eid.no","eidfjord.no","eidsberg.no","eidskog.no","eidsvoll.no","eigersund.no","elverum.no","enebakk.no","engerdal.no","etne.no","etnedal.no","evenes.no","evenassi.no","evenášši.no","evje-og-hornnes.no","farsund.no","fauske.no","fuossko.no","fuoisku.no","fedje.no","fet.no","finnoy.no","finnøy.no","fitjar.no","fjaler.no","fjell.no","flakstad.no","flatanger.no","flekkefjord.no","flesberg.no","flora.no","fla.no","flå.no","folldal.no","forsand.no","fosnes.no","frei.no","frogn.no","froland.no","frosta.no","frana.no","fræna.no","froya.no","frøya.no","fusa.no","fyresdal.no","forde.no","førde.no","gamvik.no","gangaviika.no","gáŋgaviika.no","gaular.no","gausdal.no","gildeskal.no","gildeskål.no","giske.no","gjemnes.no","gjerdrum.no","gjerstad.no","gjesdal.no","gjovik.no","gjøvik.no","gloppen.no","gol.no","gran.no","grane.no","granvin.no","gratangen.no","grimstad.no","grong.no","kraanghke.no","kråanghke.no","grue.no","gulen.no","hadsel.no","halden.no","halsa.no","hamar.no","hamaroy.no","habmer.no","hábmer.no","hapmir.no","hápmir.no","hammerfest.no","hammarfeasta.no","hámmárfeasta.no","haram.no","hareid.no","harstad.no","hasvik.no","aknoluokta.no","ákŋoluokta.no","hattfjelldal.no","aarborte.no","haugesund.no","hemne.no","hemnes.no","hemsedal.no","heroy.more-og-romsdal.no","herøy.møre-og-romsdal.no","heroy.nordland.no","herøy.nordland.no","hitra.no","hjartdal.no","hjelmeland.no","hobol.no","hobøl.no","hof.no","hol.no","hole.no","holmestrand.no","holtalen.no","holtålen.no","hornindal.no","horten.no","hurdal.no","hurum.no","hvaler.no","hyllestad.no","hagebostad.no","hægebostad.no","hoyanger.no","høyanger.no","hoylandet.no","høylandet.no","ha.no","hå.no","ibestad.no","inderoy.no","inderøy.no","iveland.no","jevnaker.no","jondal.no","jolster.no","jølster.no","karasjok.no","karasjohka.no","kárášjohka.no","karlsoy.no","galsa.no","gálsá.no","karmoy.no","karmøy.no","kautokeino.no","guovdageaidnu.no","klepp.no","klabu.no","klæbu.no","kongsberg.no","kongsvinger.no","kragero.no","kragerø.no","kristiansand.no","kristiansund.no","krodsherad.no","krødsherad.no","kvalsund.no","rahkkeravju.no","ráhkkerávju.no","kvam.no","kvinesdal.no","kvinnherad.no","kviteseid.no","kvitsoy.no","kvitsøy.no","kvafjord.no","kvæfjord.no","giehtavuoatna.no","kvanangen.no","kvænangen.no","navuotna.no","návuotna.no","kafjord.no","kåfjord.no","gaivuotna.no","gáivuotna.no","larvik.no","lavangen.no","lavagis.no","loabat.no","loabát.no","lebesby.no","davvesiida.no","leikanger.no","leirfjord.no","leka.no","leksvik.no","lenvik.no","leangaviika.no","leaŋgaviika.no","lesja.no","levanger.no","lier.no","lierne.no","lillehammer.no","lillesand.no","lindesnes.no","lindas.no","lindås.no","lom.no","loppa.no","lahppi.no","láhppi.no","lund.no","lunner.no","luroy.no","lurøy.no","luster.no","lyngdal.no","lyngen.no","ivgu.no","lardal.no","lerdal.no","lærdal.no","lodingen.no","lødingen.no","lorenskog.no","lørenskog.no","loten.no","løten.no","malvik.no","masoy.no","måsøy.no","muosat.no","muosát.no","mandal.no","marker.no","marnardal.no","masfjorden.no","meland.no","meldal.no","melhus.no","meloy.no","meløy.no","meraker.no","meråker.no","moareke.no","moåreke.no","midsund.no","midtre-gauldal.no","modalen.no","modum.no","molde.no","moskenes.no","moss.no","mosvik.no","malselv.no","målselv.no","malatvuopmi.no","málatvuopmi.no","namdalseid.no","aejrie.no","namsos.no","namsskogan.no","naamesjevuemie.no","nååmesjevuemie.no","laakesvuemie.no","nannestad.no","narvik.no","narviika.no","naustdal.no","nedre-eiker.no","nes.akershus.no","nes.buskerud.no","nesna.no","nesodden.no","nesseby.no","unjarga.no","unjárga.no","nesset.no","nissedal.no","nittedal.no","nord-aurdal.no","nord-fron.no","nord-odal.no","norddal.no","nordkapp.no","davvenjarga.no","davvenjárga.no","nordre-land.no","nordreisa.no","raisa.no","ráisa.no","nore-og-uvdal.no","notodden.no","naroy.no","nærøy.no","notteroy.no","nøtterøy.no","odda.no","oksnes.no","øksnes.no","oppdal.no","oppegard.no","oppegård.no","orkdal.no","orland.no","ørland.no","orskog.no","ørskog.no","orsta.no","ørsta.no","os.hedmark.no","os.hordaland.no","osen.no","osteroy.no","osterøy.no","ostre-toten.no","østre-toten.no","overhalla.no","ovre-eiker.no","øvre-eiker.no","oyer.no","øyer.no","oygarden.no","øygarden.no","oystre-slidre.no","øystre-slidre.no","porsanger.no","porsangu.no","porsáŋgu.no","porsgrunn.no","radoy.no","radøy.no","rakkestad.no","rana.no","ruovat.no","randaberg.no","rauma.no","rendalen.no","rennebu.no","rennesoy.no","rennesøy.no","rindal.no","ringebu.no","ringerike.no","ringsaker.no","rissa.no","risor.no","risør.no","roan.no","rollag.no","rygge.no","ralingen.no","rælingen.no","rodoy.no","rødøy.no","romskog.no","rømskog.no","roros.no","røros.no","rost.no","røst.no","royken.no","røyken.no","royrvik.no","røyrvik.no","rade.no","råde.no","salangen.no","siellak.no","saltdal.no","salat.no","sálát.no","sálat.no","samnanger.no","sande.more-og-romsdal.no","sande.møre-og-romsdal.no","sande.vestfold.no","sandefjord.no","sandnes.no","sandoy.no","sandøy.no","sarpsborg.no","sauda.no","sauherad.no","sel.no","selbu.no","selje.no","seljord.no","sigdal.no","siljan.no","sirdal.no","skaun.no","skedsmo.no","ski.no","skien.no","skiptvet.no","skjervoy.no","skjervøy.no","skierva.no","skiervá.no","skjak.no","skjåk.no","skodje.no","skanland.no","skånland.no","skanit.no","skánit.no","smola.no","smøla.no","snillfjord.no","snasa.no","snåsa.no","snoasa.no","snaase.no","snåase.no","sogndal.no","sokndal.no","sola.no","solund.no","songdalen.no","sortland.no","spydeberg.no","stange.no","stavanger.no","steigen.no","steinkjer.no","stjordal.no","stjørdal.no","stokke.no","stor-elvdal.no","stord.no","stordal.no","storfjord.no","omasvuotna.no","strand.no","stranda.no","stryn.no","sula.no","suldal.no","sund.no","sunndal.no","surnadal.no","sveio.no","svelvik.no","sykkylven.no","sogne.no","søgne.no","somna.no","sømna.no","sondre-land.no","søndre-land.no","sor-aurdal.no","sør-aurdal.no","sor-fron.no","sør-fron.no","sor-odal.no","sør-odal.no","sor-varanger.no","sør-varanger.no","matta-varjjat.no","mátta-várjjat.no","sorfold.no","sørfold.no","sorreisa.no","sørreisa.no","sorum.no","sørum.no","tana.no","deatnu.no","time.no","tingvoll.no","tinn.no","tjeldsund.no","dielddanuorri.no","tjome.no","tjøme.no","tokke.no","tolga.no","torsken.no","tranoy.no","tranøy.no","tromso.no","tromsø.no","tromsa.no","romsa.no","trondheim.no","troandin.no","trysil.no","trana.no","træna.no","trogstad.no","trøgstad.no","tvedestrand.no","tydal.no","tynset.no","tysfjord.no","divtasvuodna.no","divttasvuotna.no","tysnes.no","tysvar.no","tysvær.no","tonsberg.no","tønsberg.no","ullensaker.no","ullensvang.no","ulvik.no","utsira.no","vadso.no","vadsø.no","cahcesuolo.no","čáhcesuolo.no","vaksdal.no","valle.no","vang.no","vanylven.no","vardo.no","vardø.no","varggat.no","várggát.no","vefsn.no","vaapste.no","vega.no","vegarshei.no","vegårshei.no","vennesla.no","verdal.no","verran.no","vestby.no","vestnes.no","vestre-slidre.no","vestre-toten.no","vestvagoy.no","vestvågøy.no","vevelstad.no","vik.no","vikna.no","vindafjord.no","volda.no","voss.no","varoy.no","værøy.no","vagan.no","vågan.no","voagat.no","vagsoy.no","vågsøy.no","vaga.no","vågå.no","valer.ostfold.no","våler.østfold.no","valer.hedmark.no","våler.hedmark.no","*.np","nr","biz.nr","info.nr","gov.nr","edu.nr","org.nr","net.nr","com.nr","nu","nz","ac.nz","co.nz","cri.nz","geek.nz","gen.nz","govt.nz","health.nz","iwi.nz","kiwi.nz","maori.nz","mil.nz","māori.nz","net.nz","org.nz","parliament.nz","school.nz","om","co.om","com.om","edu.om","gov.om","med.om","museum.om","net.om","org.om","pro.om","onion","org","pa","ac.pa","gob.pa","com.pa","org.pa","sld.pa","edu.pa","net.pa","ing.pa","abo.pa","med.pa","nom.pa","pe","edu.pe","gob.pe","nom.pe","mil.pe","org.pe","com.pe","net.pe","pf","com.pf","org.pf","edu.pf","*.pg","ph","com.ph","net.ph","org.ph","gov.ph","edu.ph","ngo.ph","mil.ph","i.ph","pk","com.pk","net.pk","edu.pk","org.pk","fam.pk","biz.pk","web.pk","gov.pk","gob.pk","gok.pk","gon.pk","gop.pk","gos.pk","info.pk","pl","com.pl","net.pl","org.pl","aid.pl","agro.pl","atm.pl","auto.pl","biz.pl","edu.pl","gmina.pl","gsm.pl","info.pl","mail.pl","miasta.pl","media.pl","mil.pl","nieruchomosci.pl","nom.pl","pc.pl","powiat.pl","priv.pl","realestate.pl","rel.pl","sex.pl","shop.pl","sklep.pl","sos.pl","szkola.pl","targi.pl","tm.pl","tourism.pl","travel.pl","turystyka.pl","gov.pl","ap.gov.pl","ic.gov.pl","is.gov.pl","us.gov.pl","kmpsp.gov.pl","kppsp.gov.pl","kwpsp.gov.pl","psp.gov.pl","wskr.gov.pl","kwp.gov.pl","mw.gov.pl","ug.gov.pl","um.gov.pl","umig.gov.pl","ugim.gov.pl","upow.gov.pl","uw.gov.pl","starostwo.gov.pl","pa.gov.pl","po.gov.pl","psse.gov.pl","pup.gov.pl","rzgw.gov.pl","sa.gov.pl","so.gov.pl","sr.gov.pl","wsa.gov.pl","sko.gov.pl","uzs.gov.pl","wiih.gov.pl","winb.gov.pl","pinb.gov.pl","wios.gov.pl","witd.gov.pl","wzmiuw.gov.pl","piw.gov.pl","wiw.gov.pl","griw.gov.pl","wif.gov.pl","oum.gov.pl","sdn.gov.pl","zp.gov.pl","uppo.gov.pl","mup.gov.pl","wuoz.gov.pl","konsulat.gov.pl","oirm.gov.pl","augustow.pl","babia-gora.pl","bedzin.pl","beskidy.pl","bialowieza.pl","bialystok.pl","bielawa.pl","bieszczady.pl","boleslawiec.pl","bydgoszcz.pl","bytom.pl","cieszyn.pl","czeladz.pl","czest.pl","dlugoleka.pl","elblag.pl","elk.pl","glogow.pl","gniezno.pl","gorlice.pl","grajewo.pl","ilawa.pl","jaworzno.pl","jelenia-gora.pl","jgora.pl","kalisz.pl","kazimierz-dolny.pl","karpacz.pl","kartuzy.pl","kaszuby.pl","katowice.pl","kepno.pl","ketrzyn.pl","klodzko.pl","kobierzyce.pl","kolobrzeg.pl","konin.pl","konskowola.pl","kutno.pl","lapy.pl","lebork.pl","legnica.pl","lezajsk.pl","limanowa.pl","lomza.pl","lowicz.pl","lubin.pl","lukow.pl","malbork.pl","malopolska.pl","mazowsze.pl","mazury.pl","mielec.pl","mielno.pl","mragowo.pl","naklo.pl","nowaruda.pl","nysa.pl","olawa.pl","olecko.pl","olkusz.pl","olsztyn.pl","opoczno.pl","opole.pl","ostroda.pl","ostroleka.pl","ostrowiec.pl","ostrowwlkp.pl","pila.pl","pisz.pl","podhale.pl","podlasie.pl","polkowice.pl","pomorze.pl","pomorskie.pl","prochowice.pl","pruszkow.pl","przeworsk.pl","pulawy.pl","radom.pl","rawa-maz.pl","rybnik.pl","rzeszow.pl","sanok.pl","sejny.pl","slask.pl","slupsk.pl","sosnowiec.pl","stalowa-wola.pl","skoczow.pl","starachowice.pl","stargard.pl","suwalki.pl","swidnica.pl","swiebodzin.pl","swinoujscie.pl","szczecin.pl","szczytno.pl","tarnobrzeg.pl","tgory.pl","turek.pl","tychy.pl","ustka.pl","walbrzych.pl","warmia.pl","warszawa.pl","waw.pl","wegrow.pl","wielun.pl","wlocl.pl","wloclawek.pl","wodzislaw.pl","wolomin.pl","wroclaw.pl","zachpomor.pl","zagan.pl","zarow.pl","zgora.pl","zgorzelec.pl","pm","pn","gov.pn","co.pn","org.pn","edu.pn","net.pn","post","pr","com.pr","net.pr","org.pr","gov.pr","edu.pr","isla.pr","pro.pr","biz.pr","info.pr","name.pr","est.pr","prof.pr","ac.pr","pro","aaa.pro","aca.pro","acct.pro","avocat.pro","bar.pro","cpa.pro","eng.pro","jur.pro","law.pro","med.pro","recht.pro","ps","edu.ps","gov.ps","sec.ps","plo.ps","com.ps","org.ps","net.ps","pt","net.pt","gov.pt","org.pt","edu.pt","int.pt","publ.pt","com.pt","nome.pt","pw","co.pw","ne.pw","or.pw","ed.pw","go.pw","belau.pw","py","com.py","coop.py","edu.py","gov.py","mil.py","net.py","org.py","qa","com.qa","edu.qa","gov.qa","mil.qa","name.qa","net.qa","org.qa","sch.qa","re","asso.re","com.re","nom.re","ro","arts.ro","com.ro","firm.ro","info.ro","nom.ro","nt.ro","org.ro","rec.ro","store.ro","tm.ro","www.ro","rs","ac.rs","co.rs","edu.rs","gov.rs","in.rs","org.rs","ru","ac.ru","edu.ru","gov.ru","int.ru","mil.ru","test.ru","rw","gov.rw","net.rw","edu.rw","ac.rw","com.rw","co.rw","int.rw","mil.rw","gouv.rw","sa","com.sa","net.sa","org.sa","gov.sa","med.sa","pub.sa","edu.sa","sch.sa","sb","com.sb","edu.sb","gov.sb","net.sb","org.sb","sc","com.sc","gov.sc","net.sc","org.sc","edu.sc","sd","com.sd","net.sd","org.sd","edu.sd","med.sd","tv.sd","gov.sd","info.sd","se","a.se","ac.se","b.se","bd.se","brand.se","c.se","d.se","e.se","f.se","fh.se","fhsk.se","fhv.se","g.se","h.se","i.se","k.se","komforb.se","kommunalforbund.se","komvux.se","l.se","lanbib.se","m.se","n.se","naturbruksgymn.se","o.se","org.se","p.se","parti.se","pp.se","press.se","r.se","s.se","t.se","tm.se","u.se","w.se","x.se","y.se","z.se","sg","com.sg","net.sg","org.sg","gov.sg","edu.sg","per.sg","sh","com.sh","net.sh","gov.sh","org.sh","mil.sh","si","sj","sk","sl","com.sl","net.sl","edu.sl","gov.sl","org.sl","sm","sn","art.sn","com.sn","edu.sn","gouv.sn","org.sn","perso.sn","univ.sn","so","com.so","net.so","org.so","sr","st","co.st","com.st","consulado.st","edu.st","embaixada.st","gov.st","mil.st","net.st","org.st","principe.st","saotome.st","store.st","su","sv","com.sv","edu.sv","gob.sv","org.sv","red.sv","sx","gov.sx","sy","edu.sy","gov.sy","net.sy","mil.sy","com.sy","org.sy","sz","co.sz","ac.sz","org.sz","tc","td","tel","tf","tg","th","ac.th","co.th","go.th","in.th","mi.th","net.th","or.th","tj","ac.tj","biz.tj","co.tj","com.tj","edu.tj","go.tj","gov.tj","int.tj","mil.tj","name.tj","net.tj","nic.tj","org.tj","test.tj","web.tj","tk","tl","gov.tl","tm","com.tm","co.tm","org.tm","net.tm","nom.tm","gov.tm","mil.tm","edu.tm","tn","com.tn","ens.tn","fin.tn","gov.tn","ind.tn","intl.tn","nat.tn","net.tn","org.tn","info.tn","perso.tn","tourism.tn","edunet.tn","rnrt.tn","rns.tn","rnu.tn","mincom.tn","agrinet.tn","defense.tn","turen.tn","to","com.to","gov.to","net.to","org.to","edu.to","mil.to","tr","com.tr","info.tr","biz.tr","net.tr","org.tr","web.tr","gen.tr","tv.tr","av.tr","dr.tr","bbs.tr","name.tr","tel.tr","gov.tr","bel.tr","pol.tr","mil.tr","k12.tr","edu.tr","kep.tr","nc.tr","gov.nc.tr","tt","co.tt","com.tt","org.tt","net.tt","biz.tt","info.tt","pro.tt","int.tt","coop.tt","jobs.tt","mobi.tt","travel.tt","museum.tt","aero.tt","name.tt","gov.tt","edu.tt","tv","tw","edu.tw","gov.tw","mil.tw","com.tw","net.tw","org.tw","idv.tw","game.tw","ebiz.tw","club.tw","網路.tw","組織.tw","商業.tw","tz","ac.tz","co.tz","go.tz","hotel.tz","info.tz","me.tz","mil.tz","mobi.tz","ne.tz","or.tz","sc.tz","tv.tz","ua","com.ua","edu.ua","gov.ua","in.ua","net.ua","org.ua","cherkassy.ua","cherkasy.ua","chernigov.ua","chernihiv.ua","chernivtsi.ua","chernovtsy.ua","ck.ua","cn.ua","cr.ua","crimea.ua","cv.ua","dn.ua","dnepropetrovsk.ua","dnipropetrovsk.ua","dominic.ua","donetsk.ua","dp.ua","if.ua","ivano-frankivsk.ua","kh.ua","kharkiv.ua","kharkov.ua","kherson.ua","khmelnitskiy.ua","khmelnytskyi.ua","kiev.ua","kirovograd.ua","km.ua","kr.ua","krym.ua","ks.ua","kv.ua","kyiv.ua","lg.ua","lt.ua","lugansk.ua","lutsk.ua","lv.ua","lviv.ua","mk.ua","mykolaiv.ua","nikolaev.ua","od.ua","odesa.ua","odessa.ua","pl.ua","poltava.ua","rivne.ua","rovno.ua","rv.ua","sb.ua","sebastopol.ua","sevastopol.ua","sm.ua","sumy.ua","te.ua","ternopil.ua","uz.ua","uzhgorod.ua","vinnica.ua","vinnytsia.ua","vn.ua","volyn.ua","yalta.ua","zaporizhzhe.ua","zaporizhzhia.ua","zhitomir.ua","zhytomyr.ua","zp.ua","zt.ua","ug","co.ug","or.ug","ac.ug","sc.ug","go.ug","ne.ug","com.ug","org.ug","uk","ac.uk","co.uk","gov.uk","ltd.uk","me.uk","net.uk","nhs.uk","org.uk","plc.uk","police.uk","*.sch.uk","us","dni.us","fed.us","isa.us","kids.us","nsn.us","ak.us","al.us","ar.us","as.us","az.us","ca.us","co.us","ct.us","dc.us","de.us","fl.us","ga.us","gu.us","hi.us","ia.us","id.us","il.us","in.us","ks.us","ky.us","la.us","ma.us","md.us","me.us","mi.us","mn.us","mo.us","ms.us","mt.us","nc.us","nd.us","ne.us","nh.us","nj.us","nm.us","nv.us","ny.us","oh.us","ok.us","or.us","pa.us","pr.us","ri.us","sc.us","sd.us","tn.us","tx.us","ut.us","vi.us","vt.us","va.us","wa.us","wi.us","wv.us","wy.us","k12.ak.us","k12.al.us","k12.ar.us","k12.as.us","k12.az.us","k12.ca.us","k12.co.us","k12.ct.us","k12.dc.us","k12.de.us","k12.fl.us","k12.ga.us","k12.gu.us","k12.ia.us","k12.id.us","k12.il.us","k12.in.us","k12.ks.us","k12.ky.us","k12.la.us","k12.ma.us","k12.md.us","k12.me.us","k12.mi.us","k12.mn.us","k12.mo.us","k12.ms.us","k12.mt.us","k12.nc.us","k12.ne.us","k12.nh.us","k12.nj.us","k12.nm.us","k12.nv.us","k12.ny.us","k12.oh.us","k12.ok.us","k12.or.us","k12.pa.us","k12.pr.us","k12.ri.us","k12.sc.us","k12.tn.us","k12.tx.us","k12.ut.us","k12.vi.us","k12.vt.us","k12.va.us","k12.wa.us","k12.wi.us","k12.wy.us","cc.ak.us","cc.al.us","cc.ar.us","cc.as.us","cc.az.us","cc.ca.us","cc.co.us","cc.ct.us","cc.dc.us","cc.de.us","cc.fl.us","cc.ga.us","cc.gu.us","cc.hi.us","cc.ia.us","cc.id.us","cc.il.us","cc.in.us","cc.ks.us","cc.ky.us","cc.la.us","cc.ma.us","cc.md.us","cc.me.us","cc.mi.us","cc.mn.us","cc.mo.us","cc.ms.us","cc.mt.us","cc.nc.us","cc.nd.us","cc.ne.us","cc.nh.us","cc.nj.us","cc.nm.us","cc.nv.us","cc.ny.us","cc.oh.us","cc.ok.us","cc.or.us","cc.pa.us","cc.pr.us","cc.ri.us","cc.sc.us","cc.sd.us","cc.tn.us","cc.tx.us","cc.ut.us","cc.vi.us","cc.vt.us","cc.va.us","cc.wa.us","cc.wi.us","cc.wv.us","cc.wy.us","lib.ak.us","lib.al.us","lib.ar.us","lib.as.us","lib.az.us","lib.ca.us","lib.co.us","lib.ct.us","lib.dc.us","lib.fl.us","lib.ga.us","lib.gu.us","lib.hi.us","lib.ia.us","lib.id.us","lib.il.us","lib.in.us","lib.ks.us","lib.ky.us","lib.la.us","lib.ma.us","lib.md.us","lib.me.us","lib.mi.us","lib.mn.us","lib.mo.us","lib.ms.us","lib.mt.us","lib.nc.us","lib.nd.us","lib.ne.us","lib.nh.us","lib.nj.us","lib.nm.us","lib.nv.us","lib.ny.us","lib.oh.us","lib.ok.us","lib.or.us","lib.pa.us","lib.pr.us","lib.ri.us","lib.sc.us","lib.sd.us","lib.tn.us","lib.tx.us","lib.ut.us","lib.vi.us","lib.vt.us","lib.va.us","lib.wa.us","lib.wi.us","lib.wy.us","pvt.k12.ma.us","chtr.k12.ma.us","paroch.k12.ma.us","ann-arbor.mi.us","cog.mi.us","dst.mi.us","eaton.mi.us","gen.mi.us","mus.mi.us","tec.mi.us","washtenaw.mi.us","uy","com.uy","edu.uy","gub.uy","mil.uy","net.uy","org.uy","uz","co.uz","com.uz","net.uz","org.uz","va","vc","com.vc","net.vc","org.vc","gov.vc","mil.vc","edu.vc","ve","arts.ve","co.ve","com.ve","e12.ve","edu.ve","firm.ve","gob.ve","gov.ve","info.ve","int.ve","mil.ve","net.ve","org.ve","rec.ve","store.ve","tec.ve","web.ve","vg","vi","co.vi","com.vi","k12.vi","net.vi","org.vi","vn","com.vn","net.vn","org.vn","edu.vn","gov.vn","int.vn","ac.vn","biz.vn","info.vn","name.vn","pro.vn","health.vn","vu","com.vu","edu.vu","net.vu","org.vu","wf","ws","com.ws","net.ws","org.ws","gov.ws","edu.ws","yt","امارات","հայ","বাংলা","бг","бел","中国","中國","الجزائر","مصر","ею","გე","ελ","香港","公司.香港","教育.香港","政府.香港","個人.香港","網絡.香港","組織.香港","ಭಾರತ","ଭାରତ","ভাৰত","भारतम्","भारोत","ڀارت","ഭാരതം","भारत","بارت","بھارت","భారత్","ભારત","ਭਾਰਤ","ভারত","இந்தியா","ایران","ايران","عراق","الاردن","한국","қаз","ලංකා","இலங்கை","المغرب","мкд","мон","澳門","澳门","مليسيا","عمان","پاکستان","پاكستان","فلسطين","срб","пр.срб","орг.срб","обр.срб","од.срб","упр.срб","ак.срб","рф","قطر","السعودية","السعودیة","السعودیۃ","السعوديه","سودان","新加坡","சிங்கப்பூர்","سورية","سوريا","ไทย","ศึกษา.ไทย","ธุรกิจ.ไทย","รัฐบาล.ไทย","ทหาร.ไทย","เน็ต.ไทย","องค์กร.ไทย","تونس","台灣","台湾","臺灣","укр","اليمن","xxx","*.ye","ac.za","agric.za","alt.za","co.za","edu.za","gov.za","grondar.za","law.za","mil.za","net.za","ngo.za","nis.za","nom.za","org.za","school.za","tm.za","web.za","zm","ac.zm","biz.zm","co.zm","com.zm","edu.zm","gov.zm","info.zm","mil.zm","net.zm","org.zm","sch.zm","zw","ac.zw","co.zw","gov.zw","mil.zw","org.zw","aaa","aarp","abarth","abb","abbott","abbvie","abc","able","abogado","abudhabi","academy","accenture","accountant","accountants","aco","active","actor","adac","ads","adult","aeg","aetna","afamilycompany","afl","africa","agakhan","agency","aig","aigo","airbus","airforce","airtel","akdn","alfaromeo","alibaba","alipay","allfinanz","allstate","ally","alsace","alstom","americanexpress","americanfamily","amex","amfam","amica","amsterdam","analytics","android","anquan","anz","aol","apartments","app","apple","aquarelle","arab","aramco","archi","army","art","arte","asda","associates","athleta","attorney","auction","audi","audible","audio","auspost","author","auto","autos","avianca","aws","axa","azure","baby","baidu","banamex","bananarepublic","band","bank","bar","barcelona","barclaycard","barclays","barefoot","bargains","baseball","basketball","bauhaus","bayern","bbc","bbt","bbva","bcg","bcn","beats","beauty","beer","bentley","berlin","best","bestbuy","bet","bharti","bible","bid","bike","bing","bingo","bio","black","blackfriday","blanco","blockbuster","blog","bloomberg","blue","bms","bmw","bnl","bnpparibas","boats","boehringer","bofa","bom","bond","boo","book","booking","bosch","bostik","boston","bot","boutique","box","bradesco","bridgestone","broadway","broker","brother","brussels","budapest","bugatti","build","builders","business","buy","buzz","bzh","cab","cafe","cal","call","calvinklein","cam","camera","camp","cancerresearch","canon","capetown","capital","capitalone","car","caravan","cards","care","career","careers","cars","cartier","casa","case","caseih","cash","casino","catering","catholic","cba","cbn","cbre","cbs","ceb","center","ceo","cern","cfa","cfd","chanel","channel","charity","chase","chat","cheap","chintai","christmas","chrome","chrysler","church","cipriani","circle","cisco","citadel","citi","citic","city","cityeats","claims","cleaning","click","clinic","clinique","clothing","cloud","club","clubmed","coach","codes","coffee","college","cologne","comcast","commbank","community","company","compare","computer","comsec","condos","construction","consulting","contact","contractors","cooking","cookingchannel","cool","corsica","country","coupon","coupons","courses","credit","creditcard","creditunion","cricket","crown","crs","cruise","cruises","csc","cuisinella","cymru","cyou","dabur","dad","dance","data","date","dating","datsun","day","dclk","dds","deal","dealer","deals","degree","delivery","dell","deloitte","delta","democrat","dental","dentist","desi","design","dev","dhl","diamonds","diet","digital","direct","directory","discount","discover","dish","diy","dnp","docs","doctor","dodge","dog","doha","domains","dot","download","drive","dtv","dubai","duck","dunlop","duns","dupont","durban","dvag","dvr","earth","eat","eco","edeka","education","email","emerck","energy","engineer","engineering","enterprises","epost","epson","equipment","ericsson","erni","esq","estate","esurance","etisalat","eurovision","eus","events","everbank","exchange","expert","exposed","express","extraspace","fage","fail","fairwinds","faith","family","fan","fans","farm","farmers","fashion","fast","fedex","feedback","ferrari","ferrero","fiat","fidelity","fido","film","final","finance","financial","fire","firestone","firmdale","fish","fishing","fit","fitness","flickr","flights","flir","florist","flowers","fly","foo","food","foodnetwork","football","ford","forex","forsale","forum","foundation","fox","free","fresenius","frl","frogans","frontdoor","frontier","ftr","fujitsu","fujixerox","fun","fund","furniture","futbol","fyi","gal","gallery","gallo","gallup","game","games","gap","garden","gbiz","gdn","gea","gent","genting","george","ggee","gift","gifts","gives","giving","glade","glass","gle","global","globo","gmail","gmbh","gmo","gmx","godaddy","gold","goldpoint","golf","goo","goodyear","goog","google","gop","got","grainger","graphics","gratis","green","gripe","grocery","group","guardian","gucci","guge","guide","guitars","guru","hair","hamburg","hangout","haus","hbo","hdfc","hdfcbank","health","healthcare","help","helsinki","here","hermes","hgtv","hiphop","hisamitsu","hitachi","hiv","hkt","hockey","holdings","holiday","homedepot","homegoods","homes","homesense","honda","honeywell","horse","hospital","host","hosting","hot","hoteles","hotels","hotmail","house","how","hsbc","hughes","hyatt","hyundai","ibm","icbc","ice","icu","ieee","ifm","ikano","imamat","imdb","immo","immobilien","inc","industries","infiniti","ing","ink","institute","insurance","insure","intel","international","intuit","investments","ipiranga","irish","iselect","ismaili","ist","istanbul","itau","itv","iveco","jaguar","java","jcb","jcp","jeep","jetzt","jewelry","jio","jll","jmp","jnj","joburg","jot","joy","jpmorgan","jprs","juegos","juniper","kaufen","kddi","kerryhotels","kerrylogistics","kerryproperties","kfh","kia","kim","kinder","kindle","kitchen","kiwi","koeln","komatsu","kosher","kpmg","kpn","krd","kred","kuokgroup","kyoto","lacaixa","ladbrokes","lamborghini","lamer","lancaster","lancia","lancome","land","landrover","lanxess","lasalle","lat","latino","latrobe","law","lawyer","lds","lease","leclerc","lefrak","legal","lego","lexus","lgbt","liaison","lidl","life","lifeinsurance","lifestyle","lighting","like","lilly","limited","limo","lincoln","linde","link","lipsy","live","living","lixil","llc","loan","loans","locker","locus","loft","lol","london","lotte","lotto","love","lpl","lplfinancial","ltd","ltda","lundbeck","lupin","luxe","luxury","macys","madrid","maif","maison","makeup","man","management","mango","map","market","marketing","markets","marriott","marshalls","maserati","mattel","mba","mckinsey","med","media","meet","melbourne","meme","memorial","men","menu","merckmsd","metlife","miami","microsoft","mini","mint","mit","mitsubishi","mlb","mls","mma","mobile","mobily","moda","moe","moi","mom","monash","money","monster","mopar","mormon","mortgage","moscow","moto","motorcycles","mov","movie","movistar","msd","mtn","mtr","mutual","nab","nadex","nagoya","nationwide","natura","navy","nba","nec","netbank","netflix","network","neustar","new","newholland","news","next","nextdirect","nexus","nfl","ngo","nhk","nico","nike","nikon","ninja","nissan","nissay","nokia","northwesternmutual","norton","now","nowruz","nowtv","nra","nrw","ntt","nyc","obi","observer","off","office","okinawa","olayan","olayangroup","oldnavy","ollo","omega","one","ong","onl","online","onyourside","ooo","open","oracle","orange","organic","origins","osaka","otsuka","ott","ovh","page","panasonic","paris","pars","partners","parts","party","passagens","pay","pccw","pet","pfizer","pharmacy","phd","philips","phone","photo","photography","photos","physio","piaget","pics","pictet","pictures","pid","pin","ping","pink","pioneer","pizza","place","play","playstation","plumbing","plus","pnc","pohl","poker","politie","porn","pramerica","praxi","press","prime","prod","productions","prof","progressive","promo","properties","property","protection","pru","prudential","pub","pwc","qpon","quebec","quest","qvc","racing","radio","raid","read","realestate","realtor","realty","recipes","red","redstone","redumbrella","rehab","reise","reisen","reit","reliance","ren","rent","rentals","repair","report","republican","rest","restaurant","review","reviews","rexroth","rich","richardli","ricoh","rightathome","ril","rio","rip","rmit","rocher","rocks","rodeo","rogers","room","rsvp","rugby","ruhr","run","rwe","ryukyu","saarland","safe","safety","sakura","sale","salon","samsclub","samsung","sandvik","sandvikcoromant","sanofi","sap","sarl","sas","save","saxo","sbi","sbs","sca","scb","schaeffler","schmidt","scholarships","school","schule","schwarz","science","scjohnson","scor","scot","search","seat","secure","security","seek","select","sener","services","ses","seven","sew","sex","sexy","sfr","shangrila","sharp","shaw","shell","shia","shiksha","shoes","shop","shopping","shouji","show","showtime","shriram","silk","sina","singles","site","ski","skin","sky","skype","sling","smart","smile","sncf","soccer","social","softbank","software","sohu","solar","solutions","song","sony","soy","space","spiegel","sport","spot","spreadbetting","srl","srt","stada","staples","star","starhub","statebank","statefarm","statoil","stc","stcgroup","stockholm","storage","store","stream","studio","study","style","sucks","supplies","supply","support","surf","surgery","suzuki","swatch","swiftcover","swiss","sydney","symantec","systems","tab","taipei","talk","taobao","target","tatamotors","tatar","tattoo","tax","taxi","tci","tdk","team","tech","technology","telefonica","temasek","tennis","teva","thd","theater","theatre","tiaa","tickets","tienda","tiffany","tips","tires","tirol","tjmaxx","tjx","tkmaxx","tmall","today","tokyo","tools","top","toray","toshiba","total","tours","town","toyota","toys","trade","trading","training","travel","travelchannel","travelers","travelersinsurance","trust","trv","tube","tui","tunes","tushu","tvs","ubank","ubs","uconnect","unicom","university","uno","uol","ups","vacations","vana","vanguard","vegas","ventures","verisign","versicherung","vet","viajes","video","vig","viking","villas","vin","vip","virgin","visa","vision","vistaprint","viva","vivo","vlaanderen","vodka","volkswagen","volvo","vote","voting","voto","voyage","vuelos","wales","walmart","walter","wang","wanggou","warman","watch","watches","weather","weatherchannel","webcam","weber","website","wed","wedding","weibo","weir","whoswho","wien","wiki","williamhill","win","windows","wine","winners","wme","wolterskluwer","woodside","work","works","world","wow","wtc","wtf","xbox","xerox","xfinity","xihuan","xin","कॉम","セール","佛山","慈善","集团","在线","大众汽车","点看","คอม","八卦","موقع","公益","公司","香格里拉","网站","移动","我爱你","москва","католик","онлайн","сайт","联通","קום","时尚","微博","淡马锡","ファッション","орг","नेट","ストア","삼성","商标","商店","商城","дети","ポイント","新闻","工行","家電","كوم","中文网","中信","娱乐","谷歌","電訊盈科","购物","クラウド","通販","网店","संगठन","餐厅","网络","ком","诺基亚","食品","飞利浦","手表","手机","ارامكو","العليان","اتصالات","بازار","موبايلي","ابوظبي","كاثوليك","همراه","닷컴","政府","شبكة","بيتك","عرب","机构","组织机构","健康","招聘","рус","珠宝","大拿","みんな","グーグル","世界","書籍","网址","닷넷","コム","天主教","游戏","vermögensberater","vermögensberatung","企业","信息","嘉里大酒店","嘉里","广东","政务","xyz","yachts","yahoo","yamaxun","yandex","yodobashi","yoga","yokohama","you","youtube","yun","zappos","zara","zero","zip","zippo","zone","zuerich","cc.ua","inf.ua","ltd.ua","beep.pl","*.compute.estate","*.alces.network","alwaysdata.net","cloudfront.net","*.compute.amazonaws.com","*.compute-1.amazonaws.com","*.compute.amazonaws.com.cn","us-east-1.amazonaws.com","cn-north-1.eb.amazonaws.com.cn","cn-northwest-1.eb.amazonaws.com.cn","elasticbeanstalk.com","ap-northeast-1.elasticbeanstalk.com","ap-northeast-2.elasticbeanstalk.com","ap-northeast-3.elasticbeanstalk.com","ap-south-1.elasticbeanstalk.com","ap-southeast-1.elasticbeanstalk.com","ap-southeast-2.elasticbeanstalk.com","ca-central-1.elasticbeanstalk.com","eu-central-1.elasticbeanstalk.com","eu-west-1.elasticbeanstalk.com","eu-west-2.elasticbeanstalk.com","eu-west-3.elasticbeanstalk.com","sa-east-1.elasticbeanstalk.com","us-east-1.elasticbeanstalk.com","us-east-2.elasticbeanstalk.com","us-gov-west-1.elasticbeanstalk.com","us-west-1.elasticbeanstalk.com","us-west-2.elasticbeanstalk.com","*.elb.amazonaws.com","*.elb.amazonaws.com.cn","s3.amazonaws.com","s3-ap-northeast-1.amazonaws.com","s3-ap-northeast-2.amazonaws.com","s3-ap-south-1.amazonaws.com","s3-ap-southeast-1.amazonaws.com","s3-ap-southeast-2.amazonaws.com","s3-ca-central-1.amazonaws.com","s3-eu-central-1.amazonaws.com","s3-eu-west-1.amazonaws.com","s3-eu-west-2.amazonaws.com","s3-eu-west-3.amazonaws.com","s3-external-1.amazonaws.com","s3-fips-us-gov-west-1.amazonaws.com","s3-sa-east-1.amazonaws.com","s3-us-gov-west-1.amazonaws.com","s3-us-east-2.amazonaws.com","s3-us-west-1.amazonaws.com","s3-us-west-2.amazonaws.com","s3.ap-northeast-2.amazonaws.com","s3.ap-south-1.amazonaws.com","s3.cn-north-1.amazonaws.com.cn","s3.ca-central-1.amazonaws.com","s3.eu-central-1.amazonaws.com","s3.eu-west-2.amazonaws.com","s3.eu-west-3.amazonaws.com","s3.us-east-2.amazonaws.com","s3.dualstack.ap-northeast-1.amazonaws.com","s3.dualstack.ap-northeast-2.amazonaws.com","s3.dualstack.ap-south-1.amazonaws.com","s3.dualstack.ap-southeast-1.amazonaws.com","s3.dualstack.ap-southeast-2.amazonaws.com","s3.dualstack.ca-central-1.amazonaws.com","s3.dualstack.eu-central-1.amazonaws.com","s3.dualstack.eu-west-1.amazonaws.com","s3.dualstack.eu-west-2.amazonaws.com","s3.dualstack.eu-west-3.amazonaws.com","s3.dualstack.sa-east-1.amazonaws.com","s3.dualstack.us-east-1.amazonaws.com","s3.dualstack.us-east-2.amazonaws.com","s3-website-us-east-1.amazonaws.com","s3-website-us-west-1.amazonaws.com","s3-website-us-west-2.amazonaws.com","s3-website-ap-northeast-1.amazonaws.com","s3-website-ap-southeast-1.amazonaws.com","s3-website-ap-southeast-2.amazonaws.com","s3-website-eu-west-1.amazonaws.com","s3-website-sa-east-1.amazonaws.com","s3-website.ap-northeast-2.amazonaws.com","s3-website.ap-south-1.amazonaws.com","s3-website.ca-central-1.amazonaws.com","s3-website.eu-central-1.amazonaws.com","s3-website.eu-west-2.amazonaws.com","s3-website.eu-west-3.amazonaws.com","s3-website.us-east-2.amazonaws.com","t3l3p0rt.net","tele.amune.org","apigee.io","on-aptible.com","user.party.eus","pimienta.org","poivron.org","potager.org","sweetpepper.org","myasustor.com","myfritz.net","*.awdev.ca","*.advisor.ws","backplaneapp.io","betainabox.com","bnr.la","blackbaudcdn.net","boomla.net","boxfuse.io","square7.ch","bplaced.com","bplaced.de","square7.de","bplaced.net","square7.net","browsersafetymark.io","mycd.eu","ae.org","ar.com","br.com","cn.com","com.de","com.se","de.com","eu.com","gb.com","gb.net","hu.com","hu.net","jp.net","jpn.com","kr.com","mex.com","no.com","qc.com","ru.com","sa.com","se.net","uk.com","uk.net","us.com","uy.com","za.bz","za.com","africa.com","gr.com","in.net","us.org","co.com","c.la","certmgr.org","xenapponazure.com","virtueeldomein.nl","cleverapps.io","c66.me","cloud66.ws","jdevcloud.com","wpdevcloud.com","cloudaccess.host","freesite.host","cloudaccess.net","cloudcontrolled.com","cloudcontrolapp.com","co.ca","*.otap.co","co.cz","c.cdn77.org","cdn77-ssl.net","r.cdn77.net","rsc.cdn77.org","ssl.origin.cdn77-secure.org","cloudns.asia","cloudns.biz","cloudns.club","cloudns.cc","cloudns.eu","cloudns.in","cloudns.info","cloudns.org","cloudns.pro","cloudns.pw","cloudns.us","cloudeity.net","cnpy.gdn","co.nl","co.no","webhosting.be","hosting-cluster.nl","dyn.cosidns.de","dynamisches-dns.de","dnsupdater.de","internet-dns.de","l-o-g-i-n.de","dynamic-dns.info","feste-ip.net","knx-server.net","static-access.net","realm.cz","*.cryptonomic.net","cupcake.is","cyon.link","cyon.site","daplie.me","localhost.daplie.me","dattolocal.com","dattorelay.com","dattoweb.com","mydatto.com","dattolocal.net","mydatto.net","biz.dk","co.dk","firm.dk","reg.dk","store.dk","debian.net","dedyn.io","dnshome.de","drayddns.com","dreamhosters.com","mydrobo.com","drud.io","drud.us","duckdns.org","dy.fi","tunk.org","dyndns-at-home.com","dyndns-at-work.com","dyndns-blog.com","dyndns-free.com","dyndns-home.com","dyndns-ip.com","dyndns-mail.com","dyndns-office.com","dyndns-pics.com","dyndns-remote.com","dyndns-server.com","dyndns-web.com","dyndns-wiki.com","dyndns-work.com","dyndns.biz","dyndns.info","dyndns.org","dyndns.tv","at-band-camp.net","ath.cx","barrel-of-knowledge.info","barrell-of-knowledge.info","better-than.tv","blogdns.com","blogdns.net","blogdns.org","blogsite.org","boldlygoingnowhere.org","broke-it.net","buyshouses.net","cechire.com","dnsalias.com","dnsalias.net","dnsalias.org","dnsdojo.com","dnsdojo.net","dnsdojo.org","does-it.net","doesntexist.com","doesntexist.org","dontexist.com","dontexist.net","dontexist.org","doomdns.com","doomdns.org","dvrdns.org","dyn-o-saur.com","dynalias.com","dynalias.net","dynalias.org","dynathome.net","dyndns.ws","endofinternet.net","endofinternet.org","endoftheinternet.org","est-a-la-maison.com","est-a-la-masion.com","est-le-patron.com","est-mon-blogueur.com","for-better.biz","for-more.biz","for-our.info","for-some.biz","for-the.biz","forgot.her.name","forgot.his.name","from-ak.com","from-al.com","from-ar.com","from-az.net","from-ca.com","from-co.net","from-ct.com","from-dc.com","from-de.com","from-fl.com","from-ga.com","from-hi.com","from-ia.com","from-id.com","from-il.com","from-in.com","from-ks.com","from-ky.com","from-la.net","from-ma.com","from-md.com","from-me.org","from-mi.com","from-mn.com","from-mo.com","from-ms.com","from-mt.com","from-nc.com","from-nd.com","from-ne.com","from-nh.com","from-nj.com","from-nm.com","from-nv.com","from-ny.net","from-oh.com","from-ok.com","from-or.com","from-pa.com","from-pr.com","from-ri.com","from-sc.com","from-sd.com","from-tn.com","from-tx.com","from-ut.com","from-va.com","from-vt.com","from-wa.com","from-wi.com","from-wv.com","from-wy.com","ftpaccess.cc","fuettertdasnetz.de","game-host.org","game-server.cc","getmyip.com","gets-it.net","go.dyndns.org","gotdns.com","gotdns.org","groks-the.info","groks-this.info","ham-radio-op.net","here-for-more.info","hobby-site.com","hobby-site.org","home.dyndns.org","homedns.org","homeftp.net","homeftp.org","homeip.net","homelinux.com","homelinux.net","homelinux.org","homeunix.com","homeunix.net","homeunix.org","iamallama.com","in-the-band.net","is-a-anarchist.com","is-a-blogger.com","is-a-bookkeeper.com","is-a-bruinsfan.org","is-a-bulls-fan.com","is-a-candidate.org","is-a-caterer.com","is-a-celticsfan.org","is-a-chef.com","is-a-chef.net","is-a-chef.org","is-a-conservative.com","is-a-cpa.com","is-a-cubicle-slave.com","is-a-democrat.com","is-a-designer.com","is-a-doctor.com","is-a-financialadvisor.com","is-a-geek.com","is-a-geek.net","is-a-geek.org","is-a-green.com","is-a-guru.com","is-a-hard-worker.com","is-a-hunter.com","is-a-knight.org","is-a-landscaper.com","is-a-lawyer.com","is-a-liberal.com","is-a-libertarian.com","is-a-linux-user.org","is-a-llama.com","is-a-musician.com","is-a-nascarfan.com","is-a-nurse.com","is-a-painter.com","is-a-patsfan.org","is-a-personaltrainer.com","is-a-photographer.com","is-a-player.com","is-a-republican.com","is-a-rockstar.com","is-a-socialist.com","is-a-soxfan.org","is-a-student.com","is-a-teacher.com","is-a-techie.com","is-a-therapist.com","is-an-accountant.com","is-an-actor.com","is-an-actress.com","is-an-anarchist.com","is-an-artist.com","is-an-engineer.com","is-an-entertainer.com","is-by.us","is-certified.com","is-found.org","is-gone.com","is-into-anime.com","is-into-cars.com","is-into-cartoons.com","is-into-games.com","is-leet.com","is-lost.org","is-not-certified.com","is-saved.org","is-slick.com","is-uberleet.com","is-very-bad.org","is-very-evil.org","is-very-good.org","is-very-nice.org","is-very-sweet.org","is-with-theband.com","isa-geek.com","isa-geek.net","isa-geek.org","isa-hockeynut.com","issmarterthanyou.com","isteingeek.de","istmein.de","kicks-ass.net","kicks-ass.org","knowsitall.info","land-4-sale.us","lebtimnetz.de","leitungsen.de","likes-pie.com","likescandy.com","merseine.nu","mine.nu","misconfused.org","mypets.ws","myphotos.cc","neat-url.com","office-on-the.net","on-the-web.tv","podzone.net","podzone.org","readmyblog.org","saves-the-whales.com","scrapper-site.net","scrapping.cc","selfip.biz","selfip.com","selfip.info","selfip.net","selfip.org","sells-for-less.com","sells-for-u.com","sells-it.net","sellsyourhome.org","servebbs.com","servebbs.net","servebbs.org","serveftp.net","serveftp.org","servegame.org","shacknet.nu","simple-url.com","space-to-rent.com","stuff-4-sale.org","stuff-4-sale.us","teaches-yoga.com","thruhere.net","traeumtgerade.de","webhop.biz","webhop.info","webhop.net","webhop.org","worse-than.tv","writesthisblog.com","ddnss.de","dyn.ddnss.de","dyndns.ddnss.de","dyndns1.de","dyn-ip24.de","home-webserver.de","dyn.home-webserver.de","myhome-server.de","ddnss.org","definima.net","definima.io","bci.dnstrace.pro","ddnsfree.com","ddnsgeek.com","giize.com","gleeze.com","kozow.com","loseyourip.com","ooguy.com","theworkpc.com","casacam.net","dynu.net","accesscam.org","camdvr.org","freeddns.org","mywire.org","webredirect.org","myddns.rocks","blogsite.xyz","dynv6.net","e4.cz","mytuleap.com","enonic.io","customer.enonic.io","eu.org","al.eu.org","asso.eu.org","at.eu.org","au.eu.org","be.eu.org","bg.eu.org","ca.eu.org","cd.eu.org","ch.eu.org","cn.eu.org","cy.eu.org","cz.eu.org","de.eu.org","dk.eu.org","edu.eu.org","ee.eu.org","es.eu.org","fi.eu.org","fr.eu.org","gr.eu.org","hr.eu.org","hu.eu.org","ie.eu.org","il.eu.org","in.eu.org","int.eu.org","is.eu.org","it.eu.org","jp.eu.org","kr.eu.org","lt.eu.org","lu.eu.org","lv.eu.org","mc.eu.org","me.eu.org","mk.eu.org","mt.eu.org","my.eu.org","net.eu.org","ng.eu.org","nl.eu.org","no.eu.org","nz.eu.org","paris.eu.org","pl.eu.org","pt.eu.org","q-a.eu.org","ro.eu.org","ru.eu.org","se.eu.org","si.eu.org","sk.eu.org","tr.eu.org","uk.eu.org","us.eu.org","eu-1.evennode.com","eu-2.evennode.com","eu-3.evennode.com","eu-4.evennode.com","us-1.evennode.com","us-2.evennode.com","us-3.evennode.com","us-4.evennode.com","twmail.cc","twmail.net","twmail.org","mymailer.com.tw","url.tw","apps.fbsbx.com","ru.net","adygeya.ru","bashkiria.ru","bir.ru","cbg.ru","com.ru","dagestan.ru","grozny.ru","kalmykia.ru","kustanai.ru","marine.ru","mordovia.ru","msk.ru","mytis.ru","nalchik.ru","nov.ru","pyatigorsk.ru","spb.ru","vladikavkaz.ru","vladimir.ru","abkhazia.su","adygeya.su","aktyubinsk.su","arkhangelsk.su","armenia.su","ashgabad.su","azerbaijan.su","balashov.su","bashkiria.su","bryansk.su","bukhara.su","chimkent.su","dagestan.su","east-kazakhstan.su","exnet.su","georgia.su","grozny.su","ivanovo.su","jambyl.su","kalmykia.su","kaluga.su","karacol.su","karaganda.su","karelia.su","khakassia.su","krasnodar.su","kurgan.su","kustanai.su","lenug.su","mangyshlak.su","mordovia.su","msk.su","murmansk.su","nalchik.su","navoi.su","north-kazakhstan.su","nov.su","obninsk.su","penza.su","pokrovsk.su","sochi.su","spb.su","tashkent.su","termez.su","togliatti.su","troitsk.su","tselinograd.su","tula.su","tuva.su","vladikavkaz.su","vladimir.su","vologda.su","channelsdvr.net","fastlylb.net","map.fastlylb.net","freetls.fastly.net","map.fastly.net","a.prod.fastly.net","global.prod.fastly.net","a.ssl.fastly.net","b.ssl.fastly.net","global.ssl.fastly.net","fastpanel.direct","fastvps-server.com","fhapp.xyz","fedorainfracloud.org","fedorapeople.org","cloud.fedoraproject.org","app.os.fedoraproject.org","app.os.stg.fedoraproject.org","filegear.me","firebaseapp.com","flynnhub.com","flynnhosting.net","freebox-os.com","freeboxos.com","fbx-os.fr","fbxos.fr","freebox-os.fr","freeboxos.fr","freedesktop.org","*.futurecms.at","*.ex.futurecms.at","*.in.futurecms.at","futurehosting.at","futuremailing.at","*.ex.ortsinfo.at","*.kunden.ortsinfo.at","*.statics.cloud","service.gov.uk","github.io","githubusercontent.com","gitlab.io","homeoffice.gov.uk","ro.im","shop.ro","goip.de","*.0emm.com","appspot.com","blogspot.ae","blogspot.al","blogspot.am","blogspot.ba","blogspot.be","blogspot.bg","blogspot.bj","blogspot.ca","blogspot.cf","blogspot.ch","blogspot.cl","blogspot.co.at","blogspot.co.id","blogspot.co.il","blogspot.co.ke","blogspot.co.nz","blogspot.co.uk","blogspot.co.za","blogspot.com","blogspot.com.ar","blogspot.com.au","blogspot.com.br","blogspot.com.by","blogspot.com.co","blogspot.com.cy","blogspot.com.ee","blogspot.com.eg","blogspot.com.es","blogspot.com.mt","blogspot.com.ng","blogspot.com.tr","blogspot.com.uy","blogspot.cv","blogspot.cz","blogspot.de","blogspot.dk","blogspot.fi","blogspot.fr","blogspot.gr","blogspot.hk","blogspot.hr","blogspot.hu","blogspot.ie","blogspot.in","blogspot.is","blogspot.it","blogspot.jp","blogspot.kr","blogspot.li","blogspot.lt","blogspot.lu","blogspot.md","blogspot.mk","blogspot.mr","blogspot.mx","blogspot.my","blogspot.nl","blogspot.no","blogspot.pe","blogspot.pt","blogspot.qa","blogspot.re","blogspot.ro","blogspot.rs","blogspot.ru","blogspot.se","blogspot.sg","blogspot.si","blogspot.sk","blogspot.sn","blogspot.td","blogspot.tw","blogspot.ug","blogspot.vn","cloudfunctions.net","cloud.goog","codespot.com","googleapis.com","googlecode.com","pagespeedmobilizer.com","publishproxy.com","withgoogle.com","withyoutube.com","hashbang.sh","hasura.app","hasura-app.io","hepforge.org","herokuapp.com","herokussl.com","myravendb.com","ravendb.community","ravendb.me","development.run","ravendb.run","moonscale.net","iki.fi","biz.at","info.at","info.cx","ac.leg.br","al.leg.br","am.leg.br","ap.leg.br","ba.leg.br","ce.leg.br","df.leg.br","es.leg.br","go.leg.br","ma.leg.br","mg.leg.br","ms.leg.br","mt.leg.br","pa.leg.br","pb.leg.br","pe.leg.br","pi.leg.br","pr.leg.br","rj.leg.br","rn.leg.br","ro.leg.br","rr.leg.br","rs.leg.br","sc.leg.br","se.leg.br","sp.leg.br","to.leg.br","pixolino.com","ipifony.net","mein-iserv.de","test-iserv.de","myjino.ru","*.hosting.myjino.ru","*.landing.myjino.ru","*.spectrum.myjino.ru","*.vps.myjino.ru","*.triton.zone","*.cns.joyent.com","js.org","keymachine.de","knightpoint.systems","co.krd","edu.krd","git-repos.de","lcube-server.de","svn-repos.de","app.lmpm.com","linkitools.space","linkyard.cloud","linkyard-cloud.ch","we.bs","uklugs.org","glug.org.uk","lug.org.uk","lugs.org.uk","barsy.bg","barsy.co.uk","barsyonline.co.uk","barsycenter.com","barsyonline.com","barsy.club","barsy.de","barsy.eu","barsy.in","barsy.info","barsy.io","barsy.me","barsy.menu","barsy.mobi","barsy.net","barsy.online","barsy.org","barsy.pro","barsy.pub","barsy.shop","barsy.site","barsy.support","barsy.uk","*.magentosite.cloud","mayfirst.info","mayfirst.org","hb.cldmail.ru","miniserver.com","memset.net","cloud.metacentrum.cz","custom.metacentrum.cz","flt.cloud.muni.cz","usr.cloud.muni.cz","meteorapp.com","eu.meteorapp.com","co.pl","azurecontainer.io","azurewebsites.net","azure-mobile.net","cloudapp.net","mozilla-iot.org","bmoattachments.org","net.ru","org.ru","pp.ru","bitballoon.com","netlify.com","4u.com","ngrok.io","nh-serv.co.uk","nfshost.com","dnsking.ch","mypi.co","n4t.co","001www.com","ddnslive.com","myiphost.com","forumz.info","16-b.it","32-b.it","64-b.it","soundcast.me","tcp4.me","dnsup.net","hicam.net","now-dns.net","ownip.net","vpndns.net","dynserv.org","now-dns.org","x443.pw","now-dns.top","ntdll.top","freeddns.us","crafting.xyz","zapto.xyz","nsupdate.info","nerdpol.ovh","blogsyte.com","brasilia.me","cable-modem.org","ciscofreak.com","collegefan.org","couchpotatofries.org","damnserver.com","ddns.me","ditchyourip.com","dnsfor.me","dnsiskinky.com","dvrcam.info","dynns.com","eating-organic.net","fantasyleague.cc","geekgalaxy.com","golffan.us","health-carereform.com","homesecuritymac.com","homesecuritypc.com","hopto.me","ilovecollege.info","loginto.me","mlbfan.org","mmafan.biz","myactivedirectory.com","mydissent.net","myeffect.net","mymediapc.net","mypsx.net","mysecuritycamera.com","mysecuritycamera.net","mysecuritycamera.org","net-freaks.com","nflfan.org","nhlfan.net","no-ip.ca","no-ip.co.uk","no-ip.net","noip.us","onthewifi.com","pgafan.net","point2this.com","pointto.us","privatizehealthinsurance.net","quicksytes.com","read-books.org","securitytactics.com","serveexchange.com","servehumour.com","servep2p.com","servesarcasm.com","stufftoread.com","ufcfan.org","unusualperson.com","workisboring.com","3utilities.com","bounceme.net","ddns.net","ddnsking.com","gotdns.ch","hopto.org","myftp.biz","myftp.org","myvnc.com","no-ip.biz","no-ip.info","no-ip.org","noip.me","redirectme.net","servebeer.com","serveblog.net","servecounterstrike.com","serveftp.com","servegame.com","servehalflife.com","servehttp.com","serveirc.com","serveminecraft.net","servemp3.com","servepics.com","servequake.com","sytes.net","webhop.me","zapto.org","stage.nodeart.io","nodum.co","nodum.io","pcloud.host","nyc.mn","nom.ae","nom.af","nom.ai","nom.al","nym.by","nym.bz","nom.cl","nom.gd","nom.ge","nom.gl","nym.gr","nom.gt","nym.gy","nom.hn","nym.ie","nom.im","nom.ke","nym.kz","nym.la","nym.lc","nom.li","nym.li","nym.lt","nym.lu","nym.me","nom.mk","nym.mn","nym.mx","nom.nu","nym.nz","nym.pe","nym.pt","nom.pw","nom.qa","nym.ro","nom.rs","nom.si","nym.sk","nom.st","nym.su","nym.sx","nom.tj","nym.tw","nom.ug","nom.uy","nom.vc","nom.vg","cya.gg","cloudycluster.net","nid.io","opencraft.hosting","operaunite.com","outsystemscloud.com","ownprovider.com","own.pm","ox.rs","oy.lc","pgfog.com","pagefrontapp.com","art.pl","gliwice.pl","krakow.pl","poznan.pl","wroc.pl","zakopane.pl","pantheonsite.io","gotpantheon.com","mypep.link","on-web.fr","*.platform.sh","*.platformsh.site","xen.prgmr.com","priv.at","protonet.io","chirurgiens-dentistes-en-france.fr","byen.site","ras.ru","qa2.com","dev-myqnapcloud.com","alpha-myqnapcloud.com","myqnapcloud.com","*.quipelements.com","vapor.cloud","vaporcloud.io","rackmaze.com","rackmaze.net","rhcloud.com","resindevice.io","devices.resinstaging.io","hzc.io","wellbeingzone.eu","ptplus.fit","wellbeingzone.co.uk","sandcats.io","logoip.de","logoip.com","schokokeks.net","scrysec.com","firewall-gateway.com","firewall-gateway.de","my-gateway.de","my-router.de","spdns.de","spdns.eu","firewall-gateway.net","my-firewall.org","myfirewall.org","spdns.org","*.s5y.io","*.sensiosite.cloud","biz.ua","co.ua","pp.ua","shiftedit.io","myshopblocks.com","1kapp.com","appchizi.com","applinzi.com","sinaapp.com","vipsinaapp.com","bounty-full.com","alpha.bounty-full.com","beta.bounty-full.com","static.land","dev.static.land","sites.static.land","apps.lair.io","*.stolos.io","spacekit.io","customer.speedpartner.de","storj.farm","utwente.io","temp-dns.com","diskstation.me","dscloud.biz","dscloud.me","dscloud.mobi","dsmynas.com","dsmynas.net","dsmynas.org","familyds.com","familyds.net","familyds.org","i234.me","myds.me","synology.me","vpnplus.to","taifun-dns.de","gda.pl","gdansk.pl","gdynia.pl","med.pl","sopot.pl","gwiddle.co.uk","cust.dev.thingdust.io","cust.disrec.thingdust.io","cust.prod.thingdust.io","cust.testing.thingdust.io","bloxcms.com","townnews-staging.com","12hp.at","2ix.at","4lima.at","lima-city.at","12hp.ch","2ix.ch","4lima.ch","lima-city.ch","trafficplex.cloud","de.cool","12hp.de","2ix.de","4lima.de","lima-city.de","1337.pictures","clan.rip","lima-city.rocks","webspace.rocks","lima.zone","*.transurl.be","*.transurl.eu","*.transurl.nl","tuxfamily.org","dd-dns.de","diskstation.eu","diskstation.org","dray-dns.de","draydns.de","dyn-vpn.de","dynvpn.de","mein-vigor.de","my-vigor.de","my-wan.de","syno-ds.de","synology-diskstation.de","synology-ds.de","uber.space","*.uberspace.de","hk.com","hk.org","ltd.hk","inc.hk","virtualuser.de","virtual-user.de","lib.de.us","2038.io","router.management","v-info.info","wedeploy.io","wedeploy.me","wedeploy.sh","remotewd.com","wmflabs.org","half.host","xnbay.com","u2.xnbay.com","u2-local.xnbay.com","cistron.nl","demon.nl","xs4all.space","official.academy","yolasite.com","ybo.faith","yombo.me","homelink.one","ybo.party","ybo.review","ybo.science","ybo.trade","nohost.me","noho.st","za.net","za.org","now.sh","zone.id"]},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i=a(52).Store,r=a(53).permuteDomain,o=a(54).pathMatch,n=a(1);function s(){i.call(this),this.idx={}}n.inherits(s,i),t.MemoryCookieStore=s,s.prototype.idx=null,s.prototype.synchronous=!0,s.prototype.inspect=function(){return"{ idx: "+n.inspect(this.idx,!1,2)+" }"},n.inspect.custom&&(s.prototype[n.inspect.custom]=s.prototype.inspect),s.prototype.findCookie=function(e,t,a,i){return this.idx[e]&&this.idx[e][t]?i(null,this.idx[e][t][a]||null):i(null,void 0)},s.prototype.findCookies=function(e,t,a){var i,n=[];if(!e)return a(null,[]);i=t?function(e){Object.keys(e).forEach(function(a){if(o(t,a)){var i=e[a];for(var r in i)n.push(i[r])}})}:function(e){for(var t in e){var a=e[t];for(var i in a)n.push(a[i])}};var s=r(e)||[e],u=this.idx;s.forEach(function(e){var t=u[e];t&&i(t)}),a(null,n)},s.prototype.putCookie=function(e,t){this.idx[e.domain]||(this.idx[e.domain]={}),this.idx[e.domain][e.path]||(this.idx[e.domain][e.path]={}),this.idx[e.domain][e.path][e.key]=e,t(null)},s.prototype.updateCookie=function(e,t,a){this.putCookie(t,a)},s.prototype.removeCookie=function(e,t,a,i){this.idx[e]&&this.idx[e][t]&&this.idx[e][t][a]&&delete this.idx[e][t][a],i(null)},s.prototype.removeCookies=function(e,t,a){return this.idx[e]&&(t?delete this.idx[e][t]:delete this.idx[e]),a(null)},s.prototype.getAllCookies=function(e){var t=[],a=this.idx;Object.keys(a).forEach(function(e){Object.keys(a[e]).forEach(function(i){Object.keys(a[e][i]).forEach(function(r){null!==r&&t.push(a[e][i][r])})})}),t.sort(function(e,t){return(e.creationIndex||0)-(t.creationIndex||0)}),e(null,t)}},function(e){e.exports={author:{name:"Jeremy Stashewsky",email:"jstash@gmail.com",website:"https://github.com/stash"},contributors:[{name:"Alexander Savin",website:"https://github.com/apsavin"},{name:"Ian Livingstone",website:"https://github.com/ianlivingstone"},{name:"Ivan Nikulin",website:"https://github.com/inikulin"},{name:"Lalit Kapoor",website:"https://github.com/lalitkapoor"},{name:"Sam Thompson",website:"https://github.com/sambthompson"},{name:"Sebastian Mayr",website:"https://github.com/Sebmaster"}],license:"BSD-3-Clause",name:"tough-cookie",description:"RFC6265 Cookies and Cookie Jar for node.js",keywords:["HTTP","cookie","cookies","set-cookie","cookiejar","jar","RFC6265","RFC2965"],version:"2.4.3",homepage:"https://github.com/salesforce/tough-cookie",repository:{type:"git",url:"git://github.com/salesforce/tough-cookie.git"},bugs:{url:"https://github.com/salesforce/tough-cookie/issues"},main:"./lib/cookie",files:["lib"],scripts:{test:"vows test/*_test.js",cover:"nyc --reporter=lcov --reporter=html vows test/*_test.js"},engines:{node:">=0.8"},devDependencies:{async:"^1.4.2",nyc:"^11.6.0","string.prototype.repeat":"^0.2.0",vows:"^0.8.1"},dependencies:{psl:"^1.1.24",punycode:"^1.4.1"}}},function(e,t){function a(e,t){var a=[],i=[];return null==t&&(t=function(e,t){return a[0]===t?"[Circular ~]":"[Circular ~."+i.slice(0,a.indexOf(t)).join(".")+"]"}),function(r,o){if(a.length>0){var n=a.indexOf(this);~n?a.splice(n+1):a.push(this),~n?i.splice(n,1/0,r):i.push(r),~a.indexOf(o)&&(o=t.call(this,r,o))}else a.push(o);return null==e?o:e.call(this,r,o)}}(e.exports=function(e,t,i,r){return JSON.stringify(e,a(t,r),i)}).getSerialize=a},function(e,t,a){"use strict";var i=a(18),r=a(19),o=a(8),n=a(1),s=a(20),u=a(106),c=a(107),p=a(108),l=a(110),m=a(62),h=a(44),d=a(129),f=a(130),g=a(35),v=a(71),y=a(138).strict,b=a(37),k=a(49),j=a(139),w=a(140).Querystring,x=a(143).Har,E=a(200).Auth,S=a(203).OAuth,_=a(205),R=a(206).Multipart,A=a(207).Redirect,C=a(208).Tunnel,q=a(211),O=a(23).Buffer,P=b.safeStringify,F=b.isReadStream,z=b.toBase64,T=b.defer,I=b.copy,D=b.version,B=k.jar(),L={};function U(){return{uri:this.uri,method:this.method,headers:this.headers}}function N(){return{statusCode:this.statusCode,body:this.body,headers:this.headers,request:U.call(this.request)}}function H(e){e.har&&(this._har=new x(this),e=this._har.options(e)),s.Stream.call(this);var t=Object.keys(H.prototype),a=function(e,t){var a={};for(var i in t)-1===e.indexOf(i)&&(a[i]=t[i]);return a}(t,e);g(this,a),e=function(e,t){var a={};for(var i in t){var r=!(-1===e.indexOf(i)),o="function"==typeof t[i];r&&o||(a[i]=t[i])}return a}(t,e),this.readable=!0,this.writable=!0,e.method&&(this.explicitMethod=!0),this._qs=new w(this),this._auth=new E(this),this._oauth=new S(this),this._multipart=new R(this),this._redirect=new A(this),this._tunnel=new C(this),this.init(e)}function M(){H.debug&&console.error("REQUEST %s",n.format.apply(n,arguments))}n.inherits(H,s.Stream),H.debug=process.env.NODE_DEBUG&&/\brequest\b/.test(process.env.NODE_DEBUG),H.prototype.debug=M,H.prototype.init=function(e){var t=this;for(var a in e||(e={}),t.headers=t.headers?I(t.headers):{},t.headers)void 0===t.headers[a]&&delete t.headers[a];if(h.httpify(t,t.headers),t.method||(t.method=e.method||"GET"),t.localAddress||(t.localAddress=e.localAddress),t._qs.init(e),M(e),t.pool||!1===t.pool||(t.pool=L),t.dests=t.dests||[],t.__isRequestRequest=!0,!t._callback&&t.callback&&(t._callback=t.callback,t.callback=function(){t._callbackCalled||(t._callbackCalled=!0,t._callback.apply(t,arguments))},t.on("error",t.callback.bind()),t.on("complete",t.callback.bind(t,null))),!t.uri&&t.url&&(t.uri=t.url,delete t.url),t.baseUrl){if("string"!=typeof t.baseUrl)return t.emit("error",new Error("options.baseUrl must be a string"));if("string"!=typeof t.uri)return t.emit("error",new Error("options.uri must be a string when using options.baseUrl"));if(0===t.uri.indexOf("//")||-1!==t.uri.indexOf("://"))return t.emit("error",new Error("options.uri must be a path when using options.baseUrl"));var n=t.baseUrl.lastIndexOf("/")===t.baseUrl.length-1,s=0===t.uri.indexOf("/");n&&s?t.uri=t.baseUrl+t.uri.slice(1):n||s?t.uri=t.baseUrl+t.uri:""===t.uri?t.uri=t.baseUrl:t.uri=t.baseUrl+"/"+t.uri,delete t.baseUrl}if(!t.uri)return t.emit("error",new Error("options.uri is a required argument"));if("string"==typeof t.uri&&(t.uri=o.parse(t.uri)),t.uri.href||(t.uri.href=o.format(t.uri)),"unix:"===t.uri.protocol)return t.emit("error",new Error("`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`"));if("unix"===t.uri.host&&t.enableUnixSocket(),!1===t.strictSSL&&(t.rejectUnauthorized=!1),t.uri.pathname||(t.uri.pathname="/"),!(t.uri.host||t.uri.hostname&&t.uri.port||t.uri.isUnix)){var u='Invalid URI "'+o.format(t.uri)+'"';return 0===Object.keys(e).length&&(u+=". This can be caused by a crappy redirection."),t.abort(),t.emit("error",new Error(u))}if(t.hasOwnProperty("proxy")||(t.proxy=j(t.uri)),t.tunnel=t._tunnel.isEnabled(),t.proxy&&t._tunnel.setup(e),t._redirect.onRequest(e),t.setHost=!1,!t.hasHeader("host")){var c=t.originalHostHeaderName||"host";t.setHeader(c,t.uri.host),t.uri.port&&("80"===t.uri.port&&"http:"===t.uri.protocol||"443"===t.uri.port&&"https:"===t.uri.protocol)&&t.setHeader(c,t.uri.hostname),t.setHost=!0}if(t.jar(t._jar||e.jar),t.uri.port||("http:"===t.uri.protocol?t.uri.port=80:"https:"===t.uri.protocol&&(t.uri.port=443)),t.proxy&&!t.tunnel?(t.port=t.proxy.port,t.host=t.proxy.hostname):(t.port=t.uri.port,t.host=t.uri.hostname),e.form&&t.form(e.form),e.formData){var p=e.formData,l=t.form(),f=function(e,t){t&&t.hasOwnProperty("value")&&t.hasOwnProperty("options")?l.append(e,t.value,t.options):l.append(e,t)};for(var g in p)if(p.hasOwnProperty(g)){var b=p[g];if(b instanceof Array)for(var k=0;k<b.length;k++)f(g,b[k]);else f(g,b)}}if(e.qs&&t.qs(e.qs),t.uri.path?t.path=t.uri.path:t.path=t.uri.pathname+(t.uri.search||""),0===t.path.length&&(t.path="/"),e.aws&&t.aws(e.aws),e.hawk&&t.hawk(e.hawk),e.httpSignature&&t.httpSignature(e.httpSignature),e.auth&&(Object.prototype.hasOwnProperty.call(e.auth,"username")&&(e.auth.user=e.auth.username),Object.prototype.hasOwnProperty.call(e.auth,"password")&&(e.auth.pass=e.auth.password),t.auth(e.auth.user,e.auth.pass,e.auth.sendImmediately,e.auth.bearer)),t.gzip&&!t.hasHeader("accept-encoding")&&t.setHeader("accept-encoding","gzip, deflate"),t.uri.auth&&!t.hasHeader("authorization")){var w=t.uri.auth.split(":").map(function(e){return t._qs.unescape(e)});t.auth(w[0],w.slice(1).join(":"),!0)}if(!t.tunnel&&t.proxy&&t.proxy.auth&&!t.hasHeader("proxy-authorization")){var x=t.proxy.auth.split(":").map(function(e){return t._qs.unescape(e)}),E="Basic "+z(x.join(":"));t.setHeader("proxy-authorization",E)}function S(){var e;(y(t.body)&&(t.body=O.from(t.body)),t.hasHeader("content-length"))||((e="string"==typeof t.body?O.byteLength(t.body):Array.isArray(t.body)?t.body.reduce(function(e,t){return e+t.length},0):t.body.length)?t.setHeader("content-length",e):t.emit("error",new Error("Argument error, options.body.")))}t.proxy&&!t.tunnel&&(t.path=t.uri.protocol+"//"+t.uri.host+t.path),e.json&&t.json(e.json),e.multipart&&t.multipart(e.multipart),e.time&&(t.timing=!0,t.elapsedTime=t.elapsedTime||0),t.body&&!v(t.body)&&S(),e.oauth?t.oauth(e.oauth):t._oauth.params&&t.hasHeader("authorization")&&t.oauth(t._oauth.params);var _=t.proxy&&!t.tunnel?t.proxy.protocol:t.uri.protocol,R={"http:":i,"https:":r},A=t.httpModules||{};if(t.httpModule=A[_]||R[_],!t.httpModule)return t.emit("error",new Error("Invalid protocol: "+_));if(e.ca&&(t.ca=e.ca),!t.agent)if(e.agentOptions&&(t.agentOptions=e.agentOptions),e.agentClass)t.agentClass=e.agentClass;else if(e.forever){var C=D();0===C.major&&C.minor<=10?t.agentClass="http:"===_?d:d.SSL:(t.agentClass=t.httpModule.Agent,t.agentOptions=t.agentOptions||{},t.agentOptions.keepAlive=!0)}else t.agentClass=t.httpModule.Agent;!1===t.pool?t.agent=!1:t.agent=t.agent||t.getNewAgent(),t.on("pipe",function(e){if(t.ntick&&t._started&&t.emit("error",new Error("You cannot pipe to this stream after the outbound request has started.")),t.src=e,F(e))t.hasHeader("content-type")||t.setHeader("content-type",m.lookup(e.path));else{if(e.headers)for(var a in e.headers)t.hasHeader(a)||t.setHeader(a,e.headers[a]);t._json&&!t.hasHeader("content-type")&&t.setHeader("content-type","application/json"),e.method&&!t.explicitMethod&&(t.method=e.method)}}),T(function(){if(!t._aborted){var e=function(){if(t._form&&(t._auth.hasAuth?t._auth.hasAuth&&t._auth.sentAuth&&t._form.pipe(t):t._form.pipe(t)),t._multipart&&t._multipart.chunked&&t._multipart.body.pipe(t),t.body)v(t.body)?t.body.pipe(t):(S(),Array.isArray(t.body)?t.body.forEach(function(e){t.write(e)}):t.write(t.body),t.end());else if(t.requestBodyStream)console.warn("options.requestBodyStream is deprecated, please pass the request object to stream.pipe."),t.requestBodyStream.pipe(t);else if(!t.src){if(t._auth.hasAuth&&!t._auth.sentAuth)return void t.end();"GET"!==t.method&&void 0!==t.method&&t.setHeader("content-length",0),t.end()}};t._form&&!t.hasHeader("content-length")?(t.setHeader(t._form.getHeaders(),!0),t._form.getLength(function(a,i){a||isNaN(i)||t.setHeader("content-length",i),e()})):e(),t.ntick=!0}})},H.prototype.getNewAgent=function(){var e=this.agentClass,t={};if(this.agentOptions)for(var a in this.agentOptions)t[a]=this.agentOptions[a];this.ca&&(t.ca=this.ca),this.ciphers&&(t.ciphers=this.ciphers),this.secureProtocol&&(t.secureProtocol=this.secureProtocol),this.secureOptions&&(t.secureOptions=this.secureOptions),void 0!==this.rejectUnauthorized&&(t.rejectUnauthorized=this.rejectUnauthorized),this.cert&&this.key&&(t.key=this.key,t.cert=this.cert),this.pfx&&(t.pfx=this.pfx),this.passphrase&&(t.passphrase=this.passphrase);var i="";e!==this.httpModule.Agent&&(i+=e.name);var r=this.proxy;return"string"==typeof r&&(r=o.parse(r)),(r&&"https:"===r.protocol||"https:"===this.uri.protocol)&&(t.ca&&(i&&(i+=":"),i+=t.ca),void 0!==t.rejectUnauthorized&&(i&&(i+=":"),i+=t.rejectUnauthorized),t.cert&&(i&&(i+=":"),i+=t.cert.toString("ascii")+t.key.toString("ascii")),t.pfx&&(i&&(i+=":"),i+=t.pfx.toString("ascii")),t.ciphers&&(i&&(i+=":"),i+=t.ciphers),t.secureProtocol&&(i&&(i+=":"),i+=t.secureProtocol),t.secureOptions&&(i&&(i+=":"),i+=t.secureOptions)),this.pool===L&&!i&&0===Object.keys(t).length&&this.httpModule.globalAgent?this.httpModule.globalAgent:(i=this.uri.protocol+i,this.pool[i]||(this.pool[i]=new e(t),this.pool.maxSockets&&(this.pool[i].maxSockets=this.pool.maxSockets)),this.pool[i])},H.prototype.start=function(){var e=this;if(e.timing)var t=(new Date).getTime(),a=q();if(!e._aborted){e._started=!0,e.method=e.method||"GET",e.href=e.uri.href,e.src&&e.src.stat&&e.src.stat.size&&!e.hasHeader("content-length")&&e.setHeader("content-length",e.src.stat.size),e._aws&&e.aws(e._aws,!0);var i,r=I(e);delete r.auth,M("make request",e.uri.href),delete r.timeout;try{e.req=e.httpModule.request(r)}catch(t){return void e.emit("error",t)}e.timing&&(e.startTime=t,e.startTimeNow=a,e.timings={}),e.timeout&&!e.timeoutTimer&&(e.timeout<0?i=0:"number"==typeof e.timeout&&isFinite(e.timeout)&&(i=e.timeout)),e.req.on("response",e.onRequestResponse.bind(e)),e.req.on("error",e.onRequestError.bind(e)),e.req.on("drain",function(){e.emit("drain")}),e.req.on("socket",function(t){var a=t._connecting||t.connecting;if(e.timing&&(e.timings.socket=q()-e.startTimeNow,a)){var r=function(){e.timings.lookup=q()-e.startTimeNow},o=function(){e.timings.connect=q()-e.startTimeNow};t.once("lookup",r),t.once("connect",o),e.req.once("error",function(){t.removeListener("lookup",r),t.removeListener("connect",o)})}var n=function(){e.req.setTimeout(i,function(){if(e.req){e.abort();var t=new Error("ESOCKETTIMEDOUT");t.code="ESOCKETTIMEDOUT",t.connect=!1,e.emit("error",t)}})};if(void 0!==i)if(a){var s=function(){t.removeListener("connect",s),clearTimeout(e.timeoutTimer),e.timeoutTimer=null,n()};t.on("connect",s),e.req.on("error",function(e){t.removeListener("connect",s)}),e.timeoutTimer=setTimeout(function(){t.removeListener("connect",s),e.abort();var a=new Error("ETIMEDOUT");a.code="ETIMEDOUT",a.connect=!0,e.emit("error",a)},i)}else n();e.emit("socket",t)}),e.emit("request",e.req)}},H.prototype.onRequestError=function(e){if(!this._aborted){if(this.req&&this.req._reusedSocket&&"ECONNRESET"===e.code&&this.agent.addRequestNoreuse)return this.agent={addRequest:this.agent.addRequestNoreuse.bind(this.agent)},this.start(),void this.req.end();this.timeout&&this.timeoutTimer&&(clearTimeout(this.timeoutTimer),this.timeoutTimer=null),this.emit("error",e)}},H.prototype.onRequestResponse=function(e){var t=this;if(t.timing&&(t.timings.response=q()-t.startTimeNow),M("onRequestResponse",t.uri.href,e.statusCode,e.headers),e.on("end",function(){t.timing&&(t.timings.end=q()-t.startTimeNow,e.timingStart=t.startTime,t.timings.socket||(t.timings.socket=0),t.timings.lookup||(t.timings.lookup=t.timings.socket),t.timings.connect||(t.timings.connect=t.timings.lookup),t.timings.response||(t.timings.response=t.timings.connect),M("elapsed time",t.timings.end),t.elapsedTime+=Math.round(t.timings.end),e.elapsedTime=t.elapsedTime,e.timings=t.timings,e.timingPhases={wait:t.timings.socket,dns:t.timings.lookup-t.timings.socket,tcp:t.timings.connect-t.timings.lookup,firstByte:t.timings.response-t.timings.connect,download:t.timings.end-t.timings.response,total:t.timings.end}),M("response end",t.uri.href,e.statusCode,e.headers)}),t._aborted)return M("aborted",t.uri.href),void e.resume();if(t.response=e,e.request=t,e.toJSON=N,t.httpModule!==r||!t.strictSSL||e.hasOwnProperty("socket")&&e.socket.authorized){t.originalHost=t.getHeader("host"),t.originalHostHeaderName||(t.originalHostHeaderName=t.hasHeader("host")),t.setHost&&t.removeHeader("host"),t.timeout&&t.timeoutTimer&&(clearTimeout(t.timeoutTimer),t.timeoutTimer=null);var a=t._jar&&t._jar.setCookie?t._jar:B,i=function(e){try{a.setCookie(e,t.uri.href,{ignoreError:!0})}catch(e){t.emit("error",e)}};if(e.caseless=h(e.headers),e.caseless.has("set-cookie")&&!t._disableCookies){var o=e.caseless.has("set-cookie");Array.isArray(e.headers[o])?e.headers[o].forEach(i):i(e.headers[o])}if(!t._redirect.onResponse(e)){e.on("close",function(){t._ended||t.response.emit("end")}),e.once("end",function(){t._ended=!0});var n,s;if(!t.gzip||(s=e.statusCode,"HEAD"===t.method||s>=100&&s<200||204===s||304===s))n=e;else{var c=e.headers["content-encoding"]||"identity";c=c.trim().toLowerCase();var p={flush:u.Z_SYNC_FLUSH,finishFlush:u.Z_SYNC_FLUSH};"gzip"===c?(n=u.createGunzip(p),e.pipe(n)):"deflate"===c?(n=u.createInflate(p),e.pipe(n)):("identity"!==c&&M("ignoring unrecognized Content-Encoding "+c),n=e)}t.encoding&&(0!==t.dests.length?console.error("Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid."):n.setEncoding(t.encoding)),t._paused&&n.pause(),t.responseContent=n,t.emit("response",e),t.dests.forEach(function(e){t.pipeDest(e)}),n.on("data",function(a){t.timing&&!t.responseStarted&&(t.responseStartTime=(new Date).getTime(),e.responseStartTime=t.responseStartTime),t._destdata=!0,t.emit("data",a)}),n.once("end",function(e){t.emit("end",e)}),n.on("error",function(e){t.emit("error",e)}),n.on("close",function(){t.emit("close")}),t.callback?t.readResponseBody(e):t.on("end",function(){t._aborted?M("aborted",t.uri.href):t.emit("complete",e)}),M("finish init function",t.uri.href)}}else{M("strict ssl error",t.uri.href);var l=e.hasOwnProperty("socket")?e.socket.authorizationError:t.uri.href+" does not support SSL";t.emit("error",new Error("SSL Error: "+l))}},H.prototype.readResponseBody=function(e){var t=this;M("reading response's body");var a=[],i=0,r=[];t.on("data",function(e){O.isBuffer(e)?e.length&&(i+=e.length,a.push(e)):r.push(e)}),t.on("end",function(){if(M("end event",t.uri.href),t._aborted)return M("aborted",t.uri.href),a=[],void(i=0);if(i?(M("has body",t.uri.href,i),e.body=O.concat(a,i),null!==t.encoding&&(e.body=e.body.toString(t.encoding)),a=[],i=0):r.length&&("utf8"===t.encoding&&r[0].length>0&&"\ufeff"===r[0][0]&&(r[0]=r[0].substring(1)),e.body=r.join("")),t._json)try{e.body=JSON.parse(e.body,t._jsonReviver)}catch(e){M("invalid JSON received",t.uri.href)}M("emitting complete",t.uri.href),void 0!==e.body||t._json||(e.body=null===t.encoding?O.alloc(0):""),t.emit("complete",e,e.body)})},H.prototype.abort=function(){this._aborted=!0,this.req?this.req.abort():this.response&&this.response.destroy(),this.emit("abort")},H.prototype.pipeDest=function(e){var t=this.response;if(e.headers&&!e.headersSent){if(t.caseless.has("content-type")){var a=t.caseless.has("content-type");e.setHeader?e.setHeader(a,t.headers[a]):e.headers[a]=t.headers[a]}if(t.caseless.has("content-length")){var i=t.caseless.has("content-length");e.setHeader?e.setHeader(i,t.headers[i]):e.headers[i]=t.headers[i]}}if(e.setHeader&&!e.headersSent){for(var r in t.headers)this.gzip&&"content-encoding"===r||e.setHeader(r,t.headers[r]);e.statusCode=t.statusCode}this.pipefilter&&this.pipefilter(t,e)},H.prototype.qs=function(e,t){var a;for(var i in a=!t&&this.uri.query?this._qs.parse(this.uri.query):{},e)a[i]=e[i];var r=this._qs.stringify(a);return""===r?this:(this.uri=o.parse(this.uri.href.split("?")[0]+"?"+r),this.url=this.uri,this.path=this.uri.path,"unix"===this.uri.host&&this.enableUnixSocket(),this)},H.prototype.form=function(e){var t=this;return e?(/^application\/x-www-form-urlencoded\b/.test(t.getHeader("content-type"))||t.setHeader("content-type","application/x-www-form-urlencoded"),t.body="string"==typeof e?t._qs.rfc3986(e.toString("utf8")):t._qs.stringify(e).toString("utf8"),t):(t._form=new f,t._form.on("error",function(e){e.message="form-data: "+e.message,t.emit("error",e),t.abort()}),t._form)},H.prototype.multipart=function(e){return this._multipart.onRequest(e),this._multipart.chunked||(this.body=this._multipart.body),this},H.prototype.json=function(e){return this.hasHeader("accept")||this.setHeader("accept","application/json"),"function"==typeof this.jsonReplacer&&(this._jsonReplacer=this.jsonReplacer),this._json=!0,"boolean"==typeof e?void 0!==this.body&&(/^application\/x-www-form-urlencoded\b/.test(this.getHeader("content-type"))?this.body=this._qs.rfc3986(this.body):this.body=P(this.body,this._jsonReplacer),this.hasHeader("content-type")||this.setHeader("content-type","application/json")):(this.body=P(e,this._jsonReplacer),this.hasHeader("content-type")||this.setHeader("content-type","application/json")),"function"==typeof this.jsonReviver&&(this._jsonReviver=this.jsonReviver),this},H.prototype.getHeader=function(e,t){var a,i;return t||(t=this.headers),Object.keys(t).forEach(function(r){r.length===e.length&&(i=new RegExp(e,"i"),r.match(i)&&(a=t[r]))}),a},H.prototype.enableUnixSocket=function(){var e=this.uri.path.split(":"),t=e[0],a=e[1];this.socketPath=t,this.uri.pathname=a,this.uri.path=a,this.uri.host=t,this.uri.hostname=t,this.uri.isUnix=!0},H.prototype.auth=function(e,t,a,i){return this._auth.onRequest(e,t,a,i),this},H.prototype.aws=function(e,t){if(!t)return this._aws=e,this;if(4===e.sign_version||"4"===e.sign_version){var a={host:this.uri.host,path:this.uri.path,method:this.method,headers:this.headers,body:this.body};e.service&&(a.service=e.service);var i=p.sign(a,{accessKeyId:e.key,secretAccessKey:e.secret,sessionToken:e.session});this.setHeader("authorization",i.headers.Authorization),this.setHeader("x-amz-date",i.headers["X-Amz-Date"]),i.headers["X-Amz-Security-Token"]&&this.setHeader("x-amz-security-token",i.headers["X-Amz-Security-Token"])}else{var r=new Date;this.setHeader("date",r.toUTCString());var o={key:e.key,secret:e.secret,verb:this.method.toUpperCase(),date:r,contentType:this.getHeader("content-type")||"",md5:this.getHeader("content-md5")||"",amazonHeaders:c.canonicalizeHeaders(this.headers)},n=this.uri.path;e.bucket&&n?o.resource="/"+e.bucket+n:e.bucket&&!n?o.resource="/"+e.bucket:!e.bucket&&n?o.resource=n:e.bucket||n||(o.resource="/"),o.resource=c.canonicalizeResource(o.resource),this.setHeader("authorization",c.authorization(o))}return this},H.prototype.httpSignature=function(e){var t=this;return l.signRequest({getHeader:function(e){return t.getHeader(e,t.headers)},setHeader:function(e,a){t.setHeader(e,a)},method:t.method,path:t.path},e),M("httpSignature authorization",t.getHeader("authorization")),t},H.prototype.hawk=function(e){this.setHeader("Authorization",_.header(this.uri,this.method,e))},H.prototype.oauth=function(e){return this._oauth.onRequest(e),this},H.prototype.jar=function(e){var t;if(0===this._redirect.redirectsFollowed&&(this.originalCookieHeader=this.getHeader("cookie")),e){var a=e&&e.getCookieString?e:B,i=this.uri.href;a&&(t=a.getCookieString(i))}else t=!1,this._disableCookies=!0;return t&&t.length&&(this.originalCookieHeader?this.setHeader("cookie",this.originalCookieHeader+"; "+t):this.setHeader("cookie",t)),this._jar=e,this},H.prototype.pipe=function(e,t){if(!this.response)return this.dests.push(e),s.Stream.prototype.pipe.call(this,e,t),e;if(this._destdata)this.emit("error",new Error("You cannot pipe after data has been emitted from the response."));else{if(!this._ended)return s.Stream.prototype.pipe.call(this,e,t),this.pipeDest(e),e;this.emit("error",new Error("You cannot pipe after the response has been ended."))}},H.prototype.write=function(){if(!this._aborted)return this._started||this.start(),this.req?this.req.write.apply(this.req,arguments):void 0},H.prototype.end=function(e){this._aborted||(e&&this.write(e),this._started||this.start(),this.req&&this.req.end())},H.prototype.pause=function(){this.responseContent?this.responseContent.pause.apply(this.responseContent,arguments):this._paused=!0},H.prototype.resume=function(){this.responseContent?this.responseContent.resume.apply(this.responseContent,arguments):this._paused=!1},H.prototype.destroy=function(){this._ended?this.response&&this.response.destroy():this.end()},H.defaultProxyHeaderWhiteList=C.defaultProxyHeaderWhiteList.slice(),H.defaultProxyHeaderExclusiveList=C.defaultProxyHeaderExclusiveList.slice(),H.prototype.toJSON=U,e.exports=H},function(e,t){e.exports=require("zlib")},function(e,t,a){
/*!
 *  Copyright 2010 LearnBoost <dev@learnboost.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var i=a(2),r=a(8).parse,o=["acl","location","logging","notification","partNumber","policy","requestPayment","torrent","uploadId","uploads","versionId","versioning","versions","website"];function n(e){return"AWS "+e.key+":"+u(e)}function s(e){return i.createHmac("sha1",e.secret).update(e.message).digest("base64")}function u(e){return e.message=c(e),s(e)}function c(e){var t=e.amazonHeaders||"";return t&&(t+="\n"),[e.verb,e.md5,e.contentType,e.date?e.date.toUTCString():"",t+e.resource].join("\n")}function p(e){return"GET\n\n\n"+e.date+"\n"+e.resource}e.exports=n,e.exports.authorization=n,e.exports.hmacSha1=s,e.exports.sign=u,e.exports.signQuery=function(e){return e.message=p(e),s(e)},e.exports.stringToSign=c,e.exports.queryStringToSign=p,e.exports.canonicalizeHeaders=function(e){for(var t=[],a=Object.keys(e),i=0,r=a.length;i<r;++i){var o,n=e[o=a[i]];0===(o=o.toLowerCase()).indexOf("x-amz")&&t.push(o+":"+n)}return t.sort().join("\n")},e.exports.canonicalizeResource=function(e){var t=r(e,!0),a=t.pathname,i=[];return Object.keys(t.query).forEach(function(e){if(~o.indexOf(e)){var a=""==t.query[e]?"":"="+encodeURIComponent(t.query[e]);i.push(e+a)}}),a+(i.length?"?"+i.sort().join("&"):"")}},function(e,t,a){var i=t,r=a(8),o=a(24),n=a(2),s=a(109)(1e3);function u(e,t,a){return n.createHmac("sha256",e).update(t,"utf8").digest(a)}function c(e,t){return n.createHash("sha256").update(e,"utf8").digest(t)}function p(e){return e.replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e,t){"string"==typeof e&&(e=r.parse(e));var a=e.headers=e.headers||{},i=this.matchHost(e.hostname||e.host||a.Host||a.host);this.request=e,this.credentials=t||this.defaultCredentials(),this.service=e.service||i[0]||"",this.region=e.region||i[1]||"us-east-1","email"===this.service&&(this.service="ses"),!e.method&&e.body&&(e.method="POST"),a.Host||a.host||(a.Host=e.hostname||e.host||this.createHost(),e.port&&(a.Host+=":"+e.port)),e.hostname||e.host||(e.hostname=a.Host||a.host),this.isCodeCommitGit="codecommit"===this.service&&"GIT"===e.method}l.prototype.matchHost=function(e){var t=((e||"").match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com(\.cn)?$/)||[]).slice(1,3);return"es"===t[1]&&(t=t.reverse()),t},l.prototype.isSingleRegion=function(){return["s3","sdb"].indexOf(this.service)>=0&&"us-east-1"===this.region||["cloudfront","ls","route53","iam","importexport","sts"].indexOf(this.service)>=0},l.prototype.createHost=function(){var e=this.isSingleRegion()?"":("s3"===this.service&&"us-east-1"!==this.region?"-":".")+this.region;return("ses"===this.service?"email":this.service)+e+".amazonaws.com"},l.prototype.prepareRequest=function(){this.parsePath();var e,t=this.request,a=t.headers;t.signQuery?(this.parsedPath.query=e=this.parsedPath.query||{},this.credentials.sessionToken&&(e["X-Amz-Security-Token"]=this.credentials.sessionToken),"s3"!==this.service||e["X-Amz-Expires"]||(e["X-Amz-Expires"]=86400),e["X-Amz-Date"]?this.datetime=e["X-Amz-Date"]:e["X-Amz-Date"]=this.getDateTime(),e["X-Amz-Algorithm"]="AWS4-HMAC-SHA256",e["X-Amz-Credential"]=this.credentials.accessKeyId+"/"+this.credentialString(),e["X-Amz-SignedHeaders"]=this.signedHeaders()):(t.doNotModifyHeaders||this.isCodeCommitGit||(!t.body||a["Content-Type"]||a["content-type"]||(a["Content-Type"]="application/x-www-form-urlencoded; charset=utf-8"),!t.body||a["Content-Length"]||a["content-length"]||(a["Content-Length"]=Buffer.byteLength(t.body)),!this.credentials.sessionToken||a["X-Amz-Security-Token"]||a["x-amz-security-token"]||(a["X-Amz-Security-Token"]=this.credentials.sessionToken),"s3"!==this.service||a["X-Amz-Content-Sha256"]||a["x-amz-content-sha256"]||(a["X-Amz-Content-Sha256"]=c(this.request.body||"","hex")),a["X-Amz-Date"]||a["x-amz-date"]?this.datetime=a["X-Amz-Date"]||a["x-amz-date"]:a["X-Amz-Date"]=this.getDateTime()),delete a.Authorization,delete a.authorization)},l.prototype.sign=function(){return this.parsedPath||this.prepareRequest(),this.request.signQuery?this.parsedPath.query["X-Amz-Signature"]=this.signature():this.request.headers.Authorization=this.authHeader(),this.request.path=this.formatPath(),this.request},l.prototype.getDateTime=function(){if(!this.datetime){var e=this.request.headers,t=new Date(e.Date||e.date||new Date);this.datetime=t.toISOString().replace(/[:\-]|\.\d{3}/g,""),this.isCodeCommitGit&&(this.datetime=this.datetime.slice(0,-1))}return this.datetime},l.prototype.getDate=function(){return this.getDateTime().substr(0,8)},l.prototype.authHeader=function(){return["AWS4-HMAC-SHA256 Credential="+this.credentials.accessKeyId+"/"+this.credentialString(),"SignedHeaders="+this.signedHeaders(),"Signature="+this.signature()].join(", ")},l.prototype.signature=function(){var e,t,a,i=this.getDate(),r=[this.credentials.secretAccessKey,i,this.region,this.service].join(),o=s.get(r);return o||(e=u("AWS4"+this.credentials.secretAccessKey,i),t=u(e,this.region),a=u(t,this.service),o=u(a,"aws4_request"),s.set(r,o)),u(o,this.stringToSign(),"hex")},l.prototype.stringToSign=function(){return["AWS4-HMAC-SHA256",this.getDateTime(),this.credentialString(),c(this.canonicalString(),"hex")].join("\n")},l.prototype.canonicalString=function(){this.parsedPath||this.prepareRequest();var e,t=this.parsedPath.path,a=this.parsedPath.query,i=this.request.headers,r="",n="s3"!==this.service,s="s3"===this.service||this.request.doNotEncodePath,u="s3"===this.service,l="s3"===this.service;return e="s3"===this.service&&this.request.signQuery?"UNSIGNED-PAYLOAD":this.isCodeCommitGit?"":i["X-Amz-Content-Sha256"]||i["x-amz-content-sha256"]||c(this.request.body||"","hex"),a&&(r=p(o.stringify(Object.keys(a).sort().reduce(function(e,t){return t?(e[t]=Array.isArray(a[t])?l?a[t][0]:a[t].slice().sort():a[t],e):e},{})))),"/"!==t&&(n&&(t=t.replace(/\/{2,}/g,"/")),"/"!==(t=t.split("/").reduce(function(e,t){return n&&".."===t?e.pop():n&&"."===t||(s&&(t=decodeURIComponent(t)),e.push(p(encodeURIComponent(t)))),e},[]).join("/"))[0]&&(t="/"+t),u&&(t=t.replace(/%2F/g,"/"))),[this.request.method||"GET",t,r,this.canonicalHeaders()+"\n",this.signedHeaders(),e].join("\n")},l.prototype.canonicalHeaders=function(){var e=this.request.headers;return Object.keys(e).sort(function(e,t){return e.toLowerCase()<t.toLowerCase()?-1:1}).map(function(t){return t.toLowerCase()+":"+e[t].toString().trim().replace(/\s+/g," ")}).join("\n")},l.prototype.signedHeaders=function(){return Object.keys(this.request.headers).map(function(e){return e.toLowerCase()}).sort().join(";")},l.prototype.credentialString=function(){return[this.getDate(),this.region,this.service,"aws4_request"].join("/")},l.prototype.defaultCredentials=function(){var e=process.env;return{accessKeyId:e.AWS_ACCESS_KEY_ID||e.AWS_ACCESS_KEY,secretAccessKey:e.AWS_SECRET_ACCESS_KEY||e.AWS_SECRET_KEY,sessionToken:e.AWS_SESSION_TOKEN}},l.prototype.parsePath=function(){var e=this.request.path||"/",t=e.indexOf("?"),a=null;t>=0&&(a=o.parse(e.slice(t+1)),e=e.slice(0,t)),/[^0-9A-Za-z!'()*\-._~%\/]/.test(e)&&(e=e.split("/").map(function(e){return encodeURIComponent(decodeURIComponent(e))}).join("/")),this.parsedPath={path:e,query:a}},l.prototype.formatPath=function(){var e=this.parsedPath.path,t=this.parsedPath.query;return t?(null!=t[""]&&delete t[""],e+"?"+p(o.stringify(t))):e},i.RequestSigner=l,i.sign=function(e,t){return new l(e,t).sign()}},function(e,t){function a(e){this.capacity=0|e,this.map=Object.create(null),this.list=new i}function i(){this.firstNode=null,this.lastNode=null}function r(e,t){this.key=e,this.val=t,this.prev=null,this.next=null}e.exports=function(e){return new a(e)},a.prototype.get=function(e){var t=this.map[e];if(null!=t)return this.used(t),t.val},a.prototype.set=function(e,t){var a=this.map[e];if(null!=a)a.val=t;else{if(this.capacity||this.prune(),!this.capacity)return!1;a=new r(e,t),this.map[e]=a,this.capacity--}return this.used(a),!0},a.prototype.used=function(e){this.list.moveToFront(e)},a.prototype.prune=function(){var e=this.list.pop();null!=e&&(delete this.map[e.key],this.capacity++)},i.prototype.moveToFront=function(e){this.firstNode!=e&&(this.remove(e),null==this.firstNode?(this.firstNode=e,this.lastNode=e,e.prev=null,e.next=null):(e.prev=null,e.next=this.firstNode,e.next.prev=e,this.firstNode=e))},i.prototype.pop=function(){var e=this.lastNode;return null!=e&&this.remove(e),e},i.prototype.remove=function(e){this.firstNode==e?this.firstNode=e.next:null!=e.prev&&(e.prev.next=e.next),this.lastNode==e?this.lastNode=e.prev:null!=e.next&&(e.next.prev=e.prev)}},function(e,t,a){var i=a(111),r=a(119),o=a(126),n=a(32);e.exports={parse:i.parseRequest,parseRequest:i.parseRequest,sign:r.signRequest,signRequest:r.signRequest,createSigner:r.createSigner,isSigner:r.isSigner,sshKeyToPEM:n.sshKeyToPEM,sshKeyFingerprint:n.fingerprint,pemToRsaSSHKey:n.pemToRsaSSHKey,verify:o.verifySignature,verifySignature:o.verifySignature,verifyHMAC:o.verifyHMAC}},function(e,t,a){var i=a(0),r=a(1),o=a(32),n=(o.HASH_ALGOS,o.PK_ALGOS,o.HttpSignatureError),s=o.InvalidAlgorithmError,u=o.validateAlgorithm,c=0,p=1,l=0,m=1,h=2,d=3;function f(e){n.call(this,e,f)}function g(e){n.call(this,e,g)}function v(e){n.call(this,e,v)}function y(e){n.call(this,e,y)}function b(e){n.call(this,e,b)}r.inherits(f,n),r.inherits(g,n),r.inherits(v,n),r.inherits(y,n),r.inherits(b,n),e.exports={parseRequest:function(e,t){i.object(e,"request"),i.object(e.headers,"request.headers"),void 0===t&&(t={}),void 0===t.headers&&(t.headers=[e.headers["x-date"]?"x-date":"date"]),i.object(t,"options"),i.arrayOfString(t.headers,"options.headers"),i.optionalFinite(t.clockSkew,"options.clockSkew");var a=t.authorizationHeaderName||"authorization";if(!e.headers[a])throw new y("no "+a+" header present in the request");t.clockSkew=t.clockSkew||300;var r,o=0,n=c,k=l,j="",w="",x={scheme:"",params:{},signingString:""},E=e.headers[a];for(o=0;o<E.length;o++){var S=E.charAt(o);switch(Number(n)){case c:" "!==S?x.scheme+=S:n=p;break;case p:switch(Number(k)){case l:var _=S.charCodeAt(0);if(_>=65&&_<=90||_>=97&&_<=122)j+=S;else{if("="!==S)throw new g("bad param format");if(0===j.length)throw new g("bad param format");k=m}break;case m:if('"'!==S)throw new g("bad param format");w="",k=h;break;case h:'"'===S?(x.params[j]=w,k=d):w+=S;break;case d:if(","!==S)throw new g("bad param format");j="",k=l;break;default:throw new Error("Invalid substate")}break;default:throw new Error("Invalid substate")}}if(x.params.headers&&""!==x.params.headers?x.params.headers=x.params.headers.split(" "):e.headers["x-date"]?x.params.headers=["x-date"]:x.params.headers=["date"],!x.scheme||"Signature"!==x.scheme)throw new g('scheme was not "Signature"');if(!x.params.keyId)throw new g("keyId was not specified");if(!x.params.algorithm)throw new g("algorithm was not specified");if(!x.params.signature)throw new g("signature was not specified");x.params.algorithm=x.params.algorithm.toLowerCase();try{u(x.params.algorithm)}catch(e){throw e instanceof s?new v(x.params.algorithm+" is not supported"):e}for(o=0;o<x.params.headers.length;o++){var R=x.params.headers[o].toLowerCase();if(x.params.headers[o]=R,"request-line"===R){if(t.strict)throw new b("request-line is not a valid header with strict parsing enabled.");x.signingString+=e.method+" "+e.url+" HTTP/"+e.httpVersion}else if("(request-target)"===R)x.signingString+="(request-target): "+e.method.toLowerCase()+" "+e.url;else{var A=e.headers[R];if(void 0===A)throw new y(R+" was not in the request");x.signingString+=R+": "+A}o+1<x.params.headers.length&&(x.signingString+="\n")}if(e.headers.date||e.headers["x-date"]){r=e.headers["x-date"]?new Date(e.headers["x-date"]):new Date(e.headers.date);var C=new Date,q=Math.abs(C.getTime()-r.getTime());if(q>1e3*t.clockSkew)throw new f("clock skew of "+q/1e3+"s was greater than "+t.clockSkew+"s")}if(t.headers.forEach(function(e){if(x.params.headers.indexOf(e.toLowerCase())<0)throw new y(e+" was not a signed header")}),t.algorithms&&-1===t.algorithms.indexOf(x.params.algorithm))throw new v(x.params.algorithm+" is not a supported algorithm");return x.algorithm=x.params.algorithm.toUpperCase(),x.keyId=x.params.keyId,x}}},function(e,t,a){var i=a(39),r=a(40),o=a(113),n=a(114);for(var s in e.exports={Reader:o,Writer:n},r)r.hasOwnProperty(s)&&(e.exports[s]=r[s]);for(var u in i)i.hasOwnProperty(u)&&(e.exports[u]=i[u])},function(e,t,a){var i=a(21),r=a(3).Buffer,o=a(40),n=a(39).newInvalidAsn1Error;function s(e){if(!e||!r.isBuffer(e))throw new TypeError("data must be a node Buffer");this._buf=e,this._size=e.length,this._len=0,this._offset=0}Object.defineProperty(s.prototype,"length",{enumerable:!0,get:function(){return this._len}}),Object.defineProperty(s.prototype,"offset",{enumerable:!0,get:function(){return this._offset}}),Object.defineProperty(s.prototype,"remain",{get:function(){return this._size-this._offset}}),Object.defineProperty(s.prototype,"buffer",{get:function(){return this._buf.slice(this._offset)}}),s.prototype.readByte=function(e){if(this._size-this._offset<1)return null;var t=255&this._buf[this._offset];return e||(this._offset+=1),t},s.prototype.peek=function(){return this.readByte(!0)},s.prototype.readLength=function(e){if(void 0===e&&(e=this._offset),e>=this._size)return null;var t=255&this._buf[e++];if(null===t)return null;if(128==(128&t)){if(0===(t&=127))throw n("Indefinite length not supported");if(t>4)throw n("encoding too long");if(this._size-e<t)return null;this._len=0;for(var a=0;a<t;a++)this._len=(this._len<<8)+(255&this._buf[e++])}else this._len=t;return e},s.prototype.readSequence=function(e){var t=this.peek();if(null===t)return null;if(void 0!==e&&e!==t)throw n("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var a=this.readLength(this._offset+1);return null===a?null:(this._offset=a,t)},s.prototype.readInt=function(){return this._readTag(o.Integer)},s.prototype.readBoolean=function(){return 0!==this._readTag(o.Boolean)},s.prototype.readEnumeration=function(){return this._readTag(o.Enumeration)},s.prototype.readString=function(e,t){e||(e=o.OctetString);var a=this.peek();if(null===a)return null;if(a!==e)throw n("Expected 0x"+e.toString(16)+": got 0x"+a.toString(16));var i=this.readLength(this._offset+1);if(null===i)return null;if(this.length>this._size-i)return null;if(this._offset=i,0===this.length)return t?r.alloc(0):"";var s=this._buf.slice(this._offset,this._offset+this.length);return this._offset+=this.length,t?s:s.toString("utf8")},s.prototype.readOID=function(e){e||(e=o.OID);var t=this.readString(e,!0);if(null===t)return null;for(var a=[],i=0,r=0;r<t.length;r++){var n=255&t[r];i<<=7,i+=127&n,0==(128&n)&&(a.push(i),i=0)}return i=a.shift(),a.unshift(i%40),a.unshift(i/40>>0),a.join(".")},s.prototype._readTag=function(e){i.ok(void 0!==e);var t=this.peek();if(null===t)return null;if(t!==e)throw n("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var a=this.readLength(this._offset+1);if(null===a)return null;if(this.length>4)throw n("Integer too long: "+this.length);if(this.length>this._size-a)return null;this._offset=a;for(var r=this._buf[this._offset],o=0,s=0;s<this.length;s++)o<<=8,o|=255&this._buf[this._offset++];return 128==(128&r)&&4!==s&&(o-=1<<8*s),o>>0},e.exports=s},function(e,t,a){var i=a(21),r=a(3).Buffer,o=a(40),n=a(39).newInvalidAsn1Error,s={size:1024,growthFactor:8};function u(e){var t,a;t=s,a=e||{},i.ok(t),i.equal(typeof t,"object"),i.ok(a),i.equal(typeof a,"object"),Object.getOwnPropertyNames(t).forEach(function(e){if(!a[e]){var i=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(a,e,i)}}),e=a,this._buf=r.alloc(e.size||1024),this._size=this._buf.length,this._offset=0,this._options=e,this._seq=[]}Object.defineProperty(u.prototype,"buffer",{get:function(){if(this._seq.length)throw n(this._seq.length+" unended sequence(s)");return this._buf.slice(0,this._offset)}}),u.prototype.writeByte=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");this._ensure(1),this._buf[this._offset++]=e},u.prototype.writeInt=function(e,t){if("number"!=typeof e)throw new TypeError("argument must be a Number");"number"!=typeof t&&(t=o.Integer);for(var a=4;(0==(4286578688&e)||-8388608==(4286578688&e))&&a>1;)a--,e<<=8;if(a>4)throw n("BER ints cannot be > 0xffffffff");for(this._ensure(2+a),this._buf[this._offset++]=t,this._buf[this._offset++]=a;a-- >0;)this._buf[this._offset++]=(4278190080&e)>>>24,e<<=8},u.prototype.writeNull=function(){this.writeByte(o.Null),this.writeByte(0)},u.prototype.writeEnumeration=function(e,t){if("number"!=typeof e)throw new TypeError("argument must be a Number");return"number"!=typeof t&&(t=o.Enumeration),this.writeInt(e,t)},u.prototype.writeBoolean=function(e,t){if("boolean"!=typeof e)throw new TypeError("argument must be a Boolean");"number"!=typeof t&&(t=o.Boolean),this._ensure(3),this._buf[this._offset++]=t,this._buf[this._offset++]=1,this._buf[this._offset++]=e?255:0},u.prototype.writeString=function(e,t){if("string"!=typeof e)throw new TypeError("argument must be a string (was: "+typeof e+")");"number"!=typeof t&&(t=o.OctetString);var a=r.byteLength(e);this.writeByte(t),this.writeLength(a),a&&(this._ensure(a),this._buf.write(e,this._offset),this._offset+=a)},u.prototype.writeBuffer=function(e,t){if("number"!=typeof t)throw new TypeError("tag must be a number");if(!r.isBuffer(e))throw new TypeError("argument must be a buffer");this.writeByte(t),this.writeLength(e.length),this._ensure(e.length),e.copy(this._buf,this._offset,0,e.length),this._offset+=e.length},u.prototype.writeStringArray=function(e){if(!e instanceof Array)throw new TypeError("argument must be an Array[String]");var t=this;e.forEach(function(e){t.writeString(e)})},u.prototype.writeOID=function(e,t){if("string"!=typeof e)throw new TypeError("argument must be a string");if("number"!=typeof t&&(t=o.OID),!/^([0-9]+\.){3,}[0-9]+$/.test(e))throw new Error("argument is not a valid OID string");var a=e.split("."),i=[];i.push(40*parseInt(a[0],10)+parseInt(a[1],10)),a.slice(2).forEach(function(e){!function(e,t){t<128?e.push(t):t<16384?(e.push(t>>>7|128),e.push(127&t)):t<2097152?(e.push(t>>>14|128),e.push(255&(t>>>7|128)),e.push(127&t)):t<268435456?(e.push(t>>>21|128),e.push(255&(t>>>14|128)),e.push(255&(t>>>7|128)),e.push(127&t)):(e.push(255&(t>>>28|128)),e.push(255&(t>>>21|128)),e.push(255&(t>>>14|128)),e.push(255&(t>>>7|128)),e.push(127&t))}(i,parseInt(e,10))});var r=this;this._ensure(2+i.length),this.writeByte(t),this.writeLength(i.length),i.forEach(function(e){r.writeByte(e)})},u.prototype.writeLength=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");if(this._ensure(4),e<=127)this._buf[this._offset++]=e;else if(e<=255)this._buf[this._offset++]=129,this._buf[this._offset++]=e;else if(e<=65535)this._buf[this._offset++]=130,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e;else{if(!(e<=16777215))throw n("Length too long (> 4 bytes)");this._buf[this._offset++]=131,this._buf[this._offset++]=e>>16,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e}},u.prototype.startSequence=function(e){"number"!=typeof e&&(e=o.Sequence|o.Constructor),this.writeByte(e),this._seq.push(this._offset),this._ensure(3),this._offset+=3},u.prototype.endSequence=function(){var e=this._seq.pop(),t=e+3,a=this._offset-t;if(a<=127)this._shift(t,a,-2),this._buf[e]=a;else if(a<=255)this._shift(t,a,-1),this._buf[e]=129,this._buf[e+1]=a;else if(a<=65535)this._buf[e]=130,this._buf[e+1]=a>>8,this._buf[e+2]=a;else{if(!(a<=16777215))throw n("Sequence too long");this._shift(t,a,1),this._buf[e]=131,this._buf[e+1]=a>>16,this._buf[e+2]=a>>8,this._buf[e+3]=a}},u.prototype._shift=function(e,t,a){i.ok(void 0!==e),i.ok(void 0!==t),i.ok(a),this._buf.copy(this._buf,e+a,e,e+t),this._offset+=a},u.prototype._ensure=function(e){if(i.ok(e),this._size-this._offset<e){var t=this._size*this._options.growthFactor;t-this._offset<e&&(t+=e);var a=r.alloc(t);this._buf.copy(a,0,0,this._offset),this._buf=a,this._size=t}},e.exports=u},function(e,t,a){var i=a(2),r=a(26).BigInteger,o=(a(33).ECPointFp,a(3).Buffer);function n(e,t){return e.length>=t?e:n("0"+e,t)}t.ECCurves=a(116),t.ECKey=function(e,t,a){var s,u=e(),c=u.getN(),p=Math.floor(c.bitLength()/8);if(t)if(a){e=u.getCurve();this.P=e.decodePointHex(t.toString("hex"))}else{if(t.length!=p)return!1;s=new r(t.toString("hex"),16)}else{var l=c.subtract(r.ONE),m=new r(i.randomBytes(c.bitLength()));s=m.mod(l).add(r.ONE),this.P=u.getG().multiply(s)}this.P&&(this.PublicKey=o.from(u.getCurve().encodeCompressedPointHex(this.P),"hex")),s&&(this.PrivateKey=o.from(n(s.toString(16),2*p),"hex"),this.deriveSharedSecret=function(e){if(!e||!e.P)return!1;var t=e.P.multiply(s);return o.from(n(t.getX().toBigInteger().toString(16),2*p),"hex")})}},function(e,t,a){var i=a(26).BigInteger,r=a(33).ECCurveFp;function o(e,t,a,i){this.curve=e,this.g=t,this.n=a,this.h=i}function n(e){return new i(e,16)}function s(){var e=n("FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF"),t=n("FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC"),a=n("E87579C11079F43DD824993C2CEE5ED3"),s=n("FFFFFFFE0000000075A30D1B9038A115"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("04161FF7528B899B2D0C28607CA52C5B86CF5AC8395BAFEB13C02DA292DDED7A83");return new o(c,p,s,u)}function u(){var e=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73"),t=i.ZERO,a=n("7"),s=n("0100000000000000000001B8FA16DFAB9ACA16B6B3"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("043B4C382CE37AA192A4019E763036F4F5DD4D7EBB938CF935318FDCED6BC28286531733C3F03C4FEE");return new o(c,p,s,u)}function c(){var e=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF"),t=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC"),a=n("1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45"),s=n("0100000000000000000001F4C8F927AED3CA752257"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("044A96B5688EF573284664698968C38BB913CBFC8223A628553168947D59DCC912042351377AC5FB32");return new o(c,p,s,u)}function p(){var e=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37"),t=i.ZERO,a=n("3"),s=n("FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("04DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D");return new o(c,p,s,u)}function l(){var e=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF"),t=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC"),a=n("64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1"),s=n("FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("04188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF101207192B95FFC8DA78631011ED6B24CDD573F977A11E794811");return new o(c,p,s,u)}function m(){var e=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001"),t=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE"),a=n("B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4"),s=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("04B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34");return new o(c,p,s,u)}function h(){var e=n("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF"),t=n("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC"),a=n("5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B"),s=n("FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("046B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C2964FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5");return new o(c,p,s,u)}o.prototype.getCurve=function(){return this.curve},o.prototype.getG=function(){return this.g},o.prototype.getN=function(){return this.n},o.prototype.getH=function(){return this.h},e.exports={secp128r1:s,secp160k1:u,secp160r1:c,secp192k1:p,secp192r1:l,secp224r1:m,secp256r1:h}},function(e,t,a){e.exports={read:function(e,t){n.isBuffer(e)&&(e=e.toString("ascii"));var a=e.trim().split(/[ \t\n]+/g);if(a.length<2||a.length>3)throw new Error("Not a valid SSH certificate line");var i=a[0],r=a[1];return g(r=n.from(r,"base64"),i)},verify:function(e,t){return!1},sign:function(e,t){void 0===e.signatures.openssh&&(e.signatures.openssh={});try{var a=b(e,!0)}catch(t){return delete e.signatures.openssh,!1}var i=e.signatures.openssh,r=void 0;"rsa"!==t.type&&"dsa"!==t.type||(r="sha1");var o=t.createSign(r);return o.write(a),i.signature=o.sign(),!0},signAsync:function(e,t,a){void 0===e.signatures.openssh&&(e.signatures.openssh={});try{var i=b(e,!0)}catch(t){return delete e.signatures.openssh,void a(t)}var r=e.signatures.openssh;t(i,function(e,t){if(e)a(e);else{try{t.toBuffer("ssh")}catch(e){return void a(e)}r.signature=t,a()}})},write:function(e,t){void 0===t&&(t={});var a=b(e),i=k(e.subjectKey)+" "+a.toString("base64");t.comment&&(i=i+" "+t.comment);return i},fromBuffer:g,toBuffer:b};var i=a(0),r=a(28),o=a(2),n=a(3).Buffer,s=a(7),u=a(4),c=(a(6),a(31)),p=a(16),l=a(11),m=a(5),h=a(30);var d={user:1,host:2};Object.keys(d).forEach(function(e){d[d[e]]=e});var f=/^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;function g(e,t,a){var o=new r({buffer:e}),n=o.readString();if(void 0!==t&&n!==t)throw new Error("SSH certificate algorithm mismatch");void 0===t&&(t=n);var g={signatures:{}};g.signatures.openssh={},g.signatures.openssh.nonce=o.readBuffer();var y={},b=y.parts=[];y.type=function(e){if("ssh-rsa-cert-v01@openssh.com"===e)return"rsa";if("ssh-dss-cert-v01@openssh.com"===e)return"dsa";if(e.match(f))return"ecdsa";if("ssh-ed25519-cert-v01@openssh.com"===e)return"ed25519";throw new Error("Unsupported cert type "+e)}(t);for(var k=s.info[y.type].parts.length;b.length<k;)b.push(o.readPart());i.ok(b.length>=1,"key must have at least one part");var j=s.info[y.type];if("ecdsa"===y.type){var w=f.exec(t);i.ok(null!==w),i.strictEqual(w[1],b[0].data.toString())}for(var x=0;x<j.parts.length;++x)if(b[x].name=j.parts[x],"curve"!==b[x].name&&!1!==j.normalize){var E=b[x];E.data=m.mpNormalize(E.data)}g.subjectKey=new u(y),g.serial=o.readInt64();var S=d[o.readInt()];i.string(S,"valid cert type"),g.signatures.openssh.keyId=o.readString();for(var _=[],R=o.readBuffer(),A=new r({buffer:R});!A.atEnd();)_.push(A.readString());0===_.length&&(_=["*"]),g.subjects=_.map(function(e){if("user"===S)return c.forUser(e);if("host"===S)return c.forHost(e);throw new Error("Unknown identity type "+S)}),g.validFrom=v(o.readInt64()),g.validUntil=v(o.readInt64());for(var C,q=[],O=new r({buffer:o.readBuffer()});!O.atEnd();)(C={critical:!0}).name=O.readString(),C.data=O.readBuffer(),q.push(C);for(O=new r({buffer:o.readBuffer()});!O.atEnd();)(C={critical:!1}).name=O.readString(),C.data=O.readBuffer(),q.push(C);g.signatures.openssh.exts=q,o.readBuffer();var P=o.readBuffer();g.issuerKey=p.read(P),g.issuer=c.forHost("**");var F=o.readBuffer();return g.signatures.openssh.signature=l.parse(F,g.issuerKey.type,"ssh"),void 0!==a&&(a.remainder=o.remainder(),a.consumed=o._offset),new h(g)}function v(e){var t=4294967296*e.readUInt32BE(0);t+=e.readUInt32BE(4);var a=new Date;return a.setTime(1e3*t),a.sourceInt64=e,a}function y(e){if(void 0!==e.sourceInt64)return e.sourceInt64;var t=Math.round(e.getTime()/1e3),a=Math.floor(t/4294967296),i=Math.floor(t%4294967296),r=n.alloc(8);return r.writeUInt32BE(a,0),r.writeUInt32BE(i,4),r}function b(e,t){i.object(e.signatures.openssh,"signature for openssh format");var a=e.signatures.openssh;void 0===a.nonce&&(a.nonce=o.randomBytes(16));var u=new r({});u.writeString(k(e.subjectKey)),u.writeBuffer(a.nonce);var c=e.subjectKey;s.info[c.type].parts.forEach(function(e){u.writePart(c.part[e])}),u.writeInt64(e.serial);var l=e.subjects[0].type;i.notStrictEqual(l,"unknown"),e.subjects.forEach(function(e){i.strictEqual(e.type,l)}),l=d[l],u.writeInt(l),void 0===a.keyId&&(a.keyId=e.subjects[0].type+"_"+(e.subjects[0].uid||e.subjects[0].hostname)),u.writeString(a.keyId);var m=new r({});e.subjects.forEach(function(e){l===d.host?m.writeString(e.hostname):l===d.user&&m.writeString(e.uid)}),u.writeBuffer(m.toBuffer()),u.writeInt64(y(e.validFrom)),u.writeInt64(y(e.validUntil));var h=a.exts;void 0===h&&(h=[]);var f=new r({});return h.forEach(function(e){!0===e.critical&&(f.writeString(e.name),f.writeBuffer(e.data))}),u.writeBuffer(f.toBuffer()),f=new r({}),h.forEach(function(e){!0!==e.critical&&(f.writeString(e.name),f.writeBuffer(e.data))}),u.writeBuffer(f.toBuffer()),u.writeBuffer(n.alloc(0)),m=p.write(e.issuerKey),u.writeBuffer(m),t||u.writeBuffer(a.signature.toBuffer("ssh")),u.toBuffer()}function k(e){if("rsa"===e.type)return"ssh-rsa-cert-v01@openssh.com";if("dsa"===e.type)return"ssh-dss-cert-v01@openssh.com";if("ecdsa"===e.type)return"ecdsa-sha2-"+e.curve+"-cert-v01@openssh.com";if("ed25519"===e.type)return"ssh-ed25519-cert-v01@openssh.com";throw new Error("Unsupported key type "+e.type)}},function(e,t,a){var i=a(61);e.exports={read:function(e,t){"string"!=typeof e&&(r.buffer(e,"buf"),e=e.toString("ascii"));var a,n,s=e.trim().split(/[\r\n]+/g),u=-1;for(;!a&&u<s.length;)a=s[++u].match(/[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);r.ok(a,"invalid PEM header");var c=s.length;for(;!n&&c>0;)n=s[--c].match(/[-]+[ ]*END CERTIFICATE[ ]*[-]+/);r.ok(n,"invalid PEM footer"),s=s.slice(u,c+1);var p={};for(;s=s.slice(1),a=s[0].match(/^([A-Za-z0-9-]+): (.+)$/);)p[a[1].toLowerCase()]=a[2];return s=s.slice(0,-1).join(""),e=o.from(s,"base64"),i.read(e,t)},verify:i.verify,sign:i.sign,write:function(e,t){var a=i.write(e,t),r=a.toString("base64"),n=r.length+r.length/64+18+16+2*"CERTIFICATE".length+10,s=o.alloc(n),u=0;u+=s.write("-----BEGIN CERTIFICATE-----\n",u);for(var c=0;c<r.length;){var p=c+64;p>r.length&&(p=r.length),u+=s.write(r.slice(c,p),u),s[u++]=10,c=p}return u+=s.write("-----END CERTIFICATE-----\n",u),s.slice(0,u)}};var r=a(0),o=(a(12),a(3).Buffer);a(7),a(5),a(4),a(6),a(15),a(31),a(11),a(30)},function(e,t,a){var i=a(0),r=a(2),o=(a(18),a(1)),n=a(38),s=a(120),u=a(32),c=a(1).format,p=u.HASH_ALGOS,l=u.PK_ALGOS,m=u.InvalidAlgorithmError,h=u.HttpSignatureError,d=u.validateAlgorithm,f='Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';function g(e){h.call(this,e,g)}function v(e){h.call(this,e,v)}function y(e){i.object(e,"options");var t=[];if(void 0!==e.algorithm&&(i.string(e.algorithm,"options.algorithm"),t=d(e.algorithm)),this.rs_alg=t,void 0!==e.sign)i.func(e.sign,"options.sign"),this.rs_signFunc=e.sign;else if("hmac"===t[0]&&void 0!==e.key){if(i.string(e.keyId,"options.keyId"),this.rs_keyId=e.keyId,"string"!=typeof e.key&&!Buffer.isBuffer(e.key))throw new TypeError("options.key for HMAC must be a string or Buffer");this.rs_signer=r.createHmac(t[1].toUpperCase(),e.key),this.rs_signer.sign=function(){var e=this.digest("base64");return{hashAlgorithm:t[1],toString:function(){return e}}}}else{if(void 0===e.key)throw new TypeError("options.sign (func) or options.key is required");var a=e.key;if(("string"==typeof a||Buffer.isBuffer(a))&&(a=n.parsePrivateKey(a)),i.ok(n.PrivateKey.isPrivateKey(a,[1,2]),"options.key must be a sshpk.PrivateKey"),this.rs_key=a,i.string(e.keyId,"options.keyId"),this.rs_keyId=e.keyId,!l[a.type])throw new m(a.type.toUpperCase()+" type keys are not supported");if(void 0!==t[0]&&a.type!==t[0])throw new m("options.key must be a "+t[0].toUpperCase()+" key, was given a "+a.type.toUpperCase()+" key instead");this.rs_signer=a.createSign(t[1])}this.rs_headers=[],this.rs_lines=[]}o.inherits(g,h),o.inherits(v,h),y.prototype.writeHeader=function(e,t){if(i.string(e,"header"),e=e.toLowerCase(),i.string(t,"value"),this.rs_headers.push(e),this.rs_signFunc)this.rs_lines.push(e+": "+t);else{var a=e+": "+t;this.rs_headers.length>0&&(a="\n"+a),this.rs_signer.update(a)}return t},y.prototype.writeDateHeader=function(){return this.writeHeader("date",s.rfc1123(new Date))},y.prototype.writeTarget=function(e,t){i.string(e,"method"),i.string(t,"path"),e=e.toLowerCase(),this.writeHeader("(request-target)",e+" "+t)},y.prototype.sign=function(e){if(i.func(e,"callback"),this.rs_headers.length<1)throw new Error("At least one header must be signed");var t,a;if(this.rs_signFunc){var r=this.rs_lines.join("\n"),o=this;this.rs_signFunc(r,function(r,n){if(r)e(r);else{try{i.object(n,"signature"),i.string(n.keyId,"signature.keyId"),i.string(n.algorithm,"signature.algorithm"),i.string(n.signature,"signature.signature"),t=d(n.algorithm),a=c(f,n.keyId,n.algorithm,o.rs_headers.join(" "),n.signature)}catch(t){return void e(t)}e(null,a)}})}else{try{var n=this.rs_signer.sign()}catch(t){return void e(t)}t=(this.rs_alg[0]||this.rs_key.type)+"-"+n.hashAlgorithm;var s=n.toString();a=c(f,this.rs_keyId,t,this.rs_headers.join(" "),s),e(null,a)}},e.exports={isSigner:function(e){return"object"==typeof e&&e instanceof y},createSigner:function(e){return new y(e)},signRequest:function(e,t){i.object(e,"request"),i.object(t,"options"),i.optionalString(t.algorithm,"options.algorithm"),i.string(t.keyId,"options.keyId"),i.optionalArrayOfString(t.headers,"options.headers"),i.optionalString(t.httpVersion,"options.httpVersion"),e.getHeader("Date")||e.setHeader("Date",s.rfc1123(new Date)),t.headers||(t.headers=["date"]),t.httpVersion||(t.httpVersion="1.1");var a,o=[];t.algorithm&&(t.algorithm=t.algorithm.toLowerCase(),o=d(t.algorithm));var u,h="";for(a=0;a<t.headers.length;a++){if("string"!=typeof t.headers[a])throw new TypeError("options.headers must be an array of Strings");var y=t.headers[a].toLowerCase();if("request-line"===y){if(t.strict)throw new v("request-line is not a valid header with strict parsing enabled.");h+=e.method+" "+e.path+" HTTP/"+t.httpVersion}else if("(request-target)"===y)h+="(request-target): "+e.method.toLowerCase()+" "+e.path;else{var b=e.getHeader(y);if(void 0===b||""===b)throw new g(y+" was not in the request");h+=y+": "+b}a+1<t.headers.length&&(h+="\n")}if(e.hasOwnProperty("_stringToSign")&&(e._stringToSign=h),"hmac"===o[0]){if("string"!=typeof t.key&&!Buffer.isBuffer(t.key))throw new TypeError("options.key must be a string or Buffer");var k=r.createHmac(o[1].toUpperCase(),t.key);k.update(h),u=k.digest("base64")}else{var j=t.key;if(("string"==typeof j||Buffer.isBuffer(j))&&(j=n.parsePrivateKey(t.key)),i.ok(n.PrivateKey.isPrivateKey(j,[1,2]),"options.key must be a sshpk.PrivateKey"),!l[j.type])throw new m(j.type.toUpperCase()+" type keys are not supported");if(void 0!==o[0]&&j.type!==o[0])throw new m("options.key must be a "+o[0].toUpperCase()+" key, was given a "+j.type.toUpperCase()+" key instead");var w=j.createSign(o[1]);w.update(h);var x=w.sign();if(!p[x.hashAlgorithm])throw new m(x.hashAlgorithm.toUpperCase()+" is not a supported hash algorithm");t.algorithm=j.type+"-"+x.hashAlgorithm,u=x.toString(),i.notStrictEqual(u,"","empty signature produced")}var E=t.authorizationHeaderName||"Authorization";return e.setHeader(E,c(f,t.keyId,t.algorithm,t.headers.join(" "),u)),!0}}},function(e,t,a){var i=a(0),r=(a(1),a(121)),o=a(122),n=a(125);function s(e,t){return i.equal(typeof t,"string"),Object.prototype.hasOwnProperty.call(e,t)}t.deepCopy=function e(t){var a,i;var r="__deepCopy";if(t&&t[r])throw new Error("attempted deep copy of cyclic object");if(t&&t.constructor==Object){for(i in a={},t[r]=!0,t)i!=r&&(a[i]=e(t[i]));return delete t[r],a}if(t&&t.constructor==Array){for(a=[],t[r]=!0,i=0;i<t.length;i++)a.push(e(t[i]));return delete t[r],a}return t},t.deepEqual=function e(t,a){if(typeof t!=typeof a)return!1;if(null===t||null===a||"object"!=typeof t)return t===a;if(t.constructor!=a.constructor)return!1;var i;for(i in t){if(!a.hasOwnProperty(i))return!1;if(!e(t[i],a[i]))return!1}for(i in a)if(!t.hasOwnProperty(i))return!1;return!0},t.isEmpty=function(e){var t;for(t in e)return!1;return!0},t.hasKey=s,t.forEachKey=function(e,t){for(var a in e)s(e,a)&&t(a,e[a])},t.pluck=function(e,t){return i.equal(typeof t,"string"),function e(t,a){if(null!==t&&"object"==typeof t){if(t.hasOwnProperty(a))return t[a];var i=a.indexOf(".");if(-1!=i){var r=a.substr(0,i);if(t.hasOwnProperty(r))return e(t[r],a.substr(i+1))}}}(e,t)},t.flattenObject=function e(t,a){if(0===a)return[t];i.ok(null!==t);i.equal(typeof t,"object");i.equal(typeof a,"number");i.ok(a>=0);var r=[];var o;for(o in t)e(t[o],a-1).forEach(function(e){r.push([o].concat(e))});return r},t.flattenIter=function(e,t,a){!function e(t,a,r,o){var n;var s;if(0===a)return(n=r.slice(0)).push(t),void o(n);i.ok(null!==t);i.equal(typeof t,"object");i.equal(typeof a,"number");i.ok(a>=0);for(s in t)(n=r.slice(0)).push(s),e(t[s],a-1,n,o)}(e,t,[],a)},t.validateJsonObject=P,t.validateJsonObjectJS=P,t.randElt=function(e){return i.ok(Array.isArray(e)&&e.length>0,"randElt argument must be a non-empty array"),e[Math.floor(Math.random()*e.length)]},t.extraProperties=function(e,t){i.ok("object"==typeof e&&null!==e,"obj argument must be a non-null object"),i.ok(Array.isArray(t),"allowed argument must be an array of strings");for(var a=0;a<t.length;a++)i.ok("string"==typeof t[a],"allowed argument must be an array of strings");return Object.keys(e).filter(function(e){return-1===t.indexOf(e)})},t.mergeObjects=I,t.startsWith=function(e,t){return e.substr(0,t.length)==t},t.endsWith=function(e,t){return e.substr(e.length-t.length,t.length)==t},t.parseInteger=function(e,t){i.string(e,"str"),i.optionalObject(t,"options");var a,r=!1,o=m;t&&(r=s(t,"base"),o=I(o,t),i.number(o.base,"options.base"),i.ok(o.base>=2,"options.base >= 2"),i.ok(o.base<=36,"options.base <= 36"),i.bool(o.allowSign,"options.allowSign"),i.bool(o.allowPrefix,"options.allowPrefix"),i.bool(o.allowTrailing,"options.allowTrailing"),i.bool(o.allowImprecise,"options.allowImprecise"),i.bool(o.trimWhitespace,"options.trimWhitespace"),i.bool(o.leadingZeroIsOctal,"options.leadingZeroIsOctal"),o.leadingZeroIsOctal&&i.ok(!r,'"base" and "leadingZeroIsOctal" are mutually exclusive'));var n,u=-1,c=o.base,h=1,d=0,f=0,k=e.length;if(o.trimWhitespace)for(;f<k&&O(e.charCodeAt(f));)++f;o.allowSign&&("-"===e[f]?(f+=1,h=-1):"+"===e[f]&&(f+=1));"0"===e[f]&&(o.allowPrefix&&(-1===(u=function(e){return e===w||e===g?2:e===x||e===v?8:e===E||e===y?10:e===S||e===b?16:-1}(e.charCodeAt(f+1)))||r&&u!==c||(c=u,f+=2)),-1===u&&o.leadingZeroIsOctal&&(c=8));for(n=f;f<k&&(-1!==(a=q(e.charCodeAt(f)))&&a<c);++f)d*=c,d+=a;if(n===f)return new Error("invalid number: "+JSON.stringify(e));if(o.trimWhitespace)for(;f<k&&O(e.charCodeAt(f));)++f;if(f<k&&!o.allowTrailing)return new Error("trailing characters after number: "+JSON.stringify(e.slice(f)));if(0===d)return 0;var j=d*h;if(!o.allowImprecise&&(d>p||j<l))return new Error("number is outside of the supported range: "+JSON.stringify(e.slice(n,f)));return j},t.iso8601=function(e){"number"==typeof e&&(e=new Date(e));return i.ok(e.constructor===Date),r.sprintf("%4d-%02d-%02dT%02d:%02d:%02d.%03dZ",e.getUTCFullYear(),e.getUTCMonth()+1,e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds())},t.rfc1123=function(e){return r.sprintf("%s, %02d %s %04d %02d:%02d:%02d GMT",c[e.getUTCDay()],e.getUTCDate(),u[e.getUTCMonth()],e.getUTCFullYear(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds())},t.parseDateTime=function(e){var t=+e;return isNaN(t)?new Date(e):new Date(t)},t.hrtimediff=z,t.hrtimeDiff=z,t.hrtimeAccum=T,t.hrtimeAdd=function(e,t){return F(e),T([e[0],e[1]],t)},t.hrtimeNanosec=function(e){return F(e),Math.floor(1e9*e[0]+e[1])},t.hrtimeMicrosec=function(e){return F(e),Math.floor(1e6*e[0]+e[1]/1e3)},t.hrtimeMillisec=function(e){return F(e),Math.floor(1e3*e[0]+e[1]/1e6)};var u=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],c=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];var p=Number.MAX_SAFE_INTEGER||9007199254740991,l=Number.MIN_SAFE_INTEGER||-9007199254740991,m={base:10,allowSign:!0,allowPrefix:!1,allowTrailing:!1,allowImprecise:!1,trimWhitespace:!1,leadingZeroIsOctal:!1},h=48,d=57,f=65,g=66,v=79,y=84,b=88,k=90,j=97,w=98,x=111,E=116,S=120,_=122,R=48,A=55,C=87;function q(e){return e>=h&&e<=d?e-R:e>=f&&e<=k?e-A:e>=j&&e<=_?e-C:-1}function O(e){return 32===e||e>=9&&e<=13||160===e||5760===e||6158===e||e>=8192&&e<=8202||8232===e||8233===e||8239===e||8287===e||12288===e||65279===e}function P(e,t){var a=n.validate(t,e);if(0===a.errors.length)return null;var i,r,s=a.errors[0],u=s.property,c=s.message.toLowerCase();-1!=(i=c.indexOf("the property "))&&-1!=(r=c.indexOf(" is not defined in the schema and the schema does not allow additional properties"))&&(i+="the property ".length,u=""===u?c.substr(i,r-i):u+"."+c.substr(i,r-i),c="unsupported property");var p=new o.VError('property "%s": %s',u,c);return p.jsv_details=s,p}function F(e){i.ok(e[0]>=0&&e[1]>=0,"negative numbers not allowed in hrtimes"),i.ok(e[1]<1e9,"nanoseconds column overflow")}function z(e,t){F(e),F(t),i.ok(e[0]>t[0]||e[0]==t[0]&&e[1]>=t[1],"negative differences not allowed");var a=[e[0]-t[0],0];return e[1]>=t[1]?a[1]=e[1]-t[1]:(a[0]--,a[1]=1e9-(t[1]-e[1])),a}function T(e,t){return F(e),F(t),e[1]+=t[1],e[1]>=1e9&&(e[0]++,e[1]-=1e9),e[0]+=t[0],e}function I(e,t,a){var i,r;if(i={},a)for(r in a)i[r]=a[r];if(e)for(r in e)i[r]=e[r];if(t)for(r in t)i[r]=t[r];return i}},function(e,t,a){var i=a(21),r=a(1);function o(e){var t,a,o,n,c,p,l,m,h,d=["([^%]*)","%","(['\\-+ #0]*?)","([1-9]\\d*)?","(\\.([1-9]\\d*))?","[lhjztL]*?","([diouxXfFeEgGaAcCsSp%jr])"].join(""),f=new RegExp(d),g=Array.prototype.slice.call(arguments,1),v="",y=1;for(i.equal("string",typeof e);null!==(h=f.exec(e));)if(v+=h[1],e=e.substring(h[0].length),t=h[2]||"",a=h[3]||0,o=h[4]||"",c=!1,l=!1,p=" ","%"!=(n=h[6])){if(0===g.length)throw new Error("too few args to sprintf");if(m=g.shift(),y++,t.match(/[\' #]/))throw new Error("unsupported flags: "+t);if(o.length>0)throw new Error("non-zero precision not supported");switch(t.match(/-/)&&(c=!0),t.match(/0/)&&(p="0"),t.match(/\+/)&&(l=!0),n){case"s":if(null==m)throw new Error("argument "+y+": attempted to print undefined or null as a string");v+=s(p,a,c,m.toString());break;case"d":m=Math.floor(m);case"f":v+=(l=l&&m>0?"+":"")+s(p,a,c,m.toString());break;case"x":v+=s(p,a,c,m.toString(16));break;case"j":0===a&&(a=10),v+=r.inspect(m,!1,a);break;case"r":v+=u(m);break;default:throw new Error("unsupported conversion: "+n)}}else v+="%";return v+=e}function n(e){var t=Array.prototype.slice.call(arguments,1);return e.write(o.apply(this,t))}function s(e,t,a,i){for(var r=i;r.length<t;)a?r+=e:r=e+r;return r}function u(e){var t;if(!(e instanceof Error))throw new Error(o("invalid type for %%r: %j",e));if(t="EXCEPTION: "+e.constructor.name+": "+e.stack,e.cause&&"function"==typeof e.cause){var a=e.cause();a&&(t+="\nCaused by: "+u(a))}return t}t.sprintf=o,t.printf=function(){var e=Array.prototype.slice.call(arguments);e.unshift(process.stdout),n.apply(null,e)},t.fprintf=n},function(e,t,a){var i=a(0),r=a(1),o=a(123),n=a(124).isError,s=o.sprintf;function u(e){var t,a,r,o;if(i.object(e,"args"),i.bool(e.strict,"args.strict"),i.array(e.argv,"args.argv"),0===(t=e.argv).length)a={},r=[];else if(n(t[0]))a={cause:t[0]},r=t.slice(1);else if("object"==typeof t[0]){for(o in a={},t[0])a[o]=t[0][o];r=t.slice(1)}else i.string(t[0],"first argument to VError, SError, or WError constructor must be a string, object, or Error"),a={},r=t;return i.object(a),a.strict||e.strict||(r=r.map(function(e){return null===e?"null":void 0===e?"undefined":e})),{options:a,shortmessage:0===r.length?"":s.apply(null,r)}}function c(){var e,t,a,r,o,s,p;if(e=Array.prototype.slice.call(arguments,0),!(this instanceof c))return t=Object.create(c.prototype),c.apply(t,arguments),t;if((a=u({argv:e,strict:!1})).options.name&&(i.string(a.options.name,'error\'s "name" must be a string'),this.name=a.options.name),this.jse_shortmsg=a.shortmessage,s=a.shortmessage,(r=a.options.cause)&&(i.ok(n(r),"cause is not an Error"),this.jse_cause=r,a.options.skipCauseMessage||(s+=": "+r.message)),this.jse_info={},a.options.info)for(p in a.options.info)this.jse_info[p]=a.options.info[p];return this.message=s,Error.call(this,s),Error.captureStackTrace&&(o=a.options.constructorOpt||this.constructor,Error.captureStackTrace(this,o)),this}function p(){var e,t,a,i;return e=Array.prototype.slice.call(arguments,0),this instanceof p?(i=(a=u({argv:e,strict:!0})).options,c.call(this,i,"%s",a.shortmessage),this):(t=Object.create(p.prototype),p.apply(t,arguments),t)}function l(e){i.array(e,"list of errors"),i.ok(e.length>0,"must be at least one error"),this.ase_errors=e,c.call(this,{cause:e[0]},"first of %d error%s",e.length,1==e.length?"":"s")}function m(){var e,t,a,i;return e=Array.prototype.slice.call(arguments,0),this instanceof m?((i=(a=u({argv:e,strict:!1})).options).skipCauseMessage=!0,c.call(this,i,"%s",a.shortmessage),this):(t=Object.create(m.prototype),m.apply(t,e),t)}e.exports=c,c.VError=c,c.SError=p,c.WError=m,c.MultiError=l,r.inherits(c,Error),c.prototype.name="VError",c.prototype.toString=function(){var e=this.hasOwnProperty("name")&&this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(e+=": "+this.message),e},c.prototype.cause=function(){var e=c.cause(this);return null===e?void 0:e},c.cause=function(e){return i.ok(n(e),"err must be an Error"),n(e.jse_cause)?e.jse_cause:null},c.info=function(e){var t,a,r;if(i.ok(n(e),"err must be an Error"),t=null!==(a=c.cause(e))?c.info(a):{},"object"==typeof e.jse_info&&null!==e.jse_info)for(r in e.jse_info)t[r]=e.jse_info[r];return t},c.findCauseByName=function(e,t){var a;for(i.ok(n(e),"err must be an Error"),i.string(t,"name"),i.ok(t.length>0,"name cannot be empty"),a=e;null!==a;a=c.cause(a))if(i.ok(n(a)),a.name==t)return a;return null},c.hasCauseWithName=function(e,t){return null!==c.findCauseByName(e,t)},c.fullStack=function(e){i.ok(n(e),"err must be an Error");var t=c.cause(e);return t?e.stack+"\ncaused by: "+c.fullStack(t):e.stack},c.errorFromList=function(e){return i.arrayOfObject(e,"errors"),0===e.length?null:(e.forEach(function(e){i.ok(n(e))}),1==e.length?e[0]:new l(e))},c.errorForEach=function(e,t){i.ok(n(e),"err must be an Error"),i.func(t,"func"),e instanceof l?e.errors().forEach(function(e){t(e)}):t(e)},r.inherits(p,c),r.inherits(l,c),l.prototype.name="MultiError",l.prototype.errors=function(){return this.ase_errors.slice(0)},r.inherits(m,c),m.prototype.name="WError",m.prototype.toString=function(){var e=this.hasOwnProperty("name")&&this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(e+=": "+this.message),this.jse_cause&&this.jse_cause.message&&(e+="; caused by "+this.jse_cause.toString()),e},m.prototype.cause=function(e){return n(e)&&(this.jse_cause=e),this.jse_cause}},function(e,t,a){var i=a(21),r=a(1);function o(e){var t,a,o,s,p,l,m,h,d,f,g,v=["([^%]*)","%","(['\\-+ #0]*?)","([1-9]\\d*)?","(\\.([1-9]\\d*))?","[lhjztL]*?","([diouxXfFeEgGaAcCsSp%jr])"].join(""),y=new RegExp(v),b=Array.prototype.slice.call(arguments,1),k=e,j="",w=1,x=0;for(i.equal("string",typeof k,"first argument must be a format string");null!==(d=y.exec(k));)if(j+=d[1],k=k.substring(d[0].length),g=d[0].substring(d[1].length),f=x+d[1].length+1,x+=d[0].length,t=d[2]||"",a=d[3]||0,o=d[4]||"",p=!1,m=!1,l=" ","%"!=(s=d[6])){if(0===b.length)throw n(e,f,g,"has no matching argument (too few arguments passed)");if(h=b.shift(),w++,t.match(/[\' #]/))throw n(e,f,g,"uses unsupported flags");if(o.length>0)throw n(e,f,g,"uses non-zero precision (not supported)");switch(t.match(/-/)&&(p=!0),t.match(/0/)&&(l="0"),t.match(/\+/)&&(m=!0),s){case"s":if(null==h)throw n(e,f,g,"attempted to print undefined or null as a string (argument "+w+" to sprintf)");j+=u(l,a,p,h.toString());break;case"d":h=Math.floor(h);case"f":j+=(m=m&&h>0?"+":"")+u(l,a,p,h.toString());break;case"x":j+=u(l,a,p,h.toString(16));break;case"j":0===a&&(a=10),j+=r.inspect(h,!1,a);break;case"r":j+=c(h);break;default:throw n(e,f,g,"is not supported")}}else j+="%";return j+=k}function n(e,t,a,r){return i.equal(typeof e,"string"),i.equal(typeof a,"string"),i.equal(typeof t,"number"),i.equal(typeof r,"string"),new Error('format string "'+e+'": conversion specifier "'+a+'" at character '+t+" "+r)}function s(e){var t=Array.prototype.slice.call(arguments,1);return e.write(o.apply(this,t))}function u(e,t,a,i){for(var r=i;r.length<t;)a?r+=e:r=e+r;return r}function c(e){var t;if(!(e instanceof Error))throw new Error(o("invalid type for %%r: %j",e));if(t="EXCEPTION: "+e.constructor.name+": "+e.stack,e.cause&&"function"==typeof e.cause){var a=e.cause();a&&(t+="\nCaused by: "+c(a))}return t}t.sprintf=o,t.printf=function(){var e=Array.prototype.slice.call(arguments);e.unshift(process.stdout),s.apply(null,e)},t.fprintf=s},function(e,t){function a(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===a(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===a(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===a(e)},t.isError=function(e){return"[object Error]"===a(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=Buffer.isBuffer},function(e,t,a){var i;void 0===(i=function(){return function(){var e=a;e.Integer={type:"integer"};var t={String:String,Boolean:Boolean,Number:Number,Object:Object,Array:Array,Date:Date};function a(e,t){return a(e,t,{changing:!1})}e.validate=a,e.checkPropertyChange=function(e,t,i){return a(e,t,{changing:i||"property"})};var a=e._validate=function(e,a,i){i||(i={});var r=i.changing;function o(e){return e.type||t[e.name]==e&&e.name.toLowerCase()}var n=[];function s(e,t,a,u){var c;function p(e){n.push({property:a,message:e})}if(a+=a?"number"==typeof u?"["+u+"]":void 0===u?"":"."+u:u,("object"!=typeof t||t instanceof Array)&&(a||"function"!=typeof t)&&(!t||!o(t)))return"function"==typeof t?e instanceof t||p("is not an instance of the class/constructor "+t.name):t&&p("Invalid schema/property definition "+t),null;function l(e,t){if(e){if(!("string"!=typeof e||"any"==e||("null"==e?null===t:typeof t==e)||t instanceof Array&&"array"==e||t instanceof Date&&"date"==e||"integer"==e&&t%1==0))return[{property:a,message:typeof t+" value found, but a "+e+" is required"}];if(e instanceof Array){for(var i=[],r=0;r<e.length&&(i=l(e[r],t)).length;r++);if(i.length)return i}else if("object"==typeof e){var o=n;n=[],s(t,e,a);var u=n;return n=o,u}}return[]}if(r&&t.readonly&&p("is a readonly field, it can not be changed"),t.extends&&s(e,t.extends,a,u),void 0===e)t.required&&p("is missing and it is required");else if(n=n.concat(l(o(t),e)),t.disallow&&!l(t.disallow,e).length&&p(" disallowed value was matched"),null!==e){if(e instanceof Array){if(t.items){var m=t.items instanceof Array,h=t.items;for(u=0,c=e.length;u<c;u+=1)m&&(h=t.items[u]),i.coerce&&(e[u]=i.coerce(e[u],h)),n.concat(s(e[u],h,a,u))}t.minItems&&e.length<t.minItems&&p("There must be a minimum of "+t.minItems+" in the array"),t.maxItems&&e.length>t.maxItems&&p("There must be a maximum of "+t.maxItems+" in the array")}else(t.properties||t.additionalProperties)&&n.concat(function(e,t,a,o){if("object"==typeof t)for(var u in("object"!=typeof e||e instanceof Array)&&n.push({property:a,message:"an object is required"}),t)if(t.hasOwnProperty(u)){var c=e[u];if(void 0===c&&i.existingOnly)continue;var p=t[u];void 0===c&&p.default&&(c=e[u]=p.default),i.coerce&&u in e&&(c=e[u]=i.coerce(c,p)),s(c,p,a,u)}for(u in e){if(e.hasOwnProperty(u)&&("_"!=u.charAt(0)||"_"!=u.charAt(1))&&t&&!t[u]&&!1===o){if(i.filter){delete e[u];continue}n.push({property:a,message:typeof c+"The property "+u+" is not defined in the schema and the schema does not allow additional properties"})}var l=t&&t[u]&&t[u].requires;!l||l in e||n.push({property:a,message:"the presence of the property "+u+" requires that "+l+" also be present"}),c=e[u],!o||t&&"object"==typeof t&&u in t||(i.coerce&&(c=e[u]=i.coerce(c,o)),s(c,o,a,u)),!r&&c&&c.$schema&&(n=n.concat(s(c,c.$schema,a,u)))}return n}(e,t.properties,a,t.additionalProperties));if(t.pattern&&"string"==typeof e&&!e.match(t.pattern)&&p("does not match the regex pattern "+t.pattern),t.maxLength&&"string"==typeof e&&e.length>t.maxLength&&p("may only be "+t.maxLength+" characters long"),t.minLength&&"string"==typeof e&&e.length<t.minLength&&p("must be at least "+t.minLength+" characters long"),void 0!==typeof t.minimum&&typeof e==typeof t.minimum&&t.minimum>e&&p("must have a minimum value of "+t.minimum),void 0!==typeof t.maximum&&typeof e==typeof t.maximum&&t.maximum<e&&p("must have a maximum value of "+t.maximum),t.enum){var d,f=t.enum;c=f.length;for(var g=0;g<c;g++)if(f[g]===e){d=1;break}d||p("does not have a value in the enumeration "+f.join(", "))}"number"==typeof t.maxDecimal&&e.toString().match(new RegExp("\\.[0-9]{"+(t.maxDecimal+1)+",}"))&&p("may only have "+t.maxDecimal+" digits of decimal places")}return null}return a&&s(e,a,"",r||""),!r&&e&&e.$schema&&s(e,e.$schema,"",""),{valid:!n.length,errors:n}};return e.mustBeValid=function(e){if(!e.valid)throw new TypeError(e.errors.map(function(e){return"for property "+e.property+": "+e.message}).join(", \n"))},e}()}.apply(t,[]))||(e.exports=i)},function(e,t,a){var i=a(0),r=a(2),o=a(38),n=a(32),s=(n.HASH_ALGOS,n.PK_ALGOS,n.InvalidAlgorithmError,n.HttpSignatureError,n.validateAlgorithm);e.exports={verifySignature:function(e,t){i.object(e,"parsedSignature"),("string"==typeof t||Buffer.isBuffer(t))&&(t=o.parseKey(t)),i.ok(o.Key.isKey(t,[1,1]),"pubkey must be a sshpk.Key");var a=s(e.algorithm);if("hmac"===a[0]||a[0]!==t.type)return!1;var r=t.createVerify(a[1]);return r.update(e.signingString),r.verify(e.params.signature,"base64")},verifyHMAC:function(e,t){i.object(e,"parsedHMAC"),i.string(t,"secret");var a=s(e.algorithm);if("hmac"!==a[0])return!1;var o=a[1].toUpperCase(),n=r.createHmac(o,t);n.update(e.signingString);var u=r.createHmac(o,t);u.update(n.digest()),u=u.digest();var c=r.createHmac(o,t);return c.update(new Buffer(e.params.signature,"base64")),c=c.digest(),"string"==typeof u?u===c:Buffer.isBuffer(u)&&!u.equals?u.toString("binary")===c.toString("binary"):u.equals(c)}}},function(e,t,a){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=a(128)},function(e){e.exports={"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/cbor":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["ecma","es"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0},"application/fhir+json":{source:"iana",compressible:!0},"application/fhir+xml":{source:"iana",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mmt-usd+xml":{source:"iana",compressible:!0},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",compressible:!0},"application/msc-mixer+xml":{source:"iana",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana"},"application/n-triples":{source:"iana"},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana"},"application/news-groupinfo":{source:"iana"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana"},"application/nss":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p2p-overlay+xml":{source:"iana",compressible:!0},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana"},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",compressible:!0},"application/pidf-diff+xml":{source:"iana",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0},"application/route-s-tsid+xml":{source:"iana",compressible:!0},"application/route-usd+xml":{source:"iana",compressible:!0},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana"},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana"},"application/ttml+xml":{source:"iana",compressible:!0},"application/tve-trigger":{source:"iana"},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0},"application/urc-targetdesc+xml":{source:"iana",compressible:!0},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["keynote"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana"},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana"},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",compressible:!0},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"apache",extensions:["der","crt","pem"]},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0},"application/xcap-caps+xml":{source:"iana",compressible:!0},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana"},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana"},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tone":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana"},"image/avcs":{source:"iana"},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/stl":{source:"iana"},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana"},"model/vnd.parasolid.transmit.binary":{source:"iana"},"model/vnd.parasolid.transmit.text":{source:"iana"},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.usdz+zip":{source:"iana",compressible:!1},"model/vnd.valve.source.compiled-map":{source:"iana"},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana"},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana"},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana",compressible:!1},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fwdred":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shex":{extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana"},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vp8":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}},function(e,t,a){e.exports=c,c.SSL=p;var i=a(1),r=a(18).Agent,o=a(36),n=a(63),s=a(19).Agent;function u(e,t){return"string"==typeof e?e+":"+t:e.host+":"+e.port+":"+(e.localAddress?e.localAddress+":":":")}function c(e){var t=this;t.options=e||{},t.requests={},t.sockets={},t.freeSockets={},t.maxSockets=t.options.maxSockets||r.defaultMaxSockets,t.minSockets=t.options.minSockets||c.defaultMinSockets,t.on("free",function(e,a,i){var r=u(a,i);if(t.requests[r]&&t.requests[r].length)t.requests[r].shift().onSocket(e);else if(t.sockets[r].length<t.minSockets){t.freeSockets[r]||(t.freeSockets[r]=[]),t.freeSockets[r].push(e);var o=function(){e.destroy()};e._onIdleError=o,e.on("error",o)}else e.destroy()})}function p(e){c.call(this,e)}i.inherits(c,r),c.defaultMinSockets=5,c.prototype.createConnection=o.createConnection,c.prototype.addRequestNoreuse=r.prototype.addRequest,c.prototype.addRequest=function(e,t,a){var i=u(t,a);if("string"!=typeof t){var r=t;a=r.port,t=r.host}if(this.freeSockets[i]&&this.freeSockets[i].length>0&&!e.useChunkedEncodingByDefault){var o=this.freeSockets[i].pop();o.removeListener("error",o._onIdleError),delete o._onIdleError,e._reusedSocket=!0,e.onSocket(o)}else this.addRequestNoreuse(e,t,a)},c.prototype.removeSocket=function(e,t,a,i){var r;this.sockets[t]?-1!==(r=this.sockets[t].indexOf(e))&&this.sockets[t].splice(r,1):this.sockets[t]&&0===this.sockets[t].length&&(delete this.sockets[t],delete this.requests[t]);this.freeSockets[t]&&(-1!==(r=this.freeSockets[t].indexOf(e))&&(this.freeSockets[t].splice(r,1),0===this.freeSockets[t].length&&delete this.freeSockets[t]));this.requests[t]&&this.requests[t].length&&this.createSocket(t,a,i).emit("free")},i.inherits(p,c),p.prototype.createConnection=function(e,t,a){a="object"==typeof e?e:"object"==typeof t?t:"object"==typeof a?a:{};"number"==typeof e&&(a.port=e);"string"==typeof t&&(a.host=t);return n.connect(a)},p.prototype.addRequestNoreuse=s.prototype.addRequest},function(e,t,a){var i=a(64),r=a(1),o=a(13),n=a(18),s=a(19),u=a(8).parse,c=a(14),p=a(62),l=a(133),m=a(137);function h(e){if(!(this instanceof h))return new h;for(var t in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],i.call(this),e=e||{})this[t]=e[t]}e.exports=h,r.inherits(h,i),h.LINE_BREAK="\r\n",h.DEFAULT_CONTENT_TYPE="application/octet-stream",h.prototype.append=function(e,t,a){"string"==typeof(a=a||{})&&(a={filename:a});var o=i.prototype.append.bind(this);if("number"==typeof t&&(t=""+t),r.isArray(t))this._error(new Error("Arrays are not supported."));else{var n=this._multiPartHeader(e,t,a),s=this._multiPartFooter();o(n),o(t),o(s),this._trackLength(n,t,a)}},h.prototype._trackLength=function(e,t,a){var i=0;null!=a.knownLength?i+=+a.knownLength:Buffer.isBuffer(t)?i=t.length:"string"==typeof t&&(i=Buffer.byteLength(t)),this._valueLength+=i,this._overheadLength+=Buffer.byteLength(e)+h.LINE_BREAK.length,t&&(t.path||t.readable&&t.hasOwnProperty("httpVersion"))&&(a.knownLength||this._valuesToMeasure.push(t))},h.prototype._lengthRetriever=function(e,t){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?t(null,e.end+1-(e.start?e.start:0)):c.stat(e.path,function(a,i){var r;a?t(a):(r=i.size-(e.start?e.start:0),t(null,r))}):e.hasOwnProperty("httpVersion")?t(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",function(a){e.pause(),t(null,+a.headers["content-length"])}),e.resume()):t("Unknown stream")},h.prototype._multiPartHeader=function(e,t,a){if("string"==typeof a.header)return a.header;var i,r=this._getContentDisposition(t,a),o=this._getContentType(t,a),n="",s={"Content-Disposition":["form-data",'name="'+e+'"'].concat(r||[]),"Content-Type":[].concat(o||[])};for(var u in"object"==typeof a.header&&m(s,a.header),s)s.hasOwnProperty(u)&&null!=(i=s[u])&&(Array.isArray(i)||(i=[i]),i.length&&(n+=u+": "+i.join("; ")+h.LINE_BREAK));return"--"+this.getBoundary()+h.LINE_BREAK+n+h.LINE_BREAK},h.prototype._getContentDisposition=function(e,t){var a,i;return"string"==typeof t.filepath?a=o.normalize(t.filepath).replace(/\\/g,"/"):t.filename||e.name||e.path?a=o.basename(t.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(a=o.basename(e.client._httpMessage.path)),a&&(i='filename="'+a+'"'),i},h.prototype._getContentType=function(e,t){var a=t.contentType;return!a&&e.name&&(a=p.lookup(e.name)),!a&&e.path&&(a=p.lookup(e.path)),!a&&e.readable&&e.hasOwnProperty("httpVersion")&&(a=e.headers["content-type"]),a||!t.filepath&&!t.filename||(a=p.lookup(t.filepath||t.filename)),a||"object"!=typeof e||(a=h.DEFAULT_CONTENT_TYPE),a},h.prototype._multiPartFooter=function(){return function(e){var t=h.LINE_BREAK;0===this._streams.length&&(t+=this._lastBoundary()),e(t)}.bind(this)},h.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+h.LINE_BREAK},h.prototype.getHeaders=function(e){var t,a={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(t in e)e.hasOwnProperty(t)&&(a[t.toLowerCase()]=e[t]);return a},h.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},h.prototype._generateBoundary=function(){for(var e="--------------------------",t=0;t<24;t++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},h.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},h.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},h.prototype.getLength=function(e){var t=this._overheadLength+this._valueLength;this._streams.length&&(t+=this._lastBoundary().length),this._valuesToMeasure.length?l.parallel(this._valuesToMeasure,this._lengthRetriever,function(a,i){a?e(a):(i.forEach(function(e){t+=e}),e(null,t))}):process.nextTick(e.bind(this,null,t))},h.prototype.submit=function(e,t){var a,i,r={method:"post"};return"string"==typeof e?(e=u(e),i=m({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},r)):(i=m(e,r)).port||(i.port="https:"==i.protocol?443:80),i.headers=this.getHeaders(e.headers),a="https:"==i.protocol?s.request(i):n.request(i),this.getLength(function(e,i){e?this._error(e):(a.setHeader("Content-Length",i),this.pipe(a),t&&(a.on("error",t),a.on("response",t.bind(this,null))))}.bind(this)),a},h.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},h.prototype.toString=function(){return"[object FormData]"}},function(e,t,a){var i=a(20).Stream,r=a(1);function o(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}e.exports=o,r.inherits(o,i),o.create=function(e,t){var a=new this;for(var i in t=t||{})a[i]=t[i];a.source=e;var r=e.emit;return e.emit=function(){return a._handleEmit(arguments),r.apply(e,arguments)},e.on("error",function(){}),a.pauseStream&&e.pause(),a},Object.defineProperty(o.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),o.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},o.prototype.resume=function(){this._released||this.release(),this.source.resume()},o.prototype.pause=function(){this.source.pause()},o.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},o.prototype.pipe=function(){var e=i.prototype.pipe.apply(this,arguments);return this.resume(),e},o.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},o.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}},function(e,t){e.exports=function(e){var t="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;t?t(e):setTimeout(e,0)}},function(e,t,a){e.exports={parallel:a(134),serial:a(136),serialOrdered:a(70)}},function(e,t,a){var i=a(65),r=a(68),o=a(69);e.exports=function(e,t,a){var n=r(e);for(;n.index<(n.keyedList||e).length;)i(e,t,n,function(e,t){e?a(e,t):0!==Object.keys(n.jobs).length||a(null,n.results)}),n.index++;return o.bind(n,a)}},function(e,t){e.exports=function(e){var t="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;t?t(e):setTimeout(e,0)}},function(e,t,a){var i=a(70);e.exports=function(e,t,a){return i(e,t,null,a)}},function(e,t){e.exports=function(e,t){return Object.keys(t).forEach(function(a){e[a]=e[a]||t[a]}),e}},function(e,t){e.exports=r,r.strict=o,r.loose=n;var a=Object.prototype.toString,i={"[object Int8Array]":!0,"[object Int16Array]":!0,"[object Int32Array]":!0,"[object Uint8Array]":!0,"[object Uint8ClampedArray]":!0,"[object Uint16Array]":!0,"[object Uint32Array]":!0,"[object Float32Array]":!0,"[object Float64Array]":!0};function r(e){return o(e)||n(e)}function o(e){return e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Uint16Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array}function n(e){return i[a.call(e)]}},function(e,t,a){"use strict";function i(e){return e.replace(/^\.*/,".").toLowerCase()}function r(e){var t=(e=e.trim().toLowerCase()).split(":",2);return{hostname:i(t[0]),port:t[1],hasPort:e.indexOf(":")>-1}}e.exports=function(e){var t=process.env.NO_PROXY||process.env.no_proxy||"";return"*"===t?null:""!==t&&function(e,t){var a=e.port||("https:"===e.protocol?"443":"80"),o=i(e.hostname);return t.split(",").map(r).some(function(e){var t=o.indexOf(e.hostname),i=t>-1&&t===o.length-e.hostname.length;return e.hasPort?a===e.port&&i:i})}(e,t)?null:"http:"===e.protocol?process.env.HTTP_PROXY||process.env.http_proxy||null:"https:"===e.protocol&&(process.env.HTTPS_PROXY||process.env.https_proxy||process.env.HTTP_PROXY||process.env.http_proxy)||null}},function(e,t,a){"use strict";var i=a(72),r=a(24);function o(e){this.request=e,this.lib=null,this.useQuerystring=null,this.parseOptions=null,this.stringifyOptions=null}o.prototype.init=function(e){this.lib||(this.useQuerystring=e.useQuerystring,this.lib=this.useQuerystring?r:i,this.parseOptions=e.qsParseOptions||{},this.stringifyOptions=e.qsStringifyOptions||{})},o.prototype.stringify=function(e){return this.useQuerystring?this.rfc3986(this.lib.stringify(e,this.stringifyOptions.sep||null,this.stringifyOptions.eq||null,this.stringifyOptions)):this.lib.stringify(e,this.stringifyOptions)},o.prototype.parse=function(e){return this.useQuerystring?this.lib.parse(e,this.parseOptions.sep||null,this.parseOptions.eq||null,this.parseOptions):this.lib.parse(e,this.parseOptions)},o.prototype.rfc3986=function(e){return e.replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})},o.prototype.unescape=r.unescape,t.Querystring=o},function(e,t,a){"use strict";var i=a(73),r=a(74),o={brackets:function(e){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},n=Date.prototype.toISOString,s={delimiter:"&",encode:!0,encoder:i.encode,encodeValuesOnly:!1,serializeDate:function(e){return n.call(e)},skipNulls:!1,strictNullHandling:!1},u=function e(t,a,r,o,n,u,c,p,l,m,h,d){var f=t;if("function"==typeof c)f=c(a,f);else if(f instanceof Date)f=m(f);else if(null===f){if(o)return u&&!d?u(a,s.encoder):a;f=""}if("string"==typeof f||"number"==typeof f||"boolean"==typeof f||i.isBuffer(f))return u?[h(d?a:u(a,s.encoder))+"="+h(u(f,s.encoder))]:[h(a)+"="+h(String(f))];var g,v=[];if(void 0===f)return v;if(Array.isArray(c))g=c;else{var y=Object.keys(f);g=p?y.sort(p):y}for(var b=0;b<g.length;++b){var k=g[b];n&&null===f[k]||(v=Array.isArray(f)?v.concat(e(f[k],r(a,k),r,o,n,u,c,p,l,m,h,d)):v.concat(e(f[k],a+(l?"."+k:"["+k+"]"),r,o,n,u,c,p,l,m,h,d)))}return v};e.exports=function(e,t){var a=e,n=t?i.assign({},t):{};if(null!==n.encoder&&void 0!==n.encoder&&"function"!=typeof n.encoder)throw new TypeError("Encoder has to be a function.");var c=void 0===n.delimiter?s.delimiter:n.delimiter,p="boolean"==typeof n.strictNullHandling?n.strictNullHandling:s.strictNullHandling,l="boolean"==typeof n.skipNulls?n.skipNulls:s.skipNulls,m="boolean"==typeof n.encode?n.encode:s.encode,h="function"==typeof n.encoder?n.encoder:s.encoder,d="function"==typeof n.sort?n.sort:null,f=void 0!==n.allowDots&&n.allowDots,g="function"==typeof n.serializeDate?n.serializeDate:s.serializeDate,v="boolean"==typeof n.encodeValuesOnly?n.encodeValuesOnly:s.encodeValuesOnly;if(void 0===n.format)n.format=r.default;else if(!Object.prototype.hasOwnProperty.call(r.formatters,n.format))throw new TypeError("Unknown format option provided.");var y,b,k=r.formatters[n.format];"function"==typeof n.filter?a=(b=n.filter)("",a):Array.isArray(n.filter)&&(y=b=n.filter);var j,w=[];if("object"!=typeof a||null===a)return"";j=n.arrayFormat in o?n.arrayFormat:"indices"in n?n.indices?"indices":"repeat":"indices";var x=o[j];y||(y=Object.keys(a)),d&&y.sort(d);for(var E=0;E<y.length;++E){var S=y[E];l&&null===a[S]||(w=w.concat(u(a[S],S,x,p,l,m?h:null,b,d,f,g,k,v)))}var _=w.join(c),R=!0===n.addQueryPrefix?"?":"";return _.length>0?R+_:""}},function(e,t,a){"use strict";var i=a(73),r=Object.prototype.hasOwnProperty,o={allowDots:!1,allowPrototypes:!1,arrayLimit:20,decoder:i.decode,delimiter:"&",depth:5,parameterLimit:1e3,plainObjects:!1,strictNullHandling:!1},n=function(e,t,a){if(e){var i=a.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,o=/(\[[^[\]]*])/g,n=/(\[[^[\]]*])/.exec(i),s=n?i.slice(0,n.index):i,u=[];if(s){if(!a.plainObjects&&r.call(Object.prototype,s)&&!a.allowPrototypes)return;u.push(s)}for(var c=0;null!==(n=o.exec(i))&&c<a.depth;){if(c+=1,!a.plainObjects&&r.call(Object.prototype,n[1].slice(1,-1))&&!a.allowPrototypes)return;u.push(n[1])}return n&&u.push("["+i.slice(n.index)+"]"),function(e,t,a){for(var i=t,r=e.length-1;r>=0;--r){var o,n=e[r];if("[]"===n)o=(o=[]).concat(i);else{o=a.plainObjects?Object.create(null):{};var s="["===n.charAt(0)&&"]"===n.charAt(n.length-1)?n.slice(1,-1):n,u=parseInt(s,10);!isNaN(u)&&n!==s&&String(u)===s&&u>=0&&a.parseArrays&&u<=a.arrayLimit?(o=[])[u]=i:o[s]=i}i=o}return i}(u,t,a)}};e.exports=function(e,t){var a=t?i.assign({},t):{};if(null!==a.decoder&&void 0!==a.decoder&&"function"!=typeof a.decoder)throw new TypeError("Decoder has to be a function.");if(a.ignoreQueryPrefix=!0===a.ignoreQueryPrefix,a.delimiter="string"==typeof a.delimiter||i.isRegExp(a.delimiter)?a.delimiter:o.delimiter,a.depth="number"==typeof a.depth?a.depth:o.depth,a.arrayLimit="number"==typeof a.arrayLimit?a.arrayLimit:o.arrayLimit,a.parseArrays=!1!==a.parseArrays,a.decoder="function"==typeof a.decoder?a.decoder:o.decoder,a.allowDots="boolean"==typeof a.allowDots?a.allowDots:o.allowDots,a.plainObjects="boolean"==typeof a.plainObjects?a.plainObjects:o.plainObjects,a.allowPrototypes="boolean"==typeof a.allowPrototypes?a.allowPrototypes:o.allowPrototypes,a.parameterLimit="number"==typeof a.parameterLimit?a.parameterLimit:o.parameterLimit,a.strictNullHandling="boolean"==typeof a.strictNullHandling?a.strictNullHandling:o.strictNullHandling,""===e||null==e)return a.plainObjects?Object.create(null):{};for(var s="string"==typeof e?function(e,t){for(var a={},i=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,n=t.parameterLimit===1/0?void 0:t.parameterLimit,s=i.split(t.delimiter,n),u=0;u<s.length;++u){var c,p,l=s[u],m=l.indexOf("]="),h=-1===m?l.indexOf("="):m+1;-1===h?(c=t.decoder(l,o.decoder),p=t.strictNullHandling?null:""):(c=t.decoder(l.slice(0,h),o.decoder),p=t.decoder(l.slice(h+1),o.decoder)),r.call(a,c)?a[c]=[].concat(a[c]).concat(p):a[c]=p}return a}(e,a):e,u=a.plainObjects?Object.create(null):{},c=Object.keys(s),p=0;p<c.length;++p){var l=c[p],m=n(l,s[l],a);u=i.merge(u,m,a)}return i.compact(u)}},function(e,t,a){"use strict";var i=a(14),r=a(24),o=a(144),n=a(35);function s(e){this.request=e}s.prototype.reducer=function(e,t){if(void 0===e[t.name])return e[t.name]=t.value,e;var a=[e[t.name],t.value];return e[t.name]=a,e},s.prototype.prep=function(e){if(e.queryObj={},e.headersObj={},e.postData.jsonObj=!1,e.postData.paramsObj=!1,e.queryString&&e.queryString.length&&(e.queryObj=e.queryString.reduce(this.reducer,{})),e.headers&&e.headers.length&&(e.headersObj=e.headers.reduceRight(function(e,t){return e[t.name]=t.value,e},{})),e.cookies&&e.cookies.length){var t=e.cookies.map(function(e){return e.name+"="+e.value});t.length&&(e.headersObj.cookie=t.join("; "))}function a(t){return t.some(function(t){return 0===e.postData.mimeType.indexOf(t)})}if(a(["multipart/mixed","multipart/related","multipart/form-data","multipart/alternative"]))e.postData.mimeType="multipart/form-data";else if(a(["application/x-www-form-urlencoded"]))e.postData.params?(e.postData.paramsObj=e.postData.params.reduce(this.reducer,{}),e.postData.text=r.stringify(e.postData.paramsObj)):e.postData.text="";else if(a(["text/json","text/x-json","application/json","application/x-json"])&&(e.postData.mimeType="application/json",e.postData.text))try{e.postData.jsonObj=JSON.parse(e.postData.text)}catch(t){this.request.debug(t),e.postData.mimeType="text/plain"}return e},s.prototype.options=function(e){if(!e.har)return e;var t={};if(n(t,e.har),t.log&&t.log.entries&&(t=t.log.entries[0]),t.url=t.url||e.url||e.uri||e.baseUrl||"/",t.httpVersion=t.httpVersion||"HTTP/1.1",t.queryString=t.queryString||[],t.headers=t.headers||[],t.cookies=t.cookies||[],t.postData=t.postData||{},t.postData.mimeType=t.postData.mimeType||"application/octet-stream",t.bodySize=0,t.headersSize=0,t.postData.size=0,!o.request(t))return e;var a=this.prep(t);function r(e){return 0===a.postData.mimeType.indexOf(e)}return a.url&&(e.url=a.url),a.method&&(e.method=a.method),Object.keys(a.queryObj).length&&(e.qs=a.queryObj),Object.keys(a.headersObj).length&&(e.headers=a.headersObj),r("application/x-www-form-urlencoded")?e.form=a.postData.paramsObj:r("application/json")?a.postData.jsonObj&&(e.body=a.postData.jsonObj,e.json=!0):r("multipart/form-data")?(e.formData={},a.postData.params.forEach(function(t){var a={};t.fileName||t.fileName||t.contentType?(t.fileName&&!t.value?a.value=i.createReadStream(t.fileName):t.value&&(a.value=t.value),t.fileName&&(a.options={filename:t.fileName,contentType:t.contentType?t.contentType:null}),e.formData[t.name]=a):e.formData[t.name]=t.value})):a.postData.text&&(e.body=a.postData.text),e},t.Har=s},function(e,t,a){var i,r=a(145),o=a(179),n=a(180);function s(e,t){t=t||{};var s=(i=i||function(){var e=new r({allErrors:!0});return e.addMetaSchema(a(199)),e.addSchema(n),e}()).getSchema(e+".json");return new Promise(function(e,a){s(t)?e(t):a(new o(s.errors))})}t.afterRequest=function(e){return s("afterRequest",e)},t.beforeRequest=function(e){return s("beforeRequest",e)},t.browser=function(e){return s("browser",e)},t.cache=function(e){return s("cache",e)},t.content=function(e){return s("content",e)},t.cookie=function(e){return s("cookie",e)},t.creator=function(e){return s("creator",e)},t.entry=function(e){return s("entry",e)},t.har=function(e){return s("har",e)},t.header=function(e){return s("header",e)},t.log=function(e){return s("log",e)},t.page=function(e){return s("page",e)},t.pageTimings=function(e){return s("pageTimings",e)},t.postData=function(e){return s("postData",e)},t.query=function(e){return s("query",e)},t.request=function(e){return s("request",e)},t.response=function(e){return s("response",e)},t.timings=function(e){return s("timings",e)}},function(e,t,a){"use strict";var i=a(146),r=a(45),o=a(150),n=a(75),s=a(76),u=a(151),c=a(152),p=a(173),l=a(22);e.exports=v,v.prototype.validate=function(e,t){var a;if("string"==typeof e){if(!(a=this.getSchema(e)))throw new Error('no schema with key or ref "'+e+'"')}else{var i=this._addSchema(e);a=i.validate||this._compile(i)}var r=a(t);!0!==a.$async&&(this.errors=a.errors);return r},v.prototype.compile=function(e,t){var a=this._addSchema(e,void 0,t);return a.validate||this._compile(a)},v.prototype.addSchema=function(e,t,a,i){if(Array.isArray(e)){for(var o=0;o<e.length;o++)this.addSchema(e[o],void 0,a,i);return this}var n=this._getId(e);if(void 0!==n&&"string"!=typeof n)throw new Error("schema id must be string");return x(this,t=r.normalizeId(t||n)),this._schemas[t]=this._addSchema(e,a,i,!0),this},v.prototype.addMetaSchema=function(e,t,a){return this.addSchema(e,t,a,!0),this},v.prototype.validateSchema=function(e,t){var a=e.$schema;if(void 0!==a&&"string"!=typeof a)throw new Error("$schema must be a string");if(!(a=a||this._opts.defaultMeta||(i=this,r=i._opts.meta,i._opts.defaultMeta="object"==typeof r?i._getId(r)||r:i.getSchema(d)?d:void 0,i._opts.defaultMeta)))return this.logger.warn("meta-schema not available"),this.errors=null,!0;var i,r;var o=this.validate(a,e);if(!o&&t){var n="schema is invalid: "+this.errorsText();if("log"!=this._opts.validateSchema)throw new Error(n);this.logger.error(n)}return o},v.prototype.getSchema=function(e){var t=y(this,e);switch(typeof t){case"object":return t.validate||this._compile(t);case"string":return this.getSchema(t);case"undefined":return function(e,t){var a=r.schema.call(e,{schema:{}},t);if(a){var o=a.schema,s=a.root,u=a.baseId,c=i.call(e,o,s,void 0,u);return e._fragments[t]=new n({ref:t,fragment:!0,schema:o,root:s,baseId:u,validate:c}),c}}(this,e)}},v.prototype.removeSchema=function(e){if(e instanceof RegExp)return b(this,this._schemas,e),b(this,this._refs,e),this;switch(typeof e){case"undefined":return b(this,this._schemas),b(this,this._refs),this._cache.clear(),this;case"string":var t=y(this,e);return t&&this._cache.del(t.cacheKey),delete this._schemas[e],delete this._refs[e],this;case"object":var a=this._opts.serialize,i=a?a(e):e;this._cache.del(i);var o=this._getId(e);o&&(o=r.normalizeId(o),delete this._schemas[o],delete this._refs[o])}return this},v.prototype.addFormat=function(e,t){"string"==typeof t&&(t=new RegExp(t));return this._formats[e]=t,this},v.prototype.errorsText=function(e,t){if(!(e=e||this.errors))return"No errors";for(var a=void 0===(t=t||{}).separator?", ":t.separator,i=void 0===t.dataVar?"data":t.dataVar,r="",o=0;o<e.length;o++){var n=e[o];n&&(r+=i+n.dataPath+" "+n.message+a)}return r.slice(0,-a.length)},v.prototype._addSchema=function(e,t,a,i){if("object"!=typeof e&&"boolean"!=typeof e)throw new Error("schema should be object or boolean");var o=this._opts.serialize,s=o?o(e):e,u=this._cache.get(s);if(u)return u;i=i||!1!==this._opts.addUsedSchema;var c=r.normalizeId(this._getId(e));c&&i&&x(this,c);var p,l=!1!==this._opts.validateSchema&&!t;l&&!(p=c&&c==r.normalizeId(e.$schema))&&this.validateSchema(e,!0);var m=r.ids.call(this,e),h=new n({id:c,schema:e,localRefs:m,cacheKey:s,meta:a});"#"!=c[0]&&i&&(this._refs[c]=h);this._cache.put(s,h),l&&p&&this.validateSchema(e,!0);return h},v.prototype._compile=function(e,t){if(e.compiling)return e.validate=o,o.schema=e.schema,o.errors=null,o.root=t||o,!0===e.schema.$async&&(o.$async=!0),o;var a,r;e.compiling=!0,e.meta&&(a=this._opts,this._opts=this._metaOpts);try{r=i.call(this,e.schema,t,e.localRefs)}catch(t){throw delete e.validate,t}finally{e.compiling=!1,e.meta&&(this._opts=a)}return e.validate=r,e.refs=r.refs,e.refVal=r.refVal,e.root=r.root,r;function o(){var t=e.validate,a=t.apply(this,arguments);return o.errors=t.errors,a}},v.prototype.compileAsync=a(174);var m=a(175);v.prototype.addKeyword=m.add,v.prototype.getKeyword=m.get,v.prototype.removeKeyword=m.remove;var h=a(47);v.ValidationError=h.Validation,v.MissingRefError=h.MissingRef,v.$dataMetaSchema=p;var d="http://json-schema.org/draft-07/schema",f=["removeAdditional","useDefaults","coerceTypes"],g=["/properties"];function v(e){if(!(this instanceof v))return new v(e);e=this._opts=l.copy(e)||{},function(e){var t=e._opts.logger;if(!1===t)e.logger={log:E,warn:E,error:E};else{if(void 0===t&&(t=console),!("object"==typeof t&&t.log&&t.warn&&t.error))throw new Error("logger must implement log, warn and error methods");e.logger=t}}(this),this._schemas={},this._refs={},this._fragments={},this._formats=u(e.format),this._cache=e.cache||new o,this._loadingSchemas={},this._compilations=[],this.RULES=c(),this._getId=function(e){switch(e.schemaId){case"auto":return w;case"id":return k;default:return j}}(e),e.loopRequired=e.loopRequired||1/0,"property"==e.errorDataPath&&(e._errorDataPathProperty=!0),void 0===e.serialize&&(e.serialize=s),this._metaOpts=function(e){for(var t=l.copy(e._opts),a=0;a<f.length;a++)delete t[f[a]];return t}(this),e.formats&&function(e){for(var t in e._opts.formats){var a=e._opts.formats[t];e.addFormat(t,a)}}(this),function(e){var t;e._opts.$data&&(t=a(177),e.addMetaSchema(t,t.$id,!0));if(!1===e._opts.meta)return;var i=a(178);e._opts.$data&&(i=p(i,g));e.addMetaSchema(i,d,!0),e._refs["http://json-schema.org/schema"]=d}(this),"object"==typeof e.meta&&this.addMetaSchema(e.meta),e.nullable&&this.addKeyword("nullable",{metaSchema:{const:!0}}),function(e){var t=e._opts.schemas;if(!t)return;if(Array.isArray(t))e.addSchema(t);else for(var a in t)e.addSchema(t[a],a)}(this)}function y(e,t){return t=r.normalizeId(t),e._schemas[t]||e._refs[t]||e._fragments[t]}function b(e,t,a){for(var i in t){var r=t[i];r.meta||a&&!a.test(i)||(e._cache.del(r.cacheKey),delete t[i])}}function k(e){return e.$id&&this.logger.warn("schema $id ignored",e.$id),e.id}function j(e){return e.id&&this.logger.warn("schema id ignored",e.id),e.$id}function w(e){if(e.$id&&e.id&&e.$id!=e.id)throw new Error("schema $id is different from id");return e.$id||e.id}function x(e,t){if(e._schemas[t]||e._refs[t])throw new Error('schema with key or id "'+t+'" already exists')}function E(){}},function(e,t,a){"use strict";var i=a(45),r=a(22),o=a(47),n=a(76),s=a(77),u=r.ucs2length,c=a(46),p=o.Validation;function l(e,t,a){for(var i=0;i<this._compilations.length;i++){var r=this._compilations[i];if(r.schema==e&&r.root==t&&r.baseId==a)return i}return-1}function m(e,t){return"var pattern"+e+" = new RegExp("+r.toQuotedString(t[e])+");"}function h(e){return"var default"+e+" = defaults["+e+"];"}function d(e,t){return void 0===t[e]?"":"var refVal"+e+" = refVal["+e+"];"}function f(e){return"var customRule"+e+" = customRules["+e+"];"}function g(e,t){if(!e.length)return"";for(var a="",i=0;i<e.length;i++)a+=t(i,e);return a}e.exports=function e(t,a,v,y){var b=this,k=this._opts,j=[void 0],w={},x=[],E={},S=[],_={},R=[];a=a||{schema:t,refVal:j,refs:w};var A=function(e,t,a){var i=l.call(this,e,t,a);return i>=0?{index:i,compiling:!0}:(i=this._compilations.length,this._compilations[i]={schema:e,root:t,baseId:a},{index:i,compiling:!1})}.call(this,t,a,y);var C=this._compilations[A.index];if(A.compiling)return C.callValidate=function e(){var t=C.validate;var a=t.apply(this,arguments);e.errors=t.errors;return a};var q=this._formats;var O=this.RULES;try{var P=z(t,a,v,y);C.validate=P;var F=C.callValidate;return F&&(F.schema=P.schema,F.errors=null,F.refs=P.refs,F.refVal=P.refVal,F.root=P.root,F.$async=P.$async,k.sourceCode&&(F.source=P.source)),P}finally{(function(e,t,a){var i=l.call(this,e,t,a);i>=0&&this._compilations.splice(i,1)}).call(this,t,a,y)}function z(t,n,l,v){var y=!n||n&&n.schema==t;if(n.schema!=a.schema)return e.call(b,t,n,l,v);var E,_=!0===t.$async,A=s({isTop:!0,schema:t,isRoot:y,baseId:v,root:n,schemaPath:"",errSchemaPath:"#",errorPath:'""',MissingRefError:o.MissingRef,RULES:O,validate:s,util:r,resolve:i,resolveRef:T,usePattern:B,useDefault:L,useCustomRule:U,opts:k,formats:q,logger:b.logger,self:b});A=g(j,d)+g(x,m)+g(S,h)+g(R,f)+A,k.processCode&&(A=k.processCode(A));try{var C=new Function("self","RULES","formats","root","refVal","defaults","customRules","equal","ucs2length","ValidationError",A);E=C(b,O,q,a,j,S,R,c,u,p),j[0]=E}catch(e){throw b.logger.error("Error compiling schema, function code:",A),e}return E.schema=t,E.errors=null,E.refs=w,E.refVal=j,E.root=y?E:n,_&&(E.$async=!0),!0===k.sourceCode&&(E.source={code:A,patterns:x,defaults:S}),E}function T(t,r,o){r=i.url(t,r);var n,s,u=w[r];if(void 0!==u)return D(n=j[u],s="refVal["+u+"]");if(!o&&a.refs){var c=a.refs[r];if(void 0!==c)return n=a.refVal[c],s=I(r,n),D(n,s)}s=I(r);var p=i.call(b,z,a,r);if(void 0===p){var l=v&&v[r];l&&(p=i.inlineRef(l,k.inlineRefs)?l:e.call(b,l,a,v,t))}if(void 0!==p)return function(e,t){var a=w[e];j[a]=t}(r,p),D(p,s);!function(e){delete w[e]}(r)}function I(e,t){var a=j.length;return j[a]=t,w[e]=a,"refVal"+a}function D(e,t){return"object"==typeof e||"boolean"==typeof e?{code:t,schema:e,inline:!0}:{code:t,$async:e&&!!e.$async}}function B(e){var t=E[e];return void 0===t&&(t=E[e]=x.length,x[t]=e),"pattern"+t}function L(e){switch(typeof e){case"boolean":case"number":return""+e;case"string":return r.toQuotedString(e);case"object":if(null===e)return"null";var t=n(e),a=_[t];return void 0===a&&(a=_[t]=S.length,S[a]=e),"default"+a}}function U(e,t,a,i){var r=e.definition.validateSchema;if(r&&!1!==b._opts.validateSchema){var o=r(t);if(!o){var n="keyword schema is invalid: "+b.errorsText(r.errors);if("log"!=b._opts.validateSchema)throw new Error(n);b.logger.error(n)}}var s,u=e.definition.compile,c=e.definition.inline,p=e.definition.macro;if(u)s=u.call(b,t,a,i);else if(p)s=p.call(b,t,a,i),!1!==k.validateSchema&&b.validateSchema(s,!0);else if(c)s=c.call(b,i,e.keyword,t,a);else if(!(s=e.definition.validate))return;if(void 0===s)throw new Error('custom keyword "'+e.keyword+'"failed to compile');var l=R.length;return R[l]=s,{code:"customRule"+l,validate:s}}}},function(e,t,a){
/** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
!function(e){"use strict";function t(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];if(t.length>1){t[0]=t[0].slice(0,-1);for(var i=t.length-1,r=1;r<i;++r)t[r]=t[r].slice(1,-1);return t[i]=t[i].slice(1),t.join("")}return t[0]}function a(e){return"(?:"+e+")"}function i(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function r(e){return e.toUpperCase()}function o(e){var i=t("[0-9]","[A-Fa-f]"),r=a(a("%[EFef]"+i+"%"+i+i+"%"+i+i)+"|"+a("%[89A-Fa-f]"+i+"%"+i+i)+"|"+a("%"+i+i)),o="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",n=t("[\\:\\/\\?\\#\\[\\]\\@]",o),s=e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]",u=e?"[\\uE000-\\uF8FF]":"[]",c=t("[A-Za-z]","[0-9]","[\\-\\.\\_\\~]",s),p=a("[A-Za-z]"+t("[A-Za-z]","[0-9]","[\\+\\-\\.]")+"*"),l=a(a(r+"|"+t(c,o,"[\\:]"))+"*"),m=(a(a("25[0-5]")+"|"+a("2[0-4][0-9]")+"|"+a("1[0-9][0-9]")+"|"+a("[1-9][0-9]")+"|[0-9]"),a(a("25[0-5]")+"|"+a("2[0-4][0-9]")+"|"+a("1[0-9][0-9]")+"|"+a("0?[1-9][0-9]")+"|0?0?[0-9]")),h=a(m+"\\."+m+"\\."+m+"\\."+m),d=a(i+"{1,4}"),f=a(a(d+"\\:"+d)+"|"+h),g=a(a(d+"\\:")+"{6}"+f),v=a("\\:\\:"+a(d+"\\:")+"{5}"+f),y=a(a(d)+"?\\:\\:"+a(d+"\\:")+"{4}"+f),b=a(a(a(d+"\\:")+"{0,1}"+d)+"?\\:\\:"+a(d+"\\:")+"{3}"+f),k=a(a(a(d+"\\:")+"{0,2}"+d)+"?\\:\\:"+a(d+"\\:")+"{2}"+f),j=a(a(a(d+"\\:")+"{0,3}"+d)+"?\\:\\:"+d+"\\:"+f),w=a(a(a(d+"\\:")+"{0,4}"+d)+"?\\:\\:"+f),x=a(a(a(d+"\\:")+"{0,5}"+d)+"?\\:\\:"+d),E=a(a(a(d+"\\:")+"{0,6}"+d)+"?\\:\\:"),S=a([g,v,y,b,k,j,w,x,E].join("|")),_=a(a(c+"|"+r)+"+"),R=(a(S+"\\%25"+_),a(S+a("\\%25|\\%(?!"+i+"{2})")+_)),A=a("[vV]"+i+"+\\."+t(c,o,"[\\:]")+"+"),C=a("\\["+a(R+"|"+S+"|"+A)+"\\]"),q=a(a(r+"|"+t(c,o))+"*"),O=a(C+"|"+h+"(?!"+q+")|"+q),P=a("[0-9]*"),F=a(a(l+"@")+"?"+O+a("\\:"+P)+"?"),z=a(r+"|"+t(c,o,"[\\:\\@]")),T=a(z+"*"),I=a(z+"+"),D=a(a(r+"|"+t(c,o,"[\\@]"))+"+"),B=a(a("\\/"+T)+"*"),L=a("\\/"+a(I+B)+"?"),U=a(D+B),N=a(I+B),H="(?!"+z+")",M=(a(B+"|"+L+"|"+U+"|"+N+"|"+H),a(a(z+"|"+t("[\\/\\?]",u))+"*")),K=a(a(z+"|[\\/\\?]")+"*"),$=a(a("\\/\\/"+F+B)+"|"+L+"|"+N+"|"+H),G=a(p+"\\:"+$+a("\\?"+M)+"?"+a("\\#"+K)+"?"),V=a(a("\\/\\/"+F+B)+"|"+L+"|"+U+"|"+H),Q=a(V+a("\\?"+M)+"?"+a("\\#"+K)+"?");return a(G+"|"+Q),a(p+"\\:"+$+a("\\?"+M)+"?"),a(a("\\/\\/("+a("("+l+")@")+"?("+O+")"+a("\\:("+P+")")+"?)")+"?("+B+"|"+L+"|"+N+"|"+H+")"),a("\\?("+M+")"),a("\\#("+K+")"),a(a("\\/\\/("+a("("+l+")@")+"?("+O+")"+a("\\:("+P+")")+"?)")+"?("+B+"|"+L+"|"+U+"|"+H+")"),a("\\?("+M+")"),a("\\#("+K+")"),a(a("\\/\\/("+a("("+l+")@")+"?("+O+")"+a("\\:("+P+")")+"?)")+"?("+B+"|"+L+"|"+N+"|"+H+")"),a("\\?("+M+")"),a("\\#("+K+")"),a("("+l+")@"),a("\\:("+P+")"),{NOT_SCHEME:new RegExp(t("[^]","[A-Za-z]","[0-9]","[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",c,o),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",c,o),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",c,o),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",c,o),"g"),NOT_QUERY:new RegExp(t("[^\\%]",c,o,"[\\:\\@\\/\\?]",u),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",c,o,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",c,o),"g"),UNRESERVED:new RegExp(c,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",c,n),"g"),PCT_ENCODED:new RegExp(r,"g"),IPV4ADDRESS:new RegExp("^("+h+")$"),IPV6ADDRESS:new RegExp("^\\[?("+S+")"+a(a("\\%25|\\%(?!"+i+"{2})")+"("+_+")")+"?\\]?$")}}var n=o(!1),s=o(!0),u=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var a=[],i=!0,r=!1,o=void 0;try{for(var n,s=e[Symbol.iterator]();!(i=(n=s.next()).done)&&(a.push(n.value),!t||a.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{!i&&s.return&&s.return()}finally{if(r)throw o}}return a}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},c=2147483647,p=/^xn--/,l=/[^\0-\x7E]/,m=/[\x2E\u3002\uFF0E\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},d=Math.floor,f=String.fromCharCode;function g(e){throw new RangeError(h[e])}function v(e,t){var a=e.split("@"),i="";a.length>1&&(i=a[0]+"@",e=a[1]);var r=(e=e.replace(m,".")).split("."),o=function(e,t){for(var a=[],i=e.length;i--;)a[i]=t(e[i]);return a}(r,t).join(".");return i+o}function y(e){for(var t=[],a=0,i=e.length;a<i;){var r=e.charCodeAt(a++);if(r>=55296&&r<=56319&&a<i){var o=e.charCodeAt(a++);56320==(64512&o)?t.push(((1023&r)<<10)+(1023&o)+65536):(t.push(r),a--)}else t.push(r)}return t}var b=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},k=function(e,t,a){var i=0;for(e=a?d(e/700):e>>1,e+=d(e/t);e>455;i+=36)e=d(e/35);return d(i+36*e/(e+38))},j=function(e){var t,a=[],i=e.length,r=0,o=128,n=72,s=e.lastIndexOf("-");s<0&&(s=0);for(var u=0;u<s;++u)e.charCodeAt(u)>=128&&g("not-basic"),a.push(e.charCodeAt(u));for(var p=s>0?s+1:0;p<i;){for(var l=r,m=1,h=36;;h+=36){p>=i&&g("invalid-input");var f=(t=e.charCodeAt(p++))-48<10?t-22:t-65<26?t-65:t-97<26?t-97:36;(f>=36||f>d((c-r)/m))&&g("overflow"),r+=f*m;var v=h<=n?1:h>=n+26?26:h-n;if(f<v)break;var y=36-v;m>d(c/y)&&g("overflow"),m*=y}var b=a.length+1;n=k(r-l,b,0==l),d(r/b)>c-o&&g("overflow"),o+=d(r/b),r%=b,a.splice(r++,0,o)}return String.fromCodePoint.apply(String,a)},w=function(e){var t=[],a=(e=y(e)).length,i=128,r=0,o=72,n=!0,s=!1,u=void 0;try{for(var p,l=e[Symbol.iterator]();!(n=(p=l.next()).done);n=!0){var m=p.value;m<128&&t.push(f(m))}}catch(e){s=!0,u=e}finally{try{!n&&l.return&&l.return()}finally{if(s)throw u}}var h=t.length,v=h;for(h&&t.push("-");v<a;){var j=c,w=!0,x=!1,E=void 0;try{for(var S,_=e[Symbol.iterator]();!(w=(S=_.next()).done);w=!0){var R=S.value;R>=i&&R<j&&(j=R)}}catch(e){x=!0,E=e}finally{try{!w&&_.return&&_.return()}finally{if(x)throw E}}var A=v+1;j-i>d((c-r)/A)&&g("overflow"),r+=(j-i)*A,i=j;var C=!0,q=!1,O=void 0;try{for(var P,F=e[Symbol.iterator]();!(C=(P=F.next()).done);C=!0){var z=P.value;if(z<i&&++r>c&&g("overflow"),z==i){for(var T=r,I=36;;I+=36){var D=I<=o?1:I>=o+26?26:I-o;if(T<D)break;var B=T-D,L=36-D;t.push(f(b(D+B%L,0))),T=d(B/L)}t.push(f(b(T,0))),o=k(r,A,v==h),r=0,++v}}}catch(e){q=!0,O=e}finally{try{!C&&F.return&&F.return()}finally{if(q)throw O}}++r,++i}return t.join("")},x={version:"2.1.0",ucs2:{decode:y,encode:function(e){return String.fromCodePoint.apply(String,function(e){if(Array.isArray(e)){for(var t=0,a=Array(e.length);t<e.length;t++)a[t]=e[t];return a}return Array.from(e)}(e))}},decode:j,encode:w,toASCII:function(e){return v(e,function(e){return l.test(e)?"xn--"+w(e):e})},toUnicode:function(e){return v(e,function(e){return p.test(e)?j(e.slice(4).toLowerCase()):e})}},E={};function S(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function _(e){for(var t="",a=0,i=e.length;a<i;){var r=parseInt(e.substr(a+1,2),16);if(r<128)t+=String.fromCharCode(r),a+=3;else if(r>=194&&r<224){if(i-a>=6){var o=parseInt(e.substr(a+4,2),16);t+=String.fromCharCode((31&r)<<6|63&o)}else t+=e.substr(a,6);a+=6}else if(r>=224){if(i-a>=9){var n=parseInt(e.substr(a+4,2),16),s=parseInt(e.substr(a+7,2),16);t+=String.fromCharCode((15&r)<<12|(63&n)<<6|63&s)}else t+=e.substr(a,9);a+=9}else t+=e.substr(a,3),a+=3}return t}function R(e,t){function a(e){var a=_(e);return a.match(t.UNRESERVED)?a:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,a).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,a).replace(t.NOT_USERINFO,S).replace(t.PCT_ENCODED,r)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,a).toLowerCase().replace(t.NOT_HOST,S).replace(t.PCT_ENCODED,r)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,a).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,S).replace(t.PCT_ENCODED,r)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,a).replace(t.NOT_QUERY,S).replace(t.PCT_ENCODED,r)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,a).replace(t.NOT_FRAGMENT,S).replace(t.PCT_ENCODED,r)),e}function A(e){return e.replace(/^0*(.*)/,"$1")||"0"}function C(e,t){var a=e.match(t.IPV4ADDRESS)||[],i=u(a,2),r=i[1];return r?r.split(".").map(A).join("."):e}function q(e,t){var a=e.match(t.IPV6ADDRESS)||[],i=u(a,3),r=i[1],o=i[2];if(r){for(var n=r.toLowerCase().split("::").reverse(),s=u(n,2),c=s[0],p=s[1],l=p?p.split(":").map(A):[],m=c.split(":").map(A),h=t.IPV4ADDRESS.test(m[m.length-1]),d=h?7:8,f=m.length-d,g=Array(d),v=0;v<d;++v)g[v]=l[v]||m[f+v]||"";h&&(g[d-1]=C(g[d-1],t));var y=g.reduce(function(e,t,a){if(!t||"0"===t){var i=e[e.length-1];i&&i.index+i.length===a?i.length++:e.push({index:a,length:1})}return e},[]),b=y.sort(function(e,t){return t.length-e.length})[0],k=void 0;if(b&&b.length>1){var j=g.slice(0,b.index),w=g.slice(b.index+b.length);k=j.join(":")+"::"+w.join(":")}else k=g.join(":");return o&&(k+="%"+o),k}return e}var O=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,P=void 0==="".match(/(){0}/)[1];function F(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a={},i=!1!==t.iri?s:n;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var r=e.match(O);if(r){P?(a.scheme=r[1],a.userinfo=r[3],a.host=r[4],a.port=parseInt(r[5],10),a.path=r[6]||"",a.query=r[7],a.fragment=r[8],isNaN(a.port)&&(a.port=r[5])):(a.scheme=r[1]||void 0,a.userinfo=-1!==e.indexOf("@")?r[3]:void 0,a.host=-1!==e.indexOf("//")?r[4]:void 0,a.port=parseInt(r[5],10),a.path=r[6]||"",a.query=-1!==e.indexOf("?")?r[7]:void 0,a.fragment=-1!==e.indexOf("#")?r[8]:void 0,isNaN(a.port)&&(a.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?r[4]:void 0)),a.host&&(a.host=q(C(a.host,i),i)),void 0!==a.scheme||void 0!==a.userinfo||void 0!==a.host||void 0!==a.port||a.path||void 0!==a.query?void 0===a.scheme?a.reference="relative":void 0===a.fragment?a.reference="absolute":a.reference="uri":a.reference="same-document",t.reference&&"suffix"!==t.reference&&t.reference!==a.reference&&(a.error=a.error||"URI is not a "+t.reference+" reference.");var o=E[(t.scheme||a.scheme||"").toLowerCase()];if(t.unicodeSupport||o&&o.unicodeSupport)R(a,i);else{if(a.host&&(t.domainHost||o&&o.domainHost))try{a.host=x.toASCII(a.host.replace(i.PCT_ENCODED,_).toLowerCase())}catch(e){a.error=a.error||"Host's domain name can not be converted to ASCII via punycode: "+e}R(a,n)}o&&o.parse&&o.parse(a,t)}else a.error=a.error||"URI can not be parsed.";return a}var z=/^\.\.?\//,T=/^\/\.(\/|$)/,I=/^\/\.\.(\/|$)/,D=/^\/?(?:.|\n)*?(?=\/|$)/;function B(e){for(var t=[];e.length;)if(e.match(z))e=e.replace(z,"");else if(e.match(T))e=e.replace(T,"/");else if(e.match(I))e=e.replace(I,"/"),t.pop();else if("."===e||".."===e)e="";else{var a=e.match(D);if(!a)throw new Error("Unexpected dot segment condition");var i=a[0];e=e.slice(i.length),t.push(i)}return t.join("")}function L(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.iri?s:n,i=[],r=E[(t.scheme||e.scheme||"").toLowerCase()];if(r&&r.serialize&&r.serialize(e,t),e.host)if(a.IPV6ADDRESS.test(e.host));else if(t.domainHost||r&&r.domainHost)try{e.host=t.iri?x.toUnicode(e.host):x.toASCII(e.host.replace(a.PCT_ENCODED,_).toLowerCase())}catch(a){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+a}R(e,a),"suffix"!==t.reference&&e.scheme&&(i.push(e.scheme),i.push(":"));var o=function(e,t){var a=!1!==t.iri?s:n,i=[];return void 0!==e.userinfo&&(i.push(e.userinfo),i.push("@")),void 0!==e.host&&i.push(q(C(String(e.host),a),a).replace(a.IPV6ADDRESS,function(e,t,a){return"["+t+(a?"%25"+a:"")+"]"})),"number"==typeof e.port&&(i.push(":"),i.push(e.port.toString(10))),i.length?i.join(""):void 0}(e,t);if(void 0!==o&&("suffix"!==t.reference&&i.push("//"),i.push(o),e.path&&"/"!==e.path.charAt(0)&&i.push("/")),void 0!==e.path){var u=e.path;t.absolutePath||r&&r.absolutePath||(u=B(u)),void 0===o&&(u=u.replace(/^\/\//,"/%2F")),i.push(u)}return void 0!==e.query&&(i.push("?"),i.push(e.query)),void 0!==e.fragment&&(i.push("#"),i.push(e.fragment)),i.join("")}function U(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments[3],r={};return i||(e=F(L(e,a),a),t=F(L(t,a),a)),!(a=a||{}).tolerant&&t.scheme?(r.scheme=t.scheme,r.userinfo=t.userinfo,r.host=t.host,r.port=t.port,r.path=B(t.path||""),r.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(r.userinfo=t.userinfo,r.host=t.host,r.port=t.port,r.path=B(t.path||""),r.query=t.query):(t.path?("/"===t.path.charAt(0)?r.path=B(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?r.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:r.path=t.path:r.path="/"+t.path,r.path=B(r.path)),r.query=t.query):(r.path=e.path,void 0!==t.query?r.query=t.query:r.query=e.query),r.userinfo=e.userinfo,r.host=e.host,r.port=e.port),r.scheme=e.scheme),r.fragment=t.fragment,r}function N(e,t){return e&&e.toString().replace(t&&t.iri?s.PCT_ENCODED:n.PCT_ENCODED,_)}var H={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){return e.port!==("https"!==String(e.scheme).toLowerCase()?80:443)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},M={scheme:"https",domainHost:H.domainHost,parse:H.parse,serialize:H.serialize},K={},$="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",G="[0-9A-Fa-f]",V=a(a("%[EFef][0-9A-Fa-f]%"+G+G+"%"+G+G)+"|"+a("%[89A-Fa-f][0-9A-Fa-f]%"+G+G)+"|"+a("%"+G+G)),Q=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),W=new RegExp($,"g"),Y=new RegExp(V,"g"),Z=new RegExp(t("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',Q),"g"),J=new RegExp(t("[^]",$,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),X=J;function ee(e){var t=_(e);return t.match(W)?t:e}var te={scheme:"mailto",parse:function(e,t){var a=e,i=a.to=a.path?a.path.split(","):[];if(a.path=void 0,a.query){for(var r=!1,o={},n=a.query.split("&"),s=0,u=n.length;s<u;++s){var c=n[s].split("=");switch(c[0]){case"to":for(var p=c[1].split(","),l=0,m=p.length;l<m;++l)i.push(p[l]);break;case"subject":a.subject=N(c[1],t);break;case"body":a.body=N(c[1],t);break;default:r=!0,o[N(c[0],t)]=N(c[1],t)}}r&&(a.headers=o)}a.query=void 0;for(var h=0,d=i.length;h<d;++h){var f=i[h].split("@");if(f[0]=N(f[0]),t.unicodeSupport)f[1]=N(f[1],t).toLowerCase();else try{f[1]=x.toASCII(N(f[1],t).toLowerCase())}catch(e){a.error=a.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}i[h]=f.join("@")}return a},serialize:function(e,t){var a,i=e,o=null!=(a=e.to)?a instanceof Array?a:"number"!=typeof a.length||a.split||a.setInterval||a.call?[a]:Array.prototype.slice.call(a):[];if(o){for(var n=0,s=o.length;n<s;++n){var u=String(o[n]),c=u.lastIndexOf("@"),p=u.slice(0,c).replace(Y,ee).replace(Y,r).replace(Z,S),l=u.slice(c+1);try{l=t.iri?x.toUnicode(l):x.toASCII(N(l,t).toLowerCase())}catch(e){i.error=i.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e}o[n]=p+"@"+l}i.path=o.join(",")}var m=e.headers=e.headers||{};e.subject&&(m.subject=e.subject),e.body&&(m.body=e.body);var h=[];for(var d in m)m[d]!==K[d]&&h.push(d.replace(Y,ee).replace(Y,r).replace(J,S)+"="+m[d].replace(Y,ee).replace(Y,r).replace(X,S));return h.length&&(i.query=h.join("&")),i}},ae=/^([^\:]+)\:(.*)/,ie={scheme:"urn",parse:function(e,t){var a=e.path&&e.path.match(ae),i=e;if(a){var r=t.scheme||i.scheme||"urn",o=a[1].toLowerCase(),n=a[2],s=r+":"+(t.nid||o),u=E[s];i.nid=o,i.nss=n,i.path=void 0,u&&(i=u.parse(i,t))}else i.error=i.error||"URN can not be parsed.";return i},serialize:function(e,t){var a=t.scheme||e.scheme||"urn",i=e.nid,r=a+":"+(t.nid||i),o=E[r];o&&(e=o.serialize(e,t));var n=e,s=e.nss;return n.path=(i||t.nid)+":"+s,n}},re=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,oe={scheme:"urn:uuid",parse:function(e,t){var a=e;return a.uuid=a.nss,a.nss=void 0,t.tolerant||a.uuid&&a.uuid.match(re)||(a.error=a.error||"UUID is not valid."),a},serialize:function(e,t){var a=e;return a.nss=(e.uuid||"").toLowerCase(),a}};E[H.scheme]=H,E[M.scheme]=M,E[te.scheme]=te,E[ie.scheme]=ie,E[oe.scheme]=oe,e.SCHEMES=E,e.pctEncChar=S,e.pctDecChars=_,e.parse=F,e.removeDotSegments=B,e.serialize=L,e.resolveComponents=U,e.resolve=function(e,t,a){var i=function(e,t){var a=e;if(t)for(var i in t)a[i]=t[i];return a}({scheme:"null"},a);return L(U(F(e,i),F(t,i),i,!0),i)},e.normalize=function(e,t){return"string"==typeof e?e=L(F(e,t),t):"object"===i(e)&&(e=F(L(e,t),t)),e},e.equal=function(e,t,a){return"string"==typeof e?e=L(F(e,a),a):"object"===i(e)&&(e=L(e,a)),"string"==typeof t?t=L(F(t,a),a):"object"===i(t)&&(t=L(t,a)),e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace(t&&t.iri?s.ESCAPE:n.ESCAPE,S)},e.unescapeComponent=N,Object.defineProperty(e,"__esModule",{value:!0})}(t)},function(e,t,a){"use strict";e.exports=function(e){for(var t,a=0,i=e.length,r=0;r<i;)a++,(t=e.charCodeAt(r++))>=55296&&t<=56319&&r<i&&56320==(64512&(t=e.charCodeAt(r)))&&r++;return a}},function(e,t,a){"use strict";var i=e.exports=function(e,t,a){"function"==typeof t&&(a=t,t={}),function e(t,a,r,o,n,s,u,c,p,l){if(o&&"object"==typeof o&&!Array.isArray(o)){for(var m in a(o,n,s,u,c,p,l),o){var h=o[m];if(Array.isArray(h)){if(m in i.arrayKeywords)for(var d=0;d<h.length;d++)e(t,a,r,h[d],n+"/"+m+"/"+d,s,n,m,o,d)}else if(m in i.propsKeywords){if(h&&"object"==typeof h)for(var f in h)e(t,a,r,h[f],n+"/"+m+"/"+f.replace(/~/g,"~0").replace(/\//g,"~1"),s,n,m,o,f)}else(m in i.keywords||t.allKeys&&!(m in i.skipKeywords))&&e(t,a,r,h,n+"/"+m,s,n,m,o)}r(o,n,s,u,c,p,l)}}(t,"function"==typeof(a=t.cb||a)?a:a.pre||function(){},a.post||function(){},e,"",e)};i.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0},i.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},i.propsKeywords={definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},i.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0}},function(e,t,a){"use strict";var i=e.exports=function(){this._cache={}};i.prototype.put=function(e,t){this._cache[e]=t},i.prototype.get=function(e){return this._cache[e]},i.prototype.del=function(e){delete this._cache[e]},i.prototype.clear=function(){this._cache={}}},function(e,t,a){"use strict";var i=a(22),r=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,o=[0,31,28,31,30,31,30,31,31,30,31,30,31],n=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i,s=/^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i,u=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?$/i,c=/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#.\/;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,p=/^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i,l=/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,m=/^(?:\/(?:[^~\/]|~0|~1)*)*$/,h=/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,d=/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~\/]|~0|~1)*)*)$/;function f(e){return e="full"==e?"full":"fast",i.copy(f[e])}function g(e){var t=e.match(r);if(!t)return!1;var a=+t[1],i=+t[2],n=+t[3];return i>=1&&i<=12&&n>=1&&n<=(2==i&&function(e){return e%4==0&&(e%100!=0||e%400==0)}(a)?29:o[i])}function v(e,t){var a=e.match(n);if(!a)return!1;var i=a[1],r=a[2],o=a[3],s=a[5];return(i<=23&&r<=59&&o<=59||23==i&&59==r&&60==o)&&(!t||s)}e.exports=f,f.fast={date:/^\d\d\d\d-[0-1]\d-[0-3]\d$/,time:/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,"date-time":/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,uri:/^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i,"uri-reference":/^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,"uri-template":c,url:p,email:/^[a-z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,hostname:s,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:j,uuid:l,"json-pointer":m,"json-pointer-uri-fragment":h,"relative-json-pointer":d},f.full={date:g,time:v,"date-time":function(e){var t=e.split(y);return 2==t.length&&g(t[0])&&v(t[1],!0)},uri:function(e){return b.test(e)&&u.test(e)},"uri-reference":/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@\/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@\/?]|%[0-9a-f]{2})*)?$/i,"uri-template":c,url:p,email:/^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:function(e){return e.length<=255&&s.test(e)},ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:j,uuid:l,"json-pointer":m,"json-pointer-uri-fragment":h,"relative-json-pointer":d};var y=/t|\s/i;var b=/\/|:/;var k=/[^\\]\\Z/;function j(e){if(k.test(e))return!1;try{return new RegExp(e),!0}catch(e){return!1}}},function(e,t,a){"use strict";var i=a(153),r=a(22).toHash;e.exports=function(){var e=[{type:"number",rules:[{maximum:["exclusiveMaximum"]},{minimum:["exclusiveMinimum"]},"multipleOf","format"]},{type:"string",rules:["maxLength","minLength","pattern","format"]},{type:"array",rules:["maxItems","minItems","items","contains","uniqueItems"]},{type:"object",rules:["maxProperties","minProperties","required","dependencies","propertyNames",{properties:["additionalProperties","patternProperties"]}]},{rules:["$ref","const","enum","not","anyOf","oneOf","allOf","if"]}],t=["type","$comment"];return e.all=r(t),e.types=r(["number","integer","string","array","object","boolean","null"]),e.forEach(function(a){a.rules=a.rules.map(function(a){var r;if("object"==typeof a){var o=Object.keys(a)[0];r=a[o],a=o,r.forEach(function(a){t.push(a),e.all[a]=!0})}return t.push(a),e.all[a]={keyword:a,code:i[a],implements:r}}),e.all.$comment={keyword:"$comment",code:i.$comment},a.type&&(e.types[a.type]=a)}),e.keywords=r(t.concat(["$schema","$id","id","$data","title","description","default","definitions","examples","readOnly","writeOnly","contentMediaType","contentEncoding","additionalItems","then","else"])),e.custom={},e}},function(e,t,a){"use strict";e.exports={$ref:a(154),allOf:a(155),anyOf:a(156),$comment:a(157),const:a(158),contains:a(159),dependencies:a(160),enum:a(161),format:a(162),if:a(163),items:a(164),maximum:a(78),minimum:a(78),maxItems:a(79),minItems:a(79),maxLength:a(80),minLength:a(80),maxProperties:a(81),minProperties:a(81),multipleOf:a(165),not:a(166),oneOf:a(167),pattern:a(168),properties:a(169),propertyNames:a(170),required:a(171),uniqueItems:a(172),validate:a(77)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r,o=" ",n=e.level,s=e.dataLevel,u=e.schema[t],c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(s||""),m="valid"+n;if("#"==u||"#/"==u)e.isRoot?(i=e.async,r="validate"):(i=!0===e.root.schema.$async,r="root.refVal[0]");else{var h=e.resolveRef(e.baseId,u,e.isRoot);if(void 0===h){var d=e.MissingRefError.message(e.baseId,u);if("fail"==e.opts.missingRefs){e.logger.error(d),(y=y||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '$ref' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { ref: '"+e.util.escapeQuotes(u)+"' } ",!1!==e.opts.messages&&(o+=" , message: 'can\\'t resolve reference "+e.util.escapeQuotes(u)+"' "),e.opts.verbose&&(o+=" , schema: "+e.util.toQuotedString(u)+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),o+=" } "):o+=" {} ";var f=o;o=y.pop(),!e.compositeRule&&p?e.async?o+=" throw new ValidationError(["+f+"]); ":o+=" validate.errors = ["+f+"]; return false; ":o+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",p&&(o+=" if (false) { ")}else{if("ignore"!=e.opts.missingRefs)throw new e.MissingRefError(e.baseId,u,d);e.logger.warn(d),p&&(o+=" if (true) { ")}}else if(h.inline){var g=e.util.copy(e);g.level++;var v="valid"+g.level;g.schema=h.schema,g.schemaPath="",g.errSchemaPath=u,o+=" "+e.validate(g).replace(/validate\.schema/g,h.code)+" ",p&&(o+=" if ("+v+") { ")}else i=!0===h.$async||e.async&&!1!==h.$async,r=h.code}if(r){var y;(y=y||[]).push(o),o="",e.opts.passContext?o+=" "+r+".call(this, ":o+=" "+r+"( ",o+=" "+l+", (dataPath || '')",'""'!=e.errorPath&&(o+=" + "+e.errorPath);var b=o+=" , "+(s?"data"+(s-1||""):"parentData")+" , "+(s?e.dataPathArr[s]:"parentDataProperty")+", rootData)  ";if(o=y.pop(),i){if(!e.async)throw new Error("async schema referenced by sync schema");p&&(o+=" var "+m+"; "),o+=" try { await "+b+"; ",p&&(o+=" "+m+" = true; "),o+=" } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ",p&&(o+=" "+m+" = false; "),o+=" } ",p&&(o+=" if ("+m+") { ")}else o+=" if (!"+b+") { if (vErrors === null) vErrors = "+r+".errors; else vErrors = vErrors.concat("+r+".errors); errors = vErrors.length; } ",p&&(o+=" else { ")}return o}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.schema[t],o=e.schemaPath+e.util.getProperty(t),n=e.errSchemaPath+"/"+t,s=!e.opts.allErrors,u=e.util.copy(e),c="";u.level++;var p="valid"+u.level,l=u.baseId,m=!0,h=r;if(h)for(var d,f=-1,g=h.length-1;f<g;)d=h[f+=1],e.util.schemaHasRules(d,e.RULES.all)&&(m=!1,u.schema=d,u.schemaPath=o+"["+f+"]",u.errSchemaPath=n+"/"+f,i+="  "+e.validate(u)+" ",u.baseId=l,s&&(i+=" if ("+p+") { ",c+="}"));return s&&(i+=m?" if (true) { ":" "+c.slice(0,-1)+" "),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m="errs__"+r,h=e.util.copy(e),d="";h.level++;var f="valid"+h.level;if(n.every(function(t){return e.util.schemaHasRules(t,e.RULES.all)})){var g=h.baseId;i+=" var "+m+" = errors; var "+l+" = false;  ";var v=e.compositeRule;e.compositeRule=h.compositeRule=!0;var y=n;if(y)for(var b,k=-1,j=y.length-1;k<j;)b=y[k+=1],h.schema=b,h.schemaPath=s+"["+k+"]",h.errSchemaPath=u+"/"+k,i+="  "+e.validate(h)+" ",h.baseId=g,i+=" "+l+" = "+l+" || "+f+"; if (!"+l+") { ",d+="}";e.compositeRule=h.compositeRule=v,i+=" "+d+" if (!"+l+") {   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'anyOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should match some schema in anyOf' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),i+=" } else {  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; } ",e.opts.allErrors&&(i+=" } "),i=e.util.cleanUpCode(i)}else c&&(i+=" if (true) { ");return i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.schema[t],o=e.errSchemaPath+"/"+t,n=(e.opts.allErrors,e.util.toQuotedString(r));return!0===e.opts.$comment?i+=" console.log("+n+");":"function"==typeof e.opts.$comment&&(i+=" self._opts.$comment("+n+", "+e.util.toQuotedString(o)+", validate.root.schema);"),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m=e.opts.$data&&n&&n.$data;m&&(i+=" var schema"+r+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; "),m||(i+=" var schema"+r+" = validate.schema"+s+";"),i+="var "+l+" = equal("+p+", schema"+r+"); if (!"+l+") {   ";var h=h||[];h.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'const' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { allowedValue: schema"+r+" } ",!1!==e.opts.messages&&(i+=" , message: 'should be equal to constant' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var d=i;return i=h.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+d+"]); ":i+=" validate.errors = ["+d+"]; return false; ":i+=" var err = "+d+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" }",c&&(i+=" else { "),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m="errs__"+r,h=e.util.copy(e);h.level++;var d="valid"+h.level,f="i"+r,g=h.dataLevel=e.dataLevel+1,v="data"+g,y=e.baseId,b=e.util.schemaHasRules(n,e.RULES.all);if(i+="var "+m+" = errors;var "+l+";",b){var k=e.compositeRule;e.compositeRule=h.compositeRule=!0,h.schema=n,h.schemaPath=s,h.errSchemaPath=u,i+=" var "+d+" = false; for (var "+f+" = 0; "+f+" < "+p+".length; "+f+"++) { ",h.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers,!0);var j=p+"["+f+"]";h.dataPathArr[g]=f;var w=e.validate(h);h.baseId=y,e.util.varOccurences(w,v)<2?i+=" "+e.util.varReplace(w,v,j)+" ":i+=" var "+v+" = "+j+"; "+w+" ",i+=" if ("+d+") break; }  ",e.compositeRule=h.compositeRule=k,i+="  if (!"+d+") {"}else i+=" if ("+p+".length == 0) {";var x=x||[];x.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'contains' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should contain a valid item' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var E=i;return i=x.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+E+"]); ":i+=" validate.errors = ["+E+"]; return false; ":i+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else { ",b&&(i+="  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; } "),e.opts.allErrors&&(i+=" } "),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="errs__"+r,m=e.util.copy(e),h="";m.level++;var d="valid"+m.level,f={},g={},v=e.opts.ownProperties;for(j in n){var y=n[j],b=Array.isArray(y)?g:f;b[j]=y}i+="var "+l+" = errors;";var k=e.errorPath;for(var j in i+="var missing"+r+";",g)if((b=g[j]).length){if(i+=" if ( "+p+e.util.getProperty(j)+" !== undefined ",v&&(i+=" && Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(j)+"') "),c){i+=" && ( ";var w=b;if(w)for(var x=-1,E=w.length-1;x<E;){q=w[x+=1],x&&(i+=" || "),i+=" ( ( "+(z=p+(F=e.util.getProperty(q)))+" === undefined ",v&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(q)+"') "),i+=") && (missing"+r+" = "+e.util.toQuotedString(e.opts.jsonPointers?q:F)+") ) "}i+=")) {  ";var S="missing"+r,_="' + "+S+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(k,S,!0):k+" + "+S);var R=R||[];R.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { property: '"+e.util.escapeQuotes(j)+"', missingProperty: '"+_+"', depsCount: "+b.length+", deps: '"+e.util.escapeQuotes(1==b.length?b[0]:b.join(", "))+"' } ",!1!==e.opts.messages&&(i+=" , message: 'should have ",1==b.length?i+="property "+e.util.escapeQuotes(b[0]):i+="properties "+e.util.escapeQuotes(b.join(", ")),i+=" when property "+e.util.escapeQuotes(j)+" is present' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var A=i;i=R.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+A+"]); ":i+=" validate.errors = ["+A+"]; return false; ":i+=" var err = "+A+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else{i+=" ) { ";var C=b;if(C)for(var q,O=-1,P=C.length-1;O<P;){q=C[O+=1];var F=e.util.getProperty(q),z=(_=e.util.escapeQuotes(q),p+F);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(k,q,e.opts.jsonPointers)),i+=" if ( "+z+" === undefined ",v&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(q)+"') "),i+=") {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { property: '"+e.util.escapeQuotes(j)+"', missingProperty: '"+_+"', depsCount: "+b.length+", deps: '"+e.util.escapeQuotes(1==b.length?b[0]:b.join(", "))+"' } ",!1!==e.opts.messages&&(i+=" , message: 'should have ",1==b.length?i+="property "+e.util.escapeQuotes(b[0]):i+="properties "+e.util.escapeQuotes(b.join(", ")),i+=" when property "+e.util.escapeQuotes(j)+" is present' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}i+=" }   ",c&&(h+="}",i+=" else { ")}e.errorPath=k;var T=m.baseId;for(var j in f){y=f[j];e.util.schemaHasRules(y,e.RULES.all)&&(i+=" "+d+" = true; if ( "+p+e.util.getProperty(j)+" !== undefined ",v&&(i+=" && Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(j)+"') "),i+=") { ",m.schema=y,m.schemaPath=s+e.util.getProperty(j),m.errSchemaPath=u+"/"+e.util.escapeFragment(j),i+="  "+e.validate(m)+" ",m.baseId=T,i+=" }  ",c&&(i+=" if ("+d+") { ",h+="}"))}return c&&(i+="   "+h+" if ("+l+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m=e.opts.$data&&n&&n.$data;m&&(i+=" var schema"+r+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; ");var h="i"+r,d="schema"+r;m||(i+=" var "+d+" = validate.schema"+s+";"),i+="var "+l+";",m&&(i+=" if (schema"+r+" === undefined) "+l+" = true; else if (!Array.isArray(schema"+r+")) "+l+" = false; else {"),i+=l+" = false;for (var "+h+"=0; "+h+"<"+d+".length; "+h+"++) if (equal("+p+", "+d+"["+h+"])) { "+l+" = true; break; }",m&&(i+="  }  "),i+=" if (!"+l+") {   ";var f=f||[];f.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'enum' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { allowedValues: schema"+r+" } ",!1!==e.opts.messages&&(i+=" , message: 'should be equal to one of the allowed values' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var g=i;return i=f.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+g+"]); ":i+=" validate.errors = ["+g+"]; return false; ":i+=" var err = "+g+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" }",c&&(i+=" else { "),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||"");if(!1===e.opts.format)return c&&(i+=" if (true) { "),i;var l,m=e.opts.$data&&n&&n.$data;m?(i+=" var schema"+r+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; ",l="schema"+r):l=n;var h=e.opts.unknownFormats,d=Array.isArray(h);if(m){i+=" var "+(f="format"+r)+" = formats["+l+"]; var "+(g="isObject"+r)+" = typeof "+f+" == 'object' && !("+f+" instanceof RegExp) && "+f+".validate; var "+(v="formatType"+r)+" = "+g+" && "+f+".type || 'string'; if ("+g+") { ",e.async&&(i+=" var async"+r+" = "+f+".async; "),i+=" "+f+" = "+f+".validate; } if (  ",m&&(i+=" ("+l+" !== undefined && typeof "+l+" != 'string') || "),i+=" (","ignore"!=h&&(i+=" ("+l+" && !"+f+" ",d&&(i+=" && self._opts.unknownFormats.indexOf("+l+") == -1 "),i+=") || "),i+=" ("+f+" && "+v+" == '"+a+"' && !(typeof "+f+" == 'function' ? ",e.async?i+=" (async"+r+" ? await "+f+"("+p+") : "+f+"("+p+")) ":i+=" "+f+"("+p+") ",i+=" : "+f+".test("+p+"))))) {"}else{var f;if(!(f=e.formats[n])){if("ignore"==h)return e.logger.warn('unknown format "'+n+'" ignored in schema at path "'+e.errSchemaPath+'"'),c&&(i+=" if (true) { "),i;if(d&&h.indexOf(n)>=0)return c&&(i+=" if (true) { "),i;throw new Error('unknown format "'+n+'" is used in schema at path "'+e.errSchemaPath+'"')}var g,v=(g="object"==typeof f&&!(f instanceof RegExp)&&f.validate)&&f.type||"string";if(g){var y=!0===f.async;f=f.validate}if(v!=a)return c&&(i+=" if (true) { "),i;if(y){if(!e.async)throw new Error("async format in sync schema");i+=" if (!(await "+(b="formats"+e.util.getProperty(n)+".validate")+"("+p+"))) { "}else{i+=" if (! ";var b="formats"+e.util.getProperty(n);g&&(b+=".validate"),i+="function"==typeof f?" "+b+"("+p+") ":" "+b+".test("+p+") ",i+=") { "}}var k=k||[];k.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'format' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { format:  ",i+=m?""+l:""+e.util.toQuotedString(n),i+="  } ",!1!==e.opts.messages&&(i+=" , message: 'should match format \"",i+=m?"' + "+l+" + '":""+e.util.escapeQuotes(n),i+="\"' "),e.opts.verbose&&(i+=" , schema:  ",i+=m?"validate.schema"+s:""+e.util.toQuotedString(n),i+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var j=i;return i=k.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+j+"]); ":i+=" validate.errors = ["+j+"]; return false; ":i+=" var err = "+j+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } ",c&&(i+=" else { "),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m="errs__"+r,h=e.util.copy(e);h.level++;var d="valid"+h.level,f=e.schema.then,g=e.schema.else,v=void 0!==f&&e.util.schemaHasRules(f,e.RULES.all),y=void 0!==g&&e.util.schemaHasRules(g,e.RULES.all),b=h.baseId;if(v||y){var k;h.createErrors=!1,h.schema=n,h.schemaPath=s,h.errSchemaPath=u,i+=" var "+m+" = errors; var "+l+" = true;  ";var j=e.compositeRule;e.compositeRule=h.compositeRule=!0,i+="  "+e.validate(h)+" ",h.baseId=b,h.createErrors=!0,i+="  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; }  ",e.compositeRule=h.compositeRule=j,v?(i+=" if ("+d+") {  ",h.schema=e.schema.then,h.schemaPath=e.schemaPath+".then",h.errSchemaPath=e.errSchemaPath+"/then",i+="  "+e.validate(h)+" ",h.baseId=b,i+=" "+l+" = "+d+"; ",v&&y?i+=" var "+(k="ifClause"+r)+" = 'then'; ":k="'then'",i+=" } ",y&&(i+=" else { ")):i+=" if (!"+d+") { ",y&&(h.schema=e.schema.else,h.schemaPath=e.schemaPath+".else",h.errSchemaPath=e.errSchemaPath+"/else",i+="  "+e.validate(h)+" ",h.baseId=b,i+=" "+l+" = "+d+"; ",v&&y?i+=" var "+(k="ifClause"+r)+" = 'else'; ":k="'else'",i+=" } "),i+=" if (!"+l+") {   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'if' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { failingKeyword: "+k+" } ",!1!==e.opts.messages&&(i+=" , message: 'should match \"' + "+k+" + '\" schema' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),i+=" }   ",c&&(i+=" else { "),i=e.util.cleanUpCode(i)}else c&&(i+=" if (true) { ");return i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m="errs__"+r,h=e.util.copy(e),d="";h.level++;var f="valid"+h.level,g="i"+r,v=h.dataLevel=e.dataLevel+1,y="data"+v,b=e.baseId;if(i+="var "+m+" = errors;var "+l+";",Array.isArray(n)){var k=e.schema.additionalItems;if(!1===k){i+=" "+l+" = "+p+".length <= "+n.length+"; ";var j=u;u=e.errSchemaPath+"/additionalItems",i+="  if (!"+l+") {   ";var w=w||[];w.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'additionalItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { limit: "+n.length+" } ",!1!==e.opts.messages&&(i+=" , message: 'should NOT have more than "+n.length+" items' "),e.opts.verbose&&(i+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var x=i;i=w.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+x+"]); ":i+=" validate.errors = ["+x+"]; return false; ":i+=" var err = "+x+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } ",u=j,c&&(d+="}",i+=" else { ")}var E=n;if(E)for(var S,_=-1,R=E.length-1;_<R;)if(S=E[_+=1],e.util.schemaHasRules(S,e.RULES.all)){i+=" "+f+" = true; if ("+p+".length > "+_+") { ";var A=p+"["+_+"]";h.schema=S,h.schemaPath=s+"["+_+"]",h.errSchemaPath=u+"/"+_,h.errorPath=e.util.getPathExpr(e.errorPath,_,e.opts.jsonPointers,!0),h.dataPathArr[v]=_;var C=e.validate(h);h.baseId=b,e.util.varOccurences(C,y)<2?i+=" "+e.util.varReplace(C,y,A)+" ":i+=" var "+y+" = "+A+"; "+C+" ",i+=" }  ",c&&(i+=" if ("+f+") { ",d+="}")}if("object"==typeof k&&e.util.schemaHasRules(k,e.RULES.all)){h.schema=k,h.schemaPath=e.schemaPath+".additionalItems",h.errSchemaPath=e.errSchemaPath+"/additionalItems",i+=" "+f+" = true; if ("+p+".length > "+n.length+") {  for (var "+g+" = "+n.length+"; "+g+" < "+p+".length; "+g+"++) { ",h.errorPath=e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers,!0);A=p+"["+g+"]";h.dataPathArr[v]=g;C=e.validate(h);h.baseId=b,e.util.varOccurences(C,y)<2?i+=" "+e.util.varReplace(C,y,A)+" ":i+=" var "+y+" = "+A+"; "+C+" ",c&&(i+=" if (!"+f+") break; "),i+=" } }  ",c&&(i+=" if ("+f+") { ",d+="}")}}else if(e.util.schemaHasRules(n,e.RULES.all)){h.schema=n,h.schemaPath=s,h.errSchemaPath=u,i+="  for (var "+g+" = 0; "+g+" < "+p+".length; "+g+"++) { ",h.errorPath=e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers,!0);A=p+"["+g+"]";h.dataPathArr[v]=g;C=e.validate(h);h.baseId=b,e.util.varOccurences(C,y)<2?i+=" "+e.util.varReplace(C,y,A)+" ":i+=" var "+y+" = "+A+"; "+C+" ",c&&(i+=" if (!"+f+") break; "),i+=" }"}return c&&(i+=" "+d+" if ("+m+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s,r+="var division"+o+";if (",m&&(r+=" "+i+" !== undefined && ( typeof "+i+" != 'number' || "),r+=" (division"+o+" = "+l+" / "+i+", ",e.opts.multipleOfPrecision?r+=" Math.abs(Math.round(division"+o+") - division"+o+") > 1e-"+e.opts.multipleOfPrecision+" ":r+=" division"+o+" !== parseInt(division"+o+") ",r+=" ) ",m&&(r+="  )  "),r+=" ) {   ";var h=h||[];h.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'multipleOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { multipleOf: "+i+" } ",!1!==e.opts.messages&&(r+=" , message: 'should be multiple of ",r+=m?"' + "+i:i+"'"),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var d=r;return r=h.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+d+"]); ":r+=" validate.errors = ["+d+"]; return false; ":r+=" var err = "+d+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+="} ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="errs__"+r,m=e.util.copy(e);m.level++;var h="valid"+m.level;if(e.util.schemaHasRules(n,e.RULES.all)){m.schema=n,m.schemaPath=s,m.errSchemaPath=u,i+=" var "+l+" = errors;  ";var d,f=e.compositeRule;e.compositeRule=m.compositeRule=!0,m.createErrors=!1,m.opts.allErrors&&(d=m.opts.allErrors,m.opts.allErrors=!1),i+=" "+e.validate(m)+" ",m.createErrors=!0,d&&(m.opts.allErrors=d),e.compositeRule=m.compositeRule=f,i+=" if ("+h+") {   ";var g=g||[];g.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should NOT be valid' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var v=i;i=g.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+v+"]); ":i+=" validate.errors = ["+v+"]; return false; ":i+=" var err = "+v+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else {  errors = "+l+"; if (vErrors !== null) { if ("+l+") vErrors.length = "+l+"; else vErrors = null; } ",e.opts.allErrors&&(i+=" } ")}else i+="  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should NOT be valid' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",c&&(i+=" if (false) { ");return i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m="errs__"+r,h=e.util.copy(e),d="";h.level++;var f="valid"+h.level,g=h.baseId,v="prevValid"+r,y="passingSchemas"+r;i+="var "+m+" = errors , "+v+" = false , "+l+" = false , "+y+" = null; ";var b=e.compositeRule;e.compositeRule=h.compositeRule=!0;var k=n;if(k)for(var j,w=-1,x=k.length-1;w<x;)j=k[w+=1],e.util.schemaHasRules(j,e.RULES.all)?(h.schema=j,h.schemaPath=s+"["+w+"]",h.errSchemaPath=u+"/"+w,i+="  "+e.validate(h)+" ",h.baseId=g):i+=" var "+f+" = true; ",w&&(i+=" if ("+f+" && "+v+") { "+l+" = false; "+y+" = ["+y+", "+w+"]; } else { ",d+="}"),i+=" if ("+f+") { "+l+" = "+v+" = true; "+y+" = "+w+"; }";return e.compositeRule=h.compositeRule=b,i+=d+"if (!"+l+") {   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'oneOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { passingSchemas: "+y+" } ",!1!==e.opts.messages&&(i+=" , message: 'should match exactly one schema in oneOf' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),i+="} else {  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; }",e.opts.allErrors&&(i+=" } "),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s,r+="if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'string') || "),r+=" !"+(m?"(new RegExp("+i+"))":e.usePattern(s))+".test("+l+") ) {   ";var h=h||[];h.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'pattern' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { pattern:  ",r+=m?""+i:""+e.util.toQuotedString(s),r+="  } ",!1!==e.opts.messages&&(r+=" , message: 'should match pattern \"",r+=m?"' + "+i+" + '":""+e.util.escapeQuotes(s),r+="\"' "),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+e.util.toQuotedString(s),r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var d=r;return r=h.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+d+"]); ":r+=" validate.errors = ["+d+"]; return false; ":r+=" var err = "+d+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+="} ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="errs__"+r,m=e.util.copy(e),h="";m.level++;var d="valid"+m.level,f="key"+r,g="idx"+r,v=m.dataLevel=e.dataLevel+1,y="data"+v,b="dataProperties"+r,k=Object.keys(n||{}),j=e.schema.patternProperties||{},w=Object.keys(j),x=e.schema.additionalProperties,E=k.length||w.length,S=!1===x,_="object"==typeof x&&Object.keys(x).length,R=e.opts.removeAdditional,A=S||_||R,C=e.opts.ownProperties,q=e.baseId,O=e.schema.required;if(O&&(!e.opts.$data||!O.$data)&&O.length<e.opts.loopRequired)var P=e.util.toHash(O);if(i+="var "+l+" = errors;var "+d+" = true;",C&&(i+=" var "+b+" = undefined;"),A){if(i+=C?" "+b+" = "+b+" || Object.keys("+p+"); for (var "+g+"=0; "+g+"<"+b+".length; "+g+"++) { var "+f+" = "+b+"["+g+"]; ":" for (var "+f+" in "+p+") { ",E){if(i+=" var isAdditional"+r+" = !(false ",k.length)if(k.length>8)i+=" || validate.schema"+s+".hasOwnProperty("+f+") ";else{var F=k;if(F)for(var z=-1,T=F.length-1;z<T;)Q=F[z+=1],i+=" || "+f+" == "+e.util.toQuotedString(Q)+" "}if(w.length){var I=w;if(I)for(var D=-1,B=I.length-1;D<B;)re=I[D+=1],i+=" || "+e.usePattern(re)+".test("+f+") "}i+=" ); if (isAdditional"+r+") { "}if("all"==R)i+=" delete "+p+"["+f+"]; ";else{var L=e.errorPath,U="' + "+f+" + '";if(e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers)),S)if(R)i+=" delete "+p+"["+f+"]; ";else{i+=" "+d+" = false; ";var N=u;u=e.errSchemaPath+"/additionalProperties",(te=te||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'additionalProperties' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { additionalProperty: '"+U+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is an invalid additional property":i+="should NOT have additional properties",i+="' "),e.opts.verbose&&(i+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var H=i;i=te.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+H+"]); ":i+=" validate.errors = ["+H+"]; return false; ":i+=" var err = "+H+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",u=N,c&&(i+=" break; ")}else if(_)if("failing"==R){i+=" var "+l+" = errors;  ";var M=e.compositeRule;e.compositeRule=m.compositeRule=!0,m.schema=x,m.schemaPath=e.schemaPath+".additionalProperties",m.errSchemaPath=e.errSchemaPath+"/additionalProperties",m.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);var K=p+"["+f+"]";m.dataPathArr[v]=f;var $=e.validate(m);m.baseId=q,e.util.varOccurences($,y)<2?i+=" "+e.util.varReplace($,y,K)+" ":i+=" var "+y+" = "+K+"; "+$+" ",i+=" if (!"+d+") { errors = "+l+"; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete "+p+"["+f+"]; }  ",e.compositeRule=m.compositeRule=M}else{m.schema=x,m.schemaPath=e.schemaPath+".additionalProperties",m.errSchemaPath=e.errSchemaPath+"/additionalProperties",m.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);K=p+"["+f+"]";m.dataPathArr[v]=f;$=e.validate(m);m.baseId=q,e.util.varOccurences($,y)<2?i+=" "+e.util.varReplace($,y,K)+" ":i+=" var "+y+" = "+K+"; "+$+" ",c&&(i+=" if (!"+d+") break; ")}e.errorPath=L}E&&(i+=" } "),i+=" }  ",c&&(i+=" if ("+d+") { ",h+="}")}var G=e.opts.useDefaults&&!e.compositeRule;if(k.length){var V=k;if(V)for(var Q,W=-1,Y=V.length-1;W<Y;){var Z=n[Q=V[W+=1]];if(e.util.schemaHasRules(Z,e.RULES.all)){var J=e.util.getProperty(Q),X=(K=p+J,G&&void 0!==Z.default);m.schema=Z,m.schemaPath=s+J,m.errSchemaPath=u+"/"+e.util.escapeFragment(Q),m.errorPath=e.util.getPath(e.errorPath,Q,e.opts.jsonPointers),m.dataPathArr[v]=e.util.toQuotedString(Q);$=e.validate(m);if(m.baseId=q,e.util.varOccurences($,y)<2){$=e.util.varReplace($,y,K);var ee=K}else{ee=y;i+=" var "+y+" = "+K+"; "}if(X)i+=" "+$+" ";else{if(P&&P[Q]){i+=" if ( "+ee+" === undefined ",C&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(Q)+"') "),i+=") { "+d+" = false; ";L=e.errorPath,N=u;var te,ae=e.util.escapeQuotes(Q);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(L,Q,e.opts.jsonPointers)),u=e.errSchemaPath+"/required",(te=te||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+ae+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+ae+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";H=i;i=te.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+H+"]); ":i+=" validate.errors = ["+H+"]; return false; ":i+=" var err = "+H+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",u=N,e.errorPath=L,i+=" } else { "}else c?(i+=" if ( "+ee+" === undefined ",C&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(Q)+"') "),i+=") { "+d+" = true; } else { "):(i+=" if ("+ee+" !== undefined ",C&&(i+=" &&   Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(Q)+"') "),i+=" ) { ");i+=" "+$+" } "}}c&&(i+=" if ("+d+") { ",h+="}")}}if(w.length){var ie=w;if(ie)for(var re,oe=-1,ne=ie.length-1;oe<ne;){Z=j[re=ie[oe+=1]];if(e.util.schemaHasRules(Z,e.RULES.all)){m.schema=Z,m.schemaPath=e.schemaPath+".patternProperties"+e.util.getProperty(re),m.errSchemaPath=e.errSchemaPath+"/patternProperties/"+e.util.escapeFragment(re),i+=C?" "+b+" = "+b+" || Object.keys("+p+"); for (var "+g+"=0; "+g+"<"+b+".length; "+g+"++) { var "+f+" = "+b+"["+g+"]; ":" for (var "+f+" in "+p+") { ",i+=" if ("+e.usePattern(re)+".test("+f+")) { ",m.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);K=p+"["+f+"]";m.dataPathArr[v]=f;$=e.validate(m);m.baseId=q,e.util.varOccurences($,y)<2?i+=" "+e.util.varReplace($,y,K)+" ":i+=" var "+y+" = "+K+"; "+$+" ",c&&(i+=" if (!"+d+") break; "),i+=" } ",c&&(i+=" else "+d+" = true; "),i+=" }  ",c&&(i+=" if ("+d+") { ",h+="}")}}}return c&&(i+=" "+h+" if ("+l+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="errs__"+r,m=e.util.copy(e);m.level++;var h="valid"+m.level;if(i+="var "+l+" = errors;",e.util.schemaHasRules(n,e.RULES.all)){m.schema=n,m.schemaPath=s,m.errSchemaPath=u;var d="key"+r,f="idx"+r,g="i"+r,v="' + "+d+" + '",y="data"+(m.dataLevel=e.dataLevel+1),b="dataProperties"+r,k=e.opts.ownProperties,j=e.baseId;k&&(i+=" var "+b+" = undefined; "),i+=k?" "+b+" = "+b+" || Object.keys("+p+"); for (var "+f+"=0; "+f+"<"+b+".length; "+f+"++) { var "+d+" = "+b+"["+f+"]; ":" for (var "+d+" in "+p+") { ",i+=" var startErrs"+r+" = errors; ";var w=d,x=e.compositeRule;e.compositeRule=m.compositeRule=!0;var E=e.validate(m);m.baseId=j,e.util.varOccurences(E,y)<2?i+=" "+e.util.varReplace(E,y,w)+" ":i+=" var "+y+" = "+w+"; "+E+" ",e.compositeRule=m.compositeRule=x,i+=" if (!"+h+") { for (var "+g+"=startErrs"+r+"; "+g+"<errors; "+g+"++) { vErrors["+g+"].propertyName = "+d+"; }   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'propertyNames' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { propertyName: '"+v+"' } ",!1!==e.opts.messages&&(i+=" , message: 'property name \\'"+v+"\\' is invalid' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),c&&(i+=" break; "),i+=" } }"}return c&&(i+="  if ("+l+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m=e.opts.$data&&n&&n.$data;m&&(i+=" var schema"+r+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; ");var h="schema"+r;if(!m)if(n.length<e.opts.loopRequired&&e.schema.properties&&Object.keys(e.schema.properties).length){var d=[],f=n;if(f)for(var g,v=-1,y=f.length-1;v<y;){g=f[v+=1];var b=e.schema.properties[g];b&&e.util.schemaHasRules(b,e.RULES.all)||(d[d.length]=g)}}else d=n;if(m||d.length){var k=e.errorPath,j=m||d.length>=e.opts.loopRequired,w=e.opts.ownProperties;if(c)if(i+=" var missing"+r+"; ",j){m||(i+=" var "+h+" = validate.schema"+s+"; ");var x="' + "+(C="schema"+r+"["+(_="i"+r)+"]")+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(k,C,e.opts.jsonPointers)),i+=" var "+l+" = true; ",m&&(i+=" if (schema"+r+" === undefined) "+l+" = true; else if (!Array.isArray(schema"+r+")) "+l+" = false; else {"),i+=" for (var "+_+" = 0; "+_+" < "+h+".length; "+_+"++) { "+l+" = "+p+"["+h+"["+_+"]] !== undefined ",w&&(i+=" &&   Object.prototype.hasOwnProperty.call("+p+", "+h+"["+_+"]) "),i+="; if (!"+l+") break; } ",m&&(i+="  }  "),i+="  if (!"+l+") {   ",(A=A||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+x+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+x+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var E=i;i=A.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+E+"]); ":i+=" validate.errors = ["+E+"]; return false; ":i+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else { "}else{i+=" if ( ";var S=d;if(S)for(var _=-1,R=S.length-1;_<R;){O=S[_+=1],_&&(i+=" || "),i+=" ( ( "+(T=p+(z=e.util.getProperty(O)))+" === undefined ",w&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(O)+"') "),i+=") && (missing"+r+" = "+e.util.toQuotedString(e.opts.jsonPointers?O:z)+") ) "}i+=") {  ";var A;x="' + "+(C="missing"+r)+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(k,C,!0):k+" + "+C),(A=A||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+x+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+x+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";E=i;i=A.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+E+"]); ":i+=" validate.errors = ["+E+"]; return false; ":i+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else { "}else if(j){m||(i+=" var "+h+" = validate.schema"+s+"; ");var C;x="' + "+(C="schema"+r+"["+(_="i"+r)+"]")+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(k,C,e.opts.jsonPointers)),m&&(i+=" if ("+h+" && !Array.isArray("+h+")) {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+x+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+x+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if ("+h+" !== undefined) { "),i+=" for (var "+_+" = 0; "+_+" < "+h+".length; "+_+"++) { if ("+p+"["+h+"["+_+"]] === undefined ",w&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", "+h+"["+_+"]) "),i+=") {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+x+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+x+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ",m&&(i+="  }  ")}else{var q=d;if(q)for(var O,P=-1,F=q.length-1;P<F;){O=q[P+=1];var z=e.util.getProperty(O),T=(x=e.util.escapeQuotes(O),p+z);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(k,O,e.opts.jsonPointers)),i+=" if ( "+T+" === undefined ",w&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(O)+"') "),i+=") {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+x+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+x+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}e.errorPath=k}else c&&(i+=" if (true) {");return i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m="valid"+o,h=e.opts.$data&&s&&s.$data;if(h?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s,(s||h)&&!1!==e.opts.uniqueItems){h&&(r+=" var "+m+"; if ("+i+" === false || "+i+" === undefined) "+m+" = true; else if (typeof "+i+" != 'boolean') "+m+" = false; else { "),r+=" var i = "+l+".length , "+m+" = true , j; if (i > 1) { ";var d=e.schema.items&&e.schema.items.type,f=Array.isArray(d);if(!d||"object"==d||"array"==d||f&&(d.indexOf("object")>=0||d.indexOf("array")>=0))r+=" outer: for (;i--;) { for (j = i; j--;) { if (equal("+l+"[i], "+l+"[j])) { "+m+" = false; break outer; } } } ";else{r+=" var itemIndices = {}, item; for (;i--;) { var item = "+l+"[i]; ";var g="checkDataType"+(f?"s":"");r+=" if ("+e.util[g](d,"item",!0)+") continue; ",f&&(r+=" if (typeof item == 'string') item = '\"' + item; "),r+=" if (typeof itemIndices[item] == 'number') { "+m+" = false; j = itemIndices[item]; break; } itemIndices[item] = i; } "}r+=" } ",h&&(r+="  }  "),r+=" if (!"+m+") {   ";var v=v||[];v.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'uniqueItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { i: i, j: j } ",!1!==e.opts.messages&&(r+=" , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "),e.opts.verbose&&(r+=" , schema:  ",r+=h?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var y=r;r=v.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+y+"]); ":r+=" validate.errors = ["+y+"]; return false; ":r+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } ",p&&(r+=" else { ")}else p&&(r+=" if (true) { ");return r}},function(e,t,a){"use strict";var i=["multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","additionalItems","maxItems","minItems","uniqueItems","maxProperties","minProperties","required","additionalProperties","enum","format","const"];e.exports=function(e,t){for(var a=0;a<t.length;a++){e=JSON.parse(JSON.stringify(e));var r,o=t[a].split("/"),n=e;for(r=1;r<o.length;r++)n=n[o[r]];for(r=0;r<i.length;r++){var s=i[r],u=n[s];u&&(n[s]={anyOf:[u,{$ref:"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#"}]})}}return e}},function(e,t,a){"use strict";var i=a(47).MissingRef;e.exports=function e(t,a,r){var o=this;if("function"!=typeof this._opts.loadSchema)throw new Error("options.loadSchema should be a function");"function"==typeof a&&(r=a,a=void 0);var n=s(t).then(function(){var e=o._addSchema(t,void 0,a);return e.validate||function e(t){try{return o._compile(t)}catch(e){if(e instanceof i)return function r(e){var r=e.missingSchema;if(c(r))throw new Error("Schema "+r+" is loaded but "+e.missingRef+" cannot be resolved");var n=o._loadingSchemas[r];n||(n=o._loadingSchemas[r]=o._opts.loadSchema(r)).then(u,u);return n.then(function(e){if(!c(r))return s(e).then(function(){c(r)||o.addSchema(e,r,void 0,a)})}).then(function(){return function e(t){try{return o._compile(t)}catch(e){if(e instanceof i)return r(e);throw e}function r(i){var r=i.missingSchema;if(c(r))throw new Error("Schema "+r+" is loaded but "+i.missingRef+" cannot be resolved");var n=o._loadingSchemas[r];return n||(n=o._loadingSchemas[r]=o._opts.loadSchema(r)).then(u,u),n.then(function(e){if(!c(r))return s(e).then(function(){c(r)||o.addSchema(e,r,void 0,a)})}).then(function(){return e(t)});function u(){delete o._loadingSchemas[r]}function c(e){return o._refs[e]||o._schemas[e]}}}(t)});function u(){delete o._loadingSchemas[r]}function c(e){return o._refs[e]||o._schemas[e]}}(e);throw e}function r(i){var r=i.missingSchema;if(c(r))throw new Error("Schema "+r+" is loaded but "+i.missingRef+" cannot be resolved");var n=o._loadingSchemas[r];return n||(n=o._loadingSchemas[r]=o._opts.loadSchema(r)).then(u,u),n.then(function(e){if(!c(r))return s(e).then(function(){c(r)||o.addSchema(e,r,void 0,a)})}).then(function(){return e(t)});function u(){delete o._loadingSchemas[r]}function c(e){return o._refs[e]||o._schemas[e]}}}(e)});r&&n.then(function(e){r(null,e)},r);return n;function s(t){var a=t.$schema;return a&&!o.getSchema(a)?e.call(o,{$ref:a},!0):Promise.resolve()}}},function(e,t,a){"use strict";var i=/^[a-z_$][a-z0-9_$-]*$/i,r=a(176);e.exports={add:function(e,t){var a=this.RULES;if(a.keywords[e])throw new Error("Keyword "+e+" is already defined");if(!i.test(e))throw new Error("Keyword "+e+" is not a valid identifier");if(t){if(t.macro&&void 0!==t.valid)throw new Error('"valid" option cannot be used with macro keywords');var o=t.type;if(Array.isArray(o)){var n,s=o.length;for(n=0;n<s;n++)l(o[n]);for(n=0;n<s;n++)p(e,o[n],t)}else o&&l(o),p(e,o,t);var u=!0===t.$data&&this._opts.$data;if(u&&!t.validate)throw new Error('$data support: "validate" function is not defined');var c=t.metaSchema;c&&(u&&(c={anyOf:[c,{$ref:"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#"}]}),t.validateSchema=this.compile(c,!0))}function p(e,t,i){for(var o,n=0;n<a.length;n++){var s=a[n];if(s.type==t){o=s;break}}o||(o={type:t,rules:[]},a.push(o));var u={keyword:e,definition:i,custom:!0,code:r,implements:i.implements};o.rules.push(u),a.custom[e]=u}function l(e){if(!a.types[e])throw new Error("Unknown type "+e)}return a.keywords[e]=a.all[e]=!0,this},get:function(e){var t=this.RULES.custom[e];return t?t.definition:this.RULES.keywords[e]||!1},remove:function(e){var t=this.RULES;delete t.keywords[e],delete t.all[e],delete t.custom[e];for(var a=0;a<t.length;a++)for(var i=t[a].rules,r=0;r<i.length;r++)if(i[r].keyword==e){i.splice(r,1);break}return this}}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r,o=" ",n=e.level,s=e.dataLevel,u=e.schema[t],c=e.schemaPath+e.util.getProperty(t),p=e.errSchemaPath+"/"+t,l=!e.opts.allErrors,m="data"+(s||""),h="valid"+n,d="errs__"+n,f=e.opts.$data&&u&&u.$data;f?(o+=" var schema"+n+" = "+e.util.getData(u.$data,s,e.dataPathArr)+"; ",r="schema"+n):r=u;var g,v,y,b,k,j="definition"+n,w=this.definition,x="";if(f&&w.$data){k="keywordValidate"+n;var E=w.validateSchema;o+=" var "+j+" = RULES.custom['"+t+"'].definition; var "+k+" = "+j+".validate;"}else{if(!(b=e.useCustomRule(this,u,e.schema,e)))return;r="validate.schema"+c,k=b.code,g=w.compile,v=w.inline,y=w.macro}var S=k+".errors",_="i"+n,R="ruleErr"+n,A=w.async;if(A&&!e.async)throw new Error("async keyword in sync schema");if(v||y||(o+=S+" = null;"),o+="var "+d+" = errors;var "+h+";",f&&w.$data&&(x+="}",o+=" if ("+r+" === undefined) { "+h+" = true; } else { ",E&&(x+="}",o+=" "+h+" = "+j+".validateSchema("+r+"); if ("+h+") { ")),v)w.statements?o+=" "+b.validate+" ":o+=" "+h+" = "+b.validate+"; ";else if(y){var C=e.util.copy(e);x="";C.level++;var q="valid"+C.level;C.schema=b.validate,C.schemaPath="";var O=e.compositeRule;e.compositeRule=C.compositeRule=!0;var P=e.validate(C).replace(/validate\.schema/g,k);e.compositeRule=C.compositeRule=O,o+=" "+P}else{(I=I||[]).push(o),o="",o+="  "+k+".call( ",e.opts.passContext?o+="this":o+="self",g||!1===w.schema?o+=" , "+m+" ":o+=" , "+r+" , "+m+" , validate.schema"+e.schemaPath+" ",o+=" , (dataPath || '')",'""'!=e.errorPath&&(o+=" + "+e.errorPath);var F=s?"data"+(s-1||""):"parentData",z=s?e.dataPathArr[s]:"parentDataProperty",T=o+=" , "+F+" , "+z+" , rootData )  ";o=I.pop(),!1===w.errors?(o+=" "+h+" = ",A&&(o+="await "),o+=T+"; "):o+=A?" var "+(S="customErrors"+n)+" = null; try { "+h+" = await "+T+"; } catch (e) { "+h+" = false; if (e instanceof ValidationError) "+S+" = e.errors; else throw e; } ":" "+S+" = null; "+h+" = "+T+"; "}if(w.modifying&&(o+=" if ("+F+") "+m+" = "+F+"["+z+"];"),o+=""+x,w.valid)l&&(o+=" if (true) { ");else{var I;o+=" if ( ",void 0===w.valid?(o+=" !",o+=y?""+q:""+h):o+=" "+!w.valid+" ",o+=") { ",i=this.keyword,(I=I||[]).push(o),o="",(I=I||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '"+(i||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { keyword: '"+this.keyword+"' } ",!1!==e.opts.messages&&(o+=" , message: 'should pass \""+this.keyword+"\" keyword validation' "),e.opts.verbose&&(o+=" , schema: validate.schema"+c+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+m+" "),o+=" } "):o+=" {} ";var D=o;o=I.pop(),!e.compositeRule&&l?e.async?o+=" throw new ValidationError(["+D+"]); ":o+=" validate.errors = ["+D+"]; return false; ":o+=" var err = "+D+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";var B=o;o=I.pop(),v?w.errors?"full"!=w.errors&&(o+="  for (var "+_+"="+d+"; "+_+"<errors; "+_+"++) { var "+R+" = vErrors["+_+"]; if ("+R+".dataPath === undefined) "+R+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+R+".schemaPath === undefined) { "+R+'.schemaPath = "'+p+'"; } ',e.opts.verbose&&(o+=" "+R+".schema = "+r+"; "+R+".data = "+m+"; "),o+=" } "):!1===w.errors?o+=" "+B+" ":(o+=" if ("+d+" == errors) { "+B+" } else {  for (var "+_+"="+d+"; "+_+"<errors; "+_+"++) { var "+R+" = vErrors["+_+"]; if ("+R+".dataPath === undefined) "+R+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+R+".schemaPath === undefined) { "+R+'.schemaPath = "'+p+'"; } ',e.opts.verbose&&(o+=" "+R+".schema = "+r+"; "+R+".data = "+m+"; "),o+=" } } "):y?(o+="   var err =   ",!1!==e.createErrors?(o+=" { keyword: '"+(i||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { keyword: '"+this.keyword+"' } ",!1!==e.opts.messages&&(o+=" , message: 'should pass \""+this.keyword+"\" keyword validation' "),e.opts.verbose&&(o+=" , schema: validate.schema"+c+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+m+" "),o+=" } "):o+=" {} ",o+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&l&&(e.async?o+=" throw new ValidationError(vErrors); ":o+=" validate.errors = vErrors; return false; ")):!1===w.errors?o+=" "+B+" ":(o+=" if (Array.isArray("+S+")) { if (vErrors === null) vErrors = "+S+"; else vErrors = vErrors.concat("+S+"); errors = vErrors.length;  for (var "+_+"="+d+"; "+_+"<errors; "+_+"++) { var "+R+" = vErrors["+_+"]; if ("+R+".dataPath === undefined) "+R+".dataPath = (dataPath || '') + "+e.errorPath+";  "+R+'.schemaPath = "'+p+'";  ',e.opts.verbose&&(o+=" "+R+".schema = "+r+"; "+R+".data = "+m+"; "),o+=" } } else { "+B+" } "),o+=" } ",l&&(o+=" else { ")}return o}},function(e){e.exports={$schema:"http://json-schema.org/draft-07/schema#",$id:"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON Schema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1}},function(e){e.exports={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0}},function(e,t){function a(e){this.name="HARError",this.message="validation failed",this.errors=e,"function"==typeof Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error("validation failed").stack}a.prototype=Error.prototype,e.exports=a},function(e,t,a){"use strict";e.exports={afterRequest:a(181),beforeRequest:a(182),browser:a(183),cache:a(184),content:a(185),cookie:a(186),creator:a(187),entry:a(188),har:a(189),header:a(190),log:a(191),page:a(192),pageTimings:a(193),postData:a(194),query:a(195),request:a(196),response:a(197),timings:a(198)}},function(e){e.exports={$id:"afterRequest.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["lastAccess","eTag","hitCount"],properties:{expires:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},lastAccess:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},eTag:{type:"string"},hitCount:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"beforeRequest.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["lastAccess","eTag","hitCount"],properties:{expires:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},lastAccess:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},eTag:{type:"string"},hitCount:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"browser.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","version"],properties:{name:{type:"string"},version:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"cache.json#",$schema:"http://json-schema.org/draft-06/schema#",properties:{beforeRequest:{oneOf:[{type:"null"},{$ref:"beforeRequest.json#"}]},afterRequest:{oneOf:[{type:"null"},{$ref:"afterRequest.json#"}]},comment:{type:"string"}}}},function(e){e.exports={$id:"content.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["size","mimeType"],properties:{size:{type:"integer"},compression:{type:"integer"},mimeType:{type:"string"},text:{type:"string"},encoding:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"cookie.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","value"],properties:{name:{type:"string"},value:{type:"string"},path:{type:"string"},domain:{type:"string"},expires:{type:["string","null"],format:"date-time"},httpOnly:{type:"boolean"},secure:{type:"boolean"},comment:{type:"string"}}}},function(e){e.exports={$id:"creator.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","version"],properties:{name:{type:"string"},version:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"entry.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["startedDateTime","time","request","response","cache","timings"],properties:{pageref:{type:"string"},startedDateTime:{type:"string",format:"date-time",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"},time:{type:"number",min:0},request:{$ref:"request.json#"},response:{$ref:"response.json#"},cache:{$ref:"cache.json#"},timings:{$ref:"timings.json#"},serverIPAddress:{type:"string",oneOf:[{format:"ipv4"},{format:"ipv6"}]},connection:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"har.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["log"],properties:{log:{$ref:"log.json#"}}}},function(e){e.exports={$id:"header.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","value"],properties:{name:{type:"string"},value:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"log.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["version","creator","entries"],properties:{version:{type:"string"},creator:{$ref:"creator.json#"},browser:{$ref:"browser.json#"},pages:{type:"array",items:{$ref:"page.json#"}},entries:{type:"array",items:{$ref:"entry.json#"}},comment:{type:"string"}}}},function(e){e.exports={$id:"page.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["startedDateTime","id","title","pageTimings"],properties:{startedDateTime:{type:"string",format:"date-time",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"},id:{type:"string",unique:!0},title:{type:"string"},pageTimings:{$ref:"pageTimings.json#"},comment:{type:"string"}}}},function(e){e.exports={$id:"pageTimings.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",properties:{onContentLoad:{type:"number",min:-1},onLoad:{type:"number",min:-1},comment:{type:"string"}}}},function(e){e.exports={$id:"postData.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["mimeType"],properties:{mimeType:{type:"string"},text:{type:"string"},params:{type:"array",required:["name"],properties:{name:{type:"string"},value:{type:"string"},fileName:{type:"string"},contentType:{type:"string"},comment:{type:"string"}}},comment:{type:"string"}}}},function(e){e.exports={$id:"query.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","value"],properties:{name:{type:"string"},value:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"request.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["method","url","httpVersion","cookies","headers","queryString","headersSize","bodySize"],properties:{method:{type:"string"},url:{type:"string",format:"uri"},httpVersion:{type:"string"},cookies:{type:"array",items:{$ref:"cookie.json#"}},headers:{type:"array",items:{$ref:"header.json#"}},queryString:{type:"array",items:{$ref:"query.json#"}},postData:{$ref:"postData.json#"},headersSize:{type:"integer"},bodySize:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"response.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["status","statusText","httpVersion","cookies","headers","content","redirectURL","headersSize","bodySize"],properties:{status:{type:"integer"},statusText:{type:"string"},httpVersion:{type:"string"},cookies:{type:"array",items:{$ref:"cookie.json#"}},headers:{type:"array",items:{$ref:"header.json#"}},content:{$ref:"content.json#"},redirectURL:{type:"string"},headersSize:{type:"integer"},bodySize:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"timings.json#",$schema:"http://json-schema.org/draft-06/schema#",required:["send","wait","receive"],properties:{dns:{type:"number",min:-1},connect:{type:"number",min:-1},blocked:{type:"number",min:-1},send:{type:"number",min:-1},wait:{type:"number",min:-1},receive:{type:"number",min:-1},ssl:{type:"number",min:-1},comment:{type:"string"}}}},function(e){e.exports={$schema:"http://json-schema.org/draft-06/schema#",$id:"http://json-schema.org/draft-06/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},title:{type:"string"},description:{type:"string"},default:{},examples:{type:"array",items:{}},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:{}},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:{},enum:{type:"array",minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:{}}},function(e,t,a){"use strict";var i=a(44),r=a(48),o=a(37),n=o.md5,s=o.toBase64;function u(e){this.request=e,this.hasAuth=!1,this.sentAuth=!1,this.bearerToken=null,this.user=null,this.pass=null}u.prototype.basic=function(e,t,a){if(("string"!=typeof e||void 0!==t&&"string"!=typeof t)&&this.request.emit("error",new Error("auth() received invalid user or password")),this.user=e,this.pass=t,this.hasAuth=!0,a||void 0===a){var i="Basic "+s(e+":"+(t||""));return this.sentAuth=!0,i}},u.prototype.bearer=function(e,t){if(this.bearerToken=e,this.hasAuth=!0,t||void 0===t){"function"==typeof e&&(e=e());var a="Bearer "+(e||"");return this.sentAuth=!0,a}},u.prototype.digest=function(e,t,a){for(var i={},o=/([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi;;){var s=o.exec(a);if(!s)break;i[s[1]]=s[2]||s[3]}var u=/(^|,)\s*auth\s*($|,)/.test(i.qop)&&"auth",c=u&&"00000001",p=u&&r().replace(/-/g,""),l=function(e,t,a,i,r,o){var s=n(t+":"+a+":"+i);return e&&"md5-sess"===e.toLowerCase()?n(s+":"+r+":"+o):s}(i.algorithm,this.user,i.realm,this.pass,i.nonce,p),m=n(e+":"+t),h=n(u?l+":"+i.nonce+":"+c+":"+p+":"+u+":"+m:l+":"+i.nonce+":"+m),d={username:this.user,realm:i.realm,nonce:i.nonce,uri:t,qop:u,response:h,nc:c,cnonce:p,algorithm:i.algorithm,opaque:i.opaque};for(var f in a=[],d)d[f]&&("qop"===f||"nc"===f||"algorithm"===f?a.push(f+"="+d[f]):a.push(f+'="'+d[f]+'"'));return a="Digest "+a.join(", "),this.sentAuth=!0,a},u.prototype.onRequest=function(e,t,a,i){var r,o=this.request;void 0===i&&void 0===e?this.request.emit("error",new Error("no auth mechanism defined")):r=void 0!==i?this.bearer(i,a):this.basic(e,t,a),r&&o.setHeader("authorization",r)},u.prototype.onResponse=function(e){var t=this.request;if(!this.hasAuth||this.sentAuth)return null;var a=i(e.headers).get("www-authenticate"),r=a&&a.split(" ")[0].toLowerCase();switch(t.debug("reauth",r),r){case"basic":return this.basic(this.user,this.pass,!0);case"bearer":return this.bearer(this.bearerToken,!0);case"digest":return this.digest(t.method,t.path,a)}},t.Auth=u},function(e,t,a){var i=a(2);e.exports=function(){return i.randomBytes(16)}},function(e,t){for(var a=[],i=0;i<256;++i)a[i]=(i+256).toString(16).substr(1);e.exports=function(e,t){var i=t||0,r=a;return[r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]]].join("")}},function(e,t,a){"use strict";var i=a(8),r=a(72),o=a(44),n=a(48),s=a(204),u=a(2),c=a(23).Buffer;function p(e){this.request=e,this.params=null}p.prototype.buildParams=function(e,t,a,i,r,o){var u={};for(var c in e)u["oauth_"+c]=e[c];u.oauth_version||(u.oauth_version="1.0"),u.oauth_timestamp||(u.oauth_timestamp=Math.floor(Date.now()/1e3).toString()),u.oauth_nonce||(u.oauth_nonce=n().replace(/-/g,"")),u.oauth_signature_method||(u.oauth_signature_method="HMAC-SHA1");var p=u.oauth_consumer_secret||u.oauth_private_key;delete u.oauth_consumer_secret,delete u.oauth_private_key;var l=u.oauth_token_secret;delete u.oauth_token_secret;var m=u.oauth_realm;delete u.oauth_realm,delete u.oauth_transport_method;var h=t.protocol+"//"+t.host+t.pathname,d=o.parse([].concat(i,r,o.stringify(u)).join("&"));return u.oauth_signature=s.sign(u.oauth_signature_method,a,h,d,p,l),m&&(u.realm=m),u},p.prototype.buildBodyHash=function(e,t){["HMAC-SHA1","RSA-SHA1"].indexOf(e.signature_method||"HMAC-SHA1")<0&&this.request.emit("error",new Error("oauth: "+e.signature_method+" signature_method not supported with body_hash signing."));var a=u.createHash("sha1");a.update(t||"");var i=a.digest("hex");return c.from(i,"hex").toString("base64")},p.prototype.concatParams=function(e,t,a){a=a||"";var i=Object.keys(e).filter(function(e){return"realm"!==e&&"oauth_signature"!==e}).sort();return e.realm&&i.splice(0,0,"realm"),i.push("oauth_signature"),i.map(function(t){return t+"="+a+s.rfc3986(e[t])+a}).join(t)},p.prototype.onRequest=function(e){this.params=e;var t,a,n=this.request.uri||{},s=this.request.method||"",u=o(this.request.headers),c=this.request.body||"",p=this.request.qsLib||r,l=u.get("content-type")||"",m="application/x-www-form-urlencoded",h=e.transport_method||"header";l.slice(0,m.length)===m&&(l=m,t=c),n.query&&(a=n.query),"body"!==h||"POST"===s&&l===m||this.request.emit("error",new Error("oauth: transport_method of body requires POST and content-type "+m)),t||"boolean"!=typeof e.body_hash||(e.body_hash=this.buildBodyHash(e,this.request.body.toString()));var d=this.buildParams(e,n,s,a,t,p);switch(h){case"header":this.request.setHeader("Authorization","OAuth "+this.concatParams(d,",",'"'));break;case"query":var f=this.request.uri.href+=(a?"&":"?")+this.concatParams(d,"&");this.request.uri=i.parse(f),this.request.path=this.request.uri.path;break;case"body":this.request.body=(t?t+"&":"")+this.concatParams(d,"&");break;default:this.request.emit("error",new Error("oauth: transport_method invalid"))}},t.OAuth=p},function(e,t,a){var i=a(2);function r(e,t,a){return i.createHmac(a,e).update(t).digest("base64")}function o(e){return encodeURIComponent(e).replace(/!/g,"%21").replace(/\*/g,"%2A").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/'/g,"%27")}function n(e,t){return e>t?1:e<t?-1:0}function s(e,t,a){var i=function(e){var t,a,i=[];for(t in e)if(a=e[t],Array.isArray(a))for(var r=0;r<a.length;r++)i.push([t,a[r]]);else if("object"==typeof a)for(var o in a)i.push([t+"["+o+"]",a[o]]);else i.push([t,a]);return i}(a).map(function(e){return[o(e[0]),o(e[1]||"")]}).sort(function(e,t){return n(e[0],t[0])||n(e[1],t[1])}).map(function(e){return e.join("=")}).join("&");return[o(e?e.toUpperCase():"GET"),o(t),o(i)].join("&")}function u(e,t,a,i,n){var u=s(e,t,a);return r([i||"",n||""].map(o).join("&"),u,"sha1")}function c(e,t,a,i,n){var u=s(e,t,a);return r([i||"",n||""].map(o).join("&"),u,"sha256")}function p(e,t,a,r,o){return function(e,t){return i.createSign("RSA-SHA1").update(t).sign(e,"base64")}(r||"",s(e,t,a))}function l(e,t){return[e||"",t||""].map(o).join("&")}t.hmacsign=u,t.hmacsign256=c,t.rsasign=p,t.plaintext=l,t.sign=function(e,t,a,i,r,o){var n,s=1;switch(e){case"RSA-SHA1":n=p;break;case"HMAC-SHA1":n=u;break;case"HMAC-SHA256":n=c;break;case"PLAINTEXT":n=l,s=4;break;default:throw new Error("Signature method not supported: "+e)}return n.apply(null,[].slice.call(arguments,s))},t.rfc3986=o,t.generateBase=s},function(e,t,a){"use strict";var i=a(2);t.calculateMac=function(e,t){var a="hawk.1.header\n"+t.ts+"\n"+t.nonce+"\n"+(t.method||"").toUpperCase()+"\n"+t.resource+"\n"+t.host.toLowerCase()+"\n"+t.port+"\n"+(t.hash||"")+"\n";return t.ext&&(a+=t.ext.replace("\\","\\\\").replace("\n","\\n")),a+="\n",t.app&&(a=a+t.app+"\n"+(t.dlg||"")+"\n"),i.createHmac(e.algorithm,e.key).update(a).digest("base64")},t.header=function(e,a,r){var o=r.timestamp||Math.floor((Date.now()+(r.localtimeOffsetMsec||0))/1e3),n=r.credentials;if(!(n&&n.id&&n.key&&n.algorithm))return"";if(-1===["sha1","sha256"].indexOf(n.algorithm))return"";var s,u,c,p,l,m,h={ts:o,nonce:r.nonce||(s=6,u=6*(s+1),i.randomBytes(Math.ceil(u/8)).toString("base64").replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"").slice(0,s)),method:a,resource:e.pathname+(e.search||""),host:e.hostname,port:e.port||("http:"===e.protocol?80:443),hash:r.hash,ext:r.ext,app:r.app,dlg:r.dlg};h.hash||!r.payload&&""!==r.payload||(h.hash=(c=r.payload,p=n.algorithm,l=r.contentType,(m=i.createHash(p)).update("hawk.1.payload\n"),m.update((l?l.split(";")[0].trim().toLowerCase():"")+"\n"),m.update(c||""),m.update("\n"),m.digest("base64")));var d=t.calculateMac(n,h),f=null!==h.ext&&void 0!==h.ext&&""!==h.ext,g='Hawk id="'+n.id+'", ts="'+h.ts+'", nonce="'+h.nonce+(h.hash?'", hash="'+h.hash:"")+(f?'", ext="'+h.ext.replace(/\\/g,"\\\\").replace(/"/g,'\\"'):"")+'", mac="'+d+'"';return h.app&&(g=g+', app="'+h.app+(h.dlg?'", dlg="'+h.dlg:"")+'"'),g}},function(e,t,a){"use strict";var i=a(48),r=a(64),o=a(71),n=a(23).Buffer;function s(e){this.request=e,this.boundary=i(),this.chunked=!1,this.body=null}s.prototype.isChunked=function(e){var t=this,a=!1,i=e.data||e;return i.forEach||t.request.emit("error",new Error("Argument error, options.multipart.")),void 0!==e.chunked&&(a=e.chunked),"chunked"===t.request.getHeader("transfer-encoding")&&(a=!0),a||i.forEach(function(e){void 0===e.body&&t.request.emit("error",new Error("Body attribute missing in multipart.")),o(e.body)&&(a=!0)}),a},s.prototype.setHeaders=function(e){e&&!this.request.hasHeader("transfer-encoding")&&this.request.setHeader("transfer-encoding","chunked");var t=this.request.getHeader("content-type");t&&-1!==t.indexOf("multipart")?-1!==t.indexOf("boundary")?this.boundary=t.replace(/.*boundary=([^\s;]+).*/,"$1"):this.request.setHeader("content-type",t+"; boundary="+this.boundary):this.request.setHeader("content-type","multipart/related; boundary="+this.boundary)},s.prototype.build=function(e,t){var a=this,i=t?new r:[];function o(e){return"number"==typeof e&&(e=e.toString()),t?i.append(e):i.push(n.from(e))}return a.request.preambleCRLF&&o("\r\n"),e.forEach(function(e){var t="--"+a.boundary+"\r\n";Object.keys(e).forEach(function(a){"body"!==a&&(t+=a+": "+e[a]+"\r\n")}),o(t+="\r\n"),o(e.body),o("\r\n")}),o("--"+a.boundary+"--"),a.request.postambleCRLF&&o("\r\n"),i},s.prototype.onRequest=function(e){var t=this.isChunked(e),a=e.data||e;this.setHeaders(t),this.chunked=t,this.body=this.build(a,t)},t.Multipart=s},function(e,t,a){"use strict";var i=a(8),r=/^https?:/;function o(e){this.request=e,this.followRedirect=!0,this.followRedirects=!0,this.followAllRedirects=!1,this.followOriginalHttpMethod=!1,this.allowRedirect=function(){return!0},this.maxRedirects=10,this.redirects=[],this.redirectsFollowed=0,this.removeRefererHeader=!1}o.prototype.onRequest=function(e){void 0!==e.maxRedirects&&(this.maxRedirects=e.maxRedirects),"function"==typeof e.followRedirect&&(this.allowRedirect=e.followRedirect),void 0!==e.followRedirect&&(this.followRedirects=!!e.followRedirect),void 0!==e.followAllRedirects&&(this.followAllRedirects=e.followAllRedirects),(this.followRedirects||this.followAllRedirects)&&(this.redirects=this.redirects||[]),void 0!==e.removeRefererHeader&&(this.removeRefererHeader=e.removeRefererHeader),void 0!==e.followOriginalHttpMethod&&(this.followOriginalHttpMethod=e.followOriginalHttpMethod)},o.prototype.redirectTo=function(e){var t=this.request,a=null;if(e.statusCode>=300&&e.statusCode<400&&e.caseless.has("location")){var i=e.caseless.get("location");if(t.debug("redirect",i),this.followAllRedirects)a=i;else if(this.followRedirects)switch(t.method){case"PATCH":case"PUT":case"POST":case"DELETE":break;default:a=i}}else if(401===e.statusCode){var r=t._auth.onResponse(e);r&&(t.setHeader("authorization",r),a=t.uri)}return a},o.prototype.onResponse=function(e){var t=this.request,a=this.redirectTo(e);if(!a||!this.allowRedirect.call(t,e))return!1;if(t.debug("redirect to",a),e.resume&&e.resume(),this.redirectsFollowed>=this.maxRedirects)return t.emit("error",new Error("Exceeded maxRedirects. Probably stuck in a redirect loop "+t.uri.href)),!1;this.redirectsFollowed+=1,r.test(a)||(a=i.resolve(t.uri.href,a));var o=t.uri;return t.uri=i.parse(a),t.uri.protocol!==o.protocol&&delete t.agent,this.redirects.push({statusCode:e.statusCode,redirectUri:a}),this.followAllRedirects&&"HEAD"!==t.method&&401!==e.statusCode&&307!==e.statusCode&&(t.method=this.followOriginalHttpMethod?t.method:"GET"),delete t.src,delete t.req,delete t._started,401!==e.statusCode&&307!==e.statusCode&&(delete t.body,delete t._form,t.headers&&(t.removeHeader("host"),t.removeHeader("content-type"),t.removeHeader("content-length"),t.uri.hostname!==t.originalHost.split(":")[0]&&t.removeHeader("authorization"))),this.removeRefererHeader||t.setHeader("referer",o.href),t.emit("redirect"),t.init(),!0},t.Redirect=o},function(e,t,a){"use strict";var i=a(8),r=a(209),o=["accept","accept-charset","accept-encoding","accept-language","accept-ranges","cache-control","content-encoding","content-language","content-location","content-md5","content-range","content-type","connection","date","expect","max-forwards","pragma","referer","te","user-agent","via"],n=["proxy-authorization"];function s(e){this.request=e,this.proxyHeaderWhiteList=o,this.proxyHeaderExclusiveList=[],void 0!==e.tunnel&&(this.tunnelOverride=e.tunnel)}s.prototype.isEnabled=function(){var e=this.request;return void 0!==this.tunnelOverride?this.tunnelOverride:"https:"===e.uri.protocol},s.prototype.setup=function(e){var t=this.request;if(e=e||{},"string"==typeof t.proxy&&(t.proxy=i.parse(t.proxy)),!t.proxy||!t.tunnel)return!1;e.proxyHeaderWhiteList&&(this.proxyHeaderWhiteList=e.proxyHeaderWhiteList),e.proxyHeaderExclusiveList&&(this.proxyHeaderExclusiveList=e.proxyHeaderExclusiveList);var a,o,s,u,c=this.proxyHeaderExclusiveList.concat(n),p=this.proxyHeaderWhiteList.concat(c),l=function(e,t){var a=t.reduce(function(e,t){return e[t.toLowerCase()]=!0,e},{});return Object.keys(e).filter(function(e){return a[e.toLowerCase()]}).reduce(function(t,a){return t[a]=e[a],t},{})}(t.headers,p);l.host=(a=t.uri,o=a.port,s=a.protocol,u=a.hostname+":",u+=o||("https:"===s?"443":"80")),c.forEach(t.removeHeader,t);var m=function(e){var t=function(e,t){return["https:"===e.protocol?"https":"http","https:"===t.protocol?"Https":"Http"].join("Over")}(e.uri,e.proxy);return r[t]}(t),h=function(e,t){var a=e.proxy;return{proxy:{host:a.hostname,port:+a.port,proxyAuth:a.auth,headers:t},headers:e.headers,ca:e.ca,cert:e.cert,key:e.key,passphrase:e.passphrase,pfx:e.pfx,ciphers:e.ciphers,rejectUnauthorized:e.rejectUnauthorized,secureOptions:e.secureOptions,secureProtocol:e.secureProtocol}}(t,l);return t.agent=m(h),!0},s.defaultProxyHeaderWhiteList=o,s.defaultProxyHeaderExclusiveList=n,t.Tunnel=s},function(e,t,a){"use strict";a(36);var i,r=a(63),o=a(18),n=a(19),s=a(210),u=a(21),c=a(1),p=a(23).Buffer;function l(e){var t=this;t.options=e||{},t.proxyOptions=t.options.proxy||{},t.maxSockets=t.options.maxSockets||o.Agent.defaultMaxSockets,t.requests=[],t.sockets=[],t.on("free",function(e,a,i){for(var r=0,o=t.requests.length;r<o;++r){var n=t.requests[r];if(n.host===a&&n.port===i)return t.requests.splice(r,1),void n.request.onSocket(e)}e.destroy(),t.removeSocket(e)})}function m(e,t){var a=this;l.prototype.createSocket.call(a,e,function(i){var o=r.connect(0,h({},a.options,{servername:e.host,socket:i}));a.sockets[a.sockets.indexOf(i)]=o,t(o)})}function h(e){for(var t=1,a=arguments.length;t<a;++t){var i=arguments[t];if("object"==typeof i)for(var r=Object.keys(i),o=0,n=r.length;o<n;++o){var s=r[o];void 0!==i[s]&&(e[s]=i[s])}}return e}t.httpOverHttp=function(e){var t=new l(e);return t.request=o.request,t},t.httpsOverHttp=function(e){var t=new l(e);return t.request=o.request,t.createSocket=m,t.defaultPort=443,t},t.httpOverHttps=function(e){var t=new l(e);return t.request=n.request,t},t.httpsOverHttps=function(e){var t=new l(e);return t.request=n.request,t.createSocket=m,t.defaultPort=443,t},c.inherits(l,s.EventEmitter),l.prototype.addRequest=function(e,t){"string"==typeof t&&(t={host:t,port:arguments[2],path:arguments[3]}),this.sockets.length>=this.maxSockets?this.requests.push({host:t.host,port:t.port,request:e}):this.createConnection({host:t.host,port:t.port,request:e})},l.prototype.createConnection=function(e){var t=this;t.createSocket(e,function(a){function i(){t.emit("free",a,e.host,e.port)}function r(e){t.removeSocket(a),a.removeListener("free",i),a.removeListener("close",r),a.removeListener("agentRemove",r)}a.on("free",i),a.on("close",r),a.on("agentRemove",r),e.request.onSocket(a)})},l.prototype.createSocket=function(e,t){var a=this,r={};a.sockets.push(r);var o=h({},a.proxyOptions,{method:"CONNECT",path:e.host+":"+e.port,agent:!1});o.proxyAuth&&(o.headers=o.headers||{},o.headers["Proxy-Authorization"]="Basic "+p.from(o.proxyAuth).toString("base64")),i("making CONNECT request");var n=a.request(o);function s(o,s,c){if(n.removeAllListeners(),s.removeAllListeners(),200===o.statusCode)u.equal(c.length,0),i("tunneling connection has established"),a.sockets[a.sockets.indexOf(r)]=s,t(s);else{i("tunneling socket could not be established, statusCode=%d",o.statusCode);var p=new Error("tunneling socket could not be established, statusCode="+o.statusCode);p.code="ECONNRESET",e.request.emit("error",p),a.removeSocket(r)}}n.useChunkedEncodingByDefault=!1,n.once("response",function(e){e.upgrade=!0}),n.once("upgrade",function(e,t,a){process.nextTick(function(){s(e,t,a)})}),n.once("connect",s),n.once("error",function(t){n.removeAllListeners(),i("tunneling socket could not be established, cause=%s\n",t.message,t.stack);var o=new Error("tunneling socket could not be established, cause="+t.message);o.code="ECONNRESET",e.request.emit("error",o),a.removeSocket(r)}),n.end()},l.prototype.removeSocket=function(e){var t=this.sockets.indexOf(e);if(-1!==t){this.sockets.splice(t,1);var a=this.requests.shift();a&&this.createConnection(a)}},i=process.env.NODE_DEBUG&&/\btunnel\b/.test(process.env.NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments);"string"==typeof e[0]?e[0]="TUNNEL: "+e[0]:e.unshift("TUNNEL:"),console.error.apply(console,e)}:function(){},t.debug=i},function(e,t){e.exports=require("events")},function(e,t){(function(){var t,a,i,r,o,n;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(e.exports=function(){return(t()-o)/1e6},a=process.hrtime,r=(t=function(){var e;return 1e9*(e=a())[0]+e[1]})(),n=1e9*process.uptime(),o=r-n):Date.now?(e.exports=function(){return Date.now()-i},i=Date.now()):(e.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getProperties=function(e,t){var a={};e&&(e.key&&(a.key=e.key),e.keyFilter&&(a.keyFilter=e.keyFilter),e.permissionLevel&&(a.keyFilter=e.permissionLevel));var i={uri:this.jiraClient.buildURL("/application-properties"),method:"GET",followAllRedirects:!0,qs:a};return this.jiraClient.makeRequest(i,t)},this.setProperty=function(e,t){var a={uri:this.jiraClient.buildURL("/application-properties"),method:"GET",followAllRedirects:!0,body:e.property};return this.jiraClient.makeRequest(a,t,"Property Updated")}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.getAttachment=function(e,t){if(!e.attachmentId)throw new Error(i.NO_ATTACHMENT_ID_ERROR);var a={uri:this.jiraClient.buildURL("/attachment/"+e.attachmentId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteAttachment=function(e,t){if(!e.attachmentId)throw new Error(i.NO_ATTACHMENT_ID_ERROR);var a={uri:this.jiraClient.buildURL("/attachment/"+e.attachmentId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"Attachment Deleted")},this.getGlobalAttachmentMetadata=function(e,t){var a={uri:this.jiraClient.buildURL("/attachment/meta"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.getAudits=function(e,t){var a={uri:this.jiraClient.buildURL("/auditing/record"),json:!0,followAllRedirects:!0,method:"GET",qs:{offset:e.offset,limit:e.limit,filter:e.filter,from:e.from,to:e.to}};return this.jiraClient.makeRequest(a,t)},this.createAudit=function(e,t){if(!e.audit)throw new Error(i.NO_AUDIT_ERROR);var a={uri:this.jiraClient.buildURL("/auditing/record"),json:!0,followAllRedirects:!0,method:"POST",body:e.audit};return this.jiraClient.makeRequest(a,t,"Audit Record Added")}}},function(e,t,a){"use strict";a(14),a(13);e.exports=function(e){this.jiraClient=e,this.logout=function(e){var t={uri:this.jiraClient.buildAuthURL("/session"),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,e),"User logged out."},this.login=function(e,t){var a={uri:this.jiraClient.buildAuthURL("/session"),method:"POST",json:!0,followAllRedirects:!0,body:e};return this.jiraClient.makeRequest(a,t,"User logged in.")},this.currentUser=function(e){var t={uri:this.jiraClient.buildURL("/session"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,e)}}},function(e,t,a){"use strict";var i=a(14),r=a(13),o=a(10);e.exports=function(e){this.jiraClient=e,this.getAvatars=function(e,t){if(!e.avatarType)throw new Error(o.NO_AVATAR_TYPE_ERROR);var a={method:"GET",json:!0,followAllRedirects:!0,uri:this.jiraClient.buildURL("/avatar/"+e.avatarType+"/system")};return this.jiraClient.makeRequest(a,t)},this.createTemporaryAvatar=function(e,t){if(!e.avatarType)throw new Error(o.NO_AVATAR_TYPE_ERROR);var a=i.statSync(e.avatarFilePath).size,n=r.basename(e.avatarFilePath),s={method:"POST",json:!0,followAllRedirects:!0,uri:this.jiraClient.buildURL("/avatar/"+e.avatarType+"/temporary"),headers:{"X-Atlassian-Token":"no-check"},qs:{filename:n,size:a},formData:{file:i.createReadStream(e.avatarFilePath)}};return delete s.body,this.jiraClient.makeRequest(s,t)},this.cropTemporaryAvatar=function(e,t){if(!e.avatarType)throw new Error(o.NO_AVATAR_TYPE_ERROR);var a={method:"POST",json:!0,followAllRedirects:!0,uri:this.jiraClient.buildURL("/avatar/"+e.avatarType+"/temporaryCrop"),headers:{"X-Atlassian-Token":"no-check"},body:e.crop};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllBoards=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board"),method:"GET",json:!0,followAllRedirects:!0,qs:{type:e.type,startAt:e.startAt,name:e.name,projectKeyOrId:e.projectKeyOrId,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.getBoard=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.getIssuesForBoard=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/issue"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,fields:e.fields.join(","),expand:e.expand}};return this.jiraClient.makeRequest(a,t)},this.getSprintsForBoard=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/sprint"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,state:e.state}};return this.jiraClient.makeRequest(a,t)},this.getIssuesForBacklog=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/backlog"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields}};return this.jiraClient.makeRequest(a,t)},this.getBoardConfiguration=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/configuration"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createBoard=function(e,t,a,i,r){var o={uri:this.jiraClient.buildAgileURL("/board"),method:"POST",followAllRedirects:!0,json:!0,body:{name:e,type:t,filterId:a,location:i}};return this.jiraClient.makeRequest(o,r)},this.getProjectsForBoard=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/project"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.getCommentPropertyKeys=function(e,t){var a=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(a,t)},this.setCommentProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_COMMENT_PROPERTY_KEY_ERROR);if(!e.propertyValue)throw new Error(i.NO_COMMENT_PROPERTY_VALUE_ERROR);var a=this.buildRequestOptions(e,"/"+e.propertyKey,"PUT",e.propertyValue);return this.jiraClient.makeRequest(a,t,"Property Edited")},this.getCommentProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_COMMENT_PROPERTY_KEY_ERROR);var a=this.buildRequestOptions(e,"/"+e.propertyKey,"GET");return this.jiraClient.makeRequest(a,t)},this.deleteCommentProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_COMMENT_PROPERTY_KEY_ERROR);var a=this.buildRequestOptions(e,"/"+e.propertyKey,"DELETE");return this.jiraClient.makeRequest(a,t,"Comment property deleted")},this.buildRequestOptions=function(e,t,a,r,o){if(!e.commentId)throw new Error(i.NO_COMMENT_ID);var n="/comment/"+e.commentId+"/properties";return o||(o={}),r||(r={}),e.fields&&(o.fields="",e.fields.forEach(function(e){o.fields+=e+","})),e.expand&&(o.expand="",e.expand.forEach(function(e){o.expand+=e+","})),{uri:this.jiraClient.buildURL(n+t),method:a,body:r,qs:o,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createComponent=function(e,t){var a={uri:this.jiraClient.buildURL("/component"),method:"POST",json:!0,followAllRedirects:!0,body:e.component};return this.jiraClient.makeRequest(a,t)},this.editComponent=function(e,t){var a={uri:this.jiraClient.buildURL("/component/"+e.id),method:"PUT",json:!0,followAllRedirects:!0,body:e.component};return this.jiraClient.makeRequest(a,t)},this.getComponent=function(e,t){var a={uri:this.jiraClient.buildURL("/component/"+e.id),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteComponent=function(e,t){var a={uri:this.jiraClient.buildURL("/component/"+e.id),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"Project Component Deleted")},this.getRelatedIssueCounts=function(e,t){var a={uri:this.jiraClient.buildURL("/component/"+e.id+"/relatedIssueCounts"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.getCustomFieldOption=function(e,t){if(!e.fieldOptionId)throw new Error(i.NO_FIELD_OPTION_ID_ERROR);var a={uri:this.jiraClient.buildURL("/customFieldOption/"+e.fieldOptionId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllDashboards=function(e,t){var a={uri:this.jiraClient.buildURL("/dashboard"),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.getDashboard=function(e,t){var a={uri:this.jiraClient.buildURL("/dashboard/"+e.dashboardId),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllFields=function(e,t){var a={uri:this.jiraClient.buildURL("/field"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createCustomField=function(e,t){var a={uri:this.jiraClient.buildURL("/field"),method:"POST",json:!0,followAllRedirects:!0,body:e.field};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createFilter=function(e,t){var a={uri:this.jiraClient.buildURL("/filter"),method:"POST",json:!0,followAllRedirects:!0,qs:{},body:e.filter};return e.expand&&(a.qs.expand="",e.expand.forEach(function(e){a.qs.expand+=e+","})),this.jiraClient.makeRequest(a,t)},this.getFilter=function(e,t){var a=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(a,t)},this.getFilters=function(e,t){var a={uri:this.jiraClient.buildURL("/filter"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.updateFilter=function(e,t){var a=this.buildRequestOptions(e,"","PUT",e.filter);return this.jiraClient.makeRequest(a,t)},this.deleteFilter=function(e,t){var a=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(a,t,"Filter Deleted")},this.getFilterColumns=function(e,t){var a=this.buildRequestOptions(e,"/columns","GET");return this.jiraClient.makeRequest(a,t)},this.setFilterColumns=function(e,t){var a={columns:e.columns},i=this.buildRequestOptions(e,"/columns","PUT",a);return this.jiraClient.makeRequest(i,t,"Columns Updated")},this.resetFilterColumns=function(e,t){var a=this.buildRequestOptions(e,"/columns","DELETE");return this.jiraClient.makeRequest(a,t,"Columns Reset")},this.addSharePermission=function(e,t){var a=this.buildRequestOptions(e,"/permission","POST",e.permission);return this.jiraClient.makeRequest(a,t,"Share Permission Added")},this.getDefaultShareScore=function(e,t){var a={uri:this.jiraClient.buildURL("/filter/defaultShareScope"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.setDefaultShareScope=function(e,t){var a={uri:this.jiraClient.buildURL("/filter/defaultShareScope"),method:"PUT",json:!0,followAllRedirects:!0,body:{scope:e.scope}};return this.jiraClient.makeRequest(a,t)},this.getFavoriteFilters=function(e,t){var a={uri:this.jiraClient.buildURL("/filter/favourite"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,i,r){var o="/filter/"+e.filterId;return r||(r={}),i||(i={}),e.fields&&(r.fields="",e.fields.forEach(function(e){r.fields+=e+","}),r.fields=r.fields.slice(0,-1)),e.expand&&(r.expand="",e.expand.forEach(function(e){r.expand+=e+","}),r.expand=r.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(o+t),method:a,body:i,qs:r,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createGroup=function(e,t){var a={uri:this.jiraClient.buildURL("/group"),method:"POST",json:!0,followAllRedirects:!0,body:e.group};return this.jiraClient.makeRequest(a,t)},this.getGroup=function(e,t){var a={groupname:e.groupName};e.expand&&(a.expand="",e.expand.forEach(function(e){a.expand+=e+","}));var i={uri:this.jiraClient.buildURL("/group"),method:"GET",json:!0,followAllRedirects:!0,qs:a};return this.jiraClient.makeRequest(i,t)},this.getMembers=function(e,t){var a={groupname:e.groupName,includeInactiveUsers:e.includeInactiveUsers,startAt:e.startAt,maxResults:e.maxResults},i={uri:this.jiraClient.buildURL("/group/member"),method:"GET",json:!0,followAllRedirects:!0,qs:a};return this.jiraClient.makeRequest(i,t)},this.addUserToGroup=function(e,t){var a={uri:this.jiraClient.buildURL("/group/user"),method:"POST",json:!0,followAllRedirects:!0,qs:{groupname:e.groupName},body:{name:e.userName}};return this.jiraClient.makeRequest(a,t)},this.removeUserFromGroup=function(e,t){var a={uri:this.jiraClient.buildURL("/group/user"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{groupname:e.groupName,username:e.userName}};return this.jiraClient.makeRequest(a,t,"User Removed from Group")},this.deleteGroup=function(e,t){var a={uri:this.jiraClient.buildURL("/group"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{groupname:e.groupName,swapGroup:e.swapGroup}};return this.jiraClient.makeRequest(a,t,"Group Deleted")}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.findUsersAndGroups=function(e,t){var a={uri:this.jiraClient.buildURL("/groupuserpicker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,maxResults:e.maxResults,showAvatar:e.showAvatar,fieldId:e.fieldId,projectId:e.projectId,issueTypeId:e.issueTypeId}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.findGroups=function(e,t){var a={uri:this.jiraClient.buildURL("/groups/picker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,exclude:e.exclude,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(10),r=a(14);e.exports=function(e){this.jiraClient=e,this.getIssueEstimation=function(e,t){var a="/issue/"+(e.issueId||e.issueKey)+"/estimation",i={uri:this.jiraClient.buildAgileURL(a),method:"GET",json:!0,followAllRedirects:!0,qs:{boardId:e.boardId,filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(i,t)},this.setIssueEstimation=function(e,t){var a="/issue/"+(e.issueId||e.issueKey)+"/estimation",i={uri:this.jiraClient.buildAgileURL(a),method:"PUT",json:!0,followAllRedirects:!0,body:{value:e.value,filter:e.filter,startAt:e.startAt,maxResults:e.maxResults},qs:{boardId:e.boardId}};return this.jiraClient.makeRequest(i,t)},this.setIssueRanks=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/issue/rank"),method:"PUT",json:!0,followAllRedirects:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.createIssue=function(e,t){var a={uri:this.jiraClient.buildURL("/issue"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.getCreateMetadata=function(e,t){var a={uri:this.jiraClient.buildURL("/issue/createmeta"),method:"GET",followAllRedirects:!0,json:!0,qs:{projectIds:e.projectIds,projectKeys:e.projectKeys,issuetypeIds:e.issuetypeIds,issuetypeNames:e.issuetypeNames,expand:e.expand}};return this.jiraClient.makeRequest(a,t)},this.bulkCreate=function(e,t){var a={uri:this.jiraClient.buildURL("/issue/bulk"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.getIssue=function(e,t){if(e.agile)var a="/issue/"+(e.issueId||e.issueKey),i={uri:this.jiraClient.buildAgileURL(a),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults,expand:e.expand}};else var i=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(i,t)},this.deleteIssue=function(e,t){var a=this.buildRequestOptions(e,"","DELETE",null,{deleteSubtasks:e.deleteSubtasks});return this.jiraClient.makeRequest(a,t,"Issue Deleted")},this.editIssue=function(e,t){if(!e.issue)throw new Error(i.NO_ISSUE_ERROR);var a=this.buildRequestOptions(e,"","PUT",e.issue,e.qs);return this.jiraClient.makeRequest(a,t,"Issue Updated")},this.assignIssue=function(e,t){if(!("string"==typeof e.assignee&&e.assignee.length||null===e.assignee))throw new Error(i.NO_ASSIGNEE_ERROR);var a=this.buildRequestOptions(e,"/assignee","PUT",{name:e.assignee});return this.jiraClient.makeRequest(a,t,"Issue Assigned")},this.getComments=function(e,t){var a=this.buildRequestOptions(e,"/comment","GET");return this.jiraClient.makeRequest(a,t)},this.addComment=function(e,t){var a;return a=e.comment.body?this.buildRequestOptions(e,"/comment","POST",e.comment):this.buildRequestOptions(e,"/comment","POST",{body:e.comment}),this.jiraClient.makeRequest(a,t)},this.getComment=function(e,t){if(!e.commentId)throw new Error(i.NO_COMMENT_ID);var a=this.buildRequestOptions(e,"/comment/"+e.commentId,"GET");return this.jiraClient.makeRequest(a,t)},this.editComment=function(e,t){if(!e.comment)throw new Error(i.NO_COMMENT_ERROR);if(!e.commentId)throw new Error(i.NO_COMMENT_ID);var a=this.buildRequestOptions(e,"/comment/"+e.commentId,"PUT",e.comment);return this.jiraClient.makeRequest(a,t)},this.deleteComment=function(e,t){if(!e.commentId)throw new Error(i.NO_COMMENT_ID);var a=this.buildRequestOptions(e,"/comment/"+e.commentId,"DELETE");return this.jiraClient.makeRequest(a,t,"Comment Deleted")},this.getEditMetadata=function(e,t){var a=this.buildRequestOptions(e,"/editmeta","GET");return this.jiraClient.makeRequest(a,t)},this.sendEmailNotification=function(e,t){if(!e.notification)throw new Error(i.NO_NOTIFICATION_ERROR);var a=this.buildRequestOptions(e,"/notify","POST",e.notification);return this.jiraClient.makeRequest(a,t,"Notifications Sent")},this.getRemoteLinks=function(e,t){var a=this.buildRequestOptions(e,"/remotelink","GET",null,{globalId:e.globalId});return this.jiraClient.makeRequest(a,t)},this.createRemoteLink=function(e,t){var a=this.buildRequestOptions(e,"/remotelink","POST",e.remoteLink);return this.jiraClient.makeRequest(a,t)},this.updateRemoteLink=function(e,t){this.createRemoteLink(e,t)},this.deleteRemoteLink=function(e,t){if(!e.globalId)throw new Error(i.NO_GLOBAL_ID_ERROR);var a=this.buildRequestOptions(e,"/remotelink","DELETE",null,{globalId:e.globalId});return this.jiraClient.makeRequest(a,t,"RemoteLink Deleted")},this.getRemoteLinkById=function(e,t){if(!e.linkId)throw new Error(i.NO_LINK_ID_ERROR);var a=this.buildRequestOptions(e,"/remotelink/"+e.linkId,"GET");return this.jiraClient.makeRequest(a,t)},this.updateRemoteLinkById=function(e,t){if(!e.linkId)throw new Error(i.NO_LINK_ID_ERROR);var a=this.buildRequestOptions(e,"/remotelink/"+e.linkId,"PUT",e.remoteLink);return this.jiraClient.makeRequest(a,t,"RemoteLink Updated")},this.deleteRemoteLinkById=function(e,t){if(!e.linkId)throw new Error(i.NO_LINK_ID_ERROR);var a=this.buildRequestOptions(e,"/remotelink/"+e.linkId,"DELETE");return this.jiraClient.makeRequest(a,t,"RemoteLink Deleted")},this.getTransitions=function(e,t){var a=this.buildRequestOptions(e,"/transitions","GET",null,{transitionId:e.transitionId});return this.jiraClient.makeRequest(a,t)},this.transitionIssue=function(e,t){if(!e.transition)throw new Error(i.NO_TRANSITION_ERROR);var a;return a=e.transition.transition?this.buildRequestOptions(e,"/transitions","POST",e.transition):this.buildRequestOptions(e,"/transitions","POST",e),this.jiraClient.makeRequest(a,t,"Issue Transitioned")},this.unvote=function(e,t){var a=this.buildRequestOptions(e,"/votes","DELETE");return this.jiraClient.makeRequest(a,t,"Vote Removed")},this.vote=function(e,t){var a=this.buildRequestOptions(e,"/votes","POST");return this.jiraClient.makeRequest(a,t,"Vote Added")},this.getVotes=function(e,t){var a=this.buildRequestOptions(e,"/votes","GET");return this.jiraClient.makeRequest(a,t)},this.getWatchers=function(e,t){var a=this.buildRequestOptions(e,"/watchers","GET");return this.jiraClient.makeRequest(a,t)},this.addWatcher=function(e,t){if(!e.watcher)throw new Error(i.NO_WATCHER_ERROR);var a=this.buildRequestOptions(e,"/watchers","POST",e.watcher);return this.jiraClient.makeRequest(a,t,"Watcher Added")},this.removeWatcher=function(e,t){if(!e.watcher)throw new Error(i.NO_WATCHER_ERROR);var a=this.buildRequestOptions(e,"/watchers","DELETE",null,{username:e.watcher});return this.jiraClient.makeRequest(a,t,"Watcher Removed")},this.getWorkLogs=function(e,t){var a=this.buildRequestOptions(e,"/worklog","GET");return this.jiraClient.makeRequest(a,t)},this.addWorkLog=function(e,t){if(!e.worklog)throw new Error(i.NO_WORKLOG_ERROR);var a=this.buildRequestOptions(e,"/worklog","POST",e.worklog,{newEstimate:e.newEstimate,reduceBy:e.reduceBy,adjustEstimate:e.adjustEstimate});return this.jiraClient.makeRequest(a,t,"Worklog Added")},this.getWorkLog=function(e,t){if(!e.worklogId)throw new Error(i.NO_WORKLOG_ID_ERROR);var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId,"GET");return this.jiraClient.makeRequest(a,t)},this.updateWorkLog=function(e,t){if(!e.worklogId)throw new Error(i.NO_WORKLOG_ID_ERROR);if(!e.worklog)throw new Error(i.NO_WORKLOG_ERROR);var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId,"PUT",e.worklog,{newEstimate:e.newEstimate,adjustEstimate:e.adjustEstimate});return this.jiraClient.makeRequest(a,t)},this.deleteWorkLog=function(e,t){if(!e.worklogId)throw new Error(i.NO_WORKLOG_ID_ERROR);var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId,"DELETE",null,{newEstimate:e.newEstimate,increaseBy:e.increaseBy,adjustEstimate:e.adjustEstimate});return this.jiraClient.makeRequest(a,t,"Work Log Deleted")},this.addAttachment=function(e,t){if(!e.filename)throw new Error(i.NO_FILENAME_ERROR);var a=this.buildRequestOptions(e,"/attachments","POST");delete a.body,e.filename.constructor!==Array&&(e.filename=[e.filename]);var o=e.filename.map(function(e){return r.createReadStream(e)});return a.formData={file:o},a.headers={"X-Atlassian-Token":"nocheck"},this.jiraClient.makeRequest(a,t)},this.getProperties=function(e,t){var a=this.buildRequestOptions(e,"/properties","GET");return this.jiraClient.makeRequest(a,t)},this.setProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_PROPERTY_KEY_ERROR);if(!e.propertyValue)throw new Error(i.NO_PROPERTY_VALUE_ERROR);var a=this.buildRequestOptions(e,"/properties/"+e.propertyKey,"PUT",e.propertyValue);return this.jiraClient.makeRequest(a,t,"Property Set")},this.getProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_PROPERTY_KEY_ERROR);var a=this.buildRequestOptions(e,"/properties/"+e.propertyKey,"GET");return this.jiraClient.makeRequest(a,t)},this.deleteProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_PROPERTY_KEY_ERROR);var a=this.buildRequestOptions(e,"/properties/"+e.propertyKey,"DELETE");return this.jiraClient.makeRequest(a,t,"Property Deleted")},this.setWorklogProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_PROPERTY_KEY_ERROR);if(!e.propertyValue)throw new Error(i.NO_PROPERTY_VALUE_ERROR);var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId+"/properties/"+e.propertyKey,"PUT",e.propertyValue);return this.jiraClient.makeRequest(a,t,"Property Set")},this.getWorkLogProperties=function(e,t){var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId+"/properties/","GET");return this.jiraClient.makeRequest(a,t)},this.getWorkLogProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_PROPERTY_KEY_ERROR);var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId+"/properties/"+e.propertyKey,"GET");return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,r,o){if(!e.issueId&&!e.issueKey)throw new Error(i.NO_ISSUE_IDENTIFIER);var n=e.issueId||e.issueKey,s="/issue/"+n;return o||(o={}),r||(r={}),e.fields&&(o.fields="",e.fields.forEach(function(e){o.fields+=e+","})),e.expand&&(o.expand="",e.expand.forEach(function(e){o.expand+=e+","})),e.properties&&(o.properties="",e.properties.forEach(function(e){o.properties+=e+","})),{uri:this.jiraClient.buildURL(s+t),method:a,body:r,qs:o,followAllRedirects:!0,json:!0}},this.getIssuePicker=function(e,t){var a={uri:this.jiraClient.buildURL("/issue/picker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,currentJQL:e.currentJQL,currentIssueKey:e.currentIssueKey,currentProjectId:e.currentProjectId,showSubTasks:e.showSubTasks,showSubTaskParent:e.showSubTaskParent}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.createIssueLink=function(e,t){if(!e.issueLink)throw new Error(i.NO_ISSUE_LINK_ERROR);var a={method:"POST",uri:this.jiraClient.buildURL("/issueLink"),json:!0,followAllRedirects:!0,body:e.issueLink};return this.jiraClient.makeRequest(a,t,"Issue Link Created")},this.getIssueLink=function(e,t){if(!e.linkId)throw new Error(i.NO_ISSUE_LINK_ID_ERROR);var a={method:"GET",uri:this.jiraClient.buildURL("/issueLink/"+e.linkId),json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteIssueLink=function(e,t){if(!e.linkId)throw new Error(i.NO_ISSUE_LINK_ID_ERROR);var a={method:"DELETE",uri:this.jiraClient.buildURL("/issueLink/"+e.linkId),json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"Issue Link Deleted")}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.getAvailableTypes=function(e,t){var a={uri:this.jiraClient.buildURL("/issueLinkType"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createIssueLinkType=function(e,t){var a={uri:this.jiraClient.buildURL("/issueLinkType"),method:"POST",json:!0,followAllRedirects:!0,body:e.linkType};return this.jiraClient.makeRequest(a,t)},this.getIssueLinkType=function(e,t){if(!e.issueLinkTypeId)throw new Error(i.NO_ISSUE_LINK_TYPE_ID);var a={uri:this.jiraClient.buildURL("/issueLinkType/"+e.issueLinkTypeId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteIssueLinkType=function(e,t){if(!e.issueLinkTypeId)throw new Error(i.NO_ISSUE_LINK_TYPE_ID);var a={uri:this.jiraClient.buildURL("/issueLinkType/"+e.issueLinkTypeId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"IssueLink type deleted.")},this.editIssueLinkType=function(e,t){if(!e.issueLinkTypeId)throw new Error(i.NO_ISSUE_LINK_TYPE_ID);var a={uri:this.jiraClient.buildURL("/issueLinkType/"+e.issueLinkTypeId),method:"PUT",json:!0,followAllRedirects:!0,body:e.issueLinkType};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllIssueTypes=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createIssueType=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype"),method:"POST",json:!0,followAllRedirects:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.getIssueType=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteIssueType=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{alternativeIssueTypeId:e.alternativeIssueTypeId}};return this.jiraClient.makeRequest(a,t)},this.updateIssueType=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId),method:"PUT",json:!0,followAllRedirects:!0,body:e.issueType};return this.jiraClient.makeRequest(a,t)},this.getAlternativeIssueTypes=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId+"/alternatives"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAutoCompleteData=function(e,t){var a={uri:this.jiraClient.buildURL("/jql/autocompletedata"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllLicenseRoles=function(e,t){var a={uri:this.jiraClient.buildURL("/licenserole"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getLicenseRole=function(e,t){var a={uri:this.jiraClient.buildURL("/licenserole/"+e.roleId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.editLicenseRole=function(e,t){var a={uri:this.jiraClient.buildURL("/licenserole/"+e.roleId),method:"PUT",json:!0,followAllRedirects:!0,body:e.role};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.validateLicense=function(e,t){var a={uri:this.jiraClient.buildURL("/licenseValidator"),method:"POST",json:!0,followAllRedirects:!0,body:e.license};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getMyPermissions=function(e,t){var a={uri:this.jiraClient.buildURL("/mypermissions"),method:"GET",json:!0,followAllRedirects:!0,qs:{issueId:e.issueId,issueKey:e.issueKey,projectId:e.projectId,projectKey:e.projectKey}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getPreference=function(e,t){var a={uri:this.jiraClient.buildURL("/mypreferences"),method:"GET",json:!0,followAllRedirects:!0,qs:{key:e.key}};return this.jiraClient.makeRequest(a,t)},this.editPreference=function(e,t){var a={uri:this.jiraClient.buildURL("/mypreferences"),method:"PUT",json:!0,followAllRedirects:!0,qs:{key:e.key},body:e.value};return this.jiraClient.makeRequest(a,t)},this.deletePreference=function(e,t){var a={uri:this.jiraClient.buildURL("/mypreferences"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{key:e.key}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getMyself=function(e,t){var a={uri:this.jiraClient.buildURL("/myself"),method:"GET",json:!0,followAllRedirects:!0,debug:e};return this.jiraClient.makeRequest(a,t)},this.editMyself=function(e,t){var a={uri:this.jiraClient.buildURL("/myself"),method:"PUT",json:!0,followAllRedirects:!0,body:e.newData};return this.jiraClient.makeRequest(a,t)},this.changePassword=function(e,t){var a={uri:this.jiraClient.buildURL("/myself/password"),method:"PUT",json:!0,followAllRedirects:!0,body:e.newData};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){t.OAuth=a(83).OAuth,t.OAuthEcho=a(83).OAuthEcho,t.OAuth2=a(239).OAuth2},function(e,t){var a="=";function i(e,t){var a=n(e);a.length>16&&(a=u(a,8*e.length));for(var i=Array(16),r=Array(16),o=0;o<16;o++)i[o]=909522486^a[o],r[o]=1549556828^a[o];var c=u(i.concat(n(t)),512+8*t.length);return s(u(r.concat(c),672))}function r(e){for(var t="",i=e.length,r=0;r<i;r+=3)for(var o=e.charCodeAt(r)<<16|(r+1<i?e.charCodeAt(r+1)<<8:0)|(r+2<i?e.charCodeAt(r+2):0),n=0;n<4;n++)8*r+6*n>8*e.length?t+=a:t+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(o>>>6*(3-n)&63);return t}function o(e){for(var t,a,i="",r=-1;++r<e.length;)t=e.charCodeAt(r),a=r+1<e.length?e.charCodeAt(r+1):0,55296<=t&&t<=56319&&56320<=a&&a<=57343&&(t=65536+((1023&t)<<10)+(1023&a),r++),t<=127?i+=String.fromCharCode(t):t<=2047?i+=String.fromCharCode(192|t>>>6&31,128|63&t):t<=65535?i+=String.fromCharCode(224|t>>>12&15,128|t>>>6&63,128|63&t):t<=2097151&&(i+=String.fromCharCode(240|t>>>18&7,128|t>>>12&63,128|t>>>6&63,128|63&t));return i}function n(e){for(var t=Array(e.length>>2),a=0;a<t.length;a++)t[a]=0;for(a=0;a<8*e.length;a+=8)t[a>>5]|=(255&e.charCodeAt(a/8))<<24-a%32;return t}function s(e){for(var t="",a=0;a<32*e.length;a+=8)t+=String.fromCharCode(e[a>>5]>>>24-a%32&255);return t}function u(e,t){e[t>>5]|=128<<24-t%32,e[15+(t+64>>9<<4)]=t;for(var a=Array(80),i=1732584193,r=-271733879,o=-1732584194,n=271733878,s=-1009589776,u=0;u<e.length;u+=16){for(var h=i,d=r,f=o,g=n,v=s,y=0;y<80;y++){a[y]=y<16?e[u+y]:m(a[y-3]^a[y-8]^a[y-14]^a[y-16],1);var b=l(l(m(i,5),c(y,r,o,n)),l(l(s,a[y]),p(y)));s=n,n=o,o=m(r,30),r=i,i=b}i=l(i,h),r=l(r,d),o=l(o,f),n=l(n,g),s=l(s,v)}return Array(i,r,o,n,s)}function c(e,t,a,i){return e<20?t&a|~t&i:e<40?t^a^i:e<60?t&a|t&i|a&i:t^a^i}function p(e){return e<20?1518500249:e<40?1859775393:e<60?-1894007588:-899497514}function l(e,t){var a=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(a>>16)<<16|65535&a}function m(e,t){return e<<t|e>>>32-t}t.HMACSHA1=function(e,t){return a=t,r(i(o(e),o(a)));var a}},function(e,t,a){var i=a(24),r=(a(2),a(19)),o=a(18),n=a(8),s=a(84);t.OAuth2=function(e,t,a,i,r,o){this._clientId=e,this._clientSecret=t,this._baseSite=a,this._authorizeUrl=i||"/oauth/authorize",this._accessTokenUrl=r||"/oauth/access_token",this._accessTokenName="access_token",this._authMethod="Bearer",this._customHeaders=o||{},this._useAuthorizationHeaderForGET=!1,this._agent=void 0},t.OAuth2.prototype.setAgent=function(e){this._agent=e},t.OAuth2.prototype.setAccessTokenName=function(e){this._accessTokenName=e},t.OAuth2.prototype.setAuthMethod=function(e){this._authMethod=e},t.OAuth2.prototype.useAuthorizationHeaderforGET=function(e){this._useAuthorizationHeaderForGET=e},t.OAuth2.prototype._getAccessTokenUrl=function(){return this._baseSite+this._accessTokenUrl},t.OAuth2.prototype.buildAuthHeader=function(e){return this._authMethod+" "+e},t.OAuth2.prototype._chooseHttpLibrary=function(e){var t=r;return"https:"!=e.protocol&&(t=o),t},t.OAuth2.prototype._request=function(e,t,a,r,o,s){var u=n.parse(t,!0);"https:"!=u.protocol||u.port||(u.port=443);var c=this._chooseHttpLibrary(u),p={};for(var l in this._customHeaders)p[l]=this._customHeaders[l];if(a)for(var l in a)p[l]=a[l];p.Host=u.host,p["User-Agent"]||(p["User-Agent"]="Node-oauth"),r?Buffer.isBuffer(r)?p["Content-Length"]=r.length:p["Content-Length"]=Buffer.byteLength(r):p["Content-length"]=0,!o||"Authorization"in p||(u.query||(u.query={}),u.query[this._accessTokenName]=o);var m=i.stringify(u.query);m&&(m="?"+m);var h={host:u.hostname,port:u.port,path:u.pathname+m,method:e,headers:p};this._executeRequest(c,h,r,s)},t.OAuth2.prototype._executeRequest=function(e,t,a,i){var r=s.isAnEarlyCloseHost(t.host),o=!1;function n(e,t){o||(o=!0,e.statusCode>=200&&e.statusCode<=299||301==e.statusCode||302==e.statusCode?i(null,t,e):i({statusCode:e.statusCode,data:t}))}var u="";this._agent&&(t.agent=this._agent);var c=e.request(t);c.on("response",function(e){e.on("data",function(e){u+=e}),e.on("close",function(t){r&&n(e,u)}),e.addListener("end",function(){n(e,u)})}),c.on("error",function(e){o=!0,i(e)}),"POST"!=t.method&&"PUT"!=t.method||!a||c.write(a),c.end()},t.OAuth2.prototype.getAuthorizeUrl=function(e){return(e=e||{}).client_id=this._clientId,this._baseSite+this._authorizeUrl+"?"+i.stringify(e)},t.OAuth2.prototype.getOAuthAccessToken=function(e,t,a){(t=t||{}).client_id=this._clientId,t.client_secret=this._clientSecret,t["refresh_token"===t.grant_type?"refresh_token":"code"]=e;var r=i.stringify(t);this._request("POST",this._getAccessTokenUrl(),{"Content-Type":"application/x-www-form-urlencoded"},r,null,function(e,t,r){if(e)a(e);else{var o;try{o=JSON.parse(t)}catch(e){o=i.parse(t)}var n=o.access_token,s=o.refresh_token;delete o.refresh_token,a(null,n,s,o)}})},t.OAuth2.prototype.getProtectedResource=function(e,t,a){this._request("GET",e,{},"",t,a)},t.OAuth2.prototype.get=function(e,t,a){if(this._useAuthorizationHeaderForGET){var i={Authorization:this.buildAuthHeader(t)};t=null}else i={};this._request("GET",e,i,"",t,a)}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getPasswordPolicy=function(e,t){var a={uri:this.jiraClient.buildURL("/password/policy"),method:"GET",json:!0,followAllRedirects:!0,qs:{hasOldPassword:e.hasOldPassword}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllPermissions=function(e,t){var a={uri:this.jiraClient.buildURL("/permissions"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllPermissionSchemes=function(e,t){var a=e.expand;e.expand&&e.expand instanceof Array&&(a=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme"),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:a}};return this.jiraClient.makeRequest(i,t)},this.createPermissionScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/permissionscheme"),method:"POST",json:!0,followAllRedirects:!0,body:e.scheme};return this.jiraClient.makeRequest(a,t)},this.getPermissionScheme=function(e,t){var a=e.expand;e.expand&&e.expand instanceof Array&&(a=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:a}};return this.jiraClient.makeRequest(i,t)},this.editPermissionScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId),method:"PUT",json:!0,followAllRedirects:!0,body:e.scheme};return this.jiraClient.makeRequest(a,t)},this.deletePermissionScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"Permission Scheme removed.")},this.getPermissionSchemeGrants=function(e,t){var a=e.expand;e.expand&&e.expand instanceof Array&&(a=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission"),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:a}};return this.jiraClient.makeRequest(i,t)},this.createPermissionGrantInScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission"),method:"POST",json:!0,followAllRedirects:!0,body:e.grant};return this.jiraClient.makeRequest(a,t)},this.deletePermissionGrantFromScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission/"+e.permissionId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"Permission removed from scheme.")},this.getPermissionSchemeGrantById=function(e,t){var a=e.expand;e.expand&&e.expand instanceof Array&&(a=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission/"+e.permissionId),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:a}};return this.jiraClient.makeRequest(i,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllPriorities=function(e,t){var a={uri:this.jiraClient.buildURL("/priority"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getPriority=function(e,t){var a={uri:this.jiraClient.buildURL("/priority/"+e.priorityId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllProjects=function(e,t){var a=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(a,t)},this.deleteProject=function(e,t){var a=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(a,t,"Project Deleted")},this.createProject=function(e,t){var a={uri:this.jiraClient.buildURL("/project"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.getProjectProperties=function(e,t){var a=this.buildRequestOptions(e,"/properties","GET");return this.jiraClient.makeRequest(a,t)},this.getProject=function(e,t){var a=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(a,t)},this.getComponents=function(e,t){var a=this.buildRequestOptions(e,"/components","GET");return this.jiraClient.makeRequest(a,t)},this.getStatuses=function(e,t){var a=this.buildRequestOptions(e,"/statuses","GET");return this.jiraClient.makeRequest(a,t)},this.getVersions=function(e,t){var a=this.buildRequestOptions(e,"/versions","GET");return this.jiraClient.makeRequest(a,t)},this.getRoles=function(e,t){var a=this.buildRequestOptions(e,"/role","GET");return this.jiraClient.makeRequest(a,t)},this.getRole=function(e,t){var a=this.buildRequestOptions(e,"/role/"+e.roleId,"GET");return this.jiraClient.makeRequest(a,t)},this.updateRole=function(e,t){var a=this.buildRequestOptions(e,"/role/"+e.roleId,"PUT",e.newRole);return this.jiraClient.makeRequest(a,t)},this.addToRole=function(e,t){var a=this.buildRequestOptions(e,"/role/"+e.roleId,"POST",e.newRole);return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,i,r){var o=(e=e||{}).projectIdOrKey?"/project/"+e.projectIdOrKey:"/project";return r||(r={}),i||(i={}),e.fields&&(r.fields="",e.fields.forEach(function(e){r.fields+=e+","}),r.fields=r.fields.slice(0,-1)),e.expand&&(r.expand="",e.expand.forEach(function(e){r.expand+=e+","}),r.expand=r.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(o+t),method:a,body:i,qs:r,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllProjectCategories=function(e,t){var a={uri:this.jiraClient.buildURL("/projectCategory"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getProjectCategory=function(e,t){var a={uri:this.jiraClient.buildURL("/projectCategory/"+e.projectCategoryId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.validateProjectKey=function(e,t){var a={uri:this.jiraClient.buildURL("/projectvalidate/key"),method:"GET",json:!0,followAllRedirects:!0,qs:{key:e.projectKey}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.doReindex=function(e,t){var a={uri:this.jiraClient.buildURL("/reindex"),method:"POST",json:!0,followAllRedirects:!0,qs:{type:e.type,indexComments:e.indexComments,indexChangeHistory:e.indexChangeHistory}};return this.jiraClient.makeRequest(a,t)},this.getReindex=function(e,t){var a={uri:this.jiraClient.buildURL("/reindex"),method:"GET",json:!0,followAllRedirects:!0,qs:{taskId:e.taskId}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllResolutions=function(e,t){var a={uri:this.jiraClient.buildURL("/resolution"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getResolution=function(e,t){var a={uri:this.jiraClient.buildURL("/resolution/"+e.resolutionId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAll=function(e,t){var a={uri:this.jiraClient.buildURL("/role"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createRole=function(e,t){var a={uri:this.jiraClient.buildURL("/role"),method:"POST",json:!0,followAllRedirects:!0,body:e.role};return this.jiraClient.makeRequest(a,t)},this.getRoleById=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.updateRole=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId),method:"PUT",json:!0,followAllRedirects:!0,body:e.role};return this.jiraClient.makeRequest(a,t)},this.deleteRole=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{swap:e.swap}};return this.jiraClient.makeRequest(a,t)},this.getActors=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId+"/actors"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.addActors=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId+"/actors"),method:"POST",json:!0,followAllRedirects:!0,body:{user:e.user,group:e.group}};return this.jiraClient.makeRequest(a,t)},this.removeActor=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId+"/actors"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{user:e.user,group:e.group}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAvailableFields=function(e,t){var a=this.buildRequestOptions(e,"/availableFields","GET");return this.jiraClient.makeRequest(a,t)},this.getTabs=function(e,t){var a=this.buildRequestOptions(e,"/tabs","GET");return this.jiraClient.makeRequest(a,t)},this.createTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs","POST",{name:e.name});return this.jiraClient.makeRequest(a,t)},this.renameTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId,"PUT",{name:e.name});return this.jiraClient.makeRequest(a,t)},this.deleteTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId,"DELETE");return this.jiraClient.makeRequest(a,t,"Tab Deleted")},this.addFieldToTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields","POST",e.fieldId);return this.jiraClient.makeRequest(a,t)},this.getFieldsInTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields","GET");return this.jiraClient.makeRequest(a,t)},this.removeFieldFromTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields/"+e.fieldId,"DELETE");return this.jiraClient.makeRequest(a,t,"Field Removed From Tab")},this.moveFieldOnTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields/"+e.fieldId+"/move","POST",{position:e.newPosition});return this.jiraClient.makeRequest(a,t,"Field Moved")},this.moveTabPosition=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/move/"+e.newPosition,"POST");return this.jiraClient.makeRequest(a,t,"Tab Moved")},this.addFieldToDefaultTab=function(e,t){var a={uri:this.jiraClient.buildURL("/screens/addToDefault/"+e.fieldId),method:"POST",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,i,r){var o="/screens/"+e.screenId;return r||(r={}),i||(i={}),e.fields&&(r.fields="",e.fields.forEach(function(e){r.fields+=e+","}),r.fields=r.fields.slice(0,-1)),e.expand&&(r.expand="",e.expand.forEach(function(e){r.expand+=e+","}),r.expand=r.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(o+t),method:a,body:i,qs:r,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.search=function(e,t){e.method=e.method||"POST";var a={uri:this.jiraClient.buildURL("/search"),method:e.method,json:!0,followAllRedirects:!0,timeout:e.timeout||1e4},i={jql:e.jql,startAt:e.startAt,maxResults:e.maxResults,validateQuery:e.validateQuery,fields:e.fields,expand:e.expand,properties:e.properties};return"POST"===e.method?a.body=i:a.qs=i,this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getSecurityLevel=function(e,t){var a={uri:this.jiraClient.buildURL("/securitylevel/"+e.securityLevelId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getServerInfo=function(e,t){var a={uri:this.jiraClient.buildURL("/serverInfo"),method:"GET",json:!0,followAllRedirects:!0,qs:{doHealthCheck:e.doHealthCheck}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.setBaseUrl=function(e,t){var a={uri:this.jiraClient.buildURL("/settings/baseUrl"),method:"PUT",json:!0,followAllRedirects:!0,body:e.newUrl};return this.jiraClient.makeRequest(a,t)},this.getIssueNavColumns=function(e,t){var a={uri:this.jiraClient.buildURL("/settings/columns"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createSprint=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/sprint"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.getSprint=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/sprint/"+e.sprintId),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.updateSprint=function(e,t){var a=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+a),method:"PUT",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,t)},this.partiallyUpdateSprint=function(e,t){var a=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+a),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,t)},this.deleteSprint=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/sprint/"+e.sprintId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.getSprintIssues=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/sprint/"+e.sprintId+"/issue"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields,expand:e.expand}};return this.jiraClient.makeRequest(a,t)},this.moveSprintIssues=function(e,t){var a=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+a+"/issue"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,t)},this.swapSprint=function(e,t){var a=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+a+"/swap"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllStatuses=function(e,t){var a={uri:this.jiraClient.buildURL("/status"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getStatus=function(e,t){var a={uri:this.jiraClient.buildURL("/status/"+e.statusId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllStatusCategories=function(e,t){var a={uri:this.jiraClient.buildURL("/statuscategory"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getStatusCategory=function(e,t){var a={uri:this.jiraClient.buildURL("/statuscategory/"+e.statusCategoryIdOrKey),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(14),r=a(13);e.exports=function(e){this.jiraClient=e,this.getUser=function(e,t){var a={uri:this.jiraClient.buildURL("/user"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey,expand:e.expand}};return e.expand&&(a.qs.expand="",e.expand.forEach(function(e){a.qs.expand+=e+","})),this.jiraClient.makeRequest(a,t)},this.deleteUser=function(e,t){var a={uri:this.jiraClient.buildURL("/user"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey}};return this.jiraClient.makeRequest(a,t,"User removed.")},this.createUser=function(e,t){var a={uri:this.jiraClient.buildURL("/user"),method:"POST",json:!0,followAllRedirects:!0,body:e.user};return this.jiraClient.makeRequest(a,t)},this.editUser=function(e,t){var a={uri:this.jiraClient.buildURL("/user"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey},body:e.user};return this.jiraClient.makeRequest(a,t)},this.multiProjectSearchAssignable=function(e,t){var a="";e.projectKeys&&(e.projectKeys.forEach(function(e){a+=e+","}),a=a.slice(0,-1));var i={uri:this.jiraClient.buildURL("/user/assignable/multiProjectSearch"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,projectKeys:a,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(i,t)},this.searchAssignable=function(e,t){var a={uri:this.jiraClient.buildURL("/user/assignable/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,project:e.project,issueKey:e.issueKey,startAt:e.startAt,maxResults:e.maxResults,actionDescriptorId:e.actionDescriptorId}};return this.jiraClient.makeRequest(a,t)},this.createTemporaryAvatar=function(e,t){var a=r.extname(e.filepath).slice(1),o=r.basename(e.filepath),n=i.statSync(e.filepath).size;a="jpg"==a?"jpeg":a;var s={uri:this.jiraClient.buildURL("/user/avatar/temporary"),method:"POST",followAllRedirects:!0,qs:{username:e.username,filename:o,size:n},body:i.readFileSync(e.filepath),headers:{"X-Atlassian-Token":"no-check","Content-Type":"image/"+a}};return this.jiraClient.makeRequest(s,t)},this.convertTemporaryAvatar=function(e,t){var a={uri:this.jiraClient.buildURL("/user/avatar/"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username},body:{id:e.avatarId},headers:{"X-Atlassian-Token":"no-check"}};return this.jiraClient.makeRequest(a,t,"Avatar Converted")},this.deleteAvatar=function(e,t){var a={uri:this.jiraClient.buildURL("/user/avatar/"+e.avatarId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(a,t,"Avatar Deleted")},this.getAvatars=function(e,t){var a={uri:this.jiraClient.buildURL("/user/avatars"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(a,t)},this.getDefaultColumns=function(e,t){var a={uri:this.jiraClient.buildURL("/user/columns"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(a,t)},this.setDefaultColumns=function(e,t){var a={uri:this.jiraClient.buildURL("/user/columns"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username},body:{columns:e.columns}};return this.jiraClient.makeRequest(a,t,"Default Columns Set")},this.resetDefaultColumns=function(e,t){var a={uri:this.jiraClient.buildURL("/user/columns"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(a,t,"Default Columns Reset")},this.changePassword=function(e,t){var a={uri:this.jiraClient.buildURL("/user/password"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey},body:{password:e.password}};return this.jiraClient.makeRequest(a,t,"Password Changed")},this.searchPermissions=function(e,t){var a="";e.permissions&&(e.permissions.forEach(function(e){a+=e+","}),a=a.slice(0,-1));var i={uri:this.jiraClient.buildURL("/user/permission/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,permissions:a,issueKey:e.issueKey,projectKey:e.projectKey,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(i,t)},this.searchPicker=function(e,t){var a={uri:this.jiraClient.buildURL("/user/picker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,maxResults:e.maxResults,showAvatar:e.showAvatar,exclude:e.exclude}};return this.jiraClient.makeRequest(a,t)},this.search=function(e,t){var a={uri:this.jiraClient.buildURL("/user/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,maxResults:e.maxResults,startAt:e.startAt,includeActive:e.includeActive,includeInactive:e.includeInactive}};return this.jiraClient.makeRequest(a,t)},this.viewIssueSearch=function(e,t){var a={uri:this.jiraClient.buildURL("/user/viewissue/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,issueKey:e.issueKey,projectKey:e.projectKey,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createVersion=function(e,t){var a={uri:this.jiraClient.buildURL("/version"),method:"POST",json:!0,followAllRedirects:!0,body:e.version};return this.jiraClient.makeRequest(a,t)},this.moveVersion=function(e,t){var a=this.buildRequestOptions(e,"/move","POST",{position:e.position,after:e.after});return this.jiraClient.makeRequest(a,t)},this.getAllVersions=function(e,t){var a={uri:this.jiraClient.buildAgileURL(`/board/${e.boardId}/version`),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.getVersion=function(e,t){var a=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(a,t)},this.editVersion=function(e,t){var a=this.buildRequestOptions(e,"","PUT",e.version);return this.jiraClient.makeRequest(a,t)},this.getRelatedIssueCounts=function(e,t){var a=this.buildRequestOptions(e,"/relatedIssueCounts","GET");return this.jiraClient.makeRequest(a,t)},this.getUnresolvedIssueCount=function(e,t){var a=this.buildRequestOptions(e,"/unresolvedIssueCount","GET");return this.jiraClient.makeRequest(a,t)},this.getRemoteLinks=function(e,t){var a=this.buildRequestOptions(e,"/remotelink","GET");return this.jiraClient.makeRequest(a,t)},this.createRemoteLink=function(e,t){var a=this.buildRequestOptions(e,"/remotelink","POST",e.remoteLink);return this.jiraClient.makeRequest(a,t,"Remotelink Created")},this.getRemoteLink=function(e,t){var a=this.buildRequestOptions(e,"/remotelink/"+e.remoteLinkId,"GET");return this.jiraClient.makeRequest(a,t)},this.deleteRemoteLink=function(e,t){var a=this.buildRequestOptions(e,"/remotelink/"+e.remoteLinkId,"DELETE");return this.jiraClient.makeRequest(a,t,"Remote Link Deleted")},this.deleteVersion=function(e,t){var a=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(a,t,"Version Deleted")},this.deleteAllRemoteLinks=function(e,t){var a=this.buildRequestOptions(e,"/remotelink","DELETE");return this.jiraClient.makeRequest(a,t,"Remote Links Deleted")},this.getGlobalRemoteLink=function(e,t){var a={uri:this.jiraClient.buildURL("/version/remotelink"),method:"GET",json:!0,followAllRedirects:!0,qs:{globalId:e.globalId}};return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,i,r){var o="/version/"+e.versionId;return r||(r={}),i||(i={}),e.fields&&(r.fields="",e.fields.forEach(function(e){r.fields+=e+","}),r.fields=r.fields.slice(0,-1)),e.expand&&(r.expand="",e.expand.forEach(function(e){r.expand+=e+","}),r.expand=r.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(o+t),method:a,body:i,qs:r,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllWebhooks=function(e,t){var a={uri:this.jiraClient.buildWebhookURL("/webhook"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getWebhook=function(e,t){var a={uri:this.jiraClient.buildWebhookURL("/webhook/"+e.webhookId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createWebhook=function(e,t){var a={uri:this.jiraClient.buildWebhookURL("/webhook"),method:"POST",json:!0,body:e,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteWebhook=function(e,t){var a={uri:this.jiraClient.buildWebhookURL("/webhook/"+e.webhookId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getWorkflows=function(e,t){var a={};e&&"object"==typeof e&&e.hasOwnProperty("workflowName")&&(a.workflowName=e.workflowName);var i={uri:this.jiraClient.buildURL("/workflow"),method:"GET",json:!0,followAllRedirects:!0,qs:a};return this.jiraClient.makeRequest(i,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createWorkflowScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/workflowscheme"),method:"POST",json:!0,followAllRedirects:!0,body:e.workflowScheme};return this.jiraClient.makeRequest(a,t)},this.editWorkflowScheme=function(e,t){var a=this.buildRequestOptions(e,"","PUT",e.workflowScheme);return this.jiraClient.makeRequest(a,t)},this.getWorkflowScheme=function(e,t){var a=this.buildRequestOptions(e,"","GET",null,{returnDraftIfExists:e.returnDraftIfExists});return this.jiraClient.makeRequest(a,t)},this.deleteWorkflowScheme=function(e,t){var a=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(a,t,"Workflow Scheme Deleted")},this.createDraft=function(e,t){var a=this.buildRequestOptions(e,"/createdraft","POST");return this.jiraClient.makeRequest(a,t)},this.getDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/default","GET",null,{returnDraftIfExists:e.returnDraftIfExists});return this.jiraClient.makeRequest(a,t)},this.removeDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/default","DELETE",null,{updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(a,t)},this.setDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/default","PUT",{workflow:e.workflowName,updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(a,t)},this.getDraft=function(e,t){var a=this.buildRequestOptions(e,"/draft","GET");return this.jiraClient.makeRequest(a,t)},this.editDraft=function(e,t){var a=this.buildRequestOptions(e,"/draft","PUT",e.draft);return this.jiraClient.makeRequest(a,t)},this.deleteDraft=function(e,t){var a=this.buildRequestOptions(e,"/draft","DELETE");return this.jiraClient.makeRequest(a,t)},this.getDraftDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/default","GET");return this.jiraClient.makeRequest(a,t)},this.setDraftDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/default","PUT",{workflow:e.workflowName,updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(a,t)},this.removeDraftDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/default","DELETE");return this.jiraClient.makeRequest(a,t)},this.getIssueType=function(e,t){var a=this.buildRequestOptions(e,"/issuetype/"+e.issueType,"GET",null,{returnDraftIfExists:e.returnDraftIfExists});return this.jiraClient.makeRequest(a,t)},this.editIssueType=function(e,t){var a=this.buildRequestOptions(e,"/issuetype/"+e.issueType,"PUT",{workflow:e.workflow,updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(a,t)},this.removeIssueType=function(e,t){var a=this.buildRequestOptions(e,"/issuetype/"+e.issueType,"DELETE",null,{updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(a,t)},this.getDraftIssueType=function(e,t){var a=this.buildRequestOptions(e,"/draft/issuetype/"+e.issueType,"GET");return this.jiraClient.makeRequest(a,t)},this.editDraftIssueType=function(e,t){var a=this.buildRequestOptions(e,"/draft/issuetype/"+e.issueType,"PUT",{workflow:e.workflow});return this.jiraClient.makeRequest(a,t)},this.removeDraftIssueType=function(e,t){var a=this.buildRequestOptions(e,"/draft/issuetype/"+e.issueType,"DELETE");return this.jiraClient.makeRequest(a,t)},this.getWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/workflow","GET",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.getDraftWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/workflow","GET",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.editWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/workflow","PUT",{workflow:e.workflowName,issueTypes:e.issueTypes},{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.editDraftWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/workflow","PUT",{workflow:e.workflowName,issueTypes:e.issueTypes},{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.deleteWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/workflow","DELETE",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.deleteDraftWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/workflow","DELETE",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,i,r){var o="/workflowscheme/"+e.workflowSchemeId;return r||(r={}),i||(i={}),e.fields&&(r.fields="",e.fields.forEach(function(e){r.fields+=e+","}),r.fields=r.fields.slice(0,-1)),e.expand&&(r.expand="",e.expand.forEach(function(e){r.expand+=e+","}),r.expand=r.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(o+t),method:a,body:i,qs:r,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getWorklogDeleted=function(e,t){var a={uri:this.jiraClient.buildURL("/worklog/deleted"),method:"GET",json:!0,followAllRedirects:!0,qs:{since:e.since}};return this.jiraClient.makeRequest(a,t)},this.worklogList=function(e,t){var a={uri:this.jiraClient.buildURL("/worklog/list"),method:"POST",json:!0,followAllRedirects:!0,body:{ids:e.ids}};return this.jiraClient.makeRequest(a,t)},this.getWorklogUpdated=function(e,t){var a={uri:this.jiraClient.buildURL("/worklog/updated"),method:"GET",json:!0,followAllRedirects:!0,qs:{since:e.since}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";a.r(t);var i=a(17),r=a.n(i),o=a(85),n=a.n(o);function s(e){return function(e){if(Array.isArray(e)){for(var t=0,a=new Array(e.length);t<e.length;t++)a[t]=e[t];return a}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var u={'"':'"',"'":"'","`":"`","“":"”","‘":"’"},c=[" ","\n","\t"],p=/ |\n|\t/,l=function(e){return e.map(function(e){return e.match(p)?'`"'.concat(e,'"`'):"`".concat(e,"`")}).join(" ")},m=(new RegExp(/(?:!kira)\s+(\S+)(?:\s+(\S+))?(?:\s+(.*))?/),{alias:{project:["p"]},string:["project","status","assignee"]}),h=function(e,t){if(function(e){return e&&e.content&&"reaction"===e.content.type}(t))return{from:t.sender.username,type:"reacji",reactToID:t.content.reaction.m,emoji:t.content.reaction.b};if(!function(e){return e&&e.content&&"text"===e.content.type&&"string"==typeof e.content.text.body&&e.content.text.body.startsWith("!kira")}(t))return null;var a,i,r,o,p=n()((a=t.content.text.body,i=a.split("").reduce(function(e,t){var a=e.list,i=e.current,r=e.quote;return r?t===r?{list:[].concat(s(a),[i]),current:"",quote:""}:{list:a,current:i+t,quote:r}:u[t]?{list:a,current:"",quote:u[t]}:c.includes(t)?i?{list:[].concat(s(a),[i]),current:"",quote:""}:{list:a,current:i,quote:""}:{list:a,current:i+t,quote:""}},{list:[],current:"",quote:""}),r=i.list,(o=i.current)?[].concat(s(r),[o]):r),m),h=function(e,t){var a=t.project?t.project.toLowerCase():"",i=t.status?t.status.toLowerCase():"",r=t.assignee?t.assignee.toLowerCase():"";return a&&!e.config.jira.projects.includes(a)?{project:"",status:"",assignee:"",error:"invalid project: ".concat(a," is not one of ").concat(l(e.config.jira.projects))}:i&&!e.config.jira.status.includes(i)?{project:"",status:"",assignee:"",error:"invalid status: ".concat(i," is not one of ").concat(l(e.config.jira.status))}:r&&!e.config.jira.usernameMapper[r]?{project:"",status:"",assignee:"",error:"invalid assignee: ".concat(r," is not one of ").concat(l(Object.keys(e.config.jira.usernameMapper)))}:{project:a,status:i,assignee:r,error:null}}(e,p),d=h.project,f=h.status,g=h.assignee,v=h.error;if(v)return{type:"unknown",error:v};switch(p._[1]){case"help":return{type:"help"};case"search":return p._.length<3?{type:"unknown",error:"search need at least 1 arg"}:{from:t.sender.username,type:"search",query:p._.slice(2).join(" "),project:d,assignee:g,status:f};case"comment":return p._.length<4?{type:"unknown",error:"comment need at least 2 args"}:{from:t.sender.username,type:"comment",query:p._[2],project:d,assignee:g,status:f,comment:p._.slice(3).join(" ")};case"create":return p._.length<4?{type:"unknown",error:"create need at least 2 args"}:d?{from:t.sender.username,type:"create",name:p._[2],project:d,assignee:g,description:p._.slice(3).join(" ")}:{type:"unknown",error:"create requires --project"};default:return{type:"unknown"}}},d=function(e){switch(e){case 0:return":zero:";case 1:return":one:";case 2:return":two:";case 3:return":three:";case 4:return":four:";case 5:return":five:";case 6:return":six:";case 7:return":seven:";case 8:return":eight:";case 9:return":nine:";case 10:return":keycap_ten:";default:return":question:"}},f=function(e,t){return"".concat(d(t)," *").concat(e.key,"* ").concat(function(e){switch(e){case"Done":return":white_check_mark:";case"To Do":return":statue_of_liberty:";default:return":building_construction:"}}(e.status)," ").concat(e.summary," - ").concat(e.url)},g=function(e,t,a,i){var r="```\n"+t+"\n```";if(!a.length)return r+"I got nothing from Jira.";var o=a.slice(0,11);return r+("@".concat(e.from," I got ").concat(a.length," tickets from Jira")+(a>11?". Here are the first 11:\n\n":":\n\n"))+o.map(f).join("\n")+(i?"\n\n"+i:"")},v=function(e,t,a,i){return e.jira.getOrSearch({query:a.query,project:a.project,status:a.status,assigneeJira:e.config.jira.usernameMapper[a.assignee]||""}).then(function(r){var o=r.jql,n=r.issues;return e.bot.chat.send(t,{body:g(a,o,n,i)}).then(function(e){var t=e.id;return{count:n.length>11?11:n.length,id:t,issues:n}})})},y=function(e,t,a){return v(e,t,a,"To confirm commenting, click on emojis below in the next 2 minutes:").then(function(i){var r=i.count,o=i.id,n=i.issues;e.comment.add(o,a,n),function e(t,a,i,r,o){return r<o&&t.bot.chat.react(a,i,d(r)).then(function(){return e(t,a,i,r+1,o)})}(e,t,o,0,r)})},b=function(e,t){return e.config.jira.usernameMapper[t]?"[~".concat(e.config.jira.usernameMapper[t],"]"):t},k=function(e,t,a){return e.bot.chat.react(t,a,":eyes:")},j=function(e,t){try{var a=h(e,t);if(console.debug({msg:"got message",parsedMessage:a}),!a)return;switch(a.type){case"unknown":case"help":return void function(e,t){e.bot.chat.send(t,{body:'Usage: \n  `!kira search <query>`\n  `!kira comment <query|"multi word query"> <your comment>`\n  `!kira create --project=<PROJECT> [--assignee=<kb username>] <summary|"multi word summary"> <description>`\nOptions: \n  `-p`, `--project`: only search for specific project '+"".concat(l(e.config.jira.projects),"\n")+"  `--status`: only search for tickets in specific status "+"".concat(l(e.config.jira.status),"\n")+"  `--assignee`: only search for tickets assigned to specified person (keybase username) "+"".concat(l(Object.keys(e.config.jira.usernameMapper)),"\n")})}(e,t.channel);case"search":return k(e,t.channel,t.id),void function(e,t,a){v(e,t,a)}(e,t.channel,a);case"comment":return k(e,t.channel,t.id),void y(e,t.channel,a);case"reacji":return void function(e,t,a){var i=e.comment.get(a.reactToID);if(i&&a.from!==e.config.keybase.username){var r=function(e){switch(e){case":zero:":return 0;case":one:":return 1;case":two:":return 2;case":three:":return 3;case":four:":return 4;case":five:":return 5;case":six:":return 6;case":seven:":return 7;case":eight:":return 8;case":nine:":return 9;case":keycap_ten:":return 10;default:return null}}(a.emoji);if("number"==typeof r&&!(r>=i.issues.length)){var o=i.issues[r].key,n="Comment by ".concat(b(e,i.message.from))+(i.message.from===a.from?": ":" (confirmed by ".concat(b(e,a.from),"): "))+i.message.comment;e.jira.addComment(o,n).then(function(i){return e.bot.chat.send(t,{body:"@".concat(a.from," Done! ").concat(i)})})}}}(e,t.channel,a);case"create":return void function(e,t,a){e.jira.createIssue({assigneeJira:e.config.jira.usernameMapper[a.assignee]||"",project:a.project,name:a.name,description:"Reported by [~".concat(e.config.jira.usernameMapper[a.from],"]: \n")+a.description}).then(function(i){return e.bot.chat.send(t,{body:"Ticket created"+(a.assignee?" for @".concat(a.assignee):"")+": ".concat(i)})})}(e,t.channel,a);default:return void console.error({error:"how could this happen"})}}catch(e){console.error(e)}},w=a(1),x=a.n(w);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var S=a(86),_=a.n(S);function R(e){return function(e){if(Array.isArray(e)){for(var t=0,a=new Array(e.length);t<e.length;t++)a[t]=e[t];return a}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],i=!0,r=!1,o=void 0;try{for(var n,s=e[Symbol.iterator]();!(i=(n=s.next()).done)&&(a.push(n.value),!t||a.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{i||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function C(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function q(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var O=function(){function e(t){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),q(this,"_config",void 0),q(this,"_jira",void 0),q(this,"jiraRespMapper",function(e){return{key:e.key,summary:e.fields.summary,status:e.fields.status.statusCategory.name,url:"https://".concat(a._config.jira.host,"/browse/").concat(e.key)}}),this._config=t,this._jira=new _.a({host:t.jira.host,basic_auth:{username:t.jira.username,password:t.jira.password}})}var t,a,i;return t=e,(a=[{key:"getOrSearch",value:function(e){var t,a=this,i=e.query,r=e.project,o=e.status,n=e.assigneeJira,s=(r?'project = "'.concat(r,'" AND '):"")+(o?'status = "'.concat(o,'" AND '):"")+(n?'assignee = "'.concat(n,'" AND '):"")+'text ~ "'.concat(i,'"');return console.debug({msg:"getOrSearch",jql:s}),Promise.all([(t=i,t.match(/[A-Za-z]+-[0-9]+/)?this._jira.issue.getIssue({issueKey:i}):new Promise(function(e){return e()})),this._jira.search.search({jql:s,fields:"key,summary,status",method:"GET",maxResults:11})]).then(function(e){var t=A(e,2),i=t[0],r=t[1];return{jql:s,issues:[].concat(R(i?[i]:[]),R(r?r.issues:[])).map(a.jiraRespMapper)}})}},{key:"addComment",value:function(e,t){var a=this;return this._jira.issue.addComment({issueKey:e,comment:{body:t}}).then(function(t){var i=t.id;return"https://".concat(a._config.jira.host,"/browse/").concat(e,"?focusedCommentId=").concat(i)})}},{key:"createIssue",value:function(e){var t=this,a=e.assigneeJira,i=e.project,r=e.name,o=e.description;return console.log({msg:"createIssue",assigneeJira:a,project:i,name:r,description:o}),this._jira.issue.createIssue({fields:{assignee:a?{name:a}:void 0,project:{key:i.toUpperCase()},issuetype:{name:"Story"},summary:r,description:o}}).then(function(e){var a=e.key;return"https://".concat(t._config.jira.host,"/browse/").concat(a)})}}])&&C(t.prototype,a),i&&C(t,i),e}();function P(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var F,z,T=x.a.promisify(setTimeout),I=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),P(this,"_respMsgIDToCommentMessage",new Map),P(this,"add",function(e,a,i){t._respMsgIDToCommentMessage.set(e,{message:a,issues:i}),T(12e4).then(function(){return t._respMsgIDToCommentMessage.delete(e)})}),P(this,"get",function(e){return t._respMsgIDToCommentMessage.get(e)})},D=function(e){try{return function(e){if("object"!==E(e))return null;if("object"!==E(e.keybase))return null;if("string"!=typeof e.keybase.username)return null;if("string"!=typeof e.keybase.paperkey)return null;if(!Array.isArray(e.keybase.channels))return null;var t=!0,a=!1,i=void 0;try{for(var r,o=e.keybase.channels[Symbol.iterator]();!(t=(r=o.next()).done);t=!0)if("object"!==E(r.value))return null}catch(e){a=!0,i=e}finally{try{t||null==o.return||o.return()}finally{if(a)throw i}}return"object"!==E(e.jira)?null:"string"!=typeof e.jira.host?null:"string"!=typeof e.jira.username?null:"string"!=typeof e.jira.password?null:Array.isArray(e.jira.projects)&&Array.isArray(e.jira.status)?(e.jira.projects=e.jira.projects.map(function(e){return e.toLowerCase()}),e.jira.status=e.jira.status.map(function(e){return e.toLowerCase()}),e):null}(JSON.parse(Buffer.from(e,"base64").toString()))}catch(e){return console.error(e),null}}(process.env.KIRA_CONFIG||"");D?(F=D,z={bot:new r.a,config:F,comment:new I,jira:new O(F)},z.bot.init(z.config.keybase.username,z.config.keybase.paperkey,{verbose:!0}).then(function(){return z})).then(function(e){e.bot.chat.watchAllChannelsForNewMessages(function(t){return e.config.keybase.channels.some(function(e){return a=e,i=t.channel,["name","public","membersType","topicType","topicName"].reduce(function(e,t){return a[t]===i[t]},!0);var a,i})&&j(e,t)})}):(console.error("invalid config"),console.error(process.env.KIRA_CONFIG),process.exit(1))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC1wbHVzL2Fzc2VydC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ1dGlsXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY3J5cHRvXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NhZmVyLWJ1ZmZlci9zYWZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvcHJpdmF0ZS1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9hbGdzLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInVybFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9saWIvZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInBhdGhcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvZm9ybWF0cy9wZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9mb3JtYXRzL3JmYzQyNTMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2tleWJhc2UtYm90L2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImh0dHBcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcInN0cmVhbVwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImFzc2VydFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2NvbXBpbGUvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicXVlcnlzdHJpbmdcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2ZpbmdlcnByaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc2JuL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90d2VldG5hY2wvbmFjbC1mYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvc3NoLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvcGtjczguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9jZXJ0aWZpY2F0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odHRwLXNpZ25hdHVyZS9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjYy1qc2JuL2xpYi9lYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvc3NoLXByaXZhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4dGVuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJuZXRcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9kaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9mb3JtYXRzL3BrY3MxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvZm9ybWF0cy9kbnNzZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nhc2VsZXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2NvbXBpbGUvcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmFzdC1kZWVwLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2NvbXBpbGUvZXJyb3JfY2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC92NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wdWJzdWZmaXgtcHNsLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInB1bnljb2RlXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvdWdoLWNvb2tpZS9saWIvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvdWdoLWNvb2tpZS9saWIvcGVybXV0ZURvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wYXRoTWF0Y2guanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYnVmZmVyXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9lZC1jb21wYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9mb3JtYXRzL2F1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JjcnlwdC1wYmtkZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvc3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvZm9ybWF0cy9wdXR0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMveDUwOS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWltZS10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ0bHNcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tYmluZWQtc3RyZWFtL2xpYi9jb21iaW5lZF9zdHJlYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L2xpYi9pdGVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L2xpYi9hYm9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvbGliL3N0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvdGVybWluYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvc2VyaWFsT3JkZXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNzdHJlYW0vaXNzdHJlYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvZm9ybWF0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9jb21waWxlL3NjaGVtYV9vYmouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zhc3QtanNvbi1zdGFibGUtc3RyaW5naWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL3ZhbGlkYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL19saW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9fbGltaXRJdGVtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9fbGltaXRMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvX2xpbWl0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvbGliL29hdXRoX3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29hdXRoL2xpYi9vYXV0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2F1dGgvbGliL191dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveWFyZ3MtcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLnNuYWtlY2FzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLmNhbWVsY2FzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLmtlYmFiY2FzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJvc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcImNoaWxkX3Byb2Nlc3NcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFkbGluZVwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ta2RpcnAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbWVsY2FzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVjYW1lbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveWFyZ3MtcGFyc2VyL2xpYi90b2tlbml6ZS1hcmctc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95YXJncy1wYXJzZXIgc3luYyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9jb29raWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BzbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9tZW1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNvbi1zdHJpbmdpZnktc2FmZS9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlcXVlc3QvcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ6bGliXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F3cy1zaWduMi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXdzNC9hd3M0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hd3M0L2xydS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odHRwLXNpZ25hdHVyZS9saWIvcGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2Jlci9yZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2Jlci93cml0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjYy1qc2JuL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2MtanNibi9saWIvc2VjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvZm9ybWF0cy9vcGVuc3NoLWNlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9mb3JtYXRzL3g1MDktcGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odHRwLXNpZ25hdHVyZS9saWIvc2lnbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ByaW0vbGliL2pzcHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXh0c3ByaW50Zi9saWIvZXh0c3ByaW50Zi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmVycm9yL2xpYi92ZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZlcnJvci9ub2RlX21vZHVsZXMvZXh0c3ByaW50Zi9saWIvZXh0c3ByaW50Zi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29uLXNjaGVtYS9saWIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0dHAtc2lnbmF0dXJlL2xpYi92ZXJpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbWUtZGIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZvcmV2ZXItYWdlbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvZm9ybV9kYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWxheWVkLXN0cmVhbS9saWIvZGVsYXllZF9zdHJlYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbWJpbmVkLXN0cmVhbS9saWIvZGVmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9wYXJhbGxlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvbGliL2RlZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9zZXJpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvcG9wdWxhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXR5cGVkYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlcXVlc3QvbGliL2dldFByb3h5RnJvbVVSSS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvcXVlcnlzdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9wYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvaGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXItdmFsaWRhdG9yL2xpYi9wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2Fqdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9jb21waWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91cmktanMvZGlzdC9lczUvdXJpLmFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9jb21waWxlL3VjczJsZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXRyYXZlcnNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2NhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2NvbXBpbGUvZm9ybWF0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9jb21waWxlL3J1bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL3JlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9hbGxPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9hbnlPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9jb21tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL2NvbnN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL2NvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL2RlcGVuZGVuY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9lbnVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9pZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9pdGVtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9tdWx0aXBsZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL25vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9vbmVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9wYXR0ZXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL3Byb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvcHJvcGVydHlOYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy91bmlxdWVJdGVtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2NvbXBpbGUvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIva2V5d29yZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9jdXN0b20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhci12YWxpZGF0b3IvbGliL2Vycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXItc2NoZW1hL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvYXV0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvcm5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ieXRlc1RvVXVpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvb2F1dGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29hdXRoLXNpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlcXVlc3QvbGliL2hhd2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlcXVlc3QvbGliL211bHRpcGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvcmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlcXVlc3QvbGliL3R1bm5lbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHVubmVsLWFnZW50L2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImV2ZW50c1wiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wZXJmb3JtYW5jZS1ub3cvbGliL3BlcmZvcm1hbmNlLW5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL2FwcGxpY2F0aW9uLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9hdHRhY2htZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvYXVkaXRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9hdXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvYXZhdGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9jb21tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvY3VzdG9tRmllbGRPcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9kYXNoYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9maWVsZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL2dyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvZ3JvdXBVc2VyUGlja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvZ3JvdXBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvaXNzdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9pc3N1ZUxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9pc3N1ZUxpbmtUeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvaXNzdWVUeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvanFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvbGljZW5zZVJvbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9saWNlbnNlVmFsaWRhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvbXlQZXJtaXNzaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL215UHJlZmVyZW5jZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9teXNlbGYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29hdXRoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYXV0aC9saWIvc2hhMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2F1dGgvbGliL29hdXRoMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3Bhc3N3b3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvcGVybWlzc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9wZXJtaXNzaW9uLXNjaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3ByaW9yaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvcHJvamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3Byb2plY3RDYXRlZ29yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3Byb2plY3RWYWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3JlaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9yZXNvbHV0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvcm9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9zY3JlZW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvc2VjdXJpdHlMZXZlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3NlcnZlckluZm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS9zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3NwcmludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3N0YXR1cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3N0YXR1c0NhdGVnb3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvdXNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS93ZWJob29rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qaXJhLWNvbm5lY3Rvci9hcGkvd29ya2Zsb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ppcmEtY29ubmVjdG9yL2FwaS93b3JrZmxvd1NjaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamlyYS1jb25uZWN0b3IvYXBpL3dvcmtsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9tZXNzYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9lbW9qaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VhcmNoLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9yZWFjamkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tpcmEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnLmpzIiwid2VicGFjazovLy8uL3NyYy9qaXJhLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250ZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImFzc2VydCIsIlN0cmVhbSIsInV0aWwiLCJVVUlEX1JFR0VYUCIsIl9jYXBpdGFsaXplIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsIl90b3NzIiwiZXhwZWN0ZWQiLCJvcGVyIiwiYXJnIiwiYWN0dWFsIiwiQXNzZXJ0aW9uRXJyb3IiLCJtZXNzYWdlIiwiZm9ybWF0IiwidW5kZWZpbmVkIiwib3BlcmF0b3IiLCJzdGFja1N0YXJ0RnVuY3Rpb24iLCJjYWxsZXIiLCJfZ2V0Q2xhc3MiLCJ0b1N0cmluZyIsIm5vb3AiLCJ0eXBlcyIsImJvb2wiLCJjaGVjayIsImZ1bmMiLCJzdHJpbmciLCJudW1iZXIiLCJpc05hTiIsImZpbml0ZSIsImlzRmluaXRlIiwiYnVmZmVyIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJhcnJheSIsIkFycmF5IiwiaXNBcnJheSIsInN0cmVhbSIsImRhdGUiLCJEYXRlIiwicmVnZXhwIiwiUmVnRXhwIiwidXVpZCIsInRlc3QiLCJfc2V0RXhwb3J0cyIsIm5kZWJ1ZyIsIm91dCIsImtleXMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9OREVCVUciLCJtc2ciLCJmb3JFYWNoIiwiayIsInR5cGUiLCJsZW5ndGgiLCJyZXF1aXJlIiwic2FmZXIiLCJTYWZlciIsImZyb20iLCJVaW50OEFycmF5IiwiZW5jb2RpbmdPck9mZnNldCIsIlR5cGVFcnJvciIsImFsbG9jIiwic2l6ZSIsImZpbGwiLCJlbmNvZGluZyIsIlJhbmdlRXJyb3IiLCJidWYiLCJrU3RyaW5nTWF4TGVuZ3RoIiwiYmluZGluZyIsImUiLCJjb25zdGFudHMiLCJNQVhfTEVOR1RIIiwia01heExlbmd0aCIsIk1BWF9TVFJJTkdfTEVOR1RIIiwiS2V5IiwiZWRDb21wYXQiLCJhbGdzIiwiY3J5cHRvIiwiRmluZ2VycHJpbnQiLCJTaWduYXR1cmUiLCJEaWZmaWVIZWxsbWFuIiwiZXJycyIsInV0aWxzIiwiUHJpdmF0ZUtleSIsIkludmFsaWRBbGdvcml0aG1FcnJvciIsIktleVBhcnNlRXJyb3IiLCJmb3JtYXRzIiwib3B0cyIsImFycmF5T2ZPYmplY3QiLCJwYXJ0cyIsIm9wdGlvbmFsU3RyaW5nIiwiY29tbWVudCIsImFsZ0luZm8iLCJpbmZvIiwic3oiLCJwYXJ0TG9va3VwIiwicGFydCIsInRoaXMiLCJzb3VyY2UiLCJfcmZjNDI1M0NhY2hlIiwiX2hhc2hDYWNoZSIsImN1cnZlIiwiZGF0YSIsImN1cnZlcyIsInN6UGFydCIsInNpemVQYXJ0IiwiY291bnRaZXJvcyIsInRvQnVmZmVyIiwib3B0aW9ucyIsIm9wdGlvbmFsT2JqZWN0Iiwid3JpdGUiLCJoYXNoIiwiYWxnbyIsInRvTG93ZXJDYXNlIiwiaGFzaEFsZ3MiLCJjYWNoZUtleSIsIkVycm9yIiwicGtjczgiLCJwa2NzOFRvQnVmZmVyIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCIsImZpbmdlcnByaW50IiwiYWxnb3JpdGhtIiwiaGFzaFR5cGUiLCJkZWZhdWx0SGFzaEFsZ29yaXRobSIsImhhc2hBbGdvIiwiY3JlYXRlVmVyaWZ5IiwiVmVyaWZpZXIiLCJ2Iiwibm0iLCJlcnIiLCJtYXRjaCIsIm9rIiwib2xkVmVyaWZ5IiwidmVyaWZ5Iiwic2VsZiIsInNpZ25hdHVyZSIsImZtdCIsImlzU2lnbmF0dXJlIiwiaGFzaEFsZ29yaXRobSIsImNyZWF0ZURpZmZpZUhlbGxtYW4iLCJjcmVhdGVESCIsInBhcnNlIiwiZmlsZW5hbWUiLCJyZWFkIiwidG9QdWJsaWMiLCJpc0tleSIsIm9iaiIsInZlciIsImlzQ29tcGF0aWJsZSIsIl9zc2hwa0FwaVZlcnNpb24iLCJfb2xkVmVyc2lvbkRldGVjdCIsImJ1ZmZlclNwbGl0IiwiY2hyIiwibGFzdFBhcnQiLCJtYXRjaGVzIiwiY2hhckNvZGVBdCIsIm5ld1BhcnQiLCJwdXNoIiwiYWRkUlNBTWlzc2luZyIsImFzc2VydENvbXBhdGlibGUiLCJqc2JuIiwiZG1vZHAiLCJtb2QiLCJzdWJ0cmFjdCIsImJpZ2ludFRvTXBCdWYiLCJkbW9kcSIsInEiLCJjYWxjdWxhdGVEU0FQdWJsaWMiLCJnIiwieCIsIm1vZFBvdyIsImNhbGN1bGF0ZUVEMjU1MTlQdWJsaWMiLCJrcCIsIm5hY2wiLCJzaWduIiwia2V5UGFpciIsImZyb21TZWVkIiwicHVibGljS2V5IiwiY2FsY3VsYXRlWDI1NTE5UHVibGljIiwiYm94IiwibXBOb3JtYWxpemUiLCJtcERlbm9ybWFsaXplIiwiZWNOb3JtYWxpemUiLCJhZGRaZXJvIiwiYiIsImNvcHkiLCJvYml0IiwibWFzayIsImtsYXNzIiwibmVlZFZlciIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJkZXB0aCIsImNvbnN0cnVjdG9yIiwiTUFYX0NMQVNTX0RFUFRIIiwib3BlbnNzbEtleURlcml2IiwiY2lwaGVyIiwic2FsdCIsInBhc3NwaHJhc2UiLCJjb3VudCIsIkQiLCJEX3ByZXYiLCJidWZzIiwiY2xlbiIsIkNJUEhFUl9MRU4iLCJQS0NTNV9TQUxUX0xFTiIsIm1hdGVyaWFsIiwiaXYiLCJjb25jYXQiLCJqIiwib3BlbnNzaENpcGhlckluZm8iLCJpbmYiLCJrZXlTaXplIiwiYmxvY2tTaXplIiwib3BlbnNzbE5hbWUiLCJwdWJsaWNGcm9tUHJpdmF0ZUVDRFNBIiwiY3VydmVOYW1lIiwicHJpdiIsInBhcmFtcyIsImEiLCJlYyIsIkVDQ3VydmVGcCIsIkciLCJkZWNvZGVQb2ludEhleCIsInB1YiIsIm11bHRpcGx5IiwiZW5jb2RlUG9pbnRIZXgiLCJ6ZXJvUGFkVG9MZW5ndGgiLCJsZW4iLCJlcXVhbCIsIndyaXRlQml0U3RyaW5nIiwiZGVyIiwidGFnIiwiYXNuMSIsIkJlciIsIkJpdFN0cmluZyIsIndyaXRlQnVmZmVyIiwicmVhZEJpdFN0cmluZyIsInJlYWRTdHJpbmciLCJzdHJpY3RFcXVhbCIsInBia2RmMiIsImhhc2hBbGciLCJpdGVyYXRpb25zIiwiaGtleSIsImdlbiIsInRzIiwiVCIsIkkiLCJ3cml0ZVVJbnQzMkJFIiwiaG1hYyIsImNyZWF0ZUhtYWMiLCJUaSIsIlVjIiwiQmlnSW50ZWdlciIsImRlcy1lZGUzLWNiYyIsImFlcy0xMjgtY2JjIiwiYWVzLTI1Ni1jYmMiLCJiaWdpbnQiLCJ0b0J5dGVBcnJheSIsImRoZSIsImdlbmVyYXRlRUNEU0EiLCJnZW5lcmF0ZUVEMjU1MTkiLCJLZXlFbmNyeXB0ZWRFcnJvciIsIl9wdWJDYWNoZSIsImluaGVyaXRzIiwicHViUGFydHMiLCJkZXJpdmUiLCJuZXdUeXBlIiwicGFpciIsImZyb21TZWNyZXRLZXkiLCJjcmVhdGVTaWduIiwiU2lnbmVyIiwib2xkU2lnbiIsInNpZyIsImlzUHJpdmF0ZUtleSIsImdlbmVyYXRlIiwiZHNhIiwicnNhIiwiZWNkc2EiLCJlZDI1NTE5IiwiYWxnUHJpdkluZm8iLCJuaXN0cDI1NiIsInBrY3M4b2lkIiwicmVwbGFjZSIsIm5pc3RwMzg0IiwibmlzdHA1MjEiLCJwcml2SW5mbyIsIm1kNSIsInNoYTEiLCJzaGEyNTYiLCJzaGEzODQiLCJzaGE1MTIiLCJGaW5nZXJwcmludEZvcm1hdEVycm9yIiwiZnAiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImFsZyIsImlubmVyRXJyIiwia2V5TmFtZSIsIlNpZ25hdHVyZVBhcnNlRXJyb3IiLCJDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IiLCJjZXJ0TmFtZSIsIk5PX0hPU1RfRVJST1IiLCJOT19DT05TVU1FUl9LRVlfRVJST1IiLCJOT19QUklWQVRFX0tFWV9FUlJPUiIsIk5PX09BVVRIX1RPS0VOX0VSUk9SIiwiTk9fT0FVVEhfVE9LRU5fU0VDUkVUX0VSUk9SIiwiTk9fVVNFUk5BTUVfRVJST1IiLCJOT19QQVNTV09SRF9FUlJPUiIsIk5PX0FVVEhFTlRJQ0FUSU9OX0VSUk9SIiwiTk9fVkVSSUZJRVJfRVJST1IiLCJJTlZBTElEX0FVVEhFTlRJQ0FUSU9OX1BST1BFUlRZX0VSUk9SIiwiTk9fSVNTVUVfSURFTlRJRklFUiIsIk5PX0NPTU1FTlRfSUQiLCJOT19DT01NRU5UX0VSUk9SIiwiTk9fTk9USUZJQ0FUSU9OX0VSUk9SIiwiTk9fR0xPQkFMX0lEX0VSUk9SIiwiTk9fTElOS19JRF9FUlJPUiIsIk5PX1RSQU5TSVRJT05fRVJST1IiLCJOT19JU1NVRV9FUlJPUiIsIk5PX0FTU0lHTkVFX0VSUk9SIiwiTk9fV0FUQ0hFUl9FUlJPUiIsIk5PX1dPUktMT0dfRVJST1IiLCJOT19XT1JLTE9HX0lEX0VSUk9SIiwiTk9fRklMRU5BTUVfRVJST1IiLCJOT19QUk9QRVJUWV9LRVlfRVJST1IiLCJOT19QUk9QRVJUWV9WQUxVRV9FUlJPUiIsIk5PX0FUVEFDSE1FTlRfSURfRVJST1IiLCJOT19BVURJVF9FUlJPUiIsIk5PX0FWQVRBUl9UWVBFX0VSUk9SIiwiTk9fQ09NTUVOVF9QUk9QRVJUWV9LRVlfRVJST1IiLCJOT19DT01NRU5UX1BST1BFUlRZX1ZBTFVFX0VSUk9SIiwiTk9fSVNTVUVfTElOS19FUlJPUiIsIk5PX0lTU1VFX0xJTktfSURfRVJST1IiLCJOT19JU1NVRV9MSU5LX1RZUEVfSUQiLCJOT19GSUVMRF9PUFRJT05fSURfRVJST1IiLCJTU0hCdWZmZXIiLCJwYXJzZU9uZU51bSIsImhlYWQiLCJyZWFkUGFydCIsImF0RW5kIiwic3R5cGUiLCJ3cml0ZVN0cmluZyIsIndyaXRlUGFydCIsIkJlcldyaXRlciIsInN0YXJ0U2VxdWVuY2UiLCJJbnRlZ2VyIiwiZW5kU2VxdWVuY2UiLCJpbm5lciIsIkJlclJlYWRlciIsInJlYWRTZXF1ZW5jZSIsInJlYWRCdWZmZXIiLCJzcGxpdCIsIlJlYWRlciIsIldyaXRlciIsImZvcmNlVHlwZSIsImlucHV0IiwibTIiLCJsaW5lcyIsInRyaW0iLCJzaSIsImVpIiwiaGVhZGVycyIsImpvaW4iLCJlcnJvcnMiLCJwYmVzRW5kIiwiZWRlciIsIm9mZnNldCIsIm1ldGhvZCIsInJlYWRPSUQiLCJPSURfUEJFUzIiLCJrZGZFbmQiLCJrZGZPaWQiLCJPSURfUEJLREYyIiwiT2N0ZXRTdHJpbmciLCJyZWFkSW50IiwiaGFzaEFsZ09pZCIsIk9JRF9UT19IQVNIIiwiX29mZnNldCIsImNpcGhlck9pZCIsIk9JRF9UT19DSVBIRVIiLCJjaW5mbyIsImNodW5rIiwiY2lwaGVyU3RyZWFtIiwiY3JlYXRlRGVjaXBoZXJpdiIsImNodW5rcyIsIm9uY2UiLCJpbmRleE9mIiwiZW5kIiwic3NocHJpdiIsInJlYWRTU0hQcml2YXRlIiwicmZjNDI1MyIsInJlYWRUeXBlIiwib3JpZ2luYWxJbnB1dCIsInBrY3MxIiwicmVhZFBrY3MxIiwicmVhZFBrY3M4IiwiaGVhZGVyIiwid3JpdGVQa2NzOCIsIndyaXRlUGtjczEiLCJ0bXAiLCJsaW1pdCIsIjEuMi44NDAuMTEzNTQ5LjMuNyIsIjIuMTYuODQwLjEuMTAxLjMuNC4xLjIiLCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS40MiIsIkNJUEhFUl9UT19PSUQiLCIxLjIuODQwLjExMzU0OS4yLjciLCIxLjIuODQwLjExMzU0OS4yLjkiLCIxLjIuODQwLjExMzU0OS4yLjExIiwiSEFTSF9UT19PSUQiLCJrZXlUeXBlVG9BbGciLCJub3JtYWxpemUiLCJBIiwicmVhZFBhcnRpYWwiLCJyZWFkSW50ZXJuYWwiLCJhbGdUb0tleVR5cGUiLCJwYXJ0aWFsIiwic3NoYnVmIiwicGFydENvdW50IiwiQ29uc3RydWN0b3IiLCJyZXMiLCJleGVjIiwibm9ybWFsaXplZCIsIm5kIiwicmVtYWluZGVyIiwiY29uc3VtZWQiLCJfaW50ZXJvcERlZmF1bHQiLCJleCIsInNuYWtlQ2FzZSIsImNhbWVsQ2FzZSIsImtlYmFiQ2FzZSIsIm9zIiwiY2hpbGRfcHJvY2VzcyIsInJlYWRsaW5lIiwibWtkaXJwIiwiZnMiLCJmc19fZGVmYXVsdCIsInBhdGgiLCJ0cmFuc2Zvcm1zQmxhY2tsaXN0IiwiY2hhdCIsImJ1aWxkQ29udGV4dCIsImNvbnRleHQiLCJjb3BpZWRDb250ZXh0IiwicGFyZW50IiwiZm9ybWF0QVBJT2JqZWN0T3V0cHV0IiwibWFwIiwiaXRlbSIsInJlZHVjZSIsIm5ld09iaiIsImZvcm1hdHRlZEtleSIsImFwaU5hbWUiLCJwYXJlbnRMZW5ndGgiLCJtYXRjaGVyIiwibWlzbWF0Y2giLCJtYXRjaGVySW5kZXgiLCJkZXNpcmVkVmFsdWUiLCJlbnRyaWVzIiwibWF0Y2hCbGFja2xpc3QiLCJbb2JqZWN0IE9iamVjdF0iLCJrZXliYXNlRXhlYyIsIndvcmtpbmdEaXIiLCJob21lRGlyIiwiYXJncyIsInN0ZGluQnVmZmVyIiwib25TdGRPdXQiLCJydW5BcmdzIiwidW5zaGlmdCIsImNoaWxkIiwic3Bhd24iLCJzdGRPdXRCdWZmZXIiLCJzdGRFcnJCdWZmZXIiLCJzdGRpbiIsImxpbmVSZWFkZXJTdGRvdXQiLCJjcmVhdGVJbnRlcmZhY2UiLCJzdGRvdXQiLCJvbiIsInN0ZGVyciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29kZSIsImZpbmFsU3RkT3V0IiwiZXJyb3JNZXNzYWdlIiwianNvbiIsIkpTT04iLCJhc3luYyIsImtleWJhc2VTdGF0dXMiLCJzdGF0dXMiLCJVc2VybmFtZSIsIkRldmljZSIsInVzZXJuYW1lIiwiZGV2aWNlbmFtZSIsInBpbmdLZXliYXNlU2VydmljZSIsImFFeGVjIiwicHJvbWlzaWZ5IiwidGltZW91dCIsInRpbWUiLCJzZXRUaW1lb3V0IiwiU2VydmljZSIsImluaXRpYWxpemVkIiwidmVyYm9zZSIsImJvdExpdGUiLCJkaXNhYmxlVHlwaW5nIiwicGFwZXJrZXkiLCJzdHJpbmdpZnkiLCJzZXJ2aWNlTG9nRmlsZSIsIkJvb2xlYW4iLCJzdGFydHVwU2VydmljZSIsImN1cnJlbnRJbmZvIiwiX2tpbGxDdXN0b21TZXJ2aWNlIiwicnVubmluZyIsIkFQSV9WRVJTSU9OUyIsInRlYW0iLCJ3YWxsZXQiLCJDbGllbnRCYXNlIiwiX3dvcmtpbmdEaXIiLCJzcGF3bmVkUHJvY2Vzc2VzIiwiaW5pdEJvdEluZm8iLCJraWxsIiwiZm9ybWF0QVBJT2JqZWN0SW5wdXQiLCJhcGlUeXBlIiwidmVyc2lvbiIsImlucHV0U3RyaW5nIiwib3V0cHV0IiwiZXJyb3IiLCJyZXN1bHQiLCJDaGF0IiwiX2d1YXJkSW5pdGlhbGl6ZWQiLCJfcnVuQXBpQ29tbWFuZCIsImNvbnZlcnNhdGlvbnMiLCJvcHRpb25zV2l0aERlZmF1bHRzIiwibWVtYmVyc1R5cGUiLCJjaGFubmVsIiwicGVlayIsInVucmVhZE9ubHkiLCJwYWdpbmF0aW9uIiwibWVzc2FnZXMiLCJpZCIsIm1lc3NhZ2VJZCIsInJlYWN0aW9uIiwiYm9keSIsIm9uTWVzc2FnZSIsIm9uRXJyb3IiLCJfY2hhdExpc3RlbiIsInVzZXJXYXRjaGluZyIsIndoYXRDYW1lQmFjayIsIndhbnRzUHVibGljIiwicHVibGljIiwid2FudHNUb3BpY1R5cGUiLCJ0b3BpY1R5cGUiLCJ3YW50c1RvcGljTmFtZSIsInRvcGljTmFtZSIsImhpZGVFeHBsb2RpbmciLCJfcGF0aFRvS2V5YmFzZUJpbmFyeSIsImxpbmUiLCJtZXNzYWdlT2JqZWN0IiwiX2NoYW5uZWxNYXRjaCIsInNlbmRlciIsImRldmljZU5hbWUiLCJXYWxsZXQiLCJhY2NvdW50SWQiLCJwYXltZW50IiwidHJhbnNhY3Rpb25JZCIsInR4aWQiLCJyZWNpcGllbnQiLCJhbW91bnQiLCJjdXJyZW5jeSIsImJhdGNoSWQiLCJwYXltZW50cyIsInJhbmRvbUJ5dGVzIiwidG1wZGlyIiwicmFuZG9tVGVtcERpciIsIl9zZXJ2aWNlIiwiX3ByZXBXb3JraW5nRGlyIiwiaW5pdCIsIl9pbml0U3ViQm90cyIsImluaXRGcm9tUnVubmluZ1NlcnZpY2UiLCJteUluZm8iLCJfZGVpbml0IiwiZGVpbml0Iiwicm1kaXJSZWN1cnNpdmUiLCJkaXJOYW1lIiwiZnNMc3RhdCIsImxzdGF0IiwiZnNVbmxpbmsiLCJ1bmxpbmsiLCJmc1JtZGlyIiwicm1kaXIiLCJmc1JlYWRkaXIiLCJyZWFkZGlyIiwiZW50cnkiLCJlbnRyeVBhdGgiLCJpc0RpcmVjdG9yeSIsImtleWJhc2VCaW5hcnlMb2NhdGlvbiIsIndoaWNoS2V5YmFzZSIsImRlc3RpbmF0aW9uIiwiY29weUZpbGUiLCJfaW5pdCIsImNoZWNrRGF0YVR5cGUiLCJkYXRhVHlwZSIsIm5lZ2F0ZSIsIkVRVUFMIiwiQU5EIiwiT0siLCJOT1QiLCJ0byIsImNoZWNrRGF0YVR5cGVzIiwiZGF0YVR5cGVzIiwidG9IYXNoIiwibnVsbCIsImludGVnZXIiLCJjb2VyY2VUb1R5cGVzIiwib3B0aW9uQ29lcmNlVHlwZXMiLCJDT0VSQ0VfVE9fVFlQRVMiLCJnZXRQcm9wZXJ0eSIsImVzY2FwZVF1b3RlcyIsInVjczJsZW5ndGgiLCJ2YXJPY2N1cmVuY2VzIiwiZGF0YVZhciIsInZhclJlcGxhY2UiLCJleHByIiwiY2xlYW5VcENvZGUiLCJFTVBUWV9FTFNFIiwiRU1QVFlfSUZfTk9fRUxTRSIsIkVNUFRZX0lGX1dJVEhfRUxTRSIsImZpbmFsQ2xlYW5VcENvZGUiLCJFUlJPUlNfUkVHRVhQIiwiUkVNT1ZFX0VSUk9SU19BU1lOQyIsIlJFVFVSTl9BU1lOQyIsIlJFVFVSTl9EQVRBX0FTWU5DIiwiUkVNT1ZFX0VSUk9SUyIsIlJFVFVSTl9WQUxJRCIsIlJFVFVSTl9UUlVFIiwiUk9PVERBVEFfUkVHRVhQIiwiUkVNT1ZFX1JPT1REQVRBIiwic2NoZW1hSGFzUnVsZXMiLCJzY2hlbWEiLCJydWxlcyIsInNjaGVtYUhhc1J1bGVzRXhjZXB0IiwiZXhjZXB0S2V5d29yZCIsInRvUXVvdGVkU3RyaW5nIiwiZ2V0UGF0aEV4cHIiLCJjdXJyZW50UGF0aCIsImpzb25Qb2ludGVycyIsImlzTnVtYmVyIiwiam9pblBhdGhzIiwiZ2V0UGF0aCIsInByb3AiLCJlc2NhcGVKc29uUG9pbnRlciIsImdldERhdGEiLCIkZGF0YSIsImx2bCIsInBhdGhzIiwidXAiLCJqc29uUG9pbnRlciIsIkpTT05fUE9JTlRFUiIsIlJFTEFUSVZFX0pTT05fUE9JTlRFUiIsInNlZ21lbnRzIiwic2VnbWVudCIsInVuZXNjYXBlSnNvblBvaW50ZXIiLCJ1bmVzY2FwZUZyYWdtZW50IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlRnJhZ21lbnQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJhcnIiLCJJREVOVElGSUVSIiwiU0lOR0xFX1FVT1RFIiwiY29weVByb3BzIiwic3JjIiwiZHN0IiwiU2FmZUJ1ZmZlciIsImFsbG9jVW5zYWZlIiwiYWxsb2NVbnNhZmVTbG93IiwiU2xvd0J1ZmZlciIsIkNlcnRpZmljYXRlIiwiaCIsIm90aGVyIiwidGhlaXJIYXNoIiwidGhlaXJIYXNoMiIsImhhc2gyIiwiYmFzZTY0UkUiLCJoZXhSRSIsImVuQWxncyIsImFsZ29yaXRobXMiLCJvcHRpb25hbEFycmF5T2ZTdHJpbmciLCJpc0ZpbmdlcnByaW50IiwiZGJpdHMiLCJmcm9tTnVtYmVyIiwiZnJvbVN0cmluZyIsIm5iaSIsImluQnJvd3NlciIsIm5hdmlnYXRvciIsImFwcE5hbWUiLCJhbSIsInciLCJ4bCIsInhoIiwiTWF0aCIsImZsb29yIiwiREIiLCJETSIsIkRWIiwiRlYiLCJwb3ciLCJGMSIsIkYyIiwicnIiLCJ2diIsIkJJX1JNIiwiQklfUkMiLCJpbnQyY2hhciIsImludEF0IiwibmJ2IiwiZnJvbUludCIsIm5iaXRzIiwiQ2xhc3NpYyIsIk1vbnRnb21lcnkiLCJtcCIsImludkRpZ2l0IiwibXBsIiwibXBoIiwidW0iLCJtdDIiLCJvcF9hbmQiLCJ5Iiwib3Bfb3IiLCJvcF94b3IiLCJvcF9hbmRub3QiLCJsYml0IiwiY2JpdCIsIk51bGxFeHAiLCJuTm9wIiwiQmFycmV0dCIsInIyIiwicTMiLCJPTkUiLCJkbFNoaWZ0VG8iLCJtdSIsImRpdmlkZSIsImNvbnZlcnQiLCJjb21wYXJlVG8iLCJyZXZlcnQiLCJkaXZSZW1UbyIsIm11bFRvIiwibXVsdGlwbHlUbyIsInNxclRvIiwic3F1YXJlVG8iLCJhYnMiLCJaRVJPIiwic3ViVG8iLCJjb3B5VG8iLCJ1MCIsImNsYW1wIiwiZHJTaGlmdFRvIiwiZnJvbVJhZGl4IiwibWkiLCJzaCIsIm1heCIsImxTaGlmdFRvIiwiYnMiLCJjYnMiLCJibSIsImRzIiwiclNoaWZ0VG8iLCJtaW4iLCJwbSIsInB0IiwibXMiLCJuc2giLCJ5cyIsInkwIiwieXQiLCJkMSIsImQyIiwicWQiLCJpc0V2ZW4iLCJleHAiLCJ6IiwidG9SYWRpeCIsImttIiwiYml0TGVuZ3RoIiwibW9kUG93SW50IiwibXVsdGlwbHlVcHBlclRvIiwibXVsdGlwbHlMb3dlclRvIiwiZEFkZE9mZnNldCIsInJuZ19zdGF0ZSIsInJuZ19wb29sIiwicm5nX3BwdHIiLCJsb3dwcmltZXMiLCJscGxpbSIsInJuZ19zZWVkX3RpbWUiLCJnZXRUaW1lIiwicm5nX3BzaXplIiwiY2h1bmtTaXplIiwiTE4yIiwibG9nIiwic2lnbnVtIiwiY3MiLCJpbnRWYWx1ZSIsInN1YnN0ciIsImRNdWx0aXBseSIsInRlc3RCaXQiLCJiaXR3aXNlVG8iLCJzaGlmdExlZnQiLCJpc1Byb2JhYmxlUHJpbWUiLCJuZXh0Qnl0ZXMiLCJvcCIsImYiLCJjaGFuZ2VCaXQiLCJhZGRUbyIsIm1vZEludCIsIm1pbGxlclJhYmluIiwibjEiLCJnZXRMb3dlc3RTZXRCaXQiLCJzaGlmdFJpZ2h0IiwicmFuZG9tIiwiY2xvbmUiLCJieXRlVmFsdWUiLCJzaG9ydFZhbHVlIiwiZXF1YWxzIiwiYW5kIiwib3IiLCJ4b3IiLCJhbmROb3QiLCJub3QiLCJiaXRDb3VudCIsInNldEJpdCIsImNsZWFyQml0IiwiZmxpcEJpdCIsImFkZCIsImRpdmlkZUFuZFJlbWFpbmRlciIsImsxIiwiZzIiLCJpczEiLCJtb2RJbnZlcnNlIiwiYWMiLCJ1IiwiZ2NkIiwic3F1YXJlIiwid2luZG93IiwiZ2V0UmFuZG9tVmFsdWVzIiwidWEiLCJhcHBWZXJzaW9uIiwicm5nX2dldF9ieXRlIiwiQXJjZm91ciIsIm5leHQiLCJTZWN1cmVSYW5kb20iLCJTIiwiYmEiLCJnZiIsIkZsb2F0NjRBcnJheSIsInJhbmRvbWJ5dGVzIiwiXzAiLCJfOSIsImdmMCIsImdmMSIsIl8xMjE2NjUiLCJEMiIsIlgiLCJZIiwidHM2NCIsInZuIiwieGkiLCJ5aSIsImNyeXB0b192ZXJpZnlfMTYiLCJjcnlwdG9fdmVyaWZ5XzMyIiwiY3J5cHRvX2NvcmVfc2Fsc2EyMCIsImlucCIsImowIiwiajEiLCJqMiIsImozIiwiajQiLCJqNSIsImo2IiwiajciLCJqOCIsImo5IiwiajEwIiwiajExIiwiajEyIiwiajEzIiwiajE0IiwiajE1IiwieDAiLCJ4MSIsIngyIiwieDMiLCJ4NCIsIng1IiwieDYiLCJ4NyIsIng4IiwieDkiLCJ4MTAiLCJ4MTEiLCJ4MTIiLCJ4MTMiLCJ4MTQiLCJ4MTUiLCJjb3JlX3NhbHNhMjAiLCJjcnlwdG9fY29yZV9oc2Fsc2EyMCIsImNvcmVfaHNhbHNhMjAiLCJzaWdtYSIsImNyeXB0b19zdHJlYW1fc2Fsc2EyMF94b3IiLCJjcG9zIiwibXBvcyIsImNyeXB0b19zdHJlYW1fc2Fsc2EyMCIsImNyeXB0b19zdHJlYW0iLCJzbiIsImNyeXB0b19zdHJlYW1feG9yIiwicG9seTEzMDUiLCJ0MCIsInQxIiwidDIiLCJ0MyIsInQ0IiwidDUiLCJ0NiIsInQ3IiwiVWludDE2QXJyYXkiLCJwYWQiLCJsZWZ0b3ZlciIsImZpbiIsImNyeXB0b19vbmV0aW1lYXV0aCIsIm91dHBvcyIsImZpbmlzaCIsImNyeXB0b19vbmV0aW1lYXV0aF92ZXJpZnkiLCJocG9zIiwiY3J5cHRvX3NlY3JldGJveCIsImNyeXB0b19zZWNyZXRib3hfb3BlbiIsInNldDI1NTE5IiwiY2FyMjU1MTkiLCJzZWwyNTUxOSIsInBhY2syNTUxOSIsIm5lcTI1NTE5IiwicGFyMjU1MTkiLCJ1bnBhY2syNTUxOSIsIloiLCJNIiwidDgiLCJ0OSIsInQxMCIsInQxMSIsInQxMiIsInQxMyIsInQxNCIsInQxNSIsInQxNiIsInQxNyIsInQxOCIsInQxOSIsInQyMCIsInQyMSIsInQyMiIsInQyMyIsInQyNCIsInQyNSIsInQyNiIsInQyNyIsInQyOCIsInQyOSIsInQzMCIsImIwIiwiYjEiLCJiMiIsImIzIiwiYjQiLCJiNSIsImI2IiwiYjciLCJiOCIsImI5IiwiYjEwIiwiYjExIiwiYjEyIiwiYjEzIiwiYjE0IiwiYjE1IiwiaW52MjU1MTkiLCJjcnlwdG9fc2NhbGFybXVsdCIsIngzMiIsInN1YmFycmF5IiwieDE2IiwiY3J5cHRvX3NjYWxhcm11bHRfYmFzZSIsImNyeXB0b19ib3hfa2V5cGFpciIsImNyeXB0b19ib3hfYmVmb3Jlbm0iLCJibG9ja3MiLCJieXRlcyIsImQwIiwiZDMiLCJkNCIsImQ1IiwiZDYiLCJkNyIsImQ4IiwiZDkiLCJoaWJpdCIsImgwIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaDciLCJoOCIsImg5IiwicjAiLCJyMSIsInIzIiwicjQiLCJyNSIsInI2IiwicjciLCJyOCIsInI5IiwibWFjIiwibWFjcG9zIiwid2FudCIsImNyeXB0b19ib3hfYWZ0ZXJubSIsImNyeXB0b19ib3hfb3Blbl9hZnRlcm5tIiwiSyIsImNyeXB0b19oYXNoYmxvY2tzX2hsIiwiaGgiLCJobCIsImJoMCIsImJoMSIsImJoMiIsImJoMyIsImJoNCIsImJoNSIsImJoNiIsImJoNyIsImJsMCIsImJsMSIsImJsMiIsImJsMyIsImJsNCIsImJsNSIsImJsNiIsImJsNyIsInRoIiwidGwiLCJ3aCIsIkludDMyQXJyYXkiLCJ3bCIsImFoMCIsImFoMSIsImFoMiIsImFoMyIsImFoNCIsImFoNSIsImFoNiIsImFoNyIsImFsMCIsImFsMSIsImFsMiIsImFsMyIsImFsNCIsImFsNSIsImFsNiIsImFsNyIsInBvcyIsImNyeXB0b19oYXNoIiwiY3N3YXAiLCJwYWNrIiwidHgiLCJ0eSIsInppIiwic2NhbGFybXVsdCIsInNjYWxhcmJhc2UiLCJjcnlwdG9fc2lnbl9rZXlwYWlyIiwicGsiLCJzayIsInNlZWRlZCIsIkwiLCJtb2RMIiwiY2FycnkiLCJjcnlwdG9fc2lnbiIsInNtIiwic21sZW4iLCJ1bnBhY2tuZWciLCJjaGsiLCJudW0iLCJkZW4iLCJkZW4yIiwiZGVuNCIsImRlbjYiLCJwb3cyNTIzIiwiY3J5cHRvX3NpZ25fb3BlbiIsImNyeXB0b19zZWNyZXRib3hfS0VZQllURVMiLCJjcnlwdG9fc2VjcmV0Ym94X05PTkNFQllURVMiLCJjcnlwdG9fYm94X1BVQkxJQ0tFWUJZVEVTIiwiY3J5cHRvX2JveF9TRUNSRVRLRVlCWVRFUyIsImNyeXB0b19ib3hfTk9OQ0VCWVRFUyIsImNoZWNrTGVuZ3RocyIsImNoZWNrQXJyYXlUeXBlcyIsImFyZ3VtZW50cyIsImNsZWFudXAiLCJsb3dsZXZlbCIsImNyeXB0b19ib3giLCJjcnlwdG9fYm94X29wZW4iLCJjcnlwdG9fc2VjcmV0Ym94X1pFUk9CWVRFUyIsImNyeXB0b19zZWNyZXRib3hfQk9YWkVST0JZVEVTIiwiY3J5cHRvX3NjYWxhcm11bHRfQllURVMiLCJjcnlwdG9fc2NhbGFybXVsdF9TQ0FMQVJCWVRFUyIsImNyeXB0b19ib3hfQkVGT1JFTk1CWVRFUyIsImNyeXB0b19ib3hfWkVST0JZVEVTIiwiY3J5cHRvX2JveF9CT1haRVJPQllURVMiLCJjcnlwdG9fc2lnbl9CWVRFUyIsImNyeXB0b19zaWduX1BVQkxJQ0tFWUJZVEVTIiwiY3J5cHRvX3NpZ25fU0VDUkVUS0VZQllURVMiLCJjcnlwdG9fc2lnbl9TRUVEQllURVMiLCJjcnlwdG9faGFzaF9CWVRFUyIsImRlY29kZVVURjgiLCJlbmNvZGVVVEY4IiwiZW5jb2RlQmFzZTY0IiwiZGVjb2RlQmFzZTY0Iiwic2VjcmV0Ym94Iiwibm9uY2UiLCJvcGVuIiwia2V5TGVuZ3RoIiwibm9uY2VMZW5ndGgiLCJvdmVyaGVhZExlbmd0aCIsInNjYWxhck11bHQiLCJiYXNlIiwic2NhbGFyTGVuZ3RoIiwiZ3JvdXBFbGVtZW50TGVuZ3RoIiwic2VjcmV0S2V5IiwiYmVmb3JlIiwiY2hlY2tCb3hMZW5ndGhzIiwiYWZ0ZXIiLCJwdWJsaWNLZXlMZW5ndGgiLCJzZWNyZXRLZXlMZW5ndGgiLCJzaGFyZWRLZXlMZW5ndGgiLCJzaWduZWRNc2ciLCJtbGVuIiwiZGV0YWNoZWQiLCJzZWVkIiwic2VlZExlbmd0aCIsInNpZ25hdHVyZUxlbmd0aCIsImhhc2hMZW5ndGgiLCJzZXRQUk5HIiwiZm4iLCJtc0NyeXB0byIsIl9zaXplIiwiX2J1ZmZlciIsInNraXAiLCJleHBhbmQiLCJyZWFkVUludDMyQkUiLCJyZWFkQ1N0cmluZyIsInJlYWRJbnQ2NCIsInJlYWRDaGFyIiwid3JpdGVDU3RyaW5nIiwid3JpdGVJbnQiLCJ3cml0ZUludDY0IiwibGVhZCIsIndyaXRlQ2hhciIsInBlbSIsIm9pZCIsInJlYWRCeXRlIiwicmVhZE1QSW50IiwiaXFtcCIsInJlYWRFQ0RTQUN1cnZlIiwiUSIsIndyaXRlRUNEU0FDdXJ2ZSIsImN1cnZlTmFtZXMiLCJjZCIsIk9JRCIsImZpZWxkVHlwZU9pZCIsImtzIiwic2lsbHlJbnQiLCJ3cml0ZU9JRCIsIndyaXRlTnVsbCIsIndyaXRlUGtjczhSU0FQcml2YXRlIiwid3JpdGVCeXRlIiwid3JpdGVQa2NzOFJTQVB1YmxpYyIsIndyaXRlUGtjczhEU0FQcml2YXRlIiwid3JpdGVQa2NzOERTQVB1YmxpYyIsIndyaXRlUGtjczhFQ0RTQVByaXZhdGUiLCJ3cml0ZVBrY3M4RUNEU0FQdWJsaWMiLCJ3cml0ZVBrY3M4RWREU0FQdWJsaWMiLCJJZGVudGl0eSIsInN1YmplY3RzIiwic3ViamVjdEtleSIsImlzc3VlciIsImlzc3VlcktleSIsInNpZ25hdHVyZXMiLCJzZXJpYWwiLCJ2YWxpZEZyb20iLCJ2YWxpZFVudGlsIiwicHVycG9zZXMiLCJpc0V4cGlyZWQiLCJ3aGVuIiwiaXNTaWduZWRCeSIsImlzc3VlckNlcnQiLCJpc1NpZ25lZEJ5S2V5IiwiZ2V0RXh0ZW5zaW9uIiwia2V5T3JPaWQiLCJnZXRFeHRlbnNpb25zIiwiZmlsdGVyIiwibWF5YmVFeHQiLCJleHRzIiwieDUwOSIsImV4dHJhcyIsImV4dCIsIm9wZW5zc2giLCJ2YWxpZCIsInNpZ25XaXRoIiwiZm10cyIsImRpZE9uZSIsImNyZWF0ZVNlbGZTaWduZWQiLCJzdWJqZWN0T3JTdWJqZWN0cyIsInN1YmplY3QiLCJvcHRpb25hbE51bWJlciIsImxpZmV0aW1lIiwic2V0VGltZSIsIm9wdGlvbmFsQnVmZmVyIiwiaG9zdFN1YmplY3RzIiwidXNlclN1YmplY3RzIiwiY2VydCIsImNhIiwiaXNDZXJ0aWZpY2F0ZSIsIkROU19OQU1FX1JFIiwib2lkcyIsImNuIiwib3UiLCJwb3N0YWxDb2RlIiwic2VyaWFsTnVtYmVyIiwic3RyZWV0IiwieDUwMFVuaXF1ZUlkZW50aWZpZXIiLCJyb2xlIiwidGVsZXBob25lTnVtYmVyIiwiZGVzY3JpcHRpb24iLCJkYyIsInVpZCIsIm1haWwiLCJ0aXRsZSIsImduIiwiaW5pdGlhbHMiLCJwc2V1ZG9ueW0iLCJlbWFpbEFkZHJlc3MiLCJ1bm9pZHMiLCJjb21wb25lbnRzIiwiY29tcG9uZW50TG9va3VwIiwiaG9zdG5hbWUiLCJlbWFpbCIsImFzQXJyYXkiLCJ0b0FycmF5IiwiaWR4IiwiTk9UX1BSSU5UQUJMRSIsIk5PVF9JQTUiLCJnbG9iTWF0Y2giLCJhUGFydHMiLCJiUGFydHMiLCJ0b0FzbjEiLCJTZXQiLCJhc24xdHlwZSIsIlV0ZjhTdHJpbmciLCJJQTVTdHJpbmciLCJQcmludGFibGVTdHJpbmciLCJpc0lkZW50aXR5IiwiZm9ySG9zdCIsImZvclVzZXIiLCJmb3JFbWFpbCIsInBhcnNlRE4iLCJkbiIsInJlbSIsImVxUG9zIiwiZnJvbUFycmF5IiwiY21wIiwicGFyc2VBc24xIiwidG9wIiwiVDYxU3RyaW5nIiwiQ2hhcmFjdGVyU3RyaW5nIiwiQk1QU3RyaW5nIiwic3NocGsiLCJIQVNIX0FMR09TIiwiUEtfQUxHT1MiLCJIdHRwU2lnbmF0dXJlRXJyb3IiLCJ2YWxpZGF0ZUFsZ29yaXRobSIsInNzaEtleVRvUEVNIiwicGFyc2VLZXkiLCJwZW1Ub1JzYVNTSEtleSIsIkVDRmllbGRFbGVtZW50RnAiLCJFQ1BvaW50RnAiLCJ6aW52IiwiZnJvbUJpZ0ludGVnZXIiLCJpbmZpbml0eSIsInJlZHVjZXIiLCJ0b0JpZ0ludGVnZXIiLCJnZXRYIiwiZ2V0WSIsImlzSW5maW5pdHkiLCJ0d2ljZSIsImdldEluZmluaXR5IiwiVEhSRUUiLCJ5MSIsInYyIiwidjMiLCJ4MXYyIiwienUyIiwieTMiLCJ6MyIsInkxejEiLCJ5MXNxejEiLCJuZWciLCJSIiwiaEJpdCIsIm11bHRpcGx5VHdvIiwiYm90aCIsImdldFEiLCJnZXRBIiwiZ2V0QiIsInhIZXgiLCJ5SGV4Iiwib0xlbiIsInlJc0V2ZW4iLCJwYXJzZUludCIsImJldGEiLCJzcXJ0IiwiYmV0YVZhbHVlIiwiZW5jb2RlQ29tcHJlc3NlZFBvaW50SGV4IiwiZ2V0UiIsIm1vZE11bHQiLCJtb2RSZWR1Y2UiLCJxTGVuIiwicU1pbnVzT25lIiwibGVnZW5kcmVFeHBvbmVudCIsIlUiLCJWIiwiZm91clEiLCJtb2REb3VibGUiLCJQIiwibHVjYXNTZXF1ZW5jZSIsIlVoIiwiVmwiLCJUV08iLCJWaCIsIlFsIiwiUWgiLCJtYWdpYyIsIk1BR0lDIiwia2RmIiwia2RmT3B0cyIsInB1YktleSIsInByaXZLZXlCbG9iIiwia2RmT3B0c0J1ZiIsInJvdW5kcyIsImNpbmYiLCJiY3J5cHQiLCJwYXNzIiwic2FsdGkiLCJwYmtkZiIsImNrZXkiLCJzZXRBdXRvUGFkZGluZyIsImNoZWNrSW50MSIsImNoZWNrSW50MiIsInJldCIsInByaXZCdWYiLCJrZGZvcHRzIiwiY2hlY2tJbnQiLCJrZGZzc2giLCJjcmVhdGVDaXBoZXJpdiIsImhhc093biIsInRvU3RyIiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImlzUGxhaW5PYmplY3QiLCJoYXNPd25Db25zdHJ1Y3RvciIsImhhc0lzUHJvdG90eXBlT2YiLCJzZXRQcm9wZXJ0eSIsInRhcmdldCIsImNvbmZpZ3VyYWJsZSIsIm5ld1ZhbHVlIiwid3JpdGFibGUiLCJleHRlbmQiLCJjb3B5SXNBcnJheSIsImRlZXAiLCJqc29uU2FmZVN0cmluZ2lmeSIsImRlZmVyIiwic2V0SW1tZWRpYXRlIiwibmV4dFRpY2siLCJwYXJhbXNIYXZlUmVxdWVzdEJvZHkiLCJyZXF1ZXN0Qm9keVN0cmVhbSIsIm11bHRpcGFydCIsInNhZmVTdHJpbmdpZnkiLCJyZXBsYWNlciIsImlzUmVhZFN0cmVhbSIsInJzIiwicmVhZGFibGUiLCJ0b0Jhc2U2NCIsIm51bWJlcnMiLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJwYXJzZUZpbmdlcnByaW50IiwicGFyc2VTaWduYXR1cmUiLCJwYXJzZVByaXZhdGVLZXkiLCJnZW5lcmF0ZVByaXZhdGVLZXkiLCJwYXJzZUNlcnRpZmljYXRlIiwiY3JlYXRlU2VsZlNpZ25lZENlcnRpZmljYXRlIiwiY3JlYXRlQ2VydGlmaWNhdGUiLCJpZGVudGl0eUZyb21ETiIsImlkZW50aXR5Rm9ySG9zdCIsImlkZW50aXR5Rm9yVXNlciIsImlkZW50aXR5Rm9yRW1haWwiLCJpZGVudGl0eUZyb21BcnJheSIsIm5ld0ludmFsaWRBc24xRXJyb3IiLCJFT0MiLCJOdWxsIiwiT2JqZWN0RGVzY3JpcHRvciIsIkV4dGVybmFsIiwiUmVhbCIsIkVudW1lcmF0aW9uIiwiUERWIiwiUmVsYXRpdmVPSUQiLCJTZXF1ZW5jZSIsIk51bWVyaWNTdHJpbmciLCJWaWRlb3RleFN0cmluZyIsIlVUQ1RpbWUiLCJHZW5lcmFsaXplZFRpbWUiLCJHcmFwaGljU3RyaW5nIiwiVmlzaWJsZVN0cmluZyIsIkdlbmVyYWxTdHJpbmciLCJVbml2ZXJzYWxTdHJpbmciLCJDb250ZXh0IiwiQ1JZUFRPX0hBVkVfRUNESCIsIm9zQ3VydmUiLCJkaCIsImNyZWF0ZUVDREgiLCJnZW5lcmF0ZUtleXMiLCJnZXRQdWJsaWNLZXkiLCJnZXRQcml2YXRlS2V5IiwiZWNQYXJhbXMiLCJYOUVDUGFyYW1ldGVycyIsImdldE4iLCJjQnl0ZUxlbiIsImNlaWwiLCJnZXRHIiwiZ2V0Q3VydmUiLCJfaXNQcml2IiwiX2FsZ28iLCJfY3VydmUiLCJfa2V5IiwiX2RoIiwiX3AiLCJfZyIsInNldFByaXZhdGVLZXkiLCJzZXRQdWJsaWNLZXkiLCJfZWNQYXJhbXMiLCJfcHJpdiIsIkVDUHJpdmF0ZSIsIkVDUHVibGljIiwiX3BhcmFtcyIsIl9wdWIiLCJnZXRLZXkiLCJfa2V5Q2hlY2siLCJpc1B1YiIsImRlZXBFcXVhbCIsInNldEtleSIsImNvbXB1dGVTZWNyZXQiLCJvdGhlcnBrIiwiZGVyaXZlU2hhcmVkU2VjcmV0Iiwic2VjcmV0IiwiZ2VuZXJhdGVLZXkiLCJnZXRIIiwicmVhZFVJbnQ4IiwiY3VydmVPaWQiLCJ3cml0ZVBrY3MxUlNBUHJpdmF0ZSIsIndyaXRlUGtjczFSU0FQdWJsaWMiLCJ3cml0ZVBrY3MxRFNBUHJpdmF0ZSIsIndyaXRlUGtjczFEU0FQdWJsaWMiLCJ3cml0ZVBrY3MxRUNEU0FQcml2YXRlIiwid3JpdGVQa2NzMUVDRFNBUHVibGljIiwid3JpdGVQa2NzMUVkRFNBUHJpdmF0ZSIsIndyaXRlUGtjczFFZERTQVB1YmxpYyIsImFsZ0VsZW1zIiwiYWxnb051bSIsImFsZ29OYW1lIiwic3VwcG9ydGVkQWxnb3NCeUlkIiwiZWxlbWVudHMiLCJyc2FQYXJhbXMiLCJlbGVtZW50IiwiZWxlbWVudFRvQnVmIiwiZWNkc2FLZXkiLCJrZXlTdHJpbmciLCJlbGVtcyIsImJhc2U2NGtleSIsImtleUJ1ZmZlciIsInB1YmxpY0V4cG9uZW50TGVuIiwicHVibGljRXhwb25lbnQiLCJtb2R1bHVzIiwicnNhS2V5IiwicnNhQWxnRnJvbU9wdGlvbnMiLCJ0aW1lc3RhbXAiLCJkbnNzZWNUaW1lc3RhbXAiLCJiYXNlNjRLZXkiLCJzdXBwb3J0ZWRBbGdvcyIsInJzYS1zaGExIiwicnNhLXNoYTI1NiIsInJzYS1zaGE1MTIiLCJlY2RzYS1wMjU2LXNoYTI1NiIsImVjZHNhLXAzODQtc2hhMzg0IiwidGltZXN0YW1wU3RyIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiQ2FzZWxlc3MiLCJkaWN0Iiwic2V0IiwiY2xvYmJlciIsImhhcyIsInN3YXAiLCJkZWwiLCJodHRwaWZ5IiwicmVzcCIsInNldEhlYWRlciIsImhhc0hlYWRlciIsImdldEhlYWRlciIsInJlbW92ZUhlYWRlciIsIlVSSSIsIlNjaGVtYU9iamVjdCIsInRyYXZlcnNlIiwiY29tcGlsZSIsInJvb3QiLCJyZWYiLCJyZWZWYWwiLCJfcmVmcyIsIl9zY2hlbWFzIiwiaW5saW5lUmVmIiwiX29wdHMiLCJpbmxpbmVSZWZzIiwidmFsaWRhdGUiLCJfY29tcGlsZSIsImJhc2VJZCIsInJlc29sdmVTY2hlbWEiLCJyZWZQYXRoIiwiX2dldEZ1bGxQYXRoIiwiZ2V0RnVsbFBhdGgiLCJfZ2V0SWQiLCJub3JtYWxpemVJZCIsInBhcnNlZFJlZiIsInJlc29sdmVVcmwiLCJnZXRKc29uUG9pbnRlciIsImZ1bGxQYXRoIiwidXJsIiwiaWRzIiwic2NoZW1hSWQiLCJiYXNlSWRzIiwiIiwiZnVsbFBhdGhzIiwibG9jYWxSZWZzIiwiYWxsS2V5cyIsInNjaCIsImpzb25QdHIiLCJyb290U2NoZW1hIiwicGFyZW50SnNvblB0ciIsInBhcmVudEtleXdvcmQiLCJwYXJlbnRTY2hlbWEiLCJrZXlJbmRleCIsIlBSRVZFTlRfU0NPUEVfQ0hBTkdFIiwiZnJhZ21lbnQiLCIkcmVmIiwiU0lNUExFX0lOTElORUQiLCJjaGVja05vUmVmIiwiY291bnRLZXlzIiwiSW5maW5pdHkiLCJzZXJpYWxpemUiLCJUUkFJTElOR19TTEFTSF9IQVNIIiwia2V5TGlzdCIsImhhc1Byb3AiLCJhcnJBIiwiYXJyQiIsImRhdGVBIiwiZGF0ZUIiLCJyZWdleHBBIiwicmVnZXhwQiIsIk1pc3NpbmdSZWZFcnJvciIsIm1pc3NpbmdSZWYiLCJtaXNzaW5nU2NoZW1hIiwiZXJyb3JTdWJjbGFzcyIsIlN1YmNsYXNzIiwiVmFsaWRhdGlvbiIsImFqdiIsInZhbGlkYXRpb24iLCJNaXNzaW5nUmVmIiwicm5nIiwiYnl0ZXNUb1V1aWQiLCJybmRzIiwiaWkiLCJ0b3VnaCIsIkNvb2tpZSIsIkNvb2tpZUphciIsIlJlcXVlc3RKYXIiLCJzdG9yZSIsIl9qYXIiLCJsb29zZU1vZGUiLCJ1cmkiLCJsb29zZSIsInNldENvb2tpZSIsImNvb2tpZU9yU3RyIiwic2V0Q29va2llU3luYyIsImdldENvb2tpZVN0cmluZyIsImdldENvb2tpZVN0cmluZ1N5bmMiLCJnZXRDb29raWVzIiwiZ2V0Q29va2llc1N5bmMiLCJqYXIiLCJwc2wiLCJnZXRQdWJsaWNTdWZmaXgiLCJkb21haW4iLCJTdG9yZSIsInN5bmNocm9ub3VzIiwiZmluZENvb2tpZSIsImNiIiwiZmluZENvb2tpZXMiLCJwdXRDb29raWUiLCJjb29raWUiLCJ1cGRhdGVDb29raWUiLCJvbGRDb29raWUiLCJuZXdDb29raWUiLCJyZW1vdmVDb29raWUiLCJyZW1vdmVDb29raWVzIiwiZ2V0QWxsQ29va2llcyIsInB1YnN1ZmZpeCIsInBlcm11dGVEb21haW4iLCJwdWJTdWYiLCJyZXZlcnNlIiwiY3VyIiwicGVybXV0YXRpb25zIiwic2hpZnQiLCJwYXRoTWF0Y2giLCJyZXFQYXRoIiwiY29va2llUGF0aCIsIldyaXRhYmxlIiwiX3dyaXRlIiwiZW5jIiwic2lnQnVmIiwic2lnT2JqIiwic3NoIiwicHV0dHkiLCJmaW5kRE5TU0VDSGVhZGVyIiwiZG5zc2VjIiwiZmluZFBFTUhlYWRlciIsImZpbmRTU0hIZWFkZXIiLCJmaW5kUHVUVFlIZWFkZXIiLCJETlNTRUNfUFJJVktFWV9IRUFERVJfUFJFRklYIiwiY3J5cHRvX2hhc2hfc2hhNTEyIiwiQkxGX0oiLCJCbG93ZmlzaCIsIlVpbnQzMkFycmF5IiwiRiIsInN0cmVhbTJ3b3JkIiwiZGF0YWJ5dGVzIiwidGVtcCIsImVuY2lwaGVyIiwiYnl0ZU9mZnNldCIsImRlY2lwaGVyIiwiZXhwYW5kMHN0YXRlIiwia2V5Ynl0ZXMiLCJleHBhbmRzdGF0ZSIsImRlYyIsIkJDUllQVF9CTE9DS1MiLCJCQ1JZUFRfSEFTSFNJWkUiLCJiY3J5cHRfaGFzaCIsInNoYTJwYXNzIiwic2hhMnNhbHQiLCJzdGF0ZSIsImNkYXRhIiwiY2lwaGVydGV4dCIsImJ5dGVMZW5ndGgiLCJCTE9DS1MiLCJIQVNIU0laRSIsInBhc3NsZW4iLCJzYWx0bGVuIiwia2V5bGVuIiwiYW10Iiwic3RyaWRlIiwiZGVzdCIsInRtcG91dCIsImNvdW50c2FsdCIsIm9yaWdrZXlsZW4iLCJ0cmltbWVkIiwiU1NIS0VZX1JFIiwiU1NIS0VZX1JFMiIsImtidWYiLCJyZWFsT2Zmc2V0IiwicGFkZGluZyIsInRyYWlsZXIiLCJmb3VuZCIsInNwbGl0SGVhZGVyIiwicHVibGljTGluZXMiLCJwdWJsaWNCdWYiLCJrZXlUeXBlIiwidHh0Iiwid3JhcCIsInJlbWFpbiIsInRic1N0YXJ0Iiwic2lnT2Zmc2V0IiwidGJzRW5kIiwiTG9jYWwiLCJjZXJ0QWxnT2lkIiwiU0lHTl9BTEdTIiwicmVhZERhdGUiLCJpc3N1ZXJVbmlxdWVJRCIsInN1YmplY3RVbmlxdWVJRCIsImV4dEVuZCIsInJlYWRFeHRlbnNpb24iLCJzaWdBbGdPaWQiLCJzaWdBbGciLCJzaWdEYXRhIiwiYWxnUGFydHMiLCJjYWNoZSIsImJsb2IiLCJ3cml0ZVRCU0NlcnQiLCJ2ZXJpZmllciIsInNpZ25lciIsInNpZ25Bc3luYyIsImRvbmUiLCJfZW5zdXJlIiwiX2J1ZiIsInJzYS1tZDUiLCJyc2Etc2hhMzg0IiwiZHNhLXNoYTEiLCJkc2Etc2hhMjU2IiwiZWNkc2Etc2hhMSIsImVjZHNhLXNoYTI1NiIsImVjZHNhLXNoYTM4NCIsImVjZHNhLXNoYTUxMiIsImVkMjU1MTktc2hhNTEyIiwiRVhUUyIsImlzc3VlcktleUlkIiwiYWx0TmFtZSIsImJhc2ljQ29uc3RyYWludHMiLCJrZXlVc2FnZSIsImV4dEtleVVzYWdlIiwiVVRDVElNRV9SRSIsInRoaXNZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJjZW50dXJ5IiwieWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic2V0VVRDSG91cnMiLCJzZXRVVENTZWNvbmRzIiwiR1RJTUVfUkUiLCJ3cml0ZURhdGUiLCJ6ZXJvUGFkIiwiZ2V0VVRDTW9udGgiLCJkYXRlVG9VVENUaW1lIiwiQUxUTkFNRSIsIk90aGVyTmFtZSIsIlJGQzgyMk5hbWUiLCJETlNOYW1lIiwiWDQwMEFkZHJlc3MiLCJEaXJlY3RvcnlOYW1lIiwiRURJUGFydHlOYW1lIiwiSVBBZGRyZXNzIiwiRVhUUFVSUE9TRSIsInNlcnZlckF1dGgiLCJjbGllbnRBdXRoIiwiY29kZVNpZ25pbmciLCJqb3llbnREb2NrZXIiLCJqb3llbnRDbW9uIiwiRVhUUFVSUE9TRV9SRVYiLCJLRVlVU0VCSVRTIiwiY3JpdGljYWwiLCJleHRJZCIsInJlYWRCb29sZWFuIiwiYmNFbmQiLCJiYyIsInBhdGhMZW4iLCJla0VuZCIsImlkZSIsImJpdHMiLCJiaXRJbmRleCIsImJpdExlbiIsInNldEJpdHMiLCJieXRlTiIsImJpdCIsImJpdFZhbCIsInJlYWRCaXRGaWVsZCIsImFlRW5kIiwiaG9zdCIsImFsdE5hbWVzIiwid3JpdGVCb29sZWFuIiwicHVycG9zZSIsIndyaXRlQml0RmllbGQiLCJibGVuIiwidW51c2VkIiwiZXh0ZW5zaW9ucyIsInByZWZlcmVuY2UiLCJkYiIsImV4dG5hbWUiLCJFWFRSQUNUX1RZUEVfUkVHRVhQIiwiVEVYVF9UWVBFX1JFR0VYUCIsImNoYXJzZXQiLCJtaW1lIiwiY2hhcnNldHMiLCJsb29rdXAiLCJjb250ZW50VHlwZSIsImV4dGVuc2lvbiIsIkRlbGF5ZWRTdHJlYW0iLCJDb21iaW5lZFN0cmVhbSIsImRhdGFTaXplIiwibWF4RGF0YVNpemUiLCJwYXVzZVN0cmVhbXMiLCJfcmVsZWFzZWQiLCJfc3RyZWFtcyIsIl9jdXJyZW50U3RyZWFtIiwiY29tYmluZWRTdHJlYW0iLCJvcHRpb24iLCJpc1N0cmVhbUxpa2UiLCJhcHBlbmQiLCJuZXdTdHJlYW0iLCJwYXVzZVN0cmVhbSIsIl9jaGVja0RhdGFTaXplIiwiX2hhbmRsZUVycm9ycyIsInBhdXNlIiwicGlwZSIsInJlc3VtZSIsIl9nZXROZXh0IiwiX3BpcGVOZXh0IiwiX2VtaXRFcnJvciIsImVtaXQiLCJfcmVzZXQiLCJkZXN0cm95IiwiX3VwZGF0ZURhdGFTaXplIiwiYWJvcnQiLCJsaXN0IiwiaXRlcmF0b3IiLCJjYWxsYmFjayIsImluZGV4Iiwiam9icyIsImFib3J0ZXIiLCJydW5Kb2IiLCJyZXN1bHRzIiwiaXNBc3luYyIsInNvcnRNZXRob2QiLCJpc05hbWVkTGlzdCIsImluaXRTdGF0ZSIsImtleWVkTGlzdCIsInNvcnQiLCJpdGVyYXRlIiwidGVybWluYXRvciIsImFzY2VuZGluZyIsIml0ZXJhdG9ySGFuZGxlciIsImRlc2NlbmRpbmciLCJpc1N0cmVhbSIsImlzUmVhZGFibGUiLCJfcmVhZCIsIl9yZWFkYWJsZVN0YXRlIiwiaXNXcml0YWJsZSIsIl93cml0YWJsZVN0YXRlIiwiaXNEdXBsZXgiLCJoZXhUYWJsZSIsImFycmF5VG9PYmplY3QiLCJwbGFpbk9iamVjdHMiLCJhc3NpZ24iLCJhY2MiLCJjb21wYWN0IiwicXVldWUiLCJyZWZzIiwidmFsIiwicG9wIiwiY29tcGFjdGVkIiwiY29tcGFjdFF1ZXVlIiwiZGVjb2RlIiwiZW5jb2RlIiwiU3RyaW5nIiwiaXNSZWdFeHAiLCJtZXJnZSIsImFsbG93UHJvdG90eXBlcyIsIm1lcmdlVGFyZ2V0IiwicGVyY2VudFR3ZW50aWVzIiwiZGVmYXVsdCIsImZvcm1hdHRlcnMiLCJSRkMxNzM4IiwiUkZDMzk4NiIsImN5Y2xlcyIsIm5vZGUiLCJhb2JqIiwiYm9iaiIsInNlZW4iLCJ0b0pTT04iLCJzZWVuSW5kZXgiLCJzcGxpY2UiLCJpdCIsIiRrZXl3b3JkIiwiJHJ1bGVUeXBlIiwiJGFzeW5jIiwiJHJlZktleXdvcmRzIiwiUlVMRVMiLCJhbGwiLCIkaWQiLCJpc1RvcCIsInNvdXJjZUNvZGUiLCJwcm9jZXNzQ29kZSIsIiRsdmwiLCJsZXZlbCIsIiRkYXRhTHZsIiwiZGF0YUxldmVsIiwiJHNjaGVtYSIsIiRzY2hlbWFQYXRoIiwic2NoZW1hUGF0aCIsIiRlcnJTY2hlbWFQYXRoIiwiZXJyU2NoZW1hUGF0aCIsIiRicmVha09uRXJyb3IiLCJhbGxFcnJvcnMiLCIkdmFsaWQiLCIkJG91dFN0YWNrIiwiY3JlYXRlRXJyb3JzIiwiX19lcnIiLCJjb21wb3NpdGVSdWxlIiwiJHRvcCIsInJvb3RJZCIsImRhdGFQYXRoQXJyIiwiJGNsb3NpbmdCcmFjZXMxIiwiJGNsb3NpbmdCcmFjZXMyIiwiJHR5cGVTY2hlbWEiLCIkdHlwZUlzQXJyYXkiLCJudWxsYWJsZSIsImV4dGVuZFJlZnMiLCJsb2dnZXIiLCJ3YXJuIiwiJGNvbW1lbnQiLCJjb2VyY2VUeXBlcyIsIiRjb2VyY2VUb1R5cGVzIiwiJHJ1bGVzR3JvdXAiLCIkc2hvdWxkVXNlR3JvdXAiLCIkbWV0aG9kIiwiJGRhdGFUeXBlIiwiJGNvZXJjZWQiLCIkYnJhY2VzQ29lcmNpb24iLCJhcnIxIiwiJHR5cGUiLCIkaSIsImwxIiwiJHBhcmVudERhdGEiLCJhcnIyIiwiaTIiLCJsMiIsInVzZURlZmF1bHRzIiwicHJvcGVydGllcyIsImFycjMiLCIkcHJvcGVydHlLZXkiLCJpMyIsImwzIiwiJHNjaCIsIiRwYXNzRGF0YSIsInVzZURlZmF1bHQiLCJpdGVtcyIsImFycjQiLCJsNCIsImFycjUiLCIkcnVsZSIsImk1IiwibDUiLCIkc2hvdWxkVXNlUnVsZSIsIiRjb2RlIiwia2V5d29yZCIsImltcGxlbWVudHMiLCJpbXBsIiwiJHJ1bGVJbXBsZW1lbnRzU29tZUtleXdvcmQiLCIkc2NoZW1hVmFsdWUiLCIkaXNEYXRhIiwiJGlzTWF4IiwiJGV4Y2x1c2l2ZUtleXdvcmQiLCIkc2NoZW1hRXhjbCIsIiRpc0RhdGFFeGNsIiwiJG9wIiwiJG5vdE9wIiwiJGVycm9yS2V5d29yZCIsIiRzY2hlbWFWYWx1ZUV4Y2wiLCIkZXhjbHVzaXZlIiwiJGV4Y2xUeXBlIiwiJGV4Y2xJc051bWJlciIsIiRvcFN0ciIsIiRvcEV4cHIiLCJ1bmljb2RlIiwiT2F1dGgiLCJlcnJvclN0cmluZ3MiLCJnZW5lcmF0ZU9BdXRoT2JqZWN0IiwiY29uZmlnIiwiU0VSVkxFVF9CQVNFX1VSTCIsInBhdGhfcHJlZml4Iiwib2F1dGgiLCJjb25zdW1lcl9rZXkiLCJwcml2YXRlX2tleSIsInJlcVVSTCIsInByb3RvY29sIiwicG9ydCIsInBhdGhuYW1lIiwiYWNjZXNzVVJMIiwiY2FsbGJhY2tfdXJsIiwiT0F1dGgiLCJnZXRBdXRob3JpemVVUkwiLCJhdXRoVVJMIiwiZ2V0T0F1dGhSZXF1ZXN0VG9rZW4iLCJ0b2tlbiIsInRva2VuX3NlY3JldCIsInN3YXBSZXF1ZXN0VG9rZW5XaXRoQWNjZXNzVG9rZW4iLCJvYXV0aF92ZXJpZmllciIsImdldE9BdXRoQWNjZXNzVG9rZW4iLCJodHRwIiwiaHR0cHMiLCJVUkwiLCJxdWVyeXN0cmluZyIsIk9BdXRoVXRpbHMiLCJyZXF1ZXN0VXJsIiwiYWNjZXNzVXJsIiwiY29uc3VtZXJLZXkiLCJjb25zdW1lclNlY3JldCIsImF1dGhvcml6ZV9jYWxsYmFjayIsInNpZ25hdHVyZU1ldGhvZCIsIm5vbmNlU2l6ZSIsImN1c3RvbUhlYWRlcnMiLCJfaXNFY2hvIiwiX3JlcXVlc3RVcmwiLCJfYWNjZXNzVXJsIiwiX2NvbnN1bWVyS2V5IiwiX2NvbnN1bWVyU2VjcmV0IiwiX2VuY29kZURhdGEiLCJfcHJpdmF0ZUtleSIsIl92ZXJzaW9uIiwiX2F1dGhvcml6ZV9jYWxsYmFjayIsIl9zaWduYXR1cmVNZXRob2QiLCJfbm9uY2VTaXplIiwiX2hlYWRlcnMiLCJBY2NlcHQiLCJDb25uZWN0aW9uIiwiVXNlci1BZ2VudCIsIl9jbGllbnRPcHRpb25zIiwiX2RlZmF1bHRDbGllbnRPcHRpb25zIiwicmVxdWVzdFRva2VuSHR0cE1ldGhvZCIsImFjY2Vzc1Rva2VuSHR0cE1ldGhvZCIsImZvbGxvd1JlZGlyZWN0cyIsIl9vYXV0aFBhcmFtZXRlclNlcGVyYXRvciIsIk9BdXRoRWNobyIsInJlYWxtIiwidmVyaWZ5X2NyZWRlbnRpYWxzIiwiX3JlYWxtIiwiX3ZlcmlmeUNyZWRlbnRpYWxzIiwiX2dldFRpbWVzdGFtcCIsInRvRW5jb2RlIiwiX2RlY29kZURhdGEiLCJ0b0RlY29kZSIsIl9nZXRTaWduYXR1cmUiLCJwYXJhbWV0ZXJzIiwidG9rZW5TZWNyZXQiLCJzaWduYXR1cmVCYXNlIiwiX2NyZWF0ZVNpZ25hdHVyZUJhc2UiLCJfY3JlYXRlU2lnbmF0dXJlIiwiX25vcm1hbGl6ZVVybCIsInBhcnNlZFVybCIsIl9pc1BhcmFtZXRlck5hbWVBbk9BdXRoUGFyYW1ldGVyIiwicGFyYW1ldGVyIiwiX2J1aWxkQXV0aG9yaXphdGlvbkhlYWRlcnMiLCJvcmRlcmVkUGFyYW1ldGVycyIsImF1dGhIZWFkZXIiLCJzdWJzdHJpbmciLCJfbWFrZUFycmF5T2ZBcmd1bWVudHNIYXNoIiwiYXJndW1lbnRzSGFzaCIsImFyZ3VtZW50X3BhaXJzIiwiX3NvcnRSZXF1ZXN0UGFyYW1zIiwiX25vcm1hbGlzZVJlcXVlc3RQYXJhbXMiLCJIbWFjIiwiSE1BQ1NIQTEiLCJOT05DRV9DSEFSUyIsIl9nZXROb25jZSIsImNoYXJfcG9zIiwiY2hhcnMiLCJub25jZV9jaGFyc19sZW5ndGgiLCJfY3JlYXRlQ2xpZW50Iiwic3NsRW5hYmxlZCIsInJlcXVlc3QiLCJfcHJlcGFyZVBhcmFtZXRlcnMiLCJvYXV0aF90b2tlbiIsIm9hdXRoX3Rva2VuX3NlY3JldCIsImV4dHJhX3BhcmFtcyIsIm9hdXRoUGFyYW1ldGVycyIsIm9hdXRoX3RpbWVzdGFtcCIsIm9hdXRoX25vbmNlIiwib2F1dGhfdmVyc2lvbiIsIm9hdXRoX3NpZ25hdHVyZV9tZXRob2QiLCJvYXV0aF9jb25zdW1lcl9rZXkiLCJxdWVyeSIsImtleTIiLCJleHRyYVBhcmFtZXRlcnMiLCJfcGVyZm9ybVNlY3VyZVJlcXVlc3QiLCJwb3N0X2JvZHkiLCJwb3N0X2NvbnRlbnRfdHlwZSIsImF1dGhvcml6YXRpb24iLCJjbGllbnRPcHRpb25zIiwiYWxsb3dFYXJseUNsb3NlIiwiaXNBbkVhcmx5Q2xvc2VIb3N0IiwiY2FsbGJhY2tDYWxsZWQiLCJwYXNzQmFja0NvbnRyb2wiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJsb2NhdGlvbiIsInNldEVuY29kaW5nIiwic2V0Q2xpZW50T3B0aW9ucyIsIm1lcmdlZE9wdGlvbnMiLCJleHRyYVBhcmFtcyIsIm9hdXRoX2FjY2Vzc190b2tlbiIsIm9hdXRoX2FjY2Vzc190b2tlbl9zZWNyZXQiLCJnZXRQcm90ZWN0ZWRSZXNvdXJjZSIsImRlbGV0ZSIsIl9wdXRPclBvc3QiLCJwdXQiLCJwb3N0Iiwic2lnblVybCIsImhvc3ROYW1lIiwiZGVjYW1lbGl6ZSIsInRva2VuaXplQXJnU3RyaW5nIiwiYWxpYXNlcyIsImFsaWFzQXJyYXlzIiwiY2hhbmdlIiwiY29tYmluZWQiLCJpbnRlcnNlY3QiLCJhbGlhc0FycmF5IiwiY29tYmluZUFsaWFzZXMiLCJhbGlhcyIsImNvbmZpZ3VyYXRpb24iLCJkZWZhdWx0cyIsInNob3J0LW9wdGlvbi1ncm91cHMiLCJjYW1lbC1jYXNlLWV4cGFuc2lvbiIsImRvdC1ub3RhdGlvbiIsInBhcnNlLW51bWJlcnMiLCJib29sZWFuLW5lZ2F0aW9uIiwibmVnYXRpb24tcHJlZml4IiwiZHVwbGljYXRlLWFyZ3VtZW50cy1hcnJheSIsImZsYXR0ZW4tZHVwbGljYXRlLWFycmF5cyIsInBvcHVsYXRlLS0iLCJjb21iaW5lLWFycmF5cyIsInNldC1wbGFjZWhvbGRlci1rZXkiLCJoYWx0LWF0LW5vbi1vcHRpb24iLCJjb25maWdPYmplY3RzIiwiZW52UHJlZml4Iiwibm90RmxhZ3NPcHRpb24iLCJub3RGbGFnc0FyZ3YiLCJuZXdBbGlhc2VzIiwiX18iLCJhcHBseSIsImZsYWdzIiwiYXJyYXlzIiwiYm9vbHMiLCJzdHJpbmdzIiwiY291bnRzIiwiY29uZmlncyIsImRlZmF1bHRlZCIsIm5hcmdzIiwiY29lcmNpb25zIiwibmVnYXRpdmUiLCJuZWdhdGVkQm9vbGVhbiIsIm9wdCIsImFzc2lnbm1lbnQiLCJib29sZWFuIiwibmFyZyIsImNvZXJjZSIsImV4dGVuZEFsaWFzZXMiLCJhcmd2IiwiXyIsInNldEFyZyIsInNldERlZmF1bHRlZCIsIm5vdEZsYWdzIiwiYnJva2VuIiwibGV0dGVycyIsImNoZWNrQWxsQWxpYXNlcyIsImVhdE5hcmdzIiwiZWF0QXJyYXkiLCJkZWZhdWx0VmFsdWUiLCJtYXliZUNvZXJjZU51bWJlciIsInRvRWF0IiwiYXZhaWxhYmxlIiwic3RhcnQiLCJhcmdzVG9TZXQiLCJtdWx0aXBsZUFycmF5RmxhZyIsImRlZmF1bHRGb3JUeXBlIiwicHJvY2Vzc1ZhbHVlIiwidW5zZXREZWZhdWx0ZWQiLCJhZGROZXdBbGlhcyIsInNwbGl0S2V5IiwiX19kZWZpbmVTZXR0ZXJfXyIsIl9fZGVmaW5lR2V0dGVyX18iLCJpc1VuZGVmaW5lZCIsImluY3JlbWVudCIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJzZXRDb25maWdPYmplY3QiLCJwcmV2IiwiZnVsbEtleSIsImhhc0tleSIsImFwcGx5RW52VmFycyIsImNvbmZpZ09ubHkiLCJwcmVmaXgiLCJlbnZWYXIiLCJsYXN0SW5kZXhPZiIsImFwcGx5RGVmYXVsdHNBbmRBbGlhc2VzIiwiaXNUeXBlQXJyYXkiLCJpc1ZhbHVlQXJyYXkiLCJkdXBsaWNhdGUiLCJmbGFnIiwiaXNTZXQiLCJndWVzc1R5cGUiLCJjb25maWdMb29rdXAiLCJjb25maWdLZXkiLCJjb25maWdQYXRoIiwicmVzb2x2ZWRDb25maWdQYXRoIiwiY3dkIiwic2V0Q29uZmlnIiwiY29uZmlnT2JqZWN0Iiwic2V0Q29uZmlnT2JqZWN0cyIsImFwcGxpZWQiLCJhbGkiLCJhcHBseUNvZXJjaW9ucyIsInNldFBsYWNlaG9sZGVyS2V5cyIsIm9yaWciLCJQYXJzZXIiLCJkZXRhaWxlZCIsImFwcGxpY2F0aW9uUHJvcGVydGllcyIsImF0dGFjaG1lbnQiLCJhdWRpdGluZyIsImF1dGgiLCJhdmF0YXIiLCJib2FyZCIsImNvbXBvbmVudCIsImN1c3RvbUZpZWxkT3B0aW9uIiwiZGFzaGJvYXJkIiwiZmllbGQiLCJncm91cCIsImdyb3VwVXNlclBpY2tlciIsImdyb3VwcyIsImlzc3VlIiwiaXNzdWVMaW5rIiwiaXNzdWVMaW5rVHlwZSIsImlzc3VlVHlwZSIsImpxbCIsImxpY2Vuc2VSb2xlIiwibGljZW5zZVZhbGlkYXRvciIsIm15UGVybWlzc2lvbnMiLCJteVByZWZlcmVuY2VzIiwibXlzZWxmIiwib2F1dGhfdXRpbCIsInBhc3N3b3JkIiwicGVybWlzc2lvbnMiLCJwZXJtaXNzaW9uU2NoZW1lIiwicHJpb3JpdHkiLCJwcm9qZWN0IiwicHJvamVjdENhdGVnb3J5IiwicHJvamVjdFZhbGlkYXRlIiwicmVpbmRleCIsInJlc29sdXRpb24iLCJyb2xlcyIsInNjcmVlbnMiLCJzZWFyY2giLCJzZWN1cml0eUxldmVsIiwic2VydmVySW5mbyIsInNldHRpbmdzIiwic3ByaW50Iiwic3RhdHVzQ2F0ZWdvcnkiLCJ1c2VyIiwid2ViaG9vayIsIndvcmtmbG93Iiwid29ya2Zsb3dTY2hlbWUiLCJ3b3JrbG9nIiwiSmlyYUNsaWVudCIsImFwaVZlcnNpb24iLCJhZ2lsZUFwaVZlcnNpb24iLCJhdXRoQXBpVmVyc2lvbiIsIndlYmhvb2tBcGlWZXJzaW9uIiwicHJvbWlzZSIsInJlcXVlc3RMaWIiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJvYXV0aENvbmZpZyIsInNpZ25hdHVyZV9tZXRob2QiLCJiYXNpY19hdXRoIiwiYmFzZTY0IiwiY29va2llX2phciIsImJ1aWxkVVJMIiwiYXBpQmFzZVBhdGgiLCJidWlsZEFnaWxlVVJMIiwiYnVpbGRBdXRoVVJMIiwiYnVpbGRXZWJob29rVVJMIiwibWFrZVJlcXVlc3QiLCJzdWNjZXNzU3RyaW5nIiwianNvbkVyciIsInJlcSIsInJlcXVlc3RPYmoiLCJkZWJ1ZyIsIklORklOSVRZIiwic3ltYm9sVGFnIiwicmVBc2NpaVdvcmQiLCJyZUxhdGluIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyc1VwcGVyIiwicnNMb3dlck1pc2MiLCJyc1VwcGVyTWlzYyIsInJlT3B0TW9kIiwicnNNb2RpZmllciIsInJzU2VxIiwicnNFbW9qaSIsInJlQXBvcyIsInJlQ29tYm9NYXJrIiwicmVVbmljb2RlV29yZCIsInJlSGFzVW5pY29kZVdvcmQiLCJmcmVlR2xvYmFsIiwiZ2xvYmFsIiwiZnJlZVNlbGYiLCJGdW5jdGlvbiIsImRlYnVyckxldHRlciIsIsOAIiwiw4EiLCLDgiIsIsODIiwiw4QiLCLDhSIsIsOgIiwiw6EiLCLDoiIsIsOjIiwiw6QiLCLDpSIsIsOHIiwiw6ciLCLDkCIsIsOwIiwiw4giLCLDiSIsIsOKIiwiw4siLCLDqCIsIsOpIiwiw6oiLCLDqyIsIsOMIiwiw40iLCLDjiIsIsOPIiwiw6wiLCLDrSIsIsOuIiwiw68iLCLDkSIsIsOxIiwiw5IiLCLDkyIsIsOUIiwiw5UiLCLDliIsIsOYIiwiw7IiLCLDsyIsIsO0Iiwiw7UiLCLDtiIsIsO4Iiwiw5kiLCLDmiIsIsObIiwiw5wiLCLDuSIsIsO6Iiwiw7siLCLDvCIsIsOdIiwiw70iLCLDvyIsIsOGIiwiw6YiLCLDniIsIsO+Iiwiw58iLCLEgCIsIsSCIiwixIQiLCLEgSIsIsSDIiwixIUiLCLEhiIsIsSIIiwixIoiLCLEjCIsIsSHIiwixIkiLCLEiyIsIsSNIiwixI4iLCLEkCIsIsSPIiwixJEiLCLEkiIsIsSUIiwixJYiLCLEmCIsIsSaIiwixJMiLCLElSIsIsSXIiwixJkiLCLEmyIsIsScIiwixJ4iLCLEoCIsIsSiIiwixJ0iLCLEnyIsIsShIiwixKMiLCLEpCIsIsSmIiwixKUiLCLEpyIsIsSoIiwixKoiLCLErCIsIsSuIiwixLAiLCLEqSIsIsSrIiwixK0iLCLEryIsIsSxIiwixLQiLCLEtSIsIsS2IiwixLciLCLEuCIsIsS5IiwixLsiLCLEvSIsIsS/IiwixYEiLCLEuiIsIsS8IiwixL4iLCLFgCIsIsWCIiwixYMiLCLFhSIsIsWHIiwixYoiLCLFhCIsIsWGIiwixYgiLCLFiyIsIsWMIiwixY4iLCLFkCIsIsWNIiwixY8iLCLFkSIsIsWUIiwixZYiLCLFmCIsIsWVIiwixZciLCLFmSIsIsWaIiwixZwiLCLFniIsIsWgIiwixZsiLCLFnSIsIsWfIiwixaEiLCLFoiIsIsWkIiwixaYiLCLFoyIsIsWlIiwixaciLCLFqCIsIsWqIiwixawiLCLFriIsIsWwIiwixbIiLCLFqSIsIsWrIiwixa0iLCLFryIsIsWxIiwixbMiLCLFtCIsIsW1IiwixbYiLCLFtyIsIsW4IiwixbkiLCLFuyIsIsW9IiwixboiLCLFvCIsIsW+IiwixLIiLCLEsyIsIsWSIiwixZMiLCLFiSIsIsW/Iiwib2JqZWN0VG9TdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFRvU3RyaW5nIiwiYmFzZVRvU3RyaW5nIiwiaXNPYmplY3RMaWtlIiwiaXNTeW1ib2wiLCJ3b3JkIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlIiwicGF0dGVybiIsImd1YXJkIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwid29yZHMiLCJkZWJ1cnIiLCJyc0FzdHJhbCIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNTeW1ib2wiLCJyZVVuaWNvZGUiLCJyZUhhc1VuaWNvZGUiLCJoYXNVbmljb2RlIiwic3RyaW5nVG9BcnJheSIsInVuaWNvZGVUb0FycmF5IiwiYXNjaWlUb0FycmF5IiwiY2FzdFNsaWNlIiwiYmFzZVNsaWNlIiwidXBwZXJGaXJzdCIsIm1ldGhvZE5hbWUiLCJzdHJTeW1ib2xzIiwidHJhaWxpbmciLCJfMDc3NyIsIm1rZGlyUCIsIm1hZGUiLCJ4ZnMiLCJ1bWFzayIsIm1rZGlyIiwiZXIiLCJkaXJuYW1lIiwic3RhdCIsImVyMiIsInN5bmMiLCJta2RpclN5bmMiLCJlcnIwIiwic3RhdFN5bmMiLCJlcnIxIiwicGFzY2FsQ2FzZSIsInBvc3RQcm9jZXNzIiwiaXNMYXN0Q2hhckxvd2VyIiwiaXNMYXN0Q2hhclVwcGVyIiwiaXNMYXN0TGFzdENoYXJVcHBlciIsInByZXNlcnZlQ2FtZWxDYXNlIiwicDEiLCJzZXAiLCJhcmdTdHJpbmciLCJwcmV2QyIsIm9wZW5pbmciLCJ3ZWJwYWNrRW1wdHlDb250ZXh0IiwiY29va2llcyIsImluaXRQYXJhbXMiLCJSZXF1ZXN0IiwidmVyYkZ1bmMiLCJ2ZXJiIiwid3JhcFJlcXVlc3RNZXRob2QiLCJyZXF1ZXN0ZXIiLCJwb29sIiwiZm9yZXZlciIsImFnZW50T3B0aW9ucyIsIm9wdGlvbnNBcmciLCJwdW55Y29kZSIsIm5ldCIsInVybFBhcnNlIiwiTWVtb3J5Q29va2llU3RvcmUiLCJWRVJTSU9OIiwiY29uc29sZSIsIkNPT0tJRV9PQ1RFVFMiLCJDT05UUk9MX0NIQVJTIiwiVEVSTUlOQVRPUlMiLCJQQVRIX1ZBTFVFIiwiREFURV9ERUxJTSIsIk1PTlRIX1RPX05VTSIsImphbiIsImZlYiIsIm1hciIsImFwciIsIm1heSIsImp1biIsImp1bCIsImF1ZyIsIm9jdCIsIm5vdiIsIk5VTV9UT19NT05USCIsIk5VTV9UT19EQVkiLCJNQVhfVElNRSIsInBhcnNlRGlnaXRzIiwibWluRGlnaXRzIiwibWF4RGlnaXRzIiwidHJhaWxpbmdPSyIsInBhcnNlVGltZSIsInBhcnNlTW9udGgiLCJwYXJzZURhdGUiLCJ0b2tlbnMiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwiZGF5T2ZNb250aCIsIm1vbnRoIiwiVVRDIiwiZm9ybWF0RGF0ZSIsImdldFVUQ0RheSIsImNhbm9uaWNhbERvbWFpbiIsInRvQVNDSUkiLCJkb21haW5NYXRjaCIsImRvbVN0ciIsImNhbm9uaWNhbGl6ZSIsImlzSVAiLCJkZWZhdWx0UGF0aCIsInJpZ2h0U2xhc2giLCJwYXJzZUNvb2tpZVBhaXIiLCJjb29raWVQYWlyIiwiY29va2llTmFtZSIsImNvb2tpZVZhbHVlIiwiZmlyc3RFcSIsInRlcm1pbmF0b3JJZHgiLCJ0cmltVGVybWluYXRvciIsImZpcnN0U2VtaSIsInVucGFyc2VkIiwiY29va2llX2F2cyIsImF2IiwiYXZfa2V5IiwiYXZfdmFsdWUiLCJhdl9zZXAiLCJleHBpcmVzIiwiZGVsdGEiLCJzZXRNYXhBZ2UiLCJzZWN1cmUiLCJodHRwT25seSIsImpzb25QYXJzZSIsImZyb21KU09OIiwic2VyaWFsaXphYmxlUHJvcGVydGllcyIsImNvb2tpZUNvbXBhcmUiLCJhUGF0aExlbiIsImNyZWF0aW9uIiwiY3JlYXRpb25JbmRleCIsImdldENvb2tpZUNvbnRleHQiLCJkZWNvZGVVUkkiLCJjb29raWVzQ3JlYXRlZCIsInJlamVjdFB1YmxpY1N1ZmZpeGVzIiwiZW5hYmxlTG9vc2VNb2RlIiwibWF4QWdlIiwiaG9zdE9ubHkiLCJwYXRoSXNEZWZhdWx0IiwibGFzdEFjY2Vzc2VkIiwiaW5zcGVjdCIsIm5vdyIsImN1c3RvbSIsInByb3BzIiwidG9JU09TdHJpbmciLCJjZG9tYWluIiwic2V0RXhwaXJlcyIsImFnZSIsImNvb2tpZVN0cmluZyIsIlRUTCIsImV4cGlyeVRpbWUiLCJyZWxhdGl2ZVRvIiwiZXhwaXJ5RGF0ZSIsIm1pbGxpc2VjIiwiaXNQZXJzaXN0ZW50IiwiY2Fub25pY2FsaXplZERvbWFpbiIsIkNBTl9CRV9TWU5DIiwiaWdub3JlRXJyb3IiLCJleHBpcmVDaGVjayIsImV4cGlyZSIsImFsbFBhdGhzIiwibWF0Y2hpbmdDb29raWUiLCJnZXRTZXRDb29raWVTdHJpbmdzIiwic2VyaWFsaXplZCIsInN0b3JlVHlwZSIsInNlcmlhbGl6ZVN5bmMiLCJfaW1wb3J0Q29va2llcyIsInB1dE5leHQiLCJkZXNlcmlhbGl6ZSIsInN0ck9yT2JqIiwiZGVzZXJpYWxpemVTeW5jIiwiX2ltcG9ydENvb2tpZXNTeW5jIiwibmV3U3RvcmUiLCJzeW5jRXJyIiwic3luY1Jlc3VsdCIsInN5bmNXcmFwIiwicGVybXV0ZVBhdGgiLCJsaW5kZXgiLCJQdW55Y29kZSIsImludGVybmFscyIsInJ1bGUiLCJzdWZmaXgiLCJwdW55U3VmZml4Iiwid2lsZGNhcmQiLCJleGNlcHRpb24iLCJlbmRzV2l0aCIsImZpbmRSdWxlIiwicHVueURvbWFpbiIsIm1lbW8iLCJlcnJvckNvZGVzIiwiRE9NQUlOX1RPT19TSE9SVCIsIkRPTUFJTl9UT09fTE9ORyIsIkxBQkVMX1NUQVJUU19XSVRIX0RBU0giLCJMQUJFTF9FTkRTX1dJVEhfREFTSCIsIkxBQkVMX1RPT19MT05HIiwiTEFCRUxfVE9PX1NIT1JUIiwiTEFCRUxfSU5WQUxJRF9DSEFSUyIsImFzY2lpIiwibGFiZWwiLCJsYWJlbHMiLCJwYXJzZWQiLCJ0bGQiLCJzbGQiLCJzdWJkb21haW4iLCJsaXN0ZWQiLCJkb21haW5QYXJ0cyIsImhhbmRsZVB1bnljb2RlIiwidGxkUGFydHMiLCJwcml2YXRlUGFydHMiLCJpc1ZhbGlkIiwicGF0aE1hdGNoZXIiLCJkb21haW5JbmRleCIsInBhdGhJbmRleCIsImN1clBhdGgiLCJkb21haW5zIiwiY3VyRG9tYWluIiwic2VyaWFsaXplciIsImN5Y2xlUmVwbGFjZXIiLCJzdGFjayIsInRoaXNQb3MiLCJzcGFjZXMiLCJnZXRTZXJpYWxpemUiLCJ6bGliIiwiYXdzMiIsImF3czQiLCJodHRwU2lnbmF0dXJlIiwiY2FzZWxlc3MiLCJGb3JldmVyQWdlbnQiLCJGb3JtRGF0YSIsImlzc3RyZWFtIiwiaXNUeXBlZEFycmF5Iiwic3RyaWN0IiwiaGVscGVycyIsImdldFByb3h5RnJvbVVSSSIsIlF1ZXJ5c3RyaW5nIiwiSGFyIiwiQXV0aCIsImhhd2siLCJNdWx0aXBhcnQiLCJSZWRpcmVjdCIsIlR1bm5lbCIsImdsb2JhbENvb2tpZUphciIsImdsb2JhbFBvb2wiLCJyZXF1ZXN0VG9KU09OIiwicmVzcG9uc2VUb0pTT04iLCJoYXIiLCJfaGFyIiwicmVzZXJ2ZWQiLCJub25SZXNlcnZlZCIsImZpbHRlckZvck5vblJlc2VydmVkIiwiaXNSZXNlcnZlZCIsImlzRnVuY3Rpb24iLCJmaWx0ZXJPdXRSZXNlcnZlZEZ1bmN0aW9ucyIsImV4cGxpY2l0TWV0aG9kIiwiX3FzIiwiX2F1dGgiLCJfb2F1dGgiLCJfbXVsdGlwYXJ0IiwiX3JlZGlyZWN0IiwiX3R1bm5lbCIsIk5PREVfREVCVUciLCJoZWFkZXJOYW1lIiwibG9jYWxBZGRyZXNzIiwiZGVzdHMiLCJfX2lzUmVxdWVzdFJlcXVlc3QiLCJfY2FsbGJhY2siLCJfY2FsbGJhY2tDYWxsZWQiLCJiYXNlVXJsIiwiYmFzZVVybEVuZHNXaXRoU2xhc2giLCJ1cmlTdGFydHNXaXRoU2xhc2giLCJocmVmIiwiZW5hYmxlVW5peFNvY2tldCIsInN0cmljdFNTTCIsImlzVW5peCIsInByb3h5IiwidHVubmVsIiwiaXNFbmFibGVkIiwic2V0dXAiLCJvblJlcXVlc3QiLCJzZXRIb3N0IiwiaG9zdEhlYWRlck5hbWUiLCJvcmlnaW5hbEhvc3RIZWFkZXJOYW1lIiwiZm9ybSIsImZvcm1EYXRhIiwicmVxdWVzdEZvcm0iLCJhcHBlbmRGb3JtVmFsdWUiLCJmb3JtS2V5IiwiZm9ybVZhbHVlIiwicXMiLCJhd3MiLCJzZW5kSW1tZWRpYXRlbHkiLCJiZWFyZXIiLCJnemlwIiwidXJpQXV0aFBpZWNlcyIsInVuZXNjYXBlIiwicHJveHlBdXRoUGllY2VzIiwic2V0Q29udGVudExlbmd0aCIsInRpbWluZyIsImVsYXBzZWRUaW1lIiwiZGVmYXVsdE1vZHVsZXMiLCJodHRwOiIsImh0dHBzOiIsImh0dHBNb2R1bGVzIiwiaHR0cE1vZHVsZSIsImFnZW50IiwiYWdlbnRDbGFzcyIsIlNTTCIsIkFnZW50Iiwia2VlcEFsaXZlIiwiZ2V0TmV3QWdlbnQiLCJudGljayIsIl9zdGFydGVkIiwiX2pzb24iLCJfYWJvcnRlZCIsIl9mb3JtIiwiaGFzQXV0aCIsInNlbnRBdXRoIiwiY2h1bmtlZCIsImdldEhlYWRlcnMiLCJnZXRMZW5ndGgiLCJjaXBoZXJzIiwic2VjdXJlUHJvdG9jb2wiLCJzZWN1cmVPcHRpb25zIiwicGZ4IiwicG9vbEtleSIsImdsb2JhbEFnZW50IiwibWF4U29ja2V0cyIsInN0YXJ0VGltZSIsInN0YXJ0VGltZU5vdyIsIl9hd3MiLCJyZXFPcHRpb25zIiwidGltaW5ncyIsInRpbWVvdXRUaW1lciIsIm9uUmVxdWVzdFJlc3BvbnNlIiwib25SZXF1ZXN0RXJyb3IiLCJzb2NrZXQiLCJpc0Nvbm5lY3RpbmciLCJfY29ubmVjdGluZyIsImNvbm5lY3RpbmciLCJvbkxvb2t1cFRpbWluZyIsIm9uQ29ubmVjdFRpbWluZyIsImNvbm5lY3QiLCJyZW1vdmVMaXN0ZW5lciIsInNldFJlcVRpbWVvdXQiLCJvblJlcVNvY2tDb25uZWN0IiwiY2xlYXJUaW1lb3V0IiwiX3JldXNlZFNvY2tldCIsImFkZFJlcXVlc3ROb3JldXNlIiwiYWRkUmVxdWVzdCIsInRpbWluZ1N0YXJ0Iiwicm91bmQiLCJ0aW1pbmdQaGFzZXMiLCJ3YWl0IiwiZG5zIiwidGNwIiwiZmlyc3RCeXRlIiwiZG93bmxvYWQiLCJ0b3RhbCIsImF1dGhvcml6ZWQiLCJvcmlnaW5hbEhvc3QiLCJ0YXJnZXRDb29raWVKYXIiLCJhZGRDb29raWUiLCJfZGlzYWJsZUNvb2tpZXMiLCJvblJlc3BvbnNlIiwiX2VuZGVkIiwicmVzcG9uc2VDb250ZW50IiwiY29udGVudEVuY29kaW5nIiwiemxpYk9wdGlvbnMiLCJmbHVzaCIsIlpfU1lOQ19GTFVTSCIsImZpbmlzaEZsdXNoIiwiY3JlYXRlR3VuemlwIiwiY3JlYXRlSW5mbGF0ZSIsIl9wYXVzZWQiLCJwaXBlRGVzdCIsInJlc3BvbnNlU3RhcnRlZCIsInJlc3BvbnNlU3RhcnRUaW1lIiwiX2Rlc3RkYXRhIiwicmVhZFJlc3BvbnNlQm9keSIsInNzbEVyciIsImF1dGhvcml6YXRpb25FcnJvciIsImJ1ZmZlcnMiLCJidWZmZXJMZW5ndGgiLCJfanNvblJldml2ZXIiLCJoZWFkZXJzU2VudCIsImN0bmFtZSIsImNsbmFtZSIsInBpcGVmaWx0ZXIiLCJyZmMzOTg2IiwianNvblJlcGxhY2VyIiwiX2pzb25SZXBsYWNlciIsImpzb25SZXZpdmVyIiwicmUiLCJ1bml4UGFydHMiLCJzb2NrZXRQYXRoIiwic2lnbl92ZXJzaW9uIiwic2VydmljZSIsInNpZ25SZXMiLCJhY2Nlc3NLZXlJZCIsInNlY3JldEFjY2Vzc0tleSIsInNlc3Npb25Ub2tlbiIsInNlc3Npb24iLCJBdXRob3JpemF0aW9uIiwidG9VVENTdHJpbmciLCJhbWF6b25IZWFkZXJzIiwiY2Fub25pY2FsaXplSGVhZGVycyIsImJ1Y2tldCIsInJlc291cmNlIiwiY2Fub25pY2FsaXplUmVzb3VyY2UiLCJzaWduUmVxdWVzdCIsInJlZGlyZWN0c0ZvbGxvd2VkIiwib3JpZ2luYWxDb29raWVIZWFkZXIiLCJ1cmlocmVmIiwiZGVmYXVsdFByb3h5SGVhZGVyV2hpdGVMaXN0IiwiZGVmYXVsdFByb3h5SGVhZGVyRXhjbHVzaXZlTGlzdCIsImhtYWNTaGExIiwic3RyaW5nVG9TaWduIiwicXVlcnlTdHJpbmdUb1NpZ24iLCJzaWduUXVlcnkiLCJmaWVsZHMiLCJjcmVkZW50aWFsc0NhY2hlIiwibHJ1IiwiZW5jb2RlUmZjMzk4NiIsInVybEVuY29kZWRTdHJpbmciLCJSZXF1ZXN0U2lnbmVyIiwiY3JlZGVudGlhbHMiLCJob3N0UGFydHMiLCJtYXRjaEhvc3QiLCJIb3N0IiwiZGVmYXVsdENyZWRlbnRpYWxzIiwicmVnaW9uIiwiY3JlYXRlSG9zdCIsImlzQ29kZUNvbW1pdEdpdCIsImlzU2luZ2xlUmVnaW9uIiwicHJlcGFyZVJlcXVlc3QiLCJwYXJzZVBhdGgiLCJwYXJzZWRQYXRoIiwiZGF0ZXRpbWUiLCJnZXREYXRlVGltZSIsImNyZWRlbnRpYWxTdHJpbmciLCJzaWduZWRIZWFkZXJzIiwiZG9Ob3RNb2RpZnlIZWFkZXJzIiwiZm9ybWF0UGF0aCIsImdldERhdGUiLCJrRGF0ZSIsImtSZWdpb24iLCJrU2VydmljZSIsImtDcmVkZW50aWFscyIsImNhbm9uaWNhbFN0cmluZyIsImJvZHlIYXNoIiwicGF0aFN0ciIsInF1ZXJ5U3RyIiwibm9ybWFsaXplUGF0aCIsImRlY29kZVBhdGgiLCJkb05vdEVuY29kZVBhdGgiLCJkZWNvZGVTbGFzaGVzSW5QYXRoIiwiZmlyc3RWYWxPbmx5IiwicGllY2UiLCJjYW5vbmljYWxIZWFkZXJzIiwiQVdTX0FDQ0VTU19LRVlfSUQiLCJBV1NfQUNDRVNTX0tFWSIsIkFXU19TRUNSRVRfQUNDRVNTX0tFWSIsIkFXU19TRUNSRVRfS0VZIiwiQVdTX1NFU1NJT05fVE9LRU4iLCJxdWVyeUl4IiwiTHJ1Q2FjaGUiLCJjYXBhY2l0eSIsIkRvdWJseUxpbmtlZExpc3QiLCJmaXJzdE5vZGUiLCJsYXN0Tm9kZSIsIkRvdWJseUxpbmtlZE5vZGUiLCJ1c2VkIiwicHJ1bmUiLCJtb3ZlVG9Gcm9udCIsInJlbW92ZSIsInBhcnNlciIsInBhcnNlUmVxdWVzdCIsImNyZWF0ZVNpZ25lciIsImlzU2lnbmVyIiwic3NoS2V5RmluZ2VycHJpbnQiLCJ2ZXJpZnlTaWduYXR1cmUiLCJ2ZXJpZnlITUFDIiwiU3RhdGUiLCJQYXJhbXNTdGF0ZSIsIkV4cGlyZWRSZXF1ZXN0RXJyb3IiLCJJbnZhbGlkSGVhZGVyRXJyb3IiLCJJbnZhbGlkUGFyYW1zRXJyb3IiLCJNaXNzaW5nSGVhZGVyRXJyb3IiLCJTdHJpY3RQYXJzaW5nRXJyb3IiLCJhcnJheU9mU3RyaW5nIiwib3B0aW9uYWxGaW5pdGUiLCJjbG9ja1NrZXciLCJhdXRoekhlYWRlck5hbWUiLCJhdXRob3JpemF0aW9uSGVhZGVyTmFtZSIsInN1YnN0YXRlIiwidG1wTmFtZSIsInRtcFZhbHVlIiwic2NoZW1lIiwic2lnbmluZ1N0cmluZyIsImF1dGh6Iiwia2V5SWQiLCJodHRwVmVyc2lvbiIsInNrZXciLCJoZHIiLCJBU04xIiwiX2xlbiIsInJlYWRMZW5ndGgiLCJsZW5CIiwic2VxIiwiX3JlYWRUYWciLCJyZWFkRW51bWVyYXRpb24iLCJyZXRidWYiLCJ2YWx1ZXMiLCJieXRlIiwiZmIiLCJERUZBVUxUX09QVFMiLCJncm93dGhGYWN0b3IiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX29wdGlvbnMiLCJfc2VxIiwid3JpdGVFbnVtZXJhdGlvbiIsIndyaXRlTGVuZ3RoIiwid3JpdGVTdHJpbmdBcnJheSIsIm9jdGV0IiwiZW5jb2RlT2N0ZXQiLCJfc2hpZnQiLCJ1bnN0dXBpZCIsImhleCIsIkVDQ3VydmVzIiwiRUNLZXkiLCJpc1B1YmxpYyIsIlB1YmxpY0tleSIsImZyb21IZXgiLCJzZWNwMTI4cjEiLCJzZWNwMTYwazEiLCJzZWNwMTYwcjEiLCJzZWNwMTkyazEiLCJzZWNwMTkycjEiLCJzZWNwMjI0cjEiLCJzZWNwMjU2cjEiLCJmcm9tQnVmZmVyIiwiZ2V0Q2VydFR5cGUiLCJUWVBFUyIsIkVDRFNBX0FMR08iLCJpbm5lckFsZ28iLCJjZXJ0VHlwZSIsImdldEFsZyIsInByaW5jaXBhbHMiLCJwYnVmIiwicHNzaGJ1ZiIsInByIiwiaW50NjRUb0RhdGUiLCJleHRidWYiLCJzaWduaW5nS2V5QnVmIiwic291cmNlSW50NjQiLCJkYXRlVG9JbnQ2NCIsInVwcGVyIiwibG93ZXIiLCJub1NpZyIsIm5vdFN0cmljdEVxdWFsIiwic3ViIiwiZGJ1ZiIsImpzcHJpbSIsInNwcmludGYiLCJBVVRIWl9GTVQiLCJyc19hbGciLCJyc19zaWduRnVuYyIsInJzX2tleUlkIiwicnNfc2lnbmVyIiwicnNfa2V5IiwicnNfaGVhZGVycyIsInJzX2xpbmVzIiwid3JpdGVIZWFkZXIiLCJ3cml0ZURhdGVIZWFkZXIiLCJyZmMxMTIzIiwid3JpdGVUYXJnZXQiLCJfc3RyaW5nVG9TaWduIiwibW9kX2Fzc2VydCIsIm1vZF9leHRzcHJpbnRmIiwibW9kX3ZlcnJvciIsIm1vZF9qc29uc2NoZW1hIiwiZGVlcENvcHkiLCJtYXJrZXIiLCJvYmoxIiwib2JqMiIsImlzRW1wdHkiLCJmb3JFYWNoS2V5IiwicGx1Y2siLCJwbHVja3YiLCJrZXkxIiwiZmxhdHRlbk9iamVjdCIsInJ2IiwiZmxhdHRlbkl0ZXIiLCJkb0ZsYXR0ZW5JdGVyIiwiYWNjdW0iLCJlYWNoIiwidmFsaWRhdGVKc29uT2JqZWN0IiwidmFsaWRhdGVKc29uT2JqZWN0SlMiLCJyYW5kRWx0IiwiZXh0cmFQcm9wZXJ0aWVzIiwiYWxsb3dlZCIsIm1lcmdlT2JqZWN0cyIsInN0YXJ0c1dpdGgiLCJwYXJzZUludGVnZXIiLCJ1b3B0cyIsImJhc2VPdmVycmlkZSIsIlBJX0RFRkFVTFRTIiwiYWxsb3dTaWduIiwiYWxsb3dQcmVmaXgiLCJhbGxvd1RyYWlsaW5nIiwiYWxsb3dJbXByZWNpc2UiLCJ0cmltV2hpdGVzcGFjZSIsImxlYWRpbmdaZXJvSXNPY3RhbCIsInBiYXNlIiwibXVsdCIsImlzU3BhY2UiLCJDUF9iIiwiQ1BfQiIsIkNQX28iLCJDUF9PIiwiQ1BfdCIsIkNQX1QiLCJDUF94IiwiQ1BfWCIsInByZWZpeFRvQmFzZSIsInRyYW5zbGF0ZURpZ2l0IiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJpc284NjAxIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiUkZDMTEyM19EQVlTIiwiUkZDMTEyM19NT05USFMiLCJwYXJzZURhdGVUaW1lIiwibnVtZXJpYyIsImhydGltZWRpZmYiLCJocnRpbWVEaWZmIiwiaHJ0aW1lQWNjdW0iLCJocnRpbWVBZGQiLCJhc3NlcnRIcnRpbWUiLCJocnRpbWVOYW5vc2VjIiwiaHJ0aW1lTWljcm9zZWMiLCJocnRpbWVNaWxsaXNlYyIsIkNQXzAiLCJDUF85IiwiQ1BfQSIsIkNQX1oiLCJDUF9hIiwiQ1BfeiIsIlBJX0NPTlZfREVDIiwiUElfQ09OVl9VQyIsIlBJX0NPTlZfTEMiLCJyZXBvcnQiLCJwcm9wbmFtZSIsInJlYXNvbiIsIlZFcnJvciIsImpzdl9kZXRhaWxzIiwicHJvdmlkZWQiLCJvdmVycmlkZXMiLCJtb2RfdXRpbCIsImpzU3ByaW50ZiIsIndpZHRoIiwicHJlY2lzaW9uIiwiY29udmVyc2lvbiIsImxlZnQiLCJyZWdleCIsImFyZ24iLCJkb1BhZCIsImR1bXBFeGNlcHRpb24iLCJqc0ZwcmludGYiLCJjYXVzZSIsImNleCIsInByaW50ZiIsImZwcmludGYiLCJtb2RfYXNzZXJ0cGx1cyIsIm1vZF9pc0Vycm9yIiwiaXNFcnJvciIsInBhcnNlQ29uc3RydWN0b3JBcmd1bWVudHMiLCJzcHJpbnRmX2FyZ3MiLCJzaG9ydG1lc3NhZ2UiLCJjdG9yIiwianNlX3Nob3J0bXNnIiwianNlX2NhdXNlIiwic2tpcENhdXNlTWVzc2FnZSIsImpzZV9pbmZvIiwiY29uc3RydWN0b3JPcHQiLCJTRXJyb3IiLCJNdWx0aUVycm9yIiwiYXNlX2Vycm9ycyIsIldFcnJvciIsImZpbmRDYXVzZUJ5TmFtZSIsImhhc0NhdXNlV2l0aE5hbWUiLCJmdWxsU3RhY2siLCJlcnJvckZyb21MaXN0IiwiZXJyb3JGb3JFYWNoIiwib2ZtdCIsImNvbnZwb3NuIiwiY3VyY29udiIsInBvc24iLCJqc0Vycm9yIiwiZm10c3RyIiwiaXNCb29sZWFuIiwiaXNOdWxsIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc1N0cmluZyIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNQcmltaXRpdmUiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsInByaW1pdGl2ZUNvbnN0cnVjdG9ycyIsImluc3RhbmNlIiwiY2hhbmdpbmciLCJjaGVja1Byb3BlcnR5Q2hhbmdlIiwiX3ZhbGlkYXRlIiwiX2NoYW5naW5nIiwiZ2V0VHlwZSIsImNoZWNrUHJvcCIsImFkZEVycm9yIiwiY2hlY2tUeXBlIiwidW5pb25FcnJvcnMiLCJwcmlvckVycm9ycyIsInRoZXNlRXJyb3JzIiwicmVhZG9ubHkiLCJyZXF1aXJlZCIsImRpc2FsbG93IiwiaXRlbXNJc0FycmF5IiwicHJvcERlZiIsIm1pbkl0ZW1zIiwibWF4SXRlbXMiLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsIm9ialR5cGVEZWYiLCJhZGRpdGlvbmFsUHJvcCIsImV4aXN0aW5nT25seSIsInJlcXVpcmVzIiwiY2hlY2tPYmoiLCJtYXhMZW5ndGgiLCJtaW5MZW5ndGgiLCJtaW5pbXVtIiwibWF4aW11bSIsImVudW1lciIsIm1heERlY2ltYWwiLCJtdXN0QmVWYWxpZCIsImZhY3RvcnkiLCJwYXJzZWRTaWduYXR1cmUiLCJwdWJrZXkiLCJGb3JldmVyQWdlbnRTU0wiLCJ0bHMiLCJBZ2VudFNTTCIsImdldENvbm5lY3Rpb25OYW1lIiwicmVxdWVzdHMiLCJzb2NrZXRzIiwiZnJlZVNvY2tldHMiLCJkZWZhdWx0TWF4U29ja2V0cyIsIm1pblNvY2tldHMiLCJkZWZhdWx0TWluU29ja2V0cyIsIm9uU29ja2V0Iiwib25JZGxlRXJyb3IiLCJfb25JZGxlRXJyb3IiLCJjcmVhdGVDb25uZWN0aW9uIiwidXNlQ2h1bmtlZEVuY29kaW5nQnlEZWZhdWx0IiwiaWRsZVNvY2tldCIsInJlbW92ZVNvY2tldCIsImNyZWF0ZVNvY2tldCIsInBhcnNlVXJsIiwiYXN5bmNraXQiLCJwb3B1bGF0ZSIsIl9vdmVyaGVhZExlbmd0aCIsIl92YWx1ZUxlbmd0aCIsIl92YWx1ZXNUb01lYXN1cmUiLCJMSU5FX0JSRUFLIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJfZXJyb3IiLCJfbXVsdGlQYXJ0SGVhZGVyIiwiZm9vdGVyIiwiX211bHRpUGFydEZvb3RlciIsIl90cmFja0xlbmd0aCIsInZhbHVlTGVuZ3RoIiwia25vd25MZW5ndGgiLCJfbGVuZ3RoUmV0cmlldmVyIiwiZmlsZVNpemUiLCJjb250ZW50RGlzcG9zaXRpb24iLCJfZ2V0Q29udGVudERpc3Bvc2l0aW9uIiwiX2dldENvbnRlbnRUeXBlIiwiY29udGVudHMiLCJDb250ZW50LURpc3Bvc2l0aW9uIiwiQ29udGVudC1UeXBlIiwiZ2V0Qm91bmRhcnkiLCJmaWxlcGF0aCIsImJhc2VuYW1lIiwiY2xpZW50IiwiX2h0dHBNZXNzYWdlIiwiX2xhc3RCb3VuZGFyeSIsInVzZXJIZWFkZXJzIiwiZm9ybUhlYWRlcnMiLCJjb250ZW50LXR5cGUiLCJfYm91bmRhcnkiLCJfZ2VuZXJhdGVCb3VuZGFyeSIsImJvdW5kYXJ5IiwiZ2V0TGVuZ3RoU3luYyIsImhhc0tub3duTGVuZ3RoIiwicGFyYWxsZWwiLCJzdWJtaXQiLCJfbWF4RGF0YVNpemVFeGNlZWRlZCIsIl9idWZmZXJlZEV2ZW50cyIsImRlbGF5ZWRTdHJlYW0iLCJyZWFsRW1pdCIsIl9oYW5kbGVFbWl0IiwicmVsZWFzZSIsIl9jaGVja0lmTWF4RGF0YVNpemVFeGNlZWRlZCIsInNlcmlhbE9yZGVyZWQiLCJpc1N0cmljdFR5cGVkQXJyYXkiLCJpc0xvb3NlVHlwZWRBcnJheSIsIm5hbWVzIiwiW29iamVjdCBJbnQ4QXJyYXldIiwiW29iamVjdCBJbnQxNkFycmF5XSIsIltvYmplY3QgSW50MzJBcnJheV0iLCJbb2JqZWN0IFVpbnQ4QXJyYXldIiwiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0iLCJbb2JqZWN0IFVpbnQxNkFycmF5XSIsIltvYmplY3QgVWludDMyQXJyYXldIiwiW29iamVjdCBGbG9hdDMyQXJyYXldIiwiW29iamVjdCBGbG9hdDY0QXJyYXldIiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiRmxvYXQzMkFycmF5IiwiZm9ybWF0SG9zdG5hbWUiLCJwYXJzZU5vUHJveHlab25lIiwiem9uZSIsInpvbmVQYXJ0cyIsImhhc1BvcnQiLCJub1Byb3h5IiwiTk9fUFJPWFkiLCJub19wcm94eSIsInNvbWUiLCJub1Byb3h5Wm9uZSIsImlzTWF0Y2hlZEF0IiwiaG9zdG5hbWVNYXRjaGVkIiwidXJpSW5Ob1Byb3h5IiwiSFRUUF9QUk9YWSIsImh0dHBfcHJveHkiLCJIVFRQU19QUk9YWSIsImh0dHBzX3Byb3h5IiwibGliIiwidXNlUXVlcnlzdHJpbmciLCJwYXJzZU9wdGlvbnMiLCJzdHJpbmdpZnlPcHRpb25zIiwicXNQYXJzZU9wdGlvbnMiLCJxc1N0cmluZ2lmeU9wdGlvbnMiLCJlcSIsImFycmF5UHJlZml4R2VuZXJhdG9ycyIsImJyYWNrZXRzIiwiaW5kaWNlcyIsInJlcGVhdCIsInRvSVNPIiwiZGVsaW1pdGVyIiwiZW5jb2RlciIsImVuY29kZVZhbHVlc09ubHkiLCJzZXJpYWxpemVEYXRlIiwic2tpcE51bGxzIiwic3RyaWN0TnVsbEhhbmRsaW5nIiwiZ2VuZXJhdGVBcnJheVByZWZpeCIsImFsbG93RG90cyIsImZvcm1hdHRlciIsIm9iaktleXMiLCJhcnJheUZvcm1hdCIsImpvaW5lZCIsImFkZFF1ZXJ5UHJlZml4IiwiYXJyYXlMaW1pdCIsImRlY29kZXIiLCJwYXJhbWV0ZXJMaW1pdCIsInBhcnNlS2V5cyIsImdpdmVuS2V5IiwiY2hhaW4iLCJsZWFmIiwiY2xlYW5Sb290IiwicGFyc2VBcnJheXMiLCJwYXJzZU9iamVjdCIsImlnbm9yZVF1ZXJ5UHJlZml4IiwidGVtcE9iaiIsImNsZWFuU3RyIiwiYnJhY2tldEVxdWFsc1BvcyIsInBhcnNlVmFsdWVzIiwicHJlcCIsInF1ZXJ5T2JqIiwiaGVhZGVyc09iaiIsInBvc3REYXRhIiwianNvbk9iaiIsInBhcmFtc09iaiIsInF1ZXJ5U3RyaW5nIiwicmVkdWNlUmlnaHQiLCJtaW1lVHlwZSIsInRleHQiLCJib2R5U2l6ZSIsImhlYWRlcnNTaXplIiwicGFyYW0iLCJmaWxlTmFtZSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJBanYiLCJIQVJFcnJvciIsInNjaGVtYXMiLCJhZGRNZXRhU2NoZW1hIiwiYWRkU2NoZW1hIiwiY3JlYXRlQWp2SW5zdGFuY2UiLCJnZXRTY2hlbWEiLCJhZnRlclJlcXVlc3QiLCJiZWZvcmVSZXF1ZXN0IiwiYnJvd3NlciIsImNvbnRlbnQiLCJjcmVhdG9yIiwicGFnZSIsInBhZ2VUaW1pbmdzIiwiY29tcGlsZVNjaGVtYSIsIkNhY2hlIiwic3RhYmxlU3RyaW5naWZ5IiwiJGRhdGFNZXRhU2NoZW1hIiwic2NoZW1hS2V5UmVmIiwic2NoZW1hT2JqIiwiX2FkZFNjaGVtYSIsIl9tZXRhIiwiX3NraXBWYWxpZGF0aW9uIiwiY2hlY2tVbmlxdWUiLCJza2lwVmFsaWRhdGlvbiIsInZhbGlkYXRlU2NoZW1hIiwidGhyb3dPckxvZ0Vycm9yIiwiZGVmYXVsdE1ldGEiLCJtZXRhIiwiTUVUQV9TQ0hFTUFfSUQiLCJlcnJvcnNUZXh0Iiwia2V5UmVmIiwiX2dldFNjaGVtYU9iaiIsIl9mcmFnbWVudHMiLCJfZ2V0U2NoZW1hRnJhZ21lbnQiLCJyZW1vdmVTY2hlbWEiLCJfcmVtb3ZlQWxsU2NoZW1hcyIsIl9jYWNoZSIsImNsZWFyIiwiYWRkRm9ybWF0IiwiX2Zvcm1hdHMiLCJzZXBhcmF0b3IiLCJkYXRhUGF0aCIsInNob3VsZEFkZFNjaGVtYSIsImNhY2hlZCIsImFkZFVzZWRTY2hlbWEiLCJyZWN1cnNpdmVNZXRhIiwid2lsbFZhbGlkYXRlIiwiY29tcGlsaW5nIiwiY2FsbFZhbGlkYXRlIiwiY3VycmVudE9wdHMiLCJfbWV0YU9wdHMiLCJjb21waWxlQXN5bmMiLCJjdXN0b21LZXl3b3JkIiwiYWRkS2V5d29yZCIsImdldEtleXdvcmQiLCJyZW1vdmVLZXl3b3JkIiwiZXJyb3JDbGFzc2VzIiwiVmFsaWRhdGlvbkVycm9yIiwiTUVUQV9JR05PUkVfT1BUSU9OUyIsIk1FVEFfU1VQUE9SVF9EQVRBIiwic2V0TG9nZ2VyIiwiX2xvYWRpbmdTY2hlbWFzIiwiX2NvbXBpbGF0aW9ucyIsIl9nZXQkSWRPcklkIiwiX2dldCRJZCIsImNob29zZUdldElkIiwibG9vcFJlcXVpcmVkIiwiZXJyb3JEYXRhUGF0aCIsIl9lcnJvckRhdGFQYXRoUHJvcGVydHkiLCJtZXRhT3B0cyIsImdldE1ldGFTY2hlbWFPcHRpb25zIiwiYWRkSW5pdGlhbEZvcm1hdHMiLCIkZGF0YVNjaGVtYSIsIm1ldGFTY2hlbWEiLCJhZGREZWZhdWx0TWV0YVNjaGVtYSIsImNvbnN0Iiwib3B0c1NjaGVtYXMiLCJhZGRJbml0aWFsU2NoZW1hcyIsInZhbGlkYXRlR2VuZXJhdG9yIiwiY29tcEluZGV4IiwicGF0dGVybkNvZGUiLCJwYXR0ZXJucyIsImRlZmF1bHRDb2RlIiwicmVmVmFsQ29kZSIsImN1c3RvbVJ1bGVDb2RlIiwidmFycyIsInN0YXRlbWVudCIsInBhdHRlcm5zSGFzaCIsImRlZmF1bHRzSGFzaCIsImN1c3RvbVJ1bGVzIiwiY29tcGlsYXRpb24iLCJsb2NhbENvbXBpbGUiLCJjdiIsIl9zY2hlbWEiLCJfcm9vdCIsImlzUm9vdCIsImVycm9yUGF0aCIsInJlc29sdmVSZWYiLCJ1c2VQYXR0ZXJuIiwidXNlQ3VzdG9tUnVsZSIsIm1ha2VWYWxpZGF0ZSIsIl9yZWZWYWwiLCJyZWZDb2RlIiwicmVmSW5kZXgiLCJyZXNvbHZlZFJlZiIsInJvb3RSZWZJZCIsImFkZExvY2FsUmVmIiwibG9jYWxTY2hlbWEiLCJyZWZJZCIsInJlcGxhY2VMb2NhbFJlZiIsInJlbW92ZUxvY2FsUmVmIiwiaW5saW5lIiwicmVnZXhTdHIiLCJ2YWx1ZVN0ciIsImRlZmluaXRpb24iLCJtYWNybyIsInNldHMiLCJzdWJleHAiLCJ0eXBlT2YiLCJidWlsZEV4cHMiLCJpc0lSSSIsIkhFWERJRyQkIiwiUENUX0VOQ09ERUQkIiwiU1VCX0RFTElNUyQkIiwiUkVTRVJWRUQkJCIsIlVDU0NIQVIkJCIsIklQUklWQVRFJCQiLCJVTlJFU0VSVkVEJCQiLCJTQ0hFTUUkIiwiVVNFUklORk8kIiwiREVDX09DVEVUX1JFTEFYRUQkIiwiSVBWNEFERFJFU1MkIiwiSDE2JCIsIkxTMzIkIiwiSVBWNkFERFJFU1MxJCIsIklQVjZBRERSRVNTMiQiLCJJUFY2QUREUkVTUzMkIiwiSVBWNkFERFJFU1M0JCIsIklQVjZBRERSRVNTNSQiLCJJUFY2QUREUkVTUzYkIiwiSVBWNkFERFJFU1M3JCIsIklQVjZBRERSRVNTOCQiLCJJUFY2QUREUkVTUzkkIiwiSVBWNkFERFJFU1MkIiwiWk9ORUlEJCIsIklQVjZBRERSWl9SRUxBWEVEJCIsIklQVkZVVFVSRSQiLCJJUF9MSVRFUkFMJCIsIlJFR19OQU1FJCIsIkhPU1QkIiwiUE9SVCQiLCJESUdJVCQkIiwiQVVUSE9SSVRZJCIsIlBDSEFSJCIsIlNFR01FTlQkIiwiU0VHTUVOVF9OWiQiLCJTRUdNRU5UX05aX05DJCIsIlBBVEhfQUJFTVBUWSQiLCJQQVRIX0FCU09MVVRFJCIsIlBBVEhfTk9TQ0hFTUUkIiwiUEFUSF9ST09UTEVTUyQiLCJQQVRIX0VNUFRZJCIsIlFVRVJZJCIsIkZSQUdNRU5UJCIsIkhJRVJfUEFSVCQiLCJVUkkkIiwiUkVMQVRJVkVfUEFSVCQiLCJSRUxBVElWRSQiLCJOT1RfU0NIRU1FIiwiTk9UX1VTRVJJTkZPIiwiTk9UX0hPU1QiLCJOT1RfUEFUSCIsIk5PVF9QQVRIX05PU0NIRU1FIiwiTk9UX1FVRVJZIiwiTk9UX0ZSQUdNRU5UIiwiRVNDQVBFIiwiVU5SRVNFUlZFRCIsIk9USEVSX0NIQVJTIiwiUENUX0VOQ09ERUQiLCJJUFY0QUREUkVTUyIsIklQVjZBRERSRVNTIiwiVVJJX1BST1RPQ09MIiwiSVJJX1BST1RPQ09MIiwic2xpY2VkVG9BcnJheSIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwic2xpY2VJdGVyYXRvciIsIm1heEludCIsInJlZ2V4UHVueWNvZGUiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwib3ZlcmZsb3ciLCJub3QtYmFzaWMiLCJpbnZhbGlkLWlucHV0Iiwic3RyaW5nRnJvbUNoYXJDb2RlIiwiZnJvbUNoYXJDb2RlIiwiZXJyb3IkMSIsIm1hcERvbWFpbiIsImVuY29kZWQiLCJ1Y3MyZGVjb2RlIiwiY291bnRlciIsImV4dHJhIiwiZGlnaXRUb0Jhc2ljIiwiZGlnaXQiLCJhZGFwdCIsIm51bVBvaW50cyIsImZpcnN0VGltZSIsImJhc2VNaW51c1RNaW4iLCJjb2RlUG9pbnQiLCJpbnB1dExlbmd0aCIsImJpYXMiLCJiYXNpYyIsIm9sZGkiLCJiYXNlTWludXNUIiwiZnJvbUNvZGVQb2ludCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJfY3VycmVudFZhbHVlMiIsInJldHVybiIsImJhc2ljTGVuZ3RoIiwiaGFuZGxlZENQQ291bnQiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJjdXJyZW50VmFsdWUiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyIsIl9kaWRJdGVyYXRvckVycm9yMyIsIl9pdGVyYXRvckVycm9yMyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJfY3VycmVudFZhbHVlIiwicU1pbnVzVCIsInVjczIiLCJ0b0NvbnN1bWFibGVBcnJheSIsInRvVW5pY29kZSIsIlNDSEVNRVMiLCJwY3RFbmNDaGFyIiwicGN0RGVjQ2hhcnMiLCJuZXdTdHIiLCJpbCIsImMyIiwiX2MiLCJjMyIsIl9ub3JtYWxpemVDb21wb25lbnRFbmNvZGluZyIsImRlY29kZVVucmVzZXJ2ZWQiLCJkZWNTdHIiLCJ1c2VyaW5mbyIsIl9zdHJpcExlYWRpbmdaZXJvcyIsIl9ub3JtYWxpemVJUHY0IiwiX21hdGNoZXMiLCJhZGRyZXNzIiwiX25vcm1hbGl6ZUlQdjYiLCJfbWF0Y2hlczIiLCJfYWRkcmVzcyR0b0xvd2VyQ2FzZSQiLCJfYWRkcmVzcyR0b0xvd2VyQ2FzZSQyIiwibGFzdCIsImZpcnN0IiwiZmlyc3RGaWVsZHMiLCJsYXN0RmllbGRzIiwiaXNMYXN0RmllbGRJUHY0QWRkcmVzcyIsImZpZWxkQ291bnQiLCJsYXN0RmllbGRzU3RhcnQiLCJhbGxaZXJvRmllbGRzIiwibGFzdExvbmdlc3QiLCJsb25nZXN0WmVyb0ZpZWxkcyIsIm5ld0hvc3QiLCJuZXdGaXJzdCIsIm5ld0xhc3QiLCJVUklfUEFSU0UiLCJOT19NQVRDSF9JU19VTkRFRklORUQiLCJ1cmlTdHJpbmciLCJpcmkiLCJyZWZlcmVuY2UiLCJzY2hlbWVIYW5kbGVyIiwidW5pY29kZVN1cHBvcnQiLCJkb21haW5Ib3N0IiwiUkRTMSIsIlJEUzIiLCJSRFMzIiwiUkRTNSIsInJlbW92ZURvdFNlZ21lbnRzIiwiaW0iLCJ1cmlUb2tlbnMiLCJhdXRob3JpdHkiLCIkMSIsIiQyIiwiX3JlY29tcG9zZUF1dGhvcml0eSIsImFic29sdXRlUGF0aCIsInJlc29sdmVDb21wb25lbnRzIiwicmVsYXRpdmUiLCJza2lwTm9ybWFsaXphdGlvbiIsInRvbGVyYW50IiwidW5lc2NhcGVDb21wb25lbnQiLCJoYW5kbGVyIiwiaGFuZGxlciQxIiwiTyIsIlZDSEFSJCQiLCJOT1RfTE9DQUxfUEFSVCIsIk5PVF9IRk5BTUUiLCJOT1RfSEZWQUxVRSIsImhhbmRsZXIkMiIsIm1haWx0b0NvbXBvbmVudHMiLCJ1bmtub3duSGVhZGVycyIsImhmaWVsZHMiLCJoZmllbGQiLCJ0b0FkZHJzIiwiX3giLCJfeGwiLCJfeDIiLCJfeGwyIiwiYWRkciIsInNldEludGVydmFsIiwidG9BZGRyIiwiYXRJZHgiLCJsb2NhbFBhcnQiLCJVUk5fUEFSU0UiLCJoYW5kbGVyJDMiLCJ1cm5Db21wb25lbnRzIiwibmlkIiwibnNzIiwidXJuU2NoZW1lIiwidXJpQ29tcG9uZW50cyIsIlVVSUQiLCJoYW5kbGVyJDQiLCJ1dWlkQ29tcG9uZW50cyIsImJhc2VVUkkiLCJyZWxhdGl2ZVVSSSIsInNjaGVtZWxlc3NPcHRpb25zIiwidXJpQSIsInVyaUIiLCJlc2NhcGVDb21wb25lbnQiLCJfdHJhdmVyc2UiLCJwcmUiLCJhcnJheUtleXdvcmRzIiwicHJvcHNLZXl3b3JkcyIsImtleXdvcmRzIiwic2tpcEtleXdvcmRzIiwiYWRkaXRpb25hbEl0ZW1zIiwiY29udGFpbnMiLCJwcm9wZXJ0eU5hbWVzIiwiYWxsT2YiLCJhbnlPZiIsIm9uZU9mIiwiZGVmaW5pdGlvbnMiLCJwYXR0ZXJuUHJvcGVydGllcyIsImRlcGVuZGVuY2llcyIsImVudW0iLCJleGNsdXNpdmVNYXhpbXVtIiwiZXhjbHVzaXZlTWluaW11bSIsIm11bHRpcGxlT2YiLCJ1bmlxdWVJdGVtcyIsIm1heFByb3BlcnRpZXMiLCJtaW5Qcm9wZXJ0aWVzIiwiREFURSIsIkRBWVMiLCJUSU1FIiwiSE9TVE5BTUUiLCJVUklURU1QTEFURSIsIkpTT05fUE9JTlRFUl9VUklfRlJBR01FTlQiLCJkYXkiLCJpc0xlYXBZZWFyIiwiZnVsbCIsInRpbWVab25lIiwiZmFzdCIsImRhdGUtdGltZSIsInVyaS1yZWZlcmVuY2UiLCJ1cmktdGVtcGxhdGUiLCJpcHY0IiwiaXB2NiIsImpzb24tcG9pbnRlciIsImpzb24tcG9pbnRlci11cmktZnJhZ21lbnQiLCJyZWxhdGl2ZS1qc29uLXBvaW50ZXIiLCJkYXRlVGltZSIsIkRBVEVfVElNRV9TRVBBUkFUT1IiLCJOT1RfVVJJX0ZSQUdNRU5UIiwiWl9BTkNIT1IiLCJydWxlTW9kdWxlcyIsIkFMTCIsImltcGxLZXl3b3JkcyIsImlmIiwiJHJlZkNvZGUiLCIkcmVmVmFsIiwiJG1lc3NhZ2UiLCJtaXNzaW5nUmVmcyIsIiRpdCIsIiRuZXh0VmFsaWQiLCJwYXNzQ29udGV4dCIsIl9fY2FsbFZhbGlkYXRlIiwiJGNsb3NpbmdCcmFjZXMiLCIkY3VycmVudEJhc2VJZCIsIiRhbGxTY2hlbWFzRW1wdHkiLCIkZXJycyIsImV2ZXJ5IiwiJHdhc0NvbXBvc2l0ZSIsIiRpZHgiLCIkZGF0YU54dCIsIiRuZXh0RGF0YSIsIiRub25FbXB0eVNjaGVtYSIsIiRzY2hlbWFEZXBzIiwiJHByb3BlcnR5RGVwcyIsIiRvd25Qcm9wZXJ0aWVzIiwib3duUHJvcGVydGllcyIsIiRwcm9wZXJ0eSIsIiRkZXBzIiwiJGN1cnJlbnRFcnJvclBhdGgiLCIkdXNlRGF0YSIsIiRwcm9wIiwiJHByb3BlcnR5UGF0aCIsIiRtaXNzaW5nUHJvcGVydHkiLCIkdlNjaGVtYSIsIiR1bmtub3duRm9ybWF0cyIsInVua25vd25Gb3JtYXRzIiwiJGFsbG93VW5rbm93biIsIiRmb3JtYXQiLCIkaXNPYmplY3QiLCIkZm9ybWF0VHlwZSIsIiRmb3JtYXRSZWYiLCIkdGhlblNjaCIsIiRlbHNlU2NoIiwiJHRoZW5QcmVzZW50IiwiJGVsc2VQcmVzZW50IiwiJGlmQ2xhdXNlIiwiJGFkZGl0aW9uYWxJdGVtcyIsIiRjdXJyRXJyU2NoZW1hUGF0aCIsIm11bHRpcGxlT2ZQcmVjaXNpb24iLCIkYWxsRXJyb3JzT3B0aW9uIiwiJHByZXZWYWxpZCIsIiRwYXNzaW5nU2NoZW1hcyIsIiRrZXkiLCIkZGF0YVByb3BlcnRpZXMiLCIkc2NoZW1hS2V5cyIsIiRwUHJvcGVydGllcyIsIiRwUHJvcGVydHlLZXlzIiwiJGFQcm9wZXJ0aWVzIiwiJHNvbWVQcm9wZXJ0aWVzIiwiJG5vQWRkaXRpb25hbCIsIiRhZGRpdGlvbmFsSXNTY2hlbWEiLCIkcmVtb3ZlQWRkaXRpb25hbCIsInJlbW92ZUFkZGl0aW9uYWwiLCIkY2hlY2tBZGRpdGlvbmFsIiwiJHJlcXVpcmVkIiwiJHJlcXVpcmVkSGFzaCIsImkxIiwiJHBQcm9wZXJ0eSIsIiRhZGRpdGlvbmFsUHJvcGVydHkiLCIkdXNlRGVmYXVsdHMiLCIkaGFzRGVmYXVsdCIsImk0IiwiJGludmFsaWROYW1lIiwiJHByb3BlcnR5U2NoIiwiJGxvb3BSZXF1aXJlZCIsIiRpdGVtVHlwZSIsIktFWVdPUkRTIiwia2V5d29yZHNKc29uUG9pbnRlcnMiLCJsb2FkU2NoZW1hIiwibG9hZE1ldGFTY2hlbWFPZiIsInRoZW4iLCJfY29tcGlsZUFzeW5jIiwibG9hZE1pc3NpbmdTY2hlbWEiLCJhZGRlZCIsInNjaGVtYVByb21pc2UiLCJyZW1vdmVQcm9taXNlIiwiX2FkZFJ1bGUiLCJydWxlR3JvdXAiLCJyZyIsIiRjb21waWxlIiwiJGlubGluZSIsIiRtYWNybyIsIiRydWxlVmFsaWRhdGUiLCIkdmFsaWRhdGVDb2RlIiwiJGRlZmluaXRpb24iLCIkckRlZiIsIiR2YWxpZGF0ZVNjaGVtYSIsIiRydWxlRXJycyIsIiRydWxlRXJyIiwiJGFzeW5jS2V5d29yZCIsInN0YXRlbWVudHMiLCIkcGFyZW50RGF0YVByb3BlcnR5IiwiZGVmX2NhbGxSdWxlVmFsaWRhdGUiLCJtb2RpZnlpbmciLCJkZWZfY3VzdG9tRXJyb3IiLCJiZWFyZXJUb2tlbiIsImNoYWxsZW5nZSIsInFvcCIsIm5jIiwiY25vbmNlIiwiaGExIiwiaGExQ29tcHV0ZSIsImhhMiIsImRpZ2VzdFJlc3BvbnNlIiwiYXV0aFZhbHVlcyIsIm9wYXF1ZSIsImF1dGhWZXJiIiwiYnl0ZVRvSGV4IiwiYnRoIiwiYnVpbGRQYXJhbXMiLCJxc0xpYiIsIm9hIiwiY29uc3VtZXJfc2VjcmV0X29yX3ByaXZhdGVfa2V5Iiwib2F1dGhfY29uc3VtZXJfc2VjcmV0Iiwib2F1dGhfcHJpdmF0ZV9rZXkiLCJvYXV0aF9yZWFsbSIsIm9hdXRoX3RyYW5zcG9ydF9tZXRob2QiLCJiYXNldXJsIiwib2F1dGhfc2lnbmF0dXJlIiwiYnVpbGRCb2R5SGFzaCIsInNoYXN1bSIsImNvbmNhdFBhcmFtcyIsImZvcm1Db250ZW50VHlwZSIsInRyYW5zcG9ydCIsInRyYW5zcG9ydF9tZXRob2QiLCJib2R5X2hhc2giLCJzaGEiLCJjb21wYXJlIiwiZ2VuZXJhdGVCYXNlIiwiaHR0cE1ldGhvZCIsImJhc2VfdXJpIiwiaG1hY3NpZ24iLCJjb25zdW1lcl9zZWNyZXQiLCJobWFjc2lnbjI1NiIsInJzYXNpZ24iLCJwbGFpbnRleHQiLCJzaWduTWV0aG9kIiwic2tpcEFyZ3MiLCJjYWxjdWxhdGVNYWMiLCJhcHAiLCJkbGciLCJsb2NhbHRpbWVPZmZzZXRNc2VjIiwicGF5bG9hZCIsImFydGlmYWN0cyIsImhhc0V4dCIsImlzQ2h1bmtlZCIsInNldEhlYWRlcnMiLCJidWlsZCIsInByZWFtYmxlQ1JMRiIsInByZWFtYmxlIiwicG9zdGFtYmxlQ1JMRiIsImlzVXJsIiwiZm9sbG93UmVkaXJlY3QiLCJmb2xsb3dBbGxSZWRpcmVjdHMiLCJmb2xsb3dPcmlnaW5hbEh0dHBNZXRob2QiLCJhbGxvd1JlZGlyZWN0IiwibWF4UmVkaXJlY3RzIiwicmVkaXJlY3RzIiwicmVtb3ZlUmVmZXJlckhlYWRlciIsInJlZGlyZWN0VG8iLCJ1cmlQcmV2IiwicmVkaXJlY3RVcmkiLCJwcm94eUhlYWRlcldoaXRlTGlzdCIsInByb3h5SGVhZGVyRXhjbHVzaXZlTGlzdCIsInR1bm5lbE92ZXJyaWRlIiwidXJpT2JqZWN0IiwicHJveHlIb3N0IiwicHJveHlIZWFkZXJzIiwid2hpdGVMaXN0IiwiY29uc3RydWN0UHJveHlIZWFkZXJXaGl0ZUxpc3QiLCJ0dW5uZWxGbiIsInR1bm5lbEZuTmFtZSIsImNvbnN0cnVjdFR1bm5lbEZuTmFtZSIsImdldFR1bm5lbEZuIiwidHVubmVsT3B0aW9ucyIsInByb3h5QXV0aCIsImNvbnN0cnVjdFR1bm5lbE9wdGlvbnMiLCJldmVudHMiLCJUdW5uZWxpbmdBZ2VudCIsInByb3h5T3B0aW9ucyIsInBlbmRpbmciLCJjcmVhdGVTZWN1cmVTb2NrZXQiLCJzZWN1cmVTb2NrZXQiLCJtZXJnZU9wdGlvbnMiLCJzZXJ2ZXJuYW1lIiwia2V5TGVuIiwiaHR0cE92ZXJIdHRwIiwiaHR0cHNPdmVySHR0cCIsImRlZmF1bHRQb3J0IiwiaHR0cE92ZXJIdHRwcyIsImh0dHBzT3Zlckh0dHBzIiwiRXZlbnRFbWl0dGVyIiwib25GcmVlIiwib25DbG9zZU9yUmVtb3ZlIiwicGxhY2Vob2xkZXIiLCJjb25uZWN0T3B0aW9ucyIsImNvbm5lY3RSZXEiLCJvbkNvbm5lY3QiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJ1cGdyYWRlIiwiZ2V0TmFub1NlY29uZHMiLCJocnRpbWUiLCJsb2FkVGltZSIsIm1vZHVsZUxvYWRUaW1lIiwibm9kZUxvYWRUaW1lIiwidXBUaW1lIiwicGVyZm9ybWFuY2UiLCJociIsInVwdGltZSIsImppcmFDbGllbnQiLCJnZXRQcm9wZXJ0aWVzIiwia2V5RmlsdGVyIiwicGVybWlzc2lvbkxldmVsIiwiZ2V0QXR0YWNobWVudCIsImF0dGFjaG1lbnRJZCIsImRlbGV0ZUF0dGFjaG1lbnQiLCJnZXRHbG9iYWxBdHRhY2htZW50TWV0YWRhdGEiLCJnZXRBdWRpdHMiLCJjcmVhdGVBdWRpdCIsImF1ZGl0IiwibG9nb3V0IiwibG9naW4iLCJjdXJyZW50VXNlciIsImdldEF2YXRhcnMiLCJhdmF0YXJUeXBlIiwiY3JlYXRlVGVtcG9yYXJ5QXZhdGFyIiwiYXZhdGFyRmlsZVBhdGgiLCJYLUF0bGFzc2lhbi1Ub2tlbiIsImZpbGUiLCJjcm9wVGVtcG9yYXJ5QXZhdGFyIiwiY3JvcCIsImdldEFsbEJvYXJkcyIsInN0YXJ0QXQiLCJwcm9qZWN0S2V5T3JJZCIsIm1heFJlc3VsdHMiLCJnZXRCb2FyZCIsImJvYXJkSWQiLCJnZXRJc3N1ZXNGb3JCb2FyZCIsImdldFNwcmludHNGb3JCb2FyZCIsImdldElzc3Vlc0ZvckJhY2tsb2ciLCJ2YWxpZGF0ZVF1ZXJ5IiwiZ2V0Qm9hcmRDb25maWd1cmF0aW9uIiwiY3JlYXRlQm9hcmQiLCJmaWx0ZXJJZCIsImdldFByb2plY3RzRm9yQm9hcmQiLCJnZXRDb21tZW50UHJvcGVydHlLZXlzIiwiYnVpbGRSZXF1ZXN0T3B0aW9ucyIsInNldENvbW1lbnRQcm9wZXJ0eSIsInByb3BlcnR5S2V5IiwicHJvcGVydHlWYWx1ZSIsImdldENvbW1lbnRQcm9wZXJ0eSIsImRlbGV0ZUNvbW1lbnRQcm9wZXJ0eSIsImNvbW1lbnRJZCIsImJhc2VQYXRoIiwiY3JlYXRlQ29tcG9uZW50IiwiZWRpdENvbXBvbmVudCIsImdldENvbXBvbmVudCIsImRlbGV0ZUNvbXBvbmVudCIsImdldFJlbGF0ZWRJc3N1ZUNvdW50cyIsImdldEN1c3RvbUZpZWxkT3B0aW9uIiwiZmllbGRPcHRpb25JZCIsImdldEFsbERhc2hib2FyZHMiLCJnZXREYXNoYm9hcmQiLCJkYXNoYm9hcmRJZCIsImdldEFsbEZpZWxkcyIsImNyZWF0ZUN1c3RvbUZpZWxkIiwiY3JlYXRlRmlsdGVyIiwiZ2V0RmlsdGVyIiwiZ2V0RmlsdGVycyIsInVwZGF0ZUZpbHRlciIsImRlbGV0ZUZpbHRlciIsImdldEZpbHRlckNvbHVtbnMiLCJzZXRGaWx0ZXJDb2x1bW5zIiwiY29sdW1ucyIsInJlc2V0RmlsdGVyQ29sdW1ucyIsImFkZFNoYXJlUGVybWlzc2lvbiIsInBlcm1pc3Npb24iLCJnZXREZWZhdWx0U2hhcmVTY29yZSIsInNldERlZmF1bHRTaGFyZVNjb3BlIiwic2NvcGUiLCJnZXRGYXZvcml0ZUZpbHRlcnMiLCJjcmVhdGVHcm91cCIsImdldEdyb3VwIiwiZ3JvdXBuYW1lIiwiZ3JvdXBOYW1lIiwiZ2V0TWVtYmVycyIsImluY2x1ZGVJbmFjdGl2ZVVzZXJzIiwiYWRkVXNlclRvR3JvdXAiLCJ1c2VyTmFtZSIsInJlbW92ZVVzZXJGcm9tR3JvdXAiLCJkZWxldGVHcm91cCIsInN3YXBHcm91cCIsImZpbmRVc2Vyc0FuZEdyb3VwcyIsInNob3dBdmF0YXIiLCJmaWVsZElkIiwicHJvamVjdElkIiwiaXNzdWVUeXBlSWQiLCJmaW5kR3JvdXBzIiwiZXhjbHVkZSIsImdldElzc3VlRXN0aW1hdGlvbiIsImVuZHBvaW50IiwiaXNzdWVJZCIsImlzc3VlS2V5Iiwic2V0SXNzdWVFc3RpbWF0aW9uIiwic2V0SXNzdWVSYW5rcyIsInJhbmtpbmciLCJjcmVhdGVJc3N1ZSIsImdldENyZWF0ZU1ldGFkYXRhIiwicHJvamVjdElkcyIsInByb2plY3RLZXlzIiwiaXNzdWV0eXBlSWRzIiwiaXNzdWV0eXBlTmFtZXMiLCJidWxrQ3JlYXRlIiwiaXNzdWVzIiwiZ2V0SXNzdWUiLCJhZ2lsZSIsImRlbGV0ZUlzc3VlIiwiZGVsZXRlU3VidGFza3MiLCJlZGl0SXNzdWUiLCJhc3NpZ25Jc3N1ZSIsImFzc2lnbmVlIiwiZ2V0Q29tbWVudHMiLCJhZGRDb21tZW50IiwiZ2V0Q29tbWVudCIsImVkaXRDb21tZW50IiwiZGVsZXRlQ29tbWVudCIsImdldEVkaXRNZXRhZGF0YSIsInNlbmRFbWFpbE5vdGlmaWNhdGlvbiIsIm5vdGlmaWNhdGlvbiIsImdldFJlbW90ZUxpbmtzIiwiZ2xvYmFsSWQiLCJjcmVhdGVSZW1vdGVMaW5rIiwicmVtb3RlTGluayIsInVwZGF0ZVJlbW90ZUxpbmsiLCJkZWxldGVSZW1vdGVMaW5rIiwiZ2V0UmVtb3RlTGlua0J5SWQiLCJsaW5rSWQiLCJ1cGRhdGVSZW1vdGVMaW5rQnlJZCIsImRlbGV0ZVJlbW90ZUxpbmtCeUlkIiwiZ2V0VHJhbnNpdGlvbnMiLCJ0cmFuc2l0aW9uSWQiLCJ0cmFuc2l0aW9uSXNzdWUiLCJ0cmFuc2l0aW9uIiwidW52b3RlIiwidm90ZSIsImdldFZvdGVzIiwiZ2V0V2F0Y2hlcnMiLCJhZGRXYXRjaGVyIiwid2F0Y2hlciIsInJlbW92ZVdhdGNoZXIiLCJnZXRXb3JrTG9ncyIsImFkZFdvcmtMb2ciLCJuZXdFc3RpbWF0ZSIsInJlZHVjZUJ5IiwiYWRqdXN0RXN0aW1hdGUiLCJnZXRXb3JrTG9nIiwid29ya2xvZ0lkIiwidXBkYXRlV29ya0xvZyIsImRlbGV0ZVdvcmtMb2ciLCJpbmNyZWFzZUJ5IiwiYWRkQXR0YWNobWVudCIsImF0dGFjaG1lbnRzIiwiZGVsZXRlUHJvcGVydHkiLCJzZXRXb3JrbG9nUHJvcGVydHkiLCJnZXRXb3JrTG9nUHJvcGVydGllcyIsImdldFdvcmtMb2dQcm9wZXJ0eSIsImlkT3JLZXkiLCJnZXRJc3N1ZVBpY2tlciIsImN1cnJlbnRKUUwiLCJjdXJyZW50SXNzdWVLZXkiLCJjdXJyZW50UHJvamVjdElkIiwic2hvd1N1YlRhc2tzIiwic2hvd1N1YlRhc2tQYXJlbnQiLCJjcmVhdGVJc3N1ZUxpbmsiLCJnZXRJc3N1ZUxpbmsiLCJkZWxldGVJc3N1ZUxpbmsiLCJnZXRBdmFpbGFibGVUeXBlcyIsImNyZWF0ZUlzc3VlTGlua1R5cGUiLCJsaW5rVHlwZSIsImdldElzc3VlTGlua1R5cGUiLCJpc3N1ZUxpbmtUeXBlSWQiLCJkZWxldGVJc3N1ZUxpbmtUeXBlIiwiZWRpdElzc3VlTGlua1R5cGUiLCJnZXRBbGxJc3N1ZVR5cGVzIiwiY3JlYXRlSXNzdWVUeXBlIiwiZ2V0SXNzdWVUeXBlIiwiZGVsZXRlSXNzdWVUeXBlIiwiYWx0ZXJuYXRpdmVJc3N1ZVR5cGVJZCIsInVwZGF0ZUlzc3VlVHlwZSIsImdldEFsdGVybmF0aXZlSXNzdWVUeXBlcyIsImdldEF1dG9Db21wbGV0ZURhdGEiLCJnZXRBbGxMaWNlbnNlUm9sZXMiLCJnZXRMaWNlbnNlUm9sZSIsInJvbGVJZCIsImVkaXRMaWNlbnNlUm9sZSIsInZhbGlkYXRlTGljZW5zZSIsImxpY2Vuc2UiLCJnZXRNeVBlcm1pc3Npb25zIiwicHJvamVjdEtleSIsImdldFByZWZlcmVuY2UiLCJlZGl0UHJlZmVyZW5jZSIsImRlbGV0ZVByZWZlcmVuY2UiLCJnZXRNeXNlbGYiLCJlZGl0TXlzZWxmIiwibmV3RGF0YSIsImNoYW5nZVBhc3N3b3JkIiwiT0F1dGgyIiwiYjY0cGFkIiwicnN0cl9obWFjX3NoYTEiLCJia2V5IiwicnN0cjJiaW5iIiwiYmluYl9zaGExIiwiaXBhZCIsIm9wYWQiLCJiaW5iMnJzdHIiLCJyc3RyMmI2NCIsInRyaXBsZXQiLCJzdHIycnN0cl91dGY4Iiwib2xkYSIsIm9sZGIiLCJvbGRjIiwib2xkZCIsIm9sZGUiLCJiaXRfcm9sIiwic2FmZV9hZGQiLCJzaGExX2Z0Iiwic2hhMV9rdCIsImxzdyIsImNudCIsImNsaWVudElkIiwiY2xpZW50U2VjcmV0IiwiYmFzZVNpdGUiLCJhdXRob3JpemVQYXRoIiwiYWNjZXNzVG9rZW5QYXRoIiwiX2NsaWVudElkIiwiX2NsaWVudFNlY3JldCIsIl9iYXNlU2l0ZSIsIl9hdXRob3JpemVVcmwiLCJfYWNjZXNzVG9rZW5VcmwiLCJfYWNjZXNzVG9rZW5OYW1lIiwiX2F1dGhNZXRob2QiLCJfY3VzdG9tSGVhZGVycyIsIl91c2VBdXRob3JpemF0aW9uSGVhZGVyRm9yR0VUIiwiX2FnZW50Iiwic2V0QWdlbnQiLCJzZXRBY2Nlc3NUb2tlbk5hbWUiLCJzZXRBdXRoTWV0aG9kIiwiYXV0aE1ldGhvZCIsInVzZUF1dGhvcml6YXRpb25IZWFkZXJmb3JHRVQiLCJ1c2VJdCIsIl9nZXRBY2Nlc3NUb2tlblVybCIsImJ1aWxkQXV0aEhlYWRlciIsIl9jaG9vc2VIdHRwTGlicmFyeSIsImh0dHBfbGlicmFyeSIsIl9yZXF1ZXN0IiwiYWNjZXNzX3Rva2VuIiwicmVhbEhlYWRlcnMiLCJfZXhlY3V0ZVJlcXVlc3QiLCJhZGRMaXN0ZW5lciIsImdldEF1dGhvcml6ZVVybCIsImdyYW50X3R5cGUiLCJwb3N0X2RhdGEiLCJyZWZyZXNoX3Rva2VuIiwiZ2V0UGFzc3dvcmRQb2xpY3kiLCJoYXNPbGRQYXNzd29yZCIsImdldEFsbFBlcm1pc3Npb25zIiwiZ2V0QWxsUGVybWlzc2lvblNjaGVtZXMiLCJjcmVhdGVQZXJtaXNzaW9uU2NoZW1lIiwiZ2V0UGVybWlzc2lvblNjaGVtZSIsInNjaGVtZUlkIiwiZWRpdFBlcm1pc3Npb25TY2hlbWUiLCJkZWxldGVQZXJtaXNzaW9uU2NoZW1lIiwiZ2V0UGVybWlzc2lvblNjaGVtZUdyYW50cyIsImNyZWF0ZVBlcm1pc3Npb25HcmFudEluU2NoZW1lIiwiZ3JhbnQiLCJkZWxldGVQZXJtaXNzaW9uR3JhbnRGcm9tU2NoZW1lIiwicGVybWlzc2lvbklkIiwiZ2V0UGVybWlzc2lvblNjaGVtZUdyYW50QnlJZCIsImdldEFsbFByaW9yaXRpZXMiLCJnZXRQcmlvcml0eSIsInByaW9yaXR5SWQiLCJnZXRBbGxQcm9qZWN0cyIsImRlbGV0ZVByb2plY3QiLCJjcmVhdGVQcm9qZWN0IiwiZ2V0UHJvamVjdFByb3BlcnRpZXMiLCJnZXRQcm9qZWN0IiwiZ2V0Q29tcG9uZW50cyIsImdldFN0YXR1c2VzIiwiZ2V0VmVyc2lvbnMiLCJnZXRSb2xlcyIsImdldFJvbGUiLCJ1cGRhdGVSb2xlIiwibmV3Um9sZSIsImFkZFRvUm9sZSIsInByb2plY3RJZE9yS2V5IiwiZ2V0QWxsUHJvamVjdENhdGVnb3JpZXMiLCJnZXRQcm9qZWN0Q2F0ZWdvcnkiLCJwcm9qZWN0Q2F0ZWdvcnlJZCIsInZhbGlkYXRlUHJvamVjdEtleSIsImRvUmVpbmRleCIsImluZGV4Q29tbWVudHMiLCJpbmRleENoYW5nZUhpc3RvcnkiLCJnZXRSZWluZGV4IiwidGFza0lkIiwiZ2V0QWxsUmVzb2x1dGlvbnMiLCJnZXRSZXNvbHV0aW9uIiwicmVzb2x1dGlvbklkIiwiZ2V0QWxsIiwiY3JlYXRlUm9sZSIsImdldFJvbGVCeUlkIiwiZGVsZXRlUm9sZSIsImdldEFjdG9ycyIsImFkZEFjdG9ycyIsInJlbW92ZUFjdG9yIiwiZ2V0QXZhaWxhYmxlRmllbGRzIiwiZ2V0VGFicyIsImNyZWF0ZVRhYiIsInJlbmFtZVRhYiIsInRhYklkIiwiZGVsZXRlVGFiIiwiYWRkRmllbGRUb1RhYiIsImdldEZpZWxkc0luVGFiIiwicmVtb3ZlRmllbGRGcm9tVGFiIiwibW92ZUZpZWxkT25UYWIiLCJwb3NpdGlvbiIsIm5ld1Bvc2l0aW9uIiwibW92ZVRhYlBvc2l0aW9uIiwiYWRkRmllbGRUb0RlZmF1bHRUYWIiLCJzY3JlZW5JZCIsInNlYXJjaF9vcHRpb25zIiwiZ2V0U2VjdXJpdHlMZXZlbCIsInNlY3VyaXR5TGV2ZWxJZCIsImdldFNlcnZlckluZm8iLCJkb0hlYWx0aENoZWNrIiwic2V0QmFzZVVybCIsIm5ld1VybCIsImdldElzc3VlTmF2Q29sdW1ucyIsImNyZWF0ZVNwcmludCIsImdldFNwcmludCIsInNwcmludElkIiwidXBkYXRlU3ByaW50IiwicGFydGlhbGx5VXBkYXRlU3ByaW50IiwiZGVsZXRlU3ByaW50IiwiZ2V0U3ByaW50SXNzdWVzIiwibW92ZVNwcmludElzc3VlcyIsInN3YXBTcHJpbnQiLCJzd2FwcGVkIiwiZ2V0QWxsU3RhdHVzZXMiLCJnZXRTdGF0dXMiLCJzdGF0dXNJZCIsImdldEFsbFN0YXR1c0NhdGVnb3JpZXMiLCJnZXRTdGF0dXNDYXRlZ29yeSIsInN0YXR1c0NhdGVnb3J5SWRPcktleSIsImdldFVzZXIiLCJ1c2VyS2V5IiwiZGVsZXRlVXNlciIsImNyZWF0ZVVzZXIiLCJlZGl0VXNlciIsIm11bHRpUHJvamVjdFNlYXJjaEFzc2lnbmFibGUiLCJwcm9qZWN0S2V5U3RyaW5nIiwic2VhcmNoQXNzaWduYWJsZSIsImFjdGlvbkRlc2NyaXB0b3JJZCIsImJhc2VOYW1lIiwicmVhZEZpbGVTeW5jIiwiY29udmVydFRlbXBvcmFyeUF2YXRhciIsImF2YXRhcklkIiwiZGVsZXRlQXZhdGFyIiwiZ2V0RGVmYXVsdENvbHVtbnMiLCJzZXREZWZhdWx0Q29sdW1ucyIsInJlc2V0RGVmYXVsdENvbHVtbnMiLCJzZWFyY2hQZXJtaXNzaW9ucyIsInNlYXJjaFBpY2tlciIsImluY2x1ZGVBY3RpdmUiLCJpbmNsdWRlSW5hY3RpdmUiLCJ2aWV3SXNzdWVTZWFyY2giLCJjcmVhdGVWZXJzaW9uIiwibW92ZVZlcnNpb24iLCJnZXRBbGxWZXJzaW9ucyIsImdldFZlcnNpb24iLCJlZGl0VmVyc2lvbiIsImdldFVucmVzb2x2ZWRJc3N1ZUNvdW50IiwiZ2V0UmVtb3RlTGluayIsInJlbW90ZUxpbmtJZCIsImRlbGV0ZVZlcnNpb24iLCJkZWxldGVBbGxSZW1vdGVMaW5rcyIsImdldEdsb2JhbFJlbW90ZUxpbmsiLCJ2ZXJzaW9uSWQiLCJnZXRBbGxXZWJob29rcyIsImdldFdlYmhvb2siLCJ3ZWJob29rSWQiLCJjcmVhdGVXZWJob29rIiwiZGVsZXRlV2ViaG9vayIsImdldFdvcmtmbG93cyIsIndvcmtmbG93TmFtZSIsImNyZWF0ZVdvcmtmbG93U2NoZW1lIiwiZWRpdFdvcmtmbG93U2NoZW1lIiwiZ2V0V29ya2Zsb3dTY2hlbWUiLCJyZXR1cm5EcmFmdElmRXhpc3RzIiwiZGVsZXRlV29ya2Zsb3dTY2hlbWUiLCJjcmVhdGVEcmFmdCIsImdldERlZmF1bHRXb3JrZmxvdyIsInJlbW92ZURlZmF1bHRXb3JrZmxvdyIsInVwZGF0ZURyYWZ0SWZOZWVkZWQiLCJzZXREZWZhdWx0V29ya2Zsb3ciLCJnZXREcmFmdCIsImVkaXREcmFmdCIsImRyYWZ0IiwiZGVsZXRlRHJhZnQiLCJnZXREcmFmdERlZmF1bHRXb3JrZmxvdyIsInNldERyYWZ0RGVmYXVsdFdvcmtmbG93IiwicmVtb3ZlRHJhZnREZWZhdWx0V29ya2Zsb3ciLCJlZGl0SXNzdWVUeXBlIiwicmVtb3ZlSXNzdWVUeXBlIiwiZ2V0RHJhZnRJc3N1ZVR5cGUiLCJlZGl0RHJhZnRJc3N1ZVR5cGUiLCJyZW1vdmVEcmFmdElzc3VlVHlwZSIsImdldFdvcmtmbG93IiwiZ2V0RHJhZnRXb3JrZmxvdyIsImVkaXRXb3JrZmxvdyIsImlzc3VlVHlwZXMiLCJlZGl0RHJhZnRXb3JrZmxvdyIsImRlbGV0ZVdvcmtmbG93IiwiZGVsZXRlRHJhZnRXb3JrZmxvdyIsIndvcmtmbG93U2NoZW1lSWQiLCJnZXRXb3JrbG9nRGVsZXRlZCIsInNpbmNlIiwid29ya2xvZ0xpc3QiLCJnZXRXb3JrbG9nVXBkYXRlZCIsInF1b3RlcyIsIlwiIiwiJyIsImAiLCLigJwiLCLigJgiLCJzcGFjZXNSRSIsImh1bWFuUmVhZGFibGVBcnJheSIsInlhcmdzT3B0aW9ucyIsInBhcnNlTWVzc2FnZSIsImlzS2lyYVJlYWN0aW9uIiwicmVhY3RUb0lEIiwiZW1vamkiLCJpc0tpcmFNZXNzYWdlIiwiX3Mkc3BsaXQkcmVkdWNlIiwiY3VycmVudCIsInlhcmdzIiwiX3JlZiIsInF1b3RlIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiaW5jbHVkZXMiLCJfdmFsaWRhdGVPcHRpb25zIiwiamlyYSIsInByb2plY3RzIiwiVXRpbHMiLCJ1c2VybmFtZU1hcHBlciIsInZhbGlkYXRlT3B0aW9ucyIsIm51bVRvRW1vamkiLCJpc3N1ZVRvTGluZSIsInN0YXR1c1RvRW1vamkiLCJzdW1tYXJ5IiwiYnVpbGRTZWFyY2hSZXN1bHRCb2R5IiwicGFyc2VkTWVzc2FnZSIsImFkZGl0aW9uYWwiLCJiZWdpbiIsImZpcnN0SXNzdWVzIiwiZ2V0T3JTZWFyY2giLCJhc3NpZ25lZUppcmEiLCJib3QiLCJzZW5kIiwiX3JlZjIiLCJzcmNfY29tbWVudCIsInJlYWN0TnVtIiwidW50aWwiLCJyZWFjdCIsImtiMmppcmFNZW50aW9uIiwia2IiLCJyZWFjdEFjayIsImtiTWVzc2FnZSIsIk1lc3NhZ2UiLCJzZW5kSGVscCIsImtleWJhc2UiLCJlbW9qaVRvTnVtIiwicmVhY2ppIiwiX2RlZmF1bHQiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9jb25maWciLCJfamlyYSIsIl90aGlzMiIsIl9yZWYzIiwiX3NsaWNlZFRvQXJyYXkiLCJmcm9tR2V0IiwiZnJvbVNlYXJjaCIsImppcmFfdG9Db25zdW1hYmxlQXJyYXkiLCJqaXJhUmVzcE1hcHBlciIsIl90aGlzMyIsIl9yZWY0IiwiX3RoaXM0IiwiX3JlZjUiLCJpc3N1ZXR5cGUiLCJfcmVmNiIsInNldFRpbWVvdXRQcm9taXNlIiwiQ29tbWVudENvbnRleHQiLCJNYXAiLCJyZXNwb25zZUlEIiwiX3Jlc3BNc2dJRFRvQ29tbWVudE1lc3NhZ2UiLCJiYXNlNjRDb25maWciLCJfdHlwZW9mIiwiY2hhbm5lbHMiLCJjaGVja0NvbmZpZyIsIkNvbmZpZyIsIktJUkFfQ09ORklHIiwiQm90IiwiSmlyYSIsIndhdGNoQWxsQ2hhbm5lbHNGb3JOZXdNZXNzYWdlcyIsImMxIiwiZXhpdCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMs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Q0EsNENBQ0EsMkNBQ0EsNENBQ0EsMkNBQ0EsMkNBQ0EsNENBQ0EsNkNBQ0EsSUFBQUEsWUFBQSxDQUNBLDRDQUNBLDRDQUNBLDJDQUNBLDBDQUNBLDRDQUNBLHlDQUNBLDRDQUNBLDBDQUNBLDJDQUNBLDRDQUNBLDRDQUNBLDBDQUNBLDBDQUNBLDJDQUNBLDRDQUNBLDJDQUNBLDRDQUNBLDRDQUNBLHdDQUNBLDRDQUNBLDJDQUNBLDJDQUNBLDBDQUNBLHlDQUNBLDBDQUNBLDJDQUNBLDRDQUNBLDRDQUNBLDBDQUNBLDRDQUNBLDJDQUNBLDRDQUNBLDRDQUNBLDRDQUNBLDJDQUNBLDJDQUNBLDJDQUNBLDBDQUNBLDJDQUNBLDRDQUNBLDRDQUNBLDRDQUNBLDRDQUNBLDRDQUNBLDRDQUNBLDRDQUNBLDRDQUNBLDJDQUNBLDJDQUNBLDRDQUNBLDBDQUNBLHlDQUNBLDRDQUNBLDJDQUNBLDRDQUNBLHdDQUNBLDBDQUNBLDRDQUNBLDJDQUNBLDJDQUNBLDJDQUNBLDJDQUNBLDJDQUNBLDhDQUNBLElBQUFBLFlBQUEsQ0FDQSwyQ0FDQSw0Q0FDQSw0Q0FDQSwyQ0FDQSw0Q0FDQSw0Q0FDQSwyQ0FDQSw0Q0FDQSw0Q0FDQSw0Q0FDQSwyQ0FDQSw0Q0FDQSwyQ0FDQSx5Q0FDQSwwQ0FDQSwyQ0FDQSw0Q0FDQSwyQ0FDQSw0Q0FDQSx1Q0FDQSw0Q0FDQSx5Q0FDQSwwQ0FDQSwyQ0FDQSwwQ0FDQSw0Q0FDQSw0Q0FDQSwyQ0FDQSwyQ0FDQSwyQ0FDQSwyQ0FDQSw0Q0FDQSw0Q0FDQSw0Q0FDQSx5Q0FDQSwwQ0FDQSx3Q0FDQSwyQ0FDQSwyQ0FDQSw0Q0FDQSwyQ0FDQSwwQ0FDQSwyQ0FDQSwwQ0FDQSwyQ0FDQSwyQ0FDQSwwQ0FDQSw0Q0FDQSwyQ0FDQSwyQ0FDQSwyQ0FDQSwyQ0FDQSw0Q0FDQSw0Q0FDQSw0Q0FDQSwyQ0FDQSwyQ0FDQSw0Q0FDQSx5Q0FDQSwyQ0FDQSw0Q0FDQSx1Q0FDQSw0Q0FDQSw4Q0FFQXRoRCxLQUFBc3RDLEVBQUEsSUFBQWdVLFlBQUEsQ0FDQSx3Q0FDQSwwQ0FDQSwwQ0FDQSw0Q0FD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LENBRUEreEUsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ0FDLElBQUEsS0FBQUMsSUFBQSxLQUNBQyxJQUFBLEtBRUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFB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QUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsS0FBQUMsSUFBQSxLQUNBQyxJQUFBLEtBQUFDLElBQUEsS0FDQUMsSUFBQSxLQUVBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFB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QSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsS0FBQUMsSUFBQSxLQUNBQyxJQUFBLEtBQUFDLElBQUEsS0FDQUMsSUFBQSxLQUVBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ0FDLElBQUEsS0FBQUMsSUFBQSxLQUNBQyxJQUFBLEtBQUFDLElBQUEsTUF3REEsU0FBQS85RSxHQUNBLGFBQUFHLE9BQUF1QixFQUFBdkIsRUFBQUgsS0FxQ0EsSUFPQWcrRSxFQVBBNytFLE9BQUFrQixVQU9BMEIsU0FHQXZDLEVBQUEr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QUkvQ21DLEdBWkMsS0FpQkFreUksQ0FDTGo5SCxLQUFLdFYsTUFBTWpILE9BQU8yQixLQUFLMDNJLEVBQWMsVUFBVWo2SSxhQUVqRCxNQUFPbUQsR0FFUCxPQURBMjlFLFFBQVFuaEUsTUFBTXhjLEdBQ1AsTUcxRUlrM0ksQ0FBYXo0SSxRQUFRQyxJQUFJeTRJLGFBQWUsSUFDbERyL0UsR0Q4QmdCQSxFQ3pCZEEsRUQwQkN6Z0QsRUFBVSxDQUNkaTlILElBQUssSUFBSThDLElBQ1R0L0UsU0FDQXgyRCxRQUFTLElBQUlvMUksRUFDYnBELEtBQU0sSUFBSStELEVBQUt2L0UsSUFFVnpnRCxFQUFRaTlILElBQ1o1MEgsS0FBS3JJLEVBQVF5Z0QsT0FBT3E5RSxRQUFRNzZILFNBQVVqRCxFQUFReWdELE9BQU9xOUUsUUFBUWg2SCxTQUFVLENBQ3RFSCxTQUFTLElBRVZrMEcsS0FBSyxrQkFBTTczRyxLQ3BDRDYzRyxLTCtEQSxTQUFDNzNHLEdBQ2RBLEVBQVFpOUgsSUFBSW45SCxLQUFLbWdJLCtCQUNmLFNBQUFoN0ksR0FBTyxPQUNMK2EsRUFBUXlnRCxPQUFPcTlFLFFBQVE2QixTQUFTanBDLEtBQUssU0FBQS93RixHQUFPLE9BVHhCdTZILEVBVUR2NkgsRUFWSzBrRyxFQVVJcGxILEVBQVEwZ0IsUUFUeEMsQ0FBQyxPQUFRLFNBQVUsY0FBZSxZQUFhLGFBQWFyRixPQUMxRCxTQUFDek4sRUFBT3BQLEdBQVIsT0FBZ0J5OEksRUFBR3o4SSxLQUFTNG1ILEVBQUc1bUgsS0FDL0IsR0FIcUIsSUFBQ3k4SSxFQUFJNzFCLEtBV25CamtHLEVBQVVwRyxFQUFTL2EsUUt4RTVCcWhGLFFBQVFuaEUsTUFBTSxrQkFDZG1oRSxRQUFRbmhFLE1BQU0vZCxRQUFRQyxJQUFJeTRJLGFBQzFCMTRJLFFBQVErNEksS0FBSyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDI2NCk7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIDIwMTIsIE1hcmsgQ2F2YWdlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5TdHJlYW07XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuXG4vLy8tLS0gR2xvYmFsc1xuXG4vKiBKU1NUWUxFRCAqL1xudmFyIFVVSURfUkVHRVhQID0gL15bYS1mQS1GMC05XXs4fS1bYS1mQS1GMC05XXs0fS1bYS1mQS1GMC05XXs0fS1bYS1mQS1GMC05XXs0fS1bYS1mQS1GMC05XXsxMn0kLztcblxuXG4vLy8tLS0gSW50ZXJuYWxcblxuZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gICAgcmV0dXJuIChzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSkpO1xufVxuXG5mdW5jdGlvbiBfdG9zcyhuYW1lLCBleHBlY3RlZCwgb3BlciwgYXJnLCBhY3R1YWwpIHtcbiAgICB0aHJvdyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHtcbiAgICAgICAgbWVzc2FnZTogdXRpbC5mb3JtYXQoJyVzICglcykgaXMgcmVxdWlyZWQnLCBuYW1lLCBleHBlY3RlZCksXG4gICAgICAgIGFjdHVhbDogKGFjdHVhbCA9PT0gdW5kZWZpbmVkKSA/IHR5cGVvZiAoYXJnKSA6IGFjdHVhbChhcmcpLFxuICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICAgIG9wZXJhdG9yOiBvcGVyIHx8ICc9PT0nLFxuICAgICAgICBzdGFja1N0YXJ0RnVuY3Rpb246IF90b3NzLmNhbGxlclxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBfZ2V0Q2xhc3MoYXJnKSB7XG4gICAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKS5zbGljZSg4LCAtMSkpO1xufVxuXG5mdW5jdGlvbiBub29wKCkge1xuICAgIC8vIFdoeSBldmVuIGJvdGhlciB3aXRoIGFzc2VydHM/XG59XG5cblxuLy8vLS0tIEV4cG9ydHNcblxudmFyIHR5cGVzID0ge1xuICAgIGJvb2w6IHtcbiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIHR5cGVvZiAoYXJnKSA9PT0gJ2Jvb2xlYW4nOyB9XG4gICAgfSxcbiAgICBmdW5jOiB7XG4gICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiB0eXBlb2YgKGFyZykgPT09ICdmdW5jdGlvbic7IH1cbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgICBjaGVjazogZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gdHlwZW9mIChhcmcpID09PSAnc3RyaW5nJzsgfVxuICAgIH0sXG4gICAgb2JqZWN0OiB7XG4gICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIChhcmcpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG51bWJlcjoge1xuICAgICAgICBjaGVjazogZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiAoYXJnKSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKGFyZyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGZpbml0ZToge1xuICAgICAgICBjaGVjazogZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiAoYXJnKSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKGFyZykgJiYgaXNGaW5pdGUoYXJnKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYnVmZmVyOiB7XG4gICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBCdWZmZXIuaXNCdWZmZXIoYXJnKTsgfSxcbiAgICAgICAgb3BlcmF0b3I6ICdCdWZmZXIuaXNCdWZmZXInXG4gICAgfSxcbiAgICBhcnJheToge1xuICAgICAgICBjaGVjazogZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpOyB9LFxuICAgICAgICBvcGVyYXRvcjogJ0FycmF5LmlzQXJyYXknXG4gICAgfSxcbiAgICBzdHJlYW06IHtcbiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIFN0cmVhbTsgfSxcbiAgICAgICAgb3BlcmF0b3I6ICdpbnN0YW5jZW9mJyxcbiAgICAgICAgYWN0dWFsOiBfZ2V0Q2xhc3NcbiAgICB9LFxuICAgIGRhdGU6IHtcbiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIERhdGU7IH0sXG4gICAgICAgIG9wZXJhdG9yOiAnaW5zdGFuY2VvZicsXG4gICAgICAgIGFjdHVhbDogX2dldENsYXNzXG4gICAgfSxcbiAgICByZWdleHA6IHtcbiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIFJlZ0V4cDsgfSxcbiAgICAgICAgb3BlcmF0b3I6ICdpbnN0YW5jZW9mJyxcbiAgICAgICAgYWN0dWFsOiBfZ2V0Q2xhc3NcbiAgICB9LFxuICAgIHV1aWQ6IHtcbiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgKGFyZykgPT09ICdzdHJpbmcnICYmIFVVSURfUkVHRVhQLnRlc3QoYXJnKTtcbiAgICAgICAgfSxcbiAgICAgICAgb3BlcmF0b3I6ICdpc1VVSUQnXG4gICAgfVxufTtcblxuZnVuY3Rpb24gX3NldEV4cG9ydHMobmRlYnVnKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0eXBlcyk7XG4gICAgdmFyIG91dDtcblxuICAgIC8qIHJlLWV4cG9ydCBzdGFuZGFyZCBhc3NlcnQgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9OREVCVUcpIHtcbiAgICAgICAgb3V0ID0gbm9vcDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgPSBmdW5jdGlvbiAoYXJnLCBtc2cpIHtcbiAgICAgICAgICAgIGlmICghYXJnKSB7XG4gICAgICAgICAgICAgICAgX3Rvc3MobXNnLCAndHJ1ZScsIGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyogc3RhbmRhcmQgY2hlY2tzICovXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIGlmIChuZGVidWcpIHtcbiAgICAgICAgICAgIG91dFtrXSA9IG5vb3A7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlc1trXTtcbiAgICAgICAgb3V0W2tdID0gZnVuY3Rpb24gKGFyZywgbXNnKSB7XG4gICAgICAgICAgICBpZiAoIXR5cGUuY2hlY2soYXJnKSkge1xuICAgICAgICAgICAgICAgIF90b3NzKG1zZywgaywgdHlwZS5vcGVyYXRvciwgYXJnLCB0eXBlLmFjdHVhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKiBvcHRpb25hbCBjaGVja3MgKi9cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgdmFyIG5hbWUgPSAnb3B0aW9uYWwnICsgX2NhcGl0YWxpemUoayk7XG4gICAgICAgIGlmIChuZGVidWcpIHtcbiAgICAgICAgICAgIG91dFtuYW1lXSA9IG5vb3A7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlc1trXTtcbiAgICAgICAgb3V0W25hbWVdID0gZnVuY3Rpb24gKGFyZywgbXNnKSB7XG4gICAgICAgICAgICBpZiAoYXJnID09PSB1bmRlZmluZWQgfHwgYXJnID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0eXBlLmNoZWNrKGFyZykpIHtcbiAgICAgICAgICAgICAgICBfdG9zcyhtc2csIGssIHR5cGUub3BlcmF0b3IsIGFyZywgdHlwZS5hY3R1YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyogYXJyYXlPZiBjaGVja3MgKi9cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgdmFyIG5hbWUgPSAnYXJyYXlPZicgKyBfY2FwaXRhbGl6ZShrKTtcbiAgICAgICAgaWYgKG5kZWJ1Zykge1xuICAgICAgICAgICAgb3V0W25hbWVdID0gbm9vcDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHlwZSA9IHR5cGVzW2tdO1xuICAgICAgICB2YXIgZXhwZWN0ZWQgPSAnWycgKyBrICsgJ10nO1xuICAgICAgICBvdXRbbmFtZV0gPSBmdW5jdGlvbiAoYXJnLCBtc2cpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgICAgICAgX3Rvc3MobXNnLCBleHBlY3RlZCwgdHlwZS5vcGVyYXRvciwgYXJnLCB0eXBlLmFjdHVhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXR5cGUuY2hlY2soYXJnW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICBfdG9zcyhtc2csIGV4cGVjdGVkLCB0eXBlLm9wZXJhdG9yLCBhcmcsIHR5cGUuYWN0dWFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKiBvcHRpb25hbEFycmF5T2YgY2hlY2tzICovXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHZhciBuYW1lID0gJ29wdGlvbmFsQXJyYXlPZicgKyBfY2FwaXRhbGl6ZShrKTtcbiAgICAgICAgaWYgKG5kZWJ1Zykge1xuICAgICAgICAgICAgb3V0W25hbWVdID0gbm9vcDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHlwZSA9IHR5cGVzW2tdO1xuICAgICAgICB2YXIgZXhwZWN0ZWQgPSAnWycgKyBrICsgJ10nO1xuICAgICAgICBvdXRbbmFtZV0gPSBmdW5jdGlvbiAoYXJnLCBtc2cpIHtcbiAgICAgICAgICAgIGlmIChhcmcgPT09IHVuZGVmaW5lZCB8fCBhcmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgICAgIF90b3NzKG1zZywgZXhwZWN0ZWQsIHR5cGUub3BlcmF0b3IsIGFyZywgdHlwZS5hY3R1YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0eXBlLmNoZWNrKGFyZ1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3Rvc3MobXNnLCBleHBlY3RlZCwgdHlwZS5vcGVyYXRvciwgYXJnLCB0eXBlLmFjdHVhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyogcmUtZXhwb3J0IGJ1aWx0LWluIGFzc2VydGlvbnMgKi9cbiAgICBPYmplY3Qua2V5cyhhc3NlcnQpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgaWYgKGsgPT09ICdBc3NlcnRpb25FcnJvcicpIHtcbiAgICAgICAgICAgIG91dFtrXSA9IGFzc2VydFtrXTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmRlYnVnKSB7XG4gICAgICAgICAgICBvdXRba10gPSBub29wO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG91dFtrXSA9IGFzc2VydFtrXTtcbiAgICB9KTtcblxuICAgIC8qIGV4cG9ydCBvdXJzZWx2ZXMgKGZvciB1bml0IHRlc3RzIF9vbmx5XykgKi9cbiAgICBvdXQuX3NldEV4cG9ydHMgPSBfc2V0RXhwb3J0cztcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldEV4cG9ydHMocHJvY2Vzcy5lbnYuTk9ERV9OREVCVUcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXRpbFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjcnlwdG9cIik7IiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG52YXIgc2FmZXIgPSB7fVxuXG52YXIga2V5XG5cbmZvciAoa2V5IGluIGJ1ZmZlcikge1xuICBpZiAoIWJ1ZmZlci5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZVxuICBpZiAoa2V5ID09PSAnU2xvd0J1ZmZlcicgfHwga2V5ID09PSAnQnVmZmVyJykgY29udGludWVcbiAgc2FmZXJba2V5XSA9IGJ1ZmZlcltrZXldXG59XG5cbnZhciBTYWZlciA9IHNhZmVyLkJ1ZmZlciA9IHt9XG5mb3IgKGtleSBpbiBCdWZmZXIpIHtcbiAgaWYgKCFCdWZmZXIuaGFzT3duUHJvcGVydHkoa2V5KSkgY29udGludWVcbiAgaWYgKGtleSA9PT0gJ2FsbG9jVW5zYWZlJyB8fCBrZXkgPT09ICdhbGxvY1Vuc2FmZVNsb3cnKSBjb250aW51ZVxuICBTYWZlcltrZXldID0gQnVmZmVyW2tleV1cbn1cblxuc2FmZXIuQnVmZmVyLnByb3RvdHlwZSA9IEJ1ZmZlci5wcm90b3R5cGVcblxuaWYgKCFTYWZlci5mcm9tIHx8IFNhZmVyLmZyb20gPT09IFVpbnQ4QXJyYXkuZnJvbSkge1xuICBTYWZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHZhbHVlKVxuICAgIH1cbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgdmFsdWUpXG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxufVxuXG5pZiAoIVNhZmVyLmFsbG9jKSB7XG4gIFNhZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBzaXplKVxuICAgIH1cbiAgICBpZiAoc2l6ZSA8IDAgfHwgc2l6ZSA+PSAyICogKDEgPDwgMzApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIHNpemUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgICB9XG4gICAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICAgIGlmICghZmlsbCB8fCBmaWxsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYnVmLmZpbGwoMClcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgICByZXR1cm4gYnVmXG4gIH1cbn1cblxuaWYgKCFzYWZlci5rU3RyaW5nTWF4TGVuZ3RoKSB7XG4gIHRyeSB7XG4gICAgc2FmZXIua1N0cmluZ01heExlbmd0aCA9IHByb2Nlc3MuYmluZGluZygnYnVmZmVyJykua1N0cmluZ01heExlbmd0aFxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gd2UgY2FuJ3QgZGV0ZXJtaW5lIGtTdHJpbmdNYXhMZW5ndGggaW4gZW52aXJvbm1lbnRzIHdoZXJlIHByb2Nlc3MuYmluZGluZ1xuICAgIC8vIGlzIHVuc3VwcG9ydGVkLCBzbyBsZXQncyBub3Qgc2V0IGl0XG4gIH1cbn1cblxuaWYgKCFzYWZlci5jb25zdGFudHMpIHtcbiAgc2FmZXIuY29uc3RhbnRzID0ge1xuICAgIE1BWF9MRU5HVEg6IHNhZmVyLmtNYXhMZW5ndGhcbiAgfVxuICBpZiAoc2FmZXIua1N0cmluZ01heExlbmd0aCkge1xuICAgIHNhZmVyLmNvbnN0YW50cy5NQVhfU1RSSU5HX0xFTkdUSCA9IHNhZmVyLmtTdHJpbmdNYXhMZW5ndGhcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhZmVyXG4iLCIvLyBDb3B5cmlnaHQgMjAxOCBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSBLZXk7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuL2FsZ3MnKTtcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbnZhciBGaW5nZXJwcmludCA9IHJlcXVpcmUoJy4vZmluZ2VycHJpbnQnKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xudmFyIERpZmZpZUhlbGxtYW4gPSByZXF1aXJlKCcuL2RoZScpLkRpZmZpZUhlbGxtYW47XG52YXIgZXJycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4vcHJpdmF0ZS1rZXknKTtcbnZhciBlZENvbXBhdDtcblxudHJ5IHtcblx0ZWRDb21wYXQgPSByZXF1aXJlKCcuL2VkLWNvbXBhdCcpO1xufSBjYXRjaCAoZSkge1xuXHQvKiBKdXN0IGNvbnRpbnVlIHRocm91Z2gsIGFuZCBiYWlsIG91dCBpZiB3ZSB0cnkgdG8gdXNlIGl0LiAqL1xufVxuXG52YXIgSW52YWxpZEFsZ29yaXRobUVycm9yID0gZXJycy5JbnZhbGlkQWxnb3JpdGhtRXJyb3I7XG52YXIgS2V5UGFyc2VFcnJvciA9IGVycnMuS2V5UGFyc2VFcnJvcjtcblxudmFyIGZvcm1hdHMgPSB7fTtcbmZvcm1hdHNbJ2F1dG8nXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy9hdXRvJyk7XG5mb3JtYXRzWydwZW0nXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy9wZW0nKTtcbmZvcm1hdHNbJ3BrY3MxJ10gPSByZXF1aXJlKCcuL2Zvcm1hdHMvcGtjczEnKTtcbmZvcm1hdHNbJ3BrY3M4J10gPSByZXF1aXJlKCcuL2Zvcm1hdHMvcGtjczgnKTtcbmZvcm1hdHNbJ3JmYzQyNTMnXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy9yZmM0MjUzJyk7XG5mb3JtYXRzWydzc2gnXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy9zc2gnKTtcbmZvcm1hdHNbJ3NzaC1wcml2YXRlJ10gPSByZXF1aXJlKCcuL2Zvcm1hdHMvc3NoLXByaXZhdGUnKTtcbmZvcm1hdHNbJ29wZW5zc2gnXSA9IGZvcm1hdHNbJ3NzaC1wcml2YXRlJ107XG5mb3JtYXRzWydkbnNzZWMnXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy9kbnNzZWMnKTtcbmZvcm1hdHNbJ3B1dHR5J10gPSByZXF1aXJlKCcuL2Zvcm1hdHMvcHV0dHknKTtcbmZvcm1hdHNbJ3BwayddID0gZm9ybWF0c1sncHV0dHknXTtcblxuZnVuY3Rpb24gS2V5KG9wdHMpIHtcblx0YXNzZXJ0Lm9iamVjdChvcHRzLCAnb3B0aW9ucycpO1xuXHRhc3NlcnQuYXJyYXlPZk9iamVjdChvcHRzLnBhcnRzLCAnb3B0aW9ucy5wYXJ0cycpO1xuXHRhc3NlcnQuc3RyaW5nKG9wdHMudHlwZSwgJ29wdGlvbnMudHlwZScpO1xuXHRhc3NlcnQub3B0aW9uYWxTdHJpbmcob3B0cy5jb21tZW50LCAnb3B0aW9ucy5jb21tZW50Jyk7XG5cblx0dmFyIGFsZ0luZm8gPSBhbGdzLmluZm9bb3B0cy50eXBlXTtcblx0aWYgKHR5cGVvZiAoYWxnSW5mbykgIT09ICdvYmplY3QnKVxuXHRcdHRocm93IChuZXcgSW52YWxpZEFsZ29yaXRobUVycm9yKG9wdHMudHlwZSkpO1xuXG5cdHZhciBwYXJ0TG9va3VwID0ge307XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgb3B0cy5wYXJ0cy5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBwYXJ0ID0gb3B0cy5wYXJ0c1tpXTtcblx0XHRwYXJ0TG9va3VwW3BhcnQubmFtZV0gPSBwYXJ0O1xuXHR9XG5cblx0dGhpcy50eXBlID0gb3B0cy50eXBlO1xuXHR0aGlzLnBhcnRzID0gb3B0cy5wYXJ0cztcblx0dGhpcy5wYXJ0ID0gcGFydExvb2t1cDtcblx0dGhpcy5jb21tZW50ID0gdW5kZWZpbmVkO1xuXHR0aGlzLnNvdXJjZSA9IG9wdHMuc291cmNlO1xuXG5cdC8qIGZvciBzcGVlZGluZyB1cCBoYXNoaW5nL2ZpbmdlcnByaW50IG9wZXJhdGlvbnMgKi9cblx0dGhpcy5fcmZjNDI1M0NhY2hlID0gb3B0cy5fcmZjNDI1M0NhY2hlO1xuXHR0aGlzLl9oYXNoQ2FjaGUgPSB7fTtcblxuXHR2YXIgc3o7XG5cdHRoaXMuY3VydmUgPSB1bmRlZmluZWQ7XG5cdGlmICh0aGlzLnR5cGUgPT09ICdlY2RzYScpIHtcblx0XHR2YXIgY3VydmUgPSB0aGlzLnBhcnQuY3VydmUuZGF0YS50b1N0cmluZygpO1xuXHRcdHRoaXMuY3VydmUgPSBjdXJ2ZTtcblx0XHRzeiA9IGFsZ3MuY3VydmVzW2N1cnZlXS5zaXplO1xuXHR9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ2VkMjU1MTknIHx8IHRoaXMudHlwZSA9PT0gJ2N1cnZlMjU1MTknKSB7XG5cdFx0c3ogPSAyNTY7XG5cdFx0dGhpcy5jdXJ2ZSA9ICdjdXJ2ZTI1NTE5Jztcblx0fSBlbHNlIHtcblx0XHR2YXIgc3pQYXJ0ID0gdGhpcy5wYXJ0W2FsZ0luZm8uc2l6ZVBhcnRdO1xuXHRcdHN6ID0gc3pQYXJ0LmRhdGEubGVuZ3RoO1xuXHRcdHN6ID0gc3ogKiA4IC0gdXRpbHMuY291bnRaZXJvcyhzelBhcnQuZGF0YSk7XG5cdH1cblx0dGhpcy5zaXplID0gc3o7XG59XG5cbktleS5mb3JtYXRzID0gZm9ybWF0cztcblxuS2V5LnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uIChmb3JtYXQsIG9wdGlvbnMpIHtcblx0aWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKVxuXHRcdGZvcm1hdCA9ICdzc2gnO1xuXHRhc3NlcnQuc3RyaW5nKGZvcm1hdCwgJ2Zvcm1hdCcpO1xuXHRhc3NlcnQub2JqZWN0KGZvcm1hdHNbZm9ybWF0XSwgJ2Zvcm1hdHNbZm9ybWF0XScpO1xuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucywgJ29wdGlvbnMnKTtcblxuXHRpZiAoZm9ybWF0ID09PSAncmZjNDI1MycpIHtcblx0XHRpZiAodGhpcy5fcmZjNDI1M0NhY2hlID09PSB1bmRlZmluZWQpXG5cdFx0XHR0aGlzLl9yZmM0MjUzQ2FjaGUgPSBmb3JtYXRzWydyZmM0MjUzJ10ud3JpdGUodGhpcyk7XG5cdFx0cmV0dXJuICh0aGlzLl9yZmM0MjUzQ2FjaGUpO1xuXHR9XG5cblx0cmV0dXJuIChmb3JtYXRzW2Zvcm1hdF0ud3JpdGUodGhpcywgb3B0aW9ucykpO1xufTtcblxuS2V5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChmb3JtYXQsIG9wdGlvbnMpIHtcblx0cmV0dXJuICh0aGlzLnRvQnVmZmVyKGZvcm1hdCwgb3B0aW9ucykudG9TdHJpbmcoKSk7XG59O1xuXG5LZXkucHJvdG90eXBlLmhhc2ggPSBmdW5jdGlvbiAoYWxnbywgdHlwZSkge1xuXHRhc3NlcnQuc3RyaW5nKGFsZ28sICdhbGdvcml0aG0nKTtcblx0YXNzZXJ0Lm9wdGlvbmFsU3RyaW5nKHR5cGUsICd0eXBlJyk7XG5cdGlmICh0eXBlID09PSB1bmRlZmluZWQpXG5cdFx0dHlwZSA9ICdzc2gnO1xuXHRhbGdvID0gYWxnby50b0xvd2VyQ2FzZSgpO1xuXHRpZiAoYWxncy5oYXNoQWxnc1thbGdvXSA9PT0gdW5kZWZpbmVkKVxuXHRcdHRocm93IChuZXcgSW52YWxpZEFsZ29yaXRobUVycm9yKGFsZ28pKTtcblxuXHR2YXIgY2FjaGVLZXkgPSBhbGdvICsgJ3x8JyArIHR5cGU7XG5cdGlmICh0aGlzLl9oYXNoQ2FjaGVbY2FjaGVLZXldKVxuXHRcdHJldHVybiAodGhpcy5faGFzaENhY2hlW2NhY2hlS2V5XSk7XG5cblx0dmFyIGJ1Zjtcblx0aWYgKHR5cGUgPT09ICdzc2gnKSB7XG5cdFx0YnVmID0gdGhpcy50b0J1ZmZlcigncmZjNDI1MycpO1xuXHR9IGVsc2UgaWYgKHR5cGUgPT09ICdzcGtpJykge1xuXHRcdGJ1ZiA9IGZvcm1hdHMucGtjczgucGtjczhUb0J1ZmZlcih0aGlzKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdIYXNoIHR5cGUgJyArIHR5cGUgKyAnIG5vdCBzdXBwb3J0ZWQnKSk7XG5cdH1cblx0dmFyIGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaChhbGdvKS51cGRhdGUoYnVmKS5kaWdlc3QoKTtcblx0dGhpcy5faGFzaENhY2hlW2NhY2hlS2V5XSA9IGhhc2g7XG5cdHJldHVybiAoaGFzaCk7XG59O1xuXG5LZXkucHJvdG90eXBlLmZpbmdlcnByaW50ID0gZnVuY3Rpb24gKGFsZ28sIHR5cGUpIHtcblx0aWYgKGFsZ28gPT09IHVuZGVmaW5lZClcblx0XHRhbGdvID0gJ3NoYTI1Nic7XG5cdGlmICh0eXBlID09PSB1bmRlZmluZWQpXG5cdFx0dHlwZSA9ICdzc2gnO1xuXHRhc3NlcnQuc3RyaW5nKGFsZ28sICdhbGdvcml0aG0nKTtcblx0YXNzZXJ0LnN0cmluZyh0eXBlLCAndHlwZScpO1xuXHR2YXIgb3B0cyA9IHtcblx0XHR0eXBlOiAna2V5Jyxcblx0XHRoYXNoOiB0aGlzLmhhc2goYWxnbywgdHlwZSksXG5cdFx0YWxnb3JpdGhtOiBhbGdvLFxuXHRcdGhhc2hUeXBlOiB0eXBlXG5cdH07XG5cdHJldHVybiAobmV3IEZpbmdlcnByaW50KG9wdHMpKTtcbn07XG5cbktleS5wcm90b3R5cGUuZGVmYXVsdEhhc2hBbGdvcml0aG0gPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBoYXNoQWxnbyA9ICdzaGExJztcblx0aWYgKHRoaXMudHlwZSA9PT0gJ3JzYScpXG5cdFx0aGFzaEFsZ28gPSAnc2hhMjU2Jztcblx0aWYgKHRoaXMudHlwZSA9PT0gJ2RzYScgJiYgdGhpcy5zaXplID4gMTAyNClcblx0XHRoYXNoQWxnbyA9ICdzaGEyNTYnO1xuXHRpZiAodGhpcy50eXBlID09PSAnZWQyNTUxOScpXG5cdFx0aGFzaEFsZ28gPSAnc2hhNTEyJztcblx0aWYgKHRoaXMudHlwZSA9PT0gJ2VjZHNhJykge1xuXHRcdGlmICh0aGlzLnNpemUgPD0gMjU2KVxuXHRcdFx0aGFzaEFsZ28gPSAnc2hhMjU2Jztcblx0XHRlbHNlIGlmICh0aGlzLnNpemUgPD0gMzg0KVxuXHRcdFx0aGFzaEFsZ28gPSAnc2hhMzg0Jztcblx0XHRlbHNlXG5cdFx0XHRoYXNoQWxnbyA9ICdzaGE1MTInO1xuXHR9XG5cdHJldHVybiAoaGFzaEFsZ28pO1xufTtcblxuS2V5LnByb3RvdHlwZS5jcmVhdGVWZXJpZnkgPSBmdW5jdGlvbiAoaGFzaEFsZ28pIHtcblx0aWYgKGhhc2hBbGdvID09PSB1bmRlZmluZWQpXG5cdFx0aGFzaEFsZ28gPSB0aGlzLmRlZmF1bHRIYXNoQWxnb3JpdGhtKCk7XG5cdGFzc2VydC5zdHJpbmcoaGFzaEFsZ28sICdoYXNoIGFsZ29yaXRobScpO1xuXG5cdC8qIEVEMjU1MTkgaXMgbm90IHN1cHBvcnRlZCBieSBPcGVuU1NMLCB1c2UgYSBqYXZhc2NyaXB0IGltcGwuICovXG5cdGlmICh0aGlzLnR5cGUgPT09ICdlZDI1NTE5JyAmJiBlZENvbXBhdCAhPT0gdW5kZWZpbmVkKVxuXHRcdHJldHVybiAobmV3IGVkQ29tcGF0LlZlcmlmaWVyKHRoaXMsIGhhc2hBbGdvKSk7XG5cdGlmICh0aGlzLnR5cGUgPT09ICdjdXJ2ZTI1NTE5Jylcblx0XHR0aHJvdyAobmV3IEVycm9yKCdDdXJ2ZTI1NTE5IGtleXMgYXJlIG5vdCBzdWl0YWJsZSBmb3IgJyArXG5cdFx0ICAgICdzaWduaW5nIG9yIHZlcmlmaWNhdGlvbicpKTtcblxuXHR2YXIgdiwgbm0sIGVycjtcblx0dHJ5IHtcblx0XHRubSA9IGhhc2hBbGdvLnRvVXBwZXJDYXNlKCk7XG5cdFx0diA9IGNyeXB0by5jcmVhdGVWZXJpZnkobm0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0ZXJyID0gZTtcblx0fVxuXHRpZiAodiA9PT0gdW5kZWZpbmVkIHx8IChlcnIgaW5zdGFuY2VvZiBFcnJvciAmJlxuXHQgICAgZXJyLm1lc3NhZ2UubWF0Y2goL1Vua25vd24gbWVzc2FnZSBkaWdlc3QvKSkpIHtcblx0XHRubSA9ICdSU0EtJztcblx0XHRubSArPSBoYXNoQWxnby50b1VwcGVyQ2FzZSgpO1xuXHRcdHYgPSBjcnlwdG8uY3JlYXRlVmVyaWZ5KG5tKTtcblx0fVxuXHRhc3NlcnQub2sodiwgJ2ZhaWxlZCB0byBjcmVhdGUgdmVyaWZpZXInKTtcblx0dmFyIG9sZFZlcmlmeSA9IHYudmVyaWZ5LmJpbmQodik7XG5cdHZhciBrZXkgPSB0aGlzLnRvQnVmZmVyKCdwa2NzOCcpO1xuXHR2YXIgY3VydmUgPSB0aGlzLmN1cnZlO1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cdHYudmVyaWZ5ID0gZnVuY3Rpb24gKHNpZ25hdHVyZSwgZm10KSB7XG5cdFx0aWYgKFNpZ25hdHVyZS5pc1NpZ25hdHVyZShzaWduYXR1cmUsIFsyLCAwXSkpIHtcblx0XHRcdGlmIChzaWduYXR1cmUudHlwZSAhPT0gc2VsZi50eXBlKVxuXHRcdFx0XHRyZXR1cm4gKGZhbHNlKTtcblx0XHRcdGlmIChzaWduYXR1cmUuaGFzaEFsZ29yaXRobSAmJlxuXHRcdFx0ICAgIHNpZ25hdHVyZS5oYXNoQWxnb3JpdGhtICE9PSBoYXNoQWxnbylcblx0XHRcdFx0cmV0dXJuIChmYWxzZSk7XG5cdFx0XHRpZiAoc2lnbmF0dXJlLmN1cnZlICYmIHNlbGYudHlwZSA9PT0gJ2VjZHNhJyAmJlxuXHRcdFx0ICAgIHNpZ25hdHVyZS5jdXJ2ZSAhPT0gY3VydmUpXG5cdFx0XHRcdHJldHVybiAoZmFsc2UpO1xuXHRcdFx0cmV0dXJuIChvbGRWZXJpZnkoa2V5LCBzaWduYXR1cmUudG9CdWZmZXIoJ2FzbjEnKSkpO1xuXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgKHNpZ25hdHVyZSkgPT09ICdzdHJpbmcnIHx8XG5cdFx0ICAgIEJ1ZmZlci5pc0J1ZmZlcihzaWduYXR1cmUpKSB7XG5cdFx0XHRyZXR1cm4gKG9sZFZlcmlmeShrZXksIHNpZ25hdHVyZSwgZm10KSk7XG5cblx0XHQvKlxuXHRcdCAqIEF2b2lkIGRvaW5nIHRoaXMgb24gdmFsaWQgYXJndW1lbnRzLCB3YWxraW5nIHRoZSBwcm90b3R5cGVcblx0XHQgKiBjaGFpbiBjYW4gYmUgcXVpdGUgc2xvdy5cblx0XHQgKi9cblx0XHR9IGVsc2UgaWYgKFNpZ25hdHVyZS5pc1NpZ25hdHVyZShzaWduYXR1cmUsIFsxLCAwXSkpIHtcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ3NpZ25hdHVyZSB3YXMgY3JlYXRlZCBieSB0b28gb2xkICcgK1xuXHRcdFx0ICAgICdhIHZlcnNpb24gb2Ygc3NocGsgYW5kIGNhbm5vdCBiZSB2ZXJpZmllZCcpKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyAobmV3IFR5cGVFcnJvcignc2lnbmF0dXJlIG11c3QgYmUgYSBzdHJpbmcsICcgK1xuXHRcdFx0ICAgICdCdWZmZXIsIG9yIFNpZ25hdHVyZSBvYmplY3QnKSk7XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gKHYpO1xufTtcblxuS2V5LnByb3RvdHlwZS5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZnVuY3Rpb24gKCkge1xuXHRpZiAodGhpcy50eXBlID09PSAncnNhJylcblx0XHR0aHJvdyAobmV3IEVycm9yKCdSU0Ega2V5cyBkbyBub3Qgc3VwcG9ydCBEaWZmaWUtSGVsbG1hbicpKTtcblxuXHRyZXR1cm4gKG5ldyBEaWZmaWVIZWxsbWFuKHRoaXMpKTtcbn07XG5LZXkucHJvdG90eXBlLmNyZWF0ZURIID0gS2V5LnByb3RvdHlwZS5jcmVhdGVEaWZmaWVIZWxsbWFuO1xuXG5LZXkucGFyc2UgPSBmdW5jdGlvbiAoZGF0YSwgZm9ybWF0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgKGRhdGEpICE9PSAnc3RyaW5nJylcblx0XHRhc3NlcnQuYnVmZmVyKGRhdGEsICdkYXRhJyk7XG5cdGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZClcblx0XHRmb3JtYXQgPSAnYXV0byc7XG5cdGFzc2VydC5zdHJpbmcoZm9ybWF0LCAnZm9ybWF0Jyk7XG5cdGlmICh0eXBlb2YgKG9wdGlvbnMpID09PSAnc3RyaW5nJylcblx0XHRvcHRpb25zID0geyBmaWxlbmFtZTogb3B0aW9ucyB9O1xuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucywgJ29wdGlvbnMnKTtcblx0aWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZClcblx0XHRvcHRpb25zID0ge307XG5cdGFzc2VydC5vcHRpb25hbFN0cmluZyhvcHRpb25zLmZpbGVuYW1lLCAnb3B0aW9ucy5maWxlbmFtZScpO1xuXHRpZiAob3B0aW9ucy5maWxlbmFtZSA9PT0gdW5kZWZpbmVkKVxuXHRcdG9wdGlvbnMuZmlsZW5hbWUgPSAnKHVubmFtZWQpJztcblxuXHRhc3NlcnQub2JqZWN0KGZvcm1hdHNbZm9ybWF0XSwgJ2Zvcm1hdHNbZm9ybWF0XScpO1xuXG5cdHRyeSB7XG5cdFx0dmFyIGsgPSBmb3JtYXRzW2Zvcm1hdF0ucmVhZChkYXRhLCBvcHRpb25zKTtcblx0XHRpZiAoayBpbnN0YW5jZW9mIFByaXZhdGVLZXkpXG5cdFx0XHRrID0gay50b1B1YmxpYygpO1xuXHRcdGlmICghay5jb21tZW50KVxuXHRcdFx0ay5jb21tZW50ID0gb3B0aW9ucy5maWxlbmFtZTtcblx0XHRyZXR1cm4gKGspO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKGUubmFtZSA9PT0gJ0tleUVuY3J5cHRlZEVycm9yJylcblx0XHRcdHRocm93IChlKTtcblx0XHR0aHJvdyAobmV3IEtleVBhcnNlRXJyb3Iob3B0aW9ucy5maWxlbmFtZSwgZm9ybWF0LCBlKSk7XG5cdH1cbn07XG5cbktleS5pc0tleSA9IGZ1bmN0aW9uIChvYmosIHZlcikge1xuXHRyZXR1cm4gKHV0aWxzLmlzQ29tcGF0aWJsZShvYmosIEtleSwgdmVyKSk7XG59O1xuXG4vKlxuICogQVBJIHZlcnNpb25zIGZvciBLZXk6XG4gKiBbMSwwXSAtLSBpbml0aWFsIHZlciwgbWF5IHRha2UgU2lnbmF0dXJlIGZvciBjcmVhdGVWZXJpZnkgb3IgbWF5IG5vdFxuICogWzEsMV0gLS0gYWRkZWQgcGtjczEsIHBrY3M4IGZvcm1hdHNcbiAqIFsxLDJdIC0tIGFkZGVkIGF1dG8sIHNzaC1wcml2YXRlLCBvcGVuc3NoIGZvcm1hdHNcbiAqIFsxLDNdIC0tIGFkZGVkIGRlZmF1bHRIYXNoQWxnb3JpdGhtXG4gKiBbMSw0XSAtLSBhZGRlZCBlZCBzdXBwb3J0LCBjcmVhdGVESFxuICogWzEsNV0gLS0gZmlyc3QgZXhwbGljaXRseSB0YWdnZWQgdmVyc2lvblxuICogWzEsNl0gLS0gY2hhbmdlZCBlZDI1NTE5IHBhcnQgbmFtZXNcbiAqIFsxLDddIC0tIHNwa2kgaGFzaCB0eXBlc1xuICovXG5LZXkucHJvdG90eXBlLl9zc2hwa0FwaVZlcnNpb24gPSBbMSwgN107XG5cbktleS5fb2xkVmVyc2lvbkRldGVjdCA9IGZ1bmN0aW9uIChvYmopIHtcblx0YXNzZXJ0LmZ1bmMob2JqLnRvQnVmZmVyKTtcblx0YXNzZXJ0LmZ1bmMob2JqLmZpbmdlcnByaW50KTtcblx0aWYgKG9iai5jcmVhdGVESClcblx0XHRyZXR1cm4gKFsxLCA0XSk7XG5cdGlmIChvYmouZGVmYXVsdEhhc2hBbGdvcml0aG0pXG5cdFx0cmV0dXJuIChbMSwgM10pO1xuXHRpZiAob2JqLmZvcm1hdHNbJ2F1dG8nXSlcblx0XHRyZXR1cm4gKFsxLCAyXSk7XG5cdGlmIChvYmouZm9ybWF0c1sncGtjczEnXSlcblx0XHRyZXR1cm4gKFsxLCAxXSk7XG5cdHJldHVybiAoWzEsIDBdKTtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGJ1ZmZlclNwbGl0OiBidWZmZXJTcGxpdCxcblx0YWRkUlNBTWlzc2luZzogYWRkUlNBTWlzc2luZyxcblx0Y2FsY3VsYXRlRFNBUHVibGljOiBjYWxjdWxhdGVEU0FQdWJsaWMsXG5cdGNhbGN1bGF0ZUVEMjU1MTlQdWJsaWM6IGNhbGN1bGF0ZUVEMjU1MTlQdWJsaWMsXG5cdGNhbGN1bGF0ZVgyNTUxOVB1YmxpYzogY2FsY3VsYXRlWDI1NTE5UHVibGljLFxuXHRtcE5vcm1hbGl6ZTogbXBOb3JtYWxpemUsXG5cdG1wRGVub3JtYWxpemU6IG1wRGVub3JtYWxpemUsXG5cdGVjTm9ybWFsaXplOiBlY05vcm1hbGl6ZSxcblx0Y291bnRaZXJvczogY291bnRaZXJvcyxcblx0YXNzZXJ0Q29tcGF0aWJsZTogYXNzZXJ0Q29tcGF0aWJsZSxcblx0aXNDb21wYXRpYmxlOiBpc0NvbXBhdGlibGUsXG5cdG9wZW5zc2xLZXlEZXJpdjogb3BlbnNzbEtleURlcml2LFxuXHRvcGVuc3NoQ2lwaGVySW5mbzogb3BlbnNzaENpcGhlckluZm8sXG5cdHB1YmxpY0Zyb21Qcml2YXRlRUNEU0E6IHB1YmxpY0Zyb21Qcml2YXRlRUNEU0EsXG5cdHplcm9QYWRUb0xlbmd0aDogemVyb1BhZFRvTGVuZ3RoLFxuXHR3cml0ZUJpdFN0cmluZzogd3JpdGVCaXRTdHJpbmcsXG5cdHJlYWRCaXRTdHJpbmc6IHJlYWRCaXRTdHJpbmcsXG5cdHBia2RmMjogcGJrZGYyXG59O1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4vcHJpdmF0ZS1rZXknKTtcbnZhciBLZXkgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuL2FsZ3MnKTtcbnZhciBhc24xID0gcmVxdWlyZSgnYXNuMScpO1xuXG52YXIgZWMgPSByZXF1aXJlKCdlY2MtanNibi9saWIvZWMnKTtcbnZhciBqc2JuID0gcmVxdWlyZSgnanNibicpLkJpZ0ludGVnZXI7XG52YXIgbmFjbCA9IHJlcXVpcmUoJ3R3ZWV0bmFjbCcpO1xuXG52YXIgTUFYX0NMQVNTX0RFUFRIID0gMztcblxuZnVuY3Rpb24gaXNDb21wYXRpYmxlKG9iaiwga2xhc3MsIG5lZWRWZXIpIHtcblx0aWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2YgKG9iaikgIT09ICdvYmplY3QnKVxuXHRcdHJldHVybiAoZmFsc2UpO1xuXHRpZiAobmVlZFZlciA9PT0gdW5kZWZpbmVkKVxuXHRcdG5lZWRWZXIgPSBrbGFzcy5wcm90b3R5cGUuX3NzaHBrQXBpVmVyc2lvbjtcblx0aWYgKG9iaiBpbnN0YW5jZW9mIGtsYXNzICYmXG5cdCAgICBrbGFzcy5wcm90b3R5cGUuX3NzaHBrQXBpVmVyc2lvblswXSA9PSBuZWVkVmVyWzBdKVxuXHRcdHJldHVybiAodHJ1ZSk7XG5cdHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopO1xuXHR2YXIgZGVwdGggPSAwO1xuXHR3aGlsZSAocHJvdG8uY29uc3RydWN0b3IubmFtZSAhPT0ga2xhc3MubmFtZSkge1xuXHRcdHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcblx0XHRpZiAoIXByb3RvIHx8ICsrZGVwdGggPiBNQVhfQ0xBU1NfREVQVEgpXG5cdFx0XHRyZXR1cm4gKGZhbHNlKTtcblx0fVxuXHRpZiAocHJvdG8uY29uc3RydWN0b3IubmFtZSAhPT0ga2xhc3MubmFtZSlcblx0XHRyZXR1cm4gKGZhbHNlKTtcblx0dmFyIHZlciA9IHByb3RvLl9zc2hwa0FwaVZlcnNpb247XG5cdGlmICh2ZXIgPT09IHVuZGVmaW5lZClcblx0XHR2ZXIgPSBrbGFzcy5fb2xkVmVyc2lvbkRldGVjdChvYmopO1xuXHRpZiAodmVyWzBdICE9IG5lZWRWZXJbMF0gfHwgdmVyWzFdIDwgbmVlZFZlclsxXSlcblx0XHRyZXR1cm4gKGZhbHNlKTtcblx0cmV0dXJuICh0cnVlKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Q29tcGF0aWJsZShvYmosIGtsYXNzLCBuZWVkVmVyLCBuYW1lKSB7XG5cdGlmIChuYW1lID09PSB1bmRlZmluZWQpXG5cdFx0bmFtZSA9ICdvYmplY3QnO1xuXHRhc3NlcnQub2sob2JqLCBuYW1lICsgJyBtdXN0IG5vdCBiZSBudWxsJyk7XG5cdGFzc2VydC5vYmplY3Qob2JqLCBuYW1lICsgJyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuXHRpZiAobmVlZFZlciA9PT0gdW5kZWZpbmVkKVxuXHRcdG5lZWRWZXIgPSBrbGFzcy5wcm90b3R5cGUuX3NzaHBrQXBpVmVyc2lvbjtcblx0aWYgKG9iaiBpbnN0YW5jZW9mIGtsYXNzICYmXG5cdCAgICBrbGFzcy5wcm90b3R5cGUuX3NzaHBrQXBpVmVyc2lvblswXSA9PSBuZWVkVmVyWzBdKVxuXHRcdHJldHVybjtcblx0dmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XG5cdHZhciBkZXB0aCA9IDA7XG5cdHdoaWxlIChwcm90by5jb25zdHJ1Y3Rvci5uYW1lICE9PSBrbGFzcy5uYW1lKSB7XG5cdFx0cHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuXHRcdGFzc2VydC5vayhwcm90byAmJiArK2RlcHRoIDw9IE1BWF9DTEFTU19ERVBUSCxcblx0XHQgICAgbmFtZSArICcgbXVzdCBiZSBhICcgKyBrbGFzcy5uYW1lICsgJyBpbnN0YW5jZScpO1xuXHR9XG5cdGFzc2VydC5zdHJpY3RFcXVhbChwcm90by5jb25zdHJ1Y3Rvci5uYW1lLCBrbGFzcy5uYW1lLFxuXHQgICAgbmFtZSArICcgbXVzdCBiZSBhICcgKyBrbGFzcy5uYW1lICsgJyBpbnN0YW5jZScpO1xuXHR2YXIgdmVyID0gcHJvdG8uX3NzaHBrQXBpVmVyc2lvbjtcblx0aWYgKHZlciA9PT0gdW5kZWZpbmVkKVxuXHRcdHZlciA9IGtsYXNzLl9vbGRWZXJzaW9uRGV0ZWN0KG9iaik7XG5cdGFzc2VydC5vayh2ZXJbMF0gPT0gbmVlZFZlclswXSAmJiB2ZXJbMV0gPj0gbmVlZFZlclsxXSxcblx0ICAgIG5hbWUgKyAnIG11c3QgYmUgY29tcGF0aWJsZSB3aXRoICcgKyBrbGFzcy5uYW1lICsgJyBrbGFzcyAnICtcblx0ICAgICd2ZXJzaW9uICcgKyBuZWVkVmVyWzBdICsgJy4nICsgbmVlZFZlclsxXSk7XG59XG5cbnZhciBDSVBIRVJfTEVOID0ge1xuXHQnZGVzLWVkZTMtY2JjJzogeyBrZXk6IDI0LCBpdjogOCB9LFxuXHQnYWVzLTEyOC1jYmMnOiB7IGtleTogMTYsIGl2OiAxNiB9LFxuXHQnYWVzLTI1Ni1jYmMnOiB7IGtleTogMzIsIGl2OiAxNiB9XG59O1xudmFyIFBLQ1M1X1NBTFRfTEVOID0gODtcblxuZnVuY3Rpb24gb3BlbnNzbEtleURlcml2KGNpcGhlciwgc2FsdCwgcGFzc3BocmFzZSwgY291bnQpIHtcblx0YXNzZXJ0LmJ1ZmZlcihzYWx0LCAnc2FsdCcpO1xuXHRhc3NlcnQuYnVmZmVyKHBhc3NwaHJhc2UsICdwYXNzcGhyYXNlJyk7XG5cdGFzc2VydC5udW1iZXIoY291bnQsICdpdGVyYXRpb24gY291bnQnKTtcblxuXHR2YXIgY2xlbiA9IENJUEhFUl9MRU5bY2lwaGVyXTtcblx0YXNzZXJ0Lm9iamVjdChjbGVuLCAnc3VwcG9ydGVkIGNpcGhlcicpO1xuXG5cdHNhbHQgPSBzYWx0LnNsaWNlKDAsIFBLQ1M1X1NBTFRfTEVOKTtcblxuXHR2YXIgRCwgRF9wcmV2LCBidWZzO1xuXHR2YXIgbWF0ZXJpYWwgPSBCdWZmZXIuYWxsb2MoMCk7XG5cdHdoaWxlIChtYXRlcmlhbC5sZW5ndGggPCBjbGVuLmtleSArIGNsZW4uaXYpIHtcblx0XHRidWZzID0gW107XG5cdFx0aWYgKERfcHJldilcblx0XHRcdGJ1ZnMucHVzaChEX3ByZXYpO1xuXHRcdGJ1ZnMucHVzaChwYXNzcGhyYXNlKTtcblx0XHRidWZzLnB1c2goc2FsdCk7XG5cdFx0RCA9IEJ1ZmZlci5jb25jYXQoYnVmcyk7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjb3VudDsgKytqKVxuXHRcdFx0RCA9IGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoRCkuZGlnZXN0KCk7XG5cdFx0bWF0ZXJpYWwgPSBCdWZmZXIuY29uY2F0KFttYXRlcmlhbCwgRF0pO1xuXHRcdERfcHJldiA9IEQ7XG5cdH1cblxuXHRyZXR1cm4gKHtcblx0ICAgIGtleTogbWF0ZXJpYWwuc2xpY2UoMCwgY2xlbi5rZXkpLFxuXHQgICAgaXY6IG1hdGVyaWFsLnNsaWNlKGNsZW4ua2V5LCBjbGVuLmtleSArIGNsZW4uaXYpXG5cdH0pO1xufVxuXG4vKiBTZWU6IFJGQzI4OTggKi9cbmZ1bmN0aW9uIHBia2RmMihoYXNoQWxnLCBzYWx0LCBpdGVyYXRpb25zLCBzaXplLCBwYXNzcGhyYXNlKSB7XG5cdHZhciBoa2V5ID0gQnVmZmVyLmFsbG9jKHNhbHQubGVuZ3RoICsgNCk7XG5cdHNhbHQuY29weShoa2V5KTtcblxuXHR2YXIgZ2VuID0gMCwgdHMgPSBbXTtcblx0dmFyIGkgPSAxO1xuXHR3aGlsZSAoZ2VuIDwgc2l6ZSkge1xuXHRcdHZhciB0ID0gVChpKyspO1xuXHRcdGdlbiArPSB0Lmxlbmd0aDtcblx0XHR0cy5wdXNoKHQpO1xuXHR9XG5cdHJldHVybiAoQnVmZmVyLmNvbmNhdCh0cykuc2xpY2UoMCwgc2l6ZSkpO1xuXG5cdGZ1bmN0aW9uIFQoSSkge1xuXHRcdGhrZXkud3JpdGVVSW50MzJCRShJLCBoa2V5Lmxlbmd0aCAtIDQpO1xuXG5cdFx0dmFyIGhtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYyhoYXNoQWxnLCBwYXNzcGhyYXNlKTtcblx0XHRobWFjLnVwZGF0ZShoa2V5KTtcblxuXHRcdHZhciBUaSA9IGhtYWMuZGlnZXN0KCk7XG5cdFx0dmFyIFVjID0gVGk7XG5cdFx0dmFyIGMgPSAxO1xuXHRcdHdoaWxlIChjKysgPCBpdGVyYXRpb25zKSB7XG5cdFx0XHRobWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoaGFzaEFsZywgcGFzc3BocmFzZSk7XG5cdFx0XHRobWFjLnVwZGF0ZShVYyk7XG5cdFx0XHRVYyA9IGhtYWMuZGlnZXN0KCk7XG5cdFx0XHRmb3IgKHZhciB4ID0gMDsgeCA8IFRpLmxlbmd0aDsgKyt4KVxuXHRcdFx0XHRUaVt4XSBePSBVY1t4XTtcblx0XHR9XG5cdFx0cmV0dXJuIChUaSk7XG5cdH1cbn1cblxuLyogQ291bnQgbGVhZGluZyB6ZXJvIGJpdHMgb24gYSBidWZmZXIgKi9cbmZ1bmN0aW9uIGNvdW50WmVyb3MoYnVmKSB7XG5cdHZhciBvID0gMCwgb2JpdCA9IDg7XG5cdHdoaWxlIChvIDwgYnVmLmxlbmd0aCkge1xuXHRcdHZhciBtYXNrID0gKDEgPDwgb2JpdCk7XG5cdFx0aWYgKChidWZbb10gJiBtYXNrKSA9PT0gbWFzaylcblx0XHRcdGJyZWFrO1xuXHRcdG9iaXQtLTtcblx0XHRpZiAob2JpdCA8IDApIHtcblx0XHRcdG8rKztcblx0XHRcdG9iaXQgPSA4O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gKG8qOCArICg4IC0gb2JpdCkgLSAxKTtcbn1cblxuZnVuY3Rpb24gYnVmZmVyU3BsaXQoYnVmLCBjaHIpIHtcblx0YXNzZXJ0LmJ1ZmZlcihidWYpO1xuXHRhc3NlcnQuc3RyaW5nKGNocik7XG5cblx0dmFyIHBhcnRzID0gW107XG5cdHZhciBsYXN0UGFydCA9IDA7XG5cdHZhciBtYXRjaGVzID0gMDtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyArK2kpIHtcblx0XHRpZiAoYnVmW2ldID09PSBjaHIuY2hhckNvZGVBdChtYXRjaGVzKSlcblx0XHRcdCsrbWF0Y2hlcztcblx0XHRlbHNlIGlmIChidWZbaV0gPT09IGNoci5jaGFyQ29kZUF0KDApKVxuXHRcdFx0bWF0Y2hlcyA9IDE7XG5cdFx0ZWxzZVxuXHRcdFx0bWF0Y2hlcyA9IDA7XG5cblx0XHRpZiAobWF0Y2hlcyA+PSBjaHIubGVuZ3RoKSB7XG5cdFx0XHR2YXIgbmV3UGFydCA9IGkgKyAxO1xuXHRcdFx0cGFydHMucHVzaChidWYuc2xpY2UobGFzdFBhcnQsIG5ld1BhcnQgLSBtYXRjaGVzKSk7XG5cdFx0XHRsYXN0UGFydCA9IG5ld1BhcnQ7XG5cdFx0XHRtYXRjaGVzID0gMDtcblx0XHR9XG5cdH1cblx0aWYgKGxhc3RQYXJ0IDw9IGJ1Zi5sZW5ndGgpXG5cdFx0cGFydHMucHVzaChidWYuc2xpY2UobGFzdFBhcnQsIGJ1Zi5sZW5ndGgpKTtcblxuXHRyZXR1cm4gKHBhcnRzKTtcbn1cblxuZnVuY3Rpb24gZWNOb3JtYWxpemUoYnVmLCBhZGRaZXJvKSB7XG5cdGFzc2VydC5idWZmZXIoYnVmKTtcblx0aWYgKGJ1ZlswXSA9PT0gMHgwMCAmJiBidWZbMV0gPT09IDB4MDQpIHtcblx0XHRpZiAoYWRkWmVybylcblx0XHRcdHJldHVybiAoYnVmKTtcblx0XHRyZXR1cm4gKGJ1Zi5zbGljZSgxKSk7XG5cdH0gZWxzZSBpZiAoYnVmWzBdID09PSAweDA0KSB7XG5cdFx0aWYgKCFhZGRaZXJvKVxuXHRcdFx0cmV0dXJuIChidWYpO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlIChidWZbMF0gPT09IDB4MDApXG5cdFx0XHRidWYgPSBidWYuc2xpY2UoMSk7XG5cdFx0aWYgKGJ1ZlswXSA9PT0gMHgwMiB8fCBidWZbMF0gPT09IDB4MDMpXG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKCdDb21wcmVzc2VkIGVsbGlwdGljIGN1cnZlIHBvaW50cyAnICtcblx0XHRcdCAgICAnYXJlIG5vdCBzdXBwb3J0ZWQnKSk7XG5cdFx0aWYgKGJ1ZlswXSAhPT0gMHgwNClcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ05vdCBhIHZhbGlkIGVsbGlwdGljIGN1cnZlIHBvaW50JykpO1xuXHRcdGlmICghYWRkWmVybylcblx0XHRcdHJldHVybiAoYnVmKTtcblx0fVxuXHR2YXIgYiA9IEJ1ZmZlci5hbGxvYyhidWYubGVuZ3RoICsgMSk7XG5cdGJbMF0gPSAweDA7XG5cdGJ1Zi5jb3B5KGIsIDEpO1xuXHRyZXR1cm4gKGIpO1xufVxuXG5mdW5jdGlvbiByZWFkQml0U3RyaW5nKGRlciwgdGFnKSB7XG5cdGlmICh0YWcgPT09IHVuZGVmaW5lZClcblx0XHR0YWcgPSBhc24xLkJlci5CaXRTdHJpbmc7XG5cdHZhciBidWYgPSBkZXIucmVhZFN0cmluZyh0YWcsIHRydWUpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwoYnVmWzBdLCAweDAwLCAnYml0IHN0cmluZ3Mgd2l0aCB1bnVzZWQgYml0cyBhcmUgJyArXG5cdCAgICAnbm90IHN1cHBvcnRlZCAoMHgnICsgYnVmWzBdLnRvU3RyaW5nKDE2KSArICcpJyk7XG5cdHJldHVybiAoYnVmLnNsaWNlKDEpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVCaXRTdHJpbmcoZGVyLCBidWYsIHRhZykge1xuXHRpZiAodGFnID09PSB1bmRlZmluZWQpXG5cdFx0dGFnID0gYXNuMS5CZXIuQml0U3RyaW5nO1xuXHR2YXIgYiA9IEJ1ZmZlci5hbGxvYyhidWYubGVuZ3RoICsgMSk7XG5cdGJbMF0gPSAweDAwO1xuXHRidWYuY29weShiLCAxKTtcblx0ZGVyLndyaXRlQnVmZmVyKGIsIHRhZyk7XG59XG5cbmZ1bmN0aW9uIG1wTm9ybWFsaXplKGJ1Zikge1xuXHRhc3NlcnQuYnVmZmVyKGJ1Zik7XG5cdHdoaWxlIChidWYubGVuZ3RoID4gMSAmJiBidWZbMF0gPT09IDB4MDAgJiYgKGJ1ZlsxXSAmIDB4ODApID09PSAweDAwKVxuXHRcdGJ1ZiA9IGJ1Zi5zbGljZSgxKTtcblx0aWYgKChidWZbMF0gJiAweDgwKSA9PT0gMHg4MCkge1xuXHRcdHZhciBiID0gQnVmZmVyLmFsbG9jKGJ1Zi5sZW5ndGggKyAxKTtcblx0XHRiWzBdID0gMHgwMDtcblx0XHRidWYuY29weShiLCAxKTtcblx0XHRidWYgPSBiO1xuXHR9XG5cdHJldHVybiAoYnVmKTtcbn1cblxuZnVuY3Rpb24gbXBEZW5vcm1hbGl6ZShidWYpIHtcblx0YXNzZXJ0LmJ1ZmZlcihidWYpO1xuXHR3aGlsZSAoYnVmLmxlbmd0aCA+IDEgJiYgYnVmWzBdID09PSAweDAwKVxuXHRcdGJ1ZiA9IGJ1Zi5zbGljZSgxKTtcblx0cmV0dXJuIChidWYpO1xufVxuXG5mdW5jdGlvbiB6ZXJvUGFkVG9MZW5ndGgoYnVmLCBsZW4pIHtcblx0YXNzZXJ0LmJ1ZmZlcihidWYpO1xuXHRhc3NlcnQubnVtYmVyKGxlbik7XG5cdHdoaWxlIChidWYubGVuZ3RoID4gbGVuKSB7XG5cdFx0YXNzZXJ0LmVxdWFsKGJ1ZlswXSwgMHgwMCk7XG5cdFx0YnVmID0gYnVmLnNsaWNlKDEpO1xuXHR9XG5cdHdoaWxlIChidWYubGVuZ3RoIDwgbGVuKSB7XG5cdFx0dmFyIGIgPSBCdWZmZXIuYWxsb2MoYnVmLmxlbmd0aCArIDEpO1xuXHRcdGJbMF0gPSAweDAwO1xuXHRcdGJ1Zi5jb3B5KGIsIDEpO1xuXHRcdGJ1ZiA9IGI7XG5cdH1cblx0cmV0dXJuIChidWYpO1xufVxuXG5mdW5jdGlvbiBiaWdpbnRUb01wQnVmKGJpZ2ludCkge1xuXHR2YXIgYnVmID0gQnVmZmVyLmZyb20oYmlnaW50LnRvQnl0ZUFycmF5KCkpO1xuXHRidWYgPSBtcE5vcm1hbGl6ZShidWYpO1xuXHRyZXR1cm4gKGJ1Zik7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZURTQVB1YmxpYyhnLCBwLCB4KSB7XG5cdGFzc2VydC5idWZmZXIoZyk7XG5cdGFzc2VydC5idWZmZXIocCk7XG5cdGFzc2VydC5idWZmZXIoeCk7XG5cdGcgPSBuZXcganNibihnKTtcblx0cCA9IG5ldyBqc2JuKHApO1xuXHR4ID0gbmV3IGpzYm4oeCk7XG5cdHZhciB5ID0gZy5tb2RQb3coeCwgcCk7XG5cdHZhciB5YnVmID0gYmlnaW50VG9NcEJ1Zih5KTtcblx0cmV0dXJuICh5YnVmKTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRUQyNTUxOVB1YmxpYyhrKSB7XG5cdGFzc2VydC5idWZmZXIoayk7XG5cblx0dmFyIGtwID0gbmFjbC5zaWduLmtleVBhaXIuZnJvbVNlZWQobmV3IFVpbnQ4QXJyYXkoaykpO1xuXHRyZXR1cm4gKEJ1ZmZlci5mcm9tKGtwLnB1YmxpY0tleSkpO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVYMjU1MTlQdWJsaWMoaykge1xuXHRhc3NlcnQuYnVmZmVyKGspO1xuXG5cdHZhciBrcCA9IG5hY2wuYm94LmtleVBhaXIuZnJvbVNlZWQobmV3IFVpbnQ4QXJyYXkoaykpO1xuXHRyZXR1cm4gKEJ1ZmZlci5mcm9tKGtwLnB1YmxpY0tleSkpO1xufVxuXG5mdW5jdGlvbiBhZGRSU0FNaXNzaW5nKGtleSkge1xuXHRhc3NlcnQub2JqZWN0KGtleSk7XG5cdGFzc2VydENvbXBhdGlibGUoa2V5LCBQcml2YXRlS2V5LCBbMSwgMV0pO1xuXG5cdHZhciBkID0gbmV3IGpzYm4oa2V5LnBhcnQuZC5kYXRhKTtcblx0dmFyIGJ1ZjtcblxuXHRpZiAoIWtleS5wYXJ0LmRtb2RwKSB7XG5cdFx0dmFyIHAgPSBuZXcganNibihrZXkucGFydC5wLmRhdGEpO1xuXHRcdHZhciBkbW9kcCA9IGQubW9kKHAuc3VidHJhY3QoMSkpO1xuXG5cdFx0YnVmID0gYmlnaW50VG9NcEJ1ZihkbW9kcCk7XG5cdFx0a2V5LnBhcnQuZG1vZHAgPSB7bmFtZTogJ2Rtb2RwJywgZGF0YTogYnVmfTtcblx0XHRrZXkucGFydHMucHVzaChrZXkucGFydC5kbW9kcCk7XG5cdH1cblx0aWYgKCFrZXkucGFydC5kbW9kcSkge1xuXHRcdHZhciBxID0gbmV3IGpzYm4oa2V5LnBhcnQucS5kYXRhKTtcblx0XHR2YXIgZG1vZHEgPSBkLm1vZChxLnN1YnRyYWN0KDEpKTtcblxuXHRcdGJ1ZiA9IGJpZ2ludFRvTXBCdWYoZG1vZHEpO1xuXHRcdGtleS5wYXJ0LmRtb2RxID0ge25hbWU6ICdkbW9kcScsIGRhdGE6IGJ1Zn07XG5cdFx0a2V5LnBhcnRzLnB1c2goa2V5LnBhcnQuZG1vZHEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHB1YmxpY0Zyb21Qcml2YXRlRUNEU0EoY3VydmVOYW1lLCBwcml2KSB7XG5cdGFzc2VydC5zdHJpbmcoY3VydmVOYW1lLCAnY3VydmVOYW1lJyk7XG5cdGFzc2VydC5idWZmZXIocHJpdik7XG5cdHZhciBwYXJhbXMgPSBhbGdzLmN1cnZlc1tjdXJ2ZU5hbWVdO1xuXHR2YXIgcCA9IG5ldyBqc2JuKHBhcmFtcy5wKTtcblx0dmFyIGEgPSBuZXcganNibihwYXJhbXMuYSk7XG5cdHZhciBiID0gbmV3IGpzYm4ocGFyYW1zLmIpO1xuXHR2YXIgY3VydmUgPSBuZXcgZWMuRUNDdXJ2ZUZwKHAsIGEsIGIpO1xuXHR2YXIgRyA9IGN1cnZlLmRlY29kZVBvaW50SGV4KHBhcmFtcy5HLnRvU3RyaW5nKCdoZXgnKSk7XG5cblx0dmFyIGQgPSBuZXcganNibihtcE5vcm1hbGl6ZShwcml2KSk7XG5cdHZhciBwdWIgPSBHLm11bHRpcGx5KGQpO1xuXHRwdWIgPSBCdWZmZXIuZnJvbShjdXJ2ZS5lbmNvZGVQb2ludEhleChwdWIpLCAnaGV4Jyk7XG5cblx0dmFyIHBhcnRzID0gW107XG5cdHBhcnRzLnB1c2goe25hbWU6ICdjdXJ2ZScsIGRhdGE6IEJ1ZmZlci5mcm9tKGN1cnZlTmFtZSl9KTtcblx0cGFydHMucHVzaCh7bmFtZTogJ1EnLCBkYXRhOiBwdWJ9KTtcblxuXHR2YXIga2V5ID0gbmV3IEtleSh7dHlwZTogJ2VjZHNhJywgY3VydmU6IGN1cnZlLCBwYXJ0czogcGFydHN9KTtcblx0cmV0dXJuIChrZXkpO1xufVxuXG5mdW5jdGlvbiBvcGVuc3NoQ2lwaGVySW5mbyhjaXBoZXIpIHtcblx0dmFyIGluZiA9IHt9O1xuXHRzd2l0Y2ggKGNpcGhlcikge1xuXHRjYXNlICczZGVzLWNiYyc6XG5cdFx0aW5mLmtleVNpemUgPSAyNDtcblx0XHRpbmYuYmxvY2tTaXplID0gODtcblx0XHRpbmYub3BlbnNzbE5hbWUgPSAnZGVzLWVkZTMtY2JjJztcblx0XHRicmVhaztcblx0Y2FzZSAnYmxvd2Zpc2gtY2JjJzpcblx0XHRpbmYua2V5U2l6ZSA9IDE2O1xuXHRcdGluZi5ibG9ja1NpemUgPSA4O1xuXHRcdGluZi5vcGVuc3NsTmFtZSA9ICdiZi1jYmMnO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdhZXMxMjgtY2JjJzpcblx0Y2FzZSAnYWVzMTI4LWN0cic6XG5cdGNhc2UgJ2FlczEyOC1nY21Ab3BlbnNzaC5jb20nOlxuXHRcdGluZi5rZXlTaXplID0gMTY7XG5cdFx0aW5mLmJsb2NrU2l6ZSA9IDE2O1xuXHRcdGluZi5vcGVuc3NsTmFtZSA9ICdhZXMtMTI4LScgKyBjaXBoZXIuc2xpY2UoNywgMTApO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdhZXMxOTItY2JjJzpcblx0Y2FzZSAnYWVzMTkyLWN0cic6XG5cdGNhc2UgJ2FlczE5Mi1nY21Ab3BlbnNzaC5jb20nOlxuXHRcdGluZi5rZXlTaXplID0gMjQ7XG5cdFx0aW5mLmJsb2NrU2l6ZSA9IDE2O1xuXHRcdGluZi5vcGVuc3NsTmFtZSA9ICdhZXMtMTkyLScgKyBjaXBoZXIuc2xpY2UoNywgMTApO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdhZXMyNTYtY2JjJzpcblx0Y2FzZSAnYWVzMjU2LWN0cic6XG5cdGNhc2UgJ2FlczI1Ni1nY21Ab3BlbnNzaC5jb20nOlxuXHRcdGluZi5rZXlTaXplID0gMzI7XG5cdFx0aW5mLmJsb2NrU2l6ZSA9IDE2O1xuXHRcdGluZi5vcGVuc3NsTmFtZSA9ICdhZXMtMjU2LScgKyBjaXBoZXIuc2xpY2UoNywgMTApO1xuXHRcdGJyZWFrO1xuXHRkZWZhdWx0OlxuXHRcdHRocm93IChuZXcgRXJyb3IoXG5cdFx0ICAgICdVbnN1cHBvcnRlZCBvcGVuc3NsIGNpcGhlciBcIicgKyBjaXBoZXIgKyAnXCInKSk7XG5cdH1cblx0cmV0dXJuIChpbmYpO1xufVxuIiwiLy8gQ29weXJpZ2h0IDIwMTcgSm95ZW50LCBJbmMuXG5cbm1vZHVsZS5leHBvcnRzID0gUHJpdmF0ZUtleTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuL2FsZ3MnKTtcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbnZhciBGaW5nZXJwcmludCA9IHJlcXVpcmUoJy4vZmluZ2VycHJpbnQnKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xudmFyIGVycnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgZGhlID0gcmVxdWlyZSgnLi9kaGUnKTtcbnZhciBnZW5lcmF0ZUVDRFNBID0gZGhlLmdlbmVyYXRlRUNEU0E7XG52YXIgZ2VuZXJhdGVFRDI1NTE5ID0gZGhlLmdlbmVyYXRlRUQyNTUxOTtcbnZhciBlZENvbXBhdCA9IHJlcXVpcmUoJy4vZWQtY29tcGF0Jyk7XG52YXIgbmFjbCA9IHJlcXVpcmUoJ3R3ZWV0bmFjbCcpO1xuXG52YXIgS2V5ID0gcmVxdWlyZSgnLi9rZXknKTtcblxudmFyIEludmFsaWRBbGdvcml0aG1FcnJvciA9IGVycnMuSW52YWxpZEFsZ29yaXRobUVycm9yO1xudmFyIEtleVBhcnNlRXJyb3IgPSBlcnJzLktleVBhcnNlRXJyb3I7XG52YXIgS2V5RW5jcnlwdGVkRXJyb3IgPSBlcnJzLktleUVuY3J5cHRlZEVycm9yO1xuXG52YXIgZm9ybWF0cyA9IHt9O1xuZm9ybWF0c1snYXV0byddID0gcmVxdWlyZSgnLi9mb3JtYXRzL2F1dG8nKTtcbmZvcm1hdHNbJ3BlbSddID0gcmVxdWlyZSgnLi9mb3JtYXRzL3BlbScpO1xuZm9ybWF0c1sncGtjczEnXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy9wa2NzMScpO1xuZm9ybWF0c1sncGtjczgnXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy9wa2NzOCcpO1xuZm9ybWF0c1sncmZjNDI1MyddID0gcmVxdWlyZSgnLi9mb3JtYXRzL3JmYzQyNTMnKTtcbmZvcm1hdHNbJ3NzaC1wcml2YXRlJ10gPSByZXF1aXJlKCcuL2Zvcm1hdHMvc3NoLXByaXZhdGUnKTtcbmZvcm1hdHNbJ29wZW5zc2gnXSA9IGZvcm1hdHNbJ3NzaC1wcml2YXRlJ107XG5mb3JtYXRzWydzc2gnXSA9IGZvcm1hdHNbJ3NzaC1wcml2YXRlJ107XG5mb3JtYXRzWydkbnNzZWMnXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy9kbnNzZWMnKTtcblxuZnVuY3Rpb24gUHJpdmF0ZUtleShvcHRzKSB7XG5cdGFzc2VydC5vYmplY3Qob3B0cywgJ29wdGlvbnMnKTtcblx0S2V5LmNhbGwodGhpcywgb3B0cyk7XG5cblx0dGhpcy5fcHViQ2FjaGUgPSB1bmRlZmluZWQ7XG59XG51dGlsLmluaGVyaXRzKFByaXZhdGVLZXksIEtleSk7XG5cblByaXZhdGVLZXkuZm9ybWF0cyA9IGZvcm1hdHM7XG5cblByaXZhdGVLZXkucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gKGZvcm1hdCwgb3B0aW9ucykge1xuXHRpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpXG5cdFx0Zm9ybWF0ID0gJ3BrY3MxJztcblx0YXNzZXJ0LnN0cmluZyhmb3JtYXQsICdmb3JtYXQnKTtcblx0YXNzZXJ0Lm9iamVjdChmb3JtYXRzW2Zvcm1hdF0sICdmb3JtYXRzW2Zvcm1hdF0nKTtcblx0YXNzZXJ0Lm9wdGlvbmFsT2JqZWN0KG9wdGlvbnMsICdvcHRpb25zJyk7XG5cblx0cmV0dXJuIChmb3JtYXRzW2Zvcm1hdF0ud3JpdGUodGhpcywgb3B0aW9ucykpO1xufTtcblxuUHJpdmF0ZUtleS5wcm90b3R5cGUuaGFzaCA9IGZ1bmN0aW9uIChhbGdvLCB0eXBlKSB7XG5cdHJldHVybiAodGhpcy50b1B1YmxpYygpLmhhc2goYWxnbywgdHlwZSkpO1xufTtcblxuUHJpdmF0ZUtleS5wcm90b3R5cGUuZmluZ2VycHJpbnQgPSBmdW5jdGlvbiAoYWxnbywgdHlwZSkge1xuXHRyZXR1cm4gKHRoaXMudG9QdWJsaWMoKS5maW5nZXJwcmludChhbGdvLCB0eXBlKSk7XG59O1xuXG5Qcml2YXRlS2V5LnByb3RvdHlwZS50b1B1YmxpYyA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKHRoaXMuX3B1YkNhY2hlKVxuXHRcdHJldHVybiAodGhpcy5fcHViQ2FjaGUpO1xuXG5cdHZhciBhbGdJbmZvID0gYWxncy5pbmZvW3RoaXMudHlwZV07XG5cdHZhciBwdWJQYXJ0cyA9IFtdO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGFsZ0luZm8ucGFydHMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgcCA9IGFsZ0luZm8ucGFydHNbaV07XG5cdFx0cHViUGFydHMucHVzaCh0aGlzLnBhcnRbcF0pO1xuXHR9XG5cblx0dGhpcy5fcHViQ2FjaGUgPSBuZXcgS2V5KHtcblx0XHR0eXBlOiB0aGlzLnR5cGUsXG5cdFx0c291cmNlOiB0aGlzLFxuXHRcdHBhcnRzOiBwdWJQYXJ0c1xuXHR9KTtcblx0aWYgKHRoaXMuY29tbWVudClcblx0XHR0aGlzLl9wdWJDYWNoZS5jb21tZW50ID0gdGhpcy5jb21tZW50O1xuXHRyZXR1cm4gKHRoaXMuX3B1YkNhY2hlKTtcbn07XG5cblByaXZhdGVLZXkucHJvdG90eXBlLmRlcml2ZSA9IGZ1bmN0aW9uIChuZXdUeXBlKSB7XG5cdGFzc2VydC5zdHJpbmcobmV3VHlwZSwgJ3R5cGUnKTtcblx0dmFyIHByaXYsIHB1YiwgcGFpcjtcblxuXHRpZiAodGhpcy50eXBlID09PSAnZWQyNTUxOScgJiYgbmV3VHlwZSA9PT0gJ2N1cnZlMjU1MTknKSB7XG5cdFx0cHJpdiA9IHRoaXMucGFydC5rLmRhdGE7XG5cdFx0aWYgKHByaXZbMF0gPT09IDB4MDApXG5cdFx0XHRwcml2ID0gcHJpdi5zbGljZSgxKTtcblxuXHRcdHBhaXIgPSBuYWNsLmJveC5rZXlQYWlyLmZyb21TZWNyZXRLZXkobmV3IFVpbnQ4QXJyYXkocHJpdikpO1xuXHRcdHB1YiA9IEJ1ZmZlci5mcm9tKHBhaXIucHVibGljS2V5KTtcblxuXHRcdHJldHVybiAobmV3IFByaXZhdGVLZXkoe1xuXHRcdFx0dHlwZTogJ2N1cnZlMjU1MTknLFxuXHRcdFx0cGFydHM6IFtcblx0XHRcdFx0eyBuYW1lOiAnQScsIGRhdGE6IHV0aWxzLm1wTm9ybWFsaXplKHB1YikgfSxcblx0XHRcdFx0eyBuYW1lOiAnaycsIGRhdGE6IHV0aWxzLm1wTm9ybWFsaXplKHByaXYpIH1cblx0XHRcdF1cblx0XHR9KSk7XG5cdH0gZWxzZSBpZiAodGhpcy50eXBlID09PSAnY3VydmUyNTUxOScgJiYgbmV3VHlwZSA9PT0gJ2VkMjU1MTknKSB7XG5cdFx0cHJpdiA9IHRoaXMucGFydC5rLmRhdGE7XG5cdFx0aWYgKHByaXZbMF0gPT09IDB4MDApXG5cdFx0XHRwcml2ID0gcHJpdi5zbGljZSgxKTtcblxuXHRcdHBhaXIgPSBuYWNsLnNpZ24ua2V5UGFpci5mcm9tU2VlZChuZXcgVWludDhBcnJheShwcml2KSk7XG5cdFx0cHViID0gQnVmZmVyLmZyb20ocGFpci5wdWJsaWNLZXkpO1xuXG5cdFx0cmV0dXJuIChuZXcgUHJpdmF0ZUtleSh7XG5cdFx0XHR0eXBlOiAnZWQyNTUxOScsXG5cdFx0XHRwYXJ0czogW1xuXHRcdFx0XHR7IG5hbWU6ICdBJywgZGF0YTogdXRpbHMubXBOb3JtYWxpemUocHViKSB9LFxuXHRcdFx0XHR7IG5hbWU6ICdrJywgZGF0YTogdXRpbHMubXBOb3JtYWxpemUocHJpdikgfVxuXHRcdFx0XVxuXHRcdH0pKTtcblx0fVxuXHR0aHJvdyAobmV3IEVycm9yKCdLZXkgZGVyaXZhdGlvbiBub3Qgc3VwcG9ydGVkIGZyb20gJyArIHRoaXMudHlwZSArXG5cdCAgICAnIHRvICcgKyBuZXdUeXBlKSk7XG59O1xuXG5Qcml2YXRlS2V5LnByb3RvdHlwZS5jcmVhdGVWZXJpZnkgPSBmdW5jdGlvbiAoaGFzaEFsZ28pIHtcblx0cmV0dXJuICh0aGlzLnRvUHVibGljKCkuY3JlYXRlVmVyaWZ5KGhhc2hBbGdvKSk7XG59O1xuXG5Qcml2YXRlS2V5LnByb3RvdHlwZS5jcmVhdGVTaWduID0gZnVuY3Rpb24gKGhhc2hBbGdvKSB7XG5cdGlmIChoYXNoQWxnbyA9PT0gdW5kZWZpbmVkKVxuXHRcdGhhc2hBbGdvID0gdGhpcy5kZWZhdWx0SGFzaEFsZ29yaXRobSgpO1xuXHRhc3NlcnQuc3RyaW5nKGhhc2hBbGdvLCAnaGFzaCBhbGdvcml0aG0nKTtcblxuXHQvKiBFRDI1NTE5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgT3BlblNTTCwgdXNlIGEgamF2YXNjcmlwdCBpbXBsLiAqL1xuXHRpZiAodGhpcy50eXBlID09PSAnZWQyNTUxOScgJiYgZWRDb21wYXQgIT09IHVuZGVmaW5lZClcblx0XHRyZXR1cm4gKG5ldyBlZENvbXBhdC5TaWduZXIodGhpcywgaGFzaEFsZ28pKTtcblx0aWYgKHRoaXMudHlwZSA9PT0gJ2N1cnZlMjU1MTknKVxuXHRcdHRocm93IChuZXcgRXJyb3IoJ0N1cnZlMjU1MTkga2V5cyBhcmUgbm90IHN1aXRhYmxlIGZvciAnICtcblx0XHQgICAgJ3NpZ25pbmcgb3IgdmVyaWZpY2F0aW9uJykpO1xuXG5cdHZhciB2LCBubSwgZXJyO1xuXHR0cnkge1xuXHRcdG5tID0gaGFzaEFsZ28udG9VcHBlckNhc2UoKTtcblx0XHR2ID0gY3J5cHRvLmNyZWF0ZVNpZ24obm0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0ZXJyID0gZTtcblx0fVxuXHRpZiAodiA9PT0gdW5kZWZpbmVkIHx8IChlcnIgaW5zdGFuY2VvZiBFcnJvciAmJlxuXHQgICAgZXJyLm1lc3NhZ2UubWF0Y2goL1Vua25vd24gbWVzc2FnZSBkaWdlc3QvKSkpIHtcblx0XHRubSA9ICdSU0EtJztcblx0XHRubSArPSBoYXNoQWxnby50b1VwcGVyQ2FzZSgpO1xuXHRcdHYgPSBjcnlwdG8uY3JlYXRlU2lnbihubSk7XG5cdH1cblx0YXNzZXJ0Lm9rKHYsICdmYWlsZWQgdG8gY3JlYXRlIHZlcmlmaWVyJyk7XG5cdHZhciBvbGRTaWduID0gdi5zaWduLmJpbmQodik7XG5cdHZhciBrZXkgPSB0aGlzLnRvQnVmZmVyKCdwa2NzMScpO1xuXHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblx0dmFyIGN1cnZlID0gdGhpcy5jdXJ2ZTtcblx0di5zaWduID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBzaWcgPSBvbGRTaWduKGtleSk7XG5cdFx0aWYgKHR5cGVvZiAoc2lnKSA9PT0gJ3N0cmluZycpXG5cdFx0XHRzaWcgPSBCdWZmZXIuZnJvbShzaWcsICdiaW5hcnknKTtcblx0XHRzaWcgPSBTaWduYXR1cmUucGFyc2Uoc2lnLCB0eXBlLCAnYXNuMScpO1xuXHRcdHNpZy5oYXNoQWxnb3JpdGhtID0gaGFzaEFsZ287XG5cdFx0c2lnLmN1cnZlID0gY3VydmU7XG5cdFx0cmV0dXJuIChzaWcpO1xuXHR9O1xuXHRyZXR1cm4gKHYpO1xufTtcblxuUHJpdmF0ZUtleS5wYXJzZSA9IGZ1bmN0aW9uIChkYXRhLCBmb3JtYXQsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiAoZGF0YSkgIT09ICdzdHJpbmcnKVxuXHRcdGFzc2VydC5idWZmZXIoZGF0YSwgJ2RhdGEnKTtcblx0aWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKVxuXHRcdGZvcm1hdCA9ICdhdXRvJztcblx0YXNzZXJ0LnN0cmluZyhmb3JtYXQsICdmb3JtYXQnKTtcblx0aWYgKHR5cGVvZiAob3B0aW9ucykgPT09ICdzdHJpbmcnKVxuXHRcdG9wdGlvbnMgPSB7IGZpbGVuYW1lOiBvcHRpb25zIH07XG5cdGFzc2VydC5vcHRpb25hbE9iamVjdChvcHRpb25zLCAnb3B0aW9ucycpO1xuXHRpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKVxuXHRcdG9wdGlvbnMgPSB7fTtcblx0YXNzZXJ0Lm9wdGlvbmFsU3RyaW5nKG9wdGlvbnMuZmlsZW5hbWUsICdvcHRpb25zLmZpbGVuYW1lJyk7XG5cdGlmIChvcHRpb25zLmZpbGVuYW1lID09PSB1bmRlZmluZWQpXG5cdFx0b3B0aW9ucy5maWxlbmFtZSA9ICcodW5uYW1lZCknO1xuXG5cdGFzc2VydC5vYmplY3QoZm9ybWF0c1tmb3JtYXRdLCAnZm9ybWF0c1tmb3JtYXRdJyk7XG5cblx0dHJ5IHtcblx0XHR2YXIgayA9IGZvcm1hdHNbZm9ybWF0XS5yZWFkKGRhdGEsIG9wdGlvbnMpO1xuXHRcdGFzc2VydC5vayhrIGluc3RhbmNlb2YgUHJpdmF0ZUtleSwgJ2tleSBpcyBub3QgYSBwcml2YXRlIGtleScpO1xuXHRcdGlmICghay5jb21tZW50KVxuXHRcdFx0ay5jb21tZW50ID0gb3B0aW9ucy5maWxlbmFtZTtcblx0XHRyZXR1cm4gKGspO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKGUubmFtZSA9PT0gJ0tleUVuY3J5cHRlZEVycm9yJylcblx0XHRcdHRocm93IChlKTtcblx0XHR0aHJvdyAobmV3IEtleVBhcnNlRXJyb3Iob3B0aW9ucy5maWxlbmFtZSwgZm9ybWF0LCBlKSk7XG5cdH1cbn07XG5cblByaXZhdGVLZXkuaXNQcml2YXRlS2V5ID0gZnVuY3Rpb24gKG9iaiwgdmVyKSB7XG5cdHJldHVybiAodXRpbHMuaXNDb21wYXRpYmxlKG9iaiwgUHJpdmF0ZUtleSwgdmVyKSk7XG59O1xuXG5Qcml2YXRlS2V5LmdlbmVyYXRlID0gZnVuY3Rpb24gKHR5cGUsIG9wdGlvbnMpIHtcblx0aWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZClcblx0XHRvcHRpb25zID0ge307XG5cdGFzc2VydC5vYmplY3Qob3B0aW9ucywgJ29wdGlvbnMnKTtcblxuXHRzd2l0Y2ggKHR5cGUpIHtcblx0Y2FzZSAnZWNkc2EnOlxuXHRcdGlmIChvcHRpb25zLmN1cnZlID09PSB1bmRlZmluZWQpXG5cdFx0XHRvcHRpb25zLmN1cnZlID0gJ25pc3RwMjU2Jztcblx0XHRhc3NlcnQuc3RyaW5nKG9wdGlvbnMuY3VydmUsICdvcHRpb25zLmN1cnZlJyk7XG5cdFx0cmV0dXJuIChnZW5lcmF0ZUVDRFNBKG9wdGlvbnMuY3VydmUpKTtcblx0Y2FzZSAnZWQyNTUxOSc6XG5cdFx0cmV0dXJuIChnZW5lcmF0ZUVEMjU1MTkoKSk7XG5cdGRlZmF1bHQ6XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignS2V5IGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCB3aXRoIGtleSAnICtcblx0XHQgICAgJ3R5cGUgXCInICsgdHlwZSArICdcIicpKTtcblx0fVxufTtcblxuLypcbiAqIEFQSSB2ZXJzaW9ucyBmb3IgUHJpdmF0ZUtleTpcbiAqIFsxLDBdIC0tIGluaXRpYWwgdmVyXG4gKiBbMSwxXSAtLSBhZGRlZCBhdXRvLCBwa2NzWzE4XSwgb3BlbnNzaC9zc2gtcHJpdmF0ZSBmb3JtYXRzXG4gKiBbMSwyXSAtLSBhZGRlZCBkZWZhdWx0SGFzaEFsZ29yaXRobVxuICogWzEsM10gLS0gYWRkZWQgZGVyaXZlLCBlZCwgY3JlYXRlREhcbiAqIFsxLDRdIC0tIGZpcnN0IHRhZ2dlZCB2ZXJzaW9uXG4gKiBbMSw1XSAtLSBjaGFuZ2VkIGVkMjU1MTkgcGFydCBuYW1lcyBhbmQgZm9ybWF0XG4gKiBbMSw2XSAtLSB0eXBlIGFyZ3VtZW50cyBmb3IgaGFzaCgpIGFuZCBmaW5nZXJwcmludCgpXG4gKi9cblByaXZhdGVLZXkucHJvdG90eXBlLl9zc2hwa0FwaVZlcnNpb24gPSBbMSwgNl07XG5cblByaXZhdGVLZXkuX29sZFZlcnNpb25EZXRlY3QgPSBmdW5jdGlvbiAob2JqKSB7XG5cdGFzc2VydC5mdW5jKG9iai50b1B1YmxpYyk7XG5cdGFzc2VydC5mdW5jKG9iai5jcmVhdGVTaWduKTtcblx0aWYgKG9iai5kZXJpdmUpXG5cdFx0cmV0dXJuIChbMSwgM10pO1xuXHRpZiAob2JqLmRlZmF1bHRIYXNoQWxnb3JpdGhtKVxuXHRcdHJldHVybiAoWzEsIDJdKTtcblx0aWYgKG9iai5mb3JtYXRzWydhdXRvJ10pXG5cdFx0cmV0dXJuIChbMSwgMV0pO1xuXHRyZXR1cm4gKFsxLCAwXSk7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG5cbnZhciBhbGdJbmZvID0ge1xuXHQnZHNhJzoge1xuXHRcdHBhcnRzOiBbJ3AnLCAncScsICdnJywgJ3knXSxcblx0XHRzaXplUGFydDogJ3AnXG5cdH0sXG5cdCdyc2EnOiB7XG5cdFx0cGFydHM6IFsnZScsICduJ10sXG5cdFx0c2l6ZVBhcnQ6ICduJ1xuXHR9LFxuXHQnZWNkc2EnOiB7XG5cdFx0cGFydHM6IFsnY3VydmUnLCAnUSddLFxuXHRcdHNpemVQYXJ0OiAnUSdcblx0fSxcblx0J2VkMjU1MTknOiB7XG5cdFx0cGFydHM6IFsnQSddLFxuXHRcdHNpemVQYXJ0OiAnQSdcblx0fVxufTtcbmFsZ0luZm9bJ2N1cnZlMjU1MTknXSA9IGFsZ0luZm9bJ2VkMjU1MTknXTtcblxudmFyIGFsZ1ByaXZJbmZvID0ge1xuXHQnZHNhJzoge1xuXHRcdHBhcnRzOiBbJ3AnLCAncScsICdnJywgJ3knLCAneCddXG5cdH0sXG5cdCdyc2EnOiB7XG5cdFx0cGFydHM6IFsnbicsICdlJywgJ2QnLCAnaXFtcCcsICdwJywgJ3EnXVxuXHR9LFxuXHQnZWNkc2EnOiB7XG5cdFx0cGFydHM6IFsnY3VydmUnLCAnUScsICdkJ11cblx0fSxcblx0J2VkMjU1MTknOiB7XG5cdFx0cGFydHM6IFsnQScsICdrJ11cblx0fVxufTtcbmFsZ1ByaXZJbmZvWydjdXJ2ZTI1NTE5J10gPSBhbGdQcml2SW5mb1snZWQyNTUxOSddO1xuXG52YXIgaGFzaEFsZ3MgPSB7XG5cdCdtZDUnOiB0cnVlLFxuXHQnc2hhMSc6IHRydWUsXG5cdCdzaGEyNTYnOiB0cnVlLFxuXHQnc2hhMzg0JzogdHJ1ZSxcblx0J3NoYTUxMic6IHRydWVcbn07XG5cbi8qXG4gKiBUYWtlbiBmcm9tXG4gKiBodHRwOi8vY3NyYy5uaXN0Lmdvdi9ncm91cHMvU1QvdG9vbGtpdC9kb2N1bWVudHMvZHNzL05JU1RSZUN1ci5wZGZcbiAqL1xudmFyIGN1cnZlcyA9IHtcblx0J25pc3RwMjU2Jzoge1xuXHRcdHNpemU6IDI1Nixcblx0XHRwa2NzOG9pZDogJzEuMi44NDAuMTAwNDUuMy4xLjcnLFxuXHRcdHA6IEJ1ZmZlci5mcm9tKCgnMDAnICtcblx0XHQgICAgJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwJyArXG5cdFx0ICAgICcwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicpLlxuXHRcdCAgICByZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpLFxuXHRcdGE6IEJ1ZmZlci5mcm9tKCgnMDAnICtcblx0XHQgICAgJ0ZGRkZGRkZGIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwJyArXG5cdFx0ICAgICcwMDAwMDAwMCBGRkZGRkZGRiBGRkZGRkZGRiBGRkZGRkZGQycpLlxuXHRcdCAgICByZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpLFxuXHRcdGI6IEJ1ZmZlci5mcm9tKChcblx0XHQgICAgJzVhYzYzNWQ4IGFhM2E5M2U3IGIzZWJiZDU1IDc2OTg4NmJjJyArXG5cdFx0ICAgICc2NTFkMDZiMCBjYzUzYjBmNiAzYmNlM2MzZSAyN2QyNjA0YicpLlxuXHRcdCAgICByZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpLFxuXHRcdHM6IEJ1ZmZlci5mcm9tKCgnMDAnICtcblx0XHQgICAgJ2M0OWQzNjA4IDg2ZTcwNDkzIDZhNjY3OGUxIDEzOWQyNmI3JyArXG5cdFx0ICAgICc4MTlmN2U5MCcpLlxuXHRcdCAgICByZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpLFxuXHRcdG46IEJ1ZmZlci5mcm9tKCgnMDAnICtcblx0XHQgICAgJ2ZmZmZmZmZmIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmJyArXG5cdFx0ICAgICdiY2U2ZmFhZCBhNzE3OWU4NCBmM2I5Y2FjMiBmYzYzMjU1MScpLlxuXHRcdCAgICByZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpLFxuXHRcdEc6IEJ1ZmZlci5mcm9tKCgnMDQnICtcblx0XHQgICAgJzZiMTdkMWYyIGUxMmM0MjQ3IGY4YmNlNmU1IDYzYTQ0MGYyJyArXG5cdFx0ICAgICc3NzAzN2Q4MSAyZGViMzNhMCBmNGExMzk0NSBkODk4YzI5NicgK1xuXHRcdCAgICAnNGZlMzQyZTIgZmUxYTdmOWIgOGVlN2ViNGEgN2MwZjllMTYnICtcblx0XHQgICAgJzJiY2UzMzU3IDZiMzE1ZWNlIGNiYjY0MDY4IDM3YmY1MWY1JykuXG5cdFx0ICAgIHJlcGxhY2UoLyAvZywgJycpLCAnaGV4Jylcblx0fSxcblx0J25pc3RwMzg0Jzoge1xuXHRcdHNpemU6IDM4NCxcblx0XHRwa2NzOG9pZDogJzEuMy4xMzIuMC4zNCcsXG5cdFx0cDogQnVmZmVyLmZyb20oKCcwMCcgK1xuXHRcdCAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnICtcblx0XHQgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlJyArXG5cdFx0ICAgICdmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZicpLlxuXHRcdCAgICByZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpLFxuXHRcdGE6IEJ1ZmZlci5mcm9tKCgnMDAnICtcblx0XHQgICAgJ0ZGRkZGRkZGIEZGRkZGRkZGIEZGRkZGRkZGIEZGRkZGRkZGJyArXG5cdFx0ICAgICdGRkZGRkZGRiBGRkZGRkZGRiBGRkZGRkZGRiBGRkZGRkZGRScgK1xuXHRcdCAgICAnRkZGRkZGRkYgMDAwMDAwMDAgMDAwMDAwMDAgRkZGRkZGRkMnKS5cblx0XHQgICAgcmVwbGFjZSgvIC9nLCAnJyksICdoZXgnKSxcblx0XHRiOiBCdWZmZXIuZnJvbSgoXG5cdFx0ICAgICdiMzMxMmZhNyBlMjNlZTdlNCA5ODhlMDU2YiBlM2Y4MmQxOScgK1xuXHRcdCAgICAnMTgxZDljNmUgZmU4MTQxMTIgMDMxNDA4OGYgNTAxMzg3NWEnICtcblx0XHQgICAgJ2M2NTYzOThkIDhhMmVkMTlkIDJhODVjOGVkIGQzZWMyYWVmJykuXG5cdFx0ICAgIHJlcGxhY2UoLyAvZywgJycpLCAnaGV4JyksXG5cdFx0czogQnVmZmVyLmZyb20oKCcwMCcgK1xuXHRcdCAgICAnYTMzNTkyNmEgYTMxOWEyN2EgMWQwMDg5NmEgNjc3M2E0ODInICtcblx0XHQgICAgJzdhY2RhYzczJykuXG5cdFx0ICAgIHJlcGxhY2UoLyAvZywgJycpLCAnaGV4JyksXG5cdFx0bjogQnVmZmVyLmZyb20oKCcwMCcgK1xuXHRcdCAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnICtcblx0XHQgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGM3NjM0ZDgxIGY0MzcyZGRmJyArXG5cdFx0ICAgICc1ODFhMGRiMiA0OGIwYTc3YSBlY2VjMTk2YSBjY2M1Mjk3MycpLlxuXHRcdCAgICByZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpLFxuXHRcdEc6IEJ1ZmZlci5mcm9tKCgnMDQnICtcblx0XHQgICAgJ2FhODdjYTIyIGJlOGIwNTM3IDhlYjFjNzFlIGYzMjBhZDc0JyArXG5cdFx0ICAgICc2ZTFkM2I2MiA4YmE3OWI5OCA1OWY3NDFlMCA4MjU0MmEzOCcgK1xuXHRcdCAgICAnNTUwMmYyNWQgYmY1NTI5NmMgM2E1NDVlMzggNzI3NjBhYjcnICtcblx0XHQgICAgJzM2MTdkZTRhIDk2MjYyYzZmIDVkOWU5OGJmIDkyOTJkYzI5JyArXG5cdFx0ICAgICdmOGY0MWRiZCAyODlhMTQ3YyBlOWRhMzExMyBiNWYwYjhjMCcgK1xuXHRcdCAgICAnMGE2MGIxY2UgMWQ3ZTgxOWQgN2E0MzFkN2MgOTBlYTBlNWYnKS5cblx0XHQgICAgcmVwbGFjZSgvIC9nLCAnJyksICdoZXgnKVxuXHR9LFxuXHQnbmlzdHA1MjEnOiB7XG5cdFx0c2l6ZTogNTIxLFxuXHRcdHBrY3M4b2lkOiAnMS4zLjEzMi4wLjM1Jyxcblx0XHRwOiBCdWZmZXIuZnJvbSgoXG5cdFx0ICAgICcwMWZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicgK1xuXHRcdCAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnICtcblx0XHQgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJyArXG5cdFx0ICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicgK1xuXHRcdCAgICAnZmZmZicpLnJlcGxhY2UoLyAvZywgJycpLCAnaGV4JyksXG5cdFx0YTogQnVmZmVyLmZyb20oKCcwMUZGJyArXG5cdFx0ICAgICdGRkZGRkZGRiBGRkZGRkZGRiBGRkZGRkZGRiBGRkZGRkZGRicgK1xuXHRcdCAgICAnRkZGRkZGRkYgRkZGRkZGRkYgRkZGRkZGRkYgRkZGRkZGRkYnICtcblx0XHQgICAgJ0ZGRkZGRkZGIEZGRkZGRkZGIEZGRkZGRkZGIEZGRkZGRkZGJyArXG5cdFx0ICAgICdGRkZGRkZGRiBGRkZGRkZGRiBGRkZGRkZGRiBGRkZGRkZGQycpLlxuXHRcdCAgICByZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpLFxuXHRcdGI6IEJ1ZmZlci5mcm9tKCgnNTEnICtcblx0XHQgICAgJzk1M2ViOTYxIDhlMWM5YTFmIDkyOWEyMWEwIGI2ODU0MGVlJyArXG5cdFx0ICAgICdhMmRhNzI1YiA5OWIzMTVmMyBiOGI0ODk5MSA4ZWYxMDllMScgK1xuXHRcdCAgICAnNTYxOTM5NTEgZWM3ZTkzN2IgMTY1MmMwYmQgM2JiMWJmMDcnICtcblx0XHQgICAgJzM1NzNkZjg4IDNkMmMzNGYxIGVmNDUxZmQ0IDZiNTAzZjAwJykuXG5cdFx0ICAgIHJlcGxhY2UoLyAvZywgJycpLCAnaGV4JyksXG5cdFx0czogQnVmZmVyLmZyb20oKCcwMCcgK1xuXHRcdCAgICAnZDA5ZTg4MDAgMjkxY2I4NTMgOTZjYzY3MTcgMzkzMjg0YWEnICtcblx0XHQgICAgJ2EwZGE2NGJhJykucmVwbGFjZSgvIC9nLCAnJyksICdoZXgnKSxcblx0XHRuOiBCdWZmZXIuZnJvbSgoJzAxZmYnICtcblx0XHQgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJyArXG5cdFx0ICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYScgK1xuXHRcdCAgICAnNTE4Njg3ODMgYmYyZjk2NmIgN2ZjYzAxNDggZjcwOWE1ZDAnICtcblx0XHQgICAgJzNiYjVjOWI4IDg5OWM0N2FlIGJiNmZiNzFlIDkxMzg2NDA5JykuXG5cdFx0ICAgIHJlcGxhY2UoLyAvZywgJycpLCAnaGV4JyksXG5cdFx0RzogQnVmZmVyLmZyb20oKCcwNCcgK1xuXHRcdCAgICAnMDBjNiA4NThlMDZiNyAwNDA0ZTljZCA5ZTNlY2I2NiAyMzk1YjQ0MicgK1xuXHRcdCAgICAgICAgICc5YzY0ODEzOSAwNTNmYjUyMSBmODI4YWY2MCA2YjRkM2RiYScgK1xuXHRcdCAgICAgICAgICdhMTRiNWU3NyBlZmU3NTkyOCBmZTFkYzEyNyBhMmZmYThkZScgK1xuXHRcdCAgICAgICAgICczMzQ4YjNjMSA4NTZhNDI5YiBmOTdlN2UzMSBjMmU1YmQ2NicgK1xuXHRcdCAgICAnMDExOCAzOTI5NmE3OCA5YTNiYzAwNCA1YzhhNWZiNCAyYzdkMWJkOScgK1xuXHRcdCAgICAgICAgICc5OGY1NDQ0OSA1NzliNDQ2OCAxN2FmYmQxNyAyNzNlNjYyYycgK1xuXHRcdCAgICAgICAgICc5N2VlNzI5OSA1ZWY0MjY0MCBjNTUwYjkwMSAzZmFkMDc2MScgK1xuXHRcdCAgICAgICAgICczNTNjNzA4NiBhMjcyYzI0MCA4OGJlOTQ3NiA5ZmQxNjY1MCcpLlxuXHRcdCAgICByZXBsYWNlKC8gL2csICcnKSwgJ2hleCcpXG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRpbmZvOiBhbGdJbmZvLFxuXHRwcml2SW5mbzogYWxnUHJpdkluZm8sXG5cdGhhc2hBbGdzOiBoYXNoQWxncyxcblx0Y3VydmVzOiBjdXJ2ZXNcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1cmxcIik7IiwiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIEZpbmdlcnByaW50Rm9ybWF0RXJyb3IoZnAsIGZvcm1hdCkge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRmluZ2VycHJpbnRGb3JtYXRFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdGaW5nZXJwcmludEZvcm1hdEVycm9yJztcblx0dGhpcy5maW5nZXJwcmludCA9IGZwO1xuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcblx0dGhpcy5tZXNzYWdlID0gJ0ZpbmdlcnByaW50IGZvcm1hdCBpcyBub3Qgc3VwcG9ydGVkLCBvciBpcyBpbnZhbGlkOiAnO1xuXHRpZiAoZnAgIT09IHVuZGVmaW5lZClcblx0XHR0aGlzLm1lc3NhZ2UgKz0gJyBmaW5nZXJwcmludCA9ICcgKyBmcDtcblx0aWYgKGZvcm1hdCAhPT0gdW5kZWZpbmVkKVxuXHRcdHRoaXMubWVzc2FnZSArPSAnIGZvcm1hdCA9ICcgKyBmb3JtYXQ7XG59XG51dGlsLmluaGVyaXRzKEZpbmdlcnByaW50Rm9ybWF0RXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gSW52YWxpZEFsZ29yaXRobUVycm9yKGFsZykge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgSW52YWxpZEFsZ29yaXRobUVycm9yKTtcblx0dGhpcy5uYW1lID0gJ0ludmFsaWRBbGdvcml0aG1FcnJvcic7XG5cdHRoaXMuYWxnb3JpdGhtID0gYWxnO1xuXHR0aGlzLm1lc3NhZ2UgPSAnQWxnb3JpdGhtIFwiJyArIGFsZyArICdcIiBpcyBub3Qgc3VwcG9ydGVkJztcbn1cbnV0aWwuaW5oZXJpdHMoSW52YWxpZEFsZ29yaXRobUVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIEtleVBhcnNlRXJyb3IobmFtZSwgZm9ybWF0LCBpbm5lckVycikge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgS2V5UGFyc2VFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdLZXlQYXJzZUVycm9yJztcblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdHRoaXMua2V5TmFtZSA9IG5hbWU7XG5cdHRoaXMuaW5uZXJFcnIgPSBpbm5lckVycjtcblx0dGhpcy5tZXNzYWdlID0gJ0ZhaWxlZCB0byBwYXJzZSAnICsgbmFtZSArICcgYXMgYSB2YWxpZCAnICsgZm9ybWF0ICtcblx0ICAgICcgZm9ybWF0IGtleTogJyArIGlubmVyRXJyLm1lc3NhZ2U7XG59XG51dGlsLmluaGVyaXRzKEtleVBhcnNlRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gU2lnbmF0dXJlUGFyc2VFcnJvcih0eXBlLCBmb3JtYXQsIGlubmVyRXJyKSB7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBTaWduYXR1cmVQYXJzZUVycm9yKTtcblx0dGhpcy5uYW1lID0gJ1NpZ25hdHVyZVBhcnNlRXJyb3InO1xuXHR0aGlzLnR5cGUgPSB0eXBlO1xuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcblx0dGhpcy5pbm5lckVyciA9IGlubmVyRXJyO1xuXHR0aGlzLm1lc3NhZ2UgPSAnRmFpbGVkIHRvIHBhcnNlIHRoZSBnaXZlbiBkYXRhIGFzIGEgJyArIHR5cGUgK1xuXHQgICAgJyBzaWduYXR1cmUgaW4gJyArIGZvcm1hdCArICcgZm9ybWF0OiAnICsgaW5uZXJFcnIubWVzc2FnZTtcbn1cbnV0aWwuaW5oZXJpdHMoU2lnbmF0dXJlUGFyc2VFcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiBDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IobmFtZSwgZm9ybWF0LCBpbm5lckVycikge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ2VydGlmaWNhdGVQYXJzZUVycm9yKTtcblx0dGhpcy5uYW1lID0gJ0NlcnRpZmljYXRlUGFyc2VFcnJvcic7XG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuXHR0aGlzLmNlcnROYW1lID0gbmFtZTtcblx0dGhpcy5pbm5lckVyciA9IGlubmVyRXJyO1xuXHR0aGlzLm1lc3NhZ2UgPSAnRmFpbGVkIHRvIHBhcnNlICcgKyBuYW1lICsgJyBhcyBhIHZhbGlkICcgKyBmb3JtYXQgK1xuXHQgICAgJyBmb3JtYXQgY2VydGlmaWNhdGU6ICcgKyBpbm5lckVyci5tZXNzYWdlO1xufVxudXRpbC5pbmhlcml0cyhDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gS2V5RW5jcnlwdGVkRXJyb3IobmFtZSwgZm9ybWF0KSB7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBLZXlFbmNyeXB0ZWRFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdLZXlFbmNyeXB0ZWRFcnJvcic7XG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuXHR0aGlzLmtleU5hbWUgPSBuYW1lO1xuXHR0aGlzLm1lc3NhZ2UgPSAnVGhlICcgKyBmb3JtYXQgKyAnIGZvcm1hdCBrZXkgJyArIG5hbWUgKyAnIGlzICcgK1xuXHQgICAgJ2VuY3J5cHRlZCAocGFzc3dvcmQtcHJvdGVjdGVkKSwgYW5kIG5vIHBhc3NwaHJhc2Ugd2FzICcgK1xuXHQgICAgJ3Byb3ZpZGVkIGluIGBvcHRpb25zYCc7XG59XG51dGlsLmluaGVyaXRzKEtleUVuY3J5cHRlZEVycm9yLCBFcnJvcik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRGaW5nZXJwcmludEZvcm1hdEVycm9yOiBGaW5nZXJwcmludEZvcm1hdEVycm9yLFxuXHRJbnZhbGlkQWxnb3JpdGhtRXJyb3I6IEludmFsaWRBbGdvcml0aG1FcnJvcixcblx0S2V5UGFyc2VFcnJvcjogS2V5UGFyc2VFcnJvcixcblx0U2lnbmF0dXJlUGFyc2VFcnJvcjogU2lnbmF0dXJlUGFyc2VFcnJvcixcblx0S2V5RW5jcnlwdGVkRXJyb3I6IEtleUVuY3J5cHRlZEVycm9yLFxuXHRDZXJ0aWZpY2F0ZVBhcnNlRXJyb3I6IENlcnRpZmljYXRlUGFyc2VFcnJvclxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLk5PX0hPU1RfRVJST1IgPSAnTWlzc2luZyBcXCdob3N0XFwnIHByb3BlcnR5Lic7XG5leHBvcnRzLk5PX0NPTlNVTUVSX0tFWV9FUlJPUiA9ICdNaXNzaW5nIFxcJ29hdXRoX2NvbnN1bWVyX2tleVxcJyBwcm9wZXJ0eS4nO1xuZXhwb3J0cy5OT19QUklWQVRFX0tFWV9FUlJPUiA9ICdNaXNzaW5nIFxcJ29hdXRoX3ByaXZhdGVfa2V5XFwnIHByb3BlcnR5Lic7XG5leHBvcnRzLk5PX09BVVRIX1RPS0VOX0VSUk9SID0gJ01pc3NpbmcgXFwnb2F1dGhfdG9rZW5cXCcgcHJvcGVydHkuJztcbmV4cG9ydHMuTk9fT0FVVEhfVE9LRU5fU0VDUkVUX0VSUk9SID0gJ01pc3NpbmcgXFwnb2F1dGhfdG9rZW5fc2VjcmV0XFwnIHByb3BlcnR5Lic7XG5leHBvcnRzLk5PX1VTRVJOQU1FX0VSUk9SID0gJ01pc3NpbmcgXFwndXNlcm5hbWVcXCcgcHJvcGVydHkuJztcbmV4cG9ydHMuTk9fUEFTU1dPUkRfRVJST1IgPSAnTWlzc2luZyBcXCdwYXNzd29yZFxcJyBwcm9wZXJ0eS4nO1xuZXhwb3J0cy5OT19BVVRIRU5USUNBVElPTl9FUlJPUiA9ICdNaXNzaW5nIFxcJ2F1dGhcXCcgcHJvcGVydHkuJztcbmV4cG9ydHMuTk9fVkVSSUZJRVJfRVJST1IgPSAnTWlzc2luZyBcXCdvYXV0aF92ZXJpZmllclxcJyBwcm9wZXJ0eS4nO1xuZXhwb3J0cy5JTlZBTElEX0FVVEhFTlRJQ0FUSU9OX1BST1BFUlRZX0VSUk9SID0gJ0ludmFsaWQgXFwnYXV0aFxcJyBwcm9wZXJ0eS4nO1xuZXhwb3J0cy5OT19JU1NVRV9JREVOVElGSUVSID0gJ01pc3NpbmcgSXNzdWUgSUQgb3IgS2V5JztcbmV4cG9ydHMuTk9fQ09NTUVOVF9JRCA9ICdNaXNzaW5nIFxcJ2NvbW1lbnRJRFxcJyBwcm9wZXJ0eS4nO1xuZXhwb3J0cy5OT19DT01NRU5UX0VSUk9SID0gJ01pc3NpbmcgXFwnY29tbWVudFxcJyBwcm9wZXJ0eS4nO1xuZXhwb3J0cy5OT19OT1RJRklDQVRJT05fRVJST1IgPSAnTWlzc2luZyBcXCdub3RpZmljYXRpb25cXCcgcHJvcGVydHknO1xuZXhwb3J0cy5OT19HTE9CQUxfSURfRVJST1IgPSAnTWlzc2luZyBcXCdnbG9iYWxJZFxcJyBwcm9wZXJ0eS4nO1xuZXhwb3J0cy5OT19MSU5LX0lEX0VSUk9SID0gJ01pc3NpbmcgXFwnbGlua0lkXFwnIHByb3BlcnR5Lic7XG5leHBvcnRzLk5PX1RSQU5TSVRJT05fRVJST1IgPSAnTWlzc2luZyBcXCd0cmFuc2l0aW9uXFwnIHByb3BlcnR5Lic7XG5leHBvcnRzLk5PX0lTU1VFX0VSUk9SID0gJ01pc3NpbmcgXFwnaXNzdWVcXCcgcHJvcGVydHknO1xuZXhwb3J0cy5OT19BU1NJR05FRV9FUlJPUiA9ICdNaXNzaW5nIFxcJ2Fzc2lnbmVlXFwnIHByb3BlcnR5JztcbmV4cG9ydHMuTk9fV0FUQ0hFUl9FUlJPUiA9ICdNaXNzaW5nIFxcJ3dhdGNoZXJcXCcgcHJvcGVydHknO1xuZXhwb3J0cy5OT19XT1JLTE9HX0VSUk9SID0gJ01pc3NpbmcgXFwnd29ya2xvZ1xcJyBwcm9wZXJ0eSc7XG5leHBvcnRzLk5PX1dPUktMT0dfSURfRVJST1IgPSAnTWlzc2luZyBcXCd3b3JrbG9nSWRcXCcgcHJvcGVydHknO1xuZXhwb3J0cy5OT19GSUxFTkFNRV9FUlJPUiA9ICdNaXNzaW5nIFxcJ2ZpbGVuYW1lXFwnIHByb3BlcnR5JztcbmV4cG9ydHMuTk9fUFJPUEVSVFlfS0VZX0VSUk9SID0gJ01pc3NpbmcgXFwncHJvcGVydHlLZXlcXCcgcHJvcGVydHknO1xuZXhwb3J0cy5OT19QUk9QRVJUWV9WQUxVRV9FUlJPUiA9ICdNaXNzaW5nIFxcJ3Byb3BlcnR5VmFsdWVcXCcgcHJvcGVydHknO1xuZXhwb3J0cy5OT19BVFRBQ0hNRU5UX0lEX0VSUk9SID0gJ01pc3NpbmcgXFwnYXR0YWNobWVudElkXFwnIHByb3BlcnR5JztcbmV4cG9ydHMuTk9fQVVESVRfRVJST1IgPSAnTWlzc2luZyBcXCdhdWRpdFxcJyBwcm9wZXJ0eSc7XG5leHBvcnRzLk5PX0FWQVRBUl9UWVBFX0VSUk9SID0gJ01pc3NpbmcgXFwnYXZhdGFyVHlwZVxcJyBwcm9wZXJ0eSc7XG5leHBvcnRzLk5PX0NPTU1FTlRfUFJPUEVSVFlfS0VZX0VSUk9SID0gJ01pc3NpbmcgXFwncHJvcGVydHlLZXlcXCcgcHJvcGVydHknO1xuZXhwb3J0cy5OT19DT01NRU5UX1BST1BFUlRZX1ZBTFVFX0VSUk9SID0gJ01pc3NpbmcgXFwncHJvcGVydHlWYWx1ZVxcJyBwcm9wZXJ0eSc7XG5leHBvcnRzLk5PX0lTU1VFX0xJTktfRVJST1IgPSAnTWlzc2luZ1xcJ2lzc3VlTGlua1xcJyBwcm9wZXJ0eSc7XG5leHBvcnRzLk5PX0lTU1VFX0xJTktfSURfRVJST1IgPSAnTWlzc2luZ1xcJ2xpbmtJZFxcJyBwcm9wZXJ0eSc7XG5leHBvcnRzLk5PX0lTU1VFX0xJTktfVFlQRV9JRCA9ICdNaXNzaW5nIFxcJ2lzc3VlTGlua1R5cGVJZFxcJyBwcm9wZXJ0eS4nO1xuZXhwb3J0cy5OT19GSUVMRF9PUFRJT05fSURfRVJST1IgPSAnTWlzc2luZyBcXCdmaWVsZE9wdGlvbklkXFwnIHByb3BlcnR5Lic7IiwiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4vYWxncycpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIGVycnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xJyk7XG52YXIgU1NIQnVmZmVyID0gcmVxdWlyZSgnLi9zc2gtYnVmZmVyJyk7XG5cbnZhciBJbnZhbGlkQWxnb3JpdGhtRXJyb3IgPSBlcnJzLkludmFsaWRBbGdvcml0aG1FcnJvcjtcbnZhciBTaWduYXR1cmVQYXJzZUVycm9yID0gZXJycy5TaWduYXR1cmVQYXJzZUVycm9yO1xuXG5mdW5jdGlvbiBTaWduYXR1cmUob3B0cykge1xuXHRhc3NlcnQub2JqZWN0KG9wdHMsICdvcHRpb25zJyk7XG5cdGFzc2VydC5hcnJheU9mT2JqZWN0KG9wdHMucGFydHMsICdvcHRpb25zLnBhcnRzJyk7XG5cdGFzc2VydC5zdHJpbmcob3B0cy50eXBlLCAnb3B0aW9ucy50eXBlJyk7XG5cblx0dmFyIHBhcnRMb29rdXAgPSB7fTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvcHRzLnBhcnRzLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIHBhcnQgPSBvcHRzLnBhcnRzW2ldO1xuXHRcdHBhcnRMb29rdXBbcGFydC5uYW1lXSA9IHBhcnQ7XG5cdH1cblxuXHR0aGlzLnR5cGUgPSBvcHRzLnR5cGU7XG5cdHRoaXMuaGFzaEFsZ29yaXRobSA9IG9wdHMuaGFzaEFsZ287XG5cdHRoaXMuY3VydmUgPSBvcHRzLmN1cnZlO1xuXHR0aGlzLnBhcnRzID0gb3B0cy5wYXJ0cztcblx0dGhpcy5wYXJ0ID0gcGFydExvb2t1cDtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcblx0aWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKVxuXHRcdGZvcm1hdCA9ICdhc24xJztcblx0YXNzZXJ0LnN0cmluZyhmb3JtYXQsICdmb3JtYXQnKTtcblxuXHR2YXIgYnVmO1xuXHR2YXIgc3R5cGUgPSAnc3NoLScgKyB0aGlzLnR5cGU7XG5cblx0c3dpdGNoICh0aGlzLnR5cGUpIHtcblx0Y2FzZSAncnNhJzpcblx0XHRzd2l0Y2ggKHRoaXMuaGFzaEFsZ29yaXRobSkge1xuXHRcdGNhc2UgJ3NoYTI1Nic6XG5cdFx0XHRzdHlwZSA9ICdyc2Etc2hhMi0yNTYnO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnc2hhNTEyJzpcblx0XHRcdHN0eXBlID0gJ3JzYS1zaGEyLTUxMic7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdzaGExJzpcblx0XHRjYXNlIHVuZGVmaW5lZDpcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKCdTU0ggc2lnbmF0dXJlICcgK1xuXHRcdFx0ICAgICdmb3JtYXQgZG9lcyBub3Qgc3VwcG9ydCBoYXNoICcgK1xuXHRcdFx0ICAgICdhbGdvcml0aG0gJyArIHRoaXMuaGFzaEFsZ29yaXRobSkpO1xuXHRcdH1cblx0XHRpZiAoZm9ybWF0ID09PSAnc3NoJykge1xuXHRcdFx0YnVmID0gbmV3IFNTSEJ1ZmZlcih7fSk7XG5cdFx0XHRidWYud3JpdGVTdHJpbmcoc3R5cGUpO1xuXHRcdFx0YnVmLndyaXRlUGFydCh0aGlzLnBhcnQuc2lnKTtcblx0XHRcdHJldHVybiAoYnVmLnRvQnVmZmVyKCkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gKHRoaXMucGFydC5zaWcuZGF0YSk7XG5cdFx0fVxuXHRcdGJyZWFrO1xuXG5cdGNhc2UgJ2VkMjU1MTknOlxuXHRcdGlmIChmb3JtYXQgPT09ICdzc2gnKSB7XG5cdFx0XHRidWYgPSBuZXcgU1NIQnVmZmVyKHt9KTtcblx0XHRcdGJ1Zi53cml0ZVN0cmluZyhzdHlwZSk7XG5cdFx0XHRidWYud3JpdGVQYXJ0KHRoaXMucGFydC5zaWcpO1xuXHRcdFx0cmV0dXJuIChidWYudG9CdWZmZXIoKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAodGhpcy5wYXJ0LnNpZy5kYXRhKTtcblx0XHR9XG5cdFx0YnJlYWs7XG5cblx0Y2FzZSAnZHNhJzpcblx0Y2FzZSAnZWNkc2EnOlxuXHRcdHZhciByLCBzO1xuXHRcdGlmIChmb3JtYXQgPT09ICdhc24xJykge1xuXHRcdFx0dmFyIGRlciA9IG5ldyBhc24xLkJlcldyaXRlcigpO1xuXHRcdFx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblx0XHRcdHIgPSB1dGlscy5tcE5vcm1hbGl6ZSh0aGlzLnBhcnQuci5kYXRhKTtcblx0XHRcdHMgPSB1dGlscy5tcE5vcm1hbGl6ZSh0aGlzLnBhcnQucy5kYXRhKTtcblx0XHRcdGRlci53cml0ZUJ1ZmZlcihyLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0XHRcdGRlci53cml0ZUJ1ZmZlcihzLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0XHRcdGRlci5lbmRTZXF1ZW5jZSgpO1xuXHRcdFx0cmV0dXJuIChkZXIuYnVmZmVyKTtcblx0XHR9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ3NzaCcgJiYgdGhpcy50eXBlID09PSAnZHNhJykge1xuXHRcdFx0YnVmID0gbmV3IFNTSEJ1ZmZlcih7fSk7XG5cdFx0XHRidWYud3JpdGVTdHJpbmcoJ3NzaC1kc3MnKTtcblx0XHRcdHIgPSB0aGlzLnBhcnQuci5kYXRhO1xuXHRcdFx0aWYgKHIubGVuZ3RoID4gMjAgJiYgclswXSA9PT0gMHgwMClcblx0XHRcdFx0ciA9IHIuc2xpY2UoMSk7XG5cdFx0XHRzID0gdGhpcy5wYXJ0LnMuZGF0YTtcblx0XHRcdGlmIChzLmxlbmd0aCA+IDIwICYmIHNbMF0gPT09IDB4MDApXG5cdFx0XHRcdHMgPSBzLnNsaWNlKDEpO1xuXHRcdFx0aWYgKCh0aGlzLmhhc2hBbGdvcml0aG0gJiZcblx0XHRcdCAgICB0aGlzLmhhc2hBbGdvcml0aG0gIT09ICdzaGExJykgfHxcblx0XHRcdCAgICByLmxlbmd0aCArIHMubGVuZ3RoICE9PSA0MCkge1xuXHRcdFx0XHR0aHJvdyAobmV3IEVycm9yKCdPcGVuU1NIIG9ubHkgc3VwcG9ydHMgJyArXG5cdFx0XHRcdCAgICAnRFNBIHNpZ25hdHVyZXMgd2l0aCBTSEExIGhhc2gnKSk7XG5cdFx0XHR9XG5cdFx0XHRidWYud3JpdGVCdWZmZXIoQnVmZmVyLmNvbmNhdChbciwgc10pKTtcblx0XHRcdHJldHVybiAoYnVmLnRvQnVmZmVyKCkpO1xuXHRcdH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnc3NoJyAmJiB0aGlzLnR5cGUgPT09ICdlY2RzYScpIHtcblx0XHRcdHZhciBpbm5lciA9IG5ldyBTU0hCdWZmZXIoe30pO1xuXHRcdFx0ciA9IHRoaXMucGFydC5yLmRhdGE7XG5cdFx0XHRpbm5lci53cml0ZUJ1ZmZlcihyKTtcblx0XHRcdGlubmVyLndyaXRlUGFydCh0aGlzLnBhcnQucyk7XG5cblx0XHRcdGJ1ZiA9IG5ldyBTU0hCdWZmZXIoe30pO1xuXHRcdFx0LyogWFhYOiBmaW5kIGEgbW9yZSBwcm9wZXIgd2F5IHRvIGRvIHRoaXM/ICovXG5cdFx0XHR2YXIgY3VydmU7XG5cdFx0XHRpZiAoclswXSA9PT0gMHgwMClcblx0XHRcdFx0ciA9IHIuc2xpY2UoMSk7XG5cdFx0XHR2YXIgc3ogPSByLmxlbmd0aCAqIDg7XG5cdFx0XHRpZiAoc3ogPT09IDI1Nilcblx0XHRcdFx0Y3VydmUgPSAnbmlzdHAyNTYnO1xuXHRcdFx0ZWxzZSBpZiAoc3ogPT09IDM4NClcblx0XHRcdFx0Y3VydmUgPSAnbmlzdHAzODQnO1xuXHRcdFx0ZWxzZSBpZiAoc3ogPT09IDUyOClcblx0XHRcdFx0Y3VydmUgPSAnbmlzdHA1MjEnO1xuXHRcdFx0YnVmLndyaXRlU3RyaW5nKCdlY2RzYS1zaGEyLScgKyBjdXJ2ZSk7XG5cdFx0XHRidWYud3JpdGVCdWZmZXIoaW5uZXIudG9CdWZmZXIoKSk7XG5cdFx0XHRyZXR1cm4gKGJ1Zi50b0J1ZmZlcigpKTtcblx0XHR9XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignSW52YWxpZCBzaWduYXR1cmUgZm9ybWF0JykpO1xuXHRkZWZhdWx0OlxuXHRcdHRocm93IChuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIGRhdGEnKSk7XG5cdH1cbn07XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG5cdGFzc2VydC5vcHRpb25hbFN0cmluZyhmb3JtYXQsICdmb3JtYXQnKTtcblx0cmV0dXJuICh0aGlzLnRvQnVmZmVyKGZvcm1hdCkudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbn07XG5cblNpZ25hdHVyZS5wYXJzZSA9IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCBmb3JtYXQpIHtcblx0aWYgKHR5cGVvZiAoZGF0YSkgPT09ICdzdHJpbmcnKVxuXHRcdGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCAnYmFzZTY0Jyk7XG5cdGFzc2VydC5idWZmZXIoZGF0YSwgJ2RhdGEnKTtcblx0YXNzZXJ0LnN0cmluZyhmb3JtYXQsICdmb3JtYXQnKTtcblx0YXNzZXJ0LnN0cmluZyh0eXBlLCAndHlwZScpO1xuXG5cdHZhciBvcHRzID0ge307XG5cdG9wdHMudHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcblx0b3B0cy5wYXJ0cyA9IFtdO1xuXG5cdHRyeSB7XG5cdFx0YXNzZXJ0Lm9rKGRhdGEubGVuZ3RoID4gMCwgJ3NpZ25hdHVyZSBtdXN0IG5vdCBiZSBlbXB0eScpO1xuXHRcdHN3aXRjaCAob3B0cy50eXBlKSB7XG5cdFx0Y2FzZSAncnNhJzpcblx0XHRcdHJldHVybiAocGFyc2VPbmVOdW0oZGF0YSwgdHlwZSwgZm9ybWF0LCBvcHRzKSk7XG5cdFx0Y2FzZSAnZWQyNTUxOSc6XG5cdFx0XHRyZXR1cm4gKHBhcnNlT25lTnVtKGRhdGEsIHR5cGUsIGZvcm1hdCwgb3B0cykpO1xuXG5cdFx0Y2FzZSAnZHNhJzpcblx0XHRjYXNlICdlY2RzYSc6XG5cdFx0XHRpZiAoZm9ybWF0ID09PSAnYXNuMScpXG5cdFx0XHRcdHJldHVybiAocGFyc2VEU0Fhc24xKGRhdGEsIHR5cGUsIGZvcm1hdCwgb3B0cykpO1xuXHRcdFx0ZWxzZSBpZiAob3B0cy50eXBlID09PSAnZHNhJylcblx0XHRcdFx0cmV0dXJuIChwYXJzZURTQShkYXRhLCB0eXBlLCBmb3JtYXQsIG9wdHMpKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIChwYXJzZUVDRFNBKGRhdGEsIHR5cGUsIGZvcm1hdCwgb3B0cykpO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IChuZXcgSW52YWxpZEFsZ29yaXRobUVycm9yKHR5cGUpKTtcblx0XHR9XG5cblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmIChlIGluc3RhbmNlb2YgSW52YWxpZEFsZ29yaXRobUVycm9yKVxuXHRcdFx0dGhyb3cgKGUpO1xuXHRcdHRocm93IChuZXcgU2lnbmF0dXJlUGFyc2VFcnJvcih0eXBlLCBmb3JtYXQsIGUpKTtcblx0fVxufTtcblxuZnVuY3Rpb24gcGFyc2VPbmVOdW0oZGF0YSwgdHlwZSwgZm9ybWF0LCBvcHRzKSB7XG5cdGlmIChmb3JtYXQgPT09ICdzc2gnKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHZhciBidWYgPSBuZXcgU1NIQnVmZmVyKHtidWZmZXI6IGRhdGF9KTtcblx0XHRcdHZhciBoZWFkID0gYnVmLnJlYWRTdHJpbmcoKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHQvKiBmYWxsIHRocm91Z2ggKi9cblx0XHR9XG5cdFx0aWYgKGJ1ZiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YXIgbXNnID0gJ1NTSCBzaWduYXR1cmUgZG9lcyBub3QgbWF0Y2ggZXhwZWN0ZWQgJyArXG5cdFx0XHQgICAgJ3R5cGUgKGV4cGVjdGVkICcgKyB0eXBlICsgJywgZ290ICcgKyBoZWFkICsgJyknO1xuXHRcdFx0c3dpdGNoIChoZWFkKSB7XG5cdFx0XHRjYXNlICdzc2gtcnNhJzpcblx0XHRcdFx0YXNzZXJ0LnN0cmljdEVxdWFsKHR5cGUsICdyc2EnLCBtc2cpO1xuXHRcdFx0XHRvcHRzLmhhc2hBbGdvID0gJ3NoYTEnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3JzYS1zaGEyLTI1Nic6XG5cdFx0XHRcdGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlLCAncnNhJywgbXNnKTtcblx0XHRcdFx0b3B0cy5oYXNoQWxnbyA9ICdzaGEyNTYnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3JzYS1zaGEyLTUxMic6XG5cdFx0XHRcdGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlLCAncnNhJywgbXNnKTtcblx0XHRcdFx0b3B0cy5oYXNoQWxnbyA9ICdzaGE1MTInO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3NzaC1lZDI1NTE5Jzpcblx0XHRcdFx0YXNzZXJ0LnN0cmljdEVxdWFsKHR5cGUsICdlZDI1NTE5JywgbXNnKTtcblx0XHRcdFx0b3B0cy5oYXNoQWxnbyA9ICdzaGE1MTInO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IChuZXcgRXJyb3IoJ1Vua25vd24gU1NIIHNpZ25hdHVyZSAnICtcblx0XHRcdFx0ICAgICd0eXBlOiAnICsgaGVhZCkpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHNpZyA9IGJ1Zi5yZWFkUGFydCgpO1xuXHRcdFx0YXNzZXJ0Lm9rKGJ1Zi5hdEVuZCgpLCAnZXh0cmEgdHJhaWxpbmcgYnl0ZXMnKTtcblx0XHRcdHNpZy5uYW1lID0gJ3NpZyc7XG5cdFx0XHRvcHRzLnBhcnRzLnB1c2goc2lnKTtcblx0XHRcdHJldHVybiAobmV3IFNpZ25hdHVyZShvcHRzKSk7XG5cdFx0fVxuXHR9XG5cdG9wdHMucGFydHMucHVzaCh7bmFtZTogJ3NpZycsIGRhdGE6IGRhdGF9KTtcblx0cmV0dXJuIChuZXcgU2lnbmF0dXJlKG9wdHMpKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEU0Fhc24xKGRhdGEsIHR5cGUsIGZvcm1hdCwgb3B0cykge1xuXHR2YXIgZGVyID0gbmV3IGFzbjEuQmVyUmVhZGVyKGRhdGEpO1xuXHRkZXIucmVhZFNlcXVlbmNlKCk7XG5cdHZhciByID0gZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuSW50ZWdlciwgdHJ1ZSk7XG5cdHZhciBzID0gZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuSW50ZWdlciwgdHJ1ZSk7XG5cblx0b3B0cy5wYXJ0cy5wdXNoKHtuYW1lOiAncicsIGRhdGE6IHV0aWxzLm1wTm9ybWFsaXplKHIpfSk7XG5cdG9wdHMucGFydHMucHVzaCh7bmFtZTogJ3MnLCBkYXRhOiB1dGlscy5tcE5vcm1hbGl6ZShzKX0pO1xuXG5cdHJldHVybiAobmV3IFNpZ25hdHVyZShvcHRzKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRFNBKGRhdGEsIHR5cGUsIGZvcm1hdCwgb3B0cykge1xuXHRpZiAoZGF0YS5sZW5ndGggIT0gNDApIHtcblx0XHR2YXIgYnVmID0gbmV3IFNTSEJ1ZmZlcih7YnVmZmVyOiBkYXRhfSk7XG5cdFx0dmFyIGQgPSBidWYucmVhZEJ1ZmZlcigpO1xuXHRcdGlmIChkLnRvU3RyaW5nKCdhc2NpaScpID09PSAnc3NoLWRzcycpXG5cdFx0XHRkID0gYnVmLnJlYWRCdWZmZXIoKTtcblx0XHRhc3NlcnQub2soYnVmLmF0RW5kKCksICdleHRyYSB0cmFpbGluZyBieXRlcycpO1xuXHRcdGFzc2VydC5zdHJpY3RFcXVhbChkLmxlbmd0aCwgNDAsICdpbnZhbGlkIGlubmVyIGxlbmd0aCcpO1xuXHRcdGRhdGEgPSBkO1xuXHR9XG5cdG9wdHMucGFydHMucHVzaCh7bmFtZTogJ3InLCBkYXRhOiBkYXRhLnNsaWNlKDAsIDIwKX0pO1xuXHRvcHRzLnBhcnRzLnB1c2goe25hbWU6ICdzJywgZGF0YTogZGF0YS5zbGljZSgyMCwgNDApfSk7XG5cdHJldHVybiAobmV3IFNpZ25hdHVyZShvcHRzKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRUNEU0EoZGF0YSwgdHlwZSwgZm9ybWF0LCBvcHRzKSB7XG5cdHZhciBidWYgPSBuZXcgU1NIQnVmZmVyKHtidWZmZXI6IGRhdGF9KTtcblxuXHR2YXIgciwgcztcblx0dmFyIGlubmVyID0gYnVmLnJlYWRCdWZmZXIoKTtcblx0dmFyIHN0eXBlID0gaW5uZXIudG9TdHJpbmcoJ2FzY2lpJyk7XG5cdGlmIChzdHlwZS5zbGljZSgwLCA2KSA9PT0gJ2VjZHNhLScpIHtcblx0XHR2YXIgcGFydHMgPSBzdHlwZS5zcGxpdCgnLScpO1xuXHRcdGFzc2VydC5zdHJpY3RFcXVhbChwYXJ0c1swXSwgJ2VjZHNhJyk7XG5cdFx0YXNzZXJ0LnN0cmljdEVxdWFsKHBhcnRzWzFdLCAnc2hhMicpO1xuXHRcdG9wdHMuY3VydmUgPSBwYXJ0c1syXTtcblx0XHRzd2l0Y2ggKG9wdHMuY3VydmUpIHtcblx0XHRjYXNlICduaXN0cDI1Nic6XG5cdFx0XHRvcHRzLmhhc2hBbGdvID0gJ3NoYTI1Nic7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICduaXN0cDM4NCc6XG5cdFx0XHRvcHRzLmhhc2hBbGdvID0gJ3NoYTM4NCc7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICduaXN0cDUyMSc6XG5cdFx0XHRvcHRzLmhhc2hBbGdvID0gJ3NoYTUxMic7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgRUNEU0EgY3VydmU6ICcgK1xuXHRcdFx0ICAgIG9wdHMuY3VydmUpKTtcblx0XHR9XG5cdFx0aW5uZXIgPSBidWYucmVhZEJ1ZmZlcigpO1xuXHRcdGFzc2VydC5vayhidWYuYXRFbmQoKSwgJ2V4dHJhIHRyYWlsaW5nIGJ5dGVzIG9uIG91dGVyJyk7XG5cdFx0YnVmID0gbmV3IFNTSEJ1ZmZlcih7YnVmZmVyOiBpbm5lcn0pO1xuXHRcdHIgPSBidWYucmVhZFBhcnQoKTtcblx0fSBlbHNlIHtcblx0XHRyID0ge2RhdGE6IGlubmVyfTtcblx0fVxuXG5cdHMgPSBidWYucmVhZFBhcnQoKTtcblx0YXNzZXJ0Lm9rKGJ1Zi5hdEVuZCgpLCAnZXh0cmEgdHJhaWxpbmcgYnl0ZXMnKTtcblxuXHRyLm5hbWUgPSAncic7XG5cdHMubmFtZSA9ICdzJztcblxuXHRvcHRzLnBhcnRzLnB1c2gocik7XG5cdG9wdHMucGFydHMucHVzaChzKTtcblx0cmV0dXJuIChuZXcgU2lnbmF0dXJlKG9wdHMpKTtcbn1cblxuU2lnbmF0dXJlLmlzU2lnbmF0dXJlID0gZnVuY3Rpb24gKG9iaiwgdmVyKSB7XG5cdHJldHVybiAodXRpbHMuaXNDb21wYXRpYmxlKG9iaiwgU2lnbmF0dXJlLCB2ZXIpKTtcbn07XG5cbi8qXG4gKiBBUEkgdmVyc2lvbnMgZm9yIFNpZ25hdHVyZTpcbiAqIFsxLDBdIC0tIGluaXRpYWwgdmVyXG4gKiBbMiwwXSAtLSBzdXBwb3J0IGZvciByc2EgaW4gZnVsbCBzc2ggZm9ybWF0LCBjb21wYXQgd2l0aCBzc2hway1hZ2VudFxuICogICAgICAgICAgaGFzaEFsZ29yaXRobSBwcm9wZXJ0eVxuICogWzIsMV0gLS0gZmlyc3QgdGFnZ2VkIHZlcnNpb25cbiAqL1xuU2lnbmF0dXJlLnByb3RvdHlwZS5fc3NocGtBcGlWZXJzaW9uID0gWzIsIDFdO1xuXG5TaWduYXR1cmUuX29sZFZlcnNpb25EZXRlY3QgPSBmdW5jdGlvbiAob2JqKSB7XG5cdGFzc2VydC5mdW5jKG9iai50b0J1ZmZlcik7XG5cdGlmIChvYmouaGFzT3duUHJvcGVydHkoJ2hhc2hBbGdvcml0aG0nKSlcblx0XHRyZXR1cm4gKFsyLCAwXSk7XG5cdHJldHVybiAoWzEsIDBdKTtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbi8vIElmIHlvdSBoYXZlIG5vIGlkZWEgd2hhdCBBU04uMSBvciBCRVIgaXMsIHNlZSB0aGlzOlxuLy8gZnRwOi8vZnRwLnJzYS5jb20vcHViL3BrY3MvYXNjaWkvbGF5bWFuLmFzY1xuXG52YXIgQmVyID0gcmVxdWlyZSgnLi9iZXIvaW5kZXgnKTtcblxuXG5cbi8vIC0tLSBFeHBvcnRlZCBBUElcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgQmVyOiBCZXIsXG5cbiAgQmVyUmVhZGVyOiBCZXIuUmVhZGVyLFxuXG4gIEJlcldyaXRlcjogQmVyLldyaXRlclxuXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmc1wiKTsiLCIvLyBDb3B5cmlnaHQgMjAxOCBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHJlYWQ6IHJlYWQsXG5cdHdyaXRlOiB3cml0ZVxufTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjEnKTtcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4uL2FsZ3MnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgS2V5ID0gcmVxdWlyZSgnLi4va2V5Jyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4uL3ByaXZhdGUta2V5Jyk7XG5cbnZhciBwa2NzMSA9IHJlcXVpcmUoJy4vcGtjczEnKTtcbnZhciBwa2NzOCA9IHJlcXVpcmUoJy4vcGtjczgnKTtcbnZhciBzc2hwcml2ID0gcmVxdWlyZSgnLi9zc2gtcHJpdmF0ZScpO1xudmFyIHJmYzQyNTMgPSByZXF1aXJlKCcuL3JmYzQyNTMnKTtcblxudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpO1xuXG52YXIgT0lEX1BCRVMyID0gJzEuMi44NDAuMTEzNTQ5LjEuNS4xMyc7XG52YXIgT0lEX1BCS0RGMiA9ICcxLjIuODQwLjExMzU0OS4xLjUuMTInO1xuXG52YXIgT0lEX1RPX0NJUEhFUiA9IHtcblx0JzEuMi44NDAuMTEzNTQ5LjMuNyc6ICczZGVzLWNiYycsXG5cdCcyLjE2Ljg0MC4xLjEwMS4zLjQuMS4yJzogJ2FlczEyOC1jYmMnLFxuXHQnMi4xNi44NDAuMS4xMDEuMy40LjEuNDInOiAnYWVzMjU2LWNiYydcbn07XG52YXIgQ0lQSEVSX1RPX09JRCA9IHt9O1xuT2JqZWN0LmtleXMoT0lEX1RPX0NJUEhFUikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuXHRDSVBIRVJfVE9fT0lEW09JRF9UT19DSVBIRVJba11dID0gaztcbn0pO1xuXG52YXIgT0lEX1RPX0hBU0ggPSB7XG5cdCcxLjIuODQwLjExMzU0OS4yLjcnOiAnc2hhMScsXG5cdCcxLjIuODQwLjExMzU0OS4yLjknOiAnc2hhMjU2Jyxcblx0JzEuMi44NDAuMTEzNTQ5LjIuMTEnOiAnc2hhNTEyJ1xufTtcbnZhciBIQVNIX1RPX09JRCA9IHt9O1xuT2JqZWN0LmtleXMoT0lEX1RPX0hBU0gpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0SEFTSF9UT19PSURbT0lEX1RPX0hBU0hba11dID0gaztcbn0pO1xuXG4vKlxuICogRm9yIHJlYWRpbmcgd2Ugc3VwcG9ydCBib3RoIFBLQ1MjMSBhbmQgUEtDUyM4LiBJZiB3ZSBmaW5kIGEgcHJpdmF0ZSBrZXksXG4gKiB3ZSBqdXN0IHRha2UgdGhlIHB1YmxpYyBjb21wb25lbnQgb2YgaXQgYW5kIHVzZSB0aGF0LlxuICovXG5mdW5jdGlvbiByZWFkKGJ1Ziwgb3B0aW9ucywgZm9yY2VUeXBlKSB7XG5cdHZhciBpbnB1dCA9IGJ1Zjtcblx0aWYgKHR5cGVvZiAoYnVmKSAhPT0gJ3N0cmluZycpIHtcblx0XHRhc3NlcnQuYnVmZmVyKGJ1ZiwgJ2J1ZicpO1xuXHRcdGJ1ZiA9IGJ1Zi50b1N0cmluZygnYXNjaWknKTtcblx0fVxuXG5cdHZhciBsaW5lcyA9IGJ1Zi50cmltKCkuc3BsaXQoL1tcXHJcXG5dKy9nKTtcblxuXHR2YXIgbTtcblx0dmFyIHNpID0gLTE7XG5cdHdoaWxlICghbSAmJiBzaSA8IGxpbmVzLmxlbmd0aCkge1xuXHRcdG0gPSBsaW5lc1srK3NpXS5tYXRjaCgvKkpTU1RZTEVEKi9cblx0XHQgICAgL1stXStbIF0qQkVHSU4gKFtBLVowLTldW0EtWmEtejAtOV0rICk/KFBVQkxJQ3xQUklWQVRFKSBLRVlbIF0qWy1dKy8pO1xuXHR9XG5cdGFzc2VydC5vayhtLCAnaW52YWxpZCBQRU0gaGVhZGVyJyk7XG5cblx0dmFyIG0yO1xuXHR2YXIgZWkgPSBsaW5lcy5sZW5ndGg7XG5cdHdoaWxlICghbTIgJiYgZWkgPiAwKSB7XG5cdFx0bTIgPSBsaW5lc1stLWVpXS5tYXRjaCgvKkpTU1RZTEVEKi9cblx0XHQgICAgL1stXStbIF0qRU5EIChbQS1aMC05XVtBLVphLXowLTldKyApPyhQVUJMSUN8UFJJVkFURSkgS0VZWyBdKlstXSsvKTtcblx0fVxuXHRhc3NlcnQub2sobTIsICdpbnZhbGlkIFBFTSBmb290ZXInKTtcblxuXHQvKiBCZWdpbiBhbmQgZW5kIGJhbm5lcnMgbXVzdCBtYXRjaCBrZXkgdHlwZSAqL1xuXHRhc3NlcnQuZXF1YWwobVsyXSwgbTJbMl0pO1xuXHR2YXIgdHlwZSA9IG1bMl0udG9Mb3dlckNhc2UoKTtcblxuXHR2YXIgYWxnO1xuXHRpZiAobVsxXSkge1xuXHRcdC8qIFRoZXkgYWxzbyBtdXN0IG1hdGNoIGFsZ29yaXRobXMsIGlmIGdpdmVuICovXG5cdFx0YXNzZXJ0LmVxdWFsKG1bMV0sIG0yWzFdLCAnUEVNIGhlYWRlciBhbmQgZm9vdGVyIG1pc21hdGNoJyk7XG5cdFx0YWxnID0gbVsxXS50cmltKCk7XG5cdH1cblxuXHRsaW5lcyA9IGxpbmVzLnNsaWNlKHNpLCBlaSArIDEpO1xuXG5cdHZhciBoZWFkZXJzID0ge307XG5cdHdoaWxlICh0cnVlKSB7XG5cdFx0bGluZXMgPSBsaW5lcy5zbGljZSgxKTtcblx0XHRtID0gbGluZXNbMF0ubWF0Y2goLypKU1NUWUxFRCovXG5cdFx0ICAgIC9eKFtBLVphLXowLTktXSspOiAoLispJC8pO1xuXHRcdGlmICghbSlcblx0XHRcdGJyZWFrO1xuXHRcdGhlYWRlcnNbbVsxXS50b0xvd2VyQ2FzZSgpXSA9IG1bMl07XG5cdH1cblxuXHQvKiBDaG9wIG9mZiB0aGUgZmlyc3QgYW5kIGxhc3QgbGluZXMgKi9cblx0bGluZXMgPSBsaW5lcy5zbGljZSgwLCAtMSkuam9pbignJyk7XG5cdGJ1ZiA9IEJ1ZmZlci5mcm9tKGxpbmVzLCAnYmFzZTY0Jyk7XG5cblx0dmFyIGNpcGhlciwga2V5LCBpdjtcblx0aWYgKGhlYWRlcnNbJ3Byb2MtdHlwZSddKSB7XG5cdFx0dmFyIHBhcnRzID0gaGVhZGVyc1sncHJvYy10eXBlJ10uc3BsaXQoJywnKTtcblx0XHRpZiAocGFydHNbMF0gPT09ICc0JyAmJiBwYXJ0c1sxXSA9PT0gJ0VOQ1JZUFRFRCcpIHtcblx0XHRcdGlmICh0eXBlb2YgKG9wdGlvbnMucGFzc3BocmFzZSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdG9wdGlvbnMucGFzc3BocmFzZSA9IEJ1ZmZlci5mcm9tKFxuXHRcdFx0XHQgICAgb3B0aW9ucy5wYXNzcGhyYXNlLCAndXRmLTgnKTtcblx0XHRcdH1cblx0XHRcdGlmICghQnVmZmVyLmlzQnVmZmVyKG9wdGlvbnMucGFzc3BocmFzZSkpIHtcblx0XHRcdFx0dGhyb3cgKG5ldyBlcnJvcnMuS2V5RW5jcnlwdGVkRXJyb3IoXG5cdFx0XHRcdCAgICBvcHRpb25zLmZpbGVuYW1lLCAnUEVNJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cGFydHMgPSBoZWFkZXJzWydkZWstaW5mbyddLnNwbGl0KCcsJyk7XG5cdFx0XHRcdGFzc2VydC5vayhwYXJ0cy5sZW5ndGggPT09IDIpO1xuXHRcdFx0XHRjaXBoZXIgPSBwYXJ0c1swXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRpdiA9IEJ1ZmZlci5mcm9tKHBhcnRzWzFdLCAnaGV4Jyk7XG5cdFx0XHRcdGtleSA9IHV0aWxzLm9wZW5zc2xLZXlEZXJpdihjaXBoZXIsIGl2LFxuXHRcdFx0XHQgICAgb3B0aW9ucy5wYXNzcGhyYXNlLCAxKS5rZXk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKGFsZyAmJiBhbGcudG9Mb3dlckNhc2UoKSA9PT0gJ2VuY3J5cHRlZCcpIHtcblx0XHR2YXIgZWRlciA9IG5ldyBhc24xLkJlclJlYWRlcihidWYpO1xuXHRcdHZhciBwYmVzRW5kO1xuXHRcdGVkZXIucmVhZFNlcXVlbmNlKCk7XG5cblx0XHRlZGVyLnJlYWRTZXF1ZW5jZSgpO1xuXHRcdHBiZXNFbmQgPSBlZGVyLm9mZnNldCArIGVkZXIubGVuZ3RoO1xuXG5cdFx0dmFyIG1ldGhvZCA9IGVkZXIucmVhZE9JRCgpO1xuXHRcdGlmIChtZXRob2QgIT09IE9JRF9QQkVTMikge1xuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgUEVNL1BLQ1M4IGVuY3J5cHRpb24gJyArXG5cdFx0XHQgICAgJ3NjaGVtZTogJyArIG1ldGhvZCkpO1xuXHRcdH1cblxuXHRcdGVkZXIucmVhZFNlcXVlbmNlKCk7XHQvKiBQQkVTMi1wYXJhbXMgKi9cblxuXHRcdGVkZXIucmVhZFNlcXVlbmNlKCk7XHQvKiBrZXlEZXJpdmF0aW9uRnVuYyAqL1xuXHRcdHZhciBrZGZFbmQgPSBlZGVyLm9mZnNldCArIGVkZXIubGVuZ3RoO1xuXHRcdHZhciBrZGZPaWQgPSBlZGVyLnJlYWRPSUQoKTtcblx0XHRpZiAoa2RmT2lkICE9PSBPSURfUEJLREYyKVxuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgUEJFUzIgS0RGOiAnICsga2RmT2lkKSk7XG5cdFx0ZWRlci5yZWFkU2VxdWVuY2UoKTtcblx0XHR2YXIgc2FsdCA9IGVkZXIucmVhZFN0cmluZyhhc24xLkJlci5PY3RldFN0cmluZywgdHJ1ZSk7XG5cdFx0dmFyIGl0ZXJhdGlvbnMgPSBlZGVyLnJlYWRJbnQoKTtcblx0XHR2YXIgaGFzaEFsZyA9ICdzaGExJztcblx0XHRpZiAoZWRlci5vZmZzZXQgPCBrZGZFbmQpIHtcblx0XHRcdGVkZXIucmVhZFNlcXVlbmNlKCk7XG5cdFx0XHR2YXIgaGFzaEFsZ09pZCA9IGVkZXIucmVhZE9JRCgpO1xuXHRcdFx0aGFzaEFsZyA9IE9JRF9UT19IQVNIW2hhc2hBbGdPaWRdO1xuXHRcdFx0aWYgKGhhc2hBbGcgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aHJvdyAobmV3IEVycm9yKCdVbnN1cHBvcnRlZCBQQktERjIgaGFzaDogJyArXG5cdFx0XHRcdCAgICBoYXNoQWxnT2lkKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVkZXIuX29mZnNldCA9IGtkZkVuZDtcblxuXHRcdGVkZXIucmVhZFNlcXVlbmNlKCk7XHQvKiBlbmNyeXB0aW9uU2NoZW1lICovXG5cdFx0dmFyIGNpcGhlck9pZCA9IGVkZXIucmVhZE9JRCgpO1xuXHRcdGNpcGhlciA9IE9JRF9UT19DSVBIRVJbY2lwaGVyT2lkXTtcblx0XHRpZiAoY2lwaGVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIFBCRVMyIGNpcGhlcjogJyArXG5cdFx0XHQgICAgY2lwaGVyT2lkKSk7XG5cdFx0fVxuXHRcdGl2ID0gZWRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLk9jdGV0U3RyaW5nLCB0cnVlKTtcblxuXHRcdGVkZXIuX29mZnNldCA9IHBiZXNFbmQ7XG5cdFx0YnVmID0gZWRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLk9jdGV0U3RyaW5nLCB0cnVlKTtcblxuXHRcdGlmICh0eXBlb2YgKG9wdGlvbnMucGFzc3BocmFzZSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRvcHRpb25zLnBhc3NwaHJhc2UgPSBCdWZmZXIuZnJvbShcblx0XHRcdCAgICBvcHRpb25zLnBhc3NwaHJhc2UsICd1dGYtOCcpO1xuXHRcdH1cblx0XHRpZiAoIUJ1ZmZlci5pc0J1ZmZlcihvcHRpb25zLnBhc3NwaHJhc2UpKSB7XG5cdFx0XHR0aHJvdyAobmV3IGVycm9ycy5LZXlFbmNyeXB0ZWRFcnJvcihcblx0XHRcdCAgICBvcHRpb25zLmZpbGVuYW1lLCAnUEVNJykpO1xuXHRcdH1cblxuXHRcdHZhciBjaW5mbyA9IHV0aWxzLm9wZW5zc2hDaXBoZXJJbmZvKGNpcGhlcik7XG5cblx0XHRjaXBoZXIgPSBjaW5mby5vcGVuc3NsTmFtZTtcblx0XHRrZXkgPSB1dGlscy5wYmtkZjIoaGFzaEFsZywgc2FsdCwgaXRlcmF0aW9ucywgY2luZm8ua2V5U2l6ZSxcblx0XHQgICAgb3B0aW9ucy5wYXNzcGhyYXNlKTtcblx0XHRhbGcgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoY2lwaGVyICYmIGtleSAmJiBpdikge1xuXHRcdHZhciBjaXBoZXJTdHJlYW0gPSBjcnlwdG8uY3JlYXRlRGVjaXBoZXJpdihjaXBoZXIsIGtleSwgaXYpO1xuXHRcdHZhciBjaHVuaywgY2h1bmtzID0gW107XG5cdFx0Y2lwaGVyU3RyZWFtLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcblx0XHRcdGlmIChlLnRvU3RyaW5nKCkuaW5kZXhPZignYmFkIGRlY3J5cHQnKSAhPT0gLTEpIHtcblx0XHRcdFx0dGhyb3cgKG5ldyBFcnJvcignSW5jb3JyZWN0IHBhc3NwaHJhc2UgJyArXG5cdFx0XHRcdCAgICAnc3VwcGxpZWQsIGNvdWxkIG5vdCBkZWNyeXB0IGtleScpKTtcblx0XHRcdH1cblx0XHRcdHRocm93IChlKTtcblx0XHR9KTtcblx0XHRjaXBoZXJTdHJlYW0ud3JpdGUoYnVmKTtcblx0XHRjaXBoZXJTdHJlYW0uZW5kKCk7XG5cdFx0d2hpbGUgKChjaHVuayA9IGNpcGhlclN0cmVhbS5yZWFkKCkpICE9PSBudWxsKVxuXHRcdFx0Y2h1bmtzLnB1c2goY2h1bmspO1xuXHRcdGJ1ZiA9IEJ1ZmZlci5jb25jYXQoY2h1bmtzKTtcblx0fVxuXG5cdC8qIFRoZSBuZXcgT3BlblNTSCBpbnRlcm5hbCBmb3JtYXQgYWJ1c2VzIFBFTSBoZWFkZXJzICovXG5cdGlmIChhbGcgJiYgYWxnLnRvTG93ZXJDYXNlKCkgPT09ICdvcGVuc3NoJylcblx0XHRyZXR1cm4gKHNzaHByaXYucmVhZFNTSFByaXZhdGUodHlwZSwgYnVmLCBvcHRpb25zKSk7XG5cdGlmIChhbGcgJiYgYWxnLnRvTG93ZXJDYXNlKCkgPT09ICdzc2gyJylcblx0XHRyZXR1cm4gKHJmYzQyNTMucmVhZFR5cGUodHlwZSwgYnVmLCBvcHRpb25zKSk7XG5cblx0dmFyIGRlciA9IG5ldyBhc24xLkJlclJlYWRlcihidWYpO1xuXHRkZXIub3JpZ2luYWxJbnB1dCA9IGlucHV0O1xuXG5cdC8qXG5cdCAqIEFsbCBvZiB0aGUgUEVNIGZpbGUgdHlwZXMgc3RhcnQgd2l0aCBhIHNlcXVlbmNlIHRhZywgc28gY2hvcCBpdFxuXHQgKiBvZmYgaGVyZVxuXHQgKi9cblx0ZGVyLnJlYWRTZXF1ZW5jZSgpO1xuXG5cdC8qIFBLQ1MjMSB0eXBlIGtleXMgbmFtZSBhbiBhbGdvcml0aG0gaW4gdGhlIGJhbm5lciBleHBsaWNpdGx5ICovXG5cdGlmIChhbGcpIHtcblx0XHRpZiAoZm9yY2VUeXBlKVxuXHRcdFx0YXNzZXJ0LnN0cmljdEVxdWFsKGZvcmNlVHlwZSwgJ3BrY3MxJyk7XG5cdFx0cmV0dXJuIChwa2NzMS5yZWFkUGtjczEoYWxnLCB0eXBlLCBkZXIpKTtcblx0fSBlbHNlIHtcblx0XHRpZiAoZm9yY2VUeXBlKVxuXHRcdFx0YXNzZXJ0LnN0cmljdEVxdWFsKGZvcmNlVHlwZSwgJ3BrY3M4Jyk7XG5cdFx0cmV0dXJuIChwa2NzOC5yZWFkUGtjczgoYWxnLCB0eXBlLCBkZXIpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB3cml0ZShrZXksIG9wdGlvbnMsIHR5cGUpIHtcblx0YXNzZXJ0Lm9iamVjdChrZXkpO1xuXG5cdHZhciBhbGcgPSB7XG5cdCAgICAnZWNkc2EnOiAnRUMnLFxuXHQgICAgJ3JzYSc6ICdSU0EnLFxuXHQgICAgJ2RzYSc6ICdEU0EnLFxuXHQgICAgJ2VkMjU1MTknOiAnRWREU0EnXG5cdH1ba2V5LnR5cGVdO1xuXHR2YXIgaGVhZGVyO1xuXG5cdHZhciBkZXIgPSBuZXcgYXNuMS5CZXJXcml0ZXIoKTtcblxuXHRpZiAoUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5KSkge1xuXHRcdGlmICh0eXBlICYmIHR5cGUgPT09ICdwa2NzOCcpIHtcblx0XHRcdGhlYWRlciA9ICdQUklWQVRFIEtFWSc7XG5cdFx0XHRwa2NzOC53cml0ZVBrY3M4KGRlciwga2V5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHR5cGUpXG5cdFx0XHRcdGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlLCAncGtjczEnKTtcblx0XHRcdGhlYWRlciA9IGFsZyArICcgUFJJVkFURSBLRVknO1xuXHRcdFx0cGtjczEud3JpdGVQa2NzMShkZXIsIGtleSk7XG5cdFx0fVxuXG5cdH0gZWxzZSBpZiAoS2V5LmlzS2V5KGtleSkpIHtcblx0XHRpZiAodHlwZSAmJiB0eXBlID09PSAncGtjczEnKSB7XG5cdFx0XHRoZWFkZXIgPSBhbGcgKyAnIFBVQkxJQyBLRVknO1xuXHRcdFx0cGtjczEud3JpdGVQa2NzMShkZXIsIGtleSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0eXBlKVxuXHRcdFx0XHRhc3NlcnQuc3RyaWN0RXF1YWwodHlwZSwgJ3BrY3M4Jyk7XG5cdFx0XHRoZWFkZXIgPSAnUFVCTElDIEtFWSc7XG5cdFx0XHRwa2NzOC53cml0ZVBrY3M4KGRlciwga2V5KTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdrZXkgaXMgbm90IGEgS2V5IG9yIFByaXZhdGVLZXknKSk7XG5cdH1cblxuXHR2YXIgdG1wID0gZGVyLmJ1ZmZlci50b1N0cmluZygnYmFzZTY0Jyk7XG5cdHZhciBsZW4gPSB0bXAubGVuZ3RoICsgKHRtcC5sZW5ndGggLyA2NCkgK1xuXHQgICAgMTggKyAxNiArIGhlYWRlci5sZW5ndGgqMiArIDEwO1xuXHR2YXIgYnVmID0gQnVmZmVyLmFsbG9jKGxlbik7XG5cdHZhciBvID0gMDtcblx0byArPSBidWYud3JpdGUoJy0tLS0tQkVHSU4gJyArIGhlYWRlciArICctLS0tLVxcbicsIG8pO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHRtcC5sZW5ndGg7ICkge1xuXHRcdHZhciBsaW1pdCA9IGkgKyA2NDtcblx0XHRpZiAobGltaXQgPiB0bXAubGVuZ3RoKVxuXHRcdFx0bGltaXQgPSB0bXAubGVuZ3RoO1xuXHRcdG8gKz0gYnVmLndyaXRlKHRtcC5zbGljZShpLCBsaW1pdCksIG8pO1xuXHRcdGJ1ZltvKytdID0gMTA7XG5cdFx0aSA9IGxpbWl0O1xuXHR9XG5cdG8gKz0gYnVmLndyaXRlKCctLS0tLUVORCAnICsgaGVhZGVyICsgJy0tLS0tXFxuJywgbyk7XG5cblx0cmV0dXJuIChidWYuc2xpY2UoMCwgbykpO1xufVxuIiwiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRyZWFkOiByZWFkLmJpbmQodW5kZWZpbmVkLCBmYWxzZSwgdW5kZWZpbmVkKSxcblx0cmVhZFR5cGU6IHJlYWQuYmluZCh1bmRlZmluZWQsIGZhbHNlKSxcblx0d3JpdGU6IHdyaXRlLFxuXHQvKiBzZW1pLXByaXZhdGUgYXBpLCB1c2VkIGJ5IHNzaHBrLWFnZW50ICovXG5cdHJlYWRQYXJ0aWFsOiByZWFkLmJpbmQodW5kZWZpbmVkLCB0cnVlKSxcblxuXHQvKiBzaGFyZWQgd2l0aCBzc2ggZm9ybWF0ICovXG5cdHJlYWRJbnRlcm5hbDogcmVhZCxcblx0a2V5VHlwZVRvQWxnOiBrZXlUeXBlVG9BbGcsXG5cdGFsZ1RvS2V5VHlwZTogYWxnVG9LZXlUeXBlXG59O1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4uL2FsZ3MnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgS2V5ID0gcmVxdWlyZSgnLi4va2V5Jyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4uL3ByaXZhdGUta2V5Jyk7XG52YXIgU1NIQnVmZmVyID0gcmVxdWlyZSgnLi4vc3NoLWJ1ZmZlcicpO1xuXG5mdW5jdGlvbiBhbGdUb0tleVR5cGUoYWxnKSB7XG5cdGFzc2VydC5zdHJpbmcoYWxnKTtcblx0aWYgKGFsZyA9PT0gJ3NzaC1kc3MnKVxuXHRcdHJldHVybiAoJ2RzYScpO1xuXHRlbHNlIGlmIChhbGcgPT09ICdzc2gtcnNhJylcblx0XHRyZXR1cm4gKCdyc2EnKTtcblx0ZWxzZSBpZiAoYWxnID09PSAnc3NoLWVkMjU1MTknKVxuXHRcdHJldHVybiAoJ2VkMjU1MTknKTtcblx0ZWxzZSBpZiAoYWxnID09PSAnc3NoLWN1cnZlMjU1MTknKVxuXHRcdHJldHVybiAoJ2N1cnZlMjU1MTknKTtcblx0ZWxzZSBpZiAoYWxnLm1hdGNoKC9eZWNkc2Etc2hhMi0vKSlcblx0XHRyZXR1cm4gKCdlY2RzYScpO1xuXHRlbHNlXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBhbGdvcml0aG0gJyArIGFsZykpO1xufVxuXG5mdW5jdGlvbiBrZXlUeXBlVG9BbGcoa2V5KSB7XG5cdGFzc2VydC5vYmplY3Qoa2V5KTtcblx0aWYgKGtleS50eXBlID09PSAnZHNhJylcblx0XHRyZXR1cm4gKCdzc2gtZHNzJyk7XG5cdGVsc2UgaWYgKGtleS50eXBlID09PSAncnNhJylcblx0XHRyZXR1cm4gKCdzc2gtcnNhJyk7XG5cdGVsc2UgaWYgKGtleS50eXBlID09PSAnZWQyNTUxOScpXG5cdFx0cmV0dXJuICgnc3NoLWVkMjU1MTknKTtcblx0ZWxzZSBpZiAoa2V5LnR5cGUgPT09ICdjdXJ2ZTI1NTE5Jylcblx0XHRyZXR1cm4gKCdzc2gtY3VydmUyNTUxOScpO1xuXHRlbHNlIGlmIChrZXkudHlwZSA9PT0gJ2VjZHNhJylcblx0XHRyZXR1cm4gKCdlY2RzYS1zaGEyLScgKyBrZXkucGFydC5jdXJ2ZS5kYXRhLnRvU3RyaW5nKCkpO1xuXHRlbHNlXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBrZXkgdHlwZSAnICsga2V5LnR5cGUpKTtcbn1cblxuZnVuY3Rpb24gcmVhZChwYXJ0aWFsLCB0eXBlLCBidWYsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiAoYnVmKSA9PT0gJ3N0cmluZycpXG5cdFx0YnVmID0gQnVmZmVyLmZyb20oYnVmKTtcblx0YXNzZXJ0LmJ1ZmZlcihidWYsICdidWYnKTtcblxuXHR2YXIga2V5ID0ge307XG5cblx0dmFyIHBhcnRzID0ga2V5LnBhcnRzID0gW107XG5cdHZhciBzc2hidWYgPSBuZXcgU1NIQnVmZmVyKHtidWZmZXI6IGJ1Zn0pO1xuXG5cdHZhciBhbGcgPSBzc2hidWYucmVhZFN0cmluZygpO1xuXHRhc3NlcnQub2soIXNzaGJ1Zi5hdEVuZCgpLCAna2V5IG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgcGFydCcpO1xuXG5cdGtleS50eXBlID0gYWxnVG9LZXlUeXBlKGFsZyk7XG5cblx0dmFyIHBhcnRDb3VudCA9IGFsZ3MuaW5mb1trZXkudHlwZV0ucGFydHMubGVuZ3RoO1xuXHRpZiAodHlwZSAmJiB0eXBlID09PSAncHJpdmF0ZScpXG5cdFx0cGFydENvdW50ID0gYWxncy5wcml2SW5mb1trZXkudHlwZV0ucGFydHMubGVuZ3RoO1xuXG5cdHdoaWxlICghc3NoYnVmLmF0RW5kKCkgJiYgcGFydHMubGVuZ3RoIDwgcGFydENvdW50KVxuXHRcdHBhcnRzLnB1c2goc3NoYnVmLnJlYWRQYXJ0KCkpO1xuXHR3aGlsZSAoIXBhcnRpYWwgJiYgIXNzaGJ1Zi5hdEVuZCgpKVxuXHRcdHBhcnRzLnB1c2goc3NoYnVmLnJlYWRQYXJ0KCkpO1xuXG5cdGFzc2VydC5vayhwYXJ0cy5sZW5ndGggPj0gMSxcblx0ICAgICdrZXkgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBwYXJ0Jyk7XG5cdGFzc2VydC5vayhwYXJ0aWFsIHx8IHNzaGJ1Zi5hdEVuZCgpLFxuXHQgICAgJ2xlZnRvdmVyIGJ5dGVzIGF0IGVuZCBvZiBrZXknKTtcblxuXHR2YXIgQ29uc3RydWN0b3IgPSBLZXk7XG5cdHZhciBhbGdJbmZvID0gYWxncy5pbmZvW2tleS50eXBlXTtcblx0aWYgKHR5cGUgPT09ICdwcml2YXRlJyB8fCBhbGdJbmZvLnBhcnRzLmxlbmd0aCAhPT0gcGFydHMubGVuZ3RoKSB7XG5cdFx0YWxnSW5mbyA9IGFsZ3MucHJpdkluZm9ba2V5LnR5cGVdO1xuXHRcdENvbnN0cnVjdG9yID0gUHJpdmF0ZUtleTtcblx0fVxuXHRhc3NlcnQuc3RyaWN0RXF1YWwoYWxnSW5mby5wYXJ0cy5sZW5ndGgsIHBhcnRzLmxlbmd0aCk7XG5cblx0aWYgKGtleS50eXBlID09PSAnZWNkc2EnKSB7XG5cdFx0dmFyIHJlcyA9IC9eZWNkc2Etc2hhMi0oLispJC8uZXhlYyhhbGcpO1xuXHRcdGFzc2VydC5vayhyZXMgIT09IG51bGwpO1xuXHRcdGFzc2VydC5zdHJpY3RFcXVhbChyZXNbMV0sIHBhcnRzWzBdLmRhdGEudG9TdHJpbmcoKSk7XG5cdH1cblxuXHR2YXIgbm9ybWFsaXplZCA9IHRydWU7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYWxnSW5mby5wYXJ0cy5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBwID0gcGFydHNbaV07XG5cdFx0cC5uYW1lID0gYWxnSW5mby5wYXJ0c1tpXTtcblx0XHQvKlxuXHRcdCAqIE9wZW5TU0ggc3RvcmVzIGVkMjU1MTkgXCJwcml2YXRlXCIga2V5cyBhcyBzZWVkICsgcHVibGljIGtleVxuXHRcdCAqIGNvbmNhdCdkIHRvZ2V0aGVyIChrIGZvbGxvd2VkIGJ5IEEpLiBXZSB3YW50IHRvIGtlZXAgdGhlbVxuXHRcdCAqIHNlcGFyYXRlIGZvciBvdGhlciBmb3JtYXRzIHRoYXQgZG9uJ3QgZG8gdGhpcy5cblx0XHQgKi9cblx0XHRpZiAoa2V5LnR5cGUgPT09ICdlZDI1NTE5JyAmJiBwLm5hbWUgPT09ICdrJylcblx0XHRcdHAuZGF0YSA9IHAuZGF0YS5zbGljZSgwLCAzMik7XG5cblx0XHRpZiAocC5uYW1lICE9PSAnY3VydmUnICYmIGFsZ0luZm8ubm9ybWFsaXplICE9PSBmYWxzZSkge1xuXHRcdFx0dmFyIG5kO1xuXHRcdFx0aWYgKGtleS50eXBlID09PSAnZWQyNTUxOScpIHtcblx0XHRcdFx0bmQgPSB1dGlscy56ZXJvUGFkVG9MZW5ndGgocC5kYXRhLCAzMik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuZCA9IHV0aWxzLm1wTm9ybWFsaXplKHAuZGF0YSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobmQudG9TdHJpbmcoJ2JpbmFyeScpICE9PVxuXHRcdFx0ICAgIHAuZGF0YS50b1N0cmluZygnYmluYXJ5JykpIHtcblx0XHRcdFx0cC5kYXRhID0gbmQ7XG5cdFx0XHRcdG5vcm1hbGl6ZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAobm9ybWFsaXplZClcblx0XHRrZXkuX3JmYzQyNTNDYWNoZSA9IHNzaGJ1Zi50b0J1ZmZlcigpO1xuXG5cdGlmIChwYXJ0aWFsICYmIHR5cGVvZiAocGFydGlhbCkgPT09ICdvYmplY3QnKSB7XG5cdFx0cGFydGlhbC5yZW1haW5kZXIgPSBzc2hidWYucmVtYWluZGVyKCk7XG5cdFx0cGFydGlhbC5jb25zdW1lZCA9IHNzaGJ1Zi5fb2Zmc2V0O1xuXHR9XG5cblx0cmV0dXJuIChuZXcgQ29uc3RydWN0b3Ioa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlKGtleSwgb3B0aW9ucykge1xuXHRhc3NlcnQub2JqZWN0KGtleSk7XG5cblx0dmFyIGFsZyA9IGtleVR5cGVUb0FsZyhrZXkpO1xuXHR2YXIgaTtcblxuXHR2YXIgYWxnSW5mbyA9IGFsZ3MuaW5mb1trZXkudHlwZV07XG5cdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdGFsZ0luZm8gPSBhbGdzLnByaXZJbmZvW2tleS50eXBlXTtcblx0dmFyIHBhcnRzID0gYWxnSW5mby5wYXJ0cztcblxuXHR2YXIgYnVmID0gbmV3IFNTSEJ1ZmZlcih7fSk7XG5cblx0YnVmLndyaXRlU3RyaW5nKGFsZyk7XG5cblx0Zm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIGRhdGEgPSBrZXkucGFydFtwYXJ0c1tpXV0uZGF0YTtcblx0XHRpZiAoYWxnSW5mby5ub3JtYWxpemUgIT09IGZhbHNlKSB7XG5cdFx0XHRpZiAoa2V5LnR5cGUgPT09ICdlZDI1NTE5Jylcblx0XHRcdFx0ZGF0YSA9IHV0aWxzLnplcm9QYWRUb0xlbmd0aChkYXRhLCAzMik7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGRhdGEgPSB1dGlscy5tcE5vcm1hbGl6ZShkYXRhKTtcblx0XHR9XG5cdFx0aWYgKGtleS50eXBlID09PSAnZWQyNTUxOScgJiYgcGFydHNbaV0gPT09ICdrJylcblx0XHRcdGRhdGEgPSBCdWZmZXIuY29uY2F0KFtkYXRhLCBrZXkucGFydC5BLmRhdGFdKTtcblx0XHRidWYud3JpdGVCdWZmZXIoZGF0YSk7XG5cdH1cblxuXHRyZXR1cm4gKGJ1Zi50b0J1ZmZlcigpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciBzbmFrZUNhc2UgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnbG9kYXNoLnNuYWtlY2FzZScpKTtcbnZhciBjYW1lbENhc2UgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnbG9kYXNoLmNhbWVsY2FzZScpKTtcbnZhciBrZWJhYkNhc2UgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnbG9kYXNoLmtlYmFiY2FzZScpKTtcbnZhciBvcyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdvcycpKTtcbnZhciBjcnlwdG8gPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnY3J5cHRvJykpO1xudmFyIGNoaWxkX3Byb2Nlc3MgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG52YXIgcmVhZGxpbmUgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgncmVhZGxpbmUnKSk7XG52YXIgbWtkaXJwID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ21rZGlycCcpKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBmc19fZGVmYXVsdCA9IF9pbnRlcm9wRGVmYXVsdChmcyk7XG52YXIgcGF0aCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdwYXRoJykpO1xuXG4vKipcbiAgVGFrZXMgYSBLZXliYXNlIEFQSSBpbnB1dCBKYXZhU2NyaXB0IG9iamVjdCBhbmQgcmVjdXJzaXZlbHkgZm9ybWF0cyBpdCBpbnRvIHNuYWtlX2Nhc2Ugb3Iga2ViYWItY2FzZSBpbnN0ZWFkIG9mIGNhbWVsQ2FzZSBmb3IgdGhlIHNlcnZpY2UuXG4gICogQGlnbm9yZVxuICAqIEBwYXJhbSBvYmogLSBUaGUgb2JqZWN0IHRvIGJlIGZvcm1hdHRlZC5cbiAgKiBAcGFyYW0gYXBpVHlwZSAtIFRoZSB0eXBlIG9mIGFwaSB0aGUgdGhlIGlucHV0IGlzIGJlaW5nIHNlcnZlZCB0by4gQ3VycmVudGx5IEtleWJhc2UgaGFzIGNoYXQsIHRlYW0sIGFuZCB3YWxsZXQgYXBpcy5cbiAgKiBAcmV0dXJucyAtIFRoZSBuZXcsIGZvcm1hdHRlZCBvYmplY3QuXG4gICogQGV4YW1wbGVcbiAgKiBjb25zdCBpbnB1dE9wdGlvbnMgPSBmb3JtYXRBUElPYmplY3Qoe3VucmVhZE9ubHk6IHRydWV9KVxuICAqIGNvbnNvbGUubG9nKGlucHV0T3B0aW9ucykgLy8ge3VucmVhZF9vbmx5OiB0cnVlfVxuICovXG5mdW5jdGlvbiBmb3JtYXRBUElPYmplY3RJbnB1dChvYmosIGFwaVR5cGUpIHtcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvYmo7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5tYXAoaXRlbSA9PiBmb3JtYXRBUElPYmplY3RJbnB1dChpdGVtLCBhcGlUeXBlKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKChuZXdPYmosIGtleSkgPT4ge1xuICAgICAgLy8gVE9ETzogaG9wZWZ1bGx5IHdlIHN0YW5kYXJkaXplIGhvdyB0aGUgS2V5YmFzZSBBUEkgaGFuZGxlcyBpbnB1dCBrZXlzXG4gICAgICBsZXQgZm9ybWF0dGVkS2V5O1xuXG4gICAgICBpZiAoYXBpVHlwZSA9PT0gJ3dhbGxldCcpIHtcbiAgICAgICAgZm9ybWF0dGVkS2V5ID0ga2ViYWJDYXNlKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JtYXR0ZWRLZXkgPSBzbmFrZUNhc2Uoa2V5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ubmV3T2JqLFxuICAgICAgICAgIFtmb3JtYXR0ZWRLZXldOiBmb3JtYXRBUElPYmplY3RJbnB1dChvYmpba2V5XSwgYXBpVHlwZSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgLi4ubmV3T2JqLFxuICAgICAgICBbZm9ybWF0dGVkS2V5XTogb2JqW2tleV1cbiAgICAgIH07XG4gICAgfSwge30pO1xuICB9XG59XG4vKlxuICogQW4gaW50ZXJuYWwgYmxhY2tsaXN0IG9mIHBhcmVudCBsZXZlbHMgYXQgd2hpY2ggZm9ybWF0QVBJT2JqZWN0T3V0cHV0IHRyYW5zZm9ybWF0aW9uc1xuICogc2hvdWxkbid0IGJlIHBlcmZvcm1lZC4gQSBgbnVsbGAgdmFsdWUgbWF0Y2hlcyBldmVyeXRoaW5nLlxuICovXG5cbmNvbnN0IHRyYW5zZm9ybXNCbGFja2xpc3QgPSB7XG4gIGNoYXQ6IHtcbiAgICByZWFkOiBbWydtZXNzYWdlcycsIG51bGwsICdtc2cnLCAncmVhY3Rpb25zJywgJ3JlYWN0aW9ucycsIG51bGxdXVxuICB9XG4gIC8qKlxuICAgKiBDb250ZXh0IG9mIHRoZSBvYmplY3QgZm9ybWF0dGluZyBwcm9jZXNzLlxuICAgKiBAaWdub3JlXG4gICAqL1xuXG59O1xuXG4vKlxuICogTWF0Y2hlcyBhIGNvbnRleHQgYWdhaW5zdCB0aGUgbGlzdCBvZiBibGFja2xpc3RlZCBwYXJlbnQgbGV2ZWxzLlxuICogQGlnbm9yZVxuICogQHBhcmFtIGNvbnRleHQgLSBUaGUgY29udGV4dCB0byBtYXRjaC5cbiAqIEByZXR1cm5zIC0gV2hldGhlciB0aGUgY29udGV4dCBpcyBibGFja2xpc3RlZCBmcm9tIGJlaW5nIGZvcm1hdHRlZC5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hCbGFja2xpc3QoY29udGV4dCkge1xuICBpZiAoIWNvbnRleHQgfHwgIXRyYW5zZm9ybXNCbGFja2xpc3RbY29udGV4dC5hcGlOYW1lXSB8fCAhdHJhbnNmb3Jtc0JsYWNrbGlzdFtjb250ZXh0LmFwaU5hbWVdW2NvbnRleHQubWV0aG9kXSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHBhcmVudExlbmd0aCA9IGNvbnRleHQucGFyZW50ID8gY29udGV4dC5wYXJlbnQubGVuZ3RoIDogMDtcblxuICBmb3IgKGNvbnN0IG1hdGNoZXIgb2YgdHJhbnNmb3Jtc0JsYWNrbGlzdFtjb250ZXh0LmFwaU5hbWVdW2NvbnRleHQubWV0aG9kXSkge1xuICAgIGlmIChtYXRjaGVyLmxlbmd0aCAhPT0gcGFyZW50TGVuZ3RoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIEl0ZXJhdGUgb3ZlciB0aGUgaXRlbXMgb2YgdGhlIG1hdGNoZXJcblxuXG4gICAgbGV0IG1pc21hdGNoID0gZmFsc2U7XG5cbiAgICBmb3IgKGNvbnN0IFttYXRjaGVySW5kZXgsIGRlc2lyZWRWYWx1ZV0gb2YgbWF0Y2hlci5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChkZXNpcmVkVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29udGV4dC5wYXJlbnQgPT09ICdvYmplY3QnICYmIGNvbnRleHQucGFyZW50W21hdGNoZXJJbmRleF0gIT09IGRlc2lyZWRWYWx1ZSkge1xuICAgICAgICBtaXNtYXRjaCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghbWlzbWF0Y2gpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qXG4gKiBBcHBlbmRzIGEgbmV3IGtleSB0byB0aGUgcGFyZW50cyBhcnJheSBpbiB0aGUgZm9ybWF0dGluZyBjb250ZXh0LlxuICogQGlnbm9yZVxuICogQHBhcmFtIGNvbnRleHQgLSBUaGUgY29udGV4dCB0byBjb3B5IGFuZCBtb2RpZnkuXG4gKiBAcGFyYW0ga2V5IC0gVGhlIGtleSB0byBhcHByZW50IHRvIHRoZSBwYXJlbnQgYXJyYXkuXG4gKiBAcmV0dXJucyAtIEEgbmV3IGNvbnRleHQuXG4gKi9cblxuXG5mdW5jdGlvbiBidWlsZENvbnRleHQoY29udGV4dCwga2V5KSB7XG4gIGlmICghY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG5cbiAgY29uc3QgY29waWVkQ29udGV4dCA9IHsgLi4uY29udGV4dFxuICB9O1xuXG4gIGlmICghY29waWVkQ29udGV4dC5wYXJlbnQpIHtcbiAgICBjb3BpZWRDb250ZXh0LnBhcmVudCA9IFtrZXldO1xuICB9IGVsc2Uge1xuICAgIGNvcGllZENvbnRleHQucGFyZW50ID0gY29waWVkQ29udGV4dC5wYXJlbnQuc2xpY2UoKTtcbiAgICBjb3BpZWRDb250ZXh0LnBhcmVudC5wdXNoKGtleSk7XG4gIH1cblxuICByZXR1cm4gY29waWVkQ29udGV4dDtcbn1cbi8qKlxuICBUYWtlcyBhIEtleWJhc2Ugb3V0cHV0IG9iamVjdCBhbmQgZm9ybWF0cyBpdCBpbiBhIG1vcmUgZGlnZXN0YWJsZSBKYXZhU2NyaXB0IHN0eWxlIGJ5IHVzaW5nIGNhbWVsQ2FzZSBpbnN0ZWFkIG9mIHNuYWtlX2Nhc2UuXG4gICogQGlnbm9yZVxuICAqIEBwYXJhbSBvYmogLSBUaGUgb2JqZWN0IHRvIGJlIGZvcm1hdHRlZC5cbiAgKiBAcGFyYW0gY29udGV4dCAtIEFuIG9wdGlvbmFsIGNvbnRleHQgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2FsbGVkIG1ldGhvZCByZXF1aXJlZCB0byBwZXJmb3JtIGJsYWNrbGlzdCBsb29rdXBzLlxuICAqIEByZXR1cm5zIC0gVGhlIG5ldywgZm9ybWF0dGVkIG9iamVjdC5cbiAgKiBAZXhhbXBsZVxuICAqIGNvbnN0IG91dHB1dFJlcyA9IGZvcm1hdEFQSU9iamVjdCh7dW5yZWFkX29ubHk6IHRydWV9KVxuICAqIGNvbnNvbGUubG9nKG91dHB1dFJlcykgLy8ge3VucmVhZE9ubHk6IHRydWV9XG4gKi9cblxuXG5mdW5jdGlvbiBmb3JtYXRBUElPYmplY3RPdXRwdXQob2JqLCBjb250ZXh0KSB7XG4gIGlmIChvYmogPT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvYmo7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5tYXAoKGl0ZW0sIGkpID0+IGZvcm1hdEFQSU9iamVjdE91dHB1dChpdGVtLCBidWlsZENvbnRleHQoY29udGV4dCwgaSkpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5yZWR1Y2UoKG5ld09iaiwga2V5KSA9PiB7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRLZXkgPSBtYXRjaEJsYWNrbGlzdChjb250ZXh0KSA/IGtleSA6IGNhbWVsQ2FzZShrZXkpO1xuXG4gICAgICBpZiAodHlwZW9mIG9ialtrZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4geyAuLi5uZXdPYmosXG4gICAgICAgICAgW2Zvcm1hdHRlZEtleV06IGZvcm1hdEFQSU9iamVjdE91dHB1dChvYmpba2V5XSwgYnVpbGRDb250ZXh0KGNvbnRleHQsIGtleSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IC4uLm5ld09iaixcbiAgICAgICAgW2Zvcm1hdHRlZEtleV06IG9ialtrZXldXG4gICAgICB9O1xuICAgIH0sIHt9KTtcbiAgfVxufVxuXG5jb25zdCBrZXliYXNlRXhlYyA9ICh3b3JraW5nRGlyLCBob21lRGlyLCBhcmdzLCBvcHRpb25zID0ge1xuICBzdGRpbkJ1ZmZlcjogdW5kZWZpbmVkLFxuICBvblN0ZE91dDogdW5kZWZpbmVkXG59KSA9PiB7XG4gIGNvbnN0IHJ1bkFyZ3MgPSBbLi4uYXJnc107XG5cbiAgaWYgKGhvbWVEaXIpIHtcbiAgICBydW5BcmdzLnVuc2hpZnQoJy0taG9tZScsIGhvbWVEaXIpO1xuICB9XG5cbiAgY29uc3QgY2hpbGQgPSBjaGlsZF9wcm9jZXNzLnNwYXduKHBhdGguam9pbih3b3JraW5nRGlyLCAna2V5YmFzZScpLCBydW5BcmdzKTtcbiAgY29uc3Qgc3RkT3V0QnVmZmVyID0gW107XG4gIGNvbnN0IHN0ZEVyckJ1ZmZlciA9IFtdO1xuXG4gIGlmIChvcHRpb25zLnN0ZGluQnVmZmVyKSB7XG4gICAgY2hpbGQuc3RkaW4ud3JpdGUob3B0aW9ucy5zdGRpbkJ1ZmZlcik7XG4gIH1cblxuICBjaGlsZC5zdGRpbi5lbmQoKTtcbiAgY29uc3QgbGluZVJlYWRlclN0ZG91dCA9IHJlYWRsaW5lLmNyZWF0ZUludGVyZmFjZSh7XG4gICAgaW5wdXQ6IGNoaWxkLnN0ZG91dFxuICB9KTsgLy8gVXNlIHJlYWRsaW5lIGludGVyZmFjZSB0byBwYXJzZSBlYWNoIGxpbmUgKFxcbiBzZXBhcmF0ZWQpIHdoZW4gcHJvdmlkZWRcbiAgLy8gd2l0aCBvblN0ZE91dCBjYWxsYmFja1xuXG4gIGlmIChvcHRpb25zLm9uU3RkT3V0KSB7XG4gICAgbGluZVJlYWRlclN0ZG91dC5vbignbGluZScsIG9wdGlvbnMub25TdGRPdXQpO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkLnN0ZG91dC5vbignZGF0YScsIGNodW5rID0+IHtcbiAgICAgIHN0ZE91dEJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICB9KTtcbiAgfSAvLyBDYXB0dXJlIFNUREVSUiBhbmQgdXNlIGFzIGVycm9yIG1lc3NhZ2UgaWYgbmVlZGVkXG5cblxuICBjaGlsZC5zdGRlcnIub24oJ2RhdGEnLCBjaHVuayA9PiB7XG4gICAgc3RkRXJyQnVmZmVyLnB1c2goY2h1bmspO1xuICB9KTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjaGlsZC5vbignY2xvc2UnLCBjb2RlID0+IHtcbiAgICAgIGxldCBmaW5hbFN0ZE91dCA9IG51bGw7IC8vIFBhc3MgYmFja1xuXG4gICAgICBpZiAoY29kZSkge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBCdWZmZXIuY29uY2F0KHN0ZEVyckJ1ZmZlcikudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHN0ZG91dCA9IEJ1ZmZlci5jb25jYXQoc3RkT3V0QnVmZmVyKS50b1N0cmluZygndXRmOCcpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZmluYWxTdGRPdXQgPSBvcHRpb25zLmpzb24gPyBKU09OLnBhcnNlKHN0ZG91dCkgOiBzdGRvdXQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZShmaW5hbFN0ZE91dCk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gcmFuZG9tVGVtcERpcigpIHtcbiAgY29uc3QgbmFtZSA9IGNyeXB0by5yYW5kb21CeXRlcygxNikudG9TdHJpbmcoJ2hleCcpO1xuICByZXR1cm4gcGF0aC5qb2luKG9zLnRtcGRpcigpLCBga2V5YmFzZV9ib3RfJHtuYW1lfWApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBybWRpclJlY3Vyc2l2ZShkaXJOYW1lKSB7XG4gIGNvbnN0IGZzTHN0YXQgPSB1dGlsLnByb21pc2lmeShmc19fZGVmYXVsdC5sc3RhdCk7XG4gIGNvbnN0IGZzVW5saW5rID0gdXRpbC5wcm9taXNpZnkoZnNfX2RlZmF1bHQudW5saW5rKTtcbiAgY29uc3QgZnNSbWRpciA9IHV0aWwucHJvbWlzaWZ5KGZzX19kZWZhdWx0LnJtZGlyKTtcbiAgY29uc3QgZnNSZWFkZGlyID0gdXRpbC5wcm9taXNpZnkoZnNfX2RlZmF1bHQucmVhZGRpcik7XG4gIGNvbnN0IGRpclN0YXQgPSBhd2FpdCBmc0xzdGF0KGRpck5hbWUpO1xuXG4gIGlmIChkaXJTdGF0KSB7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBhd2FpdCBmc1JlYWRkaXIoZGlyTmFtZSkpIHtcbiAgICAgIGNvbnN0IGVudHJ5UGF0aCA9IHBhdGguam9pbihkaXJOYW1lLCBlbnRyeSk7XG4gICAgICBjb25zdCBzdGF0ID0gYXdhaXQgZnNMc3RhdChlbnRyeVBhdGgpO1xuXG4gICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIGF3YWl0IHJtZGlyUmVjdXJzaXZlKGVudHJ5UGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBmc1VubGluayhlbnRyeVBhdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IGZzUm1kaXIoZGlyTmFtZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBVc2VmdWwgaW5mb3JtYXRpb24gbGlrZSB0aGUgdXNlcm5hbWUsIGRldmljZSwgaG9tZSBkaXJlY3Rvcnkgb2YgeW91ciBib3QgYW5kXG4gKiBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIHsgdXNlcm5hbWUsIGRldmljZW5hbWUsIGhvbWVEaXIgfSBmcm9tIGBrZXliYXNlIHN0YXR1cyAtLWpzb25gLlxuICogQGlnbm9yZVxuICogQHBhcmFtIHdvcmtpbmdEaXIgLSB0aGUgZGlyZWN0b3J5IGNvbnRhaW5pbmcgdGhlIGJpbmFyeSwgYWNjb3JkaW5nIHRvIHRvcCBsZXZlbCBCb3RcbiAqIEBwYXJhbSBob21lRGlyIC0gVGhlIGhvbWUgZGlyZWN0b3J5IG9mIHRoZSBzZXJ2aWNlIHlvdSB3YW50IHRvIGZldGNoIHRoZSBzdGF0dXMgZnJvbS5cbiAqIEBleGFtcGxlXG4gKiBrZXliYXNlU3RhdHVzKCcvbXkvZGlyJykudGhlbihzdGF0dXMgPT4gY29uc29sZS5sb2coc3RhdHVzLnVzZXJuYW1lKSlcbiAqL1xuYXN5bmMgZnVuY3Rpb24ga2V5YmFzZVN0YXR1cyh3b3JraW5nRGlyLCBob21lRGlyKSB7XG4gIGNvbnN0IHN0YXR1cyA9IGF3YWl0IGtleWJhc2VFeGVjKHdvcmtpbmdEaXIsIGhvbWVEaXIsIFsnc3RhdHVzJywgJy0tanNvbiddLCB7XG4gICAganNvbjogdHJ1ZVxuICB9KTtcblxuICBpZiAoc3RhdHVzICYmIHN0YXR1cy5Vc2VybmFtZSAmJiBzdGF0dXMuRGV2aWNlICYmIHN0YXR1cy5EZXZpY2UubmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICB1c2VybmFtZTogc3RhdHVzLlVzZXJuYW1lLFxuICAgICAgZGV2aWNlbmFtZTogc3RhdHVzLkRldmljZS5uYW1lLFxuICAgICAgaG9tZURpclxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgdXNlcm5hbWUgYW5kIGRldmljZSBuYW1lLicpO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGtleWJhc2Ugc2VydmljZSBpcyBydW5uaW5nIGJ5IGNhbGxpbmcgYGtleWJhc2Ugc3RhdHVzIC0tanNvbmAuXG4gKiBAaWdub3JlXG4gKiBAcGFyYW0gd29ya2luZ0RpciAtIHRoZSBkaXJlY3RvcnkgY29udGFpbmluZyB0aGUgYmluYXJ5LCBhY2NvcmRpbmcgdG8gdG9wIGxldmVsIEJvdFxuICogQHBhcmFtIGhvbWVEaXIgLSBUaGUgaG9tZSBkaXJlY3Rvcnkgb2YgdGhlIHNlcnZpY2UgeW91IHdhbnQgdG8gZmV0Y2ggdGhlIHN0YXR1cyBmcm9tLlxuICogQGV4YW1wbGVcbiAqIHBpbmdLZXliYXNlU2VydmljZSgnL215L2RpcicpLnRoZW4oc3RhdHVzID0+IGNvbnNvbGUubG9nKFwic2VydmljZSBydW5uaW5nXCIsIHN0YXR1cykpXG4gKi9cblxuYXN5bmMgZnVuY3Rpb24gcGluZ0tleWJhc2VTZXJ2aWNlKHdvcmtpbmdEaXIsIGhvbWVEaXIpIHtcbiAgLy8gVE9ETzogdXNlIGEgZmFzdGVyIHRlY2huaXF1ZSB3aGVuIGNvcmUgcmVsZWFzZXMgb25lXG4gIHRyeSB7XG4gICAgYXdhaXQga2V5YmFzZUV4ZWMod29ya2luZ0RpciwgaG9tZURpciwgWyctLW5vLWF1dG8tZm9yaycsICdzdGF0dXMnLCAnLS1qc29uJ10sIHtcbiAgICAgIGpzb246IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmNvbnN0IGFFeGVjID0gdXRpbC5wcm9taXNpZnkoY2hpbGRfcHJvY2Vzcy5leGVjKTtcbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbCBwYXRoIHRvIHRoZSBrZXliYXNlIGJpbmFyeSBvciB0aHJvd3MgYW4gZXJyb3JcbiAqIEBpZ25vcmVcbiAqIEBleGFtcGxlXG4gKiB3aGljaEtleWJhc2UoKS50aGVuKChwYXRoKSA9PiBjb25zb2xlLmxvZyhwYXRoKSlcbiAqL1xuXG5hc3luYyBmdW5jdGlvbiB3aGljaEtleWJhc2UoKSB7XG4gIGNvbnN0IHtcbiAgICBzdGRvdXRcbiAgfSA9IGF3YWl0IGFFeGVjKCd3aGljaCBrZXliYXNlJyk7XG5cbiAgaWYgKCFzdGRvdXQgfHwgIXN0ZG91dC50cmltKCkubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBrZXliYXNlIGJpbmFyeScpO1xuICB9XG5cbiAgY29uc3QgcmVzID0gc3Rkb3V0LnRyaW0oKTtcbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gdGltZW91dCh0aW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9LCB0aW1lKTtcbiAgfSk7XG59XG5cbmNsYXNzIFNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcih3b3JraW5nRGlyKSB7XG4gICAgdGhpcy53b3JraW5nRGlyID0gd29ya2luZ0RpcjtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy52ZXJib3NlID0gZmFsc2U7XG4gICAgdGhpcy5ib3RMaXRlID0gdHJ1ZTtcbiAgICB0aGlzLmRpc2FibGVUeXBpbmcgPSB0cnVlO1xuICB9XG5cbiAgYXN5bmMgaW5pdCh1c2VybmFtZSwgcGFwZXJrZXksIG9wdGlvbnMpIHtcbiAgICBpZiAoIXVzZXJuYW1lIHx8IHR5cGVvZiB1c2VybmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUGxlYXNlIHByb3ZpZGUgYSB1c2VybmFtZSB0byBpbml0aWFsaXplIHRoZSBib3QuIEdvdDogJHtKU09OLnN0cmluZ2lmeSh1c2VybmFtZSl9YCk7XG4gICAgfVxuXG4gICAgaWYgKCFwYXBlcmtleSB8fCB0eXBlb2YgcGFwZXJrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBEb24ndCB3YW50IHRvIGFjY2lkZW50YWxseSBwcmludCB0aGUgcGFwZXJrZXkgdG8gU1RERVJSLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQbGVhc2UgcHJvdmlkZSBhIHBhcGVya2V5IHRvIGluaXRpYWxpemUgdGhlIGJvdC5gKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaW5pdGlhbGl6ZSBhbiBhbHJlYWR5IGluaXRpYWxpemVkIGJvdC4nKTtcbiAgICB9XG5cbiAgICB0aGlzLmhvbWVEaXIgPSB0aGlzLndvcmtpbmdEaXI7XG4gICAgdGhpcy5zZXJ2aWNlTG9nRmlsZSA9IHBhdGguam9pbih0aGlzLmhvbWVEaXIsICdMaWJyYXJ5JywgJ0xvZ3MnLCAna2V5YmFzZS5zZXJ2aWNlLmxvZycpO1xuICAgIHRoaXMuYm90TGl0ZSA9IG9wdGlvbnMgPyBCb29sZWFuKHR5cGVvZiBvcHRpb25zLmJvdExpdGUgIT09ICdib29sZWFuJyB8fCBvcHRpb25zLmJvdExpdGUpIDogdHJ1ZTtcbiAgICB0aGlzLmRpc2FibGVUeXBpbmcgPSBvcHRpb25zID8gQm9vbGVhbih0eXBlb2Ygb3B0aW9ucy5kaXNhYmxlVHlwaW5nICE9PSAnYm9vbGVhbicgfHwgb3B0aW9ucy5kaXNhYmxlVHlwaW5nKSA6IHRydWU7IC8vIFVubGlrZSB3aXRoIGNsaWVudHMgd2UgZG9uJ3QgbmVlZCB0byBzdG9yZSB0aGUgc2VydmljZSwgc2luY2UgaXQgc2h1dHMgZG93biB3aXRoIGN0cmwgc3RvcFxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnR1cFNlcnZpY2UoKTtcbiAgICAgIGF3YWl0IGtleWJhc2VFeGVjKHRoaXMud29ya2luZ0RpciwgdGhpcy5ob21lRGlyLCBbJ29uZXNob3QnLCAnLS11c2VybmFtZScsIHVzZXJuYW1lXSwge1xuICAgICAgICBzdGRpbkJ1ZmZlcjogcGFwZXJrZXlcbiAgICAgIH0pOyAvLyBTZXQgdGhlIHR5cGluZyBub3RpZmljYXRpb24gc2V0dGluZ3MgZm9yIHRoZSBib3RcblxuICAgICAgYXdhaXQga2V5YmFzZUV4ZWModGhpcy53b3JraW5nRGlyLCB0aGlzLmhvbWVEaXIsIFsnY2hhdCcsICdub3RpZmljYXRpb24tc2V0dGluZ3MnLCAnZGlzYWJsZS10eXBpbmcnLCB0aGlzLmRpc2FibGVUeXBpbmcudG9TdHJpbmcoKV0pO1xuICAgICAgY29uc3QgY3VycmVudEluZm8gPSBhd2FpdCBrZXliYXNlU3RhdHVzKHRoaXMud29ya2luZ0RpciwgdGhpcy5ob21lRGlyKTtcblxuICAgICAgaWYgKGN1cnJlbnRJbmZvICYmIGN1cnJlbnRJbmZvLnVzZXJuYW1lICYmIGN1cnJlbnRJbmZvLmRldmljZW5hbWUpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9ICdwYXBlcmtleSc7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSBjdXJyZW50SW5mby51c2VybmFtZTtcbiAgICAgICAgdGhpcy5kZXZpY2VuYW1lID0gY3VycmVudEluZm8uZGV2aWNlbmFtZTtcbiAgICAgICAgdGhpcy52ZXJib3NlID0gb3B0aW9ucyA/IEJvb2xlYW4ob3B0aW9ucy52ZXJib3NlKSA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy51c2VybmFtZSAhPT0gdXNlcm5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBzZXJ2aWNlLicpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgYXdhaXQgdGhpcy5fa2lsbEN1c3RvbVNlcnZpY2UoKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBpbml0RnJvbVJ1bm5pbmdTZXJ2aWNlKGhvbWVEaXIsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaW5pdGlhbGl6ZSBhbiBhbHJlYWR5IGluaXRpYWxpemVkIGJvdC4nKTtcbiAgICB9XG5cbiAgICB0aGlzLmhvbWVEaXIgPSBob21lRGlyO1xuICAgIGNvbnN0IGN1cnJlbnRJbmZvID0gYXdhaXQga2V5YmFzZVN0YXR1cyh0aGlzLndvcmtpbmdEaXIsIHRoaXMuaG9tZURpcik7XG5cbiAgICBpZiAoY3VycmVudEluZm8gJiYgY3VycmVudEluZm8udXNlcm5hbWUgJiYgY3VycmVudEluZm8uZGV2aWNlbmFtZSkge1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9ICdydW5uaW5nU2VydmljZSc7XG4gICAgICB0aGlzLnVzZXJuYW1lID0gY3VycmVudEluZm8udXNlcm5hbWU7XG4gICAgICB0aGlzLmRldmljZW5hbWUgPSBjdXJyZW50SW5mby5kZXZpY2VuYW1lO1xuICAgICAgdGhpcy52ZXJib3NlID0gb3B0aW9ucyA/IEJvb2xlYW4ob3B0aW9ucy52ZXJib3NlKSA6IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9raWxsQ3VzdG9tU2VydmljZSgpIHtcbiAgICAvLyB0aGVzZSAyIGNvbW1hbmRzIG1pZ2h0IGJlIHVubmVjZXNzYXJ5OyBzaW5jZSB0aGUgc2VydmljZSB3YXMgYHNwYXduYGVkIG5vdCBkZXRhY2hlZFxuICAgIC8vIHRoZXkgd2lsbCBhbHNvIHNodXRkb3duIHZpYSBTSUdJTlQuIFdlIGRvbid0IHdhbnQgdG8gbWFrZSBzZXJ2aWNlIGRldGFjaGVkIGJlY2F1c2UgaXQnZCBiZSBuaWNlIGZvclxuICAgIC8vIHRoZW0gdG8gYXV0by1zaHV0ZG93biBpZiB0aGUgdXNlciBraWxscyB0aGUgcHJvY2Vzc1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBrZXliYXNlRXhlYyh0aGlzLndvcmtpbmdEaXIsIHRoaXMuaG9tZURpciwgWydsb2dvdXQnXSk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBrZXliYXNlRXhlYyh0aGlzLndvcmtpbmdEaXIsIHRoaXMuaG9tZURpciwgWydjdGwnLCAnc3RvcCcsICctLXNodXRkb3duJ10pO1xuICAgIH0gY2F0Y2ggKGUpIHt9IC8vIHdhaXQgdW50aWwgdGhlIHByb2Nlc3MgcXVpdHMgYnkgd2F0Y2hpbmcgdGhlIHJ1bm5pbmcgcHJvcGVydHlcblxuXG4gICAgbGV0IGkgPSAwO1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGF3YWl0IHRpbWVvdXQoMTAwKTtcblxuICAgICAgaWYgKCF0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmICgrK2kgPj0gMTAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHNlcnZpY2UgZGlkbid0IGZpbmlzaCBzaHV0dGluZyBkb3duIGluIHRpbWUgKCR7dGhpcy53b3JraW5nRGlyfSlgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyBkZWluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZWluaXRpYWxpemUgYW4gdW5pbml0aWFsaXplZCBib3QuJyk7XG4gICAgfSAvLyBJZiB3ZSBpbml0IHRoZSBib3QgdXNpbmcgcGFwZXJrZXkgY3JlZGVudGlhbHMsIHRoZW4gd2Ugd2FudCB0byBzdG9wIHRoZSBzZXJ2aWNlIGFuZCByZW1vdmUgb3VyIGdlbmVyYXRlZCBkaXJlY3RvcnkuXG5cblxuICAgIGlmICh0aGlzLmluaXRpYWxpemVkID09PSAncGFwZXJrZXknKSB7XG4gICAgICBhd2FpdCB0aGlzLl9raWxsQ3VzdG9tU2VydmljZSgpO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIG15SW5mbygpIHtcbiAgICBpZiAodGhpcy51c2VybmFtZSAmJiB0aGlzLmRldmljZW5hbWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lLFxuICAgICAgICBkZXZpY2VuYW1lOiB0aGlzLmRldmljZW5hbWUsXG4gICAgICAgIGhvbWVEaXI6IHRoaXMuaG9tZURpciA/IHRoaXMuaG9tZURpciA6IHVuZGVmaW5lZCxcbiAgICAgICAgYm90TGl0ZTogdGhpcy5ib3RMaXRlLFxuICAgICAgICBkaXNhYmxlVHlwaW5nOiB0aGlzLmRpc2FibGVUeXBpbmdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEBpZ25vcmVcbiAgICogVGhpcyBpcyBhIGJpdCBkaWZmZXJlbnQgZnJvbSBub3JtYWwga2V5YmFzZUV4ZWNzIGFuZCBpcyB1bmlxdWUgdG8gdGhlIHNlcnZpY2VcbiAgICogc3RhcnRpbmcgdXBcbiAgICogQGV4YW1wbGVcbiAgICogc2VydmljZS5zdGFydHVwU2VydmljZSgpXG4gICAqL1xuXG5cbiAgYXN5bmMgc3RhcnR1cFNlcnZpY2UoKSB7XG4gICAgY29uc3QgYXJncyA9IFsnc2VydmljZSddO1xuXG4gICAgaWYgKHRoaXMuaG9tZURpcikge1xuICAgICAgYXJncy51bnNoaWZ0KCctLWhvbWUnLCB0aGlzLmhvbWVEaXIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNlcnZpY2VMb2dGaWxlKSB7XG4gICAgICBhcmdzLnVuc2hpZnQoJy1kJywgJy0tbG9nLWZpbGUnLCB0aGlzLnNlcnZpY2VMb2dGaWxlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5ib3RMaXRlKSB7XG4gICAgICBhcmdzLnVuc2hpZnQoJy0tZW5hYmxlLWJvdC1saXRlLW1vZGUnKTtcbiAgICB9XG5cbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkX3Byb2Nlc3Muc3Bhd24oJ2tleWJhc2UnLCBhcmdzLCB7XG4gICAgICBlbnY6IHByb2Nlc3MuZW52XG4gICAgfSk7IC8vIGtlZXAgdHJhY2sgb2YgdGhlIHN1YnByb2Nlc3MnIHN0YXRlXG5cbiAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuICAgIGNoaWxkLm9uKCdleGl0JywgY29kZSA9PiB7XG4gICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY2hpbGQub24oJ2Nsb3NlJywgY29kZSA9PiB7XG4gICAgICAgIC8vIGFueSBjb2RlIGhlcmUgaW5jbHVkaW5nIDAgaXMgYmFkIGhlcmUsIGlmIGl0IGhhcHBlbnMgYmVmb3JlIHJlc29sdmVcbiAgICAgICAgLy8sIHNpbmNlIHRoaXMgc2VydmljZSBzaG91bGQgc3RheSBydW5uaW5nXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYGtleWJhc2Ugc2VydmljZSBleGl0ZWQgd2l0aCBjb2RlICR7Y29kZX0gKCR7dGhpcy53b3JraW5nRGlyfSlgKSk7XG4gICAgICB9KTsgLy8gV2FpdCBmb3IgdGhlIHNlcnZpY2UgdG8gc3RhcnQgdXAgLSBnaXZlIGl0IDEwcy5cblxuICAgICAgbGV0IGkgPSAwO1xuXG4gICAgICB3aGlsZSAoIShhd2FpdCBwaW5nS2V5YmFzZVNlcnZpY2UodGhpcy53b3JraW5nRGlyLCB0aGlzLmhvbWVEaXIpKSkge1xuICAgICAgICBhd2FpdCB0aW1lb3V0KDEwMCk7XG5cbiAgICAgICAgaWYgKCsraSA+PSAxMDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBzdGFydCB1cCBzZXJ2aWNlIGZhc3QgZW5vdWdoXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfVxuXG59XG5cbmNvbnN0IEFQSV9WRVJTSU9OUyA9IHtcbiAgY2hhdDogMSxcbiAgdGVhbTogMSxcbiAgd2FsbGV0OiAxXG59O1xuXG4vKipcbiAqIEEgQ2xpZW50IGJhc2UuXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIENsaWVudEJhc2Uge1xuICBjb25zdHJ1Y3Rvcih3b3JraW5nRGlyKSB7XG4gICAgdGhpcy5fd29ya2luZ0RpciA9IHdvcmtpbmdEaXI7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMudmVyYm9zZSA9IGZhbHNlO1xuICAgIHRoaXMuc3Bhd25lZFByb2Nlc3NlcyA9IFtdO1xuICB9XG5cbiAgYXN5bmMgX2luaXQoaG9tZURpciwgb3B0aW9ucykge1xuICAgIGNvbnN0IGluaXRCb3RJbmZvID0gYXdhaXQga2V5YmFzZVN0YXR1cyh0aGlzLl93b3JraW5nRGlyLCBob21lRGlyKTtcbiAgICB0aGlzLmhvbWVEaXIgPSBob21lRGlyO1xuICAgIHRoaXMudXNlcm5hbWUgPSBpbml0Qm90SW5mby51c2VybmFtZTtcbiAgICB0aGlzLmRldmljZW5hbWUgPSBpbml0Qm90SW5mby5kZXZpY2VuYW1lO1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG5cbiAgYXN5bmMgX2RlaW5pdCgpIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuc3Bhd25lZFByb2Nlc3Nlcykge1xuICAgICAgY2hpbGQua2lsbCgpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9ydW5BcGlDb21tYW5kKGFyZykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBhcmcub3B0aW9ucyA/IGZvcm1hdEFQSU9iamVjdElucHV0KGFyZy5vcHRpb25zLCBhcmcuYXBpTmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICBtZXRob2Q6IGFyZy5tZXRob2QsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgdmVyc2lvbjogQVBJX1ZFUlNJT05TW2FyZy5hcGlOYW1lXSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaW5wdXRTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgY29uc3Qgc2l6ZSA9IGlucHV0U3RyaW5nLmxlbmd0aDtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBrZXliYXNlRXhlYyh0aGlzLl93b3JraW5nRGlyLCB0aGlzLmhvbWVEaXIsIFthcmcuYXBpTmFtZSwgJ2FwaSddLCB7XG4gICAgICBzdGRpbkJ1ZmZlcjogQnVmZmVyLmFsbG9jKHNpemUsIGlucHV0U3RyaW5nLCAndXRmOCcpLFxuICAgICAganNvbjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgaWYgKG91dHB1dC5oYXNPd25Qcm9wZXJ0eSgnZXJyb3InKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG91dHB1dC5lcnJvci5tZXNzYWdlKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXMgPSBmb3JtYXRBUElPYmplY3RPdXRwdXQob3V0cHV0LnJlc3VsdCwge1xuICAgICAgYXBpTmFtZTogYXJnLmFwaU5hbWUsXG4gICAgICBtZXRob2Q6IGFyZy5tZXRob2RcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgYXN5bmMgX2d1YXJkSW5pdGlhbGl6ZWQoKSB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjbGllbnQgaXMgbm90IHlldCBpbml0aWFsaXplZC4nKTtcbiAgICB9XG4gIH1cblxuICBfcGF0aFRvS2V5YmFzZUJpbmFyeSgpIHtcbiAgICByZXR1cm4gcGF0aC5qb2luKHRoaXMuX3dvcmtpbmdEaXIsICdrZXliYXNlJyk7XG4gIH1cblxufVxuXG4vKiogVGhlIGNoYXQgbW9kdWxlIG9mIHlvdXIgS2V5YmFzZSBib3QuIEZvciBtb3JlIGluZm8gYWJvdXQgdGhlIEFQSSB0aGlzIG1vZHVsZSB1c2VzLCB5b3UgbWF5IHdhbnQgdG8gY2hlY2sgb3V0IGBrZXliYXNlIGNoYXQgYXBpYC4gKi9cbmNsYXNzIENoYXQgZXh0ZW5kcyBDbGllbnRCYXNlIHtcbiAgLyoqXG4gICAqIExpc3RzIHlvdXIgY2hhdHMsIHdpdGggaW5mbyBvbiB3aGljaCBvbmVzIGhhdmUgdW5yZWFkIG1lc3NhZ2VzLlxuICAgKiBAbWVtYmVyb2YgQ2hhdFxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCBvZiBvcHRpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgbWV0aG9kLlxuICAgKiBAcmV0dXJucyAtIEFuIGFycmF5IG9mIGNoYXQgY29udmVyc2F0aW9ucy4gSWYgdGhlcmUgYXJlIG5vIGNvbnZlcnNhdGlvbnMsIHRoZSBhcnJheSBpcyBlbXB0eS5cbiAgICogQGV4YW1wbGVcbiAgICogYm90LmNoYXQubGlzdCh7dW5yZWFkT25seTogdHJ1ZX0pLnRoZW4oY2hhdENvbnZlcnNhdGlvbnMgPT4gY29uc29sZS5sb2coY2hhdENvbnZlcnNhdGlvbnMpKVxuICAgKi9cbiAgYXN5bmMgbGlzdChvcHRpb25zKSB7XG4gICAgYXdhaXQgdGhpcy5fZ3VhcmRJbml0aWFsaXplZCgpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuX3J1bkFwaUNvbW1hbmQoe1xuICAgICAgYXBpTmFtZTogJ2NoYXQnLFxuICAgICAgbWV0aG9kOiAnbGlzdCcsXG4gICAgICBvcHRpb25zXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdLZXliYXNlIGNoYXQgbGlzdCByZXR1cm5lZCBub3RoaW5nLicpO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuY29udmVyc2F0aW9ucyB8fCBbXTtcbiAgfVxuICAvKipcbiAgICogTGlzdHMgY29udmVyc2F0aW9uIGNoYW5uZWxzIGluIGEgdGVhbVxuICAgKiBAbWVtYmVyb2YgQ2hhdFxuICAgKiBAcGFyYW0gbmFtZSAtIE5hbWUgb2YgdGhlIHRlYW1cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgb2Ygb3B0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIG1ldGhvZC5cbiAgICogQHJldHVybnMgLSBBbiBhcnJheSBvZiBjaGF0IGNvbnZlcnNhdGlvbnMuIElmIHRoZXJlIGFyZSBubyBjb252ZXJzYXRpb25zLCB0aGUgYXJyYXkgaXMgZW1wdHkuXG4gICAqIEBleGFtcGxlXG4gICAqIGJvdC5jaGF0Lmxpc3RDaGFubmVscygndGVhbV9uYW1lJykudGhlbihjaGF0Q29udmVyc2F0aW9ucyA9PiBjb25zb2xlLmxvZyhjaGF0Q29udmVyc2F0aW9ucykpXG4gICAqL1xuXG5cbiAgYXN5bmMgbGlzdENoYW5uZWxzKG5hbWUsIG9wdGlvbnMpIHtcbiAgICBhd2FpdCB0aGlzLl9ndWFyZEluaXRpYWxpemVkKCk7XG4gICAgY29uc3Qgb3B0aW9uc1dpdGhEZWZhdWx0cyA9IHsgLi4ub3B0aW9ucyxcbiAgICAgIG5hbWUsXG4gICAgICBtZW1iZXJzVHlwZTogb3B0aW9ucyAmJiBvcHRpb25zLm1lbWJlcnNUeXBlID8gb3B0aW9ucy5tZW1iZXJzVHlwZSA6ICd0ZWFtJ1xuICAgIH07XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcnVuQXBpQ29tbWFuZCh7XG4gICAgICBhcGlOYW1lOiAnY2hhdCcsXG4gICAgICBtZXRob2Q6ICdsaXN0Y29udnNvbm5hbWUnLFxuICAgICAgb3B0aW9uczogb3B0aW9uc1dpdGhEZWZhdWx0c1xuICAgIH0pO1xuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5YmFzZSBjaGF0IGxpc3QgY29udnMgb24gbmFtZSByZXR1cm5lZCBub3RoaW5nLicpO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuY29udmVyc2F0aW9ucyB8fCBbXTtcbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIG1lc3NhZ2VzIGluIGEgY2hhbm5lbC4gWW91IGNhbiByZWFkIHdpdGggb3Igd2l0aG91dCBtYXJraW5nIGFzIHJlYWQuXG4gICAqIEBtZW1iZXJvZiBDaGF0XG4gICAqIEBwYXJhbSBjaGFubmVsIC0gVGhlIGNoYXQgY2hhbm5lbCB0byByZWFkIG1lc3NhZ2VzIGluLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCBvZiBvcHRpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgbWV0aG9kLlxuICAgKiBAcmV0dXJucyAtIEEgc3VtbWFyeSBvZiBkYXRhIGFib3V0IGEgbWVzc2FnZSwgaW5jbHVkaW5nIHdobyBzZW5kIGl0LCB3aGVuLCB0aGUgY29udGVudCBvZiB0aGUgbWVzc2FnZSwgZXRjLiBJZiB0aGVyZSBhcmUgbm8gbWVzc2FnZXMgaW4geW91ciBjaGFubmVsLCB0aGVuIGFuIGVycm9yIGlzIHRocm93bi5cbiAgICogQGV4YW1wbGVcbiAgICogYWxpY2UuY2hhdC5yZWFkKGNoYW5uZWwpLnRoZW4obWVzc2FnZXMgPT4gY29uc29sZS5sb2cobWVzc2FnZXMpKVxuICAgKi9cblxuXG4gIGFzeW5jIHJlYWQoY2hhbm5lbCwgb3B0aW9ucykge1xuICAgIGF3YWl0IHRoaXMuX2d1YXJkSW5pdGlhbGl6ZWQoKTtcbiAgICBjb25zdCBvcHRpb25zV2l0aERlZmF1bHRzID0geyAuLi5vcHRpb25zLFxuICAgICAgY2hhbm5lbCxcbiAgICAgIHBlZWs6IG9wdGlvbnMgJiYgb3B0aW9ucy5wZWVrID8gb3B0aW9ucy5wZWVrIDogZmFsc2UsXG4gICAgICB1bnJlYWRPbmx5OiBvcHRpb25zICYmIG9wdGlvbnMudW5yZWFkT25seSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy51bnJlYWRPbmx5IDogZmFsc2VcbiAgICB9O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuX3J1bkFwaUNvbW1hbmQoe1xuICAgICAgYXBpTmFtZTogJ2NoYXQnLFxuICAgICAgbWV0aG9kOiAncmVhZCcsXG4gICAgICBvcHRpb25zOiBvcHRpb25zV2l0aERlZmF1bHRzXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdLZXliYXNlIGNoYXQgcmVhZCByZXR1cm5lZCBub3RoaW5nLicpO1xuICAgIH0gLy8gUGFnaW5hdGlvbiBnZXRzIHBhc3NlZCBhcy1pcywgd2hpbGUgdGhlIG1lc3NhZ2VzIGdldCBjbGVhbmVkIHVwXG5cblxuICAgIHJldHVybiB7XG4gICAgICBwYWdpbmF0aW9uOiByZXMucGFnaW5hdGlvbixcbiAgICAgIG1lc3NhZ2VzOiByZXMubWVzc2FnZXMubWFwKG1lc3NhZ2UgPT4gbWVzc2FnZS5tc2cpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSm9pbnMgYSB0ZWFtIGNvbnZlcnNhdGlvbi5cbiAgICogQHBhcmFtIGNoYW5uZWwgLSBUaGUgdGVhbSBjaGF0IGNoYW5uZWwgdG8gam9pbi5cbiAgICogQGV4YW1wbGVcbiAgICogYm90LmNoYXQubGlzdENvbnZzT25OYW1lKCd0ZWFtX25hbWUnKS50aGVuKGFzeW5jIHRlYW1Db252ZXJzYXRpb25zID0+IHtcbiAgICogIGZvciAoY29uc3QgY29udmVyc2F0aW9uIG9mIHRlYW1Db252ZXJzYXRpb25zKSB7XG4gICAqICAgIGlmIChjb252ZXJzYXRpb24ubWVtYmVyU3RhdHVzICE9PSAnYWN0aXZlJykge1xuICAgKiAgICAgIGF3YWl0IGJvdC5jaGF0LmpvaW4oY29udmVyc2F0aW9uLmNoYW5uZWwpXG4gICAqICAgICAgY29uc29sZS5sb2coJ0pvaW5lZCB0ZWFtIGNoYW5uZWwnLCBjb252ZXJzYXRpb24uY2hhbm5lbClcbiAgICogICAgfVxuICAgKiAgfVxuICAgKiB9KVxuICAgKi9cblxuXG4gIGFzeW5jIGpvaW5DaGFubmVsKGNoYW5uZWwpIHtcbiAgICBhd2FpdCB0aGlzLl9ndWFyZEluaXRpYWxpemVkKCk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcnVuQXBpQ29tbWFuZCh7XG4gICAgICBhcGlOYW1lOiAnY2hhdCcsXG4gICAgICBtZXRob2Q6ICdqb2luJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgY2hhbm5lbFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5YmFzZSBjaGF0IGpvaW4gcmV0dXJuZWQgbm90aGluZycpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogTGVhdmVzIGEgdGVhbSBjb252ZXJzYXRpb24uXG4gICAqIEBwYXJhbSBjaGFubmVsIC0gVGhlIHRlYW0gY2hhdCBjaGFubmVsIHRvIGxlYXZlLlxuICAgKiBAZXhhbXBsZVxuICAgKiBib3QuY2hhdC5saXN0Q29udnNPbk5hbWUoJ3RlYW1fbmFtZScpLnRoZW4oYXN5bmMgdGVhbUNvbnZlcnNhdGlvbnMgPT4ge1xuICAgKiAgZm9yIChjb25zdCBjb252ZXJzYXRpb24gb2YgdGVhbUNvbnZlcnNhdGlvbnMpIHtcbiAgICogICAgaWYgKGNvbnZlcnNhdGlvbi5tZW1iZXJTdGF0dXMgPT09ICdhY3RpdmUnKSB7XG4gICAqICAgICAgYXdhaXQgYm90LmNoYXQubGVhdmUoY29udmVyc2F0aW9uLmNoYW5uZWwpXG4gICAqICAgICAgY29uc29sZS5sb2coJ0xlZnQgdGVhbSBjaGFubmVsJywgY29udmVyc2F0aW9uLmNoYW5uZWwpXG4gICAqICAgIH1cbiAgICogIH1cbiAgICogfSlcbiAgICovXG5cblxuICBhc3luYyBsZWF2ZUNoYW5uZWwoY2hhbm5lbCkge1xuICAgIGF3YWl0IHRoaXMuX2d1YXJkSW5pdGlhbGl6ZWQoKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9ydW5BcGlDb21tYW5kKHtcbiAgICAgIGFwaU5hbWU6ICdjaGF0JyxcbiAgICAgIG1ldGhvZDogJ2xlYXZlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgY2hhbm5lbFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5YmFzZSBjaGF0IGxlYXZlIHJldHVybmVkIG5vdGhpbmcnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNlbmQgYSBtZXNzYWdlIHRvIGEgY2VydGFpbiBjaGFubmVsLlxuICAgKiBAbWVtYmVyb2YgQ2hhdFxuICAgKiBAcGFyYW0gY2hhbm5lbCAtIFRoZSBjaGF0IGNoYW5uZWwgdG8gc2VuZCB0aGUgbWVzc2FnZSBpbi5cbiAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgY2hhdCBtZXNzYWdlIHRvIHNlbmQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IG9mIG9wdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSBtZXRob2QuXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGNoYW5uZWwgPSB7bmFtZTogJ2tib3QsJyArIGJvdC5teUluZm8oKS51c2VybmFtZSwgcHVibGljOiBmYWxzZSwgdG9waWNUeXBlOiAnY2hhdCd9XG4gICAqIGNvbnN0IG1lc3NhZ2UgPSB7Ym9keTogJ0hlbGxvIGtib3QhJ31cbiAgICogYm90LmNoYXQuc2VuZChjaGFubmVsLCBtZXNzYWdlKS50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdtZXNzYWdlIHNlbnQhJykpXG4gICAqL1xuXG5cbiAgYXN5bmMgc2VuZChjaGFubmVsLCBtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgYXdhaXQgdGhpcy5fZ3VhcmRJbml0aWFsaXplZCgpO1xuICAgIGNvbnN0IGFyZ3MgPSB7IC4uLm9wdGlvbnMsXG4gICAgICBjaGFubmVsLFxuICAgICAgbWVzc2FnZVxuICAgIH07XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcnVuQXBpQ29tbWFuZCh7XG4gICAgICBhcGlOYW1lOiAnY2hhdCcsXG4gICAgICBtZXRob2Q6ICdzZW5kJyxcbiAgICAgIG9wdGlvbnM6IGFyZ3NcbiAgICB9KTtcblxuICAgIGlmICghcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0tleWJhc2UgY2hhdCBzZW5kIHJldHVybmVkIG5vdGhpbmcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHJlcy5pZFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYmxhbmsgY29udmVyc2F0aW9uLlxuICAgKiBAbWVtYmVyb2YgQ2hhdFxuICAgKiBAcGFyYW0gY2hhbm5lbCAtIFRoZSBjaGF0IGNoYW5uZWwgdG8gY3JlYXRlLlxuICAgKiBAZXhhbXBsZVxuICAgKiBib3QuY2hhdC5jcmVhdGVDaGFubmVsKGNoYW5uZWwpLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ2NvbnZlcnNhdGlvbiBjcmVhdGVkJykpXG4gICAqL1xuXG5cbiAgYXN5bmMgY3JlYXRlQ2hhbm5lbChjaGFubmVsKSB7XG4gICAgYXdhaXQgdGhpcy5fZ3VhcmRJbml0aWFsaXplZCgpO1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBjaGFubmVsXG4gICAgfTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9ydW5BcGlDb21tYW5kKHtcbiAgICAgIGFwaU5hbWU6ICdjaGF0JyxcbiAgICAgIG1ldGhvZDogJ25ld2NvbnYnLFxuICAgICAgb3B0aW9uczogYXJnc1xuICAgIH0pO1xuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5YmFzZSBjaGF0IG5ld2NvbnYgcmV0dXJuZWQgbm90aGluZycpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2VuZCBhIGZpbGUgdG8gYSBjaGFubmVsLlxuICAgKiBAbWVtYmVyb2YgQ2hhdFxuICAgKiBAcGFyYW0gY2hhbm5lbCAtIFRoZSBjaGF0IGNoYW5uZWwgdG8gc2VuZCB0aGUgbWVzc2FnZSBpbi5cbiAgICogQHBhcmFtIGZpbGVuYW1lIC0gVGhlIGFic29sdXRlIHBhdGggb2YgdGhlIGZpbGUgdG8gc2VuZC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgb2Ygb3B0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIG1ldGhvZC5cbiAgICogQGV4YW1wbGVcbiAgICogYm90LmNoYXQuYXR0YWNoKGNoYW5uZWwsICcvVXNlcnMvbmF0aGFuL215X3BpY3R1cmUucG5nJykudGhlbigoKSA9PiBjb25zb2xlLmxvZygnU2VudCBhIHBpY3R1cmUhJykpXG4gICAqL1xuXG5cbiAgYXN5bmMgYXR0YWNoKGNoYW5uZWwsIGZpbGVuYW1lLCBvcHRpb25zKSB7XG4gICAgYXdhaXQgdGhpcy5fZ3VhcmRJbml0aWFsaXplZCgpO1xuICAgIGNvbnN0IGFyZ3MgPSB7IC4uLm9wdGlvbnMsXG4gICAgICBjaGFubmVsLFxuICAgICAgZmlsZW5hbWVcbiAgICB9O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuX3J1bkFwaUNvbW1hbmQoe1xuICAgICAgYXBpTmFtZTogJ2NoYXQnLFxuICAgICAgbWV0aG9kOiAnYXR0YWNoJyxcbiAgICAgIG9wdGlvbnM6IGFyZ3NcbiAgICB9KTtcblxuICAgIGlmICghcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0tleWJhc2UgY2hhdCBhdHRhY2ggcmV0dXJuZWQgbm90aGluZycpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpZDogcmVzLmlkXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRG93bmxvYWQgYSBmaWxlIHNlbmQgdmlhIEtleWJhc2UgY2hhdC5cbiAgICogQG1lbWJlcm9mIENoYXRcbiAgICogQHBhcmFtIGNoYW5uZWwgLSBUaGUgY2hhdCBjaGFubmVsIHRoYXQgdGhlIGRlc2lyZWQgYXR0YWNtZW50IHRvIGRvd25sb2FkIGlzIGluLlxuICAgKiBAcGFyYW0gbWVzc2FnZUlkIC0gVGhlIG1lc3NhZ2UgaWQgb2YgdGhlIGF0dGFjaGVkIGZpbGUuXG4gICAqIEBwYXJhbSBvdXRwdXQgLSBUaGUgYWJzb2x1dGUgcGF0aCBvZiB3aGVyZSB0aGUgZmlsZSBzaG91bGQgYmUgZG93bmxvYWRlZCB0by5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgb2Ygb3B0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIG1ldGhvZFxuICAgKiBAZXhhbXBsZVxuICAgKiBib3QuY2hhdC5kb3dubG9hZChjaGFubmVsLCAzMjUsICcvVXNlcnMvbmF0aGFuL0Rvd25sb2Fkcy9maWxlLnBuZycpXG4gICAqL1xuXG5cbiAgYXN5bmMgZG93bmxvYWQoY2hhbm5lbCwgbWVzc2FnZUlkLCBvdXRwdXQsIG9wdGlvbnMpIHtcbiAgICBhd2FpdCB0aGlzLl9ndWFyZEluaXRpYWxpemVkKCk7XG4gICAgY29uc3QgYXJncyA9IHsgLi4ub3B0aW9ucyxcbiAgICAgIGNoYW5uZWwsXG4gICAgICBtZXNzYWdlSWQsXG4gICAgICBvdXRwdXRcbiAgICB9O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuX3J1bkFwaUNvbW1hbmQoe1xuICAgICAgYXBpTmFtZTogJ2NoYXQnLFxuICAgICAgbWV0aG9kOiAnZG93bmxvYWQnLFxuICAgICAgb3B0aW9uczogYXJnc1xuICAgIH0pO1xuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5YmFzZSBjaGF0IGRvd25sb2FkIHJldHVybmVkIG5vdGhpbmcnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWN0cyB0byBhIGdpdmVuIG1lc3NhZ2UgaW4gYSBjaGFubmVsLiBNZXNzYWdlcyBoYXZlIG1lc3NhZ2VJZCdzIGFzc29jaWF0ZWQgd2l0aFxuICAgKiB0aGVtLCB3aGljaCB5b3UgY2FuIGxlYXJuIGluIGBib3QuY2hhdC5yZWFkYC5cbiAgICogQG1lbWJlcm9mIENoYXRcbiAgICogQHBhcmFtIGNoYW5uZWwgLSBUaGUgY2hhdCBjaGFubmVsIHRvIHNlbmQgdGhlIG1lc3NhZ2UgaW4uXG4gICAqIEBwYXJhbSBtZXNzYWdlSWQgLSBUaGUgaWQgb2YgdGhlIG1lc3NhZ2UgdG8gcmVhY3QgdG8uXG4gICAqIEBwYXJhbSByZWFjdGlvbiAtIFRoZSByZWFjdGlvbiBlbW9qaSwgaW4gY29sb24gZm9ybS5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgb2Ygb3B0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIG1ldGhvZC5cbiAgICogQGV4YW1wbGVcbiAgICogYm90LmNoYXQucmVhY3QoY2hhbm5lbCwgMzE0LCAnOisxOicpLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ1RodW1icyB1cCEnKSlcbiAgICovXG5cblxuICBhc3luYyByZWFjdChjaGFubmVsLCBtZXNzYWdlSWQsIHJlYWN0aW9uLCBvcHRpb25zKSB7XG4gICAgYXdhaXQgdGhpcy5fZ3VhcmRJbml0aWFsaXplZCgpO1xuICAgIGNvbnN0IGFyZ3MgPSB7IC4uLm9wdGlvbnMsXG4gICAgICBjaGFubmVsLFxuICAgICAgbWVzc2FnZUlkLFxuICAgICAgbWVzc2FnZToge1xuICAgICAgICBib2R5OiByZWFjdGlvblxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcnVuQXBpQ29tbWFuZCh7XG4gICAgICBhcGlOYW1lOiAnY2hhdCcsXG4gICAgICBtZXRob2Q6ICdyZWFjdGlvbicsXG4gICAgICBvcHRpb25zOiBhcmdzXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdLZXliYXNlIGNoYXQgcmVhY3QgcmV0dXJuZWQgbm90aGluZy4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHJlcy5pZFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBtZXNzYWdlIGluIGEgY2hhbm5lbC4gTWVzc2FnZXMgaGF2ZSBtZXNzYWdlSWQncyBhc3NvY2lhdGVkIHdpdGhcbiAgICogdGhlbSwgd2hpY2ggeW91IGNhbiBsZWFybiBpbiBgYm90LmNoYXQucmVhZGAuIEtub3duIGJ1ZzogdGhlIEdVSSBoYXMgYSBjYWNoZSxcbiAgICogYW5kIGRlbGV0aW5nIGZyb20gdGhlIENMSSBtYXkgbm90IGJlY29tZSBhcHBhcmVudCBpbW1lZGlhdGVseS5cbiAgICogQG1lbWJlcm9mIENoYXRcbiAgICogQHBhcmFtIGNoYW5uZWwgLSBUaGUgY2hhdCBjaGFubmVsIHRvIHNlbmQgdGhlIG1lc3NhZ2UgaW4uXG4gICAqIEBwYXJhbSBtZXNzYWdlSWQgLSBUaGUgaWQgb2YgdGhlIG1lc3NhZ2UgdG8gZGVsZXRlLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCBvZiBvcHRpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgbWV0aG9kLlxuICAgKiBAZXhhbXBsZVxuICAgKiBib3QuY2hhdC5kZWxldGUoY2hhbm5lbCwgMzE0KS50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdtZXNzYWdlIGRlbGV0ZWQhJykpXG4gICAqL1xuXG5cbiAgYXN5bmMgZGVsZXRlKGNoYW5uZWwsIG1lc3NhZ2VJZCwgb3B0aW9ucykge1xuICAgIGF3YWl0IHRoaXMuX2d1YXJkSW5pdGlhbGl6ZWQoKTtcbiAgICBjb25zdCBhcmdzID0geyAuLi5vcHRpb25zLFxuICAgICAgY2hhbm5lbCxcbiAgICAgIG1lc3NhZ2VJZFxuICAgIH07XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcnVuQXBpQ29tbWFuZCh7XG4gICAgICBhcGlOYW1lOiAnY2hhdCcsXG4gICAgICBtZXRob2Q6ICdkZWxldGUnLFxuICAgICAgb3B0aW9uczogYXJnc1xuICAgIH0pO1xuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5YmFzZSBjaGF0IGRlbGV0ZSByZXR1cm5lZCBub3RoaW5nLicpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogTGlzdGVucyBmb3IgbmV3IGNoYXQgbWVzc2FnZXMgb24gYSBzcGVjaWZpZWQgY2hhbm5lbC4gVGhlIGBvbk1lc3NhZ2VgIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZXZlcnkgbWVzc2FnZSB5b3VyIGJvdCByZWNlaXZlcy4gVGhpcyBpcyBwcmV0dHkgc2ltaWxhciB0byBgd2F0Y2hBbGxDaGFubmVsc0Zvck5ld01lc3NhZ2VzYCwgZXhjZXB0IGl0IHNwZWNpZmljYWxseSBjaGVja3Mgb25lIGNoYW5uZWwuIE5vdGUgdGhhdCBpdCByZWNlaXZlcyBtZXNzYWdlcyB5b3VyIG93biBib3QgcG9zdHMsIGJ1dCBmcm9tIG90aGVyIGRldmljZXMuIFlvdSBjYW4gZmlsdGVyIG91dCB5b3VyIG93biBtZXNzYWdlcyBieSBsb29raW5nIGF0IGEgbWVzc2FnZSdzIHNlbmRlciBvYmplY3QuXG4gICAqIEhpZGVzIGV4cGxvZGluZyBtZXNzYWdlcyBieSBkZWZhdWx0LlxuICAgKiBAbWVtYmVyb2YgQ2hhdFxuICAgKiBAcGFyYW0gY2hhbm5lbCAtIFRoZSBjaGF0IGNoYW5uZWwgdG8gd2F0Y2guXG4gICAqIEBwYXJhbSBvbk1lc3NhZ2UgLSBBIGNhbGxiYWNrIHRoYXQgaXMgdHJpZ2dlcmVkIG9uIGV2ZXJ5IG1lc3NhZ2UgeW91ciBib3QgcmVjZWl2ZXMuXG4gICAqIEBwYXJhbSBvbkVycm9yIC0gQSBjYWxsYmFjayB0aGF0IGlzIHRyaWdnZXJlZCBvbiBhbnkgZXJyb3IgdGhhdCBvY2N1cnMgd2hpbGUgdGhlIG1ldGhvZCBpcyBleGVjdXRpbmcuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGxpc3RlbiBtZXRob2QuXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIFJlcGx5IHRvIGFsbCBtZXNzYWdlcyBiZXR3ZWVuIHlvdSBhbmQgYGtib3RgIHdpdGggJ3RoYW5rcyEnXG4gICAqIGNvbnN0IGNoYW5uZWwgPSB7bmFtZTogJ2tib3QsJyArIGJvdC5teUluZm8oKS51c2VybmFtZSwgcHVibGljOiBmYWxzZSwgdG9waWNUeXBlOiAnY2hhdCd9XG4gICAqIGNvbnN0IG9uTWVzc2FnZSA9IG1lc3NhZ2UgPT4ge1xuICAgKiAgIGNvbnN0IGNoYW5uZWwgPSBtZXNzYWdlLmNoYW5uZWxcbiAgICogICBib3QuY2hhdC5zZW5kKGNoYW5uZWwsIHtib2R5OiAndGhhbmtzISEhJ30pXG4gICAqIH1cbiAgICogYm90LmNoYXQud2F0Y2hDaGFubmVsRm9yTmV3TWVzc2FnZXMoY2hhbm5lbCwgb25NZXNzYWdlKVxuICAgKi9cblxuXG4gIGFzeW5jIHdhdGNoQ2hhbm5lbEZvck5ld01lc3NhZ2VzKGNoYW5uZWwsIG9uTWVzc2FnZSwgb25FcnJvciwgb3B0aW9ucykge1xuICAgIGF3YWl0IHRoaXMuX2d1YXJkSW5pdGlhbGl6ZWQoKTtcblxuICAgIHRoaXMuX2NoYXRMaXN0ZW4ob25NZXNzYWdlLCBvbkVycm9yLCBjaGFubmVsLCBvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHB1dCB5b3VyIGJvdCBpbnRvIGZ1bGwtcmVhZCBtb2RlLCB3aGVyZSBpdCByZWFkc1xuICAgKiBldmVyeXRoaW5nIGl0IGNhbiBhbmQgZXZlcnkgbmV3IG1lc3NhZ2UgaXQgZmluZHMgaXQgd2lsbCBwYXNzIHRvIHlvdSwgc29cbiAgICogeW91IGNhbiBkbyB3aGF0IHlvdSB3YW50IHdpdGggaXQuIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byB3cml0ZSBhXG4gICAqIEtleWJhc2UgYm90IHRoYXQgdGFsa3Mgc2hpdCBhdCBhbnlvbmUgd2hvIGRhcmVzIGFwcHJvYWNoIGl0LCB0aGlzIGlzIHRoZVxuICAgKiBmdW5jdGlvbiB0byB1c2UuIE5vdGUgdGhhdCBpdCByZWNlaXZlcyBtZXNzYWdlcyB5b3VyIG93biBib3QgcG9zdHMsIGJ1dCBmcm9tIG90aGVyIGRldmljZXMuXG4gICAqIFlvdSBjYW4gZmlsdGVyIG91dCB5b3VyIG93biBtZXNzYWdlcyBieSBsb29raW5nIGF0IGEgbWVzc2FnZSdzIHNlbmRlciBvYmplY3QuXG4gICAqIEhpZGVzIGV4cGxvZGluZyBtZXNzYWdlcyBieSBkZWZhdWx0LlxuICAgKiBAbWVtYmVyb2YgQ2hhdFxuICAgKiBAcGFyYW0gb25NZXNzYWdlIC0gQSBjYWxsYmFjayB0aGF0IGlzIHRyaWdnZXJlZCBvbiBldmVyeSBtZXNzYWdlIHlvdXIgYm90IHJlY2VpdmVzLlxuICAgKiBAcGFyYW0gb25FcnJvciAtIEEgY2FsbGJhY2sgdGhhdCBpcyB0cmlnZ2VyZWQgb24gYW55IGVycm9yIHRoYXQgb2NjdXJzIHdoaWxlIHRoZSBtZXRob2QgaXMgZXhlY3V0aW5nLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBsaXN0ZW4gbWV0aG9kLlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBSZXBseSB0byBpbmNvbWluZyB0cmFmZmljIG9uIGFsbCBjaGFubmVscyB3aXRoICd0aGFua3MhJ1xuICAgKiBjb25zdCBvbk1lc3NhZ2UgPSBtZXNzYWdlID0+IHtcbiAgICogICBjb25zdCBjaGFubmVsID0gbWVzc2FnZS5jaGFubmVsXG4gICAqICAgYm90LmNoYXQuc2VuZChjaGFubmVsLCB7Ym9keTogJ3RoYW5rcyEhISd9KVxuICAgKiB9XG4gICAqIGJvdC5jaGF0LndhdGNoQWxsQ2hhbm5lbHNGb3JOZXdNZXNzYWdlcyhvbk1lc3NhZ2UpXG4gICAqXG4gICAqL1xuXG5cbiAgYXN5bmMgd2F0Y2hBbGxDaGFubmVsc0Zvck5ld01lc3NhZ2VzKG9uTWVzc2FnZSwgb25FcnJvciwgb3B0aW9ucykge1xuICAgIGF3YWl0IHRoaXMuX2d1YXJkSW5pdGlhbGl6ZWQoKTtcblxuICAgIHRoaXMuX2NoYXRMaXN0ZW4ob25NZXNzYWdlLCBvbkVycm9yLCB1bmRlZmluZWQsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2hhdFxuICAgKiBAaWdub3JlXG4gICAqIEBwYXJhbSB1c2VyV2F0Y2hpbmcgLSB0aGlzIGlzIGEgY2hhbm5lbCB0aGUgdXNlciBoYXMgcmVxdWVzdGVkIHRvIHdhdGNoXG4gICAqIEBwYXJhbSB3aGF0Q2FtZUJhY2sgLSBhIG1lc3NhZ2UgaGFzIGNvbWUgYmFjayBvbiBhIGNoYW5uZWwgYW5kIHdlIHdhbnQgdG8gc2VlIGlmIGl0IG1hdGNoZXNcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5fY2hhbm5lbE1hdGNoKGNoYW5uZWxVc2VyV2FudHMsIGNoYW5uZWxUaGF0R290QU1lc3NhZ2UpXG4gICAqL1xuXG5cbiAgX2NoYW5uZWxNYXRjaCh1c2VyV2F0Y2hpbmcsIHdoYXRDYW1lQmFjaykge1xuICAgIGNvbnN0IHdhbnRzUHVibGljID0gdXNlcldhdGNoaW5nLnB1YmxpYyA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiB1c2VyV2F0Y2hpbmcucHVibGljO1xuICAgIGNvbnN0IHdhbnRzVG9waWNUeXBlID0gdXNlcldhdGNoaW5nLnRvcGljVHlwZSA9PT0gdW5kZWZpbmVkID8gJ2NoYXQnIDogdXNlcldhdGNoaW5nLnRvcGljVHlwZTtcbiAgICBjb25zdCB3YW50c1RvcGljTmFtZSA9IHVzZXJXYXRjaGluZy50b3BpY05hbWUgPT09IHVuZGVmaW5lZCA/ICdnZW5lcmFsJyA6IHVzZXJXYXRjaGluZy50b3BpY05hbWU7XG4gICAgcmV0dXJuIHdoYXRDYW1lQmFjay5uYW1lID09PSB1c2VyV2F0Y2hpbmcubmFtZSAmJiB3aGF0Q2FtZUJhY2sucHVibGljID09PSB3YW50c1B1YmxpYyAmJiB3aGF0Q2FtZUJhY2sudG9waWNUeXBlID09PSB3YW50c1RvcGljVHlwZSAmJiB3aGF0Q2FtZUJhY2sudG9waWNOYW1lID09PSB3YW50c1RvcGljTmFtZTtcbiAgfVxuICAvKipcbiAgICogU3Bhd25zIHRoZSBjaGF0IGxpc3RlbiBwcm9jZXNzIGFuZCBoYW5kbGVzIHRoZSBjYWxsaW5nIG9mIG9uTWVzc2FnZSwgb25FcnJvciwgYW5kIGZpbHRlcmluZyBmb3IgYSBzcGVjaWZpYyBjaGFubmVsLlxuICAgKiBAbWVtYmVyb2YgQ2hhdFxuICAgKiBAaWdub3JlXG4gICAqIEBwYXJhbSBvbk1lc3NhZ2UgLSBBIGNhbGxiYWNrIHRoYXQgaXMgdHJpZ2dlcmVkIG9uIGV2ZXJ5IG1lc3NhZ2UgeW91ciBib3QgcmVjZWl2ZXMuXG4gICAqIEBwYXJhbSBvbkVycm9yIC0gQSBjYWxsYmFjayB0aGF0IGlzIHRyaWdnZXJlZCBvbiBhbnkgZXJyb3IgdGhhdCBvY2N1cnMgd2hpbGUgdGhlIG1ldGhvZCBpcyBleGVjdXRpbmcuXG4gICAqIEBwYXJhbSBjaGFubmVsIC0gVGhlIGNoYXQgY2hhbm5lbCB0byB3YXRjaC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgbGlzdGVuIG1ldGhvZC5cbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5fY2hhdExpc3Rlbihvbk1lc3NhZ2UsIG9uRXJyb3IpXG4gICAqL1xuXG5cbiAgX2NoYXRMaXN0ZW4ob25NZXNzYWdlLCBvbkVycm9yLCBjaGFubmVsLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYXJncyA9IFsnY2hhdCcsICdhcGktbGlzdGVuJ107XG5cbiAgICBpZiAodGhpcy5ob21lRGlyKSB7XG4gICAgICBhcmdzLnVuc2hpZnQoJy0taG9tZScsIHRoaXMuaG9tZURpcik7XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMgJiYgb3B0aW9ucy5oaWRlRXhwbG9kaW5nICE9PSBmYWxzZSkge1xuICAgICAgYXJncy5wdXNoKCctLWhpZGUtZXhwbG9kaW5nJyk7XG4gICAgfVxuXG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZF9wcm9jZXNzLnNwYXduKHRoaXMuX3BhdGhUb0tleWJhc2VCaW5hcnkoKSwgYXJncyk7XG4gICAgdGhpcy5zcGF3bmVkUHJvY2Vzc2VzLnB1c2goY2hpbGQpO1xuICAgIGNvbnN0IGxpbmVSZWFkZXJTdGRvdXQgPSByZWFkbGluZS5jcmVhdGVJbnRlcmZhY2Uoe1xuICAgICAgaW5wdXQ6IGNoaWxkLnN0ZG91dFxuICAgIH0pO1xuXG4gICAgY29uc3Qgb25MaW5lID0gbGluZSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBtZXNzYWdlT2JqZWN0ID0gZm9ybWF0QVBJT2JqZWN0T3V0cHV0KEpTT04ucGFyc2UobGluZSkpO1xuXG4gICAgICAgIGlmIChtZXNzYWdlT2JqZWN0Lmhhc093blByb3BlcnR5KCdlcnJvcicpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VPYmplY3QuZXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKCAvLyBmaXJlIG9uTWVzc2FnZSBpZiBpdCB3YXMgZnJvbSBhIGRpZmZlcmVudCBzZW5kZXIgb3IgYXQgbGVhc3QgYSBkaWZmZXJlbnQgZGV2aWNlXG4gICAgICAgIC8vIGZyb20gdGhpcyBzZW5kZXIuIEJvdHMgY2FuIGZpbHRlciBvdXQgdGhlaXIgb3duIG1lc3NhZ2VzIGZyb20gb3RoZXIgZGV2aWNlcy5cbiAgICAgICAgKCFjaGFubmVsIHx8IHRoaXMuX2NoYW5uZWxNYXRjaChjaGFubmVsLCBtZXNzYWdlT2JqZWN0Lm1zZy5jaGFubmVsLnRvcGljTmFtZSkpICYmIHRoaXMudXNlcm5hbWUgJiYgdGhpcy5kZXZpY2VuYW1lICYmIChtZXNzYWdlT2JqZWN0Lm1zZy5zZW5kZXIudXNlcm5hbWUgIT09IHRoaXMudXNlcm5hbWUudG9Mb3dlckNhc2UoKSB8fCBtZXNzYWdlT2JqZWN0Lm1zZy5zZW5kZXIuZGV2aWNlTmFtZSAhPT0gdGhpcy5kZXZpY2VuYW1lKSkge1xuICAgICAgICAgIG9uTWVzc2FnZShtZXNzYWdlT2JqZWN0Lm1zZyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGluZVJlYWRlclN0ZG91dC5vbignbGluZScsIG9uTGluZSk7XG4gIH1cblxufVxuXG4vKiogVGhlIHdhbGxldCBtb2R1bGUgb2YgeW91ciBLZXliYXNlIGJvdC4gRm9yIG1vcmUgaW5mbyBhYm91dCB0aGUgQVBJIHRoaXMgbW9kdWxlIHVzZXMsIHlvdSBtYXkgd2FudCB0byBjaGVjayBvdXQgYGtleWJhc2Ugd2FsbGV0IGFwaWAuICovXG5jbGFzcyBXYWxsZXQgZXh0ZW5kcyBDbGllbnRCYXNlIHtcbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgbGlzdCBvZiBhbGwgYWNjb3VudHMgb3duZWQgYnkgdGhlIGN1cnJlbnQgS2V5YmFzZSB1c2VyLlxuICAgKiBAbWVtYmVyb2YgV2FsbGV0XG4gICAqIEByZXR1cm5zIC0gQW4gYXJyYXkgb2YgYWNjb3VudHMuIElmIHRoZXJlIGFyZSBubyBhY2NvdW50cywgdGhlIGFycmF5IGlzIGVtcHR5LlxuICAgKiBAZXhhbXBsZVxuICAgKiBib3Qud2FsbGV0LmJhbGFuY2VzKCkudGhlbihhY2NvdW50cyA9PiBjb25zb2xlLmxvZyhhY2NvdW50cykpXG4gICAqL1xuICBhc3luYyBiYWxhbmNlcygpIHtcbiAgICBhd2FpdCB0aGlzLl9ndWFyZEluaXRpYWxpemVkKCk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcnVuQXBpQ29tbWFuZCh7XG4gICAgICBhcGlOYW1lOiAnd2FsbGV0JyxcbiAgICAgIG1ldGhvZDogJ2JhbGFuY2VzJ1xuICAgIH0pO1xuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5YmFzZSB3YWxsZXQgYmFsYW5hY2VzIHJldHVybmVkIG5vdGhpbmcuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcyB8fCBbXTtcbiAgfVxuICAvKipcbiAgICogUHJvdmlkZXMgYSBsaXN0IG9mIGFsbCB0cmFuc2FjdGlvbnMgaW4gYSBzaW5nbGUgYWNjb3VudC5cbiAgICogQG1lbWJlcm9mIFdhbGxldFxuICAgKiBAcGFyYW0gYWNjb3VudElkIC0gVGhlIGlkIG9mIGFuIGFjY291bnQgb3duZWQgYnkgYSBLZXliYXNlIHVzZXIuXG4gICAqIEByZXR1cm5zIC0gQW4gYXJyYXkgb2YgdHJhbnNhY3Rpb25zIHJlbGF0ZWQgdG8gdGhlIGFjY291bnQuXG4gICAqIEBleGFtcGxlXG4gICAqIGJvdC53YWxsZXQuaGlzdG9yeSgnR0RVS1pINlEzVTVXUUQ0UERHWlhZTEpFM1A3NkJEUkRXUFNBTE40T1VGRUVTSTJRTDVVWkhDSycpLnRoZW4odHJhbnNhY3Rpb25zID0+IGNvbnNvbGUubG9nKHRyYW5zYWN0aW9ucykpXG4gICAqL1xuXG5cbiAgYXN5bmMgaGlzdG9yeShhY2NvdW50SWQpIHtcbiAgICBhd2FpdCB0aGlzLl9ndWFyZEluaXRpYWxpemVkKCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGFjY291bnRJZFxuICAgIH07XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcnVuQXBpQ29tbWFuZCh7XG4gICAgICBhcGlOYW1lOiAnd2FsbGV0JyxcbiAgICAgIG1ldGhvZDogJ2hpc3RvcnknLFxuICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgIH0pO1xuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5YmFzZSB3YWxsZXQgaGlzdG9yeSByZXR1cm5lZCBub3RoaW5nLicpO1xuICAgIH0gLy8gUmVtb3ZlcyBhIHNpbmdsZSBvYmplY3Qgd2l0aCBwcm9wZXJ0eSBgcGF5bWVudGBcblxuXG4gICAgY29uc3QgY2xlYW5lZFJlcyA9IHJlcy5tYXAocGF5bWVudCA9PiBwYXltZW50LnBheW1lbnQpO1xuICAgIHJldHVybiBjbGVhbmVkUmVzO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgZGV0YWlscyBhYm91dCBhIHBhcnRpY3VsYXIgdHJhbnNhY3Rpb25cbiAgICogQG1lbWJlcm9mIFdhbGxldFxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCAtIFRoZSBpZCBvZiB0aGUgdHJhbnNhY3Rpb24geW91IHdvdWxkIGxpa2UgZGV0YWlscyBhYm91dC5cbiAgICogQHJldHVybnMgLSBBbiBvYmplY3Qgb2YgZGV0YWlscyBhYm91dCB0aGUgdHJhbnNhY3Rpb24gc3BlY2lmaWVkLlxuICAgKiBAZXhhbXBsZVxuICAgKiBib3Qud2FsbGV0LmRldGFpbHMoJ2U1MzM0NjAxYjlkYzJhMjRlMDMxZmZlZWMyZmNlMzdiYjZhOGI0YjUxZmM3MTFkMTZkZWMwNGQzZTY0OTc2YzQnKS50aGVuKGRldGFpbHMgPT4gY29uc29sZS5sb2coZGV0YWlscykpXG4gICAqL1xuXG5cbiAgYXN5bmMgZGV0YWlscyh0cmFuc2FjdGlvbklkKSB7XG4gICAgYXdhaXQgdGhpcy5fZ3VhcmRJbml0aWFsaXplZCgpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICB0eGlkOiB0cmFuc2FjdGlvbklkXG4gICAgfTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9ydW5BcGlDb21tYW5kKHtcbiAgICAgIGFwaU5hbWU6ICd3YWxsZXQnLFxuICAgICAgbWV0aG9kOiAnZGV0YWlscycsXG4gICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdLZXliYXNlIHdhbGxldCBkZXRhaWxzIHJldHVybmVkIG5vdGhpbmcuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICAvKipcbiAgICogTG9va3VwIHRoZSBwcmltYXJ5IFN0ZWxsYXIgYWNjb3VudCBJRCBvZiBhIEtleWJhc2UgdXNlci5cbiAgICogQG1lbWJlcm9mIFdhbGxldFxuICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB1c2VyIHlvdSB3YW50IHRvIGxvb2t1cC4gVGhpcyBjYW4gYmUgZWl0aGVyIGEgS2V5YmFzZSB1c2VybmFtZSBvciBhIHVzZXJuYW1lIG9mIGFub3RoZXIgYWNjb3VudCB0aGF0IGlzIHN1cHBvcnRlZCBieSBLZXliYXNlIGlmIGl0IGlzIGZvbGxvd2VkIGJ5IGFuICdAPHNlcnZpY2U+Jy5cbiAgICogQHJldHVybnMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgYWNjb3VudCBJRCBhbmQgS2V5YmFzZSB1c2VybmFtZSBvZiB0aGUgZm91bmQgdXNlci5cbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgbG9va3VwMSA9IGJvdC53YWxsZXQubG9va3VwKCdwYXRyaWNrJylcbiAgICogLy8gJ3BhdHJpY2snIG9uIEtleWJhc2UgaXMgJ3BhdHJpY2t4Yicgb24gdHdpdHRlclxuICAgKiBjb25zdCBsb29rdXAyID0gYm90LndhbGxldC5sb29rdXAoJ3BhdHJjaWt4YkB0d2l0dGVyJylcbiAgICogLy8gVXNpbmcgTG9kYXNoJ3MgYGlzRXF1YWxgIHNpbmNlIG9iamVjdHMgd2l0aCBzYW1lIHZhbHVlcyBhcmVuJ3QgZXF1YWwgaW4gSmF2YVNjcmlwdFxuICAgKiBfLmlzRXF1YWwobG9va3VwMSwgbG9va3VwMikgLy8gPT4gdHJ1ZVxuICAgKi9cblxuXG4gIGFzeW5jIGxvb2t1cChuYW1lKSB7XG4gICAgYXdhaXQgdGhpcy5fZ3VhcmRJbml0aWFsaXplZCgpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBuYW1lXG4gICAgfTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9ydW5BcGlDb21tYW5kKHtcbiAgICAgIGFwaU5hbWU6ICd3YWxsZXQnLFxuICAgICAgbWV0aG9kOiAnbG9va3VwJyxcbiAgICAgIG9wdGlvbnNcbiAgICB9KTtcblxuICAgIGlmICghcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0tleWJhc2Ugd2FsbGV0IGxvb2t1cCByZXR1cm5lZCBub3RoaW5nLicpO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH1cbiAgLyoqXG4gICAqIFNlbmQgbHVtZW5zIChYTE0pIHZpYSBLZXliYXNlIHdpdGggeW91ciBib3QhXG4gICAqIEBtZW1iZXJvZiBXYWxsZXRcbiAgICogQHBhcmFtIHJlY2lwaWVudCAtIFdobyB5b3UncmUgc2VuZGluZyB5b3VyIG1vbmV5IHRvLiBUaGlzIGNhbiBiZSBhIEtleWJhc2UgdXNlciwgc3RlbGxhciBhZGRyZXNzLCBvciBhIHVzZXJuYW1lIG9mIGFub3RoZXIgYWNjb3VudCB0aGF0IGlzIHN1cHBvcnRlZCBieSBLZXliYXNlIGlmIGl0IGlzIGZvbGxvd2VkIGJ5IGFuICdAPHNlcnZpY2U+Jy5cbiAgICogQHBhcmFtIGFtb3VudCAtIFRoZSBhbW91bnQgb2YgWExNIHRvIHNlbmQuXG4gICAqIEBwYXJhbSBbY3VycmVuY3ldIC0gQWRkcyBhIGN1cnJlbmN5IHZhbHVlIHRvIHRoZSBhbW91bnQgc3BlY2lmaWVkLiBGb3IgZXhhbXBsZSwgYWRkaW5nICdVU0QnIHdvdWxkIHNlbmRcbiAgICogQHBhcmFtIFttZXNzYWdlXSAtIFRoZSBtZXNzYWdlIGZvciB5b3VyIHBheW1lbnRcbiAgICogQHJldHVybnMgLSBUaGUgdHJhc2FjdGlvbiBvYmplY3Qgb2YgdGhlIHRyYW5zYWN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKiBib3Qud2FsbGV0LnNlbmQoJ25hdGh1bnNtaXR0eScsICczLjUwJykgLy8gU2VuZCAzLjUwIFhMTSB0byBLZXliYXNlIHVzZXIgYG5hdGh1bnNtaXR0eWBcbiAgICogYm90LndhbGxldC5zZW5kKCduYXRodW5zbWl0dHlAZ2l0aHViJywgJzMuNTAnKSAvLyBTZW5kIDMuNTAgWExNIHRvIEdpdEh1YiB1c2VyIGBuYXRodW5zbWl0dHlgXG4gICAqIGJvdC53YWxsZXQuc2VuZCgnbmF0aHVuc21pdHR5JywgJzMuNTAnLCAnVVNEJykgLy8gU2VuZCAkMy41MCB3b3J0aCBvZiBsdW1lbnMgdG8gS2V5YmFzZSB1c2VyIGBuYXRodW5zbWl0dHlgXG4gICAqIGJvdC53YWxsZXQuc2VuZCgnbmF0aHVuc21pdHR5JywgJzMuNTAnLCAnVVNEJywgJ1NodXQgdXAgYW5kIHRha2UgbXkgbW9uZXkhJykgLy8gU2VuZCAkMy41MCB3b3J0aCBvZiBsdW1lbnMgdG8gS2V5YmFzZSB1c2VyIGBuYXRodW5zbWl0dHlgIHdpdGggYSBtZW1vXG4gICAqL1xuXG5cbiAgYXN5bmMgc2VuZChyZWNpcGllbnQsIGFtb3VudCwgY3VycmVuY3ksIG1lc3NhZ2UpIHtcbiAgICBhd2FpdCB0aGlzLl9ndWFyZEluaXRpYWxpemVkKCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHJlY2lwaWVudCxcbiAgICAgIGFtb3VudCxcbiAgICAgIGN1cnJlbmN5LFxuICAgICAgbWVzc2FnZVxuICAgIH07XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcnVuQXBpQ29tbWFuZCh7XG4gICAgICBhcGlOYW1lOiAnd2FsbGV0JyxcbiAgICAgIG1ldGhvZDogJ3NlbmQnLFxuICAgICAgb3B0aW9uc1xuICAgIH0pO1xuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5YmFzZSB3YWxsZXQgc2VuZCByZXR1cm5lZCBub3RoaW5nLicpO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH1cbiAgLyoqXG4gICAqIFNlbmQgbHVtZW5zIChYTE0pIHZpYSBLZXliYXNlIHRvIG1vcmUgdGhhbiBvbmUgdXNlciBhdCBvbmNlLiBBcyBvcHBvc2VkIHRvIHRoZSBub3JtYWwgYm90LndhbGxldC5zZW5kXG4gICAqIGNvbW1hbmQsIHRoaXMgY2FuIGdldCBtdWx0aXBsZSB0cmFuc2FjdGlvbnMgaW50byB0aGUgc2FtZSA1LXNlY29uZCBTdGVsbGFyIGxlZGdlci5cbiAgICogQG1lbWJlcm9mIFdhbGxldFxuICAgKiBAcGFyYW0gYmF0Y2hJZCAtIGV4YW1wbGUsIGlmIHNlbmRpbmcgYSBidW5jaCBvZiBiYXRjaGVzIGZvciBhbiBhaXJkcm9wLCB5b3UgY291bGQgcGFzcyB0aGVtIGFsbCBgYWlyZHJvcDIwMjVgLlxuICAgKiBAcGFyYW0gcGF5bWVudHMgLSBhbiBhcnJheSBvZiBvYmplY3RzIGNvbnRhaW5pbmcgcmVjaXBpZW50cyBhbmQgWExNIG9mIHRoZSBmb3JtIHtcInJlY2lwaWVudFwiOiBcInNvbWV1c2VybmFtZVwiLCBcImFtb3VudFwiOiBcIjEuMjM0XCIsIFwibWVzc2FnZVwiLCBcImhpIHRoZXJlXCJ9XG4gICAqIEByZXR1cm5zIC0gYW4gb2JqZWN0XG4gICAqIEBleGFtcGxlXG4gICAqIGJvdC53YWxsZXQuYmF0Y2goXCJhaXJkcm9wMjA0MFwiLFt7XCJyZWNpcGllbnRcIjpcImExXCIsXCJhbW91bnRcIjogXCIxLjQxNFwiLCBcIm1lc3NhZ2VcIjogXCJoaSBhMSwgeWVzIDFcIn0se1wicmVjaXBpZW50XCI6IFwiYTJcIiwgXCJhbW91bnRcIjogXCIzLjE0MTU5XCIsIFwibWVzc2FnZVwiOiBcImhpIGEyLCB5ZXMgMlwifSx9XSlcbiAgICovXG5cblxuICBhc3luYyBiYXRjaChiYXRjaElkLCBwYXltZW50cykge1xuICAgIGF3YWl0IHRoaXMuX2d1YXJkSW5pdGlhbGl6ZWQoKTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgYmF0Y2hJZCxcbiAgICAgIHBheW1lbnRzXG4gICAgfTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9ydW5BcGlDb21tYW5kKHtcbiAgICAgIGFwaU5hbWU6ICd3YWxsZXQnLFxuICAgICAgbWV0aG9kOiAnYmF0Y2gnLFxuICAgICAgb3B0aW9uc1xuICAgIH0pO1xuXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5YmFzZSB3YWxsZXQgYmF0Y2ggcmV0dXJuZWQgbm90aGluZy4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIC8qKlxuICAgKiBJZiB5b3Ugc2VuZCBYTE0gdG8gYSBLZXliYXNlIHVzZXIgd2hvIGhhcyBub3QgZXN0YWJsaXNoZWQgYSB3YWxsZXQsIHlvdSBjYW4gY2FuY2VsIHRoZSBwYXltZW50IGJlZm9yZSB0aGUgcmVjaXBpZW50IGNsYWltcyBpdCBhbmQgdGhlIFhMTSB3aWxsIGJlIHJldHVybmVkIHRvIHlvdXIgYWNjb3VudC5cbiAgICogQG1lbWJlcm9mIFdhbGxldFxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCAtIFRoZSBpZCBvZiB0aGUgdHJhbnNhY3Rpb24gdG8gY2FuY2VsLlxuICAgKiBAZXhhbXBsZVxuICAgKiBib3Qud2FsbGV0LmNhbmNlbCgnZTUzMzQ2MDFiOWRjMmEyNGUwMzFmZmVlYzJmY2UzN2JiNmE4YjRiNTFmYzcxMWQxNmRlYzA0ZDNlNjQ5NzZjNCcpLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ1RyYW5zYWN0aW9uIHN1Y2Nlc3NmdWxseSBjYW5jZWxlZCEnKSlcbiAgICovXG5cblxuICBhc3luYyBjYW5jZWwodHJhbnNhY3Rpb25JZCkge1xuICAgIGF3YWl0IHRoaXMuX2d1YXJkSW5pdGlhbGl6ZWQoKTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgdHhpZDogdHJhbnNhY3Rpb25JZFxuICAgIH07XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcnVuQXBpQ29tbWFuZCh7XG4gICAgICBhcGlOYW1lOiAnd2FsbGV0JyxcbiAgICAgIG1ldGhvZDogJ2NhbmNlbCcsXG4gICAgICBvcHRpb25zXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdLZXliYXNlIHdhbGxldCBjYW5jZWwgcmV0dXJuZWQgbm90aGluZy4nKTtcbiAgICB9XG4gIH1cblxufVxuXG4vKiogQSBLZXliYXNlIGJvdC4gKi9cbmNsYXNzIEJvdCB7XG4gIC8vIHdoZXJlIEtCIGJpbmFyeSBjb3BpZWQsIGFuZCBob21lRGlyIChpZiBub3QgZXhpc3Rpbmcgc3ZjKVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBib3QuIE5vdGUgeW91IGNhbid0IGRvIG11Y2ggdG9vIGV4Y2l0aW5nIHdpdGggeW91ciBib3QgYWZ0ZXIgeW91IGluc3RhbnRpYXRlIGl0OyB5b3UgaGF2ZSB0byBpbml0aWFsaXplIGl0IGZpcnN0LlxuICAgKiBAbWVtYmVyb2YgQm90XG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGJvdCA9IG5ldyBCb3QoKVxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fd29ya2luZ0RpciA9IHJhbmRvbVRlbXBEaXIoKTtcbiAgICB0aGlzLl9zZXJ2aWNlID0gbmV3IFNlcnZpY2UodGhpcy5fd29ya2luZ0Rpcik7XG4gICAgdGhpcy5jaGF0ID0gbmV3IENoYXQodGhpcy5fd29ya2luZ0Rpcik7XG4gICAgdGhpcy53YWxsZXQgPSBuZXcgV2FsbGV0KHRoaXMuX3dvcmtpbmdEaXIpO1xuICB9XG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHlvdXIgYm90IGJ5IHN0YXJ0aW5nIGFuIGluc3RhbmNlIG9mIHRoZSBLZXliYXNlIHNlcnZpY2UgYW5kIGxvZ2dpbmcgaW4gdXNpbmcgb25lc2hvdCBtb2RlLlxuICAgKiBAbWVtYmVyb2YgQm90XG4gICAqIEBwYXJhbSB1c2VybmFtZSAtIFRoZSB1c2VybmFtZSBvZiB5b3VyIGJvdCdzIEtleWJhc2UgYWNjb3VudC5cbiAgICogQHBhcmFtIHBhcGVya2V5IC0gVGhlIHBhcGVya2V5IG9mIHlvdXIgYm90J3MgS2V5YmFzZSBhY2NvdW50LlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBpbml0aWFsaXphdGlvbiBvcHRpb25zIGZvciB5b3VyIGJvdC5cbiAgICogQGV4YW1wbGVcbiAgICogYm90LmluaXQoJ3VzZXJuYW1lJywgJ3BhcGVya2V5JylcbiAgICovXG5cblxuICBhc3luYyBpbml0KHVzZXJuYW1lLCBwYXBlcmtleSwgb3B0aW9ucykge1xuICAgIGF3YWl0IHRoaXMuX3ByZXBXb3JraW5nRGlyKCk7XG4gICAgYXdhaXQgdGhpcy5fc2VydmljZS5pbml0KHVzZXJuYW1lLCBwYXBlcmtleSwgb3B0aW9ucyk7XG4gICAgYXdhaXQgdGhpcy5faW5pdFN1YkJvdHMob3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgeW91ciBib3QgYnkgdXNpbmcgYW4gZXhpc3RpbmcgcnVubmluZyBzZXJ2aWNlIHdpdGggYSBsb2dnZWQgaW4gdXNlci5cbiAgICogQG1lbWJlcm9mIEJvdFxuICAgKiBAcGFyYW0gaG9tZURpciAtIFRoZSBob21lIGRpcmVjdG9yeSBvZiB0aGlzIGN1cnJlbnRseSBydW5uaW5nIHNlcnZpY2UuIExlYXZlIGJsYW5rIHRvIHVzZSB0aGUgZGVmYXVsdCBob21lRGlyIGZvciB5b3VyIHN5c3RlbS5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgaW5pdGlhbGl6YXRpb24gb3B0aW9ucyBmb3IgeW91ciBib3QuXG4gICAqIEBleGFtcGxlXG4gICAqIGJvdC5pbml0RnJvbVJ1bm5pbmdTZXJ2aWNlKClcbiAgICovXG5cblxuICBhc3luYyBpbml0RnJvbVJ1bm5pbmdTZXJ2aWNlKGhvbWVEaXIsIG9wdGlvbnMpIHtcbiAgICBhd2FpdCB0aGlzLl9wcmVwV29ya2luZ0RpcigpO1xuICAgIGF3YWl0IHRoaXMuX3NlcnZpY2UuaW5pdEZyb21SdW5uaW5nU2VydmljZShob21lRGlyLCBvcHRpb25zKTtcbiAgICBhd2FpdCB0aGlzLl9pbml0U3ViQm90cyhvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZm8gYWJvdXQgeW91ciBib3QhXG4gICAqIEBtZW1iZXJvZiBCb3RcbiAgICogQHJldHVybnMg4oCTIFVzZWZ1bCBpbmZvcm1hdGlvbiBsaWtlIHRoZSB1c2VybmFtZSwgZGV2aWNlLCBhbmQgaG9tZSBkaXJlY3Rvcnkgb2YgeW91ciBib3QuIElmIHlvdXIgYm90IGlzbid0IGluaXRpYWxpemVkLCB5b3UnbGwgZ2V0IGBudWxsYC5cbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgaW5mbyA9IGJvdC5teUluZm8oKVxuICAgKi9cblxuXG4gIG15SW5mbygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VydmljZS5teUluZm8oKTtcbiAgfVxuICAvKipcbiAgICogRGVpbml0aWFsaXplcyB0aGUgYm90IGJ5IGxvZ2dpbmcgb3V0LCBzdG9wcGluZyB0aGUga2V5YmFzZSBzZXJ2aWNlLCBhbmQgcmVtb3ZpbmcgYW55IGxlZnRvdmVyIGxvZ2luIGZpbGVzIG1hZGUgYnkgdGhlIGJvdC4gVGhpcyBzaG91bGQgYmUgcnVuIGJlZm9yZSB5b3VyIGJvdCBlbmRzLlxuICAgKiBAbWVtYmVyb2YgQm90XG4gICAqIEBleGFtcGxlXG4gICAqIGJvdC5kZWluaXQoKVxuICAgKi9cblxuXG4gIGFzeW5jIGRlaW5pdCgpIHtcbiAgICAvLyBTdG9wIHRoZSBjbGllbnRzIGZpcnN0LCBzbyB0aGF0IHRoZXkgYXJlbid0IHRyeWluZyB0b1xuICAgIC8vIHRhbGsgdG8gYSBkZWluaXQnZWQgc2VydmljZVxuICAgIGF3YWl0IHRoaXMuY2hhdC5fZGVpbml0KCk7XG4gICAgYXdhaXQgdGhpcy5fc2VydmljZS5kZWluaXQoKTtcbiAgICBhd2FpdCBybWRpclJlY3Vyc2l2ZSh0aGlzLl93b3JraW5nRGlyKTtcbiAgfVxuXG4gIGFzeW5jIF9wcmVwV29ya2luZ0RpcigpIHtcbiAgICBjb25zdCBrZXliYXNlQmluYXJ5TG9jYXRpb24gPSBhd2FpdCB3aGljaEtleWJhc2UoKTtcbiAgICBjb25zdCBkZXN0aW5hdGlvbiA9IHBhdGguam9pbih0aGlzLl93b3JraW5nRGlyLCAna2V5YmFzZScpO1xuICAgIGF3YWl0IHV0aWwucHJvbWlzaWZ5KG1rZGlycCkodGhpcy5fd29ya2luZ0Rpcik7XG4gICAgYXdhaXQgdXRpbC5wcm9taXNpZnkoZnMuY29weUZpbGUpKGtleWJhc2VCaW5hcnlMb2NhdGlvbiwgZGVzdGluYXRpb24pO1xuICB9XG5cbiAgYXN5bmMgX2luaXRTdWJCb3RzKG9wdGlvbnMpIHtcbiAgICBjb25zdCBpbmZvID0gdGhpcy5teUluZm8oKTtcblxuICAgIGlmIChpbmZvKSB7XG4gICAgICBhd2FpdCB0aGlzLmNoYXQuX2luaXQoaW5mby5ob21lRGlyLCBvcHRpb25zKTtcbiAgICAgIGF3YWl0IHRoaXMud2FsbGV0Ll9pbml0KGluZm8uaG9tZURpciwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSXNzdWUgaW5pdGlhbGl6aW5nIGJvdC4nKTtcbiAgICB9XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJvdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdHJlYW1cIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXNzZXJ0XCIpOyIsIid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29weTogY29weSxcbiAgY2hlY2tEYXRhVHlwZTogY2hlY2tEYXRhVHlwZSxcbiAgY2hlY2tEYXRhVHlwZXM6IGNoZWNrRGF0YVR5cGVzLFxuICBjb2VyY2VUb1R5cGVzOiBjb2VyY2VUb1R5cGVzLFxuICB0b0hhc2g6IHRvSGFzaCxcbiAgZ2V0UHJvcGVydHk6IGdldFByb3BlcnR5LFxuICBlc2NhcGVRdW90ZXM6IGVzY2FwZVF1b3RlcyxcbiAgZXF1YWw6IHJlcXVpcmUoJ2Zhc3QtZGVlcC1lcXVhbCcpLFxuICB1Y3MybGVuZ3RoOiByZXF1aXJlKCcuL3VjczJsZW5ndGgnKSxcbiAgdmFyT2NjdXJlbmNlczogdmFyT2NjdXJlbmNlcyxcbiAgdmFyUmVwbGFjZTogdmFyUmVwbGFjZSxcbiAgY2xlYW5VcENvZGU6IGNsZWFuVXBDb2RlLFxuICBmaW5hbENsZWFuVXBDb2RlOiBmaW5hbENsZWFuVXBDb2RlLFxuICBzY2hlbWFIYXNSdWxlczogc2NoZW1hSGFzUnVsZXMsXG4gIHNjaGVtYUhhc1J1bGVzRXhjZXB0OiBzY2hlbWFIYXNSdWxlc0V4Y2VwdCxcbiAgdG9RdW90ZWRTdHJpbmc6IHRvUXVvdGVkU3RyaW5nLFxuICBnZXRQYXRoRXhwcjogZ2V0UGF0aEV4cHIsXG4gIGdldFBhdGg6IGdldFBhdGgsXG4gIGdldERhdGE6IGdldERhdGEsXG4gIHVuZXNjYXBlRnJhZ21lbnQ6IHVuZXNjYXBlRnJhZ21lbnQsXG4gIHVuZXNjYXBlSnNvblBvaW50ZXI6IHVuZXNjYXBlSnNvblBvaW50ZXIsXG4gIGVzY2FwZUZyYWdtZW50OiBlc2NhcGVGcmFnbWVudCxcbiAgZXNjYXBlSnNvblBvaW50ZXI6IGVzY2FwZUpzb25Qb2ludGVyXG59O1xuXG5cbmZ1bmN0aW9uIGNvcHkobywgdG8pIHtcbiAgdG8gPSB0byB8fCB7fTtcbiAgZm9yICh2YXIga2V5IGluIG8pIHRvW2tleV0gPSBvW2tleV07XG4gIHJldHVybiB0bztcbn1cblxuXG5mdW5jdGlvbiBjaGVja0RhdGFUeXBlKGRhdGFUeXBlLCBkYXRhLCBuZWdhdGUpIHtcbiAgdmFyIEVRVUFMID0gbmVnYXRlID8gJyAhPT0gJyA6ICcgPT09ICdcbiAgICAsIEFORCA9IG5lZ2F0ZSA/ICcgfHwgJyA6ICcgJiYgJ1xuICAgICwgT0sgPSBuZWdhdGUgPyAnIScgOiAnJ1xuICAgICwgTk9UID0gbmVnYXRlID8gJycgOiAnISc7XG4gIHN3aXRjaCAoZGF0YVR5cGUpIHtcbiAgICBjYXNlICdudWxsJzogcmV0dXJuIGRhdGEgKyBFUVVBTCArICdudWxsJztcbiAgICBjYXNlICdhcnJheSc6IHJldHVybiBPSyArICdBcnJheS5pc0FycmF5KCcgKyBkYXRhICsgJyknO1xuICAgIGNhc2UgJ29iamVjdCc6IHJldHVybiAnKCcgKyBPSyArIGRhdGEgKyBBTkQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZW9mICcgKyBkYXRhICsgRVFVQUwgKyAnXCJvYmplY3RcIicgKyBBTkQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBOT1QgKyAnQXJyYXkuaXNBcnJheSgnICsgZGF0YSArICcpKSc7XG4gICAgY2FzZSAnaW50ZWdlcic6IHJldHVybiAnKHR5cGVvZiAnICsgZGF0YSArIEVRVUFMICsgJ1wibnVtYmVyXCInICsgQU5EICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIE5PVCArICcoJyArIGRhdGEgKyAnICUgMSknICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIEFORCArIGRhdGEgKyBFUVVBTCArIGRhdGEgKyAnKSc7XG4gICAgZGVmYXVsdDogcmV0dXJuICd0eXBlb2YgJyArIGRhdGEgKyBFUVVBTCArICdcIicgKyBkYXRhVHlwZSArICdcIic7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBjaGVja0RhdGFUeXBlcyhkYXRhVHlwZXMsIGRhdGEpIHtcbiAgc3dpdGNoIChkYXRhVHlwZXMubGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gY2hlY2tEYXRhVHlwZShkYXRhVHlwZXNbMF0sIGRhdGEsIHRydWUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgY29kZSA9ICcnO1xuICAgICAgdmFyIHR5cGVzID0gdG9IYXNoKGRhdGFUeXBlcyk7XG4gICAgICBpZiAodHlwZXMuYXJyYXkgJiYgdHlwZXMub2JqZWN0KSB7XG4gICAgICAgIGNvZGUgPSB0eXBlcy5udWxsID8gJygnOiAnKCEnICsgZGF0YSArICcgfHwgJztcbiAgICAgICAgY29kZSArPSAndHlwZW9mICcgKyBkYXRhICsgJyAhPT0gXCJvYmplY3RcIiknO1xuICAgICAgICBkZWxldGUgdHlwZXMubnVsbDtcbiAgICAgICAgZGVsZXRlIHR5cGVzLmFycmF5O1xuICAgICAgICBkZWxldGUgdHlwZXMub2JqZWN0O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVzLm51bWJlcikgZGVsZXRlIHR5cGVzLmludGVnZXI7XG4gICAgICBmb3IgKHZhciB0IGluIHR5cGVzKVxuICAgICAgICBjb2RlICs9IChjb2RlID8gJyAmJiAnIDogJycgKSArIGNoZWNrRGF0YVR5cGUodCwgZGF0YSwgdHJ1ZSk7XG5cbiAgICAgIHJldHVybiBjb2RlO1xuICB9XG59XG5cblxudmFyIENPRVJDRV9UT19UWVBFUyA9IHRvSGFzaChbICdzdHJpbmcnLCAnbnVtYmVyJywgJ2ludGVnZXInLCAnYm9vbGVhbicsICdudWxsJyBdKTtcbmZ1bmN0aW9uIGNvZXJjZVRvVHlwZXMob3B0aW9uQ29lcmNlVHlwZXMsIGRhdGFUeXBlcykge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhVHlwZXMpKSB7XG4gICAgdmFyIHR5cGVzID0gW107XG4gICAgZm9yICh2YXIgaT0wOyBpPGRhdGFUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHQgPSBkYXRhVHlwZXNbaV07XG4gICAgICBpZiAoQ09FUkNFX1RPX1RZUEVTW3RdKSB0eXBlc1t0eXBlcy5sZW5ndGhdID0gdDtcbiAgICAgIGVsc2UgaWYgKG9wdGlvbkNvZXJjZVR5cGVzID09PSAnYXJyYXknICYmIHQgPT09ICdhcnJheScpIHR5cGVzW3R5cGVzLmxlbmd0aF0gPSB0O1xuICAgIH1cbiAgICBpZiAodHlwZXMubGVuZ3RoKSByZXR1cm4gdHlwZXM7XG4gIH0gZWxzZSBpZiAoQ09FUkNFX1RPX1RZUEVTW2RhdGFUeXBlc10pIHtcbiAgICByZXR1cm4gW2RhdGFUeXBlc107XG4gIH0gZWxzZSBpZiAob3B0aW9uQ29lcmNlVHlwZXMgPT09ICdhcnJheScgJiYgZGF0YVR5cGVzID09PSAnYXJyYXknKSB7XG4gICAgcmV0dXJuIFsnYXJyYXknXTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHRvSGFzaChhcnIpIHtcbiAgdmFyIGhhc2ggPSB7fTtcbiAgZm9yICh2YXIgaT0wOyBpPGFyci5sZW5ndGg7IGkrKykgaGFzaFthcnJbaV1dID0gdHJ1ZTtcbiAgcmV0dXJuIGhhc2g7XG59XG5cblxudmFyIElERU5USUZJRVIgPSAvXlthLXokX11bYS16JF8wLTldKiQvaTtcbnZhciBTSU5HTEVfUVVPVEUgPSAvJ3xcXFxcL2c7XG5mdW5jdGlvbiBnZXRQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIHR5cGVvZiBrZXkgPT0gJ251bWJlcidcbiAgICAgICAgICA/ICdbJyArIGtleSArICddJ1xuICAgICAgICAgIDogSURFTlRJRklFUi50ZXN0KGtleSlcbiAgICAgICAgICAgID8gJy4nICsga2V5XG4gICAgICAgICAgICA6IFwiWydcIiArIGVzY2FwZVF1b3RlcyhrZXkpICsgXCInXVwiO1xufVxuXG5cbmZ1bmN0aW9uIGVzY2FwZVF1b3RlcyhzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKFNJTkdMRV9RVU9URSwgJ1xcXFwkJicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxuL2csICdcXFxcbicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxyL2csICdcXFxccicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxmL2csICdcXFxcZicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFx0L2csICdcXFxcdCcpO1xufVxuXG5cbmZ1bmN0aW9uIHZhck9jY3VyZW5jZXMoc3RyLCBkYXRhVmFyKSB7XG4gIGRhdGFWYXIgKz0gJ1teMC05XSc7XG4gIHZhciBtYXRjaGVzID0gc3RyLm1hdGNoKG5ldyBSZWdFeHAoZGF0YVZhciwgJ2cnKSk7XG4gIHJldHVybiBtYXRjaGVzID8gbWF0Y2hlcy5sZW5ndGggOiAwO1xufVxuXG5cbmZ1bmN0aW9uIHZhclJlcGxhY2Uoc3RyLCBkYXRhVmFyLCBleHByKSB7XG4gIGRhdGFWYXIgKz0gJyhbXjAtOV0pJztcbiAgZXhwciA9IGV4cHIucmVwbGFjZSgvXFwkL2csICckJCQkJyk7XG4gIHJldHVybiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKGRhdGFWYXIsICdnJyksIGV4cHIgKyAnJDEnKTtcbn1cblxuXG52YXIgRU1QVFlfRUxTRSA9IC9lbHNlXFxzKntcXHMqfS9nXG4gICwgRU1QVFlfSUZfTk9fRUxTRSA9IC9pZlxccypcXChbXildK1xcKVxccypcXHtcXHMqXFx9KD8hXFxzKmVsc2UpL2dcbiAgLCBFTVBUWV9JRl9XSVRIX0VMU0UgPSAvaWZcXHMqXFwoKFteKV0rKVxcKVxccypcXHtcXHMqXFx9XFxzKmVsc2UoPyFcXHMqaWYpL2c7XG5mdW5jdGlvbiBjbGVhblVwQ29kZShvdXQpIHtcbiAgcmV0dXJuIG91dC5yZXBsYWNlKEVNUFRZX0VMU0UsICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoRU1QVFlfSUZfTk9fRUxTRSwgJycpXG4gICAgICAgICAgICAucmVwbGFjZShFTVBUWV9JRl9XSVRIX0VMU0UsICdpZiAoISgkMSkpJyk7XG59XG5cblxudmFyIEVSUk9SU19SRUdFWFAgPSAvW152Ll1lcnJvcnMvZ1xuICAsIFJFTU9WRV9FUlJPUlMgPSAvdmFyIGVycm9ycyA9IDA7fHZhciB2RXJyb3JzID0gbnVsbDt8dmFsaWRhdGUuZXJyb3JzID0gdkVycm9yczsvZ1xuICAsIFJFTU9WRV9FUlJPUlNfQVNZTkMgPSAvdmFyIGVycm9ycyA9IDA7fHZhciB2RXJyb3JzID0gbnVsbDsvZ1xuICAsIFJFVFVSTl9WQUxJRCA9ICdyZXR1cm4gZXJyb3JzID09PSAwOydcbiAgLCBSRVRVUk5fVFJVRSA9ICd2YWxpZGF0ZS5lcnJvcnMgPSBudWxsOyByZXR1cm4gdHJ1ZTsnXG4gICwgUkVUVVJOX0FTWU5DID0gL2lmIFxcKGVycm9ycyA9PT0gMFxcKSByZXR1cm4gZGF0YTtcXHMqZWxzZSB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yXFwodkVycm9yc1xcKTsvXG4gICwgUkVUVVJOX0RBVEFfQVNZTkMgPSAncmV0dXJuIGRhdGE7J1xuICAsIFJPT1REQVRBX1JFR0VYUCA9IC9bXkEtWmEtel8kXXJvb3REYXRhW15BLVphLXowLTlfJF0vZ1xuICAsIFJFTU9WRV9ST09UREFUQSA9IC9pZiBcXChyb290RGF0YSA9PT0gdW5kZWZpbmVkXFwpIHJvb3REYXRhID0gZGF0YTsvO1xuXG5mdW5jdGlvbiBmaW5hbENsZWFuVXBDb2RlKG91dCwgYXN5bmMpIHtcbiAgdmFyIG1hdGNoZXMgPSBvdXQubWF0Y2goRVJST1JTX1JFR0VYUCk7XG4gIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID09IDIpIHtcbiAgICBvdXQgPSBhc3luY1xuICAgICAgICAgID8gb3V0LnJlcGxhY2UoUkVNT1ZFX0VSUk9SU19BU1lOQywgJycpXG4gICAgICAgICAgICAgICAucmVwbGFjZShSRVRVUk5fQVNZTkMsIFJFVFVSTl9EQVRBX0FTWU5DKVxuICAgICAgICAgIDogb3V0LnJlcGxhY2UoUkVNT1ZFX0VSUk9SUywgJycpXG4gICAgICAgICAgICAgICAucmVwbGFjZShSRVRVUk5fVkFMSUQsIFJFVFVSTl9UUlVFKTtcbiAgfVxuXG4gIG1hdGNoZXMgPSBvdXQubWF0Y2goUk9PVERBVEFfUkVHRVhQKTtcbiAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXMubGVuZ3RoICE9PSAzKSByZXR1cm4gb3V0O1xuICByZXR1cm4gb3V0LnJlcGxhY2UoUkVNT1ZFX1JPT1REQVRBLCAnJyk7XG59XG5cblxuZnVuY3Rpb24gc2NoZW1hSGFzUnVsZXMoc2NoZW1hLCBydWxlcykge1xuICBpZiAodHlwZW9mIHNjaGVtYSA9PSAnYm9vbGVhbicpIHJldHVybiAhc2NoZW1hO1xuICBmb3IgKHZhciBrZXkgaW4gc2NoZW1hKSBpZiAocnVsZXNba2V5XSkgcmV0dXJuIHRydWU7XG59XG5cblxuZnVuY3Rpb24gc2NoZW1hSGFzUnVsZXNFeGNlcHQoc2NoZW1hLCBydWxlcywgZXhjZXB0S2V5d29yZCkge1xuICBpZiAodHlwZW9mIHNjaGVtYSA9PSAnYm9vbGVhbicpIHJldHVybiAhc2NoZW1hICYmIGV4Y2VwdEtleXdvcmQgIT0gJ25vdCc7XG4gIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIGlmIChrZXkgIT0gZXhjZXB0S2V5d29yZCAmJiBydWxlc1trZXldKSByZXR1cm4gdHJ1ZTtcbn1cblxuXG5mdW5jdGlvbiB0b1F1b3RlZFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuICdcXCcnICsgZXNjYXBlUXVvdGVzKHN0cikgKyAnXFwnJztcbn1cblxuXG5mdW5jdGlvbiBnZXRQYXRoRXhwcihjdXJyZW50UGF0aCwgZXhwciwganNvblBvaW50ZXJzLCBpc051bWJlcikge1xuICB2YXIgcGF0aCA9IGpzb25Qb2ludGVycyAvLyBmYWxzZSBieSBkZWZhdWx0XG4gICAgICAgICAgICAgID8gJ1xcJy9cXCcgKyAnICsgZXhwciArIChpc051bWJlciA/ICcnIDogJy5yZXBsYWNlKC9+L2csIFxcJ34wXFwnKS5yZXBsYWNlKC9cXFxcLy9nLCBcXCd+MVxcJyknKVxuICAgICAgICAgICAgICA6IChpc051bWJlciA/ICdcXCdbXFwnICsgJyArIGV4cHIgKyAnICsgXFwnXVxcJycgOiAnXFwnW1xcXFxcXCdcXCcgKyAnICsgZXhwciArICcgKyBcXCdcXFxcXFwnXVxcJycpO1xuICByZXR1cm4gam9pblBhdGhzKGN1cnJlbnRQYXRoLCBwYXRoKTtcbn1cblxuXG5mdW5jdGlvbiBnZXRQYXRoKGN1cnJlbnRQYXRoLCBwcm9wLCBqc29uUG9pbnRlcnMpIHtcbiAgdmFyIHBhdGggPSBqc29uUG9pbnRlcnMgLy8gZmFsc2UgYnkgZGVmYXVsdFxuICAgICAgICAgICAgICA/IHRvUXVvdGVkU3RyaW5nKCcvJyArIGVzY2FwZUpzb25Qb2ludGVyKHByb3ApKVxuICAgICAgICAgICAgICA6IHRvUXVvdGVkU3RyaW5nKGdldFByb3BlcnR5KHByb3ApKTtcbiAgcmV0dXJuIGpvaW5QYXRocyhjdXJyZW50UGF0aCwgcGF0aCk7XG59XG5cblxudmFyIEpTT05fUE9JTlRFUiA9IC9eXFwvKD86W15+XXx+MHx+MSkqJC87XG52YXIgUkVMQVRJVkVfSlNPTl9QT0lOVEVSID0gL14oWzAtOV0rKSgjfFxcLyg/Oltefl18fjB8fjEpKik/JC87XG5mdW5jdGlvbiBnZXREYXRhKCRkYXRhLCBsdmwsIHBhdGhzKSB7XG4gIHZhciB1cCwganNvblBvaW50ZXIsIGRhdGEsIG1hdGNoZXM7XG4gIGlmICgkZGF0YSA9PT0gJycpIHJldHVybiAncm9vdERhdGEnO1xuICBpZiAoJGRhdGFbMF0gPT0gJy8nKSB7XG4gICAgaWYgKCFKU09OX1BPSU5URVIudGVzdCgkZGF0YSkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBKU09OLXBvaW50ZXI6ICcgKyAkZGF0YSk7XG4gICAganNvblBvaW50ZXIgPSAkZGF0YTtcbiAgICBkYXRhID0gJ3Jvb3REYXRhJztcbiAgfSBlbHNlIHtcbiAgICBtYXRjaGVzID0gJGRhdGEubWF0Y2goUkVMQVRJVkVfSlNPTl9QT0lOVEVSKTtcbiAgICBpZiAoIW1hdGNoZXMpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBKU09OLXBvaW50ZXI6ICcgKyAkZGF0YSk7XG4gICAgdXAgPSArbWF0Y2hlc1sxXTtcbiAgICBqc29uUG9pbnRlciA9IG1hdGNoZXNbMl07XG4gICAgaWYgKGpzb25Qb2ludGVyID09ICcjJykge1xuICAgICAgaWYgKHVwID49IGx2bCkgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYWNjZXNzIHByb3BlcnR5L2luZGV4ICcgKyB1cCArICcgbGV2ZWxzIHVwLCBjdXJyZW50IGxldmVsIGlzICcgKyBsdmwpO1xuICAgICAgcmV0dXJuIHBhdGhzW2x2bCAtIHVwXTtcbiAgICB9XG5cbiAgICBpZiAodXAgPiBsdmwpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFjY2VzcyBkYXRhICcgKyB1cCArICcgbGV2ZWxzIHVwLCBjdXJyZW50IGxldmVsIGlzICcgKyBsdmwpO1xuICAgIGRhdGEgPSAnZGF0YScgKyAoKGx2bCAtIHVwKSB8fCAnJyk7XG4gICAgaWYgKCFqc29uUG9pbnRlcikgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgZXhwciA9IGRhdGE7XG4gIHZhciBzZWdtZW50cyA9IGpzb25Qb2ludGVyLnNwbGl0KCcvJyk7XG4gIGZvciAodmFyIGk9MDsgaTxzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgIGRhdGEgKz0gZ2V0UHJvcGVydHkodW5lc2NhcGVKc29uUG9pbnRlcihzZWdtZW50KSk7XG4gICAgICBleHByICs9ICcgJiYgJyArIGRhdGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBleHByO1xufVxuXG5cbmZ1bmN0aW9uIGpvaW5QYXRocyAoYSwgYikge1xuICBpZiAoYSA9PSAnXCJcIicpIHJldHVybiBiO1xuICByZXR1cm4gKGEgKyAnICsgJyArIGIpLnJlcGxhY2UoLycgXFwrICcvZywgJycpO1xufVxuXG5cbmZ1bmN0aW9uIHVuZXNjYXBlRnJhZ21lbnQoc3RyKSB7XG4gIHJldHVybiB1bmVzY2FwZUpzb25Qb2ludGVyKGRlY29kZVVSSUNvbXBvbmVudChzdHIpKTtcbn1cblxuXG5mdW5jdGlvbiBlc2NhcGVGcmFnbWVudChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChlc2NhcGVKc29uUG9pbnRlcihzdHIpKTtcbn1cblxuXG5mdW5jdGlvbiBlc2NhcGVKc29uUG9pbnRlcihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9+L2csICd+MCcpLnJlcGxhY2UoL1xcLy9nLCAnfjEnKTtcbn1cblxuXG5mdW5jdGlvbiB1bmVzY2FwZUpzb25Qb2ludGVyKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL34xL2csICcvJykucmVwbGFjZSgvfjAvZywgJ34nKTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJxdWVyeXN0cmluZ1wiKTsiLCIvLyBDb3B5cmlnaHQgMjAxOCBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSBGaW5nZXJwcmludDtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuL2FsZ3MnKTtcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbnZhciBlcnJzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbnZhciBLZXkgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuL3ByaXZhdGUta2V5Jyk7XG52YXIgQ2VydGlmaWNhdGUgPSByZXF1aXJlKCcuL2NlcnRpZmljYXRlJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBGaW5nZXJwcmludEZvcm1hdEVycm9yID0gZXJycy5GaW5nZXJwcmludEZvcm1hdEVycm9yO1xudmFyIEludmFsaWRBbGdvcml0aG1FcnJvciA9IGVycnMuSW52YWxpZEFsZ29yaXRobUVycm9yO1xuXG5mdW5jdGlvbiBGaW5nZXJwcmludChvcHRzKSB7XG5cdGFzc2VydC5vYmplY3Qob3B0cywgJ29wdGlvbnMnKTtcblx0YXNzZXJ0LnN0cmluZyhvcHRzLnR5cGUsICdvcHRpb25zLnR5cGUnKTtcblx0YXNzZXJ0LmJ1ZmZlcihvcHRzLmhhc2gsICdvcHRpb25zLmhhc2gnKTtcblx0YXNzZXJ0LnN0cmluZyhvcHRzLmFsZ29yaXRobSwgJ29wdGlvbnMuYWxnb3JpdGhtJyk7XG5cblx0dGhpcy5hbGdvcml0aG0gPSBvcHRzLmFsZ29yaXRobS50b0xvd2VyQ2FzZSgpO1xuXHRpZiAoYWxncy5oYXNoQWxnc1t0aGlzLmFsZ29yaXRobV0gIT09IHRydWUpXG5cdFx0dGhyb3cgKG5ldyBJbnZhbGlkQWxnb3JpdGhtRXJyb3IodGhpcy5hbGdvcml0aG0pKTtcblxuXHR0aGlzLmhhc2ggPSBvcHRzLmhhc2g7XG5cdHRoaXMudHlwZSA9IG9wdHMudHlwZTtcblx0dGhpcy5oYXNoVHlwZSA9IG9wdHMuaGFzaFR5cGU7XG59XG5cbkZpbmdlcnByaW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcblx0aWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0aWYgKHRoaXMuYWxnb3JpdGhtID09PSAnbWQ1JyB8fCB0aGlzLmhhc2hUeXBlID09PSAnc3BraScpXG5cdFx0XHRmb3JtYXQgPSAnaGV4Jztcblx0XHRlbHNlXG5cdFx0XHRmb3JtYXQgPSAnYmFzZTY0Jztcblx0fVxuXHRhc3NlcnQuc3RyaW5nKGZvcm1hdCk7XG5cblx0c3dpdGNoIChmb3JtYXQpIHtcblx0Y2FzZSAnaGV4Jzpcblx0XHRpZiAodGhpcy5oYXNoVHlwZSA9PT0gJ3Nwa2knKVxuXHRcdFx0cmV0dXJuICh0aGlzLmhhc2gudG9TdHJpbmcoJ2hleCcpKTtcblx0XHRyZXR1cm4gKGFkZENvbG9ucyh0aGlzLmhhc2gudG9TdHJpbmcoJ2hleCcpKSk7XG5cdGNhc2UgJ2Jhc2U2NCc6XG5cdFx0aWYgKHRoaXMuaGFzaFR5cGUgPT09ICdzcGtpJylcblx0XHRcdHJldHVybiAodGhpcy5oYXNoLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG5cdFx0cmV0dXJuIChzc2hCYXNlNjRGb3JtYXQodGhpcy5hbGdvcml0aG0sXG5cdFx0ICAgIHRoaXMuaGFzaC50b1N0cmluZygnYmFzZTY0JykpKTtcblx0ZGVmYXVsdDpcblx0XHR0aHJvdyAobmV3IEZpbmdlcnByaW50Rm9ybWF0RXJyb3IodW5kZWZpbmVkLCBmb3JtYXQpKTtcblx0fVxufTtcblxuRmluZ2VycHJpbnQucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbiAob3RoZXIpIHtcblx0YXNzZXJ0Lm9iamVjdChvdGhlciwgJ2tleSBvciBjZXJ0aWZpY2F0ZScpO1xuXHRpZiAodGhpcy50eXBlID09PSAna2V5JyAmJiB0aGlzLmhhc2hUeXBlICE9PSAnc3NoJykge1xuXHRcdHV0aWxzLmFzc2VydENvbXBhdGlibGUob3RoZXIsIEtleSwgWzEsIDddLCAna2V5IHdpdGggc3BraScpO1xuXHRcdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShvdGhlcikpIHtcblx0XHRcdHV0aWxzLmFzc2VydENvbXBhdGlibGUob3RoZXIsIFByaXZhdGVLZXksIFsxLCA2XSxcblx0XHRcdCAgICAncHJpdmF0ZWtleSB3aXRoIHNwa2kgc3VwcG9ydCcpO1xuXHRcdH1cblx0fSBlbHNlIGlmICh0aGlzLnR5cGUgPT09ICdrZXknKSB7XG5cdFx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShvdGhlciwgS2V5LCBbMSwgMF0sICdrZXknKTtcblx0fSBlbHNlIHtcblx0XHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKG90aGVyLCBDZXJ0aWZpY2F0ZSwgWzEsIDBdLFxuXHRcdCAgICAnY2VydGlmaWNhdGUnKTtcblx0fVxuXG5cdHZhciB0aGVpckhhc2ggPSBvdGhlci5oYXNoKHRoaXMuYWxnb3JpdGhtLCB0aGlzLmhhc2hUeXBlKTtcblx0dmFyIHRoZWlySGFzaDIgPSBjcnlwdG8uY3JlYXRlSGFzaCh0aGlzLmFsZ29yaXRobSkuXG5cdCAgICB1cGRhdGUodGhlaXJIYXNoKS5kaWdlc3QoJ2Jhc2U2NCcpO1xuXG5cdGlmICh0aGlzLmhhc2gyID09PSB1bmRlZmluZWQpXG5cdFx0dGhpcy5oYXNoMiA9IGNyeXB0by5jcmVhdGVIYXNoKHRoaXMuYWxnb3JpdGhtKS5cblx0XHQgICAgdXBkYXRlKHRoaXMuaGFzaCkuZGlnZXN0KCdiYXNlNjQnKTtcblxuXHRyZXR1cm4gKHRoaXMuaGFzaDIgPT09IHRoZWlySGFzaDIpO1xufTtcblxuLypKU1NUWUxFRCovXG52YXIgYmFzZTY0UkUgPSAvXltBLVphLXowLTkrXFwvPV0rJC87XG4vKkpTU1RZTEVEKi9cbnZhciBoZXhSRSA9IC9eW2EtZkEtRjAtOV0rJC87XG5cbkZpbmdlcnByaW50LnBhcnNlID0gZnVuY3Rpb24gKGZwLCBvcHRpb25zKSB7XG5cdGFzc2VydC5zdHJpbmcoZnAsICdmaW5nZXJwcmludCcpO1xuXG5cdHZhciBhbGcsIGhhc2gsIGVuQWxncztcblx0aWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcblx0XHRlbkFsZ3MgPSBvcHRpb25zO1xuXHRcdG9wdGlvbnMgPSB7fTtcblx0fVxuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucywgJ29wdGlvbnMnKTtcblx0aWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZClcblx0XHRvcHRpb25zID0ge307XG5cdGlmIChvcHRpb25zLmVuQWxncyAhPT0gdW5kZWZpbmVkKVxuXHRcdGVuQWxncyA9IG9wdGlvbnMuZW5BbGdzO1xuXHRpZiAob3B0aW9ucy5hbGdvcml0aG1zICE9PSB1bmRlZmluZWQpXG5cdFx0ZW5BbGdzID0gb3B0aW9ucy5hbGdvcml0aG1zO1xuXHRhc3NlcnQub3B0aW9uYWxBcnJheU9mU3RyaW5nKGVuQWxncywgJ2FsZ29yaXRobXMnKTtcblxuXHR2YXIgaGFzaFR5cGUgPSAnc3NoJztcblx0aWYgKG9wdGlvbnMuaGFzaFR5cGUgIT09IHVuZGVmaW5lZClcblx0XHRoYXNoVHlwZSA9IG9wdGlvbnMuaGFzaFR5cGU7XG5cdGFzc2VydC5zdHJpbmcoaGFzaFR5cGUsICdvcHRpb25zLmhhc2hUeXBlJyk7XG5cblx0dmFyIHBhcnRzID0gZnAuc3BsaXQoJzonKTtcblx0aWYgKHBhcnRzLmxlbmd0aCA9PSAyKSB7XG5cdFx0YWxnID0gcGFydHNbMF0udG9Mb3dlckNhc2UoKTtcblx0XHRpZiAoIWJhc2U2NFJFLnRlc3QocGFydHNbMV0pKVxuXHRcdFx0dGhyb3cgKG5ldyBGaW5nZXJwcmludEZvcm1hdEVycm9yKGZwKSk7XG5cdFx0dHJ5IHtcblx0XHRcdGhhc2ggPSBCdWZmZXIuZnJvbShwYXJ0c1sxXSwgJ2Jhc2U2NCcpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHRocm93IChuZXcgRmluZ2VycHJpbnRGb3JtYXRFcnJvcihmcCkpO1xuXHRcdH1cblx0fSBlbHNlIGlmIChwYXJ0cy5sZW5ndGggPiAyKSB7XG5cdFx0YWxnID0gJ21kNSc7XG5cdFx0aWYgKHBhcnRzWzBdLnRvTG93ZXJDYXNlKCkgPT09ICdtZDUnKVxuXHRcdFx0cGFydHMgPSBwYXJ0cy5zbGljZSgxKTtcblx0XHRwYXJ0cyA9IHBhcnRzLm1hcChmdW5jdGlvbiAocCkge1xuXHRcdFx0d2hpbGUgKHAubGVuZ3RoIDwgMilcblx0XHRcdFx0cCA9ICcwJyArIHA7XG5cdFx0XHRpZiAocC5sZW5ndGggPiAyKVxuXHRcdFx0XHR0aHJvdyAobmV3IEZpbmdlcnByaW50Rm9ybWF0RXJyb3IoZnApKTtcblx0XHRcdHJldHVybiAocCk7XG5cdFx0fSk7XG5cdFx0cGFydHMgPSBwYXJ0cy5qb2luKCcnKTtcblx0XHRpZiAoIWhleFJFLnRlc3QocGFydHMpIHx8IHBhcnRzLmxlbmd0aCAlIDIgIT09IDApXG5cdFx0XHR0aHJvdyAobmV3IEZpbmdlcnByaW50Rm9ybWF0RXJyb3IoZnApKTtcblx0XHR0cnkge1xuXHRcdFx0aGFzaCA9IEJ1ZmZlci5mcm9tKHBhcnRzLCAnaGV4Jyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0dGhyb3cgKG5ldyBGaW5nZXJwcmludEZvcm1hdEVycm9yKGZwKSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGlmIChoZXhSRS50ZXN0KGZwKSkge1xuXHRcdFx0aGFzaCA9IEJ1ZmZlci5mcm9tKGZwLCAnaGV4Jyk7XG5cdFx0fSBlbHNlIGlmIChiYXNlNjRSRS50ZXN0KGZwKSkge1xuXHRcdFx0aGFzaCA9IEJ1ZmZlci5mcm9tKGZwLCAnYmFzZTY0Jyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IChuZXcgRmluZ2VycHJpbnRGb3JtYXRFcnJvcihmcCkpO1xuXHRcdH1cblxuXHRcdHN3aXRjaCAoaGFzaC5sZW5ndGgpIHtcblx0XHRjYXNlIDMyOlxuXHRcdFx0YWxnID0gJ3NoYTI1Nic7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDE2OlxuXHRcdFx0YWxnID0gJ21kNSc7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDIwOlxuXHRcdFx0YWxnID0gJ3NoYTEnO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSA2NDpcblx0XHRcdGFsZyA9ICdzaGE1MTInO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IChuZXcgRmluZ2VycHJpbnRGb3JtYXRFcnJvcihmcCkpO1xuXHRcdH1cblxuXHRcdC8qIFBsYWluIGhleC9iYXNlNjQ6IGd1ZXNzIGl0J3MgcHJvYmFibHkgU1BLSSB1bmxlc3MgdG9sZC4gKi9cblx0XHRpZiAob3B0aW9ucy5oYXNoVHlwZSA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0aGFzaFR5cGUgPSAnc3BraSc7XG5cdH1cblxuXHRpZiAoYWxnID09PSB1bmRlZmluZWQpXG5cdFx0dGhyb3cgKG5ldyBGaW5nZXJwcmludEZvcm1hdEVycm9yKGZwKSk7XG5cblx0aWYgKGFsZ3MuaGFzaEFsZ3NbYWxnXSA9PT0gdW5kZWZpbmVkKVxuXHRcdHRocm93IChuZXcgSW52YWxpZEFsZ29yaXRobUVycm9yKGFsZykpO1xuXG5cdGlmIChlbkFsZ3MgIT09IHVuZGVmaW5lZCkge1xuXHRcdGVuQWxncyA9IGVuQWxncy5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEudG9Mb3dlckNhc2UoKTsgfSk7XG5cdFx0aWYgKGVuQWxncy5pbmRleE9mKGFsZykgPT09IC0xKVxuXHRcdFx0dGhyb3cgKG5ldyBJbnZhbGlkQWxnb3JpdGhtRXJyb3IoYWxnKSk7XG5cdH1cblxuXHRyZXR1cm4gKG5ldyBGaW5nZXJwcmludCh7XG5cdFx0YWxnb3JpdGhtOiBhbGcsXG5cdFx0aGFzaDogaGFzaCxcblx0XHR0eXBlOiBvcHRpb25zLnR5cGUgfHwgJ2tleScsXG5cdFx0aGFzaFR5cGU6IGhhc2hUeXBlXG5cdH0pKTtcbn07XG5cbmZ1bmN0aW9uIGFkZENvbG9ucyhzKSB7XG5cdC8qSlNTVFlMRUQqL1xuXHRyZXR1cm4gKHMucmVwbGFjZSgvKC57Mn0pKD89LikvZywgJyQxOicpKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0U3RyaXAocykge1xuXHQvKkpTU1RZTEVEKi9cblx0cmV0dXJuIChzLnJlcGxhY2UoLz0qJC8sICcnKSk7XG59XG5cbmZ1bmN0aW9uIHNzaEJhc2U2NEZvcm1hdChhbGcsIGgpIHtcblx0cmV0dXJuIChhbGcudG9VcHBlckNhc2UoKSArICc6JyArIGJhc2U2NFN0cmlwKGgpKTtcbn1cblxuRmluZ2VycHJpbnQuaXNGaW5nZXJwcmludCA9IGZ1bmN0aW9uIChvYmosIHZlcikge1xuXHRyZXR1cm4gKHV0aWxzLmlzQ29tcGF0aWJsZShvYmosIEZpbmdlcnByaW50LCB2ZXIpKTtcbn07XG5cbi8qXG4gKiBBUEkgdmVyc2lvbnMgZm9yIEZpbmdlcnByaW50OlxuICogWzEsMF0gLS0gaW5pdGlhbCB2ZXJcbiAqIFsxLDFdIC0tIGZpcnN0IHRhZ2dlZCB2ZXJcbiAqIFsxLDJdIC0tIGhhc2hUeXBlIGFuZCBzcGtpIHN1cHBvcnRcbiAqL1xuRmluZ2VycHJpbnQucHJvdG90eXBlLl9zc2hwa0FwaVZlcnNpb24gPSBbMSwgMl07XG5cbkZpbmdlcnByaW50Ll9vbGRWZXJzaW9uRGV0ZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuXHRhc3NlcnQuZnVuYyhvYmoudG9TdHJpbmcpO1xuXHRhc3NlcnQuZnVuYyhvYmoubWF0Y2hlcyk7XG5cdHJldHVybiAoWzEsIDBdKTtcbn07XG4iLCIoZnVuY3Rpb24oKXtcblxuICAgIC8vIENvcHlyaWdodCAoYykgMjAwNSAgVG9tIFd1XG4gICAgLy8gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAgICAvLyBTZWUgXCJMSUNFTlNFXCIgZm9yIGRldGFpbHMuXG5cbiAgICAvLyBCYXNpYyBKYXZhU2NyaXB0IEJOIGxpYnJhcnkgLSBzdWJzZXQgdXNlZnVsIGZvciBSU0EgZW5jcnlwdGlvbi5cblxuICAgIC8vIEJpdHMgcGVyIGRpZ2l0XG4gICAgdmFyIGRiaXRzO1xuXG4gICAgLy8gSmF2YVNjcmlwdCBlbmdpbmUgYW5hbHlzaXNcbiAgICB2YXIgY2FuYXJ5ID0gMHhkZWFkYmVlZmNhZmU7XG4gICAgdmFyIGpfbG0gPSAoKGNhbmFyeSYweGZmZmZmZik9PTB4ZWZjYWZlKTtcblxuICAgIC8vIChwdWJsaWMpIENvbnN0cnVjdG9yXG4gICAgZnVuY3Rpb24gQmlnSW50ZWdlcihhLGIsYykge1xuICAgICAgaWYoYSAhPSBudWxsKVxuICAgICAgICBpZihcIm51bWJlclwiID09IHR5cGVvZiBhKSB0aGlzLmZyb21OdW1iZXIoYSxiLGMpO1xuICAgICAgICBlbHNlIGlmKGIgPT0gbnVsbCAmJiBcInN0cmluZ1wiICE9IHR5cGVvZiBhKSB0aGlzLmZyb21TdHJpbmcoYSwyNTYpO1xuICAgICAgICBlbHNlIHRoaXMuZnJvbVN0cmluZyhhLGIpO1xuICAgIH1cblxuICAgIC8vIHJldHVybiBuZXcsIHVuc2V0IEJpZ0ludGVnZXJcbiAgICBmdW5jdGlvbiBuYmkoKSB7IHJldHVybiBuZXcgQmlnSW50ZWdlcihudWxsKTsgfVxuXG4gICAgLy8gYW06IENvbXB1dGUgd19qICs9ICh4KnRoaXNfaSksIHByb3BhZ2F0ZSBjYXJyaWVzLFxuICAgIC8vIGMgaXMgaW5pdGlhbCBjYXJyeSwgcmV0dXJucyBmaW5hbCBjYXJyeS5cbiAgICAvLyBjIDwgMypkdmFsdWUsIHggPCAyKmR2YWx1ZSwgdGhpc19pIDwgZHZhbHVlXG4gICAgLy8gV2UgbmVlZCB0byBzZWxlY3QgdGhlIGZhc3Rlc3Qgb25lIHRoYXQgd29ya3MgaW4gdGhpcyBlbnZpcm9ubWVudC5cblxuICAgIC8vIGFtMTogdXNlIGEgc2luZ2xlIG11bHQgYW5kIGRpdmlkZSB0byBnZXQgdGhlIGhpZ2ggYml0cyxcbiAgICAvLyBtYXggZGlnaXQgYml0cyBzaG91bGQgYmUgMjYgYmVjYXVzZVxuICAgIC8vIG1heCBpbnRlcm5hbCB2YWx1ZSA9IDIqZHZhbHVlXjItMipkdmFsdWUgKDwgMl41MylcbiAgICBmdW5jdGlvbiBhbTEoaSx4LHcsaixjLG4pIHtcbiAgICAgIHdoaWxlKC0tbiA+PSAwKSB7XG4gICAgICAgIHZhciB2ID0geCp0aGlzW2krK10rd1tqXStjO1xuICAgICAgICBjID0gTWF0aC5mbG9vcih2LzB4NDAwMDAwMCk7XG4gICAgICAgIHdbaisrXSA9IHYmMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIC8vIGFtMiBhdm9pZHMgYSBiaWcgbXVsdC1hbmQtZXh0cmFjdCBjb21wbGV0ZWx5LlxuICAgIC8vIE1heCBkaWdpdCBiaXRzIHNob3VsZCBiZSA8PSAzMCBiZWNhdXNlIHdlIGRvIGJpdHdpc2Ugb3BzXG4gICAgLy8gb24gdmFsdWVzIHVwIHRvIDIqaGR2YWx1ZV4yLWhkdmFsdWUtMSAoPCAyXjMxKVxuICAgIGZ1bmN0aW9uIGFtMihpLHgsdyxqLGMsbikge1xuICAgICAgdmFyIHhsID0geCYweDdmZmYsIHhoID0geD4+MTU7XG4gICAgICB3aGlsZSgtLW4gPj0gMCkge1xuICAgICAgICB2YXIgbCA9IHRoaXNbaV0mMHg3ZmZmO1xuICAgICAgICB2YXIgaCA9IHRoaXNbaSsrXT4+MTU7XG4gICAgICAgIHZhciBtID0geGgqbCtoKnhsO1xuICAgICAgICBsID0geGwqbCsoKG0mMHg3ZmZmKTw8MTUpK3dbal0rKGMmMHgzZmZmZmZmZik7XG4gICAgICAgIGMgPSAobD4+PjMwKSsobT4+PjE1KSt4aCpoKyhjPj4+MzApO1xuICAgICAgICB3W2orK10gPSBsJjB4M2ZmZmZmZmY7XG4gICAgICB9XG4gICAgICByZXR1cm4gYztcbiAgICB9XG4gICAgLy8gQWx0ZXJuYXRlbHksIHNldCBtYXggZGlnaXQgYml0cyB0byAyOCBzaW5jZSBzb21lXG4gICAgLy8gYnJvd3NlcnMgc2xvdyBkb3duIHdoZW4gZGVhbGluZyB3aXRoIDMyLWJpdCBudW1iZXJzLlxuICAgIGZ1bmN0aW9uIGFtMyhpLHgsdyxqLGMsbikge1xuICAgICAgdmFyIHhsID0geCYweDNmZmYsIHhoID0geD4+MTQ7XG4gICAgICB3aGlsZSgtLW4gPj0gMCkge1xuICAgICAgICB2YXIgbCA9IHRoaXNbaV0mMHgzZmZmO1xuICAgICAgICB2YXIgaCA9IHRoaXNbaSsrXT4+MTQ7XG4gICAgICAgIHZhciBtID0geGgqbCtoKnhsO1xuICAgICAgICBsID0geGwqbCsoKG0mMHgzZmZmKTw8MTQpK3dbal0rYztcbiAgICAgICAgYyA9IChsPj4yOCkrKG0+PjE0KSt4aCpoO1xuICAgICAgICB3W2orK10gPSBsJjB4ZmZmZmZmZjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgICB2YXIgaW5Ccm93c2VyID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICBpZihpbkJyb3dzZXIgJiYgal9sbSAmJiAobmF2aWdhdG9yLmFwcE5hbWUgPT0gXCJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXJcIikpIHtcbiAgICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFtID0gYW0yO1xuICAgICAgZGJpdHMgPSAzMDtcbiAgICB9XG4gICAgZWxzZSBpZihpbkJyb3dzZXIgJiYgal9sbSAmJiAobmF2aWdhdG9yLmFwcE5hbWUgIT0gXCJOZXRzY2FwZVwiKSkge1xuICAgICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBhbTE7XG4gICAgICBkYml0cyA9IDI2O1xuICAgIH1cbiAgICBlbHNlIHsgLy8gTW96aWxsYS9OZXRzY2FwZSBzZWVtcyB0byBwcmVmZXIgYW0zXG4gICAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMztcbiAgICAgIGRiaXRzID0gMjg7XG4gICAgfVxuXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuREIgPSBkYml0cztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5ETSA9ICgoMTw8ZGJpdHMpLTEpO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLkRWID0gKDE8PGRiaXRzKTtcblxuICAgIHZhciBCSV9GUCA9IDUyO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLkZWID0gTWF0aC5wb3coMixCSV9GUCk7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuRjEgPSBCSV9GUC1kYml0cztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5GMiA9IDIqZGJpdHMtQklfRlA7XG5cbiAgICAvLyBEaWdpdCBjb252ZXJzaW9uc1xuICAgIHZhciBCSV9STSA9IFwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG4gICAgdmFyIEJJX1JDID0gbmV3IEFycmF5KCk7XG4gICAgdmFyIHJyLHZ2O1xuICAgIHJyID0gXCIwXCIuY2hhckNvZGVBdCgwKTtcbiAgICBmb3IodnYgPSAwOyB2diA8PSA5OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2O1xuICAgIHJyID0gXCJhXCIuY2hhckNvZGVBdCgwKTtcbiAgICBmb3IodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2djtcbiAgICByciA9IFwiQVwiLmNoYXJDb2RlQXQoMCk7XG4gICAgZm9yKHZ2ID0gMTA7IHZ2IDwgMzY7ICsrdnYpIEJJX1JDW3JyKytdID0gdnY7XG5cbiAgICBmdW5jdGlvbiBpbnQyY2hhcihuKSB7IHJldHVybiBCSV9STS5jaGFyQXQobik7IH1cbiAgICBmdW5jdGlvbiBpbnRBdChzLGkpIHtcbiAgICAgIHZhciBjID0gQklfUkNbcy5jaGFyQ29kZUF0KGkpXTtcbiAgICAgIHJldHVybiAoYz09bnVsbCk/LTE6YztcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSBjb3B5IHRoaXMgdG8gclxuICAgIGZ1bmN0aW9uIGJucENvcHlUbyhyKSB7XG4gICAgICBmb3IodmFyIGkgPSB0aGlzLnQtMTsgaSA+PSAwOyAtLWkpIHJbaV0gPSB0aGlzW2ldO1xuICAgICAgci50ID0gdGhpcy50O1xuICAgICAgci5zID0gdGhpcy5zO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHNldCBmcm9tIGludGVnZXIgdmFsdWUgeCwgLURWIDw9IHggPCBEVlxuICAgIGZ1bmN0aW9uIGJucEZyb21JbnQoeCkge1xuICAgICAgdGhpcy50ID0gMTtcbiAgICAgIHRoaXMucyA9ICh4PDApPy0xOjA7XG4gICAgICBpZih4ID4gMCkgdGhpc1swXSA9IHg7XG4gICAgICBlbHNlIGlmKHggPCAtMSkgdGhpc1swXSA9IHgrdGhpcy5EVjtcbiAgICAgIGVsc2UgdGhpcy50ID0gMDtcbiAgICB9XG5cbiAgICAvLyByZXR1cm4gYmlnaW50IGluaXRpYWxpemVkIHRvIHZhbHVlXG4gICAgZnVuY3Rpb24gbmJ2KGkpIHsgdmFyIHIgPSBuYmkoKTsgci5mcm9tSW50KGkpOyByZXR1cm4gcjsgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgc2V0IGZyb20gc3RyaW5nIGFuZCByYWRpeFxuICAgIGZ1bmN0aW9uIGJucEZyb21TdHJpbmcocyxiKSB7XG4gICAgICB2YXIgaztcbiAgICAgIGlmKGIgPT0gMTYpIGsgPSA0O1xuICAgICAgZWxzZSBpZihiID09IDgpIGsgPSAzO1xuICAgICAgZWxzZSBpZihiID09IDI1NikgayA9IDg7IC8vIGJ5dGUgYXJyYXlcbiAgICAgIGVsc2UgaWYoYiA9PSAyKSBrID0gMTtcbiAgICAgIGVsc2UgaWYoYiA9PSAzMikgayA9IDU7XG4gICAgICBlbHNlIGlmKGIgPT0gNCkgayA9IDI7XG4gICAgICBlbHNlIHsgdGhpcy5mcm9tUmFkaXgocyxiKTsgcmV0dXJuOyB9XG4gICAgICB0aGlzLnQgPSAwO1xuICAgICAgdGhpcy5zID0gMDtcbiAgICAgIHZhciBpID0gcy5sZW5ndGgsIG1pID0gZmFsc2UsIHNoID0gMDtcbiAgICAgIHdoaWxlKC0taSA+PSAwKSB7XG4gICAgICAgIHZhciB4ID0gKGs9PTgpP3NbaV0mMHhmZjppbnRBdChzLGkpO1xuICAgICAgICBpZih4IDwgMCkge1xuICAgICAgICAgIGlmKHMuY2hhckF0KGkpID09IFwiLVwiKSBtaSA9IHRydWU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbWkgPSBmYWxzZTtcbiAgICAgICAgaWYoc2ggPT0gMClcbiAgICAgICAgICB0aGlzW3RoaXMudCsrXSA9IHg7XG4gICAgICAgIGVsc2UgaWYoc2grayA+IHRoaXMuREIpIHtcbiAgICAgICAgICB0aGlzW3RoaXMudC0xXSB8PSAoeCYoKDE8PCh0aGlzLkRCLXNoKSktMSkpPDxzaDtcbiAgICAgICAgICB0aGlzW3RoaXMudCsrXSA9ICh4Pj4odGhpcy5EQi1zaCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aGlzW3RoaXMudC0xXSB8PSB4PDxzaDtcbiAgICAgICAgc2ggKz0gaztcbiAgICAgICAgaWYoc2ggPj0gdGhpcy5EQikgc2ggLT0gdGhpcy5EQjtcbiAgICAgIH1cbiAgICAgIGlmKGsgPT0gOCAmJiAoc1swXSYweDgwKSAhPSAwKSB7XG4gICAgICAgIHRoaXMucyA9IC0xO1xuICAgICAgICBpZihzaCA+IDApIHRoaXNbdGhpcy50LTFdIHw9ICgoMTw8KHRoaXMuREItc2gpKS0xKTw8c2g7XG4gICAgICB9XG4gICAgICB0aGlzLmNsYW1wKCk7XG4gICAgICBpZihtaSkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsdGhpcyk7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgY2xhbXAgb2ZmIGV4Y2VzcyBoaWdoIHdvcmRzXG4gICAgZnVuY3Rpb24gYm5wQ2xhbXAoKSB7XG4gICAgICB2YXIgYyA9IHRoaXMucyZ0aGlzLkRNO1xuICAgICAgd2hpbGUodGhpcy50ID4gMCAmJiB0aGlzW3RoaXMudC0xXSA9PSBjKSAtLXRoaXMudDtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSByZXR1cm4gc3RyaW5nIHJlcHJlc2VudGF0aW9uIGluIGdpdmVuIHJhZGl4XG4gICAgZnVuY3Rpb24gYm5Ub1N0cmluZyhiKSB7XG4gICAgICBpZih0aGlzLnMgPCAwKSByZXR1cm4gXCItXCIrdGhpcy5uZWdhdGUoKS50b1N0cmluZyhiKTtcbiAgICAgIHZhciBrO1xuICAgICAgaWYoYiA9PSAxNikgayA9IDQ7XG4gICAgICBlbHNlIGlmKGIgPT0gOCkgayA9IDM7XG4gICAgICBlbHNlIGlmKGIgPT0gMikgayA9IDE7XG4gICAgICBlbHNlIGlmKGIgPT0gMzIpIGsgPSA1O1xuICAgICAgZWxzZSBpZihiID09IDQpIGsgPSAyO1xuICAgICAgZWxzZSByZXR1cm4gdGhpcy50b1JhZGl4KGIpO1xuICAgICAgdmFyIGttID0gKDE8PGspLTEsIGQsIG0gPSBmYWxzZSwgciA9IFwiXCIsIGkgPSB0aGlzLnQ7XG4gICAgICB2YXIgcCA9IHRoaXMuREItKGkqdGhpcy5EQiklaztcbiAgICAgIGlmKGktLSA+IDApIHtcbiAgICAgICAgaWYocCA8IHRoaXMuREIgJiYgKGQgPSB0aGlzW2ldPj5wKSA+IDApIHsgbSA9IHRydWU7IHIgPSBpbnQyY2hhcihkKTsgfVxuICAgICAgICB3aGlsZShpID49IDApIHtcbiAgICAgICAgICBpZihwIDwgaykge1xuICAgICAgICAgICAgZCA9ICh0aGlzW2ldJigoMTw8cCktMSkpPDwoay1wKTtcbiAgICAgICAgICAgIGQgfD0gdGhpc1stLWldPj4ocCs9dGhpcy5EQi1rKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkID0gKHRoaXNbaV0+PihwLT1rKSkma207XG4gICAgICAgICAgICBpZihwIDw9IDApIHsgcCArPSB0aGlzLkRCOyAtLWk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZCA+IDApIG0gPSB0cnVlO1xuICAgICAgICAgIGlmKG0pIHIgKz0gaW50MmNoYXIoZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtP3I6XCIwXCI7XG4gICAgfVxuXG4gICAgLy8gKHB1YmxpYykgLXRoaXNcbiAgICBmdW5jdGlvbiBibk5lZ2F0ZSgpIHsgdmFyIHIgPSBuYmkoKTsgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMscik7IHJldHVybiByOyB9XG5cbiAgICAvLyAocHVibGljKSB8dGhpc3xcbiAgICBmdW5jdGlvbiBibkFicygpIHsgcmV0dXJuICh0aGlzLnM8MCk/dGhpcy5uZWdhdGUoKTp0aGlzOyB9XG5cbiAgICAvLyAocHVibGljKSByZXR1cm4gKyBpZiB0aGlzID4gYSwgLSBpZiB0aGlzIDwgYSwgMCBpZiBlcXVhbFxuICAgIGZ1bmN0aW9uIGJuQ29tcGFyZVRvKGEpIHtcbiAgICAgIHZhciByID0gdGhpcy5zLWEucztcbiAgICAgIGlmKHIgIT0gMCkgcmV0dXJuIHI7XG4gICAgICB2YXIgaSA9IHRoaXMudDtcbiAgICAgIHIgPSBpLWEudDtcbiAgICAgIGlmKHIgIT0gMCkgcmV0dXJuICh0aGlzLnM8MCk/LXI6cjtcbiAgICAgIHdoaWxlKC0taSA+PSAwKSBpZigocj10aGlzW2ldLWFbaV0pICE9IDApIHJldHVybiByO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLy8gcmV0dXJucyBiaXQgbGVuZ3RoIG9mIHRoZSBpbnRlZ2VyIHhcbiAgICBmdW5jdGlvbiBuYml0cyh4KSB7XG4gICAgICB2YXIgciA9IDEsIHQ7XG4gICAgICBpZigodD14Pj4+MTYpICE9IDApIHsgeCA9IHQ7IHIgKz0gMTY7IH1cbiAgICAgIGlmKCh0PXg+PjgpICE9IDApIHsgeCA9IHQ7IHIgKz0gODsgfVxuICAgICAgaWYoKHQ9eD4+NCkgIT0gMCkgeyB4ID0gdDsgciArPSA0OyB9XG4gICAgICBpZigodD14Pj4yKSAhPSAwKSB7IHggPSB0OyByICs9IDI7IH1cbiAgICAgIGlmKCh0PXg+PjEpICE9IDApIHsgeCA9IHQ7IHIgKz0gMTsgfVxuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLy8gKHB1YmxpYykgcmV0dXJuIHRoZSBudW1iZXIgb2YgYml0cyBpbiBcInRoaXNcIlxuICAgIGZ1bmN0aW9uIGJuQml0TGVuZ3RoKCkge1xuICAgICAgaWYodGhpcy50IDw9IDApIHJldHVybiAwO1xuICAgICAgcmV0dXJuIHRoaXMuREIqKHRoaXMudC0xKStuYml0cyh0aGlzW3RoaXMudC0xXV4odGhpcy5zJnRoaXMuRE0pKTtcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuKkRCXG4gICAgZnVuY3Rpb24gYm5wRExTaGlmdFRvKG4scikge1xuICAgICAgdmFyIGk7XG4gICAgICBmb3IoaSA9IHRoaXMudC0xOyBpID49IDA7IC0taSkgcltpK25dID0gdGhpc1tpXTtcbiAgICAgIGZvcihpID0gbi0xOyBpID49IDA7IC0taSkgcltpXSA9IDA7XG4gICAgICByLnQgPSB0aGlzLnQrbjtcbiAgICAgIHIucyA9IHRoaXMucztcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuKkRCXG4gICAgZnVuY3Rpb24gYm5wRFJTaGlmdFRvKG4scikge1xuICAgICAgZm9yKHZhciBpID0gbjsgaSA8IHRoaXMudDsgKytpKSByW2ktbl0gPSB0aGlzW2ldO1xuICAgICAgci50ID0gTWF0aC5tYXgodGhpcy50LW4sMCk7XG4gICAgICByLnMgPSB0aGlzLnM7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPDwgblxuICAgIGZ1bmN0aW9uIGJucExTaGlmdFRvKG4scikge1xuICAgICAgdmFyIGJzID0gbiV0aGlzLkRCO1xuICAgICAgdmFyIGNicyA9IHRoaXMuREItYnM7XG4gICAgICB2YXIgYm0gPSAoMTw8Y2JzKS0xO1xuICAgICAgdmFyIGRzID0gTWF0aC5mbG9vcihuL3RoaXMuREIpLCBjID0gKHRoaXMuczw8YnMpJnRoaXMuRE0sIGk7XG4gICAgICBmb3IoaSA9IHRoaXMudC0xOyBpID49IDA7IC0taSkge1xuICAgICAgICByW2krZHMrMV0gPSAodGhpc1tpXT4+Y2JzKXxjO1xuICAgICAgICBjID0gKHRoaXNbaV0mYm0pPDxicztcbiAgICAgIH1cbiAgICAgIGZvcihpID0gZHMtMTsgaSA+PSAwOyAtLWkpIHJbaV0gPSAwO1xuICAgICAgcltkc10gPSBjO1xuICAgICAgci50ID0gdGhpcy50K2RzKzE7XG4gICAgICByLnMgPSB0aGlzLnM7XG4gICAgICByLmNsYW1wKCk7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPj4gblxuICAgIGZ1bmN0aW9uIGJucFJTaGlmdFRvKG4scikge1xuICAgICAgci5zID0gdGhpcy5zO1xuICAgICAgdmFyIGRzID0gTWF0aC5mbG9vcihuL3RoaXMuREIpO1xuICAgICAgaWYoZHMgPj0gdGhpcy50KSB7IHIudCA9IDA7IHJldHVybjsgfVxuICAgICAgdmFyIGJzID0gbiV0aGlzLkRCO1xuICAgICAgdmFyIGNicyA9IHRoaXMuREItYnM7XG4gICAgICB2YXIgYm0gPSAoMTw8YnMpLTE7XG4gICAgICByWzBdID0gdGhpc1tkc10+PmJzO1xuICAgICAgZm9yKHZhciBpID0gZHMrMTsgaSA8IHRoaXMudDsgKytpKSB7XG4gICAgICAgIHJbaS1kcy0xXSB8PSAodGhpc1tpXSZibSk8PGNicztcbiAgICAgICAgcltpLWRzXSA9IHRoaXNbaV0+PmJzO1xuICAgICAgfVxuICAgICAgaWYoYnMgPiAwKSByW3RoaXMudC1kcy0xXSB8PSAodGhpcy5zJmJtKTw8Y2JzO1xuICAgICAgci50ID0gdGhpcy50LWRzO1xuICAgICAgci5jbGFtcCgpO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIC0gYVxuICAgIGZ1bmN0aW9uIGJucFN1YlRvKGEscikge1xuICAgICAgdmFyIGkgPSAwLCBjID0gMCwgbSA9IE1hdGgubWluKGEudCx0aGlzLnQpO1xuICAgICAgd2hpbGUoaSA8IG0pIHtcbiAgICAgICAgYyArPSB0aGlzW2ldLWFbaV07XG4gICAgICAgIHJbaSsrXSA9IGMmdGhpcy5ETTtcbiAgICAgICAgYyA+Pj0gdGhpcy5EQjtcbiAgICAgIH1cbiAgICAgIGlmKGEudCA8IHRoaXMudCkge1xuICAgICAgICBjIC09IGEucztcbiAgICAgICAgd2hpbGUoaSA8IHRoaXMudCkge1xuICAgICAgICAgIGMgKz0gdGhpc1tpXTtcbiAgICAgICAgICByW2krK10gPSBjJnRoaXMuRE07XG4gICAgICAgICAgYyA+Pj0gdGhpcy5EQjtcbiAgICAgICAgfVxuICAgICAgICBjICs9IHRoaXMucztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjICs9IHRoaXMucztcbiAgICAgICAgd2hpbGUoaSA8IGEudCkge1xuICAgICAgICAgIGMgLT0gYVtpXTtcbiAgICAgICAgICByW2krK10gPSBjJnRoaXMuRE07XG4gICAgICAgICAgYyA+Pj0gdGhpcy5EQjtcbiAgICAgICAgfVxuICAgICAgICBjIC09IGEucztcbiAgICAgIH1cbiAgICAgIHIucyA9IChjPDApPy0xOjA7XG4gICAgICBpZihjIDwgLTEpIHJbaSsrXSA9IHRoaXMuRFYrYztcbiAgICAgIGVsc2UgaWYoYyA+IDApIHJbaSsrXSA9IGM7XG4gICAgICByLnQgPSBpO1xuICAgICAgci5jbGFtcCgpO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzICogYSwgciAhPSB0aGlzLGEgKEhBQyAxNC4xMilcbiAgICAvLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG4gICAgZnVuY3Rpb24gYm5wTXVsdGlwbHlUbyhhLHIpIHtcbiAgICAgIHZhciB4ID0gdGhpcy5hYnMoKSwgeSA9IGEuYWJzKCk7XG4gICAgICB2YXIgaSA9IHgudDtcbiAgICAgIHIudCA9IGkreS50O1xuICAgICAgd2hpbGUoLS1pID49IDApIHJbaV0gPSAwO1xuICAgICAgZm9yKGkgPSAwOyBpIDwgeS50OyArK2kpIHJbaSt4LnRdID0geC5hbSgwLHlbaV0scixpLDAseC50KTtcbiAgICAgIHIucyA9IDA7XG4gICAgICByLmNsYW1wKCk7XG4gICAgICBpZih0aGlzLnMgIT0gYS5zKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ocixyKTtcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpc14yLCByICE9IHRoaXMgKEhBQyAxNC4xNilcbiAgICBmdW5jdGlvbiBibnBTcXVhcmVUbyhyKSB7XG4gICAgICB2YXIgeCA9IHRoaXMuYWJzKCk7XG4gICAgICB2YXIgaSA9IHIudCA9IDIqeC50O1xuICAgICAgd2hpbGUoLS1pID49IDApIHJbaV0gPSAwO1xuICAgICAgZm9yKGkgPSAwOyBpIDwgeC50LTE7ICsraSkge1xuICAgICAgICB2YXIgYyA9IHguYW0oaSx4W2ldLHIsMippLDAsMSk7XG4gICAgICAgIGlmKChyW2kreC50XSs9eC5hbShpKzEsMip4W2ldLHIsMippKzEsYyx4LnQtaS0xKSkgPj0geC5EVikge1xuICAgICAgICAgIHJbaSt4LnRdIC09IHguRFY7XG4gICAgICAgICAgcltpK3gudCsxXSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmKHIudCA+IDApIHJbci50LTFdICs9IHguYW0oaSx4W2ldLHIsMippLDAsMSk7XG4gICAgICByLnMgPSAwO1xuICAgICAgci5jbGFtcCgpO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIGRpdmlkZSB0aGlzIGJ5IG0sIHF1b3RpZW50IGFuZCByZW1haW5kZXIgdG8gcSwgciAoSEFDIDE0LjIwKVxuICAgIC8vIHIgIT0gcSwgdGhpcyAhPSBtLiAgcSBvciByIG1heSBiZSBudWxsLlxuICAgIGZ1bmN0aW9uIGJucERpdlJlbVRvKG0scSxyKSB7XG4gICAgICB2YXIgcG0gPSBtLmFicygpO1xuICAgICAgaWYocG0udCA8PSAwKSByZXR1cm47XG4gICAgICB2YXIgcHQgPSB0aGlzLmFicygpO1xuICAgICAgaWYocHQudCA8IHBtLnQpIHtcbiAgICAgICAgaWYocSAhPSBudWxsKSBxLmZyb21JbnQoMCk7XG4gICAgICAgIGlmKHIgIT0gbnVsbCkgdGhpcy5jb3B5VG8ocik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmKHIgPT0gbnVsbCkgciA9IG5iaSgpO1xuICAgICAgdmFyIHkgPSBuYmkoKSwgdHMgPSB0aGlzLnMsIG1zID0gbS5zO1xuICAgICAgdmFyIG5zaCA9IHRoaXMuREItbmJpdHMocG1bcG0udC0xXSk7ICAgLy8gbm9ybWFsaXplIG1vZHVsdXNcbiAgICAgIGlmKG5zaCA+IDApIHsgcG0ubFNoaWZ0VG8obnNoLHkpOyBwdC5sU2hpZnRUbyhuc2gscik7IH1cbiAgICAgIGVsc2UgeyBwbS5jb3B5VG8oeSk7IHB0LmNvcHlUbyhyKTsgfVxuICAgICAgdmFyIHlzID0geS50O1xuICAgICAgdmFyIHkwID0geVt5cy0xXTtcbiAgICAgIGlmKHkwID09IDApIHJldHVybjtcbiAgICAgIHZhciB5dCA9IHkwKigxPDx0aGlzLkYxKSsoKHlzPjEpP3lbeXMtMl0+PnRoaXMuRjI6MCk7XG4gICAgICB2YXIgZDEgPSB0aGlzLkZWL3l0LCBkMiA9ICgxPDx0aGlzLkYxKS95dCwgZSA9IDE8PHRoaXMuRjI7XG4gICAgICB2YXIgaSA9IHIudCwgaiA9IGkteXMsIHQgPSAocT09bnVsbCk/bmJpKCk6cTtcbiAgICAgIHkuZGxTaGlmdFRvKGosdCk7XG4gICAgICBpZihyLmNvbXBhcmVUbyh0KSA+PSAwKSB7XG4gICAgICAgIHJbci50KytdID0gMTtcbiAgICAgICAgci5zdWJUbyh0LHIpO1xuICAgICAgfVxuICAgICAgQmlnSW50ZWdlci5PTkUuZGxTaGlmdFRvKHlzLHQpO1xuICAgICAgdC5zdWJUbyh5LHkpOyAgLy8gXCJuZWdhdGl2ZVwiIHkgc28gd2UgY2FuIHJlcGxhY2Ugc3ViIHdpdGggYW0gbGF0ZXJcbiAgICAgIHdoaWxlKHkudCA8IHlzKSB5W3kudCsrXSA9IDA7XG4gICAgICB3aGlsZSgtLWogPj0gMCkge1xuICAgICAgICAvLyBFc3RpbWF0ZSBxdW90aWVudCBkaWdpdFxuICAgICAgICB2YXIgcWQgPSAoclstLWldPT15MCk/dGhpcy5ETTpNYXRoLmZsb29yKHJbaV0qZDErKHJbaS0xXStlKSpkMik7XG4gICAgICAgIGlmKChyW2ldKz15LmFtKDAscWQscixqLDAseXMpKSA8IHFkKSB7ICAgLy8gVHJ5IGl0IG91dFxuICAgICAgICAgIHkuZGxTaGlmdFRvKGosdCk7XG4gICAgICAgICAgci5zdWJUbyh0LHIpO1xuICAgICAgICAgIHdoaWxlKHJbaV0gPCAtLXFkKSByLnN1YlRvKHQscik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmKHEgIT0gbnVsbCkge1xuICAgICAgICByLmRyU2hpZnRUbyh5cyxxKTtcbiAgICAgICAgaWYodHMgIT0gbXMpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhxLHEpO1xuICAgICAgfVxuICAgICAgci50ID0geXM7XG4gICAgICByLmNsYW1wKCk7XG4gICAgICBpZihuc2ggPiAwKSByLnJTaGlmdFRvKG5zaCxyKTsgLy8gRGVub3JtYWxpemUgcmVtYWluZGVyXG4gICAgICBpZih0cyA8IDApIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhyLHIpO1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIHRoaXMgbW9kIGFcbiAgICBmdW5jdGlvbiBibk1vZChhKSB7XG4gICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgdGhpcy5hYnMoKS5kaXZSZW1UbyhhLG51bGwscik7XG4gICAgICBpZih0aGlzLnMgPCAwICYmIHIuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTykgPiAwKSBhLnN1YlRvKHIscik7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICAvLyBNb2R1bGFyIHJlZHVjdGlvbiB1c2luZyBcImNsYXNzaWNcIiBhbGdvcml0aG1cbiAgICBmdW5jdGlvbiBDbGFzc2ljKG0pIHsgdGhpcy5tID0gbTsgfVxuICAgIGZ1bmN0aW9uIGNDb252ZXJ0KHgpIHtcbiAgICAgIGlmKHgucyA8IDAgfHwgeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSByZXR1cm4geC5tb2QodGhpcy5tKTtcbiAgICAgIGVsc2UgcmV0dXJuIHg7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNSZXZlcnQoeCkgeyByZXR1cm4geDsgfVxuICAgIGZ1bmN0aW9uIGNSZWR1Y2UoeCkgeyB4LmRpdlJlbVRvKHRoaXMubSxudWxsLHgpOyB9XG4gICAgZnVuY3Rpb24gY011bFRvKHgseSxyKSB7IHgubXVsdGlwbHlUbyh5LHIpOyB0aGlzLnJlZHVjZShyKTsgfVxuICAgIGZ1bmN0aW9uIGNTcXJUbyh4LHIpIHsgeC5zcXVhcmVUbyhyKTsgdGhpcy5yZWR1Y2Uocik7IH1cblxuICAgIENsYXNzaWMucHJvdG90eXBlLmNvbnZlcnQgPSBjQ29udmVydDtcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5yZXZlcnQgPSBjUmV2ZXJ0O1xuICAgIENsYXNzaWMucHJvdG90eXBlLnJlZHVjZSA9IGNSZWR1Y2U7XG4gICAgQ2xhc3NpYy5wcm90b3R5cGUubXVsVG8gPSBjTXVsVG87XG4gICAgQ2xhc3NpYy5wcm90b3R5cGUuc3FyVG8gPSBjU3FyVG87XG5cbiAgICAvLyAocHJvdGVjdGVkKSByZXR1cm4gXCItMS90aGlzICUgMl5EQlwiOyB1c2VmdWwgZm9yIE1vbnQuIHJlZHVjdGlvblxuICAgIC8vIGp1c3RpZmljYXRpb246XG4gICAgLy8gICAgICAgICB4eSA9PSAxIChtb2QgbSlcbiAgICAvLyAgICAgICAgIHh5ID0gIDEra21cbiAgICAvLyAgIHh5KDIteHkpID0gKDEra20pKDEta20pXG4gICAgLy8geFt5KDIteHkpXSA9IDEta14ybV4yXG4gICAgLy8geFt5KDIteHkpXSA9PSAxIChtb2QgbV4yKVxuICAgIC8vIGlmIHkgaXMgMS94IG1vZCBtLCB0aGVuIHkoMi14eSkgaXMgMS94IG1vZCBtXjJcbiAgICAvLyBzaG91bGQgcmVkdWNlIHggYW5kIHkoMi14eSkgYnkgbV4yIGF0IGVhY2ggc3RlcCB0byBrZWVwIHNpemUgYm91bmRlZC5cbiAgICAvLyBKUyBtdWx0aXBseSBcIm92ZXJmbG93c1wiIGRpZmZlcmVudGx5IGZyb20gQy9DKyssIHNvIGNhcmUgaXMgbmVlZGVkIGhlcmUuXG4gICAgZnVuY3Rpb24gYm5wSW52RGlnaXQoKSB7XG4gICAgICBpZih0aGlzLnQgPCAxKSByZXR1cm4gMDtcbiAgICAgIHZhciB4ID0gdGhpc1swXTtcbiAgICAgIGlmKCh4JjEpID09IDApIHJldHVybiAwO1xuICAgICAgdmFyIHkgPSB4JjM7ICAgICAgIC8vIHkgPT0gMS94IG1vZCAyXjJcbiAgICAgIHkgPSAoeSooMi0oeCYweGYpKnkpKSYweGY7IC8vIHkgPT0gMS94IG1vZCAyXjRcbiAgICAgIHkgPSAoeSooMi0oeCYweGZmKSp5KSkmMHhmZjsgICAvLyB5ID09IDEveCBtb2QgMl44XG4gICAgICB5ID0gKHkqKDItKCgoeCYweGZmZmYpKnkpJjB4ZmZmZikpKSYweGZmZmY7ICAgIC8vIHkgPT0gMS94IG1vZCAyXjE2XG4gICAgICAvLyBsYXN0IHN0ZXAgLSBjYWxjdWxhdGUgaW52ZXJzZSBtb2QgRFYgZGlyZWN0bHk7XG4gICAgICAvLyBhc3N1bWVzIDE2IDwgREIgPD0gMzIgYW5kIGFzc3VtZXMgYWJpbGl0eSB0byBoYW5kbGUgNDgtYml0IGludHNcbiAgICAgIHkgPSAoeSooMi14KnkldGhpcy5EVikpJXRoaXMuRFY7ICAgICAgIC8vIHkgPT0gMS94IG1vZCAyXmRiaXRzXG4gICAgICAvLyB3ZSByZWFsbHkgd2FudCB0aGUgbmVnYXRpdmUgaW52ZXJzZSwgYW5kIC1EViA8IHkgPCBEVlxuICAgICAgcmV0dXJuICh5PjApP3RoaXMuRFYteToteTtcbiAgICB9XG5cbiAgICAvLyBNb250Z29tZXJ5IHJlZHVjdGlvblxuICAgIGZ1bmN0aW9uIE1vbnRnb21lcnkobSkge1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMubXAgPSBtLmludkRpZ2l0KCk7XG4gICAgICB0aGlzLm1wbCA9IHRoaXMubXAmMHg3ZmZmO1xuICAgICAgdGhpcy5tcGggPSB0aGlzLm1wPj4xNTtcbiAgICAgIHRoaXMudW0gPSAoMTw8KG0uREItMTUpKS0xO1xuICAgICAgdGhpcy5tdDIgPSAyKm0udDtcbiAgICB9XG5cbiAgICAvLyB4UiBtb2QgbVxuICAgIGZ1bmN0aW9uIG1vbnRDb252ZXJ0KHgpIHtcbiAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICB4LmFicygpLmRsU2hpZnRUbyh0aGlzLm0udCxyKTtcbiAgICAgIHIuZGl2UmVtVG8odGhpcy5tLG51bGwscik7XG4gICAgICBpZih4LnMgPCAwICYmIHIuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTykgPiAwKSB0aGlzLm0uc3ViVG8ocixyKTtcbiAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIC8vIHgvUiBtb2QgbVxuICAgIGZ1bmN0aW9uIG1vbnRSZXZlcnQoeCkge1xuICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgIHguY29weVRvKHIpO1xuICAgICAgdGhpcy5yZWR1Y2Uocik7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICAvLyB4ID0geC9SIG1vZCBtIChIQUMgMTQuMzIpXG4gICAgZnVuY3Rpb24gbW9udFJlZHVjZSh4KSB7XG4gICAgICB3aGlsZSh4LnQgPD0gdGhpcy5tdDIpIC8vIHBhZCB4IHNvIGFtIGhhcyBlbm91Z2ggcm9vbSBsYXRlclxuICAgICAgICB4W3gudCsrXSA9IDA7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5tLnQ7ICsraSkge1xuICAgICAgICAvLyBmYXN0ZXIgd2F5IG9mIGNhbGN1bGF0aW5nIHUwID0geFtpXSptcCBtb2QgRFZcbiAgICAgICAgdmFyIGogPSB4W2ldJjB4N2ZmZjtcbiAgICAgICAgdmFyIHUwID0gKGoqdGhpcy5tcGwrKCgoaip0aGlzLm1waCsoeFtpXT4+MTUpKnRoaXMubXBsKSZ0aGlzLnVtKTw8MTUpKSZ4LkRNO1xuICAgICAgICAvLyB1c2UgYW0gdG8gY29tYmluZSB0aGUgbXVsdGlwbHktc2hpZnQtYWRkIGludG8gb25lIGNhbGxcbiAgICAgICAgaiA9IGkrdGhpcy5tLnQ7XG4gICAgICAgIHhbal0gKz0gdGhpcy5tLmFtKDAsdTAseCxpLDAsdGhpcy5tLnQpO1xuICAgICAgICAvLyBwcm9wYWdhdGUgY2FycnlcbiAgICAgICAgd2hpbGUoeFtqXSA+PSB4LkRWKSB7IHhbal0gLT0geC5EVjsgeFsrK2pdKys7IH1cbiAgICAgIH1cbiAgICAgIHguY2xhbXAoKTtcbiAgICAgIHguZHJTaGlmdFRvKHRoaXMubS50LHgpO1xuICAgICAgaWYoeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSB4LnN1YlRvKHRoaXMubSx4KTtcbiAgICB9XG5cbiAgICAvLyByID0gXCJ4XjIvUiBtb2QgbVwiOyB4ICE9IHJcbiAgICBmdW5jdGlvbiBtb250U3FyVG8oeCxyKSB7IHguc3F1YXJlVG8ocik7IHRoaXMucmVkdWNlKHIpOyB9XG5cbiAgICAvLyByID0gXCJ4eS9SIG1vZCBtXCI7IHgseSAhPSByXG4gICAgZnVuY3Rpb24gbW9udE11bFRvKHgseSxyKSB7IHgubXVsdGlwbHlUbyh5LHIpOyB0aGlzLnJlZHVjZShyKTsgfVxuXG4gICAgTW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydCA9IG1vbnRDb252ZXJ0O1xuICAgIE1vbnRnb21lcnkucHJvdG90eXBlLnJldmVydCA9IG1vbnRSZXZlcnQ7XG4gICAgTW9udGdvbWVyeS5wcm90b3R5cGUucmVkdWNlID0gbW9udFJlZHVjZTtcbiAgICBNb250Z29tZXJ5LnByb3RvdHlwZS5tdWxUbyA9IG1vbnRNdWxUbztcbiAgICBNb250Z29tZXJ5LnByb3RvdHlwZS5zcXJUbyA9IG1vbnRTcXJUbztcblxuICAgIC8vIChwcm90ZWN0ZWQpIHRydWUgaWZmIHRoaXMgaXMgZXZlblxuICAgIGZ1bmN0aW9uIGJucElzRXZlbigpIHsgcmV0dXJuICgodGhpcy50PjApPyh0aGlzWzBdJjEpOnRoaXMucykgPT0gMDsgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgdGhpc15lLCBlIDwgMl4zMiwgZG9pbmcgc3FyIGFuZCBtdWwgd2l0aCBcInJcIiAoSEFDIDE0Ljc5KVxuICAgIGZ1bmN0aW9uIGJucEV4cChlLHopIHtcbiAgICAgIGlmKGUgPiAweGZmZmZmZmZmIHx8IGUgPCAxKSByZXR1cm4gQmlnSW50ZWdlci5PTkU7XG4gICAgICB2YXIgciA9IG5iaSgpLCByMiA9IG5iaSgpLCBnID0gei5jb252ZXJ0KHRoaXMpLCBpID0gbmJpdHMoZSktMTtcbiAgICAgIGcuY29weVRvKHIpO1xuICAgICAgd2hpbGUoLS1pID49IDApIHtcbiAgICAgICAgei5zcXJUbyhyLHIyKTtcbiAgICAgICAgaWYoKGUmKDE8PGkpKSA+IDApIHoubXVsVG8ocjIsZyxyKTtcbiAgICAgICAgZWxzZSB7IHZhciB0ID0gcjsgciA9IHIyOyByMiA9IHQ7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB6LnJldmVydChyKTtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzXmUgJSBtLCAwIDw9IGUgPCAyXjMyXG4gICAgZnVuY3Rpb24gYm5Nb2RQb3dJbnQoZSxtKSB7XG4gICAgICB2YXIgejtcbiAgICAgIGlmKGUgPCAyNTYgfHwgbS5pc0V2ZW4oKSkgeiA9IG5ldyBDbGFzc2ljKG0pOyBlbHNlIHogPSBuZXcgTW9udGdvbWVyeShtKTtcbiAgICAgIHJldHVybiB0aGlzLmV4cChlLHopO1xuICAgIH1cblxuICAgIC8vIHByb3RlY3RlZFxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNvcHlUbyA9IGJucENvcHlUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50ID0gYm5wRnJvbUludDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tU3RyaW5nID0gYm5wRnJvbVN0cmluZztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbGFtcCA9IGJucENsYW1wO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmRsU2hpZnRUbyA9IGJucERMU2hpZnRUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kclNoaWZ0VG8gPSBibnBEUlNoaWZ0VG87XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubFNoaWZ0VG8gPSBibnBMU2hpZnRUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbyA9IGJucFJTaGlmdFRvO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnN1YlRvID0gYm5wU3ViVG87XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlUbyA9IGJucE11bHRpcGx5VG87XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlVG8gPSBibnBTcXVhcmVUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZSZW1UbyA9IGJucERpdlJlbVRvO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmludkRpZ2l0ID0gYm5wSW52RGlnaXQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuID0gYm5wSXNFdmVuO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmV4cCA9IGJucEV4cDtcblxuICAgIC8vIHB1YmxpY1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRvU3RyaW5nID0gYm5Ub1N0cmluZztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5uZWdhdGUgPSBibk5lZ2F0ZTtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hYnMgPSBibkFicztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlVG8gPSBibkNvbXBhcmVUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXRMZW5ndGggPSBibkJpdExlbmd0aDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2QgPSBibk1vZDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3dJbnQgPSBibk1vZFBvd0ludDtcblxuICAgIC8vIFwiY29uc3RhbnRzXCJcbiAgICBCaWdJbnRlZ2VyLlpFUk8gPSBuYnYoMCk7XG4gICAgQmlnSW50ZWdlci5PTkUgPSBuYnYoMSk7XG5cbiAgICAvLyBDb3B5cmlnaHQgKGMpIDIwMDUtMjAwOSAgVG9tIFd1XG4gICAgLy8gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAgICAvLyBTZWUgXCJMSUNFTlNFXCIgZm9yIGRldGFpbHMuXG5cbiAgICAvLyBFeHRlbmRlZCBKYXZhU2NyaXB0IEJOIGZ1bmN0aW9ucywgcmVxdWlyZWQgZm9yIFJTQSBwcml2YXRlIG9wcy5cblxuICAgIC8vIFZlcnNpb24gMS4xOiBuZXcgQmlnSW50ZWdlcihcIjBcIiwgMTApIHJldHVybnMgXCJwcm9wZXJcIiB6ZXJvXG4gICAgLy8gVmVyc2lvbiAxLjI6IHNxdWFyZSgpIEFQSSwgaXNQcm9iYWJsZVByaW1lIGZpeFxuXG4gICAgLy8gKHB1YmxpYylcbiAgICBmdW5jdGlvbiBibkNsb25lKCkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmNvcHlUbyhyKTsgcmV0dXJuIHI7IH1cblxuICAgIC8vIChwdWJsaWMpIHJldHVybiB2YWx1ZSBhcyBpbnRlZ2VyXG4gICAgZnVuY3Rpb24gYm5JbnRWYWx1ZSgpIHtcbiAgICAgIGlmKHRoaXMucyA8IDApIHtcbiAgICAgICAgaWYodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdLXRoaXMuRFY7XG4gICAgICAgIGVsc2UgaWYodGhpcy50ID09IDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdO1xuICAgICAgZWxzZSBpZih0aGlzLnQgPT0gMCkgcmV0dXJuIDA7XG4gICAgICAvLyBhc3N1bWVzIDE2IDwgREIgPCAzMlxuICAgICAgcmV0dXJuICgodGhpc1sxXSYoKDE8PCgzMi10aGlzLkRCKSktMSkpPDx0aGlzLkRCKXx0aGlzWzBdO1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIHJldHVybiB2YWx1ZSBhcyBieXRlXG4gICAgZnVuY3Rpb24gYm5CeXRlVmFsdWUoKSB7IHJldHVybiAodGhpcy50PT0wKT90aGlzLnM6KHRoaXNbMF08PDI0KT4+MjQ7IH1cblxuICAgIC8vIChwdWJsaWMpIHJldHVybiB2YWx1ZSBhcyBzaG9ydCAoYXNzdW1lcyBEQj49MTYpXG4gICAgZnVuY3Rpb24gYm5TaG9ydFZhbHVlKCkgeyByZXR1cm4gKHRoaXMudD09MCk/dGhpcy5zOih0aGlzWzBdPDwxNik+PjE2OyB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSByZXR1cm4geCBzLnQuIHJeeCA8IERWXG4gICAgZnVuY3Rpb24gYm5wQ2h1bmtTaXplKHIpIHsgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5MTjIqdGhpcy5EQi9NYXRoLmxvZyhyKSk7IH1cblxuICAgIC8vIChwdWJsaWMpIDAgaWYgdGhpcyA9PSAwLCAxIGlmIHRoaXMgPiAwXG4gICAgZnVuY3Rpb24gYm5TaWdOdW0oKSB7XG4gICAgICBpZih0aGlzLnMgPCAwKSByZXR1cm4gLTE7XG4gICAgICBlbHNlIGlmKHRoaXMudCA8PSAwIHx8ICh0aGlzLnQgPT0gMSAmJiB0aGlzWzBdIDw9IDApKSByZXR1cm4gMDtcbiAgICAgIGVsc2UgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgY29udmVydCB0byByYWRpeCBzdHJpbmdcbiAgICBmdW5jdGlvbiBibnBUb1JhZGl4KGIpIHtcbiAgICAgIGlmKGIgPT0gbnVsbCkgYiA9IDEwO1xuICAgICAgaWYodGhpcy5zaWdudW0oKSA9PSAwIHx8IGIgPCAyIHx8IGIgPiAzNikgcmV0dXJuIFwiMFwiO1xuICAgICAgdmFyIGNzID0gdGhpcy5jaHVua1NpemUoYik7XG4gICAgICB2YXIgYSA9IE1hdGgucG93KGIsY3MpO1xuICAgICAgdmFyIGQgPSBuYnYoYSksIHkgPSBuYmkoKSwgeiA9IG5iaSgpLCByID0gXCJcIjtcbiAgICAgIHRoaXMuZGl2UmVtVG8oZCx5LHopO1xuICAgICAgd2hpbGUoeS5zaWdudW0oKSA+IDApIHtcbiAgICAgICAgciA9IChhK3ouaW50VmFsdWUoKSkudG9TdHJpbmcoYikuc3Vic3RyKDEpICsgcjtcbiAgICAgICAgeS5kaXZSZW1UbyhkLHkseik7XG4gICAgICB9XG4gICAgICByZXR1cm4gei5pbnRWYWx1ZSgpLnRvU3RyaW5nKGIpICsgcjtcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSBjb252ZXJ0IGZyb20gcmFkaXggc3RyaW5nXG4gICAgZnVuY3Rpb24gYm5wRnJvbVJhZGl4KHMsYikge1xuICAgICAgdGhpcy5mcm9tSW50KDApO1xuICAgICAgaWYoYiA9PSBudWxsKSBiID0gMTA7XG4gICAgICB2YXIgY3MgPSB0aGlzLmNodW5rU2l6ZShiKTtcbiAgICAgIHZhciBkID0gTWF0aC5wb3coYixjcyksIG1pID0gZmFsc2UsIGogPSAwLCB3ID0gMDtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciB4ID0gaW50QXQocyxpKTtcbiAgICAgICAgaWYoeCA8IDApIHtcbiAgICAgICAgICBpZihzLmNoYXJBdChpKSA9PSBcIi1cIiAmJiB0aGlzLnNpZ251bSgpID09IDApIG1pID0gdHJ1ZTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB3ID0gYip3K3g7XG4gICAgICAgIGlmKCsraiA+PSBjcykge1xuICAgICAgICAgIHRoaXMuZE11bHRpcGx5KGQpO1xuICAgICAgICAgIHRoaXMuZEFkZE9mZnNldCh3LDApO1xuICAgICAgICAgIGogPSAwO1xuICAgICAgICAgIHcgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZihqID4gMCkge1xuICAgICAgICB0aGlzLmRNdWx0aXBseShNYXRoLnBvdyhiLGopKTtcbiAgICAgICAgdGhpcy5kQWRkT2Zmc2V0KHcsMCk7XG4gICAgICB9XG4gICAgICBpZihtaSkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsdGhpcyk7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgYWx0ZXJuYXRlIGNvbnN0cnVjdG9yXG4gICAgZnVuY3Rpb24gYm5wRnJvbU51bWJlcihhLGIsYykge1xuICAgICAgaWYoXCJudW1iZXJcIiA9PSB0eXBlb2YgYikge1xuICAgICAgICAvLyBuZXcgQmlnSW50ZWdlcihpbnQsaW50LFJORylcbiAgICAgICAgaWYoYSA8IDIpIHRoaXMuZnJvbUludCgxKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5mcm9tTnVtYmVyKGEsYyk7XG4gICAgICAgICAgaWYoIXRoaXMudGVzdEJpdChhLTEpKVx0Ly8gZm9yY2UgTVNCIHNldFxuICAgICAgICAgICAgdGhpcy5iaXR3aXNlVG8oQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGEtMSksb3Bfb3IsdGhpcyk7XG4gICAgICAgICAgaWYodGhpcy5pc0V2ZW4oKSkgdGhpcy5kQWRkT2Zmc2V0KDEsMCk7IC8vIGZvcmNlIG9kZFxuICAgICAgICAgIHdoaWxlKCF0aGlzLmlzUHJvYmFibGVQcmltZShiKSkge1xuICAgICAgICAgICAgdGhpcy5kQWRkT2Zmc2V0KDIsMCk7XG4gICAgICAgICAgICBpZih0aGlzLmJpdExlbmd0aCgpID4gYSkgdGhpcy5zdWJUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYS0xKSx0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBuZXcgQmlnSW50ZWdlcihpbnQsUk5HKVxuICAgICAgICB2YXIgeCA9IG5ldyBBcnJheSgpLCB0ID0gYSY3O1xuICAgICAgICB4Lmxlbmd0aCA9IChhPj4zKSsxO1xuICAgICAgICBiLm5leHRCeXRlcyh4KTtcbiAgICAgICAgaWYodCA+IDApIHhbMF0gJj0gKCgxPDx0KS0xKTsgZWxzZSB4WzBdID0gMDtcbiAgICAgICAgdGhpcy5mcm9tU3RyaW5nKHgsMjU2KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAocHVibGljKSBjb252ZXJ0IHRvIGJpZ2VuZGlhbiBieXRlIGFycmF5XG4gICAgZnVuY3Rpb24gYm5Ub0J5dGVBcnJheSgpIHtcbiAgICAgIHZhciBpID0gdGhpcy50LCByID0gbmV3IEFycmF5KCk7XG4gICAgICByWzBdID0gdGhpcy5zO1xuICAgICAgdmFyIHAgPSB0aGlzLkRCLShpKnRoaXMuREIpJTgsIGQsIGsgPSAwO1xuICAgICAgaWYoaS0tID4gMCkge1xuICAgICAgICBpZihwIDwgdGhpcy5EQiAmJiAoZCA9IHRoaXNbaV0+PnApICE9ICh0aGlzLnMmdGhpcy5ETSk+PnApXG4gICAgICAgICAgcltrKytdID0gZHwodGhpcy5zPDwodGhpcy5EQi1wKSk7XG4gICAgICAgIHdoaWxlKGkgPj0gMCkge1xuICAgICAgICAgIGlmKHAgPCA4KSB7XG4gICAgICAgICAgICBkID0gKHRoaXNbaV0mKCgxPDxwKS0xKSk8PCg4LXApO1xuICAgICAgICAgICAgZCB8PSB0aGlzWy0taV0+PihwKz10aGlzLkRCLTgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGQgPSAodGhpc1tpXT4+KHAtPTgpKSYweGZmO1xuICAgICAgICAgICAgaWYocCA8PSAwKSB7IHAgKz0gdGhpcy5EQjsgLS1pOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKChkJjB4ODApICE9IDApIGQgfD0gLTI1NjtcbiAgICAgICAgICBpZihrID09IDAgJiYgKHRoaXMucyYweDgwKSAhPSAoZCYweDgwKSkgKytrO1xuICAgICAgICAgIGlmKGsgPiAwIHx8IGQgIT0gdGhpcy5zKSByW2srK10gPSBkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBibkVxdWFscyhhKSB7IHJldHVybih0aGlzLmNvbXBhcmVUbyhhKT09MCk7IH1cbiAgICBmdW5jdGlvbiBibk1pbihhKSB7IHJldHVybih0aGlzLmNvbXBhcmVUbyhhKTwwKT90aGlzOmE7IH1cbiAgICBmdW5jdGlvbiBibk1heChhKSB7IHJldHVybih0aGlzLmNvbXBhcmVUbyhhKT4wKT90aGlzOmE7IH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIG9wIGEgKGJpdHdpc2UpXG4gICAgZnVuY3Rpb24gYm5wQml0d2lzZVRvKGEsb3Ascikge1xuICAgICAgdmFyIGksIGYsIG0gPSBNYXRoLm1pbihhLnQsdGhpcy50KTtcbiAgICAgIGZvcihpID0gMDsgaSA8IG07ICsraSkgcltpXSA9IG9wKHRoaXNbaV0sYVtpXSk7XG4gICAgICBpZihhLnQgPCB0aGlzLnQpIHtcbiAgICAgICAgZiA9IGEucyZ0aGlzLkRNO1xuICAgICAgICBmb3IoaSA9IG07IGkgPCB0aGlzLnQ7ICsraSkgcltpXSA9IG9wKHRoaXNbaV0sZik7XG4gICAgICAgIHIudCA9IHRoaXMudDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmID0gdGhpcy5zJnRoaXMuRE07XG4gICAgICAgIGZvcihpID0gbTsgaSA8IGEudDsgKytpKSByW2ldID0gb3AoZixhW2ldKTtcbiAgICAgICAgci50ID0gYS50O1xuICAgICAgfVxuICAgICAgci5zID0gb3AodGhpcy5zLGEucyk7XG4gICAgICByLmNsYW1wKCk7XG4gICAgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyAmIGFcbiAgICBmdW5jdGlvbiBvcF9hbmQoeCx5KSB7IHJldHVybiB4Jnk7IH1cbiAgICBmdW5jdGlvbiBibkFuZChhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuYml0d2lzZVRvKGEsb3BfYW5kLHIpOyByZXR1cm4gcjsgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyB8IGFcbiAgICBmdW5jdGlvbiBvcF9vcih4LHkpIHsgcmV0dXJuIHh8eTsgfVxuICAgIGZ1bmN0aW9uIGJuT3IoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmJpdHdpc2VUbyhhLG9wX29yLHIpOyByZXR1cm4gcjsgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyBeIGFcbiAgICBmdW5jdGlvbiBvcF94b3IoeCx5KSB7IHJldHVybiB4Xnk7IH1cbiAgICBmdW5jdGlvbiBiblhvcihhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuYml0d2lzZVRvKGEsb3BfeG9yLHIpOyByZXR1cm4gcjsgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyAmIH5hXG4gICAgZnVuY3Rpb24gb3BfYW5kbm90KHgseSkgeyByZXR1cm4geCZ+eTsgfVxuICAgIGZ1bmN0aW9uIGJuQW5kTm90KGEpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5iaXR3aXNlVG8oYSxvcF9hbmRub3Qscik7IHJldHVybiByOyB9XG5cbiAgICAvLyAocHVibGljKSB+dGhpc1xuICAgIGZ1bmN0aW9uIGJuTm90KCkge1xuICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnQ7ICsraSkgcltpXSA9IHRoaXMuRE0mfnRoaXNbaV07XG4gICAgICByLnQgPSB0aGlzLnQ7XG4gICAgICByLnMgPSB+dGhpcy5zO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyA8PCBuXG4gICAgZnVuY3Rpb24gYm5TaGlmdExlZnQobikge1xuICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgIGlmKG4gPCAwKSB0aGlzLnJTaGlmdFRvKC1uLHIpOyBlbHNlIHRoaXMubFNoaWZ0VG8obixyKTtcbiAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIHRoaXMgPj4gblxuICAgIGZ1bmN0aW9uIGJuU2hpZnRSaWdodChuKSB7XG4gICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgaWYobiA8IDApIHRoaXMubFNoaWZ0VG8oLW4scik7IGVsc2UgdGhpcy5yU2hpZnRUbyhuLHIpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLy8gcmV0dXJuIGluZGV4IG9mIGxvd2VzdCAxLWJpdCBpbiB4LCB4IDwgMl4zMVxuICAgIGZ1bmN0aW9uIGxiaXQoeCkge1xuICAgICAgaWYoeCA9PSAwKSByZXR1cm4gLTE7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZigoeCYweGZmZmYpID09IDApIHsgeCA+Pj0gMTY7IHIgKz0gMTY7IH1cbiAgICAgIGlmKCh4JjB4ZmYpID09IDApIHsgeCA+Pj0gODsgciArPSA4OyB9XG4gICAgICBpZigoeCYweGYpID09IDApIHsgeCA+Pj0gNDsgciArPSA0OyB9XG4gICAgICBpZigoeCYzKSA9PSAwKSB7IHggPj49IDI7IHIgKz0gMjsgfVxuICAgICAgaWYoKHgmMSkgPT0gMCkgKytyO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLy8gKHB1YmxpYykgcmV0dXJucyBpbmRleCBvZiBsb3dlc3QgMS1iaXQgKG9yIC0xIGlmIG5vbmUpXG4gICAgZnVuY3Rpb24gYm5HZXRMb3dlc3RTZXRCaXQoKSB7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpXG4gICAgICAgIGlmKHRoaXNbaV0gIT0gMCkgcmV0dXJuIGkqdGhpcy5EQitsYml0KHRoaXNbaV0pO1xuICAgICAgaWYodGhpcy5zIDwgMCkgcmV0dXJuIHRoaXMudCp0aGlzLkRCO1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8vIHJldHVybiBudW1iZXIgb2YgMSBiaXRzIGluIHhcbiAgICBmdW5jdGlvbiBjYml0KHgpIHtcbiAgICAgIHZhciByID0gMDtcbiAgICAgIHdoaWxlKHggIT0gMCkgeyB4ICY9IHgtMTsgKytyOyB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSByZXR1cm4gbnVtYmVyIG9mIHNldCBiaXRzXG4gICAgZnVuY3Rpb24gYm5CaXRDb3VudCgpIHtcbiAgICAgIHZhciByID0gMCwgeCA9IHRoaXMucyZ0aGlzLkRNO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKSByICs9IGNiaXQodGhpc1tpXV54KTtcbiAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIHRydWUgaWZmIG50aCBiaXQgaXMgc2V0XG4gICAgZnVuY3Rpb24gYm5UZXN0Qml0KG4pIHtcbiAgICAgIHZhciBqID0gTWF0aC5mbG9vcihuL3RoaXMuREIpO1xuICAgICAgaWYoaiA+PSB0aGlzLnQpIHJldHVybih0aGlzLnMhPTApO1xuICAgICAgcmV0dXJuKCh0aGlzW2pdJigxPDwobiV0aGlzLkRCKSkpIT0wKTtcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSB0aGlzIG9wICgxPDxuKVxuICAgIGZ1bmN0aW9uIGJucENoYW5nZUJpdChuLG9wKSB7XG4gICAgICB2YXIgciA9IEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChuKTtcbiAgICAgIHRoaXMuYml0d2lzZVRvKHIsb3Ascik7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzIHwgKDE8PG4pXG4gICAgZnVuY3Rpb24gYm5TZXRCaXQobikgeyByZXR1cm4gdGhpcy5jaGFuZ2VCaXQobixvcF9vcik7IH1cblxuICAgIC8vIChwdWJsaWMpIHRoaXMgJiB+KDE8PG4pXG4gICAgZnVuY3Rpb24gYm5DbGVhckJpdChuKSB7IHJldHVybiB0aGlzLmNoYW5nZUJpdChuLG9wX2FuZG5vdCk7IH1cblxuICAgIC8vIChwdWJsaWMpIHRoaXMgXiAoMTw8bilcbiAgICBmdW5jdGlvbiBibkZsaXBCaXQobikgeyByZXR1cm4gdGhpcy5jaGFuZ2VCaXQobixvcF94b3IpOyB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpcyArIGFcbiAgICBmdW5jdGlvbiBibnBBZGRUbyhhLHIpIHtcbiAgICAgIHZhciBpID0gMCwgYyA9IDAsIG0gPSBNYXRoLm1pbihhLnQsdGhpcy50KTtcbiAgICAgIHdoaWxlKGkgPCBtKSB7XG4gICAgICAgIGMgKz0gdGhpc1tpXSthW2ldO1xuICAgICAgICByW2krK10gPSBjJnRoaXMuRE07XG4gICAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgICB9XG4gICAgICBpZihhLnQgPCB0aGlzLnQpIHtcbiAgICAgICAgYyArPSBhLnM7XG4gICAgICAgIHdoaWxlKGkgPCB0aGlzLnQpIHtcbiAgICAgICAgICBjICs9IHRoaXNbaV07XG4gICAgICAgICAgcltpKytdID0gYyZ0aGlzLkRNO1xuICAgICAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgICAgIH1cbiAgICAgICAgYyArPSB0aGlzLnM7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYyArPSB0aGlzLnM7XG4gICAgICAgIHdoaWxlKGkgPCBhLnQpIHtcbiAgICAgICAgICBjICs9IGFbaV07XG4gICAgICAgICAgcltpKytdID0gYyZ0aGlzLkRNO1xuICAgICAgICAgIGMgPj49IHRoaXMuREI7XG4gICAgICAgIH1cbiAgICAgICAgYyArPSBhLnM7XG4gICAgICB9XG4gICAgICByLnMgPSAoYzwwKT8tMTowO1xuICAgICAgaWYoYyA+IDApIHJbaSsrXSA9IGM7XG4gICAgICBlbHNlIGlmKGMgPCAtMSkgcltpKytdID0gdGhpcy5EVitjO1xuICAgICAgci50ID0gaTtcbiAgICAgIHIuY2xhbXAoKTtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzICsgYVxuICAgIGZ1bmN0aW9uIGJuQWRkKGEpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5hZGRUbyhhLHIpOyByZXR1cm4gcjsgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyAtIGFcbiAgICBmdW5jdGlvbiBiblN1YnRyYWN0KGEpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5zdWJUbyhhLHIpOyByZXR1cm4gcjsgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyAqIGFcbiAgICBmdW5jdGlvbiBibk11bHRpcGx5KGEpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5tdWx0aXBseVRvKGEscik7IHJldHVybiByOyB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzXjJcbiAgICBmdW5jdGlvbiBiblNxdWFyZSgpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5zcXVhcmVUbyhyKTsgcmV0dXJuIHI7IH1cblxuICAgIC8vIChwdWJsaWMpIHRoaXMgLyBhXG4gICAgZnVuY3Rpb24gYm5EaXZpZGUoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmRpdlJlbVRvKGEscixudWxsKTsgcmV0dXJuIHI7IH1cblxuICAgIC8vIChwdWJsaWMpIHRoaXMgJSBhXG4gICAgZnVuY3Rpb24gYm5SZW1haW5kZXIoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmRpdlJlbVRvKGEsbnVsbCxyKTsgcmV0dXJuIHI7IH1cblxuICAgIC8vIChwdWJsaWMpIFt0aGlzL2EsdGhpcyVhXVxuICAgIGZ1bmN0aW9uIGJuRGl2aWRlQW5kUmVtYWluZGVyKGEpIHtcbiAgICAgIHZhciBxID0gbmJpKCksIHIgPSBuYmkoKTtcbiAgICAgIHRoaXMuZGl2UmVtVG8oYSxxLHIpO1xuICAgICAgcmV0dXJuIG5ldyBBcnJheShxLHIpO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHRoaXMgKj0gbiwgdGhpcyA+PSAwLCAxIDwgbiA8IERWXG4gICAgZnVuY3Rpb24gYm5wRE11bHRpcGx5KG4pIHtcbiAgICAgIHRoaXNbdGhpcy50XSA9IHRoaXMuYW0oMCxuLTEsdGhpcywwLDAsdGhpcy50KTtcbiAgICAgICsrdGhpcy50O1xuICAgICAgdGhpcy5jbGFtcCgpO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHRoaXMgKz0gbiA8PCB3IHdvcmRzLCB0aGlzID49IDBcbiAgICBmdW5jdGlvbiBibnBEQWRkT2Zmc2V0KG4sdykge1xuICAgICAgaWYobiA9PSAwKSByZXR1cm47XG4gICAgICB3aGlsZSh0aGlzLnQgPD0gdykgdGhpc1t0aGlzLnQrK10gPSAwO1xuICAgICAgdGhpc1t3XSArPSBuO1xuICAgICAgd2hpbGUodGhpc1t3XSA+PSB0aGlzLkRWKSB7XG4gICAgICAgIHRoaXNbd10gLT0gdGhpcy5EVjtcbiAgICAgICAgaWYoKyt3ID49IHRoaXMudCkgdGhpc1t0aGlzLnQrK10gPSAwO1xuICAgICAgICArK3RoaXNbd107XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQSBcIm51bGxcIiByZWR1Y2VyXG4gICAgZnVuY3Rpb24gTnVsbEV4cCgpIHt9XG4gICAgZnVuY3Rpb24gbk5vcCh4KSB7IHJldHVybiB4OyB9XG4gICAgZnVuY3Rpb24gbk11bFRvKHgseSxyKSB7IHgubXVsdGlwbHlUbyh5LHIpOyB9XG4gICAgZnVuY3Rpb24gblNxclRvKHgscikgeyB4LnNxdWFyZVRvKHIpOyB9XG5cbiAgICBOdWxsRXhwLnByb3RvdHlwZS5jb252ZXJ0ID0gbk5vcDtcbiAgICBOdWxsRXhwLnByb3RvdHlwZS5yZXZlcnQgPSBuTm9wO1xuICAgIE51bGxFeHAucHJvdG90eXBlLm11bFRvID0gbk11bFRvO1xuICAgIE51bGxFeHAucHJvdG90eXBlLnNxclRvID0gblNxclRvO1xuXG4gICAgLy8gKHB1YmxpYykgdGhpc15lXG4gICAgZnVuY3Rpb24gYm5Qb3coZSkgeyByZXR1cm4gdGhpcy5leHAoZSxuZXcgTnVsbEV4cCgpKTsgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgciA9IGxvd2VyIG4gd29yZHMgb2YgXCJ0aGlzICogYVwiLCBhLnQgPD0gblxuICAgIC8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbiAgICBmdW5jdGlvbiBibnBNdWx0aXBseUxvd2VyVG8oYSxuLHIpIHtcbiAgICAgIHZhciBpID0gTWF0aC5taW4odGhpcy50K2EudCxuKTtcbiAgICAgIHIucyA9IDA7IC8vIGFzc3VtZXMgYSx0aGlzID49IDBcbiAgICAgIHIudCA9IGk7XG4gICAgICB3aGlsZShpID4gMCkgclstLWldID0gMDtcbiAgICAgIHZhciBqO1xuICAgICAgZm9yKGogPSByLnQtdGhpcy50OyBpIDwgajsgKytpKSByW2krdGhpcy50XSA9IHRoaXMuYW0oMCxhW2ldLHIsaSwwLHRoaXMudCk7XG4gICAgICBmb3IoaiA9IE1hdGgubWluKGEudCxuKTsgaSA8IGo7ICsraSkgdGhpcy5hbSgwLGFbaV0scixpLDAsbi1pKTtcbiAgICAgIHIuY2xhbXAoKTtcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSByID0gXCJ0aGlzICogYVwiIHdpdGhvdXQgbG93ZXIgbiB3b3JkcywgbiA+IDBcbiAgICAvLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG4gICAgZnVuY3Rpb24gYm5wTXVsdGlwbHlVcHBlclRvKGEsbixyKSB7XG4gICAgICAtLW47XG4gICAgICB2YXIgaSA9IHIudCA9IHRoaXMudCthLnQtbjtcbiAgICAgIHIucyA9IDA7IC8vIGFzc3VtZXMgYSx0aGlzID49IDBcbiAgICAgIHdoaWxlKC0taSA+PSAwKSByW2ldID0gMDtcbiAgICAgIGZvcihpID0gTWF0aC5tYXgobi10aGlzLnQsMCk7IGkgPCBhLnQ7ICsraSlcbiAgICAgICAgclt0aGlzLnQraS1uXSA9IHRoaXMuYW0obi1pLGFbaV0sciwwLDAsdGhpcy50K2ktbik7XG4gICAgICByLmNsYW1wKCk7XG4gICAgICByLmRyU2hpZnRUbygxLHIpO1xuICAgIH1cblxuICAgIC8vIEJhcnJldHQgbW9kdWxhciByZWR1Y3Rpb25cbiAgICBmdW5jdGlvbiBCYXJyZXR0KG0pIHtcbiAgICAgIC8vIHNldHVwIEJhcnJldHRcbiAgICAgIHRoaXMucjIgPSBuYmkoKTtcbiAgICAgIHRoaXMucTMgPSBuYmkoKTtcbiAgICAgIEJpZ0ludGVnZXIuT05FLmRsU2hpZnRUbygyKm0udCx0aGlzLnIyKTtcbiAgICAgIHRoaXMubXUgPSB0aGlzLnIyLmRpdmlkZShtKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmFycmV0dENvbnZlcnQoeCkge1xuICAgICAgaWYoeC5zIDwgMCB8fCB4LnQgPiAyKnRoaXMubS50KSByZXR1cm4geC5tb2QodGhpcy5tKTtcbiAgICAgIGVsc2UgaWYoeC5jb21wYXJlVG8odGhpcy5tKSA8IDApIHJldHVybiB4O1xuICAgICAgZWxzZSB7IHZhciByID0gbmJpKCk7IHguY29weVRvKHIpOyB0aGlzLnJlZHVjZShyKTsgcmV0dXJuIHI7IH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiYXJyZXR0UmV2ZXJ0KHgpIHsgcmV0dXJuIHg7IH1cblxuICAgIC8vIHggPSB4IG1vZCBtIChIQUMgMTQuNDIpXG4gICAgZnVuY3Rpb24gYmFycmV0dFJlZHVjZSh4KSB7XG4gICAgICB4LmRyU2hpZnRUbyh0aGlzLm0udC0xLHRoaXMucjIpO1xuICAgICAgaWYoeC50ID4gdGhpcy5tLnQrMSkgeyB4LnQgPSB0aGlzLm0udCsxOyB4LmNsYW1wKCk7IH1cbiAgICAgIHRoaXMubXUubXVsdGlwbHlVcHBlclRvKHRoaXMucjIsdGhpcy5tLnQrMSx0aGlzLnEzKTtcbiAgICAgIHRoaXMubS5tdWx0aXBseUxvd2VyVG8odGhpcy5xMyx0aGlzLm0udCsxLHRoaXMucjIpO1xuICAgICAgd2hpbGUoeC5jb21wYXJlVG8odGhpcy5yMikgPCAwKSB4LmRBZGRPZmZzZXQoMSx0aGlzLm0udCsxKTtcbiAgICAgIHguc3ViVG8odGhpcy5yMix4KTtcbiAgICAgIHdoaWxlKHguY29tcGFyZVRvKHRoaXMubSkgPj0gMCkgeC5zdWJUbyh0aGlzLm0seCk7XG4gICAgfVxuXG4gICAgLy8gciA9IHheMiBtb2QgbTsgeCAhPSByXG4gICAgZnVuY3Rpb24gYmFycmV0dFNxclRvKHgscikgeyB4LnNxdWFyZVRvKHIpOyB0aGlzLnJlZHVjZShyKTsgfVxuXG4gICAgLy8gciA9IHgqeSBtb2QgbTsgeCx5ICE9IHJcbiAgICBmdW5jdGlvbiBiYXJyZXR0TXVsVG8oeCx5LHIpIHsgeC5tdWx0aXBseVRvKHkscik7IHRoaXMucmVkdWNlKHIpOyB9XG5cbiAgICBCYXJyZXR0LnByb3RvdHlwZS5jb252ZXJ0ID0gYmFycmV0dENvbnZlcnQ7XG4gICAgQmFycmV0dC5wcm90b3R5cGUucmV2ZXJ0ID0gYmFycmV0dFJldmVydDtcbiAgICBCYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2UgPSBiYXJyZXR0UmVkdWNlO1xuICAgIEJhcnJldHQucHJvdG90eXBlLm11bFRvID0gYmFycmV0dE11bFRvO1xuICAgIEJhcnJldHQucHJvdG90eXBlLnNxclRvID0gYmFycmV0dFNxclRvO1xuXG4gICAgLy8gKHB1YmxpYykgdGhpc15lICUgbSAoSEFDIDE0Ljg1KVxuICAgIGZ1bmN0aW9uIGJuTW9kUG93KGUsbSkge1xuICAgICAgdmFyIGkgPSBlLmJpdExlbmd0aCgpLCBrLCByID0gbmJ2KDEpLCB6O1xuICAgICAgaWYoaSA8PSAwKSByZXR1cm4gcjtcbiAgICAgIGVsc2UgaWYoaSA8IDE4KSBrID0gMTtcbiAgICAgIGVsc2UgaWYoaSA8IDQ4KSBrID0gMztcbiAgICAgIGVsc2UgaWYoaSA8IDE0NCkgayA9IDQ7XG4gICAgICBlbHNlIGlmKGkgPCA3NjgpIGsgPSA1O1xuICAgICAgZWxzZSBrID0gNjtcbiAgICAgIGlmKGkgPCA4KVxuICAgICAgICB6ID0gbmV3IENsYXNzaWMobSk7XG4gICAgICBlbHNlIGlmKG0uaXNFdmVuKCkpXG4gICAgICAgIHogPSBuZXcgQmFycmV0dChtKTtcbiAgICAgIGVsc2VcbiAgICAgICAgeiA9IG5ldyBNb250Z29tZXJ5KG0pO1xuXG4gICAgICAvLyBwcmVjb21wdXRhdGlvblxuICAgICAgdmFyIGcgPSBuZXcgQXJyYXkoKSwgbiA9IDMsIGsxID0gay0xLCBrbSA9ICgxPDxrKS0xO1xuICAgICAgZ1sxXSA9IHouY29udmVydCh0aGlzKTtcbiAgICAgIGlmKGsgPiAxKSB7XG4gICAgICAgIHZhciBnMiA9IG5iaSgpO1xuICAgICAgICB6LnNxclRvKGdbMV0sZzIpO1xuICAgICAgICB3aGlsZShuIDw9IGttKSB7XG4gICAgICAgICAgZ1tuXSA9IG5iaSgpO1xuICAgICAgICAgIHoubXVsVG8oZzIsZ1tuLTJdLGdbbl0pO1xuICAgICAgICAgIG4gKz0gMjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaiA9IGUudC0xLCB3LCBpczEgPSB0cnVlLCByMiA9IG5iaSgpLCB0O1xuICAgICAgaSA9IG5iaXRzKGVbal0pLTE7XG4gICAgICB3aGlsZShqID49IDApIHtcbiAgICAgICAgaWYoaSA+PSBrMSkgdyA9IChlW2pdPj4oaS1rMSkpJmttO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB3ID0gKGVbal0mKCgxPDwoaSsxKSktMSkpPDwoazEtaSk7XG4gICAgICAgICAgaWYoaiA+IDApIHcgfD0gZVtqLTFdPj4odGhpcy5EQitpLWsxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG4gPSBrO1xuICAgICAgICB3aGlsZSgodyYxKSA9PSAwKSB7IHcgPj49IDE7IC0tbjsgfVxuICAgICAgICBpZigoaSAtPSBuKSA8IDApIHsgaSArPSB0aGlzLkRCOyAtLWo7IH1cbiAgICAgICAgaWYoaXMxKSB7XHQvLyByZXQgPT0gMSwgZG9uJ3QgYm90aGVyIHNxdWFyaW5nIG9yIG11bHRpcGx5aW5nIGl0XG4gICAgICAgICAgZ1t3XS5jb3B5VG8ocik7XG4gICAgICAgICAgaXMxID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgd2hpbGUobiA+IDEpIHsgei5zcXJUbyhyLHIyKTsgei5zcXJUbyhyMixyKTsgbiAtPSAyOyB9XG4gICAgICAgICAgaWYobiA+IDApIHouc3FyVG8ocixyMik7IGVsc2UgeyB0ID0gcjsgciA9IHIyOyByMiA9IHQ7IH1cbiAgICAgICAgICB6Lm11bFRvKHIyLGdbd10scik7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZShqID49IDAgJiYgKGVbal0mKDE8PGkpKSA9PSAwKSB7XG4gICAgICAgICAgei5zcXJUbyhyLHIyKTsgdCA9IHI7IHIgPSByMjsgcjIgPSB0O1xuICAgICAgICAgIGlmKC0taSA8IDApIHsgaSA9IHRoaXMuREItMTsgLS1qOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB6LnJldmVydChyKTtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSBnY2QodGhpcyxhKSAoSEFDIDE0LjU0KVxuICAgIGZ1bmN0aW9uIGJuR0NEKGEpIHtcbiAgICAgIHZhciB4ID0gKHRoaXMuczwwKT90aGlzLm5lZ2F0ZSgpOnRoaXMuY2xvbmUoKTtcbiAgICAgIHZhciB5ID0gKGEuczwwKT9hLm5lZ2F0ZSgpOmEuY2xvbmUoKTtcbiAgICAgIGlmKHguY29tcGFyZVRvKHkpIDwgMCkgeyB2YXIgdCA9IHg7IHggPSB5OyB5ID0gdDsgfVxuICAgICAgdmFyIGkgPSB4LmdldExvd2VzdFNldEJpdCgpLCBnID0geS5nZXRMb3dlc3RTZXRCaXQoKTtcbiAgICAgIGlmKGcgPCAwKSByZXR1cm4geDtcbiAgICAgIGlmKGkgPCBnKSBnID0gaTtcbiAgICAgIGlmKGcgPiAwKSB7XG4gICAgICAgIHguclNoaWZ0VG8oZyx4KTtcbiAgICAgICAgeS5yU2hpZnRUbyhnLHkpO1xuICAgICAgfVxuICAgICAgd2hpbGUoeC5zaWdudW0oKSA+IDApIHtcbiAgICAgICAgaWYoKGkgPSB4LmdldExvd2VzdFNldEJpdCgpKSA+IDApIHguclNoaWZ0VG8oaSx4KTtcbiAgICAgICAgaWYoKGkgPSB5LmdldExvd2VzdFNldEJpdCgpKSA+IDApIHkuclNoaWZ0VG8oaSx5KTtcbiAgICAgICAgaWYoeC5jb21wYXJlVG8oeSkgPj0gMCkge1xuICAgICAgICAgIHguc3ViVG8oeSx4KTtcbiAgICAgICAgICB4LnJTaGlmdFRvKDEseCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgeS5zdWJUbyh4LHkpO1xuICAgICAgICAgIHkuclNoaWZ0VG8oMSx5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYoZyA+IDApIHkubFNoaWZ0VG8oZyx5KTtcbiAgICAgIHJldHVybiB5O1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHRoaXMgJSBuLCBuIDwgMl4yNlxuICAgIGZ1bmN0aW9uIGJucE1vZEludChuKSB7XG4gICAgICBpZihuIDw9IDApIHJldHVybiAwO1xuICAgICAgdmFyIGQgPSB0aGlzLkRWJW4sIHIgPSAodGhpcy5zPDApP24tMTowO1xuICAgICAgaWYodGhpcy50ID4gMClcbiAgICAgICAgaWYoZCA9PSAwKSByID0gdGhpc1swXSVuO1xuICAgICAgICBlbHNlIGZvcih2YXIgaSA9IHRoaXMudC0xOyBpID49IDA7IC0taSkgciA9IChkKnIrdGhpc1tpXSklbjtcbiAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIDEvdGhpcyAlIG0gKEhBQyAxNC42MSlcbiAgICBmdW5jdGlvbiBibk1vZEludmVyc2UobSkge1xuICAgICAgdmFyIGFjID0gbS5pc0V2ZW4oKTtcbiAgICAgIGlmKCh0aGlzLmlzRXZlbigpICYmIGFjKSB8fCBtLnNpZ251bSgpID09IDApIHJldHVybiBCaWdJbnRlZ2VyLlpFUk87XG4gICAgICB2YXIgdSA9IG0uY2xvbmUoKSwgdiA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIHZhciBhID0gbmJ2KDEpLCBiID0gbmJ2KDApLCBjID0gbmJ2KDApLCBkID0gbmJ2KDEpO1xuICAgICAgd2hpbGUodS5zaWdudW0oKSAhPSAwKSB7XG4gICAgICAgIHdoaWxlKHUuaXNFdmVuKCkpIHtcbiAgICAgICAgICB1LnJTaGlmdFRvKDEsdSk7XG4gICAgICAgICAgaWYoYWMpIHtcbiAgICAgICAgICAgIGlmKCFhLmlzRXZlbigpIHx8ICFiLmlzRXZlbigpKSB7IGEuYWRkVG8odGhpcyxhKTsgYi5zdWJUbyhtLGIpOyB9XG4gICAgICAgICAgICBhLnJTaGlmdFRvKDEsYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYoIWIuaXNFdmVuKCkpIGIuc3ViVG8obSxiKTtcbiAgICAgICAgICBiLnJTaGlmdFRvKDEsYik7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUodi5pc0V2ZW4oKSkge1xuICAgICAgICAgIHYuclNoaWZ0VG8oMSx2KTtcbiAgICAgICAgICBpZihhYykge1xuICAgICAgICAgICAgaWYoIWMuaXNFdmVuKCkgfHwgIWQuaXNFdmVuKCkpIHsgYy5hZGRUbyh0aGlzLGMpOyBkLnN1YlRvKG0sZCk7IH1cbiAgICAgICAgICAgIGMuclNoaWZ0VG8oMSxjKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZighZC5pc0V2ZW4oKSkgZC5zdWJUbyhtLGQpO1xuICAgICAgICAgIGQuclNoaWZ0VG8oMSxkKTtcbiAgICAgICAgfVxuICAgICAgICBpZih1LmNvbXBhcmVUbyh2KSA+PSAwKSB7XG4gICAgICAgICAgdS5zdWJUbyh2LHUpO1xuICAgICAgICAgIGlmKGFjKSBhLnN1YlRvKGMsYSk7XG4gICAgICAgICAgYi5zdWJUbyhkLGIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHYuc3ViVG8odSx2KTtcbiAgICAgICAgICBpZihhYykgYy5zdWJUbyhhLGMpO1xuICAgICAgICAgIGQuc3ViVG8oYixkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYodi5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDApIHJldHVybiBCaWdJbnRlZ2VyLlpFUk87XG4gICAgICBpZihkLmNvbXBhcmVUbyhtKSA+PSAwKSByZXR1cm4gZC5zdWJ0cmFjdChtKTtcbiAgICAgIGlmKGQuc2lnbnVtKCkgPCAwKSBkLmFkZFRvKG0sZCk7IGVsc2UgcmV0dXJuIGQ7XG4gICAgICBpZihkLnNpZ251bSgpIDwgMCkgcmV0dXJuIGQuYWRkKG0pOyBlbHNlIHJldHVybiBkO1xuICAgIH1cblxuICAgIHZhciBsb3dwcmltZXMgPSBbMiwzLDUsNywxMSwxMywxNywxOSwyMywyOSwzMSwzNyw0MSw0Myw0Nyw1Myw1OSw2MSw2Nyw3MSw3Myw3OSw4Myw4OSw5NywxMDEsMTAzLDEwNywxMDksMTEzLDEyNywxMzEsMTM3LDEzOSwxNDksMTUxLDE1NywxNjMsMTY3LDE3MywxNzksMTgxLDE5MSwxOTMsMTk3LDE5OSwyMTEsMjIzLDIyNywyMjksMjMzLDIzOSwyNDEsMjUxLDI1NywyNjMsMjY5LDI3MSwyNzcsMjgxLDI4MywyOTMsMzA3LDMxMSwzMTMsMzE3LDMzMSwzMzcsMzQ3LDM0OSwzNTMsMzU5LDM2NywzNzMsMzc5LDM4MywzODksMzk3LDQwMSw0MDksNDE5LDQyMSw0MzEsNDMzLDQzOSw0NDMsNDQ5LDQ1Nyw0NjEsNDYzLDQ2Nyw0NzksNDg3LDQ5MSw0OTksNTAzLDUwOSw1MjEsNTIzLDU0MSw1NDcsNTU3LDU2Myw1NjksNTcxLDU3Nyw1ODcsNTkzLDU5OSw2MDEsNjA3LDYxMyw2MTcsNjE5LDYzMSw2NDEsNjQzLDY0Nyw2NTMsNjU5LDY2MSw2NzMsNjc3LDY4Myw2OTEsNzAxLDcwOSw3MTksNzI3LDczMyw3MzksNzQzLDc1MSw3NTcsNzYxLDc2OSw3NzMsNzg3LDc5Nyw4MDksODExLDgyMSw4MjMsODI3LDgyOSw4MzksODUzLDg1Nyw4NTksODYzLDg3Nyw4ODEsODgzLDg4Nyw5MDcsOTExLDkxOSw5MjksOTM3LDk0MSw5NDcsOTUzLDk2Nyw5NzEsOTc3LDk4Myw5OTEsOTk3XTtcbiAgICB2YXIgbHBsaW0gPSAoMTw8MjYpL2xvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdO1xuXG4gICAgLy8gKHB1YmxpYykgdGVzdCBwcmltYWxpdHkgd2l0aCBjZXJ0YWludHkgPj0gMS0uNV50XG4gICAgZnVuY3Rpb24gYm5Jc1Byb2JhYmxlUHJpbWUodCkge1xuICAgICAgdmFyIGksIHggPSB0aGlzLmFicygpO1xuICAgICAgaWYoeC50ID09IDEgJiYgeFswXSA8PSBsb3dwcmltZXNbbG93cHJpbWVzLmxlbmd0aC0xXSkge1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBsb3dwcmltZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgaWYoeFswXSA9PSBsb3dwcmltZXNbaV0pIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZih4LmlzRXZlbigpKSByZXR1cm4gZmFsc2U7XG4gICAgICBpID0gMTtcbiAgICAgIHdoaWxlKGkgPCBsb3dwcmltZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBtID0gbG93cHJpbWVzW2ldLCBqID0gaSsxO1xuICAgICAgICB3aGlsZShqIDwgbG93cHJpbWVzLmxlbmd0aCAmJiBtIDwgbHBsaW0pIG0gKj0gbG93cHJpbWVzW2orK107XG4gICAgICAgIG0gPSB4Lm1vZEludChtKTtcbiAgICAgICAgd2hpbGUoaSA8IGopIGlmKG0lbG93cHJpbWVzW2krK10gPT0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHgubWlsbGVyUmFiaW4odCk7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgdHJ1ZSBpZiBwcm9iYWJseSBwcmltZSAoSEFDIDQuMjQsIE1pbGxlci1SYWJpbilcbiAgICBmdW5jdGlvbiBibnBNaWxsZXJSYWJpbih0KSB7XG4gICAgICB2YXIgbjEgPSB0aGlzLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKTtcbiAgICAgIHZhciBrID0gbjEuZ2V0TG93ZXN0U2V0Qml0KCk7XG4gICAgICBpZihrIDw9IDApIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciByID0gbjEuc2hpZnRSaWdodChrKTtcbiAgICAgIHQgPSAodCsxKT4+MTtcbiAgICAgIGlmKHQgPiBsb3dwcmltZXMubGVuZ3RoKSB0ID0gbG93cHJpbWVzLmxlbmd0aDtcbiAgICAgIHZhciBhID0gbmJpKCk7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdDsgKytpKSB7XG4gICAgICAgIC8vUGljayBiYXNlcyBhdCByYW5kb20sIGluc3RlYWQgb2Ygc3RhcnRpbmcgYXQgMlxuICAgICAgICBhLmZyb21JbnQobG93cHJpbWVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpsb3dwcmltZXMubGVuZ3RoKV0pO1xuICAgICAgICB2YXIgeSA9IGEubW9kUG93KHIsdGhpcyk7XG4gICAgICAgIGlmKHkuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSAhPSAwICYmIHkuY29tcGFyZVRvKG4xKSAhPSAwKSB7XG4gICAgICAgICAgdmFyIGogPSAxO1xuICAgICAgICAgIHdoaWxlKGorKyA8IGsgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgICAgIHkgPSB5Lm1vZFBvd0ludCgyLHRoaXMpO1xuICAgICAgICAgICAgaWYoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpID09IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoeS5jb21wYXJlVG8objEpICE9IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gcHJvdGVjdGVkXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuY2h1bmtTaXplID0gYm5wQ2h1bmtTaXplO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRvUmFkaXggPSBibnBUb1JhZGl4O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21SYWRpeCA9IGJucEZyb21SYWRpeDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tTnVtYmVyID0gYm5wRnJvbU51bWJlcjtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXR3aXNlVG8gPSBibnBCaXR3aXNlVG87XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuY2hhbmdlQml0ID0gYm5wQ2hhbmdlQml0O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFkZFRvID0gYm5wQWRkVG87XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZE11bHRpcGx5ID0gYm5wRE11bHRpcGx5O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmRBZGRPZmZzZXQgPSBibnBEQWRkT2Zmc2V0O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5TG93ZXJUbyA9IGJucE11bHRpcGx5TG93ZXJUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVVwcGVyVG8gPSBibnBNdWx0aXBseVVwcGVyVG87XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW50ID0gYm5wTW9kSW50O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1pbGxlclJhYmluID0gYm5wTWlsbGVyUmFiaW47XG5cbiAgICAvLyBwdWJsaWNcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbG9uZSA9IGJuQ2xvbmU7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuaW50VmFsdWUgPSBibkludFZhbHVlO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmJ5dGVWYWx1ZSA9IGJuQnl0ZVZhbHVlO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNob3J0VmFsdWUgPSBiblNob3J0VmFsdWU7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc2lnbnVtID0gYm5TaWdOdW07XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUudG9CeXRlQXJyYXkgPSBiblRvQnl0ZUFycmF5O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmVxdWFscyA9IGJuRXF1YWxzO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1pbiA9IGJuTWluO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1heCA9IGJuTWF4O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFuZCA9IGJuQW5kO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm9yID0gYm5PcjtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS54b3IgPSBiblhvcjtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbmROb3QgPSBibkFuZE5vdDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5ub3QgPSBibk5vdDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdExlZnQgPSBiblNoaWZ0TGVmdDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdFJpZ2h0ID0gYm5TaGlmdFJpZ2h0O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmdldExvd2VzdFNldEJpdCA9IGJuR2V0TG93ZXN0U2V0Qml0O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdENvdW50ID0gYm5CaXRDb3VudDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS50ZXN0Qml0ID0gYm5UZXN0Qml0O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNldEJpdCA9IGJuU2V0Qml0O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsZWFyQml0ID0gYm5DbGVhckJpdDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5mbGlwQml0ID0gYm5GbGlwQml0O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFkZCA9IGJuQWRkO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnN1YnRyYWN0ID0gYm5TdWJ0cmFjdDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseSA9IGJuTXVsdGlwbHk7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlID0gYm5EaXZpZGU7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUucmVtYWluZGVyID0gYm5SZW1haW5kZXI7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlQW5kUmVtYWluZGVyID0gYm5EaXZpZGVBbmRSZW1haW5kZXI7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubW9kUG93ID0gYm5Nb2RQb3c7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW52ZXJzZSA9IGJuTW9kSW52ZXJzZTtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5wb3cgPSBiblBvdztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5nY2QgPSBibkdDRDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWUgPSBibklzUHJvYmFibGVQcmltZTtcblxuICAgIC8vIEpTQk4tc3BlY2lmaWMgZXh0ZW5zaW9uXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlID0gYm5TcXVhcmU7XG5cbiAgICAvLyBFeHBvc2UgdGhlIEJhcnJldHQgZnVuY3Rpb25cbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5CYXJyZXR0ID0gQmFycmV0dFxuXG4gICAgLy8gQmlnSW50ZWdlciBpbnRlcmZhY2VzIG5vdCBpbXBsZW1lbnRlZCBpbiBqc2JuOlxuXG4gICAgLy8gQmlnSW50ZWdlcihpbnQgc2lnbnVtLCBieXRlW10gbWFnbml0dWRlKVxuICAgIC8vIGRvdWJsZSBkb3VibGVWYWx1ZSgpXG4gICAgLy8gZmxvYXQgZmxvYXRWYWx1ZSgpXG4gICAgLy8gaW50IGhhc2hDb2RlKClcbiAgICAvLyBsb25nIGxvbmdWYWx1ZSgpXG4gICAgLy8gc3RhdGljIEJpZ0ludGVnZXIgdmFsdWVPZihsb25nIHZhbClcblxuXHQvLyBSYW5kb20gbnVtYmVyIGdlbmVyYXRvciAtIHJlcXVpcmVzIGEgUFJORyBiYWNrZW5kLCBlLmcuIHBybmc0LmpzXG5cblx0Ly8gRm9yIGJlc3QgcmVzdWx0cywgcHV0IGNvZGUgbGlrZVxuXHQvLyA8Ym9keSBvbkNsaWNrPSdybmdfc2VlZF90aW1lKCk7JyBvbktleVByZXNzPSdybmdfc2VlZF90aW1lKCk7Jz5cblx0Ly8gaW4geW91ciBtYWluIEhUTUwgZG9jdW1lbnQuXG5cblx0dmFyIHJuZ19zdGF0ZTtcblx0dmFyIHJuZ19wb29sO1xuXHR2YXIgcm5nX3BwdHI7XG5cblx0Ly8gTWl4IGluIGEgMzItYml0IGludGVnZXIgaW50byB0aGUgcG9vbFxuXHRmdW5jdGlvbiBybmdfc2VlZF9pbnQoeCkge1xuXHQgIHJuZ19wb29sW3JuZ19wcHRyKytdIF49IHggJiAyNTU7XG5cdCAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gXj0gKHggPj4gOCkgJiAyNTU7XG5cdCAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gXj0gKHggPj4gMTYpICYgMjU1O1xuXHQgIHJuZ19wb29sW3JuZ19wcHRyKytdIF49ICh4ID4+IDI0KSAmIDI1NTtcblx0ICBpZihybmdfcHB0ciA+PSBybmdfcHNpemUpIHJuZ19wcHRyIC09IHJuZ19wc2l6ZTtcblx0fVxuXG5cdC8vIE1peCBpbiB0aGUgY3VycmVudCB0aW1lICh3L21pbGxpc2Vjb25kcykgaW50byB0aGUgcG9vbFxuXHRmdW5jdGlvbiBybmdfc2VlZF90aW1lKCkge1xuXHQgIHJuZ19zZWVkX2ludChuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG5cdH1cblxuXHQvLyBJbml0aWFsaXplIHRoZSBwb29sIHdpdGgganVuayBpZiBuZWVkZWQuXG5cdGlmKHJuZ19wb29sID09IG51bGwpIHtcblx0ICBybmdfcG9vbCA9IG5ldyBBcnJheSgpO1xuXHQgIHJuZ19wcHRyID0gMDtcblx0ICB2YXIgdDtcblx0ICBpZih0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5jcnlwdG8pIHtcblx0XHRpZiAod2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcblx0XHQgIC8vIFVzZSB3ZWJjcnlwdG8gaWYgYXZhaWxhYmxlXG5cdFx0ICB2YXIgdWEgPSBuZXcgVWludDhBcnJheSgzMik7XG5cdFx0ICB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1YSk7XG5cdFx0ICBmb3IodCA9IDA7IHQgPCAzMjsgKyt0KVxuXHRcdFx0cm5nX3Bvb2xbcm5nX3BwdHIrK10gPSB1YVt0XTtcblx0XHR9XG5cdFx0ZWxzZSBpZihuYXZpZ2F0b3IuYXBwTmFtZSA9PSBcIk5ldHNjYXBlXCIgJiYgbmF2aWdhdG9yLmFwcFZlcnNpb24gPCBcIjVcIikge1xuXHRcdCAgLy8gRXh0cmFjdCBlbnRyb3B5ICgyNTYgYml0cykgZnJvbSBOUzQgUk5HIGlmIGF2YWlsYWJsZVxuXHRcdCAgdmFyIHogPSB3aW5kb3cuY3J5cHRvLnJhbmRvbSgzMik7XG5cdFx0ICBmb3IodCA9IDA7IHQgPCB6Lmxlbmd0aDsgKyt0KVxuXHRcdFx0cm5nX3Bvb2xbcm5nX3BwdHIrK10gPSB6LmNoYXJDb2RlQXQodCkgJiAyNTU7XG5cdFx0fVxuXHQgIH1cblx0ICB3aGlsZShybmdfcHB0ciA8IHJuZ19wc2l6ZSkgeyAgLy8gZXh0cmFjdCBzb21lIHJhbmRvbW5lc3MgZnJvbSBNYXRoLnJhbmRvbSgpXG5cdFx0dCA9IE1hdGguZmxvb3IoNjU1MzYgKiBNYXRoLnJhbmRvbSgpKTtcblx0XHRybmdfcG9vbFtybmdfcHB0cisrXSA9IHQgPj4+IDg7XG5cdFx0cm5nX3Bvb2xbcm5nX3BwdHIrK10gPSB0ICYgMjU1O1xuXHQgIH1cblx0ICBybmdfcHB0ciA9IDA7XG5cdCAgcm5nX3NlZWRfdGltZSgpO1xuXHQgIC8vcm5nX3NlZWRfaW50KHdpbmRvdy5zY3JlZW5YKTtcblx0ICAvL3JuZ19zZWVkX2ludCh3aW5kb3cuc2NyZWVuWSk7XG5cdH1cblxuXHRmdW5jdGlvbiBybmdfZ2V0X2J5dGUoKSB7XG5cdCAgaWYocm5nX3N0YXRlID09IG51bGwpIHtcblx0XHRybmdfc2VlZF90aW1lKCk7XG5cdFx0cm5nX3N0YXRlID0gcHJuZ19uZXdzdGF0ZSgpO1xuXHRcdHJuZ19zdGF0ZS5pbml0KHJuZ19wb29sKTtcblx0XHRmb3Iocm5nX3BwdHIgPSAwOyBybmdfcHB0ciA8IHJuZ19wb29sLmxlbmd0aDsgKytybmdfcHB0cilcblx0XHQgIHJuZ19wb29sW3JuZ19wcHRyXSA9IDA7XG5cdFx0cm5nX3BwdHIgPSAwO1xuXHRcdC8vcm5nX3Bvb2wgPSBudWxsO1xuXHQgIH1cblx0ICAvLyBUT0RPOiBhbGxvdyByZXNlZWRpbmcgYWZ0ZXIgZmlyc3QgcmVxdWVzdFxuXHQgIHJldHVybiBybmdfc3RhdGUubmV4dCgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm5nX2dldF9ieXRlcyhiYSkge1xuXHQgIHZhciBpO1xuXHQgIGZvcihpID0gMDsgaSA8IGJhLmxlbmd0aDsgKytpKSBiYVtpXSA9IHJuZ19nZXRfYnl0ZSgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gU2VjdXJlUmFuZG9tKCkge31cblxuXHRTZWN1cmVSYW5kb20ucHJvdG90eXBlLm5leHRCeXRlcyA9IHJuZ19nZXRfYnl0ZXM7XG5cblx0Ly8gcHJuZzQuanMgLSB1c2VzIEFyY2ZvdXIgYXMgYSBQUk5HXG5cblx0ZnVuY3Rpb24gQXJjZm91cigpIHtcblx0ICB0aGlzLmkgPSAwO1xuXHQgIHRoaXMuaiA9IDA7XG5cdCAgdGhpcy5TID0gbmV3IEFycmF5KCk7XG5cdH1cblxuXHQvLyBJbml0aWFsaXplIGFyY2ZvdXIgY29udGV4dCBmcm9tIGtleSwgYW4gYXJyYXkgb2YgaW50cywgZWFjaCBmcm9tIFswLi4yNTVdXG5cdGZ1bmN0aW9uIEFSQzRpbml0KGtleSkge1xuXHQgIHZhciBpLCBqLCB0O1xuXHQgIGZvcihpID0gMDsgaSA8IDI1NjsgKytpKVxuXHRcdHRoaXMuU1tpXSA9IGk7XG5cdCAgaiA9IDA7XG5cdCAgZm9yKGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcblx0XHRqID0gKGogKyB0aGlzLlNbaV0gKyBrZXlbaSAlIGtleS5sZW5ndGhdKSAmIDI1NTtcblx0XHR0ID0gdGhpcy5TW2ldO1xuXHRcdHRoaXMuU1tpXSA9IHRoaXMuU1tqXTtcblx0XHR0aGlzLlNbal0gPSB0O1xuXHQgIH1cblx0ICB0aGlzLmkgPSAwO1xuXHQgIHRoaXMuaiA9IDA7XG5cdH1cblxuXHRmdW5jdGlvbiBBUkM0bmV4dCgpIHtcblx0ICB2YXIgdDtcblx0ICB0aGlzLmkgPSAodGhpcy5pICsgMSkgJiAyNTU7XG5cdCAgdGhpcy5qID0gKHRoaXMuaiArIHRoaXMuU1t0aGlzLmldKSAmIDI1NTtcblx0ICB0ID0gdGhpcy5TW3RoaXMuaV07XG5cdCAgdGhpcy5TW3RoaXMuaV0gPSB0aGlzLlNbdGhpcy5qXTtcblx0ICB0aGlzLlNbdGhpcy5qXSA9IHQ7XG5cdCAgcmV0dXJuIHRoaXMuU1sodCArIHRoaXMuU1t0aGlzLmldKSAmIDI1NV07XG5cdH1cblxuXHRBcmNmb3VyLnByb3RvdHlwZS5pbml0ID0gQVJDNGluaXQ7XG5cdEFyY2ZvdXIucHJvdG90eXBlLm5leHQgPSBBUkM0bmV4dDtcblxuXHQvLyBQbHVnIGluIHlvdXIgUk5HIGNvbnN0cnVjdG9yIGhlcmVcblx0ZnVuY3Rpb24gcHJuZ19uZXdzdGF0ZSgpIHtcblx0ICByZXR1cm4gbmV3IEFyY2ZvdXIoKTtcblx0fVxuXG5cdC8vIFBvb2wgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCBhbmQgZ3JlYXRlciB0aGFuIDMyLlxuXHQvLyBBbiBhcnJheSBvZiBieXRlcyB0aGUgc2l6ZSBvZiB0aGUgcG9vbCB3aWxsIGJlIHBhc3NlZCB0byBpbml0KClcblx0dmFyIHJuZ19wc2l6ZSA9IDI1NjtcblxuICBCaWdJbnRlZ2VyLlNlY3VyZVJhbmRvbSA9IFNlY3VyZVJhbmRvbTtcbiAgQmlnSW50ZWdlci5CaWdJbnRlZ2VyID0gQmlnSW50ZWdlcjtcbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IEJpZ0ludGVnZXI7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5CaWdJbnRlZ2VyID0gQmlnSW50ZWdlcjtcbiAgICB0aGlzLlNlY3VyZVJhbmRvbSA9IFNlY3VyZVJhbmRvbTtcbiAgfVxuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKG5hY2wpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gUG9ydGVkIGluIDIwMTQgYnkgRG1pdHJ5IENoZXN0bnlraCBhbmQgRGV2aSBNYW5kaXJpLlxuLy8gUHVibGljIGRvbWFpbi5cbi8vXG4vLyBJbXBsZW1lbnRhdGlvbiBkZXJpdmVkIGZyb20gVHdlZXROYUNsIHZlcnNpb24gMjAxNDA0MjcuXG4vLyBTZWUgZm9yIGRldGFpbHM6IGh0dHA6Ly90d2VldG5hY2wuY3IueXAudG8vXG5cbnZhciBnZiA9IGZ1bmN0aW9uKGluaXQpIHtcbiAgdmFyIGksIHIgPSBuZXcgRmxvYXQ2NEFycmF5KDE2KTtcbiAgaWYgKGluaXQpIGZvciAoaSA9IDA7IGkgPCBpbml0Lmxlbmd0aDsgaSsrKSByW2ldID0gaW5pdFtpXTtcbiAgcmV0dXJuIHI7XG59O1xuXG4vLyAgUGx1Z2dhYmxlLCBpbml0aWFsaXplZCBpbiBoaWdoLWxldmVsIEFQSSBiZWxvdy5cbnZhciByYW5kb21ieXRlcyA9IGZ1bmN0aW9uKC8qIHgsIG4gKi8pIHsgdGhyb3cgbmV3IEVycm9yKCdubyBQUk5HJyk7IH07XG5cbnZhciBfMCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbnZhciBfOSA9IG5ldyBVaW50OEFycmF5KDMyKTsgXzlbMF0gPSA5O1xuXG52YXIgZ2YwID0gZ2YoKSxcbiAgICBnZjEgPSBnZihbMV0pLFxuICAgIF8xMjE2NjUgPSBnZihbMHhkYjQxLCAxXSksXG4gICAgRCA9IGdmKFsweDc4YTMsIDB4MTM1OSwgMHg0ZGNhLCAweDc1ZWIsIDB4ZDhhYiwgMHg0MTQxLCAweDBhNGQsIDB4MDA3MCwgMHhlODk4LCAweDc3NzksIDB4NDA3OSwgMHg4Y2M3LCAweGZlNzMsIDB4MmI2ZiwgMHg2Y2VlLCAweDUyMDNdKSxcbiAgICBEMiA9IGdmKFsweGYxNTksIDB4MjZiMiwgMHg5Yjk0LCAweGViZDYsIDB4YjE1NiwgMHg4MjgzLCAweDE0OWEsIDB4MDBlMCwgMHhkMTMwLCAweGVlZjMsIDB4ODBmMiwgMHgxOThlLCAweGZjZTcsIDB4NTZkZiwgMHhkOWRjLCAweDI0MDZdKSxcbiAgICBYID0gZ2YoWzB4ZDUxYSwgMHg4ZjI1LCAweDJkNjAsIDB4Yzk1NiwgMHhhN2IyLCAweDk1MjUsIDB4Yzc2MCwgMHg2OTJjLCAweGRjNWMsIDB4ZmRkNiwgMHhlMjMxLCAweGMwYTQsIDB4NTNmZSwgMHhjZDZlLCAweDM2ZDMsIDB4MjE2OV0pLFxuICAgIFkgPSBnZihbMHg2NjU4LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2XSksXG4gICAgSSA9IGdmKFsweGEwYjAsIDB4NGEwZSwgMHgxYjI3LCAweGM0ZWUsIDB4ZTQ3OCwgMHhhZDJmLCAweDE4MDYsIDB4MmY0MywgMHhkN2E3LCAweDNkZmIsIDB4MDA5OSwgMHgyYjRkLCAweGRmMGIsIDB4NGZjMSwgMHgyNDgwLCAweDJiODNdKTtcblxuZnVuY3Rpb24gdHM2NCh4LCBpLCBoLCBsKSB7XG4gIHhbaV0gICA9IChoID4+IDI0KSAmIDB4ZmY7XG4gIHhbaSsxXSA9IChoID4+IDE2KSAmIDB4ZmY7XG4gIHhbaSsyXSA9IChoID4+ICA4KSAmIDB4ZmY7XG4gIHhbaSszXSA9IGggJiAweGZmO1xuICB4W2krNF0gPSAobCA+PiAyNCkgICYgMHhmZjtcbiAgeFtpKzVdID0gKGwgPj4gMTYpICAmIDB4ZmY7XG4gIHhbaSs2XSA9IChsID4+ICA4KSAgJiAweGZmO1xuICB4W2krN10gPSBsICYgMHhmZjtcbn1cblxuZnVuY3Rpb24gdm4oeCwgeGksIHksIHlpLCBuKSB7XG4gIHZhciBpLGQgPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBkIHw9IHhbeGkraV1eeVt5aStpXTtcbiAgcmV0dXJuICgxICYgKChkIC0gMSkgPj4+IDgpKSAtIDE7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b192ZXJpZnlfMTYoeCwgeGksIHksIHlpKSB7XG4gIHJldHVybiB2bih4LHhpLHkseWksMTYpO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fdmVyaWZ5XzMyKHgsIHhpLCB5LCB5aSkge1xuICByZXR1cm4gdm4oeCx4aSx5LHlpLDMyKTtcbn1cblxuZnVuY3Rpb24gY29yZV9zYWxzYTIwKG8sIHAsIGssIGMpIHtcbiAgdmFyIGowICA9IGNbIDBdICYgMHhmZiB8IChjWyAxXSAmIDB4ZmYpPDw4IHwgKGNbIDJdICYgMHhmZik8PDE2IHwgKGNbIDNdICYgMHhmZik8PDI0LFxuICAgICAgajEgID0ga1sgMF0gJiAweGZmIHwgKGtbIDFdICYgMHhmZik8PDggfCAoa1sgMl0gJiAweGZmKTw8MTYgfCAoa1sgM10gJiAweGZmKTw8MjQsXG4gICAgICBqMiAgPSBrWyA0XSAmIDB4ZmYgfCAoa1sgNV0gJiAweGZmKTw8OCB8IChrWyA2XSAmIDB4ZmYpPDwxNiB8IChrWyA3XSAmIDB4ZmYpPDwyNCxcbiAgICAgIGozICA9IGtbIDhdICYgMHhmZiB8IChrWyA5XSAmIDB4ZmYpPDw4IHwgKGtbMTBdICYgMHhmZik8PDE2IHwgKGtbMTFdICYgMHhmZik8PDI0LFxuICAgICAgajQgID0ga1sxMl0gJiAweGZmIHwgKGtbMTNdICYgMHhmZik8PDggfCAoa1sxNF0gJiAweGZmKTw8MTYgfCAoa1sxNV0gJiAweGZmKTw8MjQsXG4gICAgICBqNSAgPSBjWyA0XSAmIDB4ZmYgfCAoY1sgNV0gJiAweGZmKTw8OCB8IChjWyA2XSAmIDB4ZmYpPDwxNiB8IChjWyA3XSAmIDB4ZmYpPDwyNCxcbiAgICAgIGo2ICA9IHBbIDBdICYgMHhmZiB8IChwWyAxXSAmIDB4ZmYpPDw4IHwgKHBbIDJdICYgMHhmZik8PDE2IHwgKHBbIDNdICYgMHhmZik8PDI0LFxuICAgICAgajcgID0gcFsgNF0gJiAweGZmIHwgKHBbIDVdICYgMHhmZik8PDggfCAocFsgNl0gJiAweGZmKTw8MTYgfCAocFsgN10gJiAweGZmKTw8MjQsXG4gICAgICBqOCAgPSBwWyA4XSAmIDB4ZmYgfCAocFsgOV0gJiAweGZmKTw8OCB8IChwWzEwXSAmIDB4ZmYpPDwxNiB8IChwWzExXSAmIDB4ZmYpPDwyNCxcbiAgICAgIGo5ICA9IHBbMTJdICYgMHhmZiB8IChwWzEzXSAmIDB4ZmYpPDw4IHwgKHBbMTRdICYgMHhmZik8PDE2IHwgKHBbMTVdICYgMHhmZik8PDI0LFxuICAgICAgajEwID0gY1sgOF0gJiAweGZmIHwgKGNbIDldICYgMHhmZik8PDggfCAoY1sxMF0gJiAweGZmKTw8MTYgfCAoY1sxMV0gJiAweGZmKTw8MjQsXG4gICAgICBqMTEgPSBrWzE2XSAmIDB4ZmYgfCAoa1sxN10gJiAweGZmKTw8OCB8IChrWzE4XSAmIDB4ZmYpPDwxNiB8IChrWzE5XSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoxMiA9IGtbMjBdICYgMHhmZiB8IChrWzIxXSAmIDB4ZmYpPDw4IHwgKGtbMjJdICYgMHhmZik8PDE2IHwgKGtbMjNdICYgMHhmZik8PDI0LFxuICAgICAgajEzID0ga1syNF0gJiAweGZmIHwgKGtbMjVdICYgMHhmZik8PDggfCAoa1syNl0gJiAweGZmKTw8MTYgfCAoa1syN10gJiAweGZmKTw8MjQsXG4gICAgICBqMTQgPSBrWzI4XSAmIDB4ZmYgfCAoa1syOV0gJiAweGZmKTw8OCB8IChrWzMwXSAmIDB4ZmYpPDwxNiB8IChrWzMxXSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoxNSA9IGNbMTJdICYgMHhmZiB8IChjWzEzXSAmIDB4ZmYpPDw4IHwgKGNbMTRdICYgMHhmZik8PDE2IHwgKGNbMTVdICYgMHhmZik8PDI0O1xuXG4gIHZhciB4MCA9IGowLCB4MSA9IGoxLCB4MiA9IGoyLCB4MyA9IGozLCB4NCA9IGo0LCB4NSA9IGo1LCB4NiA9IGo2LCB4NyA9IGo3LFxuICAgICAgeDggPSBqOCwgeDkgPSBqOSwgeDEwID0gajEwLCB4MTEgPSBqMTEsIHgxMiA9IGoxMiwgeDEzID0gajEzLCB4MTQgPSBqMTQsXG4gICAgICB4MTUgPSBqMTUsIHU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAyMDsgaSArPSAyKSB7XG4gICAgdSA9IHgwICsgeDEyIHwgMDtcbiAgICB4NCBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDQgKyB4MCB8IDA7XG4gICAgeDggXj0gdTw8OSB8IHU+Pj4oMzItOSk7XG4gICAgdSA9IHg4ICsgeDQgfCAwO1xuICAgIHgxMiBePSB1PDwxMyB8IHU+Pj4oMzItMTMpO1xuICAgIHUgPSB4MTIgKyB4OCB8IDA7XG4gICAgeDAgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcblxuICAgIHUgPSB4NSArIHgxIHwgMDtcbiAgICB4OSBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDkgKyB4NSB8IDA7XG4gICAgeDEzIF49IHU8PDkgfCB1Pj4+KDMyLTkpO1xuICAgIHUgPSB4MTMgKyB4OSB8IDA7XG4gICAgeDEgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDEgKyB4MTMgfCAwO1xuICAgIHg1IF49IHU8PDE4IHwgdT4+PigzMi0xOCk7XG5cbiAgICB1ID0geDEwICsgeDYgfCAwO1xuICAgIHgxNCBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDE0ICsgeDEwIHwgMDtcbiAgICB4MiBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDIgKyB4MTQgfCAwO1xuICAgIHg2IF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHg2ICsgeDIgfCAwO1xuICAgIHgxMCBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuXG4gICAgdSA9IHgxNSArIHgxMSB8IDA7XG4gICAgeDMgXj0gdTw8NyB8IHU+Pj4oMzItNyk7XG4gICAgdSA9IHgzICsgeDE1IHwgMDtcbiAgICB4NyBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDcgKyB4MyB8IDA7XG4gICAgeDExIF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHgxMSArIHg3IHwgMDtcbiAgICB4MTUgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcblxuICAgIHUgPSB4MCArIHgzIHwgMDtcbiAgICB4MSBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDEgKyB4MCB8IDA7XG4gICAgeDIgXj0gdTw8OSB8IHU+Pj4oMzItOSk7XG4gICAgdSA9IHgyICsgeDEgfCAwO1xuICAgIHgzIF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHgzICsgeDIgfCAwO1xuICAgIHgwIF49IHU8PDE4IHwgdT4+PigzMi0xOCk7XG5cbiAgICB1ID0geDUgKyB4NCB8IDA7XG4gICAgeDYgXj0gdTw8NyB8IHU+Pj4oMzItNyk7XG4gICAgdSA9IHg2ICsgeDUgfCAwO1xuICAgIHg3IF49IHU8PDkgfCB1Pj4+KDMyLTkpO1xuICAgIHUgPSB4NyArIHg2IHwgMDtcbiAgICB4NCBePSB1PDwxMyB8IHU+Pj4oMzItMTMpO1xuICAgIHUgPSB4NCArIHg3IHwgMDtcbiAgICB4NSBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuXG4gICAgdSA9IHgxMCArIHg5IHwgMDtcbiAgICB4MTEgXj0gdTw8NyB8IHU+Pj4oMzItNyk7XG4gICAgdSA9IHgxMSArIHgxMCB8IDA7XG4gICAgeDggXj0gdTw8OSB8IHU+Pj4oMzItOSk7XG4gICAgdSA9IHg4ICsgeDExIHwgMDtcbiAgICB4OSBePSB1PDwxMyB8IHU+Pj4oMzItMTMpO1xuICAgIHUgPSB4OSArIHg4IHwgMDtcbiAgICB4MTAgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcblxuICAgIHUgPSB4MTUgKyB4MTQgfCAwO1xuICAgIHgxMiBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDEyICsgeDE1IHwgMDtcbiAgICB4MTMgXj0gdTw8OSB8IHU+Pj4oMzItOSk7XG4gICAgdSA9IHgxMyArIHgxMiB8IDA7XG4gICAgeDE0IF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHgxNCArIHgxMyB8IDA7XG4gICAgeDE1IF49IHU8PDE4IHwgdT4+PigzMi0xOCk7XG4gIH1cbiAgIHgwID0gIHgwICsgIGowIHwgMDtcbiAgIHgxID0gIHgxICsgIGoxIHwgMDtcbiAgIHgyID0gIHgyICsgIGoyIHwgMDtcbiAgIHgzID0gIHgzICsgIGozIHwgMDtcbiAgIHg0ID0gIHg0ICsgIGo0IHwgMDtcbiAgIHg1ID0gIHg1ICsgIGo1IHwgMDtcbiAgIHg2ID0gIHg2ICsgIGo2IHwgMDtcbiAgIHg3ID0gIHg3ICsgIGo3IHwgMDtcbiAgIHg4ID0gIHg4ICsgIGo4IHwgMDtcbiAgIHg5ID0gIHg5ICsgIGo5IHwgMDtcbiAgeDEwID0geDEwICsgajEwIHwgMDtcbiAgeDExID0geDExICsgajExIHwgMDtcbiAgeDEyID0geDEyICsgajEyIHwgMDtcbiAgeDEzID0geDEzICsgajEzIHwgMDtcbiAgeDE0ID0geDE0ICsgajE0IHwgMDtcbiAgeDE1ID0geDE1ICsgajE1IHwgMDtcblxuICBvWyAwXSA9IHgwID4+PiAgMCAmIDB4ZmY7XG4gIG9bIDFdID0geDAgPj4+ICA4ICYgMHhmZjtcbiAgb1sgMl0gPSB4MCA+Pj4gMTYgJiAweGZmO1xuICBvWyAzXSA9IHgwID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1sgNF0gPSB4MSA+Pj4gIDAgJiAweGZmO1xuICBvWyA1XSA9IHgxID4+PiAgOCAmIDB4ZmY7XG4gIG9bIDZdID0geDEgPj4+IDE2ICYgMHhmZjtcbiAgb1sgN10gPSB4MSA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bIDhdID0geDIgPj4+ICAwICYgMHhmZjtcbiAgb1sgOV0gPSB4MiA+Pj4gIDggJiAweGZmO1xuICBvWzEwXSA9IHgyID4+PiAxNiAmIDB4ZmY7XG4gIG9bMTFdID0geDIgPj4+IDI0ICYgMHhmZjtcblxuICBvWzEyXSA9IHgzID4+PiAgMCAmIDB4ZmY7XG4gIG9bMTNdID0geDMgPj4+ICA4ICYgMHhmZjtcbiAgb1sxNF0gPSB4MyA+Pj4gMTYgJiAweGZmO1xuICBvWzE1XSA9IHgzID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1sxNl0gPSB4NCA+Pj4gIDAgJiAweGZmO1xuICBvWzE3XSA9IHg0ID4+PiAgOCAmIDB4ZmY7XG4gIG9bMThdID0geDQgPj4+IDE2ICYgMHhmZjtcbiAgb1sxOV0gPSB4NCA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bMjBdID0geDUgPj4+ICAwICYgMHhmZjtcbiAgb1syMV0gPSB4NSA+Pj4gIDggJiAweGZmO1xuICBvWzIyXSA9IHg1ID4+PiAxNiAmIDB4ZmY7XG4gIG9bMjNdID0geDUgPj4+IDI0ICYgMHhmZjtcblxuICBvWzI0XSA9IHg2ID4+PiAgMCAmIDB4ZmY7XG4gIG9bMjVdID0geDYgPj4+ICA4ICYgMHhmZjtcbiAgb1syNl0gPSB4NiA+Pj4gMTYgJiAweGZmO1xuICBvWzI3XSA9IHg2ID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1syOF0gPSB4NyA+Pj4gIDAgJiAweGZmO1xuICBvWzI5XSA9IHg3ID4+PiAgOCAmIDB4ZmY7XG4gIG9bMzBdID0geDcgPj4+IDE2ICYgMHhmZjtcbiAgb1szMV0gPSB4NyA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bMzJdID0geDggPj4+ICAwICYgMHhmZjtcbiAgb1szM10gPSB4OCA+Pj4gIDggJiAweGZmO1xuICBvWzM0XSA9IHg4ID4+PiAxNiAmIDB4ZmY7XG4gIG9bMzVdID0geDggPj4+IDI0ICYgMHhmZjtcblxuICBvWzM2XSA9IHg5ID4+PiAgMCAmIDB4ZmY7XG4gIG9bMzddID0geDkgPj4+ICA4ICYgMHhmZjtcbiAgb1szOF0gPSB4OSA+Pj4gMTYgJiAweGZmO1xuICBvWzM5XSA9IHg5ID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1s0MF0gPSB4MTAgPj4+ICAwICYgMHhmZjtcbiAgb1s0MV0gPSB4MTAgPj4+ICA4ICYgMHhmZjtcbiAgb1s0Ml0gPSB4MTAgPj4+IDE2ICYgMHhmZjtcbiAgb1s0M10gPSB4MTAgPj4+IDI0ICYgMHhmZjtcblxuICBvWzQ0XSA9IHgxMSA+Pj4gIDAgJiAweGZmO1xuICBvWzQ1XSA9IHgxMSA+Pj4gIDggJiAweGZmO1xuICBvWzQ2XSA9IHgxMSA+Pj4gMTYgJiAweGZmO1xuICBvWzQ3XSA9IHgxMSA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bNDhdID0geDEyID4+PiAgMCAmIDB4ZmY7XG4gIG9bNDldID0geDEyID4+PiAgOCAmIDB4ZmY7XG4gIG9bNTBdID0geDEyID4+PiAxNiAmIDB4ZmY7XG4gIG9bNTFdID0geDEyID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1s1Ml0gPSB4MTMgPj4+ICAwICYgMHhmZjtcbiAgb1s1M10gPSB4MTMgPj4+ICA4ICYgMHhmZjtcbiAgb1s1NF0gPSB4MTMgPj4+IDE2ICYgMHhmZjtcbiAgb1s1NV0gPSB4MTMgPj4+IDI0ICYgMHhmZjtcblxuICBvWzU2XSA9IHgxNCA+Pj4gIDAgJiAweGZmO1xuICBvWzU3XSA9IHgxNCA+Pj4gIDggJiAweGZmO1xuICBvWzU4XSA9IHgxNCA+Pj4gMTYgJiAweGZmO1xuICBvWzU5XSA9IHgxNCA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bNjBdID0geDE1ID4+PiAgMCAmIDB4ZmY7XG4gIG9bNjFdID0geDE1ID4+PiAgOCAmIDB4ZmY7XG4gIG9bNjJdID0geDE1ID4+PiAxNiAmIDB4ZmY7XG4gIG9bNjNdID0geDE1ID4+PiAyNCAmIDB4ZmY7XG59XG5cbmZ1bmN0aW9uIGNvcmVfaHNhbHNhMjAobyxwLGssYykge1xuICB2YXIgajAgID0gY1sgMF0gJiAweGZmIHwgKGNbIDFdICYgMHhmZik8PDggfCAoY1sgMl0gJiAweGZmKTw8MTYgfCAoY1sgM10gJiAweGZmKTw8MjQsXG4gICAgICBqMSAgPSBrWyAwXSAmIDB4ZmYgfCAoa1sgMV0gJiAweGZmKTw8OCB8IChrWyAyXSAmIDB4ZmYpPDwxNiB8IChrWyAzXSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoyICA9IGtbIDRdICYgMHhmZiB8IChrWyA1XSAmIDB4ZmYpPDw4IHwgKGtbIDZdICYgMHhmZik8PDE2IHwgKGtbIDddICYgMHhmZik8PDI0LFxuICAgICAgajMgID0ga1sgOF0gJiAweGZmIHwgKGtbIDldICYgMHhmZik8PDggfCAoa1sxMF0gJiAweGZmKTw8MTYgfCAoa1sxMV0gJiAweGZmKTw8MjQsXG4gICAgICBqNCAgPSBrWzEyXSAmIDB4ZmYgfCAoa1sxM10gJiAweGZmKTw8OCB8IChrWzE0XSAmIDB4ZmYpPDwxNiB8IChrWzE1XSAmIDB4ZmYpPDwyNCxcbiAgICAgIGo1ICA9IGNbIDRdICYgMHhmZiB8IChjWyA1XSAmIDB4ZmYpPDw4IHwgKGNbIDZdICYgMHhmZik8PDE2IHwgKGNbIDddICYgMHhmZik8PDI0LFxuICAgICAgajYgID0gcFsgMF0gJiAweGZmIHwgKHBbIDFdICYgMHhmZik8PDggfCAocFsgMl0gJiAweGZmKTw8MTYgfCAocFsgM10gJiAweGZmKTw8MjQsXG4gICAgICBqNyAgPSBwWyA0XSAmIDB4ZmYgfCAocFsgNV0gJiAweGZmKTw8OCB8IChwWyA2XSAmIDB4ZmYpPDwxNiB8IChwWyA3XSAmIDB4ZmYpPDwyNCxcbiAgICAgIGo4ICA9IHBbIDhdICYgMHhmZiB8IChwWyA5XSAmIDB4ZmYpPDw4IHwgKHBbMTBdICYgMHhmZik8PDE2IHwgKHBbMTFdICYgMHhmZik8PDI0LFxuICAgICAgajkgID0gcFsxMl0gJiAweGZmIHwgKHBbMTNdICYgMHhmZik8PDggfCAocFsxNF0gJiAweGZmKTw8MTYgfCAocFsxNV0gJiAweGZmKTw8MjQsXG4gICAgICBqMTAgPSBjWyA4XSAmIDB4ZmYgfCAoY1sgOV0gJiAweGZmKTw8OCB8IChjWzEwXSAmIDB4ZmYpPDwxNiB8IChjWzExXSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoxMSA9IGtbMTZdICYgMHhmZiB8IChrWzE3XSAmIDB4ZmYpPDw4IHwgKGtbMThdICYgMHhmZik8PDE2IHwgKGtbMTldICYgMHhmZik8PDI0LFxuICAgICAgajEyID0ga1syMF0gJiAweGZmIHwgKGtbMjFdICYgMHhmZik8PDggfCAoa1syMl0gJiAweGZmKTw8MTYgfCAoa1syM10gJiAweGZmKTw8MjQsXG4gICAgICBqMTMgPSBrWzI0XSAmIDB4ZmYgfCAoa1syNV0gJiAweGZmKTw8OCB8IChrWzI2XSAmIDB4ZmYpPDwxNiB8IChrWzI3XSAmIDB4ZmYpPDwyNCxcbiAgICAgIGoxNCA9IGtbMjhdICYgMHhmZiB8IChrWzI5XSAmIDB4ZmYpPDw4IHwgKGtbMzBdICYgMHhmZik8PDE2IHwgKGtbMzFdICYgMHhmZik8PDI0LFxuICAgICAgajE1ID0gY1sxMl0gJiAweGZmIHwgKGNbMTNdICYgMHhmZik8PDggfCAoY1sxNF0gJiAweGZmKTw8MTYgfCAoY1sxNV0gJiAweGZmKTw8MjQ7XG5cbiAgdmFyIHgwID0gajAsIHgxID0gajEsIHgyID0gajIsIHgzID0gajMsIHg0ID0gajQsIHg1ID0gajUsIHg2ID0gajYsIHg3ID0gajcsXG4gICAgICB4OCA9IGo4LCB4OSA9IGo5LCB4MTAgPSBqMTAsIHgxMSA9IGoxMSwgeDEyID0gajEyLCB4MTMgPSBqMTMsIHgxNCA9IGoxNCxcbiAgICAgIHgxNSA9IGoxNSwgdTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDIwOyBpICs9IDIpIHtcbiAgICB1ID0geDAgKyB4MTIgfCAwO1xuICAgIHg0IF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4NCArIHgwIHwgMDtcbiAgICB4OCBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDggKyB4NCB8IDA7XG4gICAgeDEyIF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHgxMiArIHg4IHwgMDtcbiAgICB4MCBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuXG4gICAgdSA9IHg1ICsgeDEgfCAwO1xuICAgIHg5IF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4OSArIHg1IHwgMDtcbiAgICB4MTMgXj0gdTw8OSB8IHU+Pj4oMzItOSk7XG4gICAgdSA9IHgxMyArIHg5IHwgMDtcbiAgICB4MSBePSB1PDwxMyB8IHU+Pj4oMzItMTMpO1xuICAgIHUgPSB4MSArIHgxMyB8IDA7XG4gICAgeDUgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcblxuICAgIHUgPSB4MTAgKyB4NiB8IDA7XG4gICAgeDE0IF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4MTQgKyB4MTAgfCAwO1xuICAgIHgyIF49IHU8PDkgfCB1Pj4+KDMyLTkpO1xuICAgIHUgPSB4MiArIHgxNCB8IDA7XG4gICAgeDYgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDYgKyB4MiB8IDA7XG4gICAgeDEwIF49IHU8PDE4IHwgdT4+PigzMi0xOCk7XG5cbiAgICB1ID0geDE1ICsgeDExIHwgMDtcbiAgICB4MyBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDMgKyB4MTUgfCAwO1xuICAgIHg3IF49IHU8PDkgfCB1Pj4+KDMyLTkpO1xuICAgIHUgPSB4NyArIHgzIHwgMDtcbiAgICB4MTEgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDExICsgeDcgfCAwO1xuICAgIHgxNSBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuXG4gICAgdSA9IHgwICsgeDMgfCAwO1xuICAgIHgxIF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4MSArIHgwIHwgMDtcbiAgICB4MiBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDIgKyB4MSB8IDA7XG4gICAgeDMgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDMgKyB4MiB8IDA7XG4gICAgeDAgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcblxuICAgIHUgPSB4NSArIHg0IHwgMDtcbiAgICB4NiBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDYgKyB4NSB8IDA7XG4gICAgeDcgXj0gdTw8OSB8IHU+Pj4oMzItOSk7XG4gICAgdSA9IHg3ICsgeDYgfCAwO1xuICAgIHg0IF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHg0ICsgeDcgfCAwO1xuICAgIHg1IF49IHU8PDE4IHwgdT4+PigzMi0xOCk7XG5cbiAgICB1ID0geDEwICsgeDkgfCAwO1xuICAgIHgxMSBePSB1PDw3IHwgdT4+PigzMi03KTtcbiAgICB1ID0geDExICsgeDEwIHwgMDtcbiAgICB4OCBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDggKyB4MTEgfCAwO1xuICAgIHg5IF49IHU8PDEzIHwgdT4+PigzMi0xMyk7XG4gICAgdSA9IHg5ICsgeDggfCAwO1xuICAgIHgxMCBePSB1PDwxOCB8IHU+Pj4oMzItMTgpO1xuXG4gICAgdSA9IHgxNSArIHgxNCB8IDA7XG4gICAgeDEyIF49IHU8PDcgfCB1Pj4+KDMyLTcpO1xuICAgIHUgPSB4MTIgKyB4MTUgfCAwO1xuICAgIHgxMyBePSB1PDw5IHwgdT4+PigzMi05KTtcbiAgICB1ID0geDEzICsgeDEyIHwgMDtcbiAgICB4MTQgXj0gdTw8MTMgfCB1Pj4+KDMyLTEzKTtcbiAgICB1ID0geDE0ICsgeDEzIHwgMDtcbiAgICB4MTUgXj0gdTw8MTggfCB1Pj4+KDMyLTE4KTtcbiAgfVxuXG4gIG9bIDBdID0geDAgPj4+ICAwICYgMHhmZjtcbiAgb1sgMV0gPSB4MCA+Pj4gIDggJiAweGZmO1xuICBvWyAyXSA9IHgwID4+PiAxNiAmIDB4ZmY7XG4gIG9bIDNdID0geDAgPj4+IDI0ICYgMHhmZjtcblxuICBvWyA0XSA9IHg1ID4+PiAgMCAmIDB4ZmY7XG4gIG9bIDVdID0geDUgPj4+ICA4ICYgMHhmZjtcbiAgb1sgNl0gPSB4NSA+Pj4gMTYgJiAweGZmO1xuICBvWyA3XSA9IHg1ID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1sgOF0gPSB4MTAgPj4+ICAwICYgMHhmZjtcbiAgb1sgOV0gPSB4MTAgPj4+ICA4ICYgMHhmZjtcbiAgb1sxMF0gPSB4MTAgPj4+IDE2ICYgMHhmZjtcbiAgb1sxMV0gPSB4MTAgPj4+IDI0ICYgMHhmZjtcblxuICBvWzEyXSA9IHgxNSA+Pj4gIDAgJiAweGZmO1xuICBvWzEzXSA9IHgxNSA+Pj4gIDggJiAweGZmO1xuICBvWzE0XSA9IHgxNSA+Pj4gMTYgJiAweGZmO1xuICBvWzE1XSA9IHgxNSA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bMTZdID0geDYgPj4+ICAwICYgMHhmZjtcbiAgb1sxN10gPSB4NiA+Pj4gIDggJiAweGZmO1xuICBvWzE4XSA9IHg2ID4+PiAxNiAmIDB4ZmY7XG4gIG9bMTldID0geDYgPj4+IDI0ICYgMHhmZjtcblxuICBvWzIwXSA9IHg3ID4+PiAgMCAmIDB4ZmY7XG4gIG9bMjFdID0geDcgPj4+ICA4ICYgMHhmZjtcbiAgb1syMl0gPSB4NyA+Pj4gMTYgJiAweGZmO1xuICBvWzIzXSA9IHg3ID4+PiAyNCAmIDB4ZmY7XG5cbiAgb1syNF0gPSB4OCA+Pj4gIDAgJiAweGZmO1xuICBvWzI1XSA9IHg4ID4+PiAgOCAmIDB4ZmY7XG4gIG9bMjZdID0geDggPj4+IDE2ICYgMHhmZjtcbiAgb1syN10gPSB4OCA+Pj4gMjQgJiAweGZmO1xuXG4gIG9bMjhdID0geDkgPj4+ICAwICYgMHhmZjtcbiAgb1syOV0gPSB4OSA+Pj4gIDggJiAweGZmO1xuICBvWzMwXSA9IHg5ID4+PiAxNiAmIDB4ZmY7XG4gIG9bMzFdID0geDkgPj4+IDI0ICYgMHhmZjtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX2NvcmVfc2Fsc2EyMChvdXQsaW5wLGssYykge1xuICBjb3JlX3NhbHNhMjAob3V0LGlucCxrLGMpO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fY29yZV9oc2Fsc2EyMChvdXQsaW5wLGssYykge1xuICBjb3JlX2hzYWxzYTIwKG91dCxpbnAsayxjKTtcbn1cblxudmFyIHNpZ21hID0gbmV3IFVpbnQ4QXJyYXkoWzEwMSwgMTIwLCAxMTIsIDk3LCAxMTAsIDEwMCwgMzIsIDUxLCA1MCwgNDUsIDk4LCAxMjEsIDExNiwgMTAxLCAzMiwgMTA3XSk7XG4gICAgICAgICAgICAvLyBcImV4cGFuZCAzMi1ieXRlIGtcIlxuXG5mdW5jdGlvbiBjcnlwdG9fc3RyZWFtX3NhbHNhMjBfeG9yKGMsY3BvcyxtLG1wb3MsYixuLGspIHtcbiAgdmFyIHogPSBuZXcgVWludDhBcnJheSgxNiksIHggPSBuZXcgVWludDhBcnJheSg2NCk7XG4gIHZhciB1LCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykgeltpXSA9IDA7XG4gIGZvciAoaSA9IDA7IGkgPCA4OyBpKyspIHpbaV0gPSBuW2ldO1xuICB3aGlsZSAoYiA+PSA2NCkge1xuICAgIGNyeXB0b19jb3JlX3NhbHNhMjAoeCx6LGssc2lnbWEpO1xuICAgIGZvciAoaSA9IDA7IGkgPCA2NDsgaSsrKSBjW2Nwb3MraV0gPSBtW21wb3MraV0gXiB4W2ldO1xuICAgIHUgPSAxO1xuICAgIGZvciAoaSA9IDg7IGkgPCAxNjsgaSsrKSB7XG4gICAgICB1ID0gdSArICh6W2ldICYgMHhmZikgfCAwO1xuICAgICAgeltpXSA9IHUgJiAweGZmO1xuICAgICAgdSA+Pj49IDg7XG4gICAgfVxuICAgIGIgLT0gNjQ7XG4gICAgY3BvcyArPSA2NDtcbiAgICBtcG9zICs9IDY0O1xuICB9XG4gIGlmIChiID4gMCkge1xuICAgIGNyeXB0b19jb3JlX3NhbHNhMjAoeCx6LGssc2lnbWEpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBiOyBpKyspIGNbY3BvcytpXSA9IG1bbXBvcytpXSBeIHhbaV07XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b19zdHJlYW1fc2Fsc2EyMChjLGNwb3MsYixuLGspIHtcbiAgdmFyIHogPSBuZXcgVWludDhBcnJheSgxNiksIHggPSBuZXcgVWludDhBcnJheSg2NCk7XG4gIHZhciB1LCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykgeltpXSA9IDA7XG4gIGZvciAoaSA9IDA7IGkgPCA4OyBpKyspIHpbaV0gPSBuW2ldO1xuICB3aGlsZSAoYiA+PSA2NCkge1xuICAgIGNyeXB0b19jb3JlX3NhbHNhMjAoeCx6LGssc2lnbWEpO1xuICAgIGZvciAoaSA9IDA7IGkgPCA2NDsgaSsrKSBjW2Nwb3MraV0gPSB4W2ldO1xuICAgIHUgPSAxO1xuICAgIGZvciAoaSA9IDg7IGkgPCAxNjsgaSsrKSB7XG4gICAgICB1ID0gdSArICh6W2ldICYgMHhmZikgfCAwO1xuICAgICAgeltpXSA9IHUgJiAweGZmO1xuICAgICAgdSA+Pj49IDg7XG4gICAgfVxuICAgIGIgLT0gNjQ7XG4gICAgY3BvcyArPSA2NDtcbiAgfVxuICBpZiAoYiA+IDApIHtcbiAgICBjcnlwdG9fY29yZV9zYWxzYTIwKHgseixrLHNpZ21hKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYjsgaSsrKSBjW2Nwb3MraV0gPSB4W2ldO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fc3RyZWFtKGMsY3BvcyxkLG4saykge1xuICB2YXIgcyA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgY3J5cHRvX2NvcmVfaHNhbHNhMjAocyxuLGssc2lnbWEpO1xuICB2YXIgc24gPSBuZXcgVWludDhBcnJheSg4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHNuW2ldID0gbltpKzE2XTtcbiAgcmV0dXJuIGNyeXB0b19zdHJlYW1fc2Fsc2EyMChjLGNwb3MsZCxzbixzKTtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX3N0cmVhbV94b3IoYyxjcG9zLG0sbXBvcyxkLG4saykge1xuICB2YXIgcyA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgY3J5cHRvX2NvcmVfaHNhbHNhMjAocyxuLGssc2lnbWEpO1xuICB2YXIgc24gPSBuZXcgVWludDhBcnJheSg4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHNuW2ldID0gbltpKzE2XTtcbiAgcmV0dXJuIGNyeXB0b19zdHJlYW1fc2Fsc2EyMF94b3IoYyxjcG9zLG0sbXBvcyxkLHNuLHMpO1xufVxuXG4vKlxuKiBQb3J0IG9mIEFuZHJldyBNb29uJ3MgUG9seTEzMDUtZG9ubmEtMTYuIFB1YmxpYyBkb21haW4uXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9mbG9vZHliZXJyeS9wb2x5MTMwNS1kb25uYVxuKi9cblxudmFyIHBvbHkxMzA1ID0gZnVuY3Rpb24oa2V5KSB7XG4gIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuICB0aGlzLnIgPSBuZXcgVWludDE2QXJyYXkoMTApO1xuICB0aGlzLmggPSBuZXcgVWludDE2QXJyYXkoMTApO1xuICB0aGlzLnBhZCA9IG5ldyBVaW50MTZBcnJheSg4KTtcbiAgdGhpcy5sZWZ0b3ZlciA9IDA7XG4gIHRoaXMuZmluID0gMDtcblxuICB2YXIgdDAsIHQxLCB0MiwgdDMsIHQ0LCB0NSwgdDYsIHQ3O1xuXG4gIHQwID0ga2V5WyAwXSAmIDB4ZmYgfCAoa2V5WyAxXSAmIDB4ZmYpIDw8IDg7IHRoaXMuclswXSA9ICggdDAgICAgICAgICAgICAgICAgICAgICApICYgMHgxZmZmO1xuICB0MSA9IGtleVsgMl0gJiAweGZmIHwgKGtleVsgM10gJiAweGZmKSA8PCA4OyB0aGlzLnJbMV0gPSAoKHQwID4+PiAxMykgfCAodDEgPDwgIDMpKSAmIDB4MWZmZjtcbiAgdDIgPSBrZXlbIDRdICYgMHhmZiB8IChrZXlbIDVdICYgMHhmZikgPDwgODsgdGhpcy5yWzJdID0gKCh0MSA+Pj4gMTApIHwgKHQyIDw8ICA2KSkgJiAweDFmMDM7XG4gIHQzID0ga2V5WyA2XSAmIDB4ZmYgfCAoa2V5WyA3XSAmIDB4ZmYpIDw8IDg7IHRoaXMuclszXSA9ICgodDIgPj4+ICA3KSB8ICh0MyA8PCAgOSkpICYgMHgxZmZmO1xuICB0NCA9IGtleVsgOF0gJiAweGZmIHwgKGtleVsgOV0gJiAweGZmKSA8PCA4OyB0aGlzLnJbNF0gPSAoKHQzID4+PiAgNCkgfCAodDQgPDwgMTIpKSAmIDB4MDBmZjtcbiAgdGhpcy5yWzVdID0gKCh0NCA+Pj4gIDEpKSAmIDB4MWZmZTtcbiAgdDUgPSBrZXlbMTBdICYgMHhmZiB8IChrZXlbMTFdICYgMHhmZikgPDwgODsgdGhpcy5yWzZdID0gKCh0NCA+Pj4gMTQpIHwgKHQ1IDw8ICAyKSkgJiAweDFmZmY7XG4gIHQ2ID0ga2V5WzEyXSAmIDB4ZmYgfCAoa2V5WzEzXSAmIDB4ZmYpIDw8IDg7IHRoaXMucls3XSA9ICgodDUgPj4+IDExKSB8ICh0NiA8PCAgNSkpICYgMHgxZjgxO1xuICB0NyA9IGtleVsxNF0gJiAweGZmIHwgKGtleVsxNV0gJiAweGZmKSA8PCA4OyB0aGlzLnJbOF0gPSAoKHQ2ID4+PiAgOCkgfCAodDcgPDwgIDgpKSAmIDB4MWZmZjtcbiAgdGhpcy5yWzldID0gKCh0NyA+Pj4gIDUpKSAmIDB4MDA3ZjtcblxuICB0aGlzLnBhZFswXSA9IGtleVsxNl0gJiAweGZmIHwgKGtleVsxN10gJiAweGZmKSA8PCA4O1xuICB0aGlzLnBhZFsxXSA9IGtleVsxOF0gJiAweGZmIHwgKGtleVsxOV0gJiAweGZmKSA8PCA4O1xuICB0aGlzLnBhZFsyXSA9IGtleVsyMF0gJiAweGZmIHwgKGtleVsyMV0gJiAweGZmKSA8PCA4O1xuICB0aGlzLnBhZFszXSA9IGtleVsyMl0gJiAweGZmIHwgKGtleVsyM10gJiAweGZmKSA8PCA4O1xuICB0aGlzLnBhZFs0XSA9IGtleVsyNF0gJiAweGZmIHwgKGtleVsyNV0gJiAweGZmKSA8PCA4O1xuICB0aGlzLnBhZFs1XSA9IGtleVsyNl0gJiAweGZmIHwgKGtleVsyN10gJiAweGZmKSA8PCA4O1xuICB0aGlzLnBhZFs2XSA9IGtleVsyOF0gJiAweGZmIHwgKGtleVsyOV0gJiAweGZmKSA8PCA4O1xuICB0aGlzLnBhZFs3XSA9IGtleVszMF0gJiAweGZmIHwgKGtleVszMV0gJiAweGZmKSA8PCA4O1xufTtcblxucG9seTEzMDUucHJvdG90eXBlLmJsb2NrcyA9IGZ1bmN0aW9uKG0sIG1wb3MsIGJ5dGVzKSB7XG4gIHZhciBoaWJpdCA9IHRoaXMuZmluID8gMCA6ICgxIDw8IDExKTtcbiAgdmFyIHQwLCB0MSwgdDIsIHQzLCB0NCwgdDUsIHQ2LCB0NywgYztcbiAgdmFyIGQwLCBkMSwgZDIsIGQzLCBkNCwgZDUsIGQ2LCBkNywgZDgsIGQ5O1xuXG4gIHZhciBoMCA9IHRoaXMuaFswXSxcbiAgICAgIGgxID0gdGhpcy5oWzFdLFxuICAgICAgaDIgPSB0aGlzLmhbMl0sXG4gICAgICBoMyA9IHRoaXMuaFszXSxcbiAgICAgIGg0ID0gdGhpcy5oWzRdLFxuICAgICAgaDUgPSB0aGlzLmhbNV0sXG4gICAgICBoNiA9IHRoaXMuaFs2XSxcbiAgICAgIGg3ID0gdGhpcy5oWzddLFxuICAgICAgaDggPSB0aGlzLmhbOF0sXG4gICAgICBoOSA9IHRoaXMuaFs5XTtcblxuICB2YXIgcjAgPSB0aGlzLnJbMF0sXG4gICAgICByMSA9IHRoaXMuclsxXSxcbiAgICAgIHIyID0gdGhpcy5yWzJdLFxuICAgICAgcjMgPSB0aGlzLnJbM10sXG4gICAgICByNCA9IHRoaXMucls0XSxcbiAgICAgIHI1ID0gdGhpcy5yWzVdLFxuICAgICAgcjYgPSB0aGlzLnJbNl0sXG4gICAgICByNyA9IHRoaXMucls3XSxcbiAgICAgIHI4ID0gdGhpcy5yWzhdLFxuICAgICAgcjkgPSB0aGlzLnJbOV07XG5cbiAgd2hpbGUgKGJ5dGVzID49IDE2KSB7XG4gICAgdDAgPSBtW21wb3MrIDBdICYgMHhmZiB8IChtW21wb3MrIDFdICYgMHhmZikgPDwgODsgaDAgKz0gKCB0MCAgICAgICAgICAgICAgICAgICAgICkgJiAweDFmZmY7XG4gICAgdDEgPSBtW21wb3MrIDJdICYgMHhmZiB8IChtW21wb3MrIDNdICYgMHhmZikgPDwgODsgaDEgKz0gKCh0MCA+Pj4gMTMpIHwgKHQxIDw8ICAzKSkgJiAweDFmZmY7XG4gICAgdDIgPSBtW21wb3MrIDRdICYgMHhmZiB8IChtW21wb3MrIDVdICYgMHhmZikgPDwgODsgaDIgKz0gKCh0MSA+Pj4gMTApIHwgKHQyIDw8ICA2KSkgJiAweDFmZmY7XG4gICAgdDMgPSBtW21wb3MrIDZdICYgMHhmZiB8IChtW21wb3MrIDddICYgMHhmZikgPDwgODsgaDMgKz0gKCh0MiA+Pj4gIDcpIHwgKHQzIDw8ICA5KSkgJiAweDFmZmY7XG4gICAgdDQgPSBtW21wb3MrIDhdICYgMHhmZiB8IChtW21wb3MrIDldICYgMHhmZikgPDwgODsgaDQgKz0gKCh0MyA+Pj4gIDQpIHwgKHQ0IDw8IDEyKSkgJiAweDFmZmY7XG4gICAgaDUgKz0gKCh0NCA+Pj4gIDEpKSAmIDB4MWZmZjtcbiAgICB0NSA9IG1bbXBvcysxMF0gJiAweGZmIHwgKG1bbXBvcysxMV0gJiAweGZmKSA8PCA4OyBoNiArPSAoKHQ0ID4+PiAxNCkgfCAodDUgPDwgIDIpKSAmIDB4MWZmZjtcbiAgICB0NiA9IG1bbXBvcysxMl0gJiAweGZmIHwgKG1bbXBvcysxM10gJiAweGZmKSA8PCA4OyBoNyArPSAoKHQ1ID4+PiAxMSkgfCAodDYgPDwgIDUpKSAmIDB4MWZmZjtcbiAgICB0NyA9IG1bbXBvcysxNF0gJiAweGZmIHwgKG1bbXBvcysxNV0gJiAweGZmKSA8PCA4OyBoOCArPSAoKHQ2ID4+PiAgOCkgfCAodDcgPDwgIDgpKSAmIDB4MWZmZjtcbiAgICBoOSArPSAoKHQ3ID4+PiA1KSkgfCBoaWJpdDtcblxuICAgIGMgPSAwO1xuXG4gICAgZDAgPSBjO1xuICAgIGQwICs9IGgwICogcjA7XG4gICAgZDAgKz0gaDEgKiAoNSAqIHI5KTtcbiAgICBkMCArPSBoMiAqICg1ICogcjgpO1xuICAgIGQwICs9IGgzICogKDUgKiByNyk7XG4gICAgZDAgKz0gaDQgKiAoNSAqIHI2KTtcbiAgICBjID0gKGQwID4+PiAxMyk7IGQwICY9IDB4MWZmZjtcbiAgICBkMCArPSBoNSAqICg1ICogcjUpO1xuICAgIGQwICs9IGg2ICogKDUgKiByNCk7XG4gICAgZDAgKz0gaDcgKiAoNSAqIHIzKTtcbiAgICBkMCArPSBoOCAqICg1ICogcjIpO1xuICAgIGQwICs9IGg5ICogKDUgKiByMSk7XG4gICAgYyArPSAoZDAgPj4+IDEzKTsgZDAgJj0gMHgxZmZmO1xuXG4gICAgZDEgPSBjO1xuICAgIGQxICs9IGgwICogcjE7XG4gICAgZDEgKz0gaDEgKiByMDtcbiAgICBkMSArPSBoMiAqICg1ICogcjkpO1xuICAgIGQxICs9IGgzICogKDUgKiByOCk7XG4gICAgZDEgKz0gaDQgKiAoNSAqIHI3KTtcbiAgICBjID0gKGQxID4+PiAxMyk7IGQxICY9IDB4MWZmZjtcbiAgICBkMSArPSBoNSAqICg1ICogcjYpO1xuICAgIGQxICs9IGg2ICogKDUgKiByNSk7XG4gICAgZDEgKz0gaDcgKiAoNSAqIHI0KTtcbiAgICBkMSArPSBoOCAqICg1ICogcjMpO1xuICAgIGQxICs9IGg5ICogKDUgKiByMik7XG4gICAgYyArPSAoZDEgPj4+IDEzKTsgZDEgJj0gMHgxZmZmO1xuXG4gICAgZDIgPSBjO1xuICAgIGQyICs9IGgwICogcjI7XG4gICAgZDIgKz0gaDEgKiByMTtcbiAgICBkMiArPSBoMiAqIHIwO1xuICAgIGQyICs9IGgzICogKDUgKiByOSk7XG4gICAgZDIgKz0gaDQgKiAoNSAqIHI4KTtcbiAgICBjID0gKGQyID4+PiAxMyk7IGQyICY9IDB4MWZmZjtcbiAgICBkMiArPSBoNSAqICg1ICogcjcpO1xuICAgIGQyICs9IGg2ICogKDUgKiByNik7XG4gICAgZDIgKz0gaDcgKiAoNSAqIHI1KTtcbiAgICBkMiArPSBoOCAqICg1ICogcjQpO1xuICAgIGQyICs9IGg5ICogKDUgKiByMyk7XG4gICAgYyArPSAoZDIgPj4+IDEzKTsgZDIgJj0gMHgxZmZmO1xuXG4gICAgZDMgPSBjO1xuICAgIGQzICs9IGgwICogcjM7XG4gICAgZDMgKz0gaDEgKiByMjtcbiAgICBkMyArPSBoMiAqIHIxO1xuICAgIGQzICs9IGgzICogcjA7XG4gICAgZDMgKz0gaDQgKiAoNSAqIHI5KTtcbiAgICBjID0gKGQzID4+PiAxMyk7IGQzICY9IDB4MWZmZjtcbiAgICBkMyArPSBoNSAqICg1ICogcjgpO1xuICAgIGQzICs9IGg2ICogKDUgKiByNyk7XG4gICAgZDMgKz0gaDcgKiAoNSAqIHI2KTtcbiAgICBkMyArPSBoOCAqICg1ICogcjUpO1xuICAgIGQzICs9IGg5ICogKDUgKiByNCk7XG4gICAgYyArPSAoZDMgPj4+IDEzKTsgZDMgJj0gMHgxZmZmO1xuXG4gICAgZDQgPSBjO1xuICAgIGQ0ICs9IGgwICogcjQ7XG4gICAgZDQgKz0gaDEgKiByMztcbiAgICBkNCArPSBoMiAqIHIyO1xuICAgIGQ0ICs9IGgzICogcjE7XG4gICAgZDQgKz0gaDQgKiByMDtcbiAgICBjID0gKGQ0ID4+PiAxMyk7IGQ0ICY9IDB4MWZmZjtcbiAgICBkNCArPSBoNSAqICg1ICogcjkpO1xuICAgIGQ0ICs9IGg2ICogKDUgKiByOCk7XG4gICAgZDQgKz0gaDcgKiAoNSAqIHI3KTtcbiAgICBkNCArPSBoOCAqICg1ICogcjYpO1xuICAgIGQ0ICs9IGg5ICogKDUgKiByNSk7XG4gICAgYyArPSAoZDQgPj4+IDEzKTsgZDQgJj0gMHgxZmZmO1xuXG4gICAgZDUgPSBjO1xuICAgIGQ1ICs9IGgwICogcjU7XG4gICAgZDUgKz0gaDEgKiByNDtcbiAgICBkNSArPSBoMiAqIHIzO1xuICAgIGQ1ICs9IGgzICogcjI7XG4gICAgZDUgKz0gaDQgKiByMTtcbiAgICBjID0gKGQ1ID4+PiAxMyk7IGQ1ICY9IDB4MWZmZjtcbiAgICBkNSArPSBoNSAqIHIwO1xuICAgIGQ1ICs9IGg2ICogKDUgKiByOSk7XG4gICAgZDUgKz0gaDcgKiAoNSAqIHI4KTtcbiAgICBkNSArPSBoOCAqICg1ICogcjcpO1xuICAgIGQ1ICs9IGg5ICogKDUgKiByNik7XG4gICAgYyArPSAoZDUgPj4+IDEzKTsgZDUgJj0gMHgxZmZmO1xuXG4gICAgZDYgPSBjO1xuICAgIGQ2ICs9IGgwICogcjY7XG4gICAgZDYgKz0gaDEgKiByNTtcbiAgICBkNiArPSBoMiAqIHI0O1xuICAgIGQ2ICs9IGgzICogcjM7XG4gICAgZDYgKz0gaDQgKiByMjtcbiAgICBjID0gKGQ2ID4+PiAxMyk7IGQ2ICY9IDB4MWZmZjtcbiAgICBkNiArPSBoNSAqIHIxO1xuICAgIGQ2ICs9IGg2ICogcjA7XG4gICAgZDYgKz0gaDcgKiAoNSAqIHI5KTtcbiAgICBkNiArPSBoOCAqICg1ICogcjgpO1xuICAgIGQ2ICs9IGg5ICogKDUgKiByNyk7XG4gICAgYyArPSAoZDYgPj4+IDEzKTsgZDYgJj0gMHgxZmZmO1xuXG4gICAgZDcgPSBjO1xuICAgIGQ3ICs9IGgwICogcjc7XG4gICAgZDcgKz0gaDEgKiByNjtcbiAgICBkNyArPSBoMiAqIHI1O1xuICAgIGQ3ICs9IGgzICogcjQ7XG4gICAgZDcgKz0gaDQgKiByMztcbiAgICBjID0gKGQ3ID4+PiAxMyk7IGQ3ICY9IDB4MWZmZjtcbiAgICBkNyArPSBoNSAqIHIyO1xuICAgIGQ3ICs9IGg2ICogcjE7XG4gICAgZDcgKz0gaDcgKiByMDtcbiAgICBkNyArPSBoOCAqICg1ICogcjkpO1xuICAgIGQ3ICs9IGg5ICogKDUgKiByOCk7XG4gICAgYyArPSAoZDcgPj4+IDEzKTsgZDcgJj0gMHgxZmZmO1xuXG4gICAgZDggPSBjO1xuICAgIGQ4ICs9IGgwICogcjg7XG4gICAgZDggKz0gaDEgKiByNztcbiAgICBkOCArPSBoMiAqIHI2O1xuICAgIGQ4ICs9IGgzICogcjU7XG4gICAgZDggKz0gaDQgKiByNDtcbiAgICBjID0gKGQ4ID4+PiAxMyk7IGQ4ICY9IDB4MWZmZjtcbiAgICBkOCArPSBoNSAqIHIzO1xuICAgIGQ4ICs9IGg2ICogcjI7XG4gICAgZDggKz0gaDcgKiByMTtcbiAgICBkOCArPSBoOCAqIHIwO1xuICAgIGQ4ICs9IGg5ICogKDUgKiByOSk7XG4gICAgYyArPSAoZDggPj4+IDEzKTsgZDggJj0gMHgxZmZmO1xuXG4gICAgZDkgPSBjO1xuICAgIGQ5ICs9IGgwICogcjk7XG4gICAgZDkgKz0gaDEgKiByODtcbiAgICBkOSArPSBoMiAqIHI3O1xuICAgIGQ5ICs9IGgzICogcjY7XG4gICAgZDkgKz0gaDQgKiByNTtcbiAgICBjID0gKGQ5ID4+PiAxMyk7IGQ5ICY9IDB4MWZmZjtcbiAgICBkOSArPSBoNSAqIHI0O1xuICAgIGQ5ICs9IGg2ICogcjM7XG4gICAgZDkgKz0gaDcgKiByMjtcbiAgICBkOSArPSBoOCAqIHIxO1xuICAgIGQ5ICs9IGg5ICogcjA7XG4gICAgYyArPSAoZDkgPj4+IDEzKTsgZDkgJj0gMHgxZmZmO1xuXG4gICAgYyA9ICgoKGMgPDwgMikgKyBjKSkgfCAwO1xuICAgIGMgPSAoYyArIGQwKSB8IDA7XG4gICAgZDAgPSBjICYgMHgxZmZmO1xuICAgIGMgPSAoYyA+Pj4gMTMpO1xuICAgIGQxICs9IGM7XG5cbiAgICBoMCA9IGQwO1xuICAgIGgxID0gZDE7XG4gICAgaDIgPSBkMjtcbiAgICBoMyA9IGQzO1xuICAgIGg0ID0gZDQ7XG4gICAgaDUgPSBkNTtcbiAgICBoNiA9IGQ2O1xuICAgIGg3ID0gZDc7XG4gICAgaDggPSBkODtcbiAgICBoOSA9IGQ5O1xuXG4gICAgbXBvcyArPSAxNjtcbiAgICBieXRlcyAtPSAxNjtcbiAgfVxuICB0aGlzLmhbMF0gPSBoMDtcbiAgdGhpcy5oWzFdID0gaDE7XG4gIHRoaXMuaFsyXSA9IGgyO1xuICB0aGlzLmhbM10gPSBoMztcbiAgdGhpcy5oWzRdID0gaDQ7XG4gIHRoaXMuaFs1XSA9IGg1O1xuICB0aGlzLmhbNl0gPSBoNjtcbiAgdGhpcy5oWzddID0gaDc7XG4gIHRoaXMuaFs4XSA9IGg4O1xuICB0aGlzLmhbOV0gPSBoOTtcbn07XG5cbnBvbHkxMzA1LnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbihtYWMsIG1hY3Bvcykge1xuICB2YXIgZyA9IG5ldyBVaW50MTZBcnJheSgxMCk7XG4gIHZhciBjLCBtYXNrLCBmLCBpO1xuXG4gIGlmICh0aGlzLmxlZnRvdmVyKSB7XG4gICAgaSA9IHRoaXMubGVmdG92ZXI7XG4gICAgdGhpcy5idWZmZXJbaSsrXSA9IDE7XG4gICAgZm9yICg7IGkgPCAxNjsgaSsrKSB0aGlzLmJ1ZmZlcltpXSA9IDA7XG4gICAgdGhpcy5maW4gPSAxO1xuICAgIHRoaXMuYmxvY2tzKHRoaXMuYnVmZmVyLCAwLCAxNik7XG4gIH1cblxuICBjID0gdGhpcy5oWzFdID4+PiAxMztcbiAgdGhpcy5oWzFdICY9IDB4MWZmZjtcbiAgZm9yIChpID0gMjsgaSA8IDEwOyBpKyspIHtcbiAgICB0aGlzLmhbaV0gKz0gYztcbiAgICBjID0gdGhpcy5oW2ldID4+PiAxMztcbiAgICB0aGlzLmhbaV0gJj0gMHgxZmZmO1xuICB9XG4gIHRoaXMuaFswXSArPSAoYyAqIDUpO1xuICBjID0gdGhpcy5oWzBdID4+PiAxMztcbiAgdGhpcy5oWzBdICY9IDB4MWZmZjtcbiAgdGhpcy5oWzFdICs9IGM7XG4gIGMgPSB0aGlzLmhbMV0gPj4+IDEzO1xuICB0aGlzLmhbMV0gJj0gMHgxZmZmO1xuICB0aGlzLmhbMl0gKz0gYztcblxuICBnWzBdID0gdGhpcy5oWzBdICsgNTtcbiAgYyA9IGdbMF0gPj4+IDEzO1xuICBnWzBdICY9IDB4MWZmZjtcbiAgZm9yIChpID0gMTsgaSA8IDEwOyBpKyspIHtcbiAgICBnW2ldID0gdGhpcy5oW2ldICsgYztcbiAgICBjID0gZ1tpXSA+Pj4gMTM7XG4gICAgZ1tpXSAmPSAweDFmZmY7XG4gIH1cbiAgZ1s5XSAtPSAoMSA8PCAxMyk7XG5cbiAgbWFzayA9IChjIF4gMSkgLSAxO1xuICBmb3IgKGkgPSAwOyBpIDwgMTA7IGkrKykgZ1tpXSAmPSBtYXNrO1xuICBtYXNrID0gfm1hc2s7XG4gIGZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSB0aGlzLmhbaV0gPSAodGhpcy5oW2ldICYgbWFzaykgfCBnW2ldO1xuXG4gIHRoaXMuaFswXSA9ICgodGhpcy5oWzBdICAgICAgICkgfCAodGhpcy5oWzFdIDw8IDEzKSAgICAgICAgICAgICAgICAgICAgKSAmIDB4ZmZmZjtcbiAgdGhpcy5oWzFdID0gKCh0aGlzLmhbMV0gPj4+ICAzKSB8ICh0aGlzLmhbMl0gPDwgMTApICAgICAgICAgICAgICAgICAgICApICYgMHhmZmZmO1xuICB0aGlzLmhbMl0gPSAoKHRoaXMuaFsyXSA+Pj4gIDYpIHwgKHRoaXMuaFszXSA8PCAgNykgICAgICAgICAgICAgICAgICAgICkgJiAweGZmZmY7XG4gIHRoaXMuaFszXSA9ICgodGhpcy5oWzNdID4+PiAgOSkgfCAodGhpcy5oWzRdIDw8ICA0KSAgICAgICAgICAgICAgICAgICAgKSAmIDB4ZmZmZjtcbiAgdGhpcy5oWzRdID0gKCh0aGlzLmhbNF0gPj4+IDEyKSB8ICh0aGlzLmhbNV0gPDwgIDEpIHwgKHRoaXMuaFs2XSA8PCAxNCkpICYgMHhmZmZmO1xuICB0aGlzLmhbNV0gPSAoKHRoaXMuaFs2XSA+Pj4gIDIpIHwgKHRoaXMuaFs3XSA8PCAxMSkgICAgICAgICAgICAgICAgICAgICkgJiAweGZmZmY7XG4gIHRoaXMuaFs2XSA9ICgodGhpcy5oWzddID4+PiAgNSkgfCAodGhpcy5oWzhdIDw8ICA4KSAgICAgICAgICAgICAgICAgICAgKSAmIDB4ZmZmZjtcbiAgdGhpcy5oWzddID0gKCh0aGlzLmhbOF0gPj4+ICA4KSB8ICh0aGlzLmhbOV0gPDwgIDUpICAgICAgICAgICAgICAgICAgICApICYgMHhmZmZmO1xuXG4gIGYgPSB0aGlzLmhbMF0gKyB0aGlzLnBhZFswXTtcbiAgdGhpcy5oWzBdID0gZiAmIDB4ZmZmZjtcbiAgZm9yIChpID0gMTsgaSA8IDg7IGkrKykge1xuICAgIGYgPSAoKCh0aGlzLmhbaV0gKyB0aGlzLnBhZFtpXSkgfCAwKSArIChmID4+PiAxNikpIHwgMDtcbiAgICB0aGlzLmhbaV0gPSBmICYgMHhmZmZmO1xuICB9XG5cbiAgbWFjW21hY3BvcysgMF0gPSAodGhpcy5oWzBdID4+PiAwKSAmIDB4ZmY7XG4gIG1hY1ttYWNwb3MrIDFdID0gKHRoaXMuaFswXSA+Pj4gOCkgJiAweGZmO1xuICBtYWNbbWFjcG9zKyAyXSA9ICh0aGlzLmhbMV0gPj4+IDApICYgMHhmZjtcbiAgbWFjW21hY3BvcysgM10gPSAodGhpcy5oWzFdID4+PiA4KSAmIDB4ZmY7XG4gIG1hY1ttYWNwb3MrIDRdID0gKHRoaXMuaFsyXSA+Pj4gMCkgJiAweGZmO1xuICBtYWNbbWFjcG9zKyA1XSA9ICh0aGlzLmhbMl0gPj4+IDgpICYgMHhmZjtcbiAgbWFjW21hY3BvcysgNl0gPSAodGhpcy5oWzNdID4+PiAwKSAmIDB4ZmY7XG4gIG1hY1ttYWNwb3MrIDddID0gKHRoaXMuaFszXSA+Pj4gOCkgJiAweGZmO1xuICBtYWNbbWFjcG9zKyA4XSA9ICh0aGlzLmhbNF0gPj4+IDApICYgMHhmZjtcbiAgbWFjW21hY3BvcysgOV0gPSAodGhpcy5oWzRdID4+PiA4KSAmIDB4ZmY7XG4gIG1hY1ttYWNwb3MrMTBdID0gKHRoaXMuaFs1XSA+Pj4gMCkgJiAweGZmO1xuICBtYWNbbWFjcG9zKzExXSA9ICh0aGlzLmhbNV0gPj4+IDgpICYgMHhmZjtcbiAgbWFjW21hY3BvcysxMl0gPSAodGhpcy5oWzZdID4+PiAwKSAmIDB4ZmY7XG4gIG1hY1ttYWNwb3MrMTNdID0gKHRoaXMuaFs2XSA+Pj4gOCkgJiAweGZmO1xuICBtYWNbbWFjcG9zKzE0XSA9ICh0aGlzLmhbN10gPj4+IDApICYgMHhmZjtcbiAgbWFjW21hY3BvcysxNV0gPSAodGhpcy5oWzddID4+PiA4KSAmIDB4ZmY7XG59O1xuXG5wb2x5MTMwNS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24obSwgbXBvcywgYnl0ZXMpIHtcbiAgdmFyIGksIHdhbnQ7XG5cbiAgaWYgKHRoaXMubGVmdG92ZXIpIHtcbiAgICB3YW50ID0gKDE2IC0gdGhpcy5sZWZ0b3Zlcik7XG4gICAgaWYgKHdhbnQgPiBieXRlcylcbiAgICAgIHdhbnQgPSBieXRlcztcbiAgICBmb3IgKGkgPSAwOyBpIDwgd2FudDsgaSsrKVxuICAgICAgdGhpcy5idWZmZXJbdGhpcy5sZWZ0b3ZlciArIGldID0gbVttcG9zK2ldO1xuICAgIGJ5dGVzIC09IHdhbnQ7XG4gICAgbXBvcyArPSB3YW50O1xuICAgIHRoaXMubGVmdG92ZXIgKz0gd2FudDtcbiAgICBpZiAodGhpcy5sZWZ0b3ZlciA8IDE2KVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuYmxvY2tzKHRoaXMuYnVmZmVyLCAwLCAxNik7XG4gICAgdGhpcy5sZWZ0b3ZlciA9IDA7XG4gIH1cblxuICBpZiAoYnl0ZXMgPj0gMTYpIHtcbiAgICB3YW50ID0gYnl0ZXMgLSAoYnl0ZXMgJSAxNik7XG4gICAgdGhpcy5ibG9ja3MobSwgbXBvcywgd2FudCk7XG4gICAgbXBvcyArPSB3YW50O1xuICAgIGJ5dGVzIC09IHdhbnQ7XG4gIH1cblxuICBpZiAoYnl0ZXMpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYnl0ZXM7IGkrKylcbiAgICAgIHRoaXMuYnVmZmVyW3RoaXMubGVmdG92ZXIgKyBpXSA9IG1bbXBvcytpXTtcbiAgICB0aGlzLmxlZnRvdmVyICs9IGJ5dGVzO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjcnlwdG9fb25ldGltZWF1dGgob3V0LCBvdXRwb3MsIG0sIG1wb3MsIG4sIGspIHtcbiAgdmFyIHMgPSBuZXcgcG9seTEzMDUoayk7XG4gIHMudXBkYXRlKG0sIG1wb3MsIG4pO1xuICBzLmZpbmlzaChvdXQsIG91dHBvcyk7XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fb25ldGltZWF1dGhfdmVyaWZ5KGgsIGhwb3MsIG0sIG1wb3MsIG4sIGspIHtcbiAgdmFyIHggPSBuZXcgVWludDhBcnJheSgxNik7XG4gIGNyeXB0b19vbmV0aW1lYXV0aCh4LDAsbSxtcG9zLG4sayk7XG4gIHJldHVybiBjcnlwdG9fdmVyaWZ5XzE2KGgsaHBvcyx4LDApO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fc2VjcmV0Ym94KGMsbSxkLG4saykge1xuICB2YXIgaTtcbiAgaWYgKGQgPCAzMikgcmV0dXJuIC0xO1xuICBjcnlwdG9fc3RyZWFtX3hvcihjLDAsbSwwLGQsbixrKTtcbiAgY3J5cHRvX29uZXRpbWVhdXRoKGMsIDE2LCBjLCAzMiwgZCAtIDMyLCBjKTtcbiAgZm9yIChpID0gMDsgaSA8IDE2OyBpKyspIGNbaV0gPSAwO1xuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX3NlY3JldGJveF9vcGVuKG0sYyxkLG4saykge1xuICB2YXIgaTtcbiAgdmFyIHggPSBuZXcgVWludDhBcnJheSgzMik7XG4gIGlmIChkIDwgMzIpIHJldHVybiAtMTtcbiAgY3J5cHRvX3N0cmVhbSh4LDAsMzIsbixrKTtcbiAgaWYgKGNyeXB0b19vbmV0aW1lYXV0aF92ZXJpZnkoYywgMTYsYywgMzIsZCAtIDMyLHgpICE9PSAwKSByZXR1cm4gLTE7XG4gIGNyeXB0b19zdHJlYW1feG9yKG0sMCxjLDAsZCxuLGspO1xuICBmb3IgKGkgPSAwOyBpIDwgMzI7IGkrKykgbVtpXSA9IDA7XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBzZXQyNTUxOShyLCBhKSB7XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykgcltpXSA9IGFbaV18MDtcbn1cblxuZnVuY3Rpb24gY2FyMjU1MTkobykge1xuICB2YXIgaSwgdiwgYyA9IDE7XG4gIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgdiA9IG9baV0gKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICBvW2ldID0gdiAtIGMgKiA2NTUzNjtcbiAgfVxuICBvWzBdICs9IGMtMSArIDM3ICogKGMtMSk7XG59XG5cbmZ1bmN0aW9uIHNlbDI1NTE5KHAsIHEsIGIpIHtcbiAgdmFyIHQsIGMgPSB+KGItMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgIHQgPSBjICYgKHBbaV0gXiBxW2ldKTtcbiAgICBwW2ldIF49IHQ7XG4gICAgcVtpXSBePSB0O1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhY2syNTUxOShvLCBuKSB7XG4gIHZhciBpLCBqLCBiO1xuICB2YXIgbSA9IGdmKCksIHQgPSBnZigpO1xuICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykgdFtpXSA9IG5baV07XG4gIGNhcjI1NTE5KHQpO1xuICBjYXIyNTUxOSh0KTtcbiAgY2FyMjU1MTkodCk7XG4gIGZvciAoaiA9IDA7IGogPCAyOyBqKyspIHtcbiAgICBtWzBdID0gdFswXSAtIDB4ZmZlZDtcbiAgICBmb3IgKGkgPSAxOyBpIDwgMTU7IGkrKykge1xuICAgICAgbVtpXSA9IHRbaV0gLSAweGZmZmYgLSAoKG1baS0xXT4+MTYpICYgMSk7XG4gICAgICBtW2ktMV0gJj0gMHhmZmZmO1xuICAgIH1cbiAgICBtWzE1XSA9IHRbMTVdIC0gMHg3ZmZmIC0gKChtWzE0XT4+MTYpICYgMSk7XG4gICAgYiA9IChtWzE1XT4+MTYpICYgMTtcbiAgICBtWzE0XSAmPSAweGZmZmY7XG4gICAgc2VsMjU1MTkodCwgbSwgMS1iKTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgIG9bMippXSA9IHRbaV0gJiAweGZmO1xuICAgIG9bMippKzFdID0gdFtpXT4+ODtcbiAgfVxufVxuXG5mdW5jdGlvbiBuZXEyNTUxOShhLCBiKSB7XG4gIHZhciBjID0gbmV3IFVpbnQ4QXJyYXkoMzIpLCBkID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICBwYWNrMjU1MTkoYywgYSk7XG4gIHBhY2syNTUxOShkLCBiKTtcbiAgcmV0dXJuIGNyeXB0b192ZXJpZnlfMzIoYywgMCwgZCwgMCk7XG59XG5cbmZ1bmN0aW9uIHBhcjI1NTE5KGEpIHtcbiAgdmFyIGQgPSBuZXcgVWludDhBcnJheSgzMik7XG4gIHBhY2syNTUxOShkLCBhKTtcbiAgcmV0dXJuIGRbMF0gJiAxO1xufVxuXG5mdW5jdGlvbiB1bnBhY2syNTUxOShvLCBuKSB7XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykgb1tpXSA9IG5bMippXSArIChuWzIqaSsxXSA8PCA4KTtcbiAgb1sxNV0gJj0gMHg3ZmZmO1xufVxuXG5mdW5jdGlvbiBBKG8sIGEsIGIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSBvW2ldID0gYVtpXSArIGJbaV07XG59XG5cbmZ1bmN0aW9uIFoobywgYSwgYikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIG9baV0gPSBhW2ldIC0gYltpXTtcbn1cblxuZnVuY3Rpb24gTShvLCBhLCBiKSB7XG4gIHZhciB2LCBjLFxuICAgICB0MCA9IDAsICB0MSA9IDAsICB0MiA9IDAsICB0MyA9IDAsICB0NCA9IDAsICB0NSA9IDAsICB0NiA9IDAsICB0NyA9IDAsXG4gICAgIHQ4ID0gMCwgIHQ5ID0gMCwgdDEwID0gMCwgdDExID0gMCwgdDEyID0gMCwgdDEzID0gMCwgdDE0ID0gMCwgdDE1ID0gMCxcbiAgICB0MTYgPSAwLCB0MTcgPSAwLCB0MTggPSAwLCB0MTkgPSAwLCB0MjAgPSAwLCB0MjEgPSAwLCB0MjIgPSAwLCB0MjMgPSAwLFxuICAgIHQyNCA9IDAsIHQyNSA9IDAsIHQyNiA9IDAsIHQyNyA9IDAsIHQyOCA9IDAsIHQyOSA9IDAsIHQzMCA9IDAsXG4gICAgYjAgPSBiWzBdLFxuICAgIGIxID0gYlsxXSxcbiAgICBiMiA9IGJbMl0sXG4gICAgYjMgPSBiWzNdLFxuICAgIGI0ID0gYls0XSxcbiAgICBiNSA9IGJbNV0sXG4gICAgYjYgPSBiWzZdLFxuICAgIGI3ID0gYls3XSxcbiAgICBiOCA9IGJbOF0sXG4gICAgYjkgPSBiWzldLFxuICAgIGIxMCA9IGJbMTBdLFxuICAgIGIxMSA9IGJbMTFdLFxuICAgIGIxMiA9IGJbMTJdLFxuICAgIGIxMyA9IGJbMTNdLFxuICAgIGIxNCA9IGJbMTRdLFxuICAgIGIxNSA9IGJbMTVdO1xuXG4gIHYgPSBhWzBdO1xuICB0MCArPSB2ICogYjA7XG4gIHQxICs9IHYgKiBiMTtcbiAgdDIgKz0gdiAqIGIyO1xuICB0MyArPSB2ICogYjM7XG4gIHQ0ICs9IHYgKiBiNDtcbiAgdDUgKz0gdiAqIGI1O1xuICB0NiArPSB2ICogYjY7XG4gIHQ3ICs9IHYgKiBiNztcbiAgdDggKz0gdiAqIGI4O1xuICB0OSArPSB2ICogYjk7XG4gIHQxMCArPSB2ICogYjEwO1xuICB0MTEgKz0gdiAqIGIxMTtcbiAgdDEyICs9IHYgKiBiMTI7XG4gIHQxMyArPSB2ICogYjEzO1xuICB0MTQgKz0gdiAqIGIxNDtcbiAgdDE1ICs9IHYgKiBiMTU7XG4gIHYgPSBhWzFdO1xuICB0MSArPSB2ICogYjA7XG4gIHQyICs9IHYgKiBiMTtcbiAgdDMgKz0gdiAqIGIyO1xuICB0NCArPSB2ICogYjM7XG4gIHQ1ICs9IHYgKiBiNDtcbiAgdDYgKz0gdiAqIGI1O1xuICB0NyArPSB2ICogYjY7XG4gIHQ4ICs9IHYgKiBiNztcbiAgdDkgKz0gdiAqIGI4O1xuICB0MTAgKz0gdiAqIGI5O1xuICB0MTEgKz0gdiAqIGIxMDtcbiAgdDEyICs9IHYgKiBiMTE7XG4gIHQxMyArPSB2ICogYjEyO1xuICB0MTQgKz0gdiAqIGIxMztcbiAgdDE1ICs9IHYgKiBiMTQ7XG4gIHQxNiArPSB2ICogYjE1O1xuICB2ID0gYVsyXTtcbiAgdDIgKz0gdiAqIGIwO1xuICB0MyArPSB2ICogYjE7XG4gIHQ0ICs9IHYgKiBiMjtcbiAgdDUgKz0gdiAqIGIzO1xuICB0NiArPSB2ICogYjQ7XG4gIHQ3ICs9IHYgKiBiNTtcbiAgdDggKz0gdiAqIGI2O1xuICB0OSArPSB2ICogYjc7XG4gIHQxMCArPSB2ICogYjg7XG4gIHQxMSArPSB2ICogYjk7XG4gIHQxMiArPSB2ICogYjEwO1xuICB0MTMgKz0gdiAqIGIxMTtcbiAgdDE0ICs9IHYgKiBiMTI7XG4gIHQxNSArPSB2ICogYjEzO1xuICB0MTYgKz0gdiAqIGIxNDtcbiAgdDE3ICs9IHYgKiBiMTU7XG4gIHYgPSBhWzNdO1xuICB0MyArPSB2ICogYjA7XG4gIHQ0ICs9IHYgKiBiMTtcbiAgdDUgKz0gdiAqIGIyO1xuICB0NiArPSB2ICogYjM7XG4gIHQ3ICs9IHYgKiBiNDtcbiAgdDggKz0gdiAqIGI1O1xuICB0OSArPSB2ICogYjY7XG4gIHQxMCArPSB2ICogYjc7XG4gIHQxMSArPSB2ICogYjg7XG4gIHQxMiArPSB2ICogYjk7XG4gIHQxMyArPSB2ICogYjEwO1xuICB0MTQgKz0gdiAqIGIxMTtcbiAgdDE1ICs9IHYgKiBiMTI7XG4gIHQxNiArPSB2ICogYjEzO1xuICB0MTcgKz0gdiAqIGIxNDtcbiAgdDE4ICs9IHYgKiBiMTU7XG4gIHYgPSBhWzRdO1xuICB0NCArPSB2ICogYjA7XG4gIHQ1ICs9IHYgKiBiMTtcbiAgdDYgKz0gdiAqIGIyO1xuICB0NyArPSB2ICogYjM7XG4gIHQ4ICs9IHYgKiBiNDtcbiAgdDkgKz0gdiAqIGI1O1xuICB0MTAgKz0gdiAqIGI2O1xuICB0MTEgKz0gdiAqIGI3O1xuICB0MTIgKz0gdiAqIGI4O1xuICB0MTMgKz0gdiAqIGI5O1xuICB0MTQgKz0gdiAqIGIxMDtcbiAgdDE1ICs9IHYgKiBiMTE7XG4gIHQxNiArPSB2ICogYjEyO1xuICB0MTcgKz0gdiAqIGIxMztcbiAgdDE4ICs9IHYgKiBiMTQ7XG4gIHQxOSArPSB2ICogYjE1O1xuICB2ID0gYVs1XTtcbiAgdDUgKz0gdiAqIGIwO1xuICB0NiArPSB2ICogYjE7XG4gIHQ3ICs9IHYgKiBiMjtcbiAgdDggKz0gdiAqIGIzO1xuICB0OSArPSB2ICogYjQ7XG4gIHQxMCArPSB2ICogYjU7XG4gIHQxMSArPSB2ICogYjY7XG4gIHQxMiArPSB2ICogYjc7XG4gIHQxMyArPSB2ICogYjg7XG4gIHQxNCArPSB2ICogYjk7XG4gIHQxNSArPSB2ICogYjEwO1xuICB0MTYgKz0gdiAqIGIxMTtcbiAgdDE3ICs9IHYgKiBiMTI7XG4gIHQxOCArPSB2ICogYjEzO1xuICB0MTkgKz0gdiAqIGIxNDtcbiAgdDIwICs9IHYgKiBiMTU7XG4gIHYgPSBhWzZdO1xuICB0NiArPSB2ICogYjA7XG4gIHQ3ICs9IHYgKiBiMTtcbiAgdDggKz0gdiAqIGIyO1xuICB0OSArPSB2ICogYjM7XG4gIHQxMCArPSB2ICogYjQ7XG4gIHQxMSArPSB2ICogYjU7XG4gIHQxMiArPSB2ICogYjY7XG4gIHQxMyArPSB2ICogYjc7XG4gIHQxNCArPSB2ICogYjg7XG4gIHQxNSArPSB2ICogYjk7XG4gIHQxNiArPSB2ICogYjEwO1xuICB0MTcgKz0gdiAqIGIxMTtcbiAgdDE4ICs9IHYgKiBiMTI7XG4gIHQxOSArPSB2ICogYjEzO1xuICB0MjAgKz0gdiAqIGIxNDtcbiAgdDIxICs9IHYgKiBiMTU7XG4gIHYgPSBhWzddO1xuICB0NyArPSB2ICogYjA7XG4gIHQ4ICs9IHYgKiBiMTtcbiAgdDkgKz0gdiAqIGIyO1xuICB0MTAgKz0gdiAqIGIzO1xuICB0MTEgKz0gdiAqIGI0O1xuICB0MTIgKz0gdiAqIGI1O1xuICB0MTMgKz0gdiAqIGI2O1xuICB0MTQgKz0gdiAqIGI3O1xuICB0MTUgKz0gdiAqIGI4O1xuICB0MTYgKz0gdiAqIGI5O1xuICB0MTcgKz0gdiAqIGIxMDtcbiAgdDE4ICs9IHYgKiBiMTE7XG4gIHQxOSArPSB2ICogYjEyO1xuICB0MjAgKz0gdiAqIGIxMztcbiAgdDIxICs9IHYgKiBiMTQ7XG4gIHQyMiArPSB2ICogYjE1O1xuICB2ID0gYVs4XTtcbiAgdDggKz0gdiAqIGIwO1xuICB0OSArPSB2ICogYjE7XG4gIHQxMCArPSB2ICogYjI7XG4gIHQxMSArPSB2ICogYjM7XG4gIHQxMiArPSB2ICogYjQ7XG4gIHQxMyArPSB2ICogYjU7XG4gIHQxNCArPSB2ICogYjY7XG4gIHQxNSArPSB2ICogYjc7XG4gIHQxNiArPSB2ICogYjg7XG4gIHQxNyArPSB2ICogYjk7XG4gIHQxOCArPSB2ICogYjEwO1xuICB0MTkgKz0gdiAqIGIxMTtcbiAgdDIwICs9IHYgKiBiMTI7XG4gIHQyMSArPSB2ICogYjEzO1xuICB0MjIgKz0gdiAqIGIxNDtcbiAgdDIzICs9IHYgKiBiMTU7XG4gIHYgPSBhWzldO1xuICB0OSArPSB2ICogYjA7XG4gIHQxMCArPSB2ICogYjE7XG4gIHQxMSArPSB2ICogYjI7XG4gIHQxMiArPSB2ICogYjM7XG4gIHQxMyArPSB2ICogYjQ7XG4gIHQxNCArPSB2ICogYjU7XG4gIHQxNSArPSB2ICogYjY7XG4gIHQxNiArPSB2ICogYjc7XG4gIHQxNyArPSB2ICogYjg7XG4gIHQxOCArPSB2ICogYjk7XG4gIHQxOSArPSB2ICogYjEwO1xuICB0MjAgKz0gdiAqIGIxMTtcbiAgdDIxICs9IHYgKiBiMTI7XG4gIHQyMiArPSB2ICogYjEzO1xuICB0MjMgKz0gdiAqIGIxNDtcbiAgdDI0ICs9IHYgKiBiMTU7XG4gIHYgPSBhWzEwXTtcbiAgdDEwICs9IHYgKiBiMDtcbiAgdDExICs9IHYgKiBiMTtcbiAgdDEyICs9IHYgKiBiMjtcbiAgdDEzICs9IHYgKiBiMztcbiAgdDE0ICs9IHYgKiBiNDtcbiAgdDE1ICs9IHYgKiBiNTtcbiAgdDE2ICs9IHYgKiBiNjtcbiAgdDE3ICs9IHYgKiBiNztcbiAgdDE4ICs9IHYgKiBiODtcbiAgdDE5ICs9IHYgKiBiOTtcbiAgdDIwICs9IHYgKiBiMTA7XG4gIHQyMSArPSB2ICogYjExO1xuICB0MjIgKz0gdiAqIGIxMjtcbiAgdDIzICs9IHYgKiBiMTM7XG4gIHQyNCArPSB2ICogYjE0O1xuICB0MjUgKz0gdiAqIGIxNTtcbiAgdiA9IGFbMTFdO1xuICB0MTEgKz0gdiAqIGIwO1xuICB0MTIgKz0gdiAqIGIxO1xuICB0MTMgKz0gdiAqIGIyO1xuICB0MTQgKz0gdiAqIGIzO1xuICB0MTUgKz0gdiAqIGI0O1xuICB0MTYgKz0gdiAqIGI1O1xuICB0MTcgKz0gdiAqIGI2O1xuICB0MTggKz0gdiAqIGI3O1xuICB0MTkgKz0gdiAqIGI4O1xuICB0MjAgKz0gdiAqIGI5O1xuICB0MjEgKz0gdiAqIGIxMDtcbiAgdDIyICs9IHYgKiBiMTE7XG4gIHQyMyArPSB2ICogYjEyO1xuICB0MjQgKz0gdiAqIGIxMztcbiAgdDI1ICs9IHYgKiBiMTQ7XG4gIHQyNiArPSB2ICogYjE1O1xuICB2ID0gYVsxMl07XG4gIHQxMiArPSB2ICogYjA7XG4gIHQxMyArPSB2ICogYjE7XG4gIHQxNCArPSB2ICogYjI7XG4gIHQxNSArPSB2ICogYjM7XG4gIHQxNiArPSB2ICogYjQ7XG4gIHQxNyArPSB2ICogYjU7XG4gIHQxOCArPSB2ICogYjY7XG4gIHQxOSArPSB2ICogYjc7XG4gIHQyMCArPSB2ICogYjg7XG4gIHQyMSArPSB2ICogYjk7XG4gIHQyMiArPSB2ICogYjEwO1xuICB0MjMgKz0gdiAqIGIxMTtcbiAgdDI0ICs9IHYgKiBiMTI7XG4gIHQyNSArPSB2ICogYjEzO1xuICB0MjYgKz0gdiAqIGIxNDtcbiAgdDI3ICs9IHYgKiBiMTU7XG4gIHYgPSBhWzEzXTtcbiAgdDEzICs9IHYgKiBiMDtcbiAgdDE0ICs9IHYgKiBiMTtcbiAgdDE1ICs9IHYgKiBiMjtcbiAgdDE2ICs9IHYgKiBiMztcbiAgdDE3ICs9IHYgKiBiNDtcbiAgdDE4ICs9IHYgKiBiNTtcbiAgdDE5ICs9IHYgKiBiNjtcbiAgdDIwICs9IHYgKiBiNztcbiAgdDIxICs9IHYgKiBiODtcbiAgdDIyICs9IHYgKiBiOTtcbiAgdDIzICs9IHYgKiBiMTA7XG4gIHQyNCArPSB2ICogYjExO1xuICB0MjUgKz0gdiAqIGIxMjtcbiAgdDI2ICs9IHYgKiBiMTM7XG4gIHQyNyArPSB2ICogYjE0O1xuICB0MjggKz0gdiAqIGIxNTtcbiAgdiA9IGFbMTRdO1xuICB0MTQgKz0gdiAqIGIwO1xuICB0MTUgKz0gdiAqIGIxO1xuICB0MTYgKz0gdiAqIGIyO1xuICB0MTcgKz0gdiAqIGIzO1xuICB0MTggKz0gdiAqIGI0O1xuICB0MTkgKz0gdiAqIGI1O1xuICB0MjAgKz0gdiAqIGI2O1xuICB0MjEgKz0gdiAqIGI3O1xuICB0MjIgKz0gdiAqIGI4O1xuICB0MjMgKz0gdiAqIGI5O1xuICB0MjQgKz0gdiAqIGIxMDtcbiAgdDI1ICs9IHYgKiBiMTE7XG4gIHQyNiArPSB2ICogYjEyO1xuICB0MjcgKz0gdiAqIGIxMztcbiAgdDI4ICs9IHYgKiBiMTQ7XG4gIHQyOSArPSB2ICogYjE1O1xuICB2ID0gYVsxNV07XG4gIHQxNSArPSB2ICogYjA7XG4gIHQxNiArPSB2ICogYjE7XG4gIHQxNyArPSB2ICogYjI7XG4gIHQxOCArPSB2ICogYjM7XG4gIHQxOSArPSB2ICogYjQ7XG4gIHQyMCArPSB2ICogYjU7XG4gIHQyMSArPSB2ICogYjY7XG4gIHQyMiArPSB2ICogYjc7XG4gIHQyMyArPSB2ICogYjg7XG4gIHQyNCArPSB2ICogYjk7XG4gIHQyNSArPSB2ICogYjEwO1xuICB0MjYgKz0gdiAqIGIxMTtcbiAgdDI3ICs9IHYgKiBiMTI7XG4gIHQyOCArPSB2ICogYjEzO1xuICB0MjkgKz0gdiAqIGIxNDtcbiAgdDMwICs9IHYgKiBiMTU7XG5cbiAgdDAgICs9IDM4ICogdDE2O1xuICB0MSAgKz0gMzggKiB0MTc7XG4gIHQyICArPSAzOCAqIHQxODtcbiAgdDMgICs9IDM4ICogdDE5O1xuICB0NCAgKz0gMzggKiB0MjA7XG4gIHQ1ICArPSAzOCAqIHQyMTtcbiAgdDYgICs9IDM4ICogdDIyO1xuICB0NyAgKz0gMzggKiB0MjM7XG4gIHQ4ICArPSAzOCAqIHQyNDtcbiAgdDkgICs9IDM4ICogdDI1O1xuICB0MTAgKz0gMzggKiB0MjY7XG4gIHQxMSArPSAzOCAqIHQyNztcbiAgdDEyICs9IDM4ICogdDI4O1xuICB0MTMgKz0gMzggKiB0Mjk7XG4gIHQxNCArPSAzOCAqIHQzMDtcbiAgLy8gdDE1IGxlZnQgYXMgaXNcblxuICAvLyBmaXJzdCBjYXJcbiAgYyA9IDE7XG4gIHYgPSAgdDAgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7ICB0MCA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSAgdDEgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7ICB0MSA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSAgdDIgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7ICB0MiA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSAgdDMgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7ICB0MyA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSAgdDQgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7ICB0NCA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSAgdDUgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7ICB0NSA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSAgdDYgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7ICB0NiA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSAgdDcgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7ICB0NyA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSAgdDggKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7ICB0OCA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSAgdDkgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7ICB0OSA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSB0MTAgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7IHQxMCA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSB0MTEgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7IHQxMSA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSB0MTIgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7IHQxMiA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSB0MTMgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7IHQxMyA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSB0MTQgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7IHQxNCA9IHYgLSBjICogNjU1MzY7XG4gIHYgPSB0MTUgKyBjICsgNjU1MzU7IGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7IHQxNSA9IHYgLSBjICogNjU1MzY7XG4gIHQwICs9IGMtMSArIDM3ICogKGMtMSk7XG5cbiAgLy8gc2Vjb25kIGNhclxuICBjID0gMTtcbiAgdiA9ICB0MCArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQwID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0MSArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQxID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0MiArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQyID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0MyArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQzID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0NCArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ0ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0NSArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ1ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0NiArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ2ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0NyArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ3ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0OCArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ4ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9ICB0OSArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgIHQ5ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxMCArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDEwID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxMSArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDExID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxMiArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDEyID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxMyArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDEzID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxNCArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDE0ID0gdiAtIGMgKiA2NTUzNjtcbiAgdiA9IHQxNSArIGMgKyA2NTUzNTsgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTsgdDE1ID0gdiAtIGMgKiA2NTUzNjtcbiAgdDAgKz0gYy0xICsgMzcgKiAoYy0xKTtcblxuICBvWyAwXSA9IHQwO1xuICBvWyAxXSA9IHQxO1xuICBvWyAyXSA9IHQyO1xuICBvWyAzXSA9IHQzO1xuICBvWyA0XSA9IHQ0O1xuICBvWyA1XSA9IHQ1O1xuICBvWyA2XSA9IHQ2O1xuICBvWyA3XSA9IHQ3O1xuICBvWyA4XSA9IHQ4O1xuICBvWyA5XSA9IHQ5O1xuICBvWzEwXSA9IHQxMDtcbiAgb1sxMV0gPSB0MTE7XG4gIG9bMTJdID0gdDEyO1xuICBvWzEzXSA9IHQxMztcbiAgb1sxNF0gPSB0MTQ7XG4gIG9bMTVdID0gdDE1O1xufVxuXG5mdW5jdGlvbiBTKG8sIGEpIHtcbiAgTShvLCBhLCBhKTtcbn1cblxuZnVuY3Rpb24gaW52MjU1MTkobywgaSkge1xuICB2YXIgYyA9IGdmKCk7XG4gIHZhciBhO1xuICBmb3IgKGEgPSAwOyBhIDwgMTY7IGErKykgY1thXSA9IGlbYV07XG4gIGZvciAoYSA9IDI1MzsgYSA+PSAwOyBhLS0pIHtcbiAgICBTKGMsIGMpO1xuICAgIGlmKGEgIT09IDIgJiYgYSAhPT0gNCkgTShjLCBjLCBpKTtcbiAgfVxuICBmb3IgKGEgPSAwOyBhIDwgMTY7IGErKykgb1thXSA9IGNbYV07XG59XG5cbmZ1bmN0aW9uIHBvdzI1MjMobywgaSkge1xuICB2YXIgYyA9IGdmKCk7XG4gIHZhciBhO1xuICBmb3IgKGEgPSAwOyBhIDwgMTY7IGErKykgY1thXSA9IGlbYV07XG4gIGZvciAoYSA9IDI1MDsgYSA+PSAwOyBhLS0pIHtcbiAgICAgIFMoYywgYyk7XG4gICAgICBpZihhICE9PSAxKSBNKGMsIGMsIGkpO1xuICB9XG4gIGZvciAoYSA9IDA7IGEgPCAxNjsgYSsrKSBvW2FdID0gY1thXTtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX3NjYWxhcm11bHQocSwgbiwgcCkge1xuICB2YXIgeiA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgdmFyIHggPSBuZXcgRmxvYXQ2NEFycmF5KDgwKSwgciwgaTtcbiAgdmFyIGEgPSBnZigpLCBiID0gZ2YoKSwgYyA9IGdmKCksXG4gICAgICBkID0gZ2YoKSwgZSA9IGdmKCksIGYgPSBnZigpO1xuICBmb3IgKGkgPSAwOyBpIDwgMzE7IGkrKykgeltpXSA9IG5baV07XG4gIHpbMzFdPShuWzMxXSYxMjcpfDY0O1xuICB6WzBdJj0yNDg7XG4gIHVucGFjazI1NTE5KHgscCk7XG4gIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgYltpXT14W2ldO1xuICAgIGRbaV09YVtpXT1jW2ldPTA7XG4gIH1cbiAgYVswXT1kWzBdPTE7XG4gIGZvciAoaT0yNTQ7IGk+PTA7IC0taSkge1xuICAgIHI9KHpbaT4+PjNdPj4+KGkmNykpJjE7XG4gICAgc2VsMjU1MTkoYSxiLHIpO1xuICAgIHNlbDI1NTE5KGMsZCxyKTtcbiAgICBBKGUsYSxjKTtcbiAgICBaKGEsYSxjKTtcbiAgICBBKGMsYixkKTtcbiAgICBaKGIsYixkKTtcbiAgICBTKGQsZSk7XG4gICAgUyhmLGEpO1xuICAgIE0oYSxjLGEpO1xuICAgIE0oYyxiLGUpO1xuICAgIEEoZSxhLGMpO1xuICAgIFooYSxhLGMpO1xuICAgIFMoYixhKTtcbiAgICBaKGMsZCxmKTtcbiAgICBNKGEsYyxfMTIxNjY1KTtcbiAgICBBKGEsYSxkKTtcbiAgICBNKGMsYyxhKTtcbiAgICBNKGEsZCxmKTtcbiAgICBNKGQsYix4KTtcbiAgICBTKGIsZSk7XG4gICAgc2VsMjU1MTkoYSxiLHIpO1xuICAgIHNlbDI1NTE5KGMsZCxyKTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgIHhbaSsxNl09YVtpXTtcbiAgICB4W2krMzJdPWNbaV07XG4gICAgeFtpKzQ4XT1iW2ldO1xuICAgIHhbaSs2NF09ZFtpXTtcbiAgfVxuICB2YXIgeDMyID0geC5zdWJhcnJheSgzMik7XG4gIHZhciB4MTYgPSB4LnN1YmFycmF5KDE2KTtcbiAgaW52MjU1MTkoeDMyLHgzMik7XG4gIE0oeDE2LHgxNix4MzIpO1xuICBwYWNrMjU1MTkocSx4MTYpO1xuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX3NjYWxhcm11bHRfYmFzZShxLCBuKSB7XG4gIHJldHVybiBjcnlwdG9fc2NhbGFybXVsdChxLCBuLCBfOSk7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b19ib3hfa2V5cGFpcih5LCB4KSB7XG4gIHJhbmRvbWJ5dGVzKHgsIDMyKTtcbiAgcmV0dXJuIGNyeXB0b19zY2FsYXJtdWx0X2Jhc2UoeSwgeCk7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b19ib3hfYmVmb3Jlbm0oaywgeSwgeCkge1xuICB2YXIgcyA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgY3J5cHRvX3NjYWxhcm11bHQocywgeCwgeSk7XG4gIHJldHVybiBjcnlwdG9fY29yZV9oc2Fsc2EyMChrLCBfMCwgcywgc2lnbWEpO1xufVxuXG52YXIgY3J5cHRvX2JveF9hZnRlcm5tID0gY3J5cHRvX3NlY3JldGJveDtcbnZhciBjcnlwdG9fYm94X29wZW5fYWZ0ZXJubSA9IGNyeXB0b19zZWNyZXRib3hfb3BlbjtcblxuZnVuY3Rpb24gY3J5cHRvX2JveChjLCBtLCBkLCBuLCB5LCB4KSB7XG4gIHZhciBrID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICBjcnlwdG9fYm94X2JlZm9yZW5tKGssIHksIHgpO1xuICByZXR1cm4gY3J5cHRvX2JveF9hZnRlcm5tKGMsIG0sIGQsIG4sIGspO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fYm94X29wZW4obSwgYywgZCwgbiwgeSwgeCkge1xuICB2YXIgayA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgY3J5cHRvX2JveF9iZWZvcmVubShrLCB5LCB4KTtcbiAgcmV0dXJuIGNyeXB0b19ib3hfb3Blbl9hZnRlcm5tKG0sIGMsIGQsIG4sIGspO1xufVxuXG52YXIgSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiwgMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCxcbiAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgMHg5MjNmODJhNCwgMHhhZjE5NGY5YiwgMHhhYjFjNWVkNSwgMHhkYTZkODExOCxcbiAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiwgMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSxcbiAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgMHgwZmMxOWRjNiwgMHg4YjhjZDViNSwgMHgyNDBjYTFjYywgMHg3N2FjOWM2NSxcbiAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiwgMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCxcbiAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiwgMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCxcbiAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSwgMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCxcbiAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSwgMHhjNzZjNTFhMywgMHgwNjU0YmUzMCxcbiAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgMHgxOWE0YzExNiwgMHhiOGQyZDBjOCwgMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyxcbiAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgMHg1YjljY2E0ZiwgMHg3NzYzZTM3MywgMHg2ODJlNmZmMywgMHhkNmIyYjhhMyxcbiAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCwgMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSxcbiAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSwgMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCxcbiAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCwgMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyxcbiAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYywgMHg2YzQ0MTk4YywgMHg0YTQ3NTgxN1xuXTtcblxuZnVuY3Rpb24gY3J5cHRvX2hhc2hibG9ja3NfaGwoaGgsIGhsLCBtLCBuKSB7XG4gIHZhciB3aCA9IG5ldyBJbnQzMkFycmF5KDE2KSwgd2wgPSBuZXcgSW50MzJBcnJheSgxNiksXG4gICAgICBiaDAsIGJoMSwgYmgyLCBiaDMsIGJoNCwgYmg1LCBiaDYsIGJoNyxcbiAgICAgIGJsMCwgYmwxLCBibDIsIGJsMywgYmw0LCBibDUsIGJsNiwgYmw3LFxuICAgICAgdGgsIHRsLCBpLCBqLCBoLCBsLCBhLCBiLCBjLCBkO1xuXG4gIHZhciBhaDAgPSBoaFswXSxcbiAgICAgIGFoMSA9IGhoWzFdLFxuICAgICAgYWgyID0gaGhbMl0sXG4gICAgICBhaDMgPSBoaFszXSxcbiAgICAgIGFoNCA9IGhoWzRdLFxuICAgICAgYWg1ID0gaGhbNV0sXG4gICAgICBhaDYgPSBoaFs2XSxcbiAgICAgIGFoNyA9IGhoWzddLFxuXG4gICAgICBhbDAgPSBobFswXSxcbiAgICAgIGFsMSA9IGhsWzFdLFxuICAgICAgYWwyID0gaGxbMl0sXG4gICAgICBhbDMgPSBobFszXSxcbiAgICAgIGFsNCA9IGhsWzRdLFxuICAgICAgYWw1ID0gaGxbNV0sXG4gICAgICBhbDYgPSBobFs2XSxcbiAgICAgIGFsNyA9IGhsWzddO1xuXG4gIHZhciBwb3MgPSAwO1xuICB3aGlsZSAobiA+PSAxMjgpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgaiA9IDggKiBpICsgcG9zO1xuICAgICAgd2hbaV0gPSAobVtqKzBdIDw8IDI0KSB8IChtW2orMV0gPDwgMTYpIHwgKG1baisyXSA8PCA4KSB8IG1baiszXTtcbiAgICAgIHdsW2ldID0gKG1bais0XSA8PCAyNCkgfCAobVtqKzVdIDw8IDE2KSB8IChtW2orNl0gPDwgOCkgfCBtW2orN107XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCA4MDsgaSsrKSB7XG4gICAgICBiaDAgPSBhaDA7XG4gICAgICBiaDEgPSBhaDE7XG4gICAgICBiaDIgPSBhaDI7XG4gICAgICBiaDMgPSBhaDM7XG4gICAgICBiaDQgPSBhaDQ7XG4gICAgICBiaDUgPSBhaDU7XG4gICAgICBiaDYgPSBhaDY7XG4gICAgICBiaDcgPSBhaDc7XG5cbiAgICAgIGJsMCA9IGFsMDtcbiAgICAgIGJsMSA9IGFsMTtcbiAgICAgIGJsMiA9IGFsMjtcbiAgICAgIGJsMyA9IGFsMztcbiAgICAgIGJsNCA9IGFsNDtcbiAgICAgIGJsNSA9IGFsNTtcbiAgICAgIGJsNiA9IGFsNjtcbiAgICAgIGJsNyA9IGFsNztcblxuICAgICAgLy8gYWRkXG4gICAgICBoID0gYWg3O1xuICAgICAgbCA9IGFsNztcblxuICAgICAgYSA9IGwgJiAweGZmZmY7IGIgPSBsID4+PiAxNjtcbiAgICAgIGMgPSBoICYgMHhmZmZmOyBkID0gaCA+Pj4gMTY7XG5cbiAgICAgIC8vIFNpZ21hMVxuICAgICAgaCA9ICgoYWg0ID4+PiAxNCkgfCAoYWw0IDw8ICgzMi0xNCkpKSBeICgoYWg0ID4+PiAxOCkgfCAoYWw0IDw8ICgzMi0xOCkpKSBeICgoYWw0ID4+PiAoNDEtMzIpKSB8IChhaDQgPDwgKDMyLSg0MS0zMikpKSk7XG4gICAgICBsID0gKChhbDQgPj4+IDE0KSB8IChhaDQgPDwgKDMyLTE0KSkpIF4gKChhbDQgPj4+IDE4KSB8IChhaDQgPDwgKDMyLTE4KSkpIF4gKChhaDQgPj4+ICg0MS0zMikpIHwgKGFsNCA8PCAoMzItKDQxLTMyKSkpKTtcblxuICAgICAgYSArPSBsICYgMHhmZmZmOyBiICs9IGwgPj4+IDE2O1xuICAgICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgICAvLyBDaFxuICAgICAgaCA9IChhaDQgJiBhaDUpIF4gKH5haDQgJiBhaDYpO1xuICAgICAgbCA9IChhbDQgJiBhbDUpIF4gKH5hbDQgJiBhbDYpO1xuXG4gICAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICAgIC8vIEtcbiAgICAgIGggPSBLW2kqMl07XG4gICAgICBsID0gS1tpKjIrMV07XG5cbiAgICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICAgIGMgKz0gaCAmIDB4ZmZmZjsgZCArPSBoID4+PiAxNjtcblxuICAgICAgLy8gd1xuICAgICAgaCA9IHdoW2klMTZdO1xuICAgICAgbCA9IHdsW2klMTZdO1xuXG4gICAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgICBjICs9IGggJiAweGZmZmY7IGQgKz0gaCA+Pj4gMTY7XG5cbiAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgZCArPSBjID4+PiAxNjtcblxuICAgICAgdGggPSBjICYgMHhmZmZmIHwgZCA8PCAxNjtcbiAgICAgIHRsID0gYSAmIDB4ZmZmZiB8IGIgPDwgMTY7XG5cbiAgICAgIC8vIGFkZFxuICAgICAgaCA9IHRoO1xuICAgICAgbCA9IHRsO1xuXG4gICAgICBhID0gbCAmIDB4ZmZmZjsgYiA9IGwgPj4+IDE2O1xuICAgICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgICAgLy8gU2lnbWEwXG4gICAgICBoID0gKChhaDAgPj4+IDI4KSB8IChhbDAgPDwgKDMyLTI4KSkpIF4gKChhbDAgPj4+ICgzNC0zMikpIHwgKGFoMCA8PCAoMzItKDM0LTMyKSkpKSBeICgoYWwwID4+PiAoMzktMzIpKSB8IChhaDAgPDwgKDMyLSgzOS0zMikpKSk7XG4gICAgICBsID0gKChhbDAgPj4+IDI4KSB8IChhaDAgPDwgKDMyLTI4KSkpIF4gKChhaDAgPj4+ICgzNC0zMikpIHwgKGFsMCA8PCAoMzItKDM0LTMyKSkpKSBeICgoYWgwID4+PiAoMzktMzIpKSB8IChhbDAgPDwgKDMyLSgzOS0zMikpKSk7XG5cbiAgICAgIGEgKz0gbCAmIDB4ZmZmZjsgYiArPSBsID4+PiAxNjtcbiAgICAgIGMgKz0gaCAmIDB4ZmZmZjsgZCArPSBoID4+PiAxNjtcblxuICAgICAgLy8gTWFqXG4gICAgICBoID0gKGFoMCAmIGFoMSkgXiAoYWgwICYgYWgyKSBeIChhaDEgJiBhaDIpO1xuICAgICAgbCA9IChhbDAgJiBhbDEpIF4gKGFsMCAmIGFsMikgXiAoYWwxICYgYWwyKTtcblxuICAgICAgYSArPSBsICYgMHhmZmZmOyBiICs9IGwgPj4+IDE2O1xuICAgICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICAgIGJoNyA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICAgIGJsNyA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcblxuICAgICAgLy8gYWRkXG4gICAgICBoID0gYmgzO1xuICAgICAgbCA9IGJsMztcblxuICAgICAgYSA9IGwgJiAweGZmZmY7IGIgPSBsID4+PiAxNjtcbiAgICAgIGMgPSBoICYgMHhmZmZmOyBkID0gaCA+Pj4gMTY7XG5cbiAgICAgIGggPSB0aDtcbiAgICAgIGwgPSB0bDtcblxuICAgICAgYSArPSBsICYgMHhmZmZmOyBiICs9IGwgPj4+IDE2O1xuICAgICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICAgIGJoMyA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICAgIGJsMyA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcblxuICAgICAgYWgxID0gYmgwO1xuICAgICAgYWgyID0gYmgxO1xuICAgICAgYWgzID0gYmgyO1xuICAgICAgYWg0ID0gYmgzO1xuICAgICAgYWg1ID0gYmg0O1xuICAgICAgYWg2ID0gYmg1O1xuICAgICAgYWg3ID0gYmg2O1xuICAgICAgYWgwID0gYmg3O1xuXG4gICAgICBhbDEgPSBibDA7XG4gICAgICBhbDIgPSBibDE7XG4gICAgICBhbDMgPSBibDI7XG4gICAgICBhbDQgPSBibDM7XG4gICAgICBhbDUgPSBibDQ7XG4gICAgICBhbDYgPSBibDU7XG4gICAgICBhbDcgPSBibDY7XG4gICAgICBhbDAgPSBibDc7XG5cbiAgICAgIGlmIChpJTE2ID09PSAxNSkge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgMTY7IGorKykge1xuICAgICAgICAgIC8vIGFkZFxuICAgICAgICAgIGggPSB3aFtqXTtcbiAgICAgICAgICBsID0gd2xbal07XG5cbiAgICAgICAgICBhID0gbCAmIDB4ZmZmZjsgYiA9IGwgPj4+IDE2O1xuICAgICAgICAgIGMgPSBoICYgMHhmZmZmOyBkID0gaCA+Pj4gMTY7XG5cbiAgICAgICAgICBoID0gd2hbKGorOSklMTZdO1xuICAgICAgICAgIGwgPSB3bFsoais5KSUxNl07XG5cbiAgICAgICAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgICAgICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgICAgICAgLy8gc2lnbWEwXG4gICAgICAgICAgdGggPSB3aFsoaisxKSUxNl07XG4gICAgICAgICAgdGwgPSB3bFsoaisxKSUxNl07XG4gICAgICAgICAgaCA9ICgodGggPj4+IDEpIHwgKHRsIDw8ICgzMi0xKSkpIF4gKCh0aCA+Pj4gOCkgfCAodGwgPDwgKDMyLTgpKSkgXiAodGggPj4+IDcpO1xuICAgICAgICAgIGwgPSAoKHRsID4+PiAxKSB8ICh0aCA8PCAoMzItMSkpKSBeICgodGwgPj4+IDgpIHwgKHRoIDw8ICgzMi04KSkpIF4gKCh0bCA+Pj4gNykgfCAodGggPDwgKDMyLTcpKSk7XG5cbiAgICAgICAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgICAgICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgICAgICAgLy8gc2lnbWExXG4gICAgICAgICAgdGggPSB3aFsoaisxNCklMTZdO1xuICAgICAgICAgIHRsID0gd2xbKGorMTQpJTE2XTtcbiAgICAgICAgICBoID0gKCh0aCA+Pj4gMTkpIHwgKHRsIDw8ICgzMi0xOSkpKSBeICgodGwgPj4+ICg2MS0zMikpIHwgKHRoIDw8ICgzMi0oNjEtMzIpKSkpIF4gKHRoID4+PiA2KTtcbiAgICAgICAgICBsID0gKCh0bCA+Pj4gMTkpIHwgKHRoIDw8ICgzMi0xOSkpKSBeICgodGggPj4+ICg2MS0zMikpIHwgKHRsIDw8ICgzMi0oNjEtMzIpKSkpIF4gKCh0bCA+Pj4gNikgfCAodGggPDwgKDMyLTYpKSk7XG5cbiAgICAgICAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgICAgICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICAgICAgICB3aFtqXSA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICAgICAgICB3bFtqXSA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFkZFxuICAgIGggPSBhaDA7XG4gICAgbCA9IGFsMDtcblxuICAgIGEgPSBsICYgMHhmZmZmOyBiID0gbCA+Pj4gMTY7XG4gICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgIGggPSBoaFswXTtcbiAgICBsID0gaGxbMF07XG5cbiAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgYiArPSBhID4+PiAxNjtcbiAgICBjICs9IGIgPj4+IDE2O1xuICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICBoaFswXSA9IGFoMCA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICBobFswXSA9IGFsMCA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcblxuICAgIGggPSBhaDE7XG4gICAgbCA9IGFsMTtcblxuICAgIGEgPSBsICYgMHhmZmZmOyBiID0gbCA+Pj4gMTY7XG4gICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgIGggPSBoaFsxXTtcbiAgICBsID0gaGxbMV07XG5cbiAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgYiArPSBhID4+PiAxNjtcbiAgICBjICs9IGIgPj4+IDE2O1xuICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICBoaFsxXSA9IGFoMSA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICBobFsxXSA9IGFsMSA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcblxuICAgIGggPSBhaDI7XG4gICAgbCA9IGFsMjtcblxuICAgIGEgPSBsICYgMHhmZmZmOyBiID0gbCA+Pj4gMTY7XG4gICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgIGggPSBoaFsyXTtcbiAgICBsID0gaGxbMl07XG5cbiAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgYiArPSBhID4+PiAxNjtcbiAgICBjICs9IGIgPj4+IDE2O1xuICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICBoaFsyXSA9IGFoMiA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICBobFsyXSA9IGFsMiA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcblxuICAgIGggPSBhaDM7XG4gICAgbCA9IGFsMztcblxuICAgIGEgPSBsICYgMHhmZmZmOyBiID0gbCA+Pj4gMTY7XG4gICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgIGggPSBoaFszXTtcbiAgICBsID0gaGxbM107XG5cbiAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgYiArPSBhID4+PiAxNjtcbiAgICBjICs9IGIgPj4+IDE2O1xuICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICBoaFszXSA9IGFoMyA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICBobFszXSA9IGFsMyA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcblxuICAgIGggPSBhaDQ7XG4gICAgbCA9IGFsNDtcblxuICAgIGEgPSBsICYgMHhmZmZmOyBiID0gbCA+Pj4gMTY7XG4gICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgIGggPSBoaFs0XTtcbiAgICBsID0gaGxbNF07XG5cbiAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgYiArPSBhID4+PiAxNjtcbiAgICBjICs9IGIgPj4+IDE2O1xuICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICBoaFs0XSA9IGFoNCA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICBobFs0XSA9IGFsNCA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcblxuICAgIGggPSBhaDU7XG4gICAgbCA9IGFsNTtcblxuICAgIGEgPSBsICYgMHhmZmZmOyBiID0gbCA+Pj4gMTY7XG4gICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgIGggPSBoaFs1XTtcbiAgICBsID0gaGxbNV07XG5cbiAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgYiArPSBhID4+PiAxNjtcbiAgICBjICs9IGIgPj4+IDE2O1xuICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICBoaFs1XSA9IGFoNSA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICBobFs1XSA9IGFsNSA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcblxuICAgIGggPSBhaDY7XG4gICAgbCA9IGFsNjtcblxuICAgIGEgPSBsICYgMHhmZmZmOyBiID0gbCA+Pj4gMTY7XG4gICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgIGggPSBoaFs2XTtcbiAgICBsID0gaGxbNl07XG5cbiAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgYiArPSBhID4+PiAxNjtcbiAgICBjICs9IGIgPj4+IDE2O1xuICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICBoaFs2XSA9IGFoNiA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICBobFs2XSA9IGFsNiA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcblxuICAgIGggPSBhaDc7XG4gICAgbCA9IGFsNztcblxuICAgIGEgPSBsICYgMHhmZmZmOyBiID0gbCA+Pj4gMTY7XG4gICAgYyA9IGggJiAweGZmZmY7IGQgPSBoID4+PiAxNjtcblxuICAgIGggPSBoaFs3XTtcbiAgICBsID0gaGxbN107XG5cbiAgICBhICs9IGwgJiAweGZmZmY7IGIgKz0gbCA+Pj4gMTY7XG4gICAgYyArPSBoICYgMHhmZmZmOyBkICs9IGggPj4+IDE2O1xuXG4gICAgYiArPSBhID4+PiAxNjtcbiAgICBjICs9IGIgPj4+IDE2O1xuICAgIGQgKz0gYyA+Pj4gMTY7XG5cbiAgICBoaFs3XSA9IGFoNyA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICBobFs3XSA9IGFsNyA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcblxuICAgIHBvcyArPSAxMjg7XG4gICAgbiAtPSAxMjg7XG4gIH1cblxuICByZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gY3J5cHRvX2hhc2gob3V0LCBtLCBuKSB7XG4gIHZhciBoaCA9IG5ldyBJbnQzMkFycmF5KDgpLFxuICAgICAgaGwgPSBuZXcgSW50MzJBcnJheSg4KSxcbiAgICAgIHggPSBuZXcgVWludDhBcnJheSgyNTYpLFxuICAgICAgaSwgYiA9IG47XG5cbiAgaGhbMF0gPSAweDZhMDllNjY3O1xuICBoaFsxXSA9IDB4YmI2N2FlODU7XG4gIGhoWzJdID0gMHgzYzZlZjM3MjtcbiAgaGhbM10gPSAweGE1NGZmNTNhO1xuICBoaFs0XSA9IDB4NTEwZTUyN2Y7XG4gIGhoWzVdID0gMHg5YjA1Njg4YztcbiAgaGhbNl0gPSAweDFmODNkOWFiO1xuICBoaFs3XSA9IDB4NWJlMGNkMTk7XG5cbiAgaGxbMF0gPSAweGYzYmNjOTA4O1xuICBobFsxXSA9IDB4ODRjYWE3M2I7XG4gIGhsWzJdID0gMHhmZTk0ZjgyYjtcbiAgaGxbM10gPSAweDVmMWQzNmYxO1xuICBobFs0XSA9IDB4YWRlNjgyZDE7XG4gIGhsWzVdID0gMHgyYjNlNmMxZjtcbiAgaGxbNl0gPSAweGZiNDFiZDZiO1xuICBobFs3XSA9IDB4MTM3ZTIxNzk7XG5cbiAgY3J5cHRvX2hhc2hibG9ja3NfaGwoaGgsIGhsLCBtLCBuKTtcbiAgbiAlPSAxMjg7XG5cbiAgZm9yIChpID0gMDsgaSA8IG47IGkrKykgeFtpXSA9IG1bYi1uK2ldO1xuICB4W25dID0gMTI4O1xuXG4gIG4gPSAyNTYtMTI4KihuPDExMj8xOjApO1xuICB4W24tOV0gPSAwO1xuICB0czY0KHgsIG4tOCwgIChiIC8gMHgyMDAwMDAwMCkgfCAwLCBiIDw8IDMpO1xuICBjcnlwdG9faGFzaGJsb2Nrc19obChoaCwgaGwsIHgsIG4pO1xuXG4gIGZvciAoaSA9IDA7IGkgPCA4OyBpKyspIHRzNjQob3V0LCA4KmksIGhoW2ldLCBobFtpXSk7XG5cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGFkZChwLCBxKSB7XG4gIHZhciBhID0gZ2YoKSwgYiA9IGdmKCksIGMgPSBnZigpLFxuICAgICAgZCA9IGdmKCksIGUgPSBnZigpLCBmID0gZ2YoKSxcbiAgICAgIGcgPSBnZigpLCBoID0gZ2YoKSwgdCA9IGdmKCk7XG5cbiAgWihhLCBwWzFdLCBwWzBdKTtcbiAgWih0LCBxWzFdLCBxWzBdKTtcbiAgTShhLCBhLCB0KTtcbiAgQShiLCBwWzBdLCBwWzFdKTtcbiAgQSh0LCBxWzBdLCBxWzFdKTtcbiAgTShiLCBiLCB0KTtcbiAgTShjLCBwWzNdLCBxWzNdKTtcbiAgTShjLCBjLCBEMik7XG4gIE0oZCwgcFsyXSwgcVsyXSk7XG4gIEEoZCwgZCwgZCk7XG4gIFooZSwgYiwgYSk7XG4gIFooZiwgZCwgYyk7XG4gIEEoZywgZCwgYyk7XG4gIEEoaCwgYiwgYSk7XG5cbiAgTShwWzBdLCBlLCBmKTtcbiAgTShwWzFdLCBoLCBnKTtcbiAgTShwWzJdLCBnLCBmKTtcbiAgTShwWzNdLCBlLCBoKTtcbn1cblxuZnVuY3Rpb24gY3N3YXAocCwgcSwgYikge1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHNlbDI1NTE5KHBbaV0sIHFbaV0sIGIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhY2sociwgcCkge1xuICB2YXIgdHggPSBnZigpLCB0eSA9IGdmKCksIHppID0gZ2YoKTtcbiAgaW52MjU1MTkoemksIHBbMl0pO1xuICBNKHR4LCBwWzBdLCB6aSk7XG4gIE0odHksIHBbMV0sIHppKTtcbiAgcGFjazI1NTE5KHIsIHR5KTtcbiAgclszMV0gXj0gcGFyMjU1MTkodHgpIDw8IDc7XG59XG5cbmZ1bmN0aW9uIHNjYWxhcm11bHQocCwgcSwgcykge1xuICB2YXIgYiwgaTtcbiAgc2V0MjU1MTkocFswXSwgZ2YwKTtcbiAgc2V0MjU1MTkocFsxXSwgZ2YxKTtcbiAgc2V0MjU1MTkocFsyXSwgZ2YxKTtcbiAgc2V0MjU1MTkocFszXSwgZ2YwKTtcbiAgZm9yIChpID0gMjU1OyBpID49IDA7IC0taSkge1xuICAgIGIgPSAoc1soaS84KXwwXSA+PiAoaSY3KSkgJiAxO1xuICAgIGNzd2FwKHAsIHEsIGIpO1xuICAgIGFkZChxLCBwKTtcbiAgICBhZGQocCwgcCk7XG4gICAgY3N3YXAocCwgcSwgYik7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2NhbGFyYmFzZShwLCBzKSB7XG4gIHZhciBxID0gW2dmKCksIGdmKCksIGdmKCksIGdmKCldO1xuICBzZXQyNTUxOShxWzBdLCBYKTtcbiAgc2V0MjU1MTkocVsxXSwgWSk7XG4gIHNldDI1NTE5KHFbMl0sIGdmMSk7XG4gIE0ocVszXSwgWCwgWSk7XG4gIHNjYWxhcm11bHQocCwgcSwgcyk7XG59XG5cbmZ1bmN0aW9uIGNyeXB0b19zaWduX2tleXBhaXIocGssIHNrLCBzZWVkZWQpIHtcbiAgdmFyIGQgPSBuZXcgVWludDhBcnJheSg2NCk7XG4gIHZhciBwID0gW2dmKCksIGdmKCksIGdmKCksIGdmKCldO1xuICB2YXIgaTtcblxuICBpZiAoIXNlZWRlZCkgcmFuZG9tYnl0ZXMoc2ssIDMyKTtcbiAgY3J5cHRvX2hhc2goZCwgc2ssIDMyKTtcbiAgZFswXSAmPSAyNDg7XG4gIGRbMzFdICY9IDEyNztcbiAgZFszMV0gfD0gNjQ7XG5cbiAgc2NhbGFyYmFzZShwLCBkKTtcbiAgcGFjayhwaywgcCk7XG5cbiAgZm9yIChpID0gMDsgaSA8IDMyOyBpKyspIHNrW2krMzJdID0gcGtbaV07XG4gIHJldHVybiAwO1xufVxuXG52YXIgTCA9IG5ldyBGbG9hdDY0QXJyYXkoWzB4ZWQsIDB4ZDMsIDB4ZjUsIDB4NWMsIDB4MWEsIDB4NjMsIDB4MTIsIDB4NTgsIDB4ZDYsIDB4OWMsIDB4ZjcsIDB4YTIsIDB4ZGUsIDB4ZjksIDB4ZGUsIDB4MTQsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDB4MTBdKTtcblxuZnVuY3Rpb24gbW9kTChyLCB4KSB7XG4gIHZhciBjYXJyeSwgaSwgaiwgaztcbiAgZm9yIChpID0gNjM7IGkgPj0gMzI7IC0taSkge1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGogPSBpIC0gMzIsIGsgPSBpIC0gMTI7IGogPCBrOyArK2opIHtcbiAgICAgIHhbal0gKz0gY2FycnkgLSAxNiAqIHhbaV0gKiBMW2ogLSAoaSAtIDMyKV07XG4gICAgICBjYXJyeSA9ICh4W2pdICsgMTI4KSA+PiA4O1xuICAgICAgeFtqXSAtPSBjYXJyeSAqIDI1NjtcbiAgICB9XG4gICAgeFtqXSArPSBjYXJyeTtcbiAgICB4W2ldID0gMDtcbiAgfVxuICBjYXJyeSA9IDA7XG4gIGZvciAoaiA9IDA7IGogPCAzMjsgaisrKSB7XG4gICAgeFtqXSArPSBjYXJyeSAtICh4WzMxXSA+PiA0KSAqIExbal07XG4gICAgY2FycnkgPSB4W2pdID4+IDg7XG4gICAgeFtqXSAmPSAyNTU7XG4gIH1cbiAgZm9yIChqID0gMDsgaiA8IDMyOyBqKyspIHhbal0gLT0gY2FycnkgKiBMW2pdO1xuICBmb3IgKGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgIHhbaSsxXSArPSB4W2ldID4+IDg7XG4gICAgcltpXSA9IHhbaV0gJiAyNTU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVkdWNlKHIpIHtcbiAgdmFyIHggPSBuZXcgRmxvYXQ2NEFycmF5KDY0KSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IDY0OyBpKyspIHhbaV0gPSByW2ldO1xuICBmb3IgKGkgPSAwOyBpIDwgNjQ7IGkrKykgcltpXSA9IDA7XG4gIG1vZEwociwgeCk7XG59XG5cbi8vIE5vdGU6IGRpZmZlcmVuY2UgZnJvbSBDIC0gc21sZW4gcmV0dXJuZWQsIG5vdCBwYXNzZWQgYXMgYXJndW1lbnQuXG5mdW5jdGlvbiBjcnlwdG9fc2lnbihzbSwgbSwgbiwgc2spIHtcbiAgdmFyIGQgPSBuZXcgVWludDhBcnJheSg2NCksIGggPSBuZXcgVWludDhBcnJheSg2NCksIHIgPSBuZXcgVWludDhBcnJheSg2NCk7XG4gIHZhciBpLCBqLCB4ID0gbmV3IEZsb2F0NjRBcnJheSg2NCk7XG4gIHZhciBwID0gW2dmKCksIGdmKCksIGdmKCksIGdmKCldO1xuXG4gIGNyeXB0b19oYXNoKGQsIHNrLCAzMik7XG4gIGRbMF0gJj0gMjQ4O1xuICBkWzMxXSAmPSAxMjc7XG4gIGRbMzFdIHw9IDY0O1xuXG4gIHZhciBzbWxlbiA9IG4gKyA2NDtcbiAgZm9yIChpID0gMDsgaSA8IG47IGkrKykgc21bNjQgKyBpXSA9IG1baV07XG4gIGZvciAoaSA9IDA7IGkgPCAzMjsgaSsrKSBzbVszMiArIGldID0gZFszMiArIGldO1xuXG4gIGNyeXB0b19oYXNoKHIsIHNtLnN1YmFycmF5KDMyKSwgbiszMik7XG4gIHJlZHVjZShyKTtcbiAgc2NhbGFyYmFzZShwLCByKTtcbiAgcGFjayhzbSwgcCk7XG5cbiAgZm9yIChpID0gMzI7IGkgPCA2NDsgaSsrKSBzbVtpXSA9IHNrW2ldO1xuICBjcnlwdG9faGFzaChoLCBzbSwgbiArIDY0KTtcbiAgcmVkdWNlKGgpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCA2NDsgaSsrKSB4W2ldID0gMDtcbiAgZm9yIChpID0gMDsgaSA8IDMyOyBpKyspIHhbaV0gPSByW2ldO1xuICBmb3IgKGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgIGZvciAoaiA9IDA7IGogPCAzMjsgaisrKSB7XG4gICAgICB4W2kral0gKz0gaFtpXSAqIGRbal07XG4gICAgfVxuICB9XG5cbiAgbW9kTChzbS5zdWJhcnJheSgzMiksIHgpO1xuICByZXR1cm4gc21sZW47XG59XG5cbmZ1bmN0aW9uIHVucGFja25lZyhyLCBwKSB7XG4gIHZhciB0ID0gZ2YoKSwgY2hrID0gZ2YoKSwgbnVtID0gZ2YoKSxcbiAgICAgIGRlbiA9IGdmKCksIGRlbjIgPSBnZigpLCBkZW40ID0gZ2YoKSxcbiAgICAgIGRlbjYgPSBnZigpO1xuXG4gIHNldDI1NTE5KHJbMl0sIGdmMSk7XG4gIHVucGFjazI1NTE5KHJbMV0sIHApO1xuICBTKG51bSwgclsxXSk7XG4gIE0oZGVuLCBudW0sIEQpO1xuICBaKG51bSwgbnVtLCByWzJdKTtcbiAgQShkZW4sIHJbMl0sIGRlbik7XG5cbiAgUyhkZW4yLCBkZW4pO1xuICBTKGRlbjQsIGRlbjIpO1xuICBNKGRlbjYsIGRlbjQsIGRlbjIpO1xuICBNKHQsIGRlbjYsIG51bSk7XG4gIE0odCwgdCwgZGVuKTtcblxuICBwb3cyNTIzKHQsIHQpO1xuICBNKHQsIHQsIG51bSk7XG4gIE0odCwgdCwgZGVuKTtcbiAgTSh0LCB0LCBkZW4pO1xuICBNKHJbMF0sIHQsIGRlbik7XG5cbiAgUyhjaGssIHJbMF0pO1xuICBNKGNoaywgY2hrLCBkZW4pO1xuICBpZiAobmVxMjU1MTkoY2hrLCBudW0pKSBNKHJbMF0sIHJbMF0sIEkpO1xuXG4gIFMoY2hrLCByWzBdKTtcbiAgTShjaGssIGNoaywgZGVuKTtcbiAgaWYgKG5lcTI1NTE5KGNoaywgbnVtKSkgcmV0dXJuIC0xO1xuXG4gIGlmIChwYXIyNTUxOShyWzBdKSA9PT0gKHBbMzFdPj43KSkgWihyWzBdLCBnZjAsIHJbMF0pO1xuXG4gIE0oclszXSwgclswXSwgclsxXSk7XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBjcnlwdG9fc2lnbl9vcGVuKG0sIHNtLCBuLCBwaykge1xuICB2YXIgaSwgbWxlbjtcbiAgdmFyIHQgPSBuZXcgVWludDhBcnJheSgzMiksIGggPSBuZXcgVWludDhBcnJheSg2NCk7XG4gIHZhciBwID0gW2dmKCksIGdmKCksIGdmKCksIGdmKCldLFxuICAgICAgcSA9IFtnZigpLCBnZigpLCBnZigpLCBnZigpXTtcblxuICBtbGVuID0gLTE7XG4gIGlmIChuIDwgNjQpIHJldHVybiAtMTtcblxuICBpZiAodW5wYWNrbmVnKHEsIHBrKSkgcmV0dXJuIC0xO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIG1baV0gPSBzbVtpXTtcbiAgZm9yIChpID0gMDsgaSA8IDMyOyBpKyspIG1baSszMl0gPSBwa1tpXTtcbiAgY3J5cHRvX2hhc2goaCwgbSwgbik7XG4gIHJlZHVjZShoKTtcbiAgc2NhbGFybXVsdChwLCBxLCBoKTtcblxuICBzY2FsYXJiYXNlKHEsIHNtLnN1YmFycmF5KDMyKSk7XG4gIGFkZChwLCBxKTtcbiAgcGFjayh0LCBwKTtcblxuICBuIC09IDY0O1xuICBpZiAoY3J5cHRvX3ZlcmlmeV8zMihzbSwgMCwgdCwgMCkpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBtW2ldID0gMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBtW2ldID0gc21baSArIDY0XTtcbiAgbWxlbiA9IG47XG4gIHJldHVybiBtbGVuO1xufVxuXG52YXIgY3J5cHRvX3NlY3JldGJveF9LRVlCWVRFUyA9IDMyLFxuICAgIGNyeXB0b19zZWNyZXRib3hfTk9OQ0VCWVRFUyA9IDI0LFxuICAgIGNyeXB0b19zZWNyZXRib3hfWkVST0JZVEVTID0gMzIsXG4gICAgY3J5cHRvX3NlY3JldGJveF9CT1haRVJPQllURVMgPSAxNixcbiAgICBjcnlwdG9fc2NhbGFybXVsdF9CWVRFUyA9IDMyLFxuICAgIGNyeXB0b19zY2FsYXJtdWx0X1NDQUxBUkJZVEVTID0gMzIsXG4gICAgY3J5cHRvX2JveF9QVUJMSUNLRVlCWVRFUyA9IDMyLFxuICAgIGNyeXB0b19ib3hfU0VDUkVUS0VZQllURVMgPSAzMixcbiAgICBjcnlwdG9fYm94X0JFRk9SRU5NQllURVMgPSAzMixcbiAgICBjcnlwdG9fYm94X05PTkNFQllURVMgPSBjcnlwdG9fc2VjcmV0Ym94X05PTkNFQllURVMsXG4gICAgY3J5cHRvX2JveF9aRVJPQllURVMgPSBjcnlwdG9fc2VjcmV0Ym94X1pFUk9CWVRFUyxcbiAgICBjcnlwdG9fYm94X0JPWFpFUk9CWVRFUyA9IGNyeXB0b19zZWNyZXRib3hfQk9YWkVST0JZVEVTLFxuICAgIGNyeXB0b19zaWduX0JZVEVTID0gNjQsXG4gICAgY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVMgPSAzMixcbiAgICBjcnlwdG9fc2lnbl9TRUNSRVRLRVlCWVRFUyA9IDY0LFxuICAgIGNyeXB0b19zaWduX1NFRURCWVRFUyA9IDMyLFxuICAgIGNyeXB0b19oYXNoX0JZVEVTID0gNjQ7XG5cbm5hY2wubG93bGV2ZWwgPSB7XG4gIGNyeXB0b19jb3JlX2hzYWxzYTIwOiBjcnlwdG9fY29yZV9oc2Fsc2EyMCxcbiAgY3J5cHRvX3N0cmVhbV94b3I6IGNyeXB0b19zdHJlYW1feG9yLFxuICBjcnlwdG9fc3RyZWFtOiBjcnlwdG9fc3RyZWFtLFxuICBjcnlwdG9fc3RyZWFtX3NhbHNhMjBfeG9yOiBjcnlwdG9fc3RyZWFtX3NhbHNhMjBfeG9yLFxuICBjcnlwdG9fc3RyZWFtX3NhbHNhMjA6IGNyeXB0b19zdHJlYW1fc2Fsc2EyMCxcbiAgY3J5cHRvX29uZXRpbWVhdXRoOiBjcnlwdG9fb25ldGltZWF1dGgsXG4gIGNyeXB0b19vbmV0aW1lYXV0aF92ZXJpZnk6IGNyeXB0b19vbmV0aW1lYXV0aF92ZXJpZnksXG4gIGNyeXB0b192ZXJpZnlfMTY6IGNyeXB0b192ZXJpZnlfMTYsXG4gIGNyeXB0b192ZXJpZnlfMzI6IGNyeXB0b192ZXJpZnlfMzIsXG4gIGNyeXB0b19zZWNyZXRib3g6IGNyeXB0b19zZWNyZXRib3gsXG4gIGNyeXB0b19zZWNyZXRib3hfb3BlbjogY3J5cHRvX3NlY3JldGJveF9vcGVuLFxuICBjcnlwdG9fc2NhbGFybXVsdDogY3J5cHRvX3NjYWxhcm11bHQsXG4gIGNyeXB0b19zY2FsYXJtdWx0X2Jhc2U6IGNyeXB0b19zY2FsYXJtdWx0X2Jhc2UsXG4gIGNyeXB0b19ib3hfYmVmb3Jlbm06IGNyeXB0b19ib3hfYmVmb3Jlbm0sXG4gIGNyeXB0b19ib3hfYWZ0ZXJubTogY3J5cHRvX2JveF9hZnRlcm5tLFxuICBjcnlwdG9fYm94OiBjcnlwdG9fYm94LFxuICBjcnlwdG9fYm94X29wZW46IGNyeXB0b19ib3hfb3BlbixcbiAgY3J5cHRvX2JveF9rZXlwYWlyOiBjcnlwdG9fYm94X2tleXBhaXIsXG4gIGNyeXB0b19oYXNoOiBjcnlwdG9faGFzaCxcbiAgY3J5cHRvX3NpZ246IGNyeXB0b19zaWduLFxuICBjcnlwdG9fc2lnbl9rZXlwYWlyOiBjcnlwdG9fc2lnbl9rZXlwYWlyLFxuICBjcnlwdG9fc2lnbl9vcGVuOiBjcnlwdG9fc2lnbl9vcGVuLFxuXG4gIGNyeXB0b19zZWNyZXRib3hfS0VZQllURVM6IGNyeXB0b19zZWNyZXRib3hfS0VZQllURVMsXG4gIGNyeXB0b19zZWNyZXRib3hfTk9OQ0VCWVRFUzogY3J5cHRvX3NlY3JldGJveF9OT05DRUJZVEVTLFxuICBjcnlwdG9fc2VjcmV0Ym94X1pFUk9CWVRFUzogY3J5cHRvX3NlY3JldGJveF9aRVJPQllURVMsXG4gIGNyeXB0b19zZWNyZXRib3hfQk9YWkVST0JZVEVTOiBjcnlwdG9fc2VjcmV0Ym94X0JPWFpFUk9CWVRFUyxcbiAgY3J5cHRvX3NjYWxhcm11bHRfQllURVM6IGNyeXB0b19zY2FsYXJtdWx0X0JZVEVTLFxuICBjcnlwdG9fc2NhbGFybXVsdF9TQ0FMQVJCWVRFUzogY3J5cHRvX3NjYWxhcm11bHRfU0NBTEFSQllURVMsXG4gIGNyeXB0b19ib3hfUFVCTElDS0VZQllURVM6IGNyeXB0b19ib3hfUFVCTElDS0VZQllURVMsXG4gIGNyeXB0b19ib3hfU0VDUkVUS0VZQllURVM6IGNyeXB0b19ib3hfU0VDUkVUS0VZQllURVMsXG4gIGNyeXB0b19ib3hfQkVGT1JFTk1CWVRFUzogY3J5cHRvX2JveF9CRUZPUkVOTUJZVEVTLFxuICBjcnlwdG9fYm94X05PTkNFQllURVM6IGNyeXB0b19ib3hfTk9OQ0VCWVRFUyxcbiAgY3J5cHRvX2JveF9aRVJPQllURVM6IGNyeXB0b19ib3hfWkVST0JZVEVTLFxuICBjcnlwdG9fYm94X0JPWFpFUk9CWVRFUzogY3J5cHRvX2JveF9CT1haRVJPQllURVMsXG4gIGNyeXB0b19zaWduX0JZVEVTOiBjcnlwdG9fc2lnbl9CWVRFUyxcbiAgY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVM6IGNyeXB0b19zaWduX1BVQkxJQ0tFWUJZVEVTLFxuICBjcnlwdG9fc2lnbl9TRUNSRVRLRVlCWVRFUzogY3J5cHRvX3NpZ25fU0VDUkVUS0VZQllURVMsXG4gIGNyeXB0b19zaWduX1NFRURCWVRFUzogY3J5cHRvX3NpZ25fU0VFREJZVEVTLFxuICBjcnlwdG9faGFzaF9CWVRFUzogY3J5cHRvX2hhc2hfQllURVNcbn07XG5cbi8qIEhpZ2gtbGV2ZWwgQVBJICovXG5cbmZ1bmN0aW9uIGNoZWNrTGVuZ3RocyhrLCBuKSB7XG4gIGlmIChrLmxlbmd0aCAhPT0gY3J5cHRvX3NlY3JldGJveF9LRVlCWVRFUykgdGhyb3cgbmV3IEVycm9yKCdiYWQga2V5IHNpemUnKTtcbiAgaWYgKG4ubGVuZ3RoICE9PSBjcnlwdG9fc2VjcmV0Ym94X05PTkNFQllURVMpIHRocm93IG5ldyBFcnJvcignYmFkIG5vbmNlIHNpemUnKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tCb3hMZW5ndGhzKHBrLCBzaykge1xuICBpZiAocGsubGVuZ3RoICE9PSBjcnlwdG9fYm94X1BVQkxJQ0tFWUJZVEVTKSB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwdWJsaWMga2V5IHNpemUnKTtcbiAgaWYgKHNrLmxlbmd0aCAhPT0gY3J5cHRvX2JveF9TRUNSRVRLRVlCWVRFUykgdGhyb3cgbmV3IEVycm9yKCdiYWQgc2VjcmV0IGtleSBzaXplJyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQXJyYXlUeXBlcygpIHtcbiAgdmFyIHQsIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgaWYgKCh0ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50c1tpXSkpICE9PSAnW29iamVjdCBVaW50OEFycmF5XScpXG4gICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5leHBlY3RlZCB0eXBlICcgKyB0ICsgJywgdXNlIFVpbnQ4QXJyYXknKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGVhbnVwKGFycikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykgYXJyW2ldID0gMDtcbn1cblxuLy8gVE9ETzogQ29tcGxldGVseSByZW1vdmUgdGhpcyBpbiB2MC4xNS5cbmlmICghbmFjbC51dGlsKSB7XG4gIG5hY2wudXRpbCA9IHt9O1xuICBuYWNsLnV0aWwuZGVjb2RlVVRGOCA9IG5hY2wudXRpbC5lbmNvZGVVVEY4ID0gbmFjbC51dGlsLmVuY29kZUJhc2U2NCA9IG5hY2wudXRpbC5kZWNvZGVCYXNlNjQgPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25hY2wudXRpbCBtb3ZlZCBpbnRvIHNlcGFyYXRlIHBhY2thZ2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kY2hlc3QvdHdlZXRuYWNsLXV0aWwtanMnKTtcbiAgfTtcbn1cblxubmFjbC5yYW5kb21CeXRlcyA9IGZ1bmN0aW9uKG4pIHtcbiAgdmFyIGIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgcmFuZG9tYnl0ZXMoYiwgbik7XG4gIHJldHVybiBiO1xufTtcblxubmFjbC5zZWNyZXRib3ggPSBmdW5jdGlvbihtc2csIG5vbmNlLCBrZXkpIHtcbiAgY2hlY2tBcnJheVR5cGVzKG1zZywgbm9uY2UsIGtleSk7XG4gIGNoZWNrTGVuZ3RocyhrZXksIG5vbmNlKTtcbiAgdmFyIG0gPSBuZXcgVWludDhBcnJheShjcnlwdG9fc2VjcmV0Ym94X1pFUk9CWVRFUyArIG1zZy5sZW5ndGgpO1xuICB2YXIgYyA9IG5ldyBVaW50OEFycmF5KG0ubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIG1baStjcnlwdG9fc2VjcmV0Ym94X1pFUk9CWVRFU10gPSBtc2dbaV07XG4gIGNyeXB0b19zZWNyZXRib3goYywgbSwgbS5sZW5ndGgsIG5vbmNlLCBrZXkpO1xuICByZXR1cm4gYy5zdWJhcnJheShjcnlwdG9fc2VjcmV0Ym94X0JPWFpFUk9CWVRFUyk7XG59O1xuXG5uYWNsLnNlY3JldGJveC5vcGVuID0gZnVuY3Rpb24oYm94LCBub25jZSwga2V5KSB7XG4gIGNoZWNrQXJyYXlUeXBlcyhib3gsIG5vbmNlLCBrZXkpO1xuICBjaGVja0xlbmd0aHMoa2V5LCBub25jZSk7XG4gIHZhciBjID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX3NlY3JldGJveF9CT1haRVJPQllURVMgKyBib3gubGVuZ3RoKTtcbiAgdmFyIG0gPSBuZXcgVWludDhBcnJheShjLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYm94Lmxlbmd0aDsgaSsrKSBjW2krY3J5cHRvX3NlY3JldGJveF9CT1haRVJPQllURVNdID0gYm94W2ldO1xuICBpZiAoYy5sZW5ndGggPCAzMikgcmV0dXJuIGZhbHNlO1xuICBpZiAoY3J5cHRvX3NlY3JldGJveF9vcGVuKG0sIGMsIGMubGVuZ3RoLCBub25jZSwga2V5KSAhPT0gMCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gbS5zdWJhcnJheShjcnlwdG9fc2VjcmV0Ym94X1pFUk9CWVRFUyk7XG59O1xuXG5uYWNsLnNlY3JldGJveC5rZXlMZW5ndGggPSBjcnlwdG9fc2VjcmV0Ym94X0tFWUJZVEVTO1xubmFjbC5zZWNyZXRib3gubm9uY2VMZW5ndGggPSBjcnlwdG9fc2VjcmV0Ym94X05PTkNFQllURVM7XG5uYWNsLnNlY3JldGJveC5vdmVyaGVhZExlbmd0aCA9IGNyeXB0b19zZWNyZXRib3hfQk9YWkVST0JZVEVTO1xuXG5uYWNsLnNjYWxhck11bHQgPSBmdW5jdGlvbihuLCBwKSB7XG4gIGNoZWNrQXJyYXlUeXBlcyhuLCBwKTtcbiAgaWYgKG4ubGVuZ3RoICE9PSBjcnlwdG9fc2NhbGFybXVsdF9TQ0FMQVJCWVRFUykgdGhyb3cgbmV3IEVycm9yKCdiYWQgbiBzaXplJyk7XG4gIGlmIChwLmxlbmd0aCAhPT0gY3J5cHRvX3NjYWxhcm11bHRfQllURVMpIHRocm93IG5ldyBFcnJvcignYmFkIHAgc2l6ZScpO1xuICB2YXIgcSA9IG5ldyBVaW50OEFycmF5KGNyeXB0b19zY2FsYXJtdWx0X0JZVEVTKTtcbiAgY3J5cHRvX3NjYWxhcm11bHQocSwgbiwgcCk7XG4gIHJldHVybiBxO1xufTtcblxubmFjbC5zY2FsYXJNdWx0LmJhc2UgPSBmdW5jdGlvbihuKSB7XG4gIGNoZWNrQXJyYXlUeXBlcyhuKTtcbiAgaWYgKG4ubGVuZ3RoICE9PSBjcnlwdG9fc2NhbGFybXVsdF9TQ0FMQVJCWVRFUykgdGhyb3cgbmV3IEVycm9yKCdiYWQgbiBzaXplJyk7XG4gIHZhciBxID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX3NjYWxhcm11bHRfQllURVMpO1xuICBjcnlwdG9fc2NhbGFybXVsdF9iYXNlKHEsIG4pO1xuICByZXR1cm4gcTtcbn07XG5cbm5hY2wuc2NhbGFyTXVsdC5zY2FsYXJMZW5ndGggPSBjcnlwdG9fc2NhbGFybXVsdF9TQ0FMQVJCWVRFUztcbm5hY2wuc2NhbGFyTXVsdC5ncm91cEVsZW1lbnRMZW5ndGggPSBjcnlwdG9fc2NhbGFybXVsdF9CWVRFUztcblxubmFjbC5ib3ggPSBmdW5jdGlvbihtc2csIG5vbmNlLCBwdWJsaWNLZXksIHNlY3JldEtleSkge1xuICB2YXIgayA9IG5hY2wuYm94LmJlZm9yZShwdWJsaWNLZXksIHNlY3JldEtleSk7XG4gIHJldHVybiBuYWNsLnNlY3JldGJveChtc2csIG5vbmNlLCBrKTtcbn07XG5cbm5hY2wuYm94LmJlZm9yZSA9IGZ1bmN0aW9uKHB1YmxpY0tleSwgc2VjcmV0S2V5KSB7XG4gIGNoZWNrQXJyYXlUeXBlcyhwdWJsaWNLZXksIHNlY3JldEtleSk7XG4gIGNoZWNrQm94TGVuZ3RocyhwdWJsaWNLZXksIHNlY3JldEtleSk7XG4gIHZhciBrID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX2JveF9CRUZPUkVOTUJZVEVTKTtcbiAgY3J5cHRvX2JveF9iZWZvcmVubShrLCBwdWJsaWNLZXksIHNlY3JldEtleSk7XG4gIHJldHVybiBrO1xufTtcblxubmFjbC5ib3guYWZ0ZXIgPSBuYWNsLnNlY3JldGJveDtcblxubmFjbC5ib3gub3BlbiA9IGZ1bmN0aW9uKG1zZywgbm9uY2UsIHB1YmxpY0tleSwgc2VjcmV0S2V5KSB7XG4gIHZhciBrID0gbmFjbC5ib3guYmVmb3JlKHB1YmxpY0tleSwgc2VjcmV0S2V5KTtcbiAgcmV0dXJuIG5hY2wuc2VjcmV0Ym94Lm9wZW4obXNnLCBub25jZSwgayk7XG59O1xuXG5uYWNsLmJveC5vcGVuLmFmdGVyID0gbmFjbC5zZWNyZXRib3gub3BlbjtcblxubmFjbC5ib3gua2V5UGFpciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGsgPSBuZXcgVWludDhBcnJheShjcnlwdG9fYm94X1BVQkxJQ0tFWUJZVEVTKTtcbiAgdmFyIHNrID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX2JveF9TRUNSRVRLRVlCWVRFUyk7XG4gIGNyeXB0b19ib3hfa2V5cGFpcihwaywgc2spO1xuICByZXR1cm4ge3B1YmxpY0tleTogcGssIHNlY3JldEtleTogc2t9O1xufTtcblxubmFjbC5ib3gua2V5UGFpci5mcm9tU2VjcmV0S2V5ID0gZnVuY3Rpb24oc2VjcmV0S2V5KSB7XG4gIGNoZWNrQXJyYXlUeXBlcyhzZWNyZXRLZXkpO1xuICBpZiAoc2VjcmV0S2V5Lmxlbmd0aCAhPT0gY3J5cHRvX2JveF9TRUNSRVRLRVlCWVRFUylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzZWNyZXQga2V5IHNpemUnKTtcbiAgdmFyIHBrID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX2JveF9QVUJMSUNLRVlCWVRFUyk7XG4gIGNyeXB0b19zY2FsYXJtdWx0X2Jhc2UocGssIHNlY3JldEtleSk7XG4gIHJldHVybiB7cHVibGljS2V5OiBwaywgc2VjcmV0S2V5OiBuZXcgVWludDhBcnJheShzZWNyZXRLZXkpfTtcbn07XG5cbm5hY2wuYm94LnB1YmxpY0tleUxlbmd0aCA9IGNyeXB0b19ib3hfUFVCTElDS0VZQllURVM7XG5uYWNsLmJveC5zZWNyZXRLZXlMZW5ndGggPSBjcnlwdG9fYm94X1NFQ1JFVEtFWUJZVEVTO1xubmFjbC5ib3guc2hhcmVkS2V5TGVuZ3RoID0gY3J5cHRvX2JveF9CRUZPUkVOTUJZVEVTO1xubmFjbC5ib3gubm9uY2VMZW5ndGggPSBjcnlwdG9fYm94X05PTkNFQllURVM7XG5uYWNsLmJveC5vdmVyaGVhZExlbmd0aCA9IG5hY2wuc2VjcmV0Ym94Lm92ZXJoZWFkTGVuZ3RoO1xuXG5uYWNsLnNpZ24gPSBmdW5jdGlvbihtc2csIHNlY3JldEtleSkge1xuICBjaGVja0FycmF5VHlwZXMobXNnLCBzZWNyZXRLZXkpO1xuICBpZiAoc2VjcmV0S2V5Lmxlbmd0aCAhPT0gY3J5cHRvX3NpZ25fU0VDUkVUS0VZQllURVMpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgc2VjcmV0IGtleSBzaXplJyk7XG4gIHZhciBzaWduZWRNc2cgPSBuZXcgVWludDhBcnJheShjcnlwdG9fc2lnbl9CWVRFUyttc2cubGVuZ3RoKTtcbiAgY3J5cHRvX3NpZ24oc2lnbmVkTXNnLCBtc2csIG1zZy5sZW5ndGgsIHNlY3JldEtleSk7XG4gIHJldHVybiBzaWduZWRNc2c7XG59O1xuXG5uYWNsLnNpZ24ub3BlbiA9IGZ1bmN0aW9uKHNpZ25lZE1zZywgcHVibGljS2V5KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKVxuICAgIHRocm93IG5ldyBFcnJvcignbmFjbC5zaWduLm9wZW4gYWNjZXB0cyAyIGFyZ3VtZW50czsgZGlkIHlvdSBtZWFuIHRvIHVzZSBuYWNsLnNpZ24uZGV0YWNoZWQudmVyaWZ5PycpO1xuICBjaGVja0FycmF5VHlwZXMoc2lnbmVkTXNnLCBwdWJsaWNLZXkpO1xuICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVMpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcHVibGljIGtleSBzaXplJyk7XG4gIHZhciB0bXAgPSBuZXcgVWludDhBcnJheShzaWduZWRNc2cubGVuZ3RoKTtcbiAgdmFyIG1sZW4gPSBjcnlwdG9fc2lnbl9vcGVuKHRtcCwgc2lnbmVkTXNnLCBzaWduZWRNc2cubGVuZ3RoLCBwdWJsaWNLZXkpO1xuICBpZiAobWxlbiA8IDApIHJldHVybiBudWxsO1xuICB2YXIgbSA9IG5ldyBVaW50OEFycmF5KG1sZW4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG0ubGVuZ3RoOyBpKyspIG1baV0gPSB0bXBbaV07XG4gIHJldHVybiBtO1xufTtcblxubmFjbC5zaWduLmRldGFjaGVkID0gZnVuY3Rpb24obXNnLCBzZWNyZXRLZXkpIHtcbiAgdmFyIHNpZ25lZE1zZyA9IG5hY2wuc2lnbihtc2csIHNlY3JldEtleSk7XG4gIHZhciBzaWcgPSBuZXcgVWludDhBcnJheShjcnlwdG9fc2lnbl9CWVRFUyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnLmxlbmd0aDsgaSsrKSBzaWdbaV0gPSBzaWduZWRNc2dbaV07XG4gIHJldHVybiBzaWc7XG59O1xuXG5uYWNsLnNpZ24uZGV0YWNoZWQudmVyaWZ5ID0gZnVuY3Rpb24obXNnLCBzaWcsIHB1YmxpY0tleSkge1xuICBjaGVja0FycmF5VHlwZXMobXNnLCBzaWcsIHB1YmxpY0tleSk7XG4gIGlmIChzaWcubGVuZ3RoICE9PSBjcnlwdG9fc2lnbl9CWVRFUylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzaWduYXR1cmUgc2l6ZScpO1xuICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVMpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcHVibGljIGtleSBzaXplJyk7XG4gIHZhciBzbSA9IG5ldyBVaW50OEFycmF5KGNyeXB0b19zaWduX0JZVEVTICsgbXNnLmxlbmd0aCk7XG4gIHZhciBtID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX3NpZ25fQllURVMgKyBtc2cubGVuZ3RoKTtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBjcnlwdG9fc2lnbl9CWVRFUzsgaSsrKSBzbVtpXSA9IHNpZ1tpXTtcbiAgZm9yIChpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykgc21baStjcnlwdG9fc2lnbl9CWVRFU10gPSBtc2dbaV07XG4gIHJldHVybiAoY3J5cHRvX3NpZ25fb3BlbihtLCBzbSwgc20ubGVuZ3RoLCBwdWJsaWNLZXkpID49IDApO1xufTtcblxubmFjbC5zaWduLmtleVBhaXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBrID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVMpO1xuICB2YXIgc2sgPSBuZXcgVWludDhBcnJheShjcnlwdG9fc2lnbl9TRUNSRVRLRVlCWVRFUyk7XG4gIGNyeXB0b19zaWduX2tleXBhaXIocGssIHNrKTtcbiAgcmV0dXJuIHtwdWJsaWNLZXk6IHBrLCBzZWNyZXRLZXk6IHNrfTtcbn07XG5cbm5hY2wuc2lnbi5rZXlQYWlyLmZyb21TZWNyZXRLZXkgPSBmdW5jdGlvbihzZWNyZXRLZXkpIHtcbiAgY2hlY2tBcnJheVR5cGVzKHNlY3JldEtleSk7XG4gIGlmIChzZWNyZXRLZXkubGVuZ3RoICE9PSBjcnlwdG9fc2lnbl9TRUNSRVRLRVlCWVRFUylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzZWNyZXQga2V5IHNpemUnKTtcbiAgdmFyIHBrID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVMpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBrLmxlbmd0aDsgaSsrKSBwa1tpXSA9IHNlY3JldEtleVszMitpXTtcbiAgcmV0dXJuIHtwdWJsaWNLZXk6IHBrLCBzZWNyZXRLZXk6IG5ldyBVaW50OEFycmF5KHNlY3JldEtleSl9O1xufTtcblxubmFjbC5zaWduLmtleVBhaXIuZnJvbVNlZWQgPSBmdW5jdGlvbihzZWVkKSB7XG4gIGNoZWNrQXJyYXlUeXBlcyhzZWVkKTtcbiAgaWYgKHNlZWQubGVuZ3RoICE9PSBjcnlwdG9fc2lnbl9TRUVEQllURVMpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgc2VlZCBzaXplJyk7XG4gIHZhciBwayA9IG5ldyBVaW50OEFycmF5KGNyeXB0b19zaWduX1BVQkxJQ0tFWUJZVEVTKTtcbiAgdmFyIHNrID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvX3NpZ25fU0VDUkVUS0VZQllURVMpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspIHNrW2ldID0gc2VlZFtpXTtcbiAgY3J5cHRvX3NpZ25fa2V5cGFpcihwaywgc2ssIHRydWUpO1xuICByZXR1cm4ge3B1YmxpY0tleTogcGssIHNlY3JldEtleTogc2t9O1xufTtcblxubmFjbC5zaWduLnB1YmxpY0tleUxlbmd0aCA9IGNyeXB0b19zaWduX1BVQkxJQ0tFWUJZVEVTO1xubmFjbC5zaWduLnNlY3JldEtleUxlbmd0aCA9IGNyeXB0b19zaWduX1NFQ1JFVEtFWUJZVEVTO1xubmFjbC5zaWduLnNlZWRMZW5ndGggPSBjcnlwdG9fc2lnbl9TRUVEQllURVM7XG5uYWNsLnNpZ24uc2lnbmF0dXJlTGVuZ3RoID0gY3J5cHRvX3NpZ25fQllURVM7XG5cbm5hY2wuaGFzaCA9IGZ1bmN0aW9uKG1zZykge1xuICBjaGVja0FycmF5VHlwZXMobXNnKTtcbiAgdmFyIGggPSBuZXcgVWludDhBcnJheShjcnlwdG9faGFzaF9CWVRFUyk7XG4gIGNyeXB0b19oYXNoKGgsIG1zZywgbXNnLmxlbmd0aCk7XG4gIHJldHVybiBoO1xufTtcblxubmFjbC5oYXNoLmhhc2hMZW5ndGggPSBjcnlwdG9faGFzaF9CWVRFUztcblxubmFjbC52ZXJpZnkgPSBmdW5jdGlvbih4LCB5KSB7XG4gIGNoZWNrQXJyYXlUeXBlcyh4LCB5KTtcbiAgLy8gWmVybyBsZW5ndGggYXJndW1lbnRzIGFyZSBjb25zaWRlcmVkIG5vdCBlcXVhbC5cbiAgaWYgKHgubGVuZ3RoID09PSAwIHx8IHkubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG4gIGlmICh4Lmxlbmd0aCAhPT0geS5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICh2bih4LCAwLCB5LCAwLCB4Lmxlbmd0aCkgPT09IDApID8gdHJ1ZSA6IGZhbHNlO1xufTtcblxubmFjbC5zZXRQUk5HID0gZnVuY3Rpb24oZm4pIHtcbiAgcmFuZG9tYnl0ZXMgPSBmbjtcbn07XG5cbihmdW5jdGlvbigpIHtcbiAgLy8gSW5pdGlhbGl6ZSBQUk5HIGlmIGVudmlyb25tZW50IHByb3ZpZGVzIENTUFJORy5cbiAgLy8gSWYgbm90LCBtZXRob2RzIGNhbGxpbmcgcmFuZG9tYnl0ZXMgd2lsbCB0aHJvdy5cbiAgdmFyIGNyeXB0byA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IChzZWxmLmNyeXB0byB8fCBzZWxmLm1zQ3J5cHRvKSA6IG51bGw7XG4gIGlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIEJyb3dzZXJzLlxuICAgIHZhciBRVU9UQSA9IDY1NTM2O1xuICAgIG5hY2wuc2V0UFJORyhmdW5jdGlvbih4LCBuKSB7XG4gICAgICB2YXIgaSwgdiA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkgKz0gUVVPVEEpIHtcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh2LnN1YmFycmF5KGksIGkgKyBNYXRoLm1pbihuIC0gaSwgUVVPVEEpKSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB4W2ldID0gdltpXTtcbiAgICAgIGNsZWFudXAodik7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gTm9kZS5qcy5cbiAgICBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICBpZiAoY3J5cHRvICYmIGNyeXB0by5yYW5kb21CeXRlcykge1xuICAgICAgbmFjbC5zZXRQUk5HKGZ1bmN0aW9uKHgsIG4pIHtcbiAgICAgICAgdmFyIGksIHYgPSBjcnlwdG8ucmFuZG9tQnl0ZXMobik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHhbaV0gPSB2W2ldO1xuICAgICAgICBjbGVhbnVwKHYpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpO1xuXG59KSh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cyA/IG1vZHVsZS5leHBvcnRzIDogKHNlbGYubmFjbCA9IHNlbGYubmFjbCB8fCB7fSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbm1vZHVsZS5leHBvcnRzID0gU1NIQnVmZmVyO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG5cbmZ1bmN0aW9uIFNTSEJ1ZmZlcihvcHRzKSB7XG5cdGFzc2VydC5vYmplY3Qob3B0cywgJ29wdGlvbnMnKTtcblx0aWYgKG9wdHMuYnVmZmVyICE9PSB1bmRlZmluZWQpXG5cdFx0YXNzZXJ0LmJ1ZmZlcihvcHRzLmJ1ZmZlciwgJ29wdGlvbnMuYnVmZmVyJyk7XG5cblx0dGhpcy5fc2l6ZSA9IG9wdHMuYnVmZmVyID8gb3B0cy5idWZmZXIubGVuZ3RoIDogMTAyNDtcblx0dGhpcy5fYnVmZmVyID0gb3B0cy5idWZmZXIgfHwgQnVmZmVyLmFsbG9jKHRoaXMuX3NpemUpO1xuXHR0aGlzLl9vZmZzZXQgPSAwO1xufVxuXG5TU0hCdWZmZXIucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gKHRoaXMuX2J1ZmZlci5zbGljZSgwLCB0aGlzLl9vZmZzZXQpKTtcbn07XG5cblNTSEJ1ZmZlci5wcm90b3R5cGUuYXRFbmQgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiAodGhpcy5fb2Zmc2V0ID49IHRoaXMuX2J1ZmZlci5sZW5ndGgpO1xufTtcblxuU1NIQnVmZmVyLnByb3RvdHlwZS5yZW1haW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiAodGhpcy5fYnVmZmVyLnNsaWNlKHRoaXMuX29mZnNldCkpO1xufTtcblxuU1NIQnVmZmVyLnByb3RvdHlwZS5za2lwID0gZnVuY3Rpb24gKG4pIHtcblx0dGhpcy5fb2Zmc2V0ICs9IG47XG59O1xuXG5TU0hCdWZmZXIucHJvdG90eXBlLmV4cGFuZCA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5fc2l6ZSAqPSAyO1xuXHR2YXIgYnVmID0gQnVmZmVyLmFsbG9jKHRoaXMuX3NpemUpO1xuXHR0aGlzLl9idWZmZXIuY29weShidWYsIDApO1xuXHR0aGlzLl9idWZmZXIgPSBidWY7XG59O1xuXG5TU0hCdWZmZXIucHJvdG90eXBlLnJlYWRQYXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gKHtkYXRhOiB0aGlzLnJlYWRCdWZmZXIoKX0pO1xufTtcblxuU1NIQnVmZmVyLnByb3RvdHlwZS5yZWFkQnVmZmVyID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgbGVuID0gdGhpcy5fYnVmZmVyLnJlYWRVSW50MzJCRSh0aGlzLl9vZmZzZXQpO1xuXHR0aGlzLl9vZmZzZXQgKz0gNDtcblx0YXNzZXJ0Lm9rKHRoaXMuX29mZnNldCArIGxlbiA8PSB0aGlzLl9idWZmZXIubGVuZ3RoLFxuXHQgICAgJ2xlbmd0aCBvdXQgb2YgYm91bmRzIGF0ICsweCcgKyB0aGlzLl9vZmZzZXQudG9TdHJpbmcoMTYpICtcblx0ICAgICcgKGRhdGEgdHJ1bmNhdGVkPyknKTtcblx0dmFyIGJ1ZiA9IHRoaXMuX2J1ZmZlci5zbGljZSh0aGlzLl9vZmZzZXQsIHRoaXMuX29mZnNldCArIGxlbik7XG5cdHRoaXMuX29mZnNldCArPSBsZW47XG5cdHJldHVybiAoYnVmKTtcbn07XG5cblNTSEJ1ZmZlci5wcm90b3R5cGUucmVhZFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuICh0aGlzLnJlYWRCdWZmZXIoKS50b1N0cmluZygpKTtcbn07XG5cblNTSEJ1ZmZlci5wcm90b3R5cGUucmVhZENTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQ7XG5cdHdoaWxlIChvZmZzZXQgPCB0aGlzLl9idWZmZXIubGVuZ3RoICYmXG5cdCAgICB0aGlzLl9idWZmZXJbb2Zmc2V0XSAhPT0gMHgwMClcblx0XHRvZmZzZXQrKztcblx0YXNzZXJ0Lm9rKG9mZnNldCA8IHRoaXMuX2J1ZmZlci5sZW5ndGgsICdjIHN0cmluZyBkb2VzIG5vdCB0ZXJtaW5hdGUnKTtcblx0dmFyIHN0ciA9IHRoaXMuX2J1ZmZlci5zbGljZSh0aGlzLl9vZmZzZXQsIG9mZnNldCkudG9TdHJpbmcoKTtcblx0dGhpcy5fb2Zmc2V0ID0gb2Zmc2V0ICsgMTtcblx0cmV0dXJuIChzdHIpO1xufTtcblxuU1NIQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50ID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgdiA9IHRoaXMuX2J1ZmZlci5yZWFkVUludDMyQkUodGhpcy5fb2Zmc2V0KTtcblx0dGhpcy5fb2Zmc2V0ICs9IDQ7XG5cdHJldHVybiAodik7XG59O1xuXG5TU0hCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ2NCA9IGZ1bmN0aW9uICgpIHtcblx0YXNzZXJ0Lm9rKHRoaXMuX29mZnNldCArIDggPCB0aGlzLl9idWZmZXIubGVuZ3RoLFxuXHQgICAgJ2J1ZmZlciBub3QgbG9uZyBlbm91Z2ggdG8gcmVhZCBJbnQ2NCcpO1xuXHR2YXIgdiA9IHRoaXMuX2J1ZmZlci5zbGljZSh0aGlzLl9vZmZzZXQsIHRoaXMuX29mZnNldCArIDgpO1xuXHR0aGlzLl9vZmZzZXQgKz0gODtcblx0cmV0dXJuICh2KTtcbn07XG5cblNTSEJ1ZmZlci5wcm90b3R5cGUucmVhZENoYXIgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciB2ID0gdGhpcy5fYnVmZmVyW3RoaXMuX29mZnNldCsrXTtcblx0cmV0dXJuICh2KTtcbn07XG5cblNTSEJ1ZmZlci5wcm90b3R5cGUud3JpdGVCdWZmZXIgPSBmdW5jdGlvbiAoYnVmKSB7XG5cdHdoaWxlICh0aGlzLl9vZmZzZXQgKyA0ICsgYnVmLmxlbmd0aCA+IHRoaXMuX3NpemUpXG5cdFx0dGhpcy5leHBhbmQoKTtcblx0dGhpcy5fYnVmZmVyLndyaXRlVUludDMyQkUoYnVmLmxlbmd0aCwgdGhpcy5fb2Zmc2V0KTtcblx0dGhpcy5fb2Zmc2V0ICs9IDQ7XG5cdGJ1Zi5jb3B5KHRoaXMuX2J1ZmZlciwgdGhpcy5fb2Zmc2V0KTtcblx0dGhpcy5fb2Zmc2V0ICs9IGJ1Zi5sZW5ndGg7XG59O1xuXG5TU0hCdWZmZXIucHJvdG90eXBlLndyaXRlU3RyaW5nID0gZnVuY3Rpb24gKHN0cikge1xuXHR0aGlzLndyaXRlQnVmZmVyKEJ1ZmZlci5mcm9tKHN0ciwgJ3V0ZjgnKSk7XG59O1xuXG5TU0hCdWZmZXIucHJvdG90eXBlLndyaXRlQ1N0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0d2hpbGUgKHRoaXMuX29mZnNldCArIDEgKyBzdHIubGVuZ3RoID4gdGhpcy5fc2l6ZSlcblx0XHR0aGlzLmV4cGFuZCgpO1xuXHR0aGlzLl9idWZmZXIud3JpdGUoc3RyLCB0aGlzLl9vZmZzZXQpO1xuXHR0aGlzLl9vZmZzZXQgKz0gc3RyLmxlbmd0aDtcblx0dGhpcy5fYnVmZmVyW3RoaXMuX29mZnNldCsrXSA9IDA7XG59O1xuXG5TU0hCdWZmZXIucHJvdG90eXBlLndyaXRlSW50ID0gZnVuY3Rpb24gKHYpIHtcblx0d2hpbGUgKHRoaXMuX29mZnNldCArIDQgPiB0aGlzLl9zaXplKVxuXHRcdHRoaXMuZXhwYW5kKCk7XG5cdHRoaXMuX2J1ZmZlci53cml0ZVVJbnQzMkJFKHYsIHRoaXMuX29mZnNldCk7XG5cdHRoaXMuX29mZnNldCArPSA0O1xufTtcblxuU1NIQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDY0ID0gZnVuY3Rpb24gKHYpIHtcblx0YXNzZXJ0LmJ1ZmZlcih2LCAndmFsdWUnKTtcblx0aWYgKHYubGVuZ3RoID4gOCkge1xuXHRcdHZhciBsZWFkID0gdi5zbGljZSgwLCB2Lmxlbmd0aCAtIDgpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVhZC5sZW5ndGg7ICsraSkge1xuXHRcdFx0YXNzZXJ0LnN0cmljdEVxdWFsKGxlYWRbaV0sIDAsXG5cdFx0XHQgICAgJ211c3QgZml0IGluIDY0IGJpdHMgb2YgcHJlY2lzaW9uJyk7XG5cdFx0fVxuXHRcdHYgPSB2LnNsaWNlKHYubGVuZ3RoIC0gOCwgdi5sZW5ndGgpO1xuXHR9XG5cdHdoaWxlICh0aGlzLl9vZmZzZXQgKyA4ID4gdGhpcy5fc2l6ZSlcblx0XHR0aGlzLmV4cGFuZCgpO1xuXHR2LmNvcHkodGhpcy5fYnVmZmVyLCB0aGlzLl9vZmZzZXQpO1xuXHR0aGlzLl9vZmZzZXQgKz0gODtcbn07XG5cblNTSEJ1ZmZlci5wcm90b3R5cGUud3JpdGVDaGFyID0gZnVuY3Rpb24gKHYpIHtcblx0d2hpbGUgKHRoaXMuX29mZnNldCArIDEgPiB0aGlzLl9zaXplKVxuXHRcdHRoaXMuZXhwYW5kKCk7XG5cdHRoaXMuX2J1ZmZlclt0aGlzLl9vZmZzZXQrK10gPSB2O1xufTtcblxuU1NIQnVmZmVyLnByb3RvdHlwZS53cml0ZVBhcnQgPSBmdW5jdGlvbiAocCkge1xuXHR0aGlzLndyaXRlQnVmZmVyKHAuZGF0YSk7XG59O1xuXG5TU0hCdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuXHR3aGlsZSAodGhpcy5fb2Zmc2V0ICsgYnVmLmxlbmd0aCA+IHRoaXMuX3NpemUpXG5cdFx0dGhpcy5leHBhbmQoKTtcblx0YnVmLmNvcHkodGhpcy5fYnVmZmVyLCB0aGlzLl9vZmZzZXQpO1xuXHR0aGlzLl9vZmZzZXQgKz0gYnVmLmxlbmd0aDtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAxOCBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHJlYWQ6IHJlYWQsXG5cdHJlYWRQa2NzODogcmVhZFBrY3M4LFxuXHR3cml0ZTogd3JpdGUsXG5cdHdyaXRlUGtjczg6IHdyaXRlUGtjczgsXG5cdHBrY3M4VG9CdWZmZXI6IHBrY3M4VG9CdWZmZXIsXG5cblx0cmVhZEVDRFNBQ3VydmU6IHJlYWRFQ0RTQUN1cnZlLFxuXHR3cml0ZUVDRFNBQ3VydmU6IHdyaXRlRUNEU0FDdXJ2ZVxufTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjEnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4uL2FsZ3MnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgS2V5ID0gcmVxdWlyZSgnLi4va2V5Jyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4uL3ByaXZhdGUta2V5Jyk7XG52YXIgcGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcblxuZnVuY3Rpb24gcmVhZChidWYsIG9wdGlvbnMpIHtcblx0cmV0dXJuIChwZW0ucmVhZChidWYsIG9wdGlvbnMsICdwa2NzOCcpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGUoa2V5LCBvcHRpb25zKSB7XG5cdHJldHVybiAocGVtLndyaXRlKGtleSwgb3B0aW9ucywgJ3BrY3M4JykpO1xufVxuXG4vKiBIZWxwZXIgdG8gcmVhZCBpbiBhIHNpbmdsZSBtcGludCAqL1xuZnVuY3Rpb24gcmVhZE1QSW50KGRlciwgbm0pIHtcblx0YXNzZXJ0LnN0cmljdEVxdWFsKGRlci5wZWVrKCksIGFzbjEuQmVyLkludGVnZXIsXG5cdCAgICBubSArICcgaXMgbm90IGFuIEludGVnZXInKTtcblx0cmV0dXJuICh1dGlscy5tcE5vcm1hbGl6ZShkZXIucmVhZFN0cmluZyhhc24xLkJlci5JbnRlZ2VyLCB0cnVlKSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczgoYWxnLCB0eXBlLCBkZXIpIHtcblx0LyogUHJpdmF0ZSBrZXlzIGluIHBrY3MjOCBmb3JtYXQgaGF2ZSBhIHdlaXJkIGV4dHJhIGludCAqL1xuXHRpZiAoZGVyLnBlZWsoKSA9PT0gYXNuMS5CZXIuSW50ZWdlcikge1xuXHRcdGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlLCAncHJpdmF0ZScsXG5cdFx0ICAgICd1bmV4cGVjdGVkIEludGVnZXIgYXQgc3RhcnQgb2YgcHVibGljIGtleScpO1xuXHRcdGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkludGVnZXIsIHRydWUpO1xuXHR9XG5cblx0ZGVyLnJlYWRTZXF1ZW5jZSgpO1xuXHR2YXIgbmV4dCA9IGRlci5vZmZzZXQgKyBkZXIubGVuZ3RoO1xuXG5cdHZhciBvaWQgPSBkZXIucmVhZE9JRCgpO1xuXHRzd2l0Y2ggKG9pZCkge1xuXHRjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG5cdFx0ZGVyLl9vZmZzZXQgPSBuZXh0O1xuXHRcdGlmICh0eXBlID09PSAncHVibGljJylcblx0XHRcdHJldHVybiAocmVhZFBrY3M4UlNBUHVibGljKGRlcikpO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiAocmVhZFBrY3M4UlNBUHJpdmF0ZShkZXIpKTtcblx0Y2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuXHRcdGlmICh0eXBlID09PSAncHVibGljJylcblx0XHRcdHJldHVybiAocmVhZFBrY3M4RFNBUHVibGljKGRlcikpO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiAocmVhZFBrY3M4RFNBUHJpdmF0ZShkZXIpKTtcblx0Y2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuXHRcdGlmICh0eXBlID09PSAncHVibGljJylcblx0XHRcdHJldHVybiAocmVhZFBrY3M4RUNEU0FQdWJsaWMoZGVyKSk7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIChyZWFkUGtjczhFQ0RTQVByaXZhdGUoZGVyKSk7XG5cdGNhc2UgJzEuMy4xMDEuMTEyJzpcblx0XHRpZiAodHlwZSA9PT0gJ3B1YmxpYycpIHtcblx0XHRcdHJldHVybiAocmVhZFBrY3M4RWREU0FQdWJsaWMoZGVyKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAocmVhZFBrY3M4RWREU0FQcml2YXRlKGRlcikpO1xuXHRcdH1cblx0Y2FzZSAnMS4zLjEwMS4xMTAnOlxuXHRcdGlmICh0eXBlID09PSAncHVibGljJykge1xuXHRcdFx0cmV0dXJuIChyZWFkUGtjczhYMjU1MTlQdWJsaWMoZGVyKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAocmVhZFBrY3M4WDI1NTE5UHJpdmF0ZShkZXIpKTtcblx0XHR9XG5cdGRlZmF1bHQ6XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBrZXkgdHlwZSBPSUQgJyArIG9pZCkpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOFJTQVB1YmxpYyhkZXIpIHtcblx0Ly8gYml0IHN0cmluZyBzZXF1ZW5jZVxuXHRkZXIucmVhZFNlcXVlbmNlKGFzbjEuQmVyLkJpdFN0cmluZyk7XG5cdGRlci5yZWFkQnl0ZSgpO1xuXHRkZXIucmVhZFNlcXVlbmNlKCk7XG5cblx0Ly8gbW9kdWx1c1xuXHR2YXIgbiA9IHJlYWRNUEludChkZXIsICdtb2R1bHVzJyk7XG5cdHZhciBlID0gcmVhZE1QSW50KGRlciwgJ2V4cG9uZW50Jyk7XG5cblx0Ly8gbm93LCBtYWtlIHRoZSBrZXlcblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAncnNhJyxcblx0XHRzb3VyY2U6IGRlci5vcmlnaW5hbElucHV0LFxuXHRcdHBhcnRzOiBbXG5cdFx0XHR7IG5hbWU6ICdlJywgZGF0YTogZSB9LFxuXHRcdFx0eyBuYW1lOiAnbicsIGRhdGE6IG4gfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOFJTQVByaXZhdGUoZGVyKSB7XG5cdGRlci5yZWFkU2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHRkZXIucmVhZFNlcXVlbmNlKCk7XG5cblx0dmFyIHZlciA9IHJlYWRNUEludChkZXIsICd2ZXJzaW9uJyk7XG5cdGFzc2VydC5lcXVhbCh2ZXJbMF0sIDB4MCwgJ3Vua25vd24gUlNBIHByaXZhdGUga2V5IHZlcnNpb24nKTtcblxuXHQvLyBtb2R1bHVzIHRoZW4gcHVibGljIGV4cG9uZW50XG5cdHZhciBuID0gcmVhZE1QSW50KGRlciwgJ21vZHVsdXMnKTtcblx0dmFyIGUgPSByZWFkTVBJbnQoZGVyLCAncHVibGljIGV4cG9uZW50Jyk7XG5cdHZhciBkID0gcmVhZE1QSW50KGRlciwgJ3ByaXZhdGUgZXhwb25lbnQnKTtcblx0dmFyIHAgPSByZWFkTVBJbnQoZGVyLCAncHJpbWUxJyk7XG5cdHZhciBxID0gcmVhZE1QSW50KGRlciwgJ3ByaW1lMicpO1xuXHR2YXIgZG1vZHAgPSByZWFkTVBJbnQoZGVyLCAnZXhwb25lbnQxJyk7XG5cdHZhciBkbW9kcSA9IHJlYWRNUEludChkZXIsICdleHBvbmVudDInKTtcblx0dmFyIGlxbXAgPSByZWFkTVBJbnQoZGVyLCAnaXFtcCcpO1xuXG5cdC8vIG5vdywgbWFrZSB0aGUga2V5XG5cdHZhciBrZXkgPSB7XG5cdFx0dHlwZTogJ3JzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ24nLCBkYXRhOiBuIH0sXG5cdFx0XHR7IG5hbWU6ICdlJywgZGF0YTogZSB9LFxuXHRcdFx0eyBuYW1lOiAnZCcsIGRhdGE6IGQgfSxcblx0XHRcdHsgbmFtZTogJ2lxbXAnLCBkYXRhOiBpcW1wIH0sXG5cdFx0XHR7IG5hbWU6ICdwJywgZGF0YTogcCB9LFxuXHRcdFx0eyBuYW1lOiAncScsIGRhdGE6IHEgfSxcblx0XHRcdHsgbmFtZTogJ2Rtb2RwJywgZGF0YTogZG1vZHAgfSxcblx0XHRcdHsgbmFtZTogJ2Rtb2RxJywgZGF0YTogZG1vZHEgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBQcml2YXRlS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczhEU0FQdWJsaWMoZGVyKSB7XG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblxuXHR2YXIgcCA9IHJlYWRNUEludChkZXIsICdwJyk7XG5cdHZhciBxID0gcmVhZE1QSW50KGRlciwgJ3EnKTtcblx0dmFyIGcgPSByZWFkTVBJbnQoZGVyLCAnZycpO1xuXG5cdC8vIGJpdCBzdHJpbmcgc2VxdWVuY2Vcblx0ZGVyLnJlYWRTZXF1ZW5jZShhc24xLkJlci5CaXRTdHJpbmcpO1xuXHRkZXIucmVhZEJ5dGUoKTtcblxuXHR2YXIgeSA9IHJlYWRNUEludChkZXIsICd5Jyk7XG5cblx0Ly8gbm93LCBtYWtlIHRoZSBrZXlcblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAnZHNhJyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBuYW1lOiAncCcsIGRhdGE6IHAgfSxcblx0XHRcdHsgbmFtZTogJ3EnLCBkYXRhOiBxIH0sXG5cdFx0XHR7IG5hbWU6ICdnJywgZGF0YTogZyB9LFxuXHRcdFx0eyBuYW1lOiAneScsIGRhdGE6IHkgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOERTQVByaXZhdGUoZGVyKSB7XG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblxuXHR2YXIgcCA9IHJlYWRNUEludChkZXIsICdwJyk7XG5cdHZhciBxID0gcmVhZE1QSW50KGRlciwgJ3EnKTtcblx0dmFyIGcgPSByZWFkTVBJbnQoZGVyLCAnZycpO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHR2YXIgeCA9IHJlYWRNUEludChkZXIsICd4Jyk7XG5cblx0LyogVGhlIHBrY3MjOCBmb3JtYXQgZG9lcyBub3QgaW5jbHVkZSB0aGUgcHVibGljIGtleSAqL1xuXHR2YXIgeSA9IHV0aWxzLmNhbGN1bGF0ZURTQVB1YmxpYyhnLCBwLCB4KTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdkc2EnLFxuXHRcdHBhcnRzOiBbXG5cdFx0XHR7IG5hbWU6ICdwJywgZGF0YTogcCB9LFxuXHRcdFx0eyBuYW1lOiAncScsIGRhdGE6IHEgfSxcblx0XHRcdHsgbmFtZTogJ2cnLCBkYXRhOiBnIH0sXG5cdFx0XHR7IG5hbWU6ICd5JywgZGF0YTogeSB9LFxuXHRcdFx0eyBuYW1lOiAneCcsIGRhdGE6IHggfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBQcml2YXRlS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkRUNEU0FDdXJ2ZShkZXIpIHtcblx0dmFyIGN1cnZlTmFtZSwgY3VydmVOYW1lcztcblx0dmFyIGosIGMsIGNkO1xuXG5cdGlmIChkZXIucGVlaygpID09PSBhc24xLkJlci5PSUQpIHtcblx0XHR2YXIgb2lkID0gZGVyLnJlYWRPSUQoKTtcblxuXHRcdGN1cnZlTmFtZXMgPSBPYmplY3Qua2V5cyhhbGdzLmN1cnZlcyk7XG5cdFx0Zm9yIChqID0gMDsgaiA8IGN1cnZlTmFtZXMubGVuZ3RoOyArK2opIHtcblx0XHRcdGMgPSBjdXJ2ZU5hbWVzW2pdO1xuXHRcdFx0Y2QgPSBhbGdzLmN1cnZlc1tjXTtcblx0XHRcdGlmIChjZC5wa2NzOG9pZCA9PT0gb2lkKSB7XG5cdFx0XHRcdGN1cnZlTmFtZSA9IGM7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIEVDUGFyYW1ldGVycyBzZXF1ZW5jZVxuXHRcdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0XHR2YXIgdmVyc2lvbiA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkludGVnZXIsIHRydWUpO1xuXHRcdGFzc2VydC5zdHJpY3RFcXVhbCh2ZXJzaW9uWzBdLCAxLCAnRUNEU0Ega2V5IG5vdCB2ZXJzaW9uIDEnKTtcblxuXHRcdHZhciBjdXJ2ZSA9IHt9O1xuXG5cdFx0Ly8gRmllbGRJRCBzZXF1ZW5jZVxuXHRcdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0XHR2YXIgZmllbGRUeXBlT2lkID0gZGVyLnJlYWRPSUQoKTtcblx0XHRhc3NlcnQuc3RyaWN0RXF1YWwoZmllbGRUeXBlT2lkLCAnMS4yLjg0MC4xMDA0NS4xLjEnLFxuXHRcdCAgICAnRUNEU0Ega2V5IGlzIG5vdCBmcm9tIGEgcHJpbWUtZmllbGQnKTtcblx0XHR2YXIgcCA9IGN1cnZlLnAgPSB1dGlscy5tcE5vcm1hbGl6ZShcblx0XHQgICAgZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuSW50ZWdlciwgdHJ1ZSkpO1xuXHRcdC8qXG5cdFx0ICogcCBhbHdheXMgc3RhcnRzIHdpdGggYSAxIGJpdCwgc28gY291bnQgdGhlIHplcm9zIHRvIGdldCBpdHNcblx0XHQgKiByZWFsIHNpemUuXG5cdFx0ICovXG5cdFx0Y3VydmUuc2l6ZSA9IHAubGVuZ3RoICogOCAtIHV0aWxzLmNvdW50WmVyb3MocCk7XG5cblx0XHQvLyBDdXJ2ZSBzZXF1ZW5jZVxuXHRcdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0XHRjdXJ2ZS5hID0gdXRpbHMubXBOb3JtYWxpemUoXG5cdFx0ICAgIGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLk9jdGV0U3RyaW5nLCB0cnVlKSk7XG5cdFx0Y3VydmUuYiA9IHV0aWxzLm1wTm9ybWFsaXplKFxuXHRcdCAgICBkZXIucmVhZFN0cmluZyhhc24xLkJlci5PY3RldFN0cmluZywgdHJ1ZSkpO1xuXHRcdGlmIChkZXIucGVlaygpID09PSBhc24xLkJlci5CaXRTdHJpbmcpXG5cdFx0XHRjdXJ2ZS5zID0gZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuQml0U3RyaW5nLCB0cnVlKTtcblxuXHRcdC8vIENvbWJpbmVkIEd4IGFuZCBHeVxuXHRcdGN1cnZlLkcgPSBkZXIucmVhZFN0cmluZyhhc24xLkJlci5PY3RldFN0cmluZywgdHJ1ZSk7XG5cdFx0YXNzZXJ0LnN0cmljdEVxdWFsKGN1cnZlLkdbMF0sIDB4NCxcblx0XHQgICAgJ3VuY29tcHJlc3NlZCBHIGlzIHJlcXVpcmVkJyk7XG5cblx0XHRjdXJ2ZS5uID0gdXRpbHMubXBOb3JtYWxpemUoXG5cdFx0ICAgIGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkludGVnZXIsIHRydWUpKTtcblx0XHRjdXJ2ZS5oID0gdXRpbHMubXBOb3JtYWxpemUoXG5cdFx0ICAgIGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkludGVnZXIsIHRydWUpKTtcblx0XHRhc3NlcnQuc3RyaWN0RXF1YWwoY3VydmUuaFswXSwgMHgxLCAnYSBjb2ZhY3Rvcj0xIGN1cnZlIGlzICcgK1xuXHRcdCAgICAncmVxdWlyZWQnKTtcblxuXHRcdGN1cnZlTmFtZXMgPSBPYmplY3Qua2V5cyhhbGdzLmN1cnZlcyk7XG5cdFx0dmFyIGtzID0gT2JqZWN0LmtleXMoY3VydmUpO1xuXHRcdGZvciAoaiA9IDA7IGogPCBjdXJ2ZU5hbWVzLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRjID0gY3VydmVOYW1lc1tqXTtcblx0XHRcdGNkID0gYWxncy5jdXJ2ZXNbY107XG5cdFx0XHR2YXIgZXF1YWwgPSB0cnVlO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR2YXIgayA9IGtzW2ldO1xuXHRcdFx0XHRpZiAoY2Rba10gPT09IHVuZGVmaW5lZClcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0aWYgKHR5cGVvZiAoY2Rba10pID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0XHQgICAgY2Rba10uZXF1YWxzICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRpZiAoIWNkW2tdLmVxdWFscyhjdXJ2ZVtrXSkpIHtcblx0XHRcdFx0XHRcdGVxdWFsID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGNkW2tdKSkge1xuXHRcdFx0XHRcdGlmIChjZFtrXS50b1N0cmluZygnYmluYXJ5Jylcblx0XHRcdFx0XHQgICAgIT09IGN1cnZlW2tdLnRvU3RyaW5nKCdiaW5hcnknKSkge1xuXHRcdFx0XHRcdFx0ZXF1YWwgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAoY2Rba10gIT09IGN1cnZlW2tdKSB7XG5cdFx0XHRcdFx0XHRlcXVhbCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZXF1YWwpIHtcblx0XHRcdFx0Y3VydmVOYW1lID0gYztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiAoY3VydmVOYW1lKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3M4RUNEU0FQcml2YXRlKGRlcikge1xuXHR2YXIgY3VydmVOYW1lID0gcmVhZEVDRFNBQ3VydmUoZGVyKTtcblx0YXNzZXJ0LnN0cmluZyhjdXJ2ZU5hbWUsICdhIGtub3duIGVsbGlwdGljIGN1cnZlJyk7XG5cblx0ZGVyLnJlYWRTZXF1ZW5jZShhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblxuXHR2YXIgdmVyc2lvbiA9IHJlYWRNUEludChkZXIsICd2ZXJzaW9uJyk7XG5cdGFzc2VydC5lcXVhbCh2ZXJzaW9uWzBdLCAxLCAndW5rbm93biB2ZXJzaW9uIG9mIEVDRFNBIGtleScpO1xuXG5cdHZhciBkID0gZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuT2N0ZXRTdHJpbmcsIHRydWUpO1xuXHR2YXIgUTtcblxuXHRpZiAoZGVyLnBlZWsoKSA9PSAweGEwKSB7XG5cdFx0ZGVyLnJlYWRTZXF1ZW5jZSgweGEwKTtcblx0XHRkZXIuX29mZnNldCArPSBkZXIubGVuZ3RoO1xuXHR9XG5cdGlmIChkZXIucGVlaygpID09IDB4YTEpIHtcblx0XHRkZXIucmVhZFNlcXVlbmNlKDB4YTEpO1xuXHRcdFEgPSBkZXIucmVhZFN0cmluZyhhc24xLkJlci5CaXRTdHJpbmcsIHRydWUpO1xuXHRcdFEgPSB1dGlscy5lY05vcm1hbGl6ZShRKTtcblx0fVxuXG5cdGlmIChRID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgcHViID0gdXRpbHMucHVibGljRnJvbVByaXZhdGVFQ0RTQShjdXJ2ZU5hbWUsIGQpO1xuXHRcdFEgPSBwdWIucGFydC5RLmRhdGE7XG5cdH1cblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdlY2RzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ2N1cnZlJywgZGF0YTogQnVmZmVyLmZyb20oY3VydmVOYW1lKSB9LFxuXHRcdFx0eyBuYW1lOiAnUScsIGRhdGE6IFEgfSxcblx0XHRcdHsgbmFtZTogJ2QnLCBkYXRhOiBkIH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgUHJpdmF0ZUtleShrZXkpKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3M4RUNEU0FQdWJsaWMoZGVyKSB7XG5cdHZhciBjdXJ2ZU5hbWUgPSByZWFkRUNEU0FDdXJ2ZShkZXIpO1xuXHRhc3NlcnQuc3RyaW5nKGN1cnZlTmFtZSwgJ2Ega25vd24gZWxsaXB0aWMgY3VydmUnKTtcblxuXHR2YXIgUSA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkJpdFN0cmluZywgdHJ1ZSk7XG5cdFEgPSB1dGlscy5lY05vcm1hbGl6ZShRKTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdlY2RzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ2N1cnZlJywgZGF0YTogQnVmZmVyLmZyb20oY3VydmVOYW1lKSB9LFxuXHRcdFx0eyBuYW1lOiAnUScsIGRhdGE6IFEgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOEVkRFNBUHVibGljKGRlcikge1xuXHRpZiAoZGVyLnBlZWsoKSA9PT0gMHgwMClcblx0XHRkZXIucmVhZEJ5dGUoKTtcblxuXHR2YXIgQSA9IHV0aWxzLnJlYWRCaXRTdHJpbmcoZGVyKTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdlZDI1NTE5Jyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBuYW1lOiAnQScsIGRhdGE6IHV0aWxzLnplcm9QYWRUb0xlbmd0aChBLCAzMikgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOFgyNTUxOVB1YmxpYyhkZXIpIHtcblx0dmFyIEEgPSB1dGlscy5yZWFkQml0U3RyaW5nKGRlcik7XG5cblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAnY3VydmUyNTUxOScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ0EnLCBkYXRhOiB1dGlscy56ZXJvUGFkVG9MZW5ndGgoQSwgMzIpIH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczhFZERTQVByaXZhdGUoZGVyKSB7XG5cdGlmIChkZXIucGVlaygpID09PSAweDAwKVxuXHRcdGRlci5yZWFkQnl0ZSgpO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHR2YXIgayA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLk9jdGV0U3RyaW5nLCB0cnVlKTtcblx0ayA9IHV0aWxzLnplcm9QYWRUb0xlbmd0aChrLCAzMik7XG5cblx0dmFyIEE7XG5cdGlmIChkZXIucGVlaygpID09PSBhc24xLkJlci5CaXRTdHJpbmcpIHtcblx0XHRBID0gdXRpbHMucmVhZEJpdFN0cmluZyhkZXIpO1xuXHRcdEEgPSB1dGlscy56ZXJvUGFkVG9MZW5ndGgoQSwgMzIpO1xuXHR9IGVsc2Uge1xuXHRcdEEgPSB1dGlscy5jYWxjdWxhdGVFRDI1NTE5UHVibGljKGspO1xuXHR9XG5cblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAnZWQyNTUxOScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ0EnLCBkYXRhOiB1dGlscy56ZXJvUGFkVG9MZW5ndGgoQSwgMzIpIH0sXG5cdFx0XHR7IG5hbWU6ICdrJywgZGF0YTogdXRpbHMuemVyb1BhZFRvTGVuZ3RoKGssIDMyKSB9XG5cdFx0XVxuXHR9O1xuXG5cdHJldHVybiAobmV3IFByaXZhdGVLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOFgyNTUxOVByaXZhdGUoZGVyKSB7XG5cdGlmIChkZXIucGVlaygpID09PSAweDAwKVxuXHRcdGRlci5yZWFkQnl0ZSgpO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHR2YXIgayA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLk9jdGV0U3RyaW5nLCB0cnVlKTtcblx0ayA9IHV0aWxzLnplcm9QYWRUb0xlbmd0aChrLCAzMik7XG5cblx0dmFyIEEgPSB1dGlscy5jYWxjdWxhdGVYMjU1MTlQdWJsaWMoayk7XG5cblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAnY3VydmUyNTUxOScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ0EnLCBkYXRhOiB1dGlscy56ZXJvUGFkVG9MZW5ndGgoQSwgMzIpIH0sXG5cdFx0XHR7IG5hbWU6ICdrJywgZGF0YTogdXRpbHMuemVyb1BhZFRvTGVuZ3RoKGssIDMyKSB9XG5cdFx0XVxuXHR9O1xuXG5cdHJldHVybiAobmV3IFByaXZhdGVLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHBrY3M4VG9CdWZmZXIoa2V5KSB7XG5cdHZhciBkZXIgPSBuZXcgYXNuMS5CZXJXcml0ZXIoKTtcblx0d3JpdGVQa2NzOChkZXIsIGtleSk7XG5cdHJldHVybiAoZGVyLmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczgoZGVyLCBrZXkpIHtcblx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblxuXHRpZiAoUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5KSkge1xuXHRcdHZhciBzaWxseUludCA9IEJ1ZmZlci5mcm9tKFswXSk7XG5cdFx0ZGVyLndyaXRlQnVmZmVyKHNpbGx5SW50LCBhc24xLkJlci5JbnRlZ2VyKTtcblx0fVxuXG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdHN3aXRjaCAoa2V5LnR5cGUpIHtcblx0Y2FzZSAncnNhJzpcblx0XHRkZXIud3JpdGVPSUQoJzEuMi44NDAuMTEzNTQ5LjEuMS4xJyk7XG5cdFx0aWYgKFByaXZhdGVLZXkuaXNQcml2YXRlS2V5KGtleSkpXG5cdFx0XHR3cml0ZVBrY3M4UlNBUHJpdmF0ZShrZXksIGRlcik7XG5cdFx0ZWxzZVxuXHRcdFx0d3JpdGVQa2NzOFJTQVB1YmxpYyhrZXksIGRlcik7XG5cdFx0YnJlYWs7XG5cdGNhc2UgJ2RzYSc6XG5cdFx0ZGVyLndyaXRlT0lEKCcxLjIuODQwLjEwMDQwLjQuMScpO1xuXHRcdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdFx0d3JpdGVQa2NzOERTQVByaXZhdGUoa2V5LCBkZXIpO1xuXHRcdGVsc2Vcblx0XHRcdHdyaXRlUGtjczhEU0FQdWJsaWMoa2V5LCBkZXIpO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdlY2RzYSc6XG5cdFx0ZGVyLndyaXRlT0lEKCcxLjIuODQwLjEwMDQ1LjIuMScpO1xuXHRcdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdFx0d3JpdGVQa2NzOEVDRFNBUHJpdmF0ZShrZXksIGRlcik7XG5cdFx0ZWxzZVxuXHRcdFx0d3JpdGVQa2NzOEVDRFNBUHVibGljKGtleSwgZGVyKTtcblx0XHRicmVhaztcblx0Y2FzZSAnZWQyNTUxOSc6XG5cdFx0ZGVyLndyaXRlT0lEKCcxLjMuMTAxLjExMicpO1xuXHRcdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcignRWQyNTUxOSBwcml2YXRlIGtleXMgaW4gcGtjczggJyArXG5cdFx0XHQgICAgJ2Zvcm1hdCBhcmUgbm90IHN1cHBvcnRlZCcpKTtcblx0XHR3cml0ZVBrY3M4RWREU0FQdWJsaWMoa2V5LCBkZXIpO1xuXHRcdGJyZWFrO1xuXHRkZWZhdWx0OlxuXHRcdHRocm93IChuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGtleSB0eXBlOiAnICsga2V5LnR5cGUpKTtcblx0fVxuXG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3M4UlNBUHJpdmF0ZShrZXksIGRlcikge1xuXHRkZXIud3JpdGVOdWxsKCk7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKGFzbjEuQmVyLk9jdGV0U3RyaW5nKTtcblx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblxuXHR2YXIgdmVyc2lvbiA9IEJ1ZmZlci5mcm9tKFswXSk7XG5cdGRlci53cml0ZUJ1ZmZlcih2ZXJzaW9uLCBhc24xLkJlci5JbnRlZ2VyKTtcblxuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQubi5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmUuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5kLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQucC5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnEuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGlmICgha2V5LnBhcnQuZG1vZHAgfHwgIWtleS5wYXJ0LmRtb2RxKVxuXHRcdHV0aWxzLmFkZFJTQU1pc3Npbmcoa2V5KTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmRtb2RwLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZG1vZHEuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5pcW1wLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzOFJTQVB1YmxpYyhrZXksIGRlcikge1xuXHRkZXIud3JpdGVOdWxsKCk7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKGFzbjEuQmVyLkJpdFN0cmluZyk7XG5cdGRlci53cml0ZUJ5dGUoMHgwMCk7XG5cblx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0Lm4uZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5lLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHRkZXIuZW5kU2VxdWVuY2UoKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzOERTQVByaXZhdGUoa2V5LCBkZXIpIHtcblx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnAuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5xLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZy5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cblx0ZGVyLnN0YXJ0U2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQueC5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczhEU0FQdWJsaWMoa2V5LCBkZXIpIHtcblx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnAuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5xLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZy5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKGFzbjEuQmVyLkJpdFN0cmluZyk7XG5cdGRlci53cml0ZUJ5dGUoMHgwMCk7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC55LmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVFQ0RTQUN1cnZlKGtleSwgZGVyKSB7XG5cdHZhciBjdXJ2ZSA9IGFsZ3MuY3VydmVzW2tleS5jdXJ2ZV07XG5cdGlmIChjdXJ2ZS5wa2NzOG9pZCkge1xuXHRcdC8qIFRoaXMgb25lIGhhcyBhIG5hbWUgaW4gcGtjcyM4LCBzbyBqdXN0IHdyaXRlIHRoZSBvaWQgKi9cblx0XHRkZXIud3JpdGVPSUQoY3VydmUucGtjczhvaWQpO1xuXG5cdH0gZWxzZSB7XG5cdFx0Ly8gRUNQYXJhbWV0ZXJzIHNlcXVlbmNlXG5cdFx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblxuXHRcdHZhciB2ZXJzaW9uID0gQnVmZmVyLmZyb20oWzFdKTtcblx0XHRkZXIud3JpdGVCdWZmZXIodmVyc2lvbiwgYXNuMS5CZXIuSW50ZWdlcik7XG5cblx0XHQvLyBGaWVsZElEIHNlcXVlbmNlXG5cdFx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblx0XHRkZXIud3JpdGVPSUQoJzEuMi44NDAuMTAwNDUuMS4xJyk7IC8vIHByaW1lLWZpZWxkXG5cdFx0ZGVyLndyaXRlQnVmZmVyKGN1cnZlLnAsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRcdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdFx0Ly8gQ3VydmUgc2VxdWVuY2Vcblx0XHRkZXIuc3RhcnRTZXF1ZW5jZSgpO1xuXHRcdHZhciBhID0gY3VydmUucDtcblx0XHRpZiAoYVswXSA9PT0gMHgwKVxuXHRcdFx0YSA9IGEuc2xpY2UoMSk7XG5cdFx0ZGVyLndyaXRlQnVmZmVyKGEsIGFzbjEuQmVyLk9jdGV0U3RyaW5nKTtcblx0XHRkZXIud3JpdGVCdWZmZXIoY3VydmUuYiwgYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHRcdGRlci53cml0ZUJ1ZmZlcihjdXJ2ZS5zLCBhc24xLkJlci5CaXRTdHJpbmcpO1xuXHRcdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdFx0ZGVyLndyaXRlQnVmZmVyKGN1cnZlLkcsIGFzbjEuQmVyLk9jdGV0U3RyaW5nKTtcblx0XHRkZXIud3JpdGVCdWZmZXIoY3VydmUubiwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdFx0dmFyIGggPSBjdXJ2ZS5oO1xuXHRcdGlmICghaCkge1xuXHRcdFx0aCA9IEJ1ZmZlci5mcm9tKFsxXSk7XG5cdFx0fVxuXHRcdGRlci53cml0ZUJ1ZmZlcihoLCBhc24xLkJlci5JbnRlZ2VyKTtcblxuXHRcdC8vIEVDUGFyYW1ldGVyc1xuXHRcdGRlci5lbmRTZXF1ZW5jZSgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczhFQ0RTQVB1YmxpYyhrZXksIGRlcikge1xuXHR3cml0ZUVDRFNBQ3VydmUoa2V5LCBkZXIpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHR2YXIgUSA9IHV0aWxzLmVjTm9ybWFsaXplKGtleS5wYXJ0LlEuZGF0YSwgdHJ1ZSk7XG5cdGRlci53cml0ZUJ1ZmZlcihRLCBhc24xLkJlci5CaXRTdHJpbmcpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3M4RUNEU0FQcml2YXRlKGtleSwgZGVyKSB7XG5cdHdyaXRlRUNEU0FDdXJ2ZShrZXksIGRlcik7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKGFzbjEuQmVyLk9jdGV0U3RyaW5nKTtcblx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblxuXHR2YXIgdmVyc2lvbiA9IEJ1ZmZlci5mcm9tKFsxXSk7XG5cdGRlci53cml0ZUJ1ZmZlcih2ZXJzaW9uLCBhc24xLkJlci5JbnRlZ2VyKTtcblxuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZC5kYXRhLCBhc24xLkJlci5PY3RldFN0cmluZyk7XG5cblx0ZGVyLnN0YXJ0U2VxdWVuY2UoMHhhMSk7XG5cdHZhciBRID0gdXRpbHMuZWNOb3JtYWxpemUoa2V5LnBhcnQuUS5kYXRhLCB0cnVlKTtcblx0ZGVyLndyaXRlQnVmZmVyKFEsIGFzbjEuQmVyLkJpdFN0cmluZyk7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzOEVkRFNBUHVibGljKGtleSwgZGVyKSB7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdHV0aWxzLndyaXRlQml0U3RyaW5nKGRlciwga2V5LnBhcnQuQS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzOEVkRFNBUHJpdmF0ZShrZXksIGRlcikge1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHR2YXIgayA9IHV0aWxzLm1wTm9ybWFsaXplKGtleS5wYXJ0LmsuZGF0YSwgdHJ1ZSk7XG5cdGRlci5zdGFydFNlcXVlbmNlKGFzbjEuQmVyLk9jdGV0U3RyaW5nKTtcblx0ZGVyLndyaXRlQnVmZmVyKGssIGFzbjEuQmVyLk9jdGV0U3RyaW5nKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG59XG4iLCIvLyBDb3B5cmlnaHQgMjAxNiBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSBDZXJ0aWZpY2F0ZTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuL2FsZ3MnKTtcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbnZhciBGaW5nZXJwcmludCA9IHJlcXVpcmUoJy4vZmluZ2VycHJpbnQnKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xudmFyIGVycnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgS2V5ID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi9wcml2YXRlLWtleScpO1xudmFyIElkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG52YXIgZm9ybWF0cyA9IHt9O1xuZm9ybWF0c1snb3BlbnNzaCddID0gcmVxdWlyZSgnLi9mb3JtYXRzL29wZW5zc2gtY2VydCcpO1xuZm9ybWF0c1sneDUwOSddID0gcmVxdWlyZSgnLi9mb3JtYXRzL3g1MDknKTtcbmZvcm1hdHNbJ3BlbSddID0gcmVxdWlyZSgnLi9mb3JtYXRzL3g1MDktcGVtJyk7XG5cbnZhciBDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IgPSBlcnJzLkNlcnRpZmljYXRlUGFyc2VFcnJvcjtcbnZhciBJbnZhbGlkQWxnb3JpdGhtRXJyb3IgPSBlcnJzLkludmFsaWRBbGdvcml0aG1FcnJvcjtcblxuZnVuY3Rpb24gQ2VydGlmaWNhdGUob3B0cykge1xuXHRhc3NlcnQub2JqZWN0KG9wdHMsICdvcHRpb25zJyk7XG5cdGFzc2VydC5hcnJheU9mT2JqZWN0KG9wdHMuc3ViamVjdHMsICdvcHRpb25zLnN1YmplY3RzJyk7XG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUob3B0cy5zdWJqZWN0c1swXSwgSWRlbnRpdHksIFsxLCAwXSxcblx0ICAgICdvcHRpb25zLnN1YmplY3RzJyk7XG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUob3B0cy5zdWJqZWN0S2V5LCBLZXksIFsxLCAwXSxcblx0ICAgICdvcHRpb25zLnN1YmplY3RLZXknKTtcblx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShvcHRzLmlzc3VlciwgSWRlbnRpdHksIFsxLCAwXSwgJ29wdGlvbnMuaXNzdWVyJyk7XG5cdGlmIChvcHRzLmlzc3VlcktleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShvcHRzLmlzc3VlcktleSwgS2V5LCBbMSwgMF0sXG5cdFx0ICAgICdvcHRpb25zLmlzc3VlcktleScpO1xuXHR9XG5cdGFzc2VydC5vYmplY3Qob3B0cy5zaWduYXR1cmVzLCAnb3B0aW9ucy5zaWduYXR1cmVzJyk7XG5cdGFzc2VydC5idWZmZXIob3B0cy5zZXJpYWwsICdvcHRpb25zLnNlcmlhbCcpO1xuXHRhc3NlcnQuZGF0ZShvcHRzLnZhbGlkRnJvbSwgJ29wdGlvbnMudmFsaWRGcm9tJyk7XG5cdGFzc2VydC5kYXRlKG9wdHMudmFsaWRVbnRpbCwgJ29wdG9ucy52YWxpZFVudGlsJyk7XG5cblx0YXNzZXJ0Lm9wdGlvbmFsQXJyYXlPZlN0cmluZyhvcHRzLnB1cnBvc2VzLCAnb3B0aW9ucy5wdXJwb3NlcycpO1xuXG5cdHRoaXMuX2hhc2hDYWNoZSA9IHt9O1xuXG5cdHRoaXMuc3ViamVjdHMgPSBvcHRzLnN1YmplY3RzO1xuXHR0aGlzLmlzc3VlciA9IG9wdHMuaXNzdWVyO1xuXHR0aGlzLnN1YmplY3RLZXkgPSBvcHRzLnN1YmplY3RLZXk7XG5cdHRoaXMuaXNzdWVyS2V5ID0gb3B0cy5pc3N1ZXJLZXk7XG5cdHRoaXMuc2lnbmF0dXJlcyA9IG9wdHMuc2lnbmF0dXJlcztcblx0dGhpcy5zZXJpYWwgPSBvcHRzLnNlcmlhbDtcblx0dGhpcy52YWxpZEZyb20gPSBvcHRzLnZhbGlkRnJvbTtcblx0dGhpcy52YWxpZFVudGlsID0gb3B0cy52YWxpZFVudGlsO1xuXHR0aGlzLnB1cnBvc2VzID0gb3B0cy5wdXJwb3Nlcztcbn1cblxuQ2VydGlmaWNhdGUuZm9ybWF0cyA9IGZvcm1hdHM7XG5cbkNlcnRpZmljYXRlLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uIChmb3JtYXQsIG9wdGlvbnMpIHtcblx0aWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKVxuXHRcdGZvcm1hdCA9ICd4NTA5Jztcblx0YXNzZXJ0LnN0cmluZyhmb3JtYXQsICdmb3JtYXQnKTtcblx0YXNzZXJ0Lm9iamVjdChmb3JtYXRzW2Zvcm1hdF0sICdmb3JtYXRzW2Zvcm1hdF0nKTtcblx0YXNzZXJ0Lm9wdGlvbmFsT2JqZWN0KG9wdGlvbnMsICdvcHRpb25zJyk7XG5cblx0cmV0dXJuIChmb3JtYXRzW2Zvcm1hdF0ud3JpdGUodGhpcywgb3B0aW9ucykpO1xufTtcblxuQ2VydGlmaWNhdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKGZvcm1hdCwgb3B0aW9ucykge1xuXHRpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpXG5cdFx0Zm9ybWF0ID0gJ3BlbSc7XG5cdHJldHVybiAodGhpcy50b0J1ZmZlcihmb3JtYXQsIG9wdGlvbnMpLnRvU3RyaW5nKCkpO1xufTtcblxuQ2VydGlmaWNhdGUucHJvdG90eXBlLmZpbmdlcnByaW50ID0gZnVuY3Rpb24gKGFsZ28pIHtcblx0aWYgKGFsZ28gPT09IHVuZGVmaW5lZClcblx0XHRhbGdvID0gJ3NoYTI1Nic7XG5cdGFzc2VydC5zdHJpbmcoYWxnbywgJ2FsZ29yaXRobScpO1xuXHR2YXIgb3B0cyA9IHtcblx0XHR0eXBlOiAnY2VydGlmaWNhdGUnLFxuXHRcdGhhc2g6IHRoaXMuaGFzaChhbGdvKSxcblx0XHRhbGdvcml0aG06IGFsZ29cblx0fTtcblx0cmV0dXJuIChuZXcgRmluZ2VycHJpbnQob3B0cykpO1xufTtcblxuQ2VydGlmaWNhdGUucHJvdG90eXBlLmhhc2ggPSBmdW5jdGlvbiAoYWxnbykge1xuXHRhc3NlcnQuc3RyaW5nKGFsZ28sICdhbGdvcml0aG0nKTtcblx0YWxnbyA9IGFsZ28udG9Mb3dlckNhc2UoKTtcblx0aWYgKGFsZ3MuaGFzaEFsZ3NbYWxnb10gPT09IHVuZGVmaW5lZClcblx0XHR0aHJvdyAobmV3IEludmFsaWRBbGdvcml0aG1FcnJvcihhbGdvKSk7XG5cblx0aWYgKHRoaXMuX2hhc2hDYWNoZVthbGdvXSlcblx0XHRyZXR1cm4gKHRoaXMuX2hhc2hDYWNoZVthbGdvXSk7XG5cblx0dmFyIGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaChhbGdvKS5cblx0ICAgIHVwZGF0ZSh0aGlzLnRvQnVmZmVyKCd4NTA5JykpLmRpZ2VzdCgpO1xuXHR0aGlzLl9oYXNoQ2FjaGVbYWxnb10gPSBoYXNoO1xuXHRyZXR1cm4gKGhhc2gpO1xufTtcblxuQ2VydGlmaWNhdGUucHJvdG90eXBlLmlzRXhwaXJlZCA9IGZ1bmN0aW9uICh3aGVuKSB7XG5cdGlmICh3aGVuID09PSB1bmRlZmluZWQpXG5cdFx0d2hlbiA9IG5ldyBEYXRlKCk7XG5cdHJldHVybiAoISgod2hlbi5nZXRUaW1lKCkgPj0gdGhpcy52YWxpZEZyb20uZ2V0VGltZSgpKSAmJlxuXHRcdCh3aGVuLmdldFRpbWUoKSA8IHRoaXMudmFsaWRVbnRpbC5nZXRUaW1lKCkpKSk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUuaXNTaWduZWRCeSA9IGZ1bmN0aW9uIChpc3N1ZXJDZXJ0KSB7XG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUoaXNzdWVyQ2VydCwgQ2VydGlmaWNhdGUsIFsxLCAwXSwgJ2lzc3VlcicpO1xuXG5cdGlmICghdGhpcy5pc3N1ZXIuZXF1YWxzKGlzc3VlckNlcnQuc3ViamVjdHNbMF0pKVxuXHRcdHJldHVybiAoZmFsc2UpO1xuXHRpZiAodGhpcy5pc3N1ZXIucHVycG9zZXMgJiYgdGhpcy5pc3N1ZXIucHVycG9zZXMubGVuZ3RoID4gMCAmJlxuXHQgICAgdGhpcy5pc3N1ZXIucHVycG9zZXMuaW5kZXhPZignY2EnKSA9PT0gLTEpIHtcblx0XHRyZXR1cm4gKGZhbHNlKTtcblx0fVxuXG5cdHJldHVybiAodGhpcy5pc1NpZ25lZEJ5S2V5KGlzc3VlckNlcnQuc3ViamVjdEtleSkpO1xufTtcblxuQ2VydGlmaWNhdGUucHJvdG90eXBlLmdldEV4dGVuc2lvbiA9IGZ1bmN0aW9uIChrZXlPck9pZCkge1xuXHRhc3NlcnQuc3RyaW5nKGtleU9yT2lkLCAna2V5T3JPaWQnKTtcblx0dmFyIGV4dCA9IHRoaXMuZ2V0RXh0ZW5zaW9ucygpLmZpbHRlcihmdW5jdGlvbiAobWF5YmVFeHQpIHtcblx0XHRpZiAobWF5YmVFeHQuZm9ybWF0ID09PSAneDUwOScpXG5cdFx0XHRyZXR1cm4gKG1heWJlRXh0Lm9pZCA9PT0ga2V5T3JPaWQpO1xuXHRcdGlmIChtYXliZUV4dC5mb3JtYXQgPT09ICdvcGVuc3NoJylcblx0XHRcdHJldHVybiAobWF5YmVFeHQubmFtZSA9PT0ga2V5T3JPaWQpO1xuXHRcdHJldHVybiAoZmFsc2UpO1xuXHR9KVswXTtcblx0cmV0dXJuIChleHQpO1xufTtcblxuQ2VydGlmaWNhdGUucHJvdG90eXBlLmdldEV4dGVuc2lvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBleHRzID0gW107XG5cdHZhciB4NTA5ID0gdGhpcy5zaWduYXR1cmVzLng1MDk7XG5cdGlmICh4NTA5ICYmIHg1MDkuZXh0cmFzICYmIHg1MDkuZXh0cmFzLmV4dHMpIHtcblx0XHR4NTA5LmV4dHJhcy5leHRzLmZvckVhY2goZnVuY3Rpb24gKGV4dCkge1xuXHRcdFx0ZXh0LmZvcm1hdCA9ICd4NTA5Jztcblx0XHRcdGV4dHMucHVzaChleHQpO1xuXHRcdH0pO1xuXHR9XG5cdHZhciBvcGVuc3NoID0gdGhpcy5zaWduYXR1cmVzLm9wZW5zc2g7XG5cdGlmIChvcGVuc3NoICYmIG9wZW5zc2guZXh0cykge1xuXHRcdG9wZW5zc2guZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChleHQpIHtcblx0XHRcdGV4dC5mb3JtYXQgPSAnb3BlbnNzaCc7XG5cdFx0XHRleHRzLnB1c2goZXh0KTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gKGV4dHMpO1xufTtcblxuQ2VydGlmaWNhdGUucHJvdG90eXBlLmlzU2lnbmVkQnlLZXkgPSBmdW5jdGlvbiAoaXNzdWVyS2V5KSB7XG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUoaXNzdWVyS2V5LCBLZXksIFsxLCAyXSwgJ2lzc3VlcktleScpO1xuXG5cdGlmICh0aGlzLmlzc3VlcktleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuICh0aGlzLmlzc3VlcktleS5cblx0XHQgICAgZmluZ2VycHJpbnQoJ3NoYTUxMicpLm1hdGNoZXMoaXNzdWVyS2V5KSk7XG5cdH1cblxuXHR2YXIgZm10ID0gT2JqZWN0LmtleXModGhpcy5zaWduYXR1cmVzKVswXTtcblx0dmFyIHZhbGlkID0gZm9ybWF0c1tmbXRdLnZlcmlmeSh0aGlzLCBpc3N1ZXJLZXkpO1xuXHRpZiAodmFsaWQpXG5cdFx0dGhpcy5pc3N1ZXJLZXkgPSBpc3N1ZXJLZXk7XG5cdHJldHVybiAodmFsaWQpO1xufTtcblxuQ2VydGlmaWNhdGUucHJvdG90eXBlLnNpZ25XaXRoID0gZnVuY3Rpb24gKGtleSkge1xuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKGtleSwgUHJpdmF0ZUtleSwgWzEsIDJdLCAna2V5Jyk7XG5cdHZhciBmbXRzID0gT2JqZWN0LmtleXMoZm9ybWF0cyk7XG5cdHZhciBkaWRPbmUgPSBmYWxzZTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBmbXRzLmxlbmd0aDsgKytpKSB7XG5cdFx0aWYgKGZtdHNbaV0gIT09ICdwZW0nKSB7XG5cdFx0XHR2YXIgcmV0ID0gZm9ybWF0c1tmbXRzW2ldXS5zaWduKHRoaXMsIGtleSk7XG5cdFx0XHRpZiAocmV0ID09PSB0cnVlKVxuXHRcdFx0XHRkaWRPbmUgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRpZiAoIWRpZE9uZSkge1xuXHRcdHRocm93IChuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzaWduIHRoZSBjZXJ0aWZpY2F0ZSBmb3IgYW55ICcgK1xuXHRcdCAgICAnYXZhaWxhYmxlIGNlcnRpZmljYXRlIGZvcm1hdHMnKSk7XG5cdH1cbn07XG5cbkNlcnRpZmljYXRlLmNyZWF0ZVNlbGZTaWduZWQgPSBmdW5jdGlvbiAoc3ViamVjdE9yU3ViamVjdHMsIGtleSwgb3B0aW9ucykge1xuXHR2YXIgc3ViamVjdHM7XG5cdGlmIChBcnJheS5pc0FycmF5KHN1YmplY3RPclN1YmplY3RzKSlcblx0XHRzdWJqZWN0cyA9IHN1YmplY3RPclN1YmplY3RzO1xuXHRlbHNlXG5cdFx0c3ViamVjdHMgPSBbc3ViamVjdE9yU3ViamVjdHNdO1xuXG5cdGFzc2VydC5hcnJheU9mT2JqZWN0KHN1YmplY3RzKTtcblx0c3ViamVjdHMuZm9yRWFjaChmdW5jdGlvbiAoc3ViamVjdCkge1xuXHRcdHV0aWxzLmFzc2VydENvbXBhdGlibGUoc3ViamVjdCwgSWRlbnRpdHksIFsxLCAwXSwgJ3N1YmplY3QnKTtcblx0fSk7XG5cblx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShrZXksIFByaXZhdGVLZXksIFsxLCAyXSwgJ3ByaXZhdGUga2V5Jyk7XG5cblx0YXNzZXJ0Lm9wdGlvbmFsT2JqZWN0KG9wdGlvbnMsICdvcHRpb25zJyk7XG5cdGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpXG5cdFx0b3B0aW9ucyA9IHt9O1xuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucy52YWxpZEZyb20sICdvcHRpb25zLnZhbGlkRnJvbScpO1xuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucy52YWxpZFVudGlsLCAnb3B0aW9ucy52YWxpZFVudGlsJyk7XG5cdHZhciB2YWxpZEZyb20gPSBvcHRpb25zLnZhbGlkRnJvbTtcblx0dmFyIHZhbGlkVW50aWwgPSBvcHRpb25zLnZhbGlkVW50aWw7XG5cdGlmICh2YWxpZEZyb20gPT09IHVuZGVmaW5lZClcblx0XHR2YWxpZEZyb20gPSBuZXcgRGF0ZSgpO1xuXHRpZiAodmFsaWRVbnRpbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0YXNzZXJ0Lm9wdGlvbmFsTnVtYmVyKG9wdGlvbnMubGlmZXRpbWUsICdvcHRpb25zLmxpZmV0aW1lJyk7XG5cdFx0dmFyIGxpZmV0aW1lID0gb3B0aW9ucy5saWZldGltZTtcblx0XHRpZiAobGlmZXRpbWUgPT09IHVuZGVmaW5lZClcblx0XHRcdGxpZmV0aW1lID0gMTAqMzY1KjI0KjM2MDA7XG5cdFx0dmFsaWRVbnRpbCA9IG5ldyBEYXRlKCk7XG5cdFx0dmFsaWRVbnRpbC5zZXRUaW1lKHZhbGlkVW50aWwuZ2V0VGltZSgpICsgbGlmZXRpbWUqMTAwMCk7XG5cdH1cblx0YXNzZXJ0Lm9wdGlvbmFsQnVmZmVyKG9wdGlvbnMuc2VyaWFsLCAnb3B0aW9ucy5zZXJpYWwnKTtcblx0dmFyIHNlcmlhbCA9IG9wdGlvbnMuc2VyaWFsO1xuXHRpZiAoc2VyaWFsID09PSB1bmRlZmluZWQpXG5cdFx0c2VyaWFsID0gQnVmZmVyLmZyb20oJzAwMDAwMDAwMDAwMDAwMDEnLCAnaGV4Jyk7XG5cblx0dmFyIHB1cnBvc2VzID0gb3B0aW9ucy5wdXJwb3Nlcztcblx0aWYgKHB1cnBvc2VzID09PSB1bmRlZmluZWQpXG5cdFx0cHVycG9zZXMgPSBbXTtcblxuXHRpZiAocHVycG9zZXMuaW5kZXhPZignc2lnbmF0dXJlJykgPT09IC0xKVxuXHRcdHB1cnBvc2VzLnB1c2goJ3NpZ25hdHVyZScpO1xuXG5cdC8qIFNlbGYtc2lnbmVkIGNlcnRzIGFyZSBhbHdheXMgQ0FzLiAqL1xuXHRpZiAocHVycG9zZXMuaW5kZXhPZignY2EnKSA9PT0gLTEpXG5cdFx0cHVycG9zZXMucHVzaCgnY2EnKTtcblx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ2NybCcpID09PSAtMSlcblx0XHRwdXJwb3Nlcy5wdXNoKCdjcmwnKTtcblxuXHQvKlxuXHQgKiBJZiB3ZSB3ZXJlbid0IGV4cGxpY2l0bHkgZ2l2ZW4gYW55IG90aGVyIHB1cnBvc2VzLCBkbyB0aGUgc2Vuc2libGVcblx0ICogdGhpbmcgYW5kIGFkZCBzb21lIGJhc2ljIG9uZXMgZGVwZW5kaW5nIG9uIHRoZSBzdWJqZWN0IHR5cGUuXG5cdCAqL1xuXHRpZiAocHVycG9zZXMubGVuZ3RoIDw9IDMpIHtcblx0XHR2YXIgaG9zdFN1YmplY3RzID0gc3ViamVjdHMuZmlsdGVyKGZ1bmN0aW9uIChzdWJqZWN0KSB7XG5cdFx0XHRyZXR1cm4gKHN1YmplY3QudHlwZSA9PT0gJ2hvc3QnKTtcblx0XHR9KTtcblx0XHR2YXIgdXNlclN1YmplY3RzID0gc3ViamVjdHMuZmlsdGVyKGZ1bmN0aW9uIChzdWJqZWN0KSB7XG5cdFx0XHRyZXR1cm4gKHN1YmplY3QudHlwZSA9PT0gJ3VzZXInKTtcblx0XHR9KTtcblx0XHRpZiAoaG9zdFN1YmplY3RzLmxlbmd0aCA+IDApIHtcblx0XHRcdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdzZXJ2ZXJBdXRoJykgPT09IC0xKVxuXHRcdFx0XHRwdXJwb3Nlcy5wdXNoKCdzZXJ2ZXJBdXRoJyk7XG5cdFx0fVxuXHRcdGlmICh1c2VyU3ViamVjdHMubGVuZ3RoID4gMCkge1xuXHRcdFx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ2NsaWVudEF1dGgnKSA9PT0gLTEpXG5cdFx0XHRcdHB1cnBvc2VzLnB1c2goJ2NsaWVudEF1dGgnKTtcblx0XHR9XG5cdFx0aWYgKHVzZXJTdWJqZWN0cy5sZW5ndGggPiAwIHx8IGhvc3RTdWJqZWN0cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRpZiAocHVycG9zZXMuaW5kZXhPZigna2V5QWdyZWVtZW50JykgPT09IC0xKVxuXHRcdFx0XHRwdXJwb3Nlcy5wdXNoKCdrZXlBZ3JlZW1lbnQnKTtcblx0XHRcdGlmIChrZXkudHlwZSA9PT0gJ3JzYScgJiZcblx0XHRcdCAgICBwdXJwb3Nlcy5pbmRleE9mKCdlbmNyeXB0aW9uJykgPT09IC0xKVxuXHRcdFx0XHRwdXJwb3Nlcy5wdXNoKCdlbmNyeXB0aW9uJyk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGNlcnQgPSBuZXcgQ2VydGlmaWNhdGUoe1xuXHRcdHN1YmplY3RzOiBzdWJqZWN0cyxcblx0XHRpc3N1ZXI6IHN1YmplY3RzWzBdLFxuXHRcdHN1YmplY3RLZXk6IGtleS50b1B1YmxpYygpLFxuXHRcdGlzc3VlcktleToga2V5LnRvUHVibGljKCksXG5cdFx0c2lnbmF0dXJlczoge30sXG5cdFx0c2VyaWFsOiBzZXJpYWwsXG5cdFx0dmFsaWRGcm9tOiB2YWxpZEZyb20sXG5cdFx0dmFsaWRVbnRpbDogdmFsaWRVbnRpbCxcblx0XHRwdXJwb3NlczogcHVycG9zZXNcblx0fSk7XG5cdGNlcnQuc2lnbldpdGgoa2V5KTtcblxuXHRyZXR1cm4gKGNlcnQpO1xufTtcblxuQ2VydGlmaWNhdGUuY3JlYXRlID1cbiAgICBmdW5jdGlvbiAoc3ViamVjdE9yU3ViamVjdHMsIGtleSwgaXNzdWVyLCBpc3N1ZXJLZXksIG9wdGlvbnMpIHtcblx0dmFyIHN1YmplY3RzO1xuXHRpZiAoQXJyYXkuaXNBcnJheShzdWJqZWN0T3JTdWJqZWN0cykpXG5cdFx0c3ViamVjdHMgPSBzdWJqZWN0T3JTdWJqZWN0cztcblx0ZWxzZVxuXHRcdHN1YmplY3RzID0gW3N1YmplY3RPclN1YmplY3RzXTtcblxuXHRhc3NlcnQuYXJyYXlPZk9iamVjdChzdWJqZWN0cyk7XG5cdHN1YmplY3RzLmZvckVhY2goZnVuY3Rpb24gKHN1YmplY3QpIHtcblx0XHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKHN1YmplY3QsIElkZW50aXR5LCBbMSwgMF0sICdzdWJqZWN0Jyk7XG5cdH0pO1xuXG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUoa2V5LCBLZXksIFsxLCAwXSwgJ2tleScpO1xuXHRpZiAoUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5KSlcblx0XHRrZXkgPSBrZXkudG9QdWJsaWMoKTtcblx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShpc3N1ZXIsIElkZW50aXR5LCBbMSwgMF0sICdpc3N1ZXInKTtcblx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShpc3N1ZXJLZXksIFByaXZhdGVLZXksIFsxLCAyXSwgJ2lzc3VlciBrZXknKTtcblxuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucywgJ29wdGlvbnMnKTtcblx0aWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZClcblx0XHRvcHRpb25zID0ge307XG5cdGFzc2VydC5vcHRpb25hbE9iamVjdChvcHRpb25zLnZhbGlkRnJvbSwgJ29wdGlvbnMudmFsaWRGcm9tJyk7XG5cdGFzc2VydC5vcHRpb25hbE9iamVjdChvcHRpb25zLnZhbGlkVW50aWwsICdvcHRpb25zLnZhbGlkVW50aWwnKTtcblx0dmFyIHZhbGlkRnJvbSA9IG9wdGlvbnMudmFsaWRGcm9tO1xuXHR2YXIgdmFsaWRVbnRpbCA9IG9wdGlvbnMudmFsaWRVbnRpbDtcblx0aWYgKHZhbGlkRnJvbSA9PT0gdW5kZWZpbmVkKVxuXHRcdHZhbGlkRnJvbSA9IG5ldyBEYXRlKCk7XG5cdGlmICh2YWxpZFVudGlsID09PSB1bmRlZmluZWQpIHtcblx0XHRhc3NlcnQub3B0aW9uYWxOdW1iZXIob3B0aW9ucy5saWZldGltZSwgJ29wdGlvbnMubGlmZXRpbWUnKTtcblx0XHR2YXIgbGlmZXRpbWUgPSBvcHRpb25zLmxpZmV0aW1lO1xuXHRcdGlmIChsaWZldGltZSA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0bGlmZXRpbWUgPSAxMCozNjUqMjQqMzYwMDtcblx0XHR2YWxpZFVudGlsID0gbmV3IERhdGUoKTtcblx0XHR2YWxpZFVudGlsLnNldFRpbWUodmFsaWRVbnRpbC5nZXRUaW1lKCkgKyBsaWZldGltZSoxMDAwKTtcblx0fVxuXHRhc3NlcnQub3B0aW9uYWxCdWZmZXIob3B0aW9ucy5zZXJpYWwsICdvcHRpb25zLnNlcmlhbCcpO1xuXHR2YXIgc2VyaWFsID0gb3B0aW9ucy5zZXJpYWw7XG5cdGlmIChzZXJpYWwgPT09IHVuZGVmaW5lZClcblx0XHRzZXJpYWwgPSBCdWZmZXIuZnJvbSgnMDAwMDAwMDAwMDAwMDAwMScsICdoZXgnKTtcblxuXHR2YXIgcHVycG9zZXMgPSBvcHRpb25zLnB1cnBvc2VzO1xuXHRpZiAocHVycG9zZXMgPT09IHVuZGVmaW5lZClcblx0XHRwdXJwb3NlcyA9IFtdO1xuXG5cdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdzaWduYXR1cmUnKSA9PT0gLTEpXG5cdFx0cHVycG9zZXMucHVzaCgnc2lnbmF0dXJlJyk7XG5cblx0aWYgKG9wdGlvbnMuY2EgPT09IHRydWUpIHtcblx0XHRpZiAocHVycG9zZXMuaW5kZXhPZignY2EnKSA9PT0gLTEpXG5cdFx0XHRwdXJwb3Nlcy5wdXNoKCdjYScpO1xuXHRcdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdjcmwnKSA9PT0gLTEpXG5cdFx0XHRwdXJwb3Nlcy5wdXNoKCdjcmwnKTtcblx0fVxuXG5cdHZhciBob3N0U3ViamVjdHMgPSBzdWJqZWN0cy5maWx0ZXIoZnVuY3Rpb24gKHN1YmplY3QpIHtcblx0XHRyZXR1cm4gKHN1YmplY3QudHlwZSA9PT0gJ2hvc3QnKTtcblx0fSk7XG5cdHZhciB1c2VyU3ViamVjdHMgPSBzdWJqZWN0cy5maWx0ZXIoZnVuY3Rpb24gKHN1YmplY3QpIHtcblx0XHRyZXR1cm4gKHN1YmplY3QudHlwZSA9PT0gJ3VzZXInKTtcblx0fSk7XG5cdGlmIChob3N0U3ViamVjdHMubGVuZ3RoID4gMCkge1xuXHRcdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdzZXJ2ZXJBdXRoJykgPT09IC0xKVxuXHRcdFx0cHVycG9zZXMucHVzaCgnc2VydmVyQXV0aCcpO1xuXHR9XG5cdGlmICh1c2VyU3ViamVjdHMubGVuZ3RoID4gMCkge1xuXHRcdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdjbGllbnRBdXRoJykgPT09IC0xKVxuXHRcdFx0cHVycG9zZXMucHVzaCgnY2xpZW50QXV0aCcpO1xuXHR9XG5cdGlmICh1c2VyU3ViamVjdHMubGVuZ3RoID4gMCB8fCBob3N0U3ViamVjdHMubGVuZ3RoID4gMCkge1xuXHRcdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdrZXlBZ3JlZW1lbnQnKSA9PT0gLTEpXG5cdFx0XHRwdXJwb3Nlcy5wdXNoKCdrZXlBZ3JlZW1lbnQnKTtcblx0XHRpZiAoa2V5LnR5cGUgPT09ICdyc2EnICYmXG5cdFx0ICAgIHB1cnBvc2VzLmluZGV4T2YoJ2VuY3J5cHRpb24nKSA9PT0gLTEpXG5cdFx0XHRwdXJwb3Nlcy5wdXNoKCdlbmNyeXB0aW9uJyk7XG5cdH1cblxuXHR2YXIgY2VydCA9IG5ldyBDZXJ0aWZpY2F0ZSh7XG5cdFx0c3ViamVjdHM6IHN1YmplY3RzLFxuXHRcdGlzc3VlcjogaXNzdWVyLFxuXHRcdHN1YmplY3RLZXk6IGtleSxcblx0XHRpc3N1ZXJLZXk6IGlzc3VlcktleS50b1B1YmxpYygpLFxuXHRcdHNpZ25hdHVyZXM6IHt9LFxuXHRcdHNlcmlhbDogc2VyaWFsLFxuXHRcdHZhbGlkRnJvbTogdmFsaWRGcm9tLFxuXHRcdHZhbGlkVW50aWw6IHZhbGlkVW50aWwsXG5cdFx0cHVycG9zZXM6IHB1cnBvc2VzXG5cdH0pO1xuXHRjZXJ0LnNpZ25XaXRoKGlzc3VlcktleSk7XG5cblx0cmV0dXJuIChjZXJ0KTtcbn07XG5cbkNlcnRpZmljYXRlLnBhcnNlID0gZnVuY3Rpb24gKGRhdGEsIGZvcm1hdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIChkYXRhKSAhPT0gJ3N0cmluZycpXG5cdFx0YXNzZXJ0LmJ1ZmZlcihkYXRhLCAnZGF0YScpO1xuXHRpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpXG5cdFx0Zm9ybWF0ID0gJ2F1dG8nO1xuXHRhc3NlcnQuc3RyaW5nKGZvcm1hdCwgJ2Zvcm1hdCcpO1xuXHRpZiAodHlwZW9mIChvcHRpb25zKSA9PT0gJ3N0cmluZycpXG5cdFx0b3B0aW9ucyA9IHsgZmlsZW5hbWU6IG9wdGlvbnMgfTtcblx0YXNzZXJ0Lm9wdGlvbmFsT2JqZWN0KG9wdGlvbnMsICdvcHRpb25zJyk7XG5cdGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpXG5cdFx0b3B0aW9ucyA9IHt9O1xuXHRhc3NlcnQub3B0aW9uYWxTdHJpbmcob3B0aW9ucy5maWxlbmFtZSwgJ29wdGlvbnMuZmlsZW5hbWUnKTtcblx0aWYgKG9wdGlvbnMuZmlsZW5hbWUgPT09IHVuZGVmaW5lZClcblx0XHRvcHRpb25zLmZpbGVuYW1lID0gJyh1bm5hbWVkKSc7XG5cblx0YXNzZXJ0Lm9iamVjdChmb3JtYXRzW2Zvcm1hdF0sICdmb3JtYXRzW2Zvcm1hdF0nKTtcblxuXHR0cnkge1xuXHRcdHZhciBrID0gZm9ybWF0c1tmb3JtYXRdLnJlYWQoZGF0YSwgb3B0aW9ucyk7XG5cdFx0cmV0dXJuIChrKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHRocm93IChuZXcgQ2VydGlmaWNhdGVQYXJzZUVycm9yKG9wdGlvbnMuZmlsZW5hbWUsIGZvcm1hdCwgZSkpO1xuXHR9XG59O1xuXG5DZXJ0aWZpY2F0ZS5pc0NlcnRpZmljYXRlID0gZnVuY3Rpb24gKG9iaiwgdmVyKSB7XG5cdHJldHVybiAodXRpbHMuaXNDb21wYXRpYmxlKG9iaiwgQ2VydGlmaWNhdGUsIHZlcikpO1xufTtcblxuLypcbiAqIEFQSSB2ZXJzaW9ucyBmb3IgQ2VydGlmaWNhdGU6XG4gKiBbMSwwXSAtLSBpbml0aWFsIHZlclxuICogWzEsMV0gLS0gb3BlbnNzaCBmb3JtYXQgbm93IHVucGFja3MgZXh0ZW5zaW9uc1xuICovXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUuX3NzaHBrQXBpVmVyc2lvbiA9IFsxLCAxXTtcblxuQ2VydGlmaWNhdGUuX29sZFZlcnNpb25EZXRlY3QgPSBmdW5jdGlvbiAob2JqKSB7XG5cdHJldHVybiAoWzEsIDBdKTtcbn07XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSBJZGVudGl0eTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4vYWxncycpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIEZpbmdlcnByaW50ID0gcmVxdWlyZSgnLi9maW5nZXJwcmludCcpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG52YXIgZXJycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc24xID0gcmVxdWlyZSgnYXNuMScpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcblxuLypKU1NUWUxFRCovXG52YXIgRE5TX05BTUVfUkUgPSAvXihbKl18W2EtejAtOV1bYS16MC05XFwtXXswLDYyfSkoPzpcXC4oWypdfFthLXowLTldW2EtejAtOVxcLV17MCw2Mn0pKSokL2k7XG5cbnZhciBvaWRzID0ge307XG5vaWRzLmNuID0gJzIuNS40LjMnO1xub2lkcy5vID0gJzIuNS40LjEwJztcbm9pZHMub3UgPSAnMi41LjQuMTEnO1xub2lkcy5sID0gJzIuNS40LjcnO1xub2lkcy5zID0gJzIuNS40LjgnO1xub2lkcy5jID0gJzIuNS40LjYnO1xub2lkcy5zbiA9ICcyLjUuNC40Jztcbm9pZHMucG9zdGFsQ29kZSA9ICcyLjUuNC4xNyc7XG5vaWRzLnNlcmlhbE51bWJlciA9ICcyLjUuNC41Jztcbm9pZHMuc3RyZWV0ID0gJzIuNS40LjknO1xub2lkcy54NTAwVW5pcXVlSWRlbnRpZmllciA9ICcyLjUuNC40NSc7XG5vaWRzLnJvbGUgPSAnMi41LjQuNzInO1xub2lkcy50ZWxlcGhvbmVOdW1iZXIgPSAnMi41LjQuMjAnO1xub2lkcy5kZXNjcmlwdGlvbiA9ICcyLjUuNC4xMyc7XG5vaWRzLmRjID0gJzAuOS4yMzQyLjE5MjAwMzAwLjEwMC4xLjI1Jztcbm9pZHMudWlkID0gJzAuOS4yMzQyLjE5MjAwMzAwLjEwMC4xLjEnO1xub2lkcy5tYWlsID0gJzAuOS4yMzQyLjE5MjAwMzAwLjEwMC4xLjMnO1xub2lkcy50aXRsZSA9ICcyLjUuNC4xMic7XG5vaWRzLmduID0gJzIuNS40LjQyJztcbm9pZHMuaW5pdGlhbHMgPSAnMi41LjQuNDMnO1xub2lkcy5wc2V1ZG9ueW0gPSAnMi41LjQuNjUnO1xub2lkcy5lbWFpbEFkZHJlc3MgPSAnMS4yLjg0MC4xMTM1NDkuMS45LjEnO1xuXG52YXIgdW5vaWRzID0ge307XG5PYmplY3Qua2V5cyhvaWRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG5cdHVub2lkc1tvaWRzW2tdXSA9IGs7XG59KTtcblxuZnVuY3Rpb24gSWRlbnRpdHkob3B0cykge1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cdGFzc2VydC5vYmplY3Qob3B0cywgJ29wdGlvbnMnKTtcblx0YXNzZXJ0LmFycmF5T2ZPYmplY3Qob3B0cy5jb21wb25lbnRzLCAnb3B0aW9ucy5jb21wb25lbnRzJyk7XG5cdHRoaXMuY29tcG9uZW50cyA9IG9wdHMuY29tcG9uZW50cztcblx0dGhpcy5jb21wb25lbnRMb29rdXAgPSB7fTtcblx0dGhpcy5jb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcblx0XHRpZiAoYy5uYW1lICYmICFjLm9pZClcblx0XHRcdGMub2lkID0gb2lkc1tjLm5hbWVdO1xuXHRcdGlmIChjLm9pZCAmJiAhYy5uYW1lKVxuXHRcdFx0Yy5uYW1lID0gdW5vaWRzW2Mub2lkXTtcblx0XHRpZiAoc2VsZi5jb21wb25lbnRMb29rdXBbYy5uYW1lXSA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0c2VsZi5jb21wb25lbnRMb29rdXBbYy5uYW1lXSA9IFtdO1xuXHRcdHNlbGYuY29tcG9uZW50TG9va3VwW2MubmFtZV0ucHVzaChjKTtcblx0fSk7XG5cdGlmICh0aGlzLmNvbXBvbmVudExvb2t1cC5jbiAmJiB0aGlzLmNvbXBvbmVudExvb2t1cC5jbi5sZW5ndGggPiAwKSB7XG5cdFx0dGhpcy5jbiA9IHRoaXMuY29tcG9uZW50TG9va3VwLmNuWzBdLnZhbHVlO1xuXHR9XG5cdGFzc2VydC5vcHRpb25hbFN0cmluZyhvcHRzLnR5cGUsICdvcHRpb25zLnR5cGUnKTtcblx0aWYgKG9wdHMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0aWYgKHRoaXMuY29tcG9uZW50cy5sZW5ndGggPT09IDEgJiZcblx0XHQgICAgdGhpcy5jb21wb25lbnRMb29rdXAuY24gJiZcblx0XHQgICAgdGhpcy5jb21wb25lbnRMb29rdXAuY24ubGVuZ3RoID09PSAxICYmXG5cdFx0ICAgIHRoaXMuY29tcG9uZW50TG9va3VwLmNuWzBdLnZhbHVlLm1hdGNoKEROU19OQU1FX1JFKSkge1xuXHRcdFx0dGhpcy50eXBlID0gJ2hvc3QnO1xuXHRcdFx0dGhpcy5ob3N0bmFtZSA9IHRoaXMuY29tcG9uZW50TG9va3VwLmNuWzBdLnZhbHVlO1xuXG5cdFx0fSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudExvb2t1cC5kYyAmJlxuXHRcdCAgICB0aGlzLmNvbXBvbmVudHMubGVuZ3RoID09PSB0aGlzLmNvbXBvbmVudExvb2t1cC5kYy5sZW5ndGgpIHtcblx0XHRcdHRoaXMudHlwZSA9ICdob3N0Jztcblx0XHRcdHRoaXMuaG9zdG5hbWUgPSB0aGlzLmNvbXBvbmVudExvb2t1cC5kYy5tYXAoXG5cdFx0XHQgICAgZnVuY3Rpb24gKGMpIHtcblx0XHRcdFx0cmV0dXJuIChjLnZhbHVlKTtcblx0XHRcdH0pLmpvaW4oJy4nKTtcblxuXHRcdH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnRMb29rdXAudWlkICYmXG5cdFx0ICAgIHRoaXMuY29tcG9uZW50cy5sZW5ndGggPT09XG5cdFx0ICAgIHRoaXMuY29tcG9uZW50TG9va3VwLnVpZC5sZW5ndGgpIHtcblx0XHRcdHRoaXMudHlwZSA9ICd1c2VyJztcblx0XHRcdHRoaXMudWlkID0gdGhpcy5jb21wb25lbnRMb29rdXAudWlkWzBdLnZhbHVlO1xuXG5cdFx0fSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudExvb2t1cC5jbiAmJlxuXHRcdCAgICB0aGlzLmNvbXBvbmVudExvb2t1cC5jbi5sZW5ndGggPT09IDEgJiZcblx0XHQgICAgdGhpcy5jb21wb25lbnRMb29rdXAuY25bMF0udmFsdWUubWF0Y2goRE5TX05BTUVfUkUpKSB7XG5cdFx0XHR0aGlzLnR5cGUgPSAnaG9zdCc7XG5cdFx0XHR0aGlzLmhvc3RuYW1lID0gdGhpcy5jb21wb25lbnRMb29rdXAuY25bMF0udmFsdWU7XG5cblx0XHR9IGVsc2UgaWYgKHRoaXMuY29tcG9uZW50TG9va3VwLnVpZCAmJlxuXHRcdCAgICB0aGlzLmNvbXBvbmVudExvb2t1cC51aWQubGVuZ3RoID09PSAxKSB7XG5cdFx0XHR0aGlzLnR5cGUgPSAndXNlcic7XG5cdFx0XHR0aGlzLnVpZCA9IHRoaXMuY29tcG9uZW50TG9va3VwLnVpZFswXS52YWx1ZTtcblxuXHRcdH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnRMb29rdXAubWFpbCAmJlxuXHRcdCAgICB0aGlzLmNvbXBvbmVudExvb2t1cC5tYWlsLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0dGhpcy50eXBlID0gJ2VtYWlsJztcblx0XHRcdHRoaXMuZW1haWwgPSB0aGlzLmNvbXBvbmVudExvb2t1cC5tYWlsWzBdLnZhbHVlO1xuXG5cdFx0fSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudExvb2t1cC5jbiAmJlxuXHRcdCAgICB0aGlzLmNvbXBvbmVudExvb2t1cC5jbi5sZW5ndGggPT09IDEpIHtcblx0XHRcdHRoaXMudHlwZSA9ICd1c2VyJztcblx0XHRcdHRoaXMudWlkID0gdGhpcy5jb21wb25lbnRMb29rdXAuY25bMF0udmFsdWU7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50eXBlID0gJ3Vua25vd24nO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBvcHRzLnR5cGU7XG5cdFx0aWYgKHRoaXMudHlwZSA9PT0gJ2hvc3QnKVxuXHRcdFx0dGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWU7XG5cdFx0ZWxzZSBpZiAodGhpcy50eXBlID09PSAndXNlcicpXG5cdFx0XHR0aGlzLnVpZCA9IG9wdHMudWlkO1xuXHRcdGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ2VtYWlsJylcblx0XHRcdHRoaXMuZW1haWwgPSBvcHRzLmVtYWlsO1xuXHRcdGVsc2Vcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ1Vua25vd24gdHlwZSAnICsgdGhpcy50eXBlKSk7XG5cdH1cbn1cblxuSWRlbnRpdHkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gKHRoaXMuY29tcG9uZW50cy5tYXAoZnVuY3Rpb24gKGMpIHtcblx0XHR2YXIgbiA9IGMubmFtZS50b1VwcGVyQ2FzZSgpO1xuXHRcdC8qSlNTVFlMRUQqL1xuXHRcdG4gPSBuLnJlcGxhY2UoLz0vZywgJ1xcXFw9Jyk7XG5cdFx0dmFyIHYgPSBjLnZhbHVlO1xuXHRcdC8qSlNTVFlMRUQqL1xuXHRcdHYgPSB2LnJlcGxhY2UoLywvZywgJ1xcXFwsJyk7XG5cdFx0cmV0dXJuIChuICsgJz0nICsgdik7XG5cdH0pLmpvaW4oJywgJykpO1xufTtcblxuSWRlbnRpdHkucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChuYW1lLCBhc0FycmF5KSB7XG5cdGFzc2VydC5zdHJpbmcobmFtZSwgJ25hbWUnKTtcblx0dmFyIGFyciA9IHRoaXMuY29tcG9uZW50TG9va3VwW25hbWVdO1xuXHRpZiAoYXJyID09PSB1bmRlZmluZWQgfHwgYXJyLmxlbmd0aCA9PT0gMClcblx0XHRyZXR1cm4gKHVuZGVmaW5lZCk7XG5cdGlmICghYXNBcnJheSAmJiBhcnIubGVuZ3RoID4gMSlcblx0XHR0aHJvdyAobmV3IEVycm9yKCdNdWx0aXBsZSB2YWx1ZXMgZm9yIGF0dHJpYnV0ZSAnICsgbmFtZSkpO1xuXHRpZiAoIWFzQXJyYXkpXG5cdFx0cmV0dXJuIChhcnJbMF0udmFsdWUpO1xuXHRyZXR1cm4gKGFyci5tYXAoZnVuY3Rpb24gKGMpIHtcblx0XHRyZXR1cm4gKGMudmFsdWUpO1xuXHR9KSk7XG59O1xuXG5JZGVudGl0eS5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIChpZHgpIHtcblx0cmV0dXJuICh0aGlzLmNvbXBvbmVudHMubWFwKGZ1bmN0aW9uIChjKSB7XG5cdFx0cmV0dXJuICh7XG5cdFx0XHRuYW1lOiBjLm5hbWUsXG5cdFx0XHR2YWx1ZTogYy52YWx1ZVxuXHRcdH0pO1xuXHR9KSk7XG59O1xuXG4vKlxuICogVGhlc2UgYXJlIGZyb20gWC42ODAgLS0gUHJpbnRhYmxlU3RyaW5nIGFsbG93ZWQgY2hhcnMgYXJlIGluIHNlY3Rpb24gMzcuNFxuICogdGFibGUgOC4gU3BlYyBmb3IgSUE1U3RyaW5ncyBpcyBcIjEsNiArIFNQQUNFICsgREVMXCIgd2hlcmUgMSByZWZlcnMgdG9cbiAqIElTTyBJUiAjMDAxIChzdGFuZGFyZCBBU0NJSSBjb250cm9sIGNoYXJhY3RlcnMpIGFuZCA2IHJlZmVycyB0byBJU08gSVIgIzAwNlxuICogKHRoZSBiYXNpYyBBU0NJSSBjaGFyYWN0ZXIgc2V0KS5cbiAqL1xuLyogSlNTVFlMRUQgKi9cbnZhciBOT1RfUFJJTlRBQkxFID0gL1teYS16QS1aMC05ICcoKSwrLlxcLzo9Py1dLztcbi8qIEpTU1RZTEVEICovXG52YXIgTk9UX0lBNSA9IC9bXlxceDAwLVxceDdmXS87XG5cbklkZW50aXR5LnByb3RvdHlwZS50b0FzbjEgPSBmdW5jdGlvbiAoZGVyLCB0YWcpIHtcblx0ZGVyLnN0YXJ0U2VxdWVuY2UodGFnKTtcblx0dGhpcy5jb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcblx0XHRkZXIuc3RhcnRTZXF1ZW5jZShhc24xLkJlci5Db25zdHJ1Y3RvciB8IGFzbjEuQmVyLlNldCk7XG5cdFx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblx0XHRkZXIud3JpdGVPSUQoYy5vaWQpO1xuXHRcdC8qXG5cdFx0ICogSWYgd2UgZml0IGluIGEgUHJpbnRhYmxlU3RyaW5nLCB1c2UgdGhhdC4gT3RoZXJ3aXNlIHVzZSBhblxuXHRcdCAqIElBNVN0cmluZyBvciBVVEY4U3RyaW5nLlxuXHRcdCAqXG5cdFx0ICogSWYgdGhpcyBpZGVudGl0eSB3YXMgcGFyc2VkIGZyb20gYSBETiwgdXNlIHRoZSBBU04uMSB0eXBlc1xuXHRcdCAqIGZyb20gdGhlIG9yaWdpbmFsIHJlcHJlc2VudGF0aW9uIChvdGhlcndpc2UgdGhpcyBtaWdodCBub3Rcblx0XHQgKiBiZSBhIGZ1bGwgbWF0Y2ggZm9yIHRoZSBvcmlnaW5hbCBpbiBzb21lIHZhbGlkYXRvcnMpLlxuXHRcdCAqL1xuXHRcdGlmIChjLmFzbjF0eXBlID09PSBhc24xLkJlci5VdGY4U3RyaW5nIHx8XG5cdFx0ICAgIGMudmFsdWUubWF0Y2goTk9UX0lBNSkpIHtcblx0XHRcdHZhciB2ID0gQnVmZmVyLmZyb20oYy52YWx1ZSwgJ3V0ZjgnKTtcblx0XHRcdGRlci53cml0ZUJ1ZmZlcih2LCBhc24xLkJlci5VdGY4U3RyaW5nKTtcblxuXHRcdH0gZWxzZSBpZiAoYy5hc24xdHlwZSA9PT0gYXNuMS5CZXIuSUE1U3RyaW5nIHx8XG5cdFx0ICAgIGMudmFsdWUubWF0Y2goTk9UX1BSSU5UQUJMRSkpIHtcblx0XHRcdGRlci53cml0ZVN0cmluZyhjLnZhbHVlLCBhc24xLkJlci5JQTVTdHJpbmcpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciB0eXBlID0gYXNuMS5CZXIuUHJpbnRhYmxlU3RyaW5nO1xuXHRcdFx0aWYgKGMuYXNuMXR5cGUgIT09IHVuZGVmaW5lZClcblx0XHRcdFx0dHlwZSA9IGMuYXNuMXR5cGU7XG5cdFx0XHRkZXIud3JpdGVTdHJpbmcoYy52YWx1ZSwgdHlwZSk7XG5cdFx0fVxuXHRcdGRlci5lbmRTZXF1ZW5jZSgpO1xuXHRcdGRlci5lbmRTZXF1ZW5jZSgpO1xuXHR9KTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG59O1xuXG5mdW5jdGlvbiBnbG9iTWF0Y2goYSwgYikge1xuXHRpZiAoYSA9PT0gJyoqJyB8fCBiID09PSAnKionKVxuXHRcdHJldHVybiAodHJ1ZSk7XG5cdHZhciBhUGFydHMgPSBhLnNwbGl0KCcuJyk7XG5cdHZhciBiUGFydHMgPSBiLnNwbGl0KCcuJyk7XG5cdGlmIChhUGFydHMubGVuZ3RoICE9PSBiUGFydHMubGVuZ3RoKVxuXHRcdHJldHVybiAoZmFsc2UpO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGFQYXJ0cy5sZW5ndGg7ICsraSkge1xuXHRcdGlmIChhUGFydHNbaV0gPT09ICcqJyB8fCBiUGFydHNbaV0gPT09ICcqJylcblx0XHRcdGNvbnRpbnVlO1xuXHRcdGlmIChhUGFydHNbaV0gIT09IGJQYXJ0c1tpXSlcblx0XHRcdHJldHVybiAoZmFsc2UpO1xuXHR9XG5cdHJldHVybiAodHJ1ZSk7XG59XG5cbklkZW50aXR5LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcblx0aWYgKCFJZGVudGl0eS5pc0lkZW50aXR5KG90aGVyLCBbMSwgMF0pKVxuXHRcdHJldHVybiAoZmFsc2UpO1xuXHRpZiAob3RoZXIuY29tcG9uZW50cy5sZW5ndGggIT09IHRoaXMuY29tcG9uZW50cy5sZW5ndGgpXG5cdFx0cmV0dXJuIChmYWxzZSk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb21wb25lbnRzLmxlbmd0aDsgKytpKSB7XG5cdFx0aWYgKHRoaXMuY29tcG9uZW50c1tpXS5vaWQgIT09IG90aGVyLmNvbXBvbmVudHNbaV0ub2lkKVxuXHRcdFx0cmV0dXJuIChmYWxzZSk7XG5cdFx0aWYgKCFnbG9iTWF0Y2godGhpcy5jb21wb25lbnRzW2ldLnZhbHVlLFxuXHRcdCAgICBvdGhlci5jb21wb25lbnRzW2ldLnZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIChmYWxzZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiAodHJ1ZSk7XG59O1xuXG5JZGVudGl0eS5mb3JIb3N0ID0gZnVuY3Rpb24gKGhvc3RuYW1lKSB7XG5cdGFzc2VydC5zdHJpbmcoaG9zdG5hbWUsICdob3N0bmFtZScpO1xuXHRyZXR1cm4gKG5ldyBJZGVudGl0eSh7XG5cdFx0dHlwZTogJ2hvc3QnLFxuXHRcdGhvc3RuYW1lOiBob3N0bmFtZSxcblx0XHRjb21wb25lbnRzOiBbIHsgbmFtZTogJ2NuJywgdmFsdWU6IGhvc3RuYW1lIH0gXVxuXHR9KSk7XG59O1xuXG5JZGVudGl0eS5mb3JVc2VyID0gZnVuY3Rpb24gKHVpZCkge1xuXHRhc3NlcnQuc3RyaW5nKHVpZCwgJ3VpZCcpO1xuXHRyZXR1cm4gKG5ldyBJZGVudGl0eSh7XG5cdFx0dHlwZTogJ3VzZXInLFxuXHRcdHVpZDogdWlkLFxuXHRcdGNvbXBvbmVudHM6IFsgeyBuYW1lOiAndWlkJywgdmFsdWU6IHVpZCB9IF1cblx0fSkpO1xufTtcblxuSWRlbnRpdHkuZm9yRW1haWwgPSBmdW5jdGlvbiAoZW1haWwpIHtcblx0YXNzZXJ0LnN0cmluZyhlbWFpbCwgJ2VtYWlsJyk7XG5cdHJldHVybiAobmV3IElkZW50aXR5KHtcblx0XHR0eXBlOiAnZW1haWwnLFxuXHRcdGVtYWlsOiBlbWFpbCxcblx0XHRjb21wb25lbnRzOiBbIHsgbmFtZTogJ21haWwnLCB2YWx1ZTogZW1haWwgfSBdXG5cdH0pKTtcbn07XG5cbklkZW50aXR5LnBhcnNlRE4gPSBmdW5jdGlvbiAoZG4pIHtcblx0YXNzZXJ0LnN0cmluZyhkbiwgJ2RuJyk7XG5cdHZhciBwYXJ0cyA9IFsnJ107XG5cdHZhciBpZHggPSAwO1xuXHR2YXIgcmVtID0gZG47XG5cdHdoaWxlIChyZW0ubGVuZ3RoID4gMCkge1xuXHRcdHZhciBtO1xuXHRcdC8qSlNTVFlMRUQqL1xuXHRcdGlmICgobSA9IC9eLC8uZXhlYyhyZW0pKSAhPT0gbnVsbCkge1xuXHRcdFx0cGFydHNbKytpZHhdID0gJyc7XG5cdFx0XHRyZW0gPSByZW0uc2xpY2UobVswXS5sZW5ndGgpO1xuXHRcdC8qSlNTVFlMRUQqL1xuXHRcdH0gZWxzZSBpZiAoKG0gPSAvXlxcXFwsLy5leGVjKHJlbSkpICE9PSBudWxsKSB7XG5cdFx0XHRwYXJ0c1tpZHhdICs9ICcsJztcblx0XHRcdHJlbSA9IHJlbS5zbGljZShtWzBdLmxlbmd0aCk7XG5cdFx0LypKU1NUWUxFRCovXG5cdFx0fSBlbHNlIGlmICgobSA9IC9eXFxcXC4vLmV4ZWMocmVtKSkgIT09IG51bGwpIHtcblx0XHRcdHBhcnRzW2lkeF0gKz0gbVswXTtcblx0XHRcdHJlbSA9IHJlbS5zbGljZShtWzBdLmxlbmd0aCk7XG5cdFx0LypKU1NUWUxFRCovXG5cdFx0fSBlbHNlIGlmICgobSA9IC9eW15cXFxcLF0rLy5leGVjKHJlbSkpICE9PSBudWxsKSB7XG5cdFx0XHRwYXJ0c1tpZHhdICs9IG1bMF07XG5cdFx0XHRyZW0gPSByZW0uc2xpY2UobVswXS5sZW5ndGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKCdGYWlsZWQgdG8gcGFyc2UgRE4nKSk7XG5cdFx0fVxuXHR9XG5cdHZhciBjbXBzID0gcGFydHMubWFwKGZ1bmN0aW9uIChjKSB7XG5cdFx0YyA9IGMudHJpbSgpO1xuXHRcdHZhciBlcVBvcyA9IGMuaW5kZXhPZignPScpO1xuXHRcdHdoaWxlIChlcVBvcyA+IDAgJiYgYy5jaGFyQXQoZXFQb3MgLSAxKSA9PT0gJ1xcXFwnKVxuXHRcdFx0ZXFQb3MgPSBjLmluZGV4T2YoJz0nLCBlcVBvcyArIDEpO1xuXHRcdGlmIChlcVBvcyA9PT0gLTEpIHtcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBETicpKTtcblx0XHR9XG5cdFx0LypKU1NUWUxFRCovXG5cdFx0dmFyIG5hbWUgPSBjLnNsaWNlKDAsIGVxUG9zKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcXFw9L2csICc9Jyk7XG5cdFx0dmFyIHZhbHVlID0gYy5zbGljZShlcVBvcyArIDEpO1xuXHRcdHJldHVybiAoeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSk7XG5cdH0pO1xuXHRyZXR1cm4gKG5ldyBJZGVudGl0eSh7IGNvbXBvbmVudHM6IGNtcHMgfSkpO1xufTtcblxuSWRlbnRpdHkuZnJvbUFycmF5ID0gZnVuY3Rpb24gKGNvbXBvbmVudHMpIHtcblx0YXNzZXJ0LmFycmF5T2ZPYmplY3QoY29tcG9uZW50cywgJ2NvbXBvbmVudHMnKTtcblx0Y29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjbXApIHtcblx0XHRhc3NlcnQub2JqZWN0KGNtcCwgJ2NvbXBvbmVudCcpO1xuXHRcdGFzc2VydC5zdHJpbmcoY21wLm5hbWUsICdjb21wb25lbnQubmFtZScpO1xuXHRcdGlmICghQnVmZmVyLmlzQnVmZmVyKGNtcC52YWx1ZSkgJiZcblx0XHQgICAgISh0eXBlb2YgKGNtcC52YWx1ZSkgPT09ICdzdHJpbmcnKSkge1xuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcignSW52YWxpZCBjb21wb25lbnQgdmFsdWUnKSk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIChuZXcgSWRlbnRpdHkoeyBjb21wb25lbnRzOiBjb21wb25lbnRzIH0pKTtcbn07XG5cbklkZW50aXR5LnBhcnNlQXNuMSA9IGZ1bmN0aW9uIChkZXIsIHRvcCkge1xuXHR2YXIgY29tcG9uZW50cyA9IFtdO1xuXHRkZXIucmVhZFNlcXVlbmNlKHRvcCk7XG5cdHZhciBlbmQgPSBkZXIub2Zmc2V0ICsgZGVyLmxlbmd0aDtcblx0d2hpbGUgKGRlci5vZmZzZXQgPCBlbmQpIHtcblx0XHRkZXIucmVhZFNlcXVlbmNlKGFzbjEuQmVyLkNvbnN0cnVjdG9yIHwgYXNuMS5CZXIuU2V0KTtcblx0XHR2YXIgYWZ0ZXIgPSBkZXIub2Zmc2V0ICsgZGVyLmxlbmd0aDtcblx0XHRkZXIucmVhZFNlcXVlbmNlKCk7XG5cdFx0dmFyIG9pZCA9IGRlci5yZWFkT0lEKCk7XG5cdFx0dmFyIHR5cGUgPSBkZXIucGVlaygpO1xuXHRcdHZhciB2YWx1ZTtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRjYXNlIGFzbjEuQmVyLlByaW50YWJsZVN0cmluZzpcblx0XHRjYXNlIGFzbjEuQmVyLklBNVN0cmluZzpcblx0XHRjYXNlIGFzbjEuQmVyLk9jdGV0U3RyaW5nOlxuXHRcdGNhc2UgYXNuMS5CZXIuVDYxU3RyaW5nOlxuXHRcdFx0dmFsdWUgPSBkZXIucmVhZFN0cmluZyh0eXBlKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgYXNuMS5CZXIuVXRmOFN0cmluZzpcblx0XHRcdHZhbHVlID0gZGVyLnJlYWRTdHJpbmcodHlwZSwgdHJ1ZSk7XG5cdFx0XHR2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCd1dGY4Jyk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIGFzbjEuQmVyLkNoYXJhY3RlclN0cmluZzpcblx0XHRjYXNlIGFzbjEuQmVyLkJNUFN0cmluZzpcblx0XHRcdHZhbHVlID0gZGVyLnJlYWRTdHJpbmcodHlwZSwgdHJ1ZSk7XG5cdFx0XHR2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCd1dGYxNmxlJyk7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBhc24xIHR5cGUgJyArIHR5cGUpKTtcblx0XHR9XG5cdFx0Y29tcG9uZW50cy5wdXNoKHsgb2lkOiBvaWQsIGFzbjF0eXBlOiB0eXBlLCB2YWx1ZTogdmFsdWUgfSk7XG5cdFx0ZGVyLl9vZmZzZXQgPSBhZnRlcjtcblx0fVxuXHRkZXIuX29mZnNldCA9IGVuZDtcblx0cmV0dXJuIChuZXcgSWRlbnRpdHkoe1xuXHRcdGNvbXBvbmVudHM6IGNvbXBvbmVudHNcblx0fSkpO1xufTtcblxuSWRlbnRpdHkuaXNJZGVudGl0eSA9IGZ1bmN0aW9uIChvYmosIHZlcikge1xuXHRyZXR1cm4gKHV0aWxzLmlzQ29tcGF0aWJsZShvYmosIElkZW50aXR5LCB2ZXIpKTtcbn07XG5cbi8qXG4gKiBBUEkgdmVyc2lvbnMgZm9yIElkZW50aXR5OlxuICogWzEsMF0gLS0gaW5pdGlhbCB2ZXJcbiAqL1xuSWRlbnRpdHkucHJvdG90eXBlLl9zc2hwa0FwaVZlcnNpb24gPSBbMSwgMF07XG5cbklkZW50aXR5Ll9vbGRWZXJzaW9uRGV0ZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuXHRyZXR1cm4gKFsxLCAwXSk7XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTIgSm95ZW50LCBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBzc2hwayA9IHJlcXVpcmUoJ3NzaHBrJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIEhBU0hfQUxHT1MgPSB7XG4gICdzaGExJzogdHJ1ZSxcbiAgJ3NoYTI1Nic6IHRydWUsXG4gICdzaGE1MTInOiB0cnVlXG59O1xuXG52YXIgUEtfQUxHT1MgPSB7XG4gICdyc2EnOiB0cnVlLFxuICAnZHNhJzogdHJ1ZSxcbiAgJ2VjZHNhJzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gSHR0cFNpZ25hdHVyZUVycm9yKG1lc3NhZ2UsIGNhbGxlcikge1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgY2FsbGVyIHx8IEh0dHBTaWduYXR1cmVFcnJvcik7XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gY2FsbGVyLm5hbWU7XG59XG51dGlsLmluaGVyaXRzKEh0dHBTaWduYXR1cmVFcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiBJbnZhbGlkQWxnb3JpdGhtRXJyb3IobWVzc2FnZSkge1xuICBIdHRwU2lnbmF0dXJlRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlLCBJbnZhbGlkQWxnb3JpdGhtRXJyb3IpO1xufVxudXRpbC5pbmhlcml0cyhJbnZhbGlkQWxnb3JpdGhtRXJyb3IsIEh0dHBTaWduYXR1cmVFcnJvcik7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQWxnb3JpdGhtKGFsZ29yaXRobSkge1xuICB2YXIgYWxnID0gYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCkuc3BsaXQoJy0nKTtcblxuICBpZiAoYWxnLmxlbmd0aCAhPT0gMikge1xuICAgIHRocm93IChuZXcgSW52YWxpZEFsZ29yaXRobUVycm9yKGFsZ1swXS50b1VwcGVyQ2FzZSgpICsgJyBpcyBub3QgYSAnICtcbiAgICAgICd2YWxpZCBhbGdvcml0aG0nKSk7XG4gIH1cblxuICBpZiAoYWxnWzBdICE9PSAnaG1hYycgJiYgIVBLX0FMR09TW2FsZ1swXV0pIHtcbiAgICB0aHJvdyAobmV3IEludmFsaWRBbGdvcml0aG1FcnJvcihhbGdbMF0udG9VcHBlckNhc2UoKSArICcgdHlwZSBrZXlzICcgK1xuICAgICAgJ2FyZSBub3Qgc3VwcG9ydGVkJykpO1xuICB9XG5cbiAgaWYgKCFIQVNIX0FMR09TW2FsZ1sxXV0pIHtcbiAgICB0aHJvdyAobmV3IEludmFsaWRBbGdvcml0aG1FcnJvcihhbGdbMV0udG9VcHBlckNhc2UoKSArICcgaXMgbm90IGEgJyArXG4gICAgICAnc3VwcG9ydGVkIGhhc2ggYWxnb3JpdGhtJykpO1xuICB9XG5cbiAgcmV0dXJuIChhbGcpO1xufVxuXG4vLy8tLS0gQVBJXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIEhBU0hfQUxHT1M6IEhBU0hfQUxHT1MsXG4gIFBLX0FMR09TOiBQS19BTEdPUyxcblxuICBIdHRwU2lnbmF0dXJlRXJyb3I6IEh0dHBTaWduYXR1cmVFcnJvcixcbiAgSW52YWxpZEFsZ29yaXRobUVycm9yOiBJbnZhbGlkQWxnb3JpdGhtRXJyb3IsXG5cbiAgdmFsaWRhdGVBbGdvcml0aG06IHZhbGlkYXRlQWxnb3JpdGhtLFxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBPcGVuU1NIIHB1YmxpYyBrZXkgKHJzYSBvbmx5KSB0byBhIFBLQ1MjOCBQRU0gZmlsZS5cbiAgICpcbiAgICogVGhlIGludGVudCBvZiB0aGlzIG1vZHVsZSBpcyB0byBpbnRlcm9wZXJhdGUgd2l0aCBPcGVuU1NMIG9ubHksXG4gICAqIHNwZWNpZmljYWxseSB0aGUgbm9kZSBjcnlwdG8gbW9kdWxlJ3MgYHZlcmlmeWAgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IGFuIE9wZW5TU0ggcHVibGljIGtleS5cbiAgICogQHJldHVybiB7U3RyaW5nfSBQRU0gZW5jb2RlZCBmb3JtIG9mIHRoZSBSU0EgcHVibGljIGtleS5cbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBvbiBiYWQgaW5wdXQuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBvbiBpbnZhbGlkIHNzaCBrZXkgZm9ybWF0dGVkIGRhdGEuXG4gICAqL1xuICBzc2hLZXlUb1BFTTogZnVuY3Rpb24gc3NoS2V5VG9QRU0oa2V5KSB7XG4gICAgYXNzZXJ0LnN0cmluZyhrZXksICdzc2hfa2V5Jyk7XG5cbiAgICB2YXIgayA9IHNzaHBrLnBhcnNlS2V5KGtleSwgJ3NzaCcpO1xuICAgIHJldHVybiAoay50b1N0cmluZygncGVtJykpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhbiBPcGVuU1NIIGZpbmdlcnByaW50IGZyb20gYW4gc3NoIHB1YmxpYyBrZXkuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgYW4gT3BlblNTSCBwdWJsaWMga2V5LlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IGtleSBmaW5nZXJwcmludC5cbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBvbiBiYWQgaW5wdXQuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBpZiB3aGF0IHlvdSBwYXNzZWQgZG9lc24ndCBsb29rIGxpa2UgYW4gc3NoIHB1YmxpYyBrZXkuXG4gICAqL1xuICBmaW5nZXJwcmludDogZnVuY3Rpb24gZmluZ2VycHJpbnQoa2V5KSB7XG4gICAgYXNzZXJ0LnN0cmluZyhrZXksICdzc2hfa2V5Jyk7XG5cbiAgICB2YXIgayA9IHNzaHBrLnBhcnNlS2V5KGtleSwgJ3NzaCcpO1xuICAgIHJldHVybiAoay5maW5nZXJwcmludCgnbWQ1JykudG9TdHJpbmcoJ2hleCcpKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29udmVydHMgYSBQS0dDUyM4IFBFTSBmaWxlIHRvIGFuIE9wZW5TU0ggcHVibGljIGtleSAocnNhKVxuICAgKlxuICAgKiBUaGUgcmV2ZXJzZSBvZiB0aGUgYWJvdmUgZnVuY3Rpb24uXG4gICAqL1xuICBwZW1Ub1JzYVNTSEtleTogZnVuY3Rpb24gcGVtVG9Sc2FTU0hLZXkocGVtLCBjb21tZW50KSB7XG4gICAgYXNzZXJ0LmVxdWFsKCdzdHJpbmcnLCB0eXBlb2YgKHBlbSksICd0eXBlb2YgcGVtJyk7XG5cbiAgICB2YXIgayA9IHNzaHBrLnBhcnNlS2V5KHBlbSwgJ3BlbScpO1xuICAgIGsuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgcmV0dXJuIChrLnRvU3RyaW5nKCdzc2gnKSk7XG4gIH1cbn07XG4iLCIvLyBCYXNpYyBKYXZhc2NyaXB0IEVsbGlwdGljIEN1cnZlIGltcGxlbWVudGF0aW9uXG4vLyBQb3J0ZWQgbG9vc2VseSBmcm9tIEJvdW5jeUNhc3RsZSdzIEphdmEgRUMgY29kZVxuLy8gT25seSBGcCBjdXJ2ZXMgaW1wbGVtZW50ZWQgZm9yIG5vd1xuXG4vLyBSZXF1aXJlcyBqc2JuLmpzIGFuZCBqc2JuMi5qc1xudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdqc2JuJykuQmlnSW50ZWdlclxudmFyIEJhcnJldHQgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5CYXJyZXR0XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS1cbi8vIEVDRmllbGRFbGVtZW50RnBcblxuLy8gY29uc3RydWN0b3JcbmZ1bmN0aW9uIEVDRmllbGRFbGVtZW50RnAocSx4KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICAvLyBUT0RPIGlmKHguY29tcGFyZVRvKHEpID49IDApIGVycm9yXG4gICAgdGhpcy5xID0gcTtcbn1cblxuZnVuY3Rpb24gZmVGcEVxdWFscyhvdGhlcikge1xuICAgIGlmKG90aGVyID09IHRoaXMpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiAodGhpcy5xLmVxdWFscyhvdGhlci5xKSAmJiB0aGlzLnguZXF1YWxzKG90aGVyLngpKTtcbn1cblxuZnVuY3Rpb24gZmVGcFRvQmlnSW50ZWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy54O1xufVxuXG5mdW5jdGlvbiBmZUZwTmVnYXRlKCkge1xuICAgIHJldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsIHRoaXMueC5uZWdhdGUoKS5tb2QodGhpcy5xKSk7XG59XG5cbmZ1bmN0aW9uIGZlRnBBZGQoYikge1xuICAgIHJldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsIHRoaXMueC5hZGQoYi50b0JpZ0ludGVnZXIoKSkubW9kKHRoaXMucSkpO1xufVxuXG5mdW5jdGlvbiBmZUZwU3VidHJhY3QoYikge1xuICAgIHJldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsIHRoaXMueC5zdWJ0cmFjdChiLnRvQmlnSW50ZWdlcigpKS5tb2QodGhpcy5xKSk7XG59XG5cbmZ1bmN0aW9uIGZlRnBNdWx0aXBseShiKSB7XG4gICAgcmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSwgdGhpcy54Lm11bHRpcGx5KGIudG9CaWdJbnRlZ2VyKCkpLm1vZCh0aGlzLnEpKTtcbn1cblxuZnVuY3Rpb24gZmVGcFNxdWFyZSgpIHtcbiAgICByZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLCB0aGlzLnguc3F1YXJlKCkubW9kKHRoaXMucSkpO1xufVxuXG5mdW5jdGlvbiBmZUZwRGl2aWRlKGIpIHtcbiAgICByZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLCB0aGlzLngubXVsdGlwbHkoYi50b0JpZ0ludGVnZXIoKS5tb2RJbnZlcnNlKHRoaXMucSkpLm1vZCh0aGlzLnEpKTtcbn1cblxuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuZXF1YWxzID0gZmVGcEVxdWFscztcbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnRvQmlnSW50ZWdlciA9IGZlRnBUb0JpZ0ludGVnZXI7XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5uZWdhdGUgPSBmZUZwTmVnYXRlO1xuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuYWRkID0gZmVGcEFkZDtcbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnN1YnRyYWN0ID0gZmVGcFN1YnRyYWN0O1xuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUubXVsdGlwbHkgPSBmZUZwTXVsdGlwbHk7XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5zcXVhcmUgPSBmZUZwU3F1YXJlO1xuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuZGl2aWRlID0gZmVGcERpdmlkZTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLVxuLy8gRUNQb2ludEZwXG5cbi8vIGNvbnN0cnVjdG9yXG5mdW5jdGlvbiBFQ1BvaW50RnAoY3VydmUseCx5LHopIHtcbiAgICB0aGlzLmN1cnZlID0gY3VydmU7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIC8vIFByb2plY3RpdmUgY29vcmRpbmF0ZXM6IGVpdGhlciB6aW52ID09IG51bGwgb3IgeiAqIHppbnYgPT0gMVxuICAgIC8vIHogYW5kIHppbnYgYXJlIGp1c3QgQmlnSW50ZWdlcnMsIG5vdCBmaWVsZEVsZW1lbnRzXG4gICAgaWYoeiA9PSBudWxsKSB7XG4gICAgICB0aGlzLnogPSBCaWdJbnRlZ2VyLk9ORTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnogPSB6O1xuICAgIH1cbiAgICB0aGlzLnppbnYgPSBudWxsO1xuICAgIC8vVE9ETzogY29tcHJlc3Npb24gZmxhZ1xufVxuXG5mdW5jdGlvbiBwb2ludEZwR2V0WCgpIHtcbiAgICBpZih0aGlzLnppbnYgPT0gbnVsbCkge1xuICAgICAgdGhpcy56aW52ID0gdGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5xKTtcbiAgICB9XG4gICAgdmFyIHIgPSB0aGlzLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56aW52KTtcbiAgICB0aGlzLmN1cnZlLnJlZHVjZShyKTtcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihyKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRGcEdldFkoKSB7XG4gICAgaWYodGhpcy56aW52ID09IG51bGwpIHtcbiAgICAgIHRoaXMuemludiA9IHRoaXMuei5tb2RJbnZlcnNlKHRoaXMuY3VydmUucSk7XG4gICAgfVxuICAgIHZhciByID0gdGhpcy55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMuemludik7XG4gICAgdGhpcy5jdXJ2ZS5yZWR1Y2Uocik7XG4gICAgcmV0dXJuIHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIocik7XG59XG5cbmZ1bmN0aW9uIHBvaW50RnBFcXVhbHMob3RoZXIpIHtcbiAgICBpZihvdGhlciA9PSB0aGlzKSByZXR1cm4gdHJ1ZTtcbiAgICBpZih0aGlzLmlzSW5maW5pdHkoKSkgcmV0dXJuIG90aGVyLmlzSW5maW5pdHkoKTtcbiAgICBpZihvdGhlci5pc0luZmluaXR5KCkpIHJldHVybiB0aGlzLmlzSW5maW5pdHkoKTtcbiAgICB2YXIgdSwgdjtcbiAgICAvLyB1ID0gWTIgKiBaMSAtIFkxICogWjJcbiAgICB1ID0gb3RoZXIueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShvdGhlci56KSkubW9kKHRoaXMuY3VydmUucSk7XG4gICAgaWYoIXUuZXF1YWxzKEJpZ0ludGVnZXIuWkVSTykpIHJldHVybiBmYWxzZTtcbiAgICAvLyB2ID0gWDIgKiBaMSAtIFgxICogWjJcbiAgICB2ID0gb3RoZXIueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShvdGhlci56KSkubW9kKHRoaXMuY3VydmUucSk7XG4gICAgcmV0dXJuIHYuZXF1YWxzKEJpZ0ludGVnZXIuWkVSTyk7XG59XG5cbmZ1bmN0aW9uIHBvaW50RnBJc0luZmluaXR5KCkge1xuICAgIGlmKCh0aGlzLnggPT0gbnVsbCkgJiYgKHRoaXMueSA9PSBudWxsKSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIHRoaXMuei5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKSAmJiAhdGhpcy55LnRvQmlnSW50ZWdlcigpLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pO1xufVxuXG5mdW5jdGlvbiBwb2ludEZwTmVnYXRlKCkge1xuICAgIHJldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsIHRoaXMueCwgdGhpcy55Lm5lZ2F0ZSgpLCB0aGlzLnopO1xufVxuXG5mdW5jdGlvbiBwb2ludEZwQWRkKGIpIHtcbiAgICBpZih0aGlzLmlzSW5maW5pdHkoKSkgcmV0dXJuIGI7XG4gICAgaWYoYi5pc0luZmluaXR5KCkpIHJldHVybiB0aGlzO1xuXG4gICAgLy8gdSA9IFkyICogWjEgLSBZMSAqIFoyXG4gICAgdmFyIHUgPSBiLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkoYi56KSkubW9kKHRoaXMuY3VydmUucSk7XG4gICAgLy8gdiA9IFgyICogWjEgLSBYMSAqIFoyXG4gICAgdmFyIHYgPSBiLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkoYi56KSkubW9kKHRoaXMuY3VydmUucSk7XG5cbiAgICBpZihCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKHYpKSB7XG4gICAgICAgIGlmKEJpZ0ludGVnZXIuWkVSTy5lcXVhbHModSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnR3aWNlKCk7IC8vIHRoaXMgPT0gYiwgc28gZG91YmxlXG4gICAgICAgIH1cblx0cmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKTsgLy8gdGhpcyA9IC1iLCBzbyBpbmZpbml0eVxuICAgIH1cblxuICAgIHZhciBUSFJFRSA9IG5ldyBCaWdJbnRlZ2VyKFwiM1wiKTtcbiAgICB2YXIgeDEgPSB0aGlzLngudG9CaWdJbnRlZ2VyKCk7XG4gICAgdmFyIHkxID0gdGhpcy55LnRvQmlnSW50ZWdlcigpO1xuICAgIHZhciB4MiA9IGIueC50b0JpZ0ludGVnZXIoKTtcbiAgICB2YXIgeTIgPSBiLnkudG9CaWdJbnRlZ2VyKCk7XG5cbiAgICB2YXIgdjIgPSB2LnNxdWFyZSgpO1xuICAgIHZhciB2MyA9IHYyLm11bHRpcGx5KHYpO1xuICAgIHZhciB4MXYyID0geDEubXVsdGlwbHkodjIpO1xuICAgIHZhciB6dTIgPSB1LnNxdWFyZSgpLm11bHRpcGx5KHRoaXMueik7XG5cbiAgICAvLyB4MyA9IHYgKiAoejIgKiAoejEgKiB1XjIgLSAyICogeDEgKiB2XjIpIC0gdl4zKVxuICAgIHZhciB4MyA9IHp1Mi5zdWJ0cmFjdCh4MXYyLnNoaWZ0TGVmdCgxKSkubXVsdGlwbHkoYi56KS5zdWJ0cmFjdCh2MykubXVsdGlwbHkodikubW9kKHRoaXMuY3VydmUucSk7XG4gICAgLy8geTMgPSB6MiAqICgzICogeDEgKiB1ICogdl4yIC0geTEgKiB2XjMgLSB6MSAqIHVeMykgKyB1ICogdl4zXG4gICAgdmFyIHkzID0geDF2Mi5tdWx0aXBseShUSFJFRSkubXVsdGlwbHkodSkuc3VidHJhY3QoeTEubXVsdGlwbHkodjMpKS5zdWJ0cmFjdCh6dTIubXVsdGlwbHkodSkpLm11bHRpcGx5KGIueikuYWRkKHUubXVsdGlwbHkodjMpKS5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICAvLyB6MyA9IHZeMyAqIHoxICogejJcbiAgICB2YXIgejMgPSB2My5tdWx0aXBseSh0aGlzLnopLm11bHRpcGx5KGIueikubW9kKHRoaXMuY3VydmUucSk7XG5cbiAgICByZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLCB0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKHgzKSwgdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih5MyksIHozKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRGcFR3aWNlKCkge1xuICAgIGlmKHRoaXMuaXNJbmZpbml0eSgpKSByZXR1cm4gdGhpcztcbiAgICBpZih0aGlzLnkudG9CaWdJbnRlZ2VyKCkuc2lnbnVtKCkgPT0gMCkgcmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKTtcblxuICAgIC8vIFRPRE86IG9wdGltaXplZCBoYW5kbGluZyBvZiBjb25zdGFudHNcbiAgICB2YXIgVEhSRUUgPSBuZXcgQmlnSW50ZWdlcihcIjNcIik7XG4gICAgdmFyIHgxID0gdGhpcy54LnRvQmlnSW50ZWdlcigpO1xuICAgIHZhciB5MSA9IHRoaXMueS50b0JpZ0ludGVnZXIoKTtcblxuICAgIHZhciB5MXoxID0geTEubXVsdGlwbHkodGhpcy56KTtcbiAgICB2YXIgeTFzcXoxID0geTF6MS5tdWx0aXBseSh5MSkubW9kKHRoaXMuY3VydmUucSk7XG4gICAgdmFyIGEgPSB0aGlzLmN1cnZlLmEudG9CaWdJbnRlZ2VyKCk7XG5cbiAgICAvLyB3ID0gMyAqIHgxXjIgKyBhICogejFeMlxuICAgIHZhciB3ID0geDEuc3F1YXJlKCkubXVsdGlwbHkoVEhSRUUpO1xuICAgIGlmKCFCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKGEpKSB7XG4gICAgICB3ID0gdy5hZGQodGhpcy56LnNxdWFyZSgpLm11bHRpcGx5KGEpKTtcbiAgICB9XG4gICAgdyA9IHcubW9kKHRoaXMuY3VydmUucSk7XG4gICAgLy90aGlzLmN1cnZlLnJlZHVjZSh3KTtcbiAgICAvLyB4MyA9IDIgKiB5MSAqIHoxICogKHdeMiAtIDggKiB4MSAqIHkxXjIgKiB6MSlcbiAgICB2YXIgeDMgPSB3LnNxdWFyZSgpLnN1YnRyYWN0KHgxLnNoaWZ0TGVmdCgzKS5tdWx0aXBseSh5MXNxejEpKS5zaGlmdExlZnQoMSkubXVsdGlwbHkoeTF6MSkubW9kKHRoaXMuY3VydmUucSk7XG4gICAgLy8geTMgPSA0ICogeTFeMiAqIHoxICogKDMgKiB3ICogeDEgLSAyICogeTFeMiAqIHoxKSAtIHdeM1xuICAgIHZhciB5MyA9IHcubXVsdGlwbHkoVEhSRUUpLm11bHRpcGx5KHgxKS5zdWJ0cmFjdCh5MXNxejEuc2hpZnRMZWZ0KDEpKS5zaGlmdExlZnQoMikubXVsdGlwbHkoeTFzcXoxKS5zdWJ0cmFjdCh3LnNxdWFyZSgpLm11bHRpcGx5KHcpKS5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICAvLyB6MyA9IDggKiAoeTEgKiB6MSleM1xuICAgIHZhciB6MyA9IHkxejEuc3F1YXJlKCkubXVsdGlwbHkoeTF6MSkuc2hpZnRMZWZ0KDMpLm1vZCh0aGlzLmN1cnZlLnEpO1xuXG4gICAgcmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcy5jdXJ2ZSwgdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih4MyksIHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoeTMpLCB6Myk7XG59XG5cbi8vIFNpbXBsZSBOQUYgKE5vbi1BZGphY2VudCBGb3JtKSBtdWx0aXBsaWNhdGlvbiBhbGdvcml0aG1cbi8vIFRPRE86IG1vZHVsYXJpemUgdGhlIG11bHRpcGxpY2F0aW9uIGFsZ29yaXRobVxuZnVuY3Rpb24gcG9pbnRGcE11bHRpcGx5KGspIHtcbiAgICBpZih0aGlzLmlzSW5maW5pdHkoKSkgcmV0dXJuIHRoaXM7XG4gICAgaWYoay5zaWdudW0oKSA9PSAwKSByZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpO1xuXG4gICAgdmFyIGUgPSBrO1xuICAgIHZhciBoID0gZS5tdWx0aXBseShuZXcgQmlnSW50ZWdlcihcIjNcIikpO1xuXG4gICAgdmFyIG5lZyA9IHRoaXMubmVnYXRlKCk7XG4gICAgdmFyIFIgPSB0aGlzO1xuXG4gICAgdmFyIGk7XG4gICAgZm9yKGkgPSBoLmJpdExlbmd0aCgpIC0gMjsgaSA+IDA7IC0taSkge1xuXHRSID0gUi50d2ljZSgpO1xuXG5cdHZhciBoQml0ID0gaC50ZXN0Qml0KGkpO1xuXHR2YXIgZUJpdCA9IGUudGVzdEJpdChpKTtcblxuXHRpZiAoaEJpdCAhPSBlQml0KSB7XG5cdCAgICBSID0gUi5hZGQoaEJpdCA/IHRoaXMgOiBuZWcpO1xuXHR9XG4gICAgfVxuXG4gICAgcmV0dXJuIFI7XG59XG5cbi8vIENvbXB1dGUgdGhpcypqICsgeCprIChzaW11bHRhbmVvdXMgbXVsdGlwbGljYXRpb24pXG5mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHlUd28oaix4LGspIHtcbiAgdmFyIGk7XG4gIGlmKGouYml0TGVuZ3RoKCkgPiBrLmJpdExlbmd0aCgpKVxuICAgIGkgPSBqLmJpdExlbmd0aCgpIC0gMTtcbiAgZWxzZVxuICAgIGkgPSBrLmJpdExlbmd0aCgpIC0gMTtcblxuICB2YXIgUiA9IHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKTtcbiAgdmFyIGJvdGggPSB0aGlzLmFkZCh4KTtcbiAgd2hpbGUoaSA+PSAwKSB7XG4gICAgUiA9IFIudHdpY2UoKTtcbiAgICBpZihqLnRlc3RCaXQoaSkpIHtcbiAgICAgIGlmKGsudGVzdEJpdChpKSkge1xuICAgICAgICBSID0gUi5hZGQoYm90aCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgUiA9IFIuYWRkKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmKGsudGVzdEJpdChpKSkge1xuICAgICAgICBSID0gUi5hZGQoeCk7XG4gICAgICB9XG4gICAgfVxuICAgIC0taTtcbiAgfVxuXG4gIHJldHVybiBSO1xufVxuXG5FQ1BvaW50RnAucHJvdG90eXBlLmdldFggPSBwb2ludEZwR2V0WDtcbkVDUG9pbnRGcC5wcm90b3R5cGUuZ2V0WSA9IHBvaW50RnBHZXRZO1xuRUNQb2ludEZwLnByb3RvdHlwZS5lcXVhbHMgPSBwb2ludEZwRXF1YWxzO1xuRUNQb2ludEZwLnByb3RvdHlwZS5pc0luZmluaXR5ID0gcG9pbnRGcElzSW5maW5pdHk7XG5FQ1BvaW50RnAucHJvdG90eXBlLm5lZ2F0ZSA9IHBvaW50RnBOZWdhdGU7XG5FQ1BvaW50RnAucHJvdG90eXBlLmFkZCA9IHBvaW50RnBBZGQ7XG5FQ1BvaW50RnAucHJvdG90eXBlLnR3aWNlID0gcG9pbnRGcFR3aWNlO1xuRUNQb2ludEZwLnByb3RvdHlwZS5tdWx0aXBseSA9IHBvaW50RnBNdWx0aXBseTtcbkVDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHlUd28gPSBwb2ludEZwTXVsdGlwbHlUd287XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS1cbi8vIEVDQ3VydmVGcFxuXG4vLyBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gRUNDdXJ2ZUZwKHEsYSxiKSB7XG4gICAgdGhpcy5xID0gcTtcbiAgICB0aGlzLmEgPSB0aGlzLmZyb21CaWdJbnRlZ2VyKGEpO1xuICAgIHRoaXMuYiA9IHRoaXMuZnJvbUJpZ0ludGVnZXIoYik7XG4gICAgdGhpcy5pbmZpbml0eSA9IG5ldyBFQ1BvaW50RnAodGhpcywgbnVsbCwgbnVsbCk7XG4gICAgdGhpcy5yZWR1Y2VyID0gbmV3IEJhcnJldHQodGhpcy5xKTtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEdldFEoKSB7XG4gICAgcmV0dXJuIHRoaXMucTtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEdldEEoKSB7XG4gICAgcmV0dXJuIHRoaXMuYTtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEdldEIoKSB7XG4gICAgcmV0dXJuIHRoaXMuYjtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEVxdWFscyhvdGhlcikge1xuICAgIGlmKG90aGVyID09IHRoaXMpIHJldHVybiB0cnVlO1xuICAgIHJldHVybih0aGlzLnEuZXF1YWxzKG90aGVyLnEpICYmIHRoaXMuYS5lcXVhbHMob3RoZXIuYSkgJiYgdGhpcy5iLmVxdWFscyhvdGhlci5iKSk7XG59XG5cbmZ1bmN0aW9uIGN1cnZlRnBHZXRJbmZpbml0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5pbmZpbml0eTtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEZyb21CaWdJbnRlZ2VyKHgpIHtcbiAgICByZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLCB4KTtcbn1cblxuZnVuY3Rpb24gY3VydmVSZWR1Y2UoeCkge1xuICAgIHRoaXMucmVkdWNlci5yZWR1Y2UoeCk7XG59XG5cbi8vIGZvciBub3csIHdvcmsgd2l0aCBoZXggc3RyaW5ncyBiZWNhdXNlIHRoZXkncmUgZWFzaWVyIGluIEpTXG5mdW5jdGlvbiBjdXJ2ZUZwRGVjb2RlUG9pbnRIZXgocykge1xuICAgIHN3aXRjaChwYXJzZUludChzLnN1YnN0cigwLDIpLCAxNikpIHsgLy8gZmlyc3QgYnl0ZVxuICAgIGNhc2UgMDpcblx0cmV0dXJuIHRoaXMuaW5maW5pdHk7XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcblx0Ly8gcG9pbnQgY29tcHJlc3Npb24gbm90IHN1cHBvcnRlZCB5ZXRcblx0cmV0dXJuIG51bGw7XG4gICAgY2FzZSA0OlxuICAgIGNhc2UgNjpcbiAgICBjYXNlIDc6XG5cdHZhciBsZW4gPSAocy5sZW5ndGggLSAyKSAvIDI7XG5cdHZhciB4SGV4ID0gcy5zdWJzdHIoMiwgbGVuKTtcblx0dmFyIHlIZXggPSBzLnN1YnN0cihsZW4rMiwgbGVuKTtcblxuXHRyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLFxuXHRcdFx0ICAgICB0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHhIZXgsIDE2KSksXG5cdFx0XHQgICAgIHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoeUhleCwgMTYpKSk7XG5cbiAgICBkZWZhdWx0OiAvLyB1bnN1cHBvcnRlZFxuXHRyZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGN1cnZlRnBFbmNvZGVQb2ludEhleChwKSB7XG5cdGlmIChwLmlzSW5maW5pdHkoKSkgcmV0dXJuIFwiMDBcIjtcblx0dmFyIHhIZXggPSBwLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNik7XG5cdHZhciB5SGV4ID0gcC5nZXRZKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoMTYpO1xuXHR2YXIgb0xlbiA9IHRoaXMuZ2V0USgpLnRvU3RyaW5nKDE2KS5sZW5ndGg7XG5cdGlmICgob0xlbiAlIDIpICE9IDApIG9MZW4rKztcblx0d2hpbGUgKHhIZXgubGVuZ3RoIDwgb0xlbikge1xuXHRcdHhIZXggPSBcIjBcIiArIHhIZXg7XG5cdH1cblx0d2hpbGUgKHlIZXgubGVuZ3RoIDwgb0xlbikge1xuXHRcdHlIZXggPSBcIjBcIiArIHlIZXg7XG5cdH1cblx0cmV0dXJuIFwiMDRcIiArIHhIZXggKyB5SGV4O1xufVxuXG5FQ0N1cnZlRnAucHJvdG90eXBlLmdldFEgPSBjdXJ2ZUZwR2V0UTtcbkVDQ3VydmVGcC5wcm90b3R5cGUuZ2V0QSA9IGN1cnZlRnBHZXRBO1xuRUNDdXJ2ZUZwLnByb3RvdHlwZS5nZXRCID0gY3VydmVGcEdldEI7XG5FQ0N1cnZlRnAucHJvdG90eXBlLmVxdWFscyA9IGN1cnZlRnBFcXVhbHM7XG5FQ0N1cnZlRnAucHJvdG90eXBlLmdldEluZmluaXR5ID0gY3VydmVGcEdldEluZmluaXR5O1xuRUNDdXJ2ZUZwLnByb3RvdHlwZS5mcm9tQmlnSW50ZWdlciA9IGN1cnZlRnBGcm9tQmlnSW50ZWdlcjtcbkVDQ3VydmVGcC5wcm90b3R5cGUucmVkdWNlID0gY3VydmVSZWR1Y2U7XG4vL0VDQ3VydmVGcC5wcm90b3R5cGUuZGVjb2RlUG9pbnRIZXggPSBjdXJ2ZUZwRGVjb2RlUG9pbnRIZXg7XG5FQ0N1cnZlRnAucHJvdG90eXBlLmVuY29kZVBvaW50SGV4ID0gY3VydmVGcEVuY29kZVBvaW50SGV4O1xuXG4vLyBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20va2FpZWx2aW4vanNibi1lYy1wb2ludC1jb21wcmVzc2lvblxuRUNDdXJ2ZUZwLnByb3RvdHlwZS5kZWNvZGVQb2ludEhleCA9IGZ1bmN0aW9uKHMpXG57XG5cdHZhciB5SXNFdmVuO1xuICAgIHN3aXRjaChwYXJzZUludChzLnN1YnN0cigwLDIpLCAxNikpIHsgLy8gZmlyc3QgYnl0ZVxuICAgIGNhc2UgMDpcblx0cmV0dXJuIHRoaXMuaW5maW5pdHk7XG4gICAgY2FzZSAyOlxuXHR5SXNFdmVuID0gZmFsc2U7XG4gICAgY2FzZSAzOlxuXHRpZih5SXNFdmVuID09IHVuZGVmaW5lZCkgeUlzRXZlbiA9IHRydWU7XG5cdHZhciBsZW4gPSBzLmxlbmd0aCAtIDI7XG5cdHZhciB4SGV4ID0gcy5zdWJzdHIoMiwgbGVuKTtcblx0dmFyIHggPSB0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHhIZXgsMTYpKTtcblx0dmFyIGFscGhhID0geC5tdWx0aXBseSh4LnNxdWFyZSgpLmFkZCh0aGlzLmdldEEoKSkpLmFkZCh0aGlzLmdldEIoKSk7XG5cdHZhciBiZXRhID0gYWxwaGEuc3FydCgpO1xuXG4gICAgaWYgKGJldGEgPT0gbnVsbCkgdGhyb3cgXCJJbnZhbGlkIHBvaW50IGNvbXByZXNzaW9uXCI7XG5cbiAgICB2YXIgYmV0YVZhbHVlID0gYmV0YS50b0JpZ0ludGVnZXIoKTtcbiAgICBpZiAoYmV0YVZhbHVlLnRlc3RCaXQoMCkgIT0geUlzRXZlbilcbiAgICB7XG4gICAgICAgIC8vIFVzZSB0aGUgb3RoZXIgcm9vdFxuICAgICAgICBiZXRhID0gdGhpcy5mcm9tQmlnSW50ZWdlcih0aGlzLmdldFEoKS5zdWJ0cmFjdChiZXRhVmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcyx4LGJldGEpO1xuICAgIGNhc2UgNDpcbiAgICBjYXNlIDY6XG4gICAgY2FzZSA3OlxuXHR2YXIgbGVuID0gKHMubGVuZ3RoIC0gMikgLyAyO1xuXHR2YXIgeEhleCA9IHMuc3Vic3RyKDIsIGxlbik7XG5cdHZhciB5SGV4ID0gcy5zdWJzdHIobGVuKzIsIGxlbik7XG5cblx0cmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcyxcblx0XHRcdCAgICAgdGhpcy5mcm9tQmlnSW50ZWdlcihuZXcgQmlnSW50ZWdlcih4SGV4LCAxNikpLFxuXHRcdFx0ICAgICB0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHlIZXgsIDE2KSkpO1xuXG4gICAgZGVmYXVsdDogLy8gdW5zdXBwb3J0ZWRcblx0cmV0dXJuIG51bGw7XG4gICAgfVxufVxuRUNDdXJ2ZUZwLnByb3RvdHlwZS5lbmNvZGVDb21wcmVzc2VkUG9pbnRIZXggPSBmdW5jdGlvbihwKVxue1xuXHRpZiAocC5pc0luZmluaXR5KCkpIHJldHVybiBcIjAwXCI7XG5cdHZhciB4SGV4ID0gcC5nZXRYKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoMTYpO1xuXHR2YXIgb0xlbiA9IHRoaXMuZ2V0USgpLnRvU3RyaW5nKDE2KS5sZW5ndGg7XG5cdGlmICgob0xlbiAlIDIpICE9IDApIG9MZW4rKztcblx0d2hpbGUgKHhIZXgubGVuZ3RoIDwgb0xlbilcblx0XHR4SGV4ID0gXCIwXCIgKyB4SGV4O1xuXHR2YXIgeVByZWZpeDtcblx0aWYocC5nZXRZKCkudG9CaWdJbnRlZ2VyKCkuaXNFdmVuKCkpIHlQcmVmaXggPSBcIjAyXCI7XG5cdGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5UHJlZml4ID0gXCIwM1wiO1xuXG5cdHJldHVybiB5UHJlZml4ICsgeEhleDtcbn1cblxuXG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5nZXRSID0gZnVuY3Rpb24oKVxue1xuXHRpZih0aGlzLnIgIT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5yO1xuXG4gICAgdGhpcy5yID0gbnVsbDtcbiAgICB2YXIgYml0TGVuZ3RoID0gdGhpcy5xLmJpdExlbmd0aCgpO1xuICAgIGlmIChiaXRMZW5ndGggPiAxMjgpXG4gICAge1xuICAgICAgICB2YXIgZmlyc3RXb3JkID0gdGhpcy5xLnNoaWZ0UmlnaHQoYml0TGVuZ3RoIC0gNjQpO1xuICAgICAgICBpZiAoZmlyc3RXb3JkLmludFZhbHVlKCkgPT0gLTEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuciA9IEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChiaXRMZW5ndGgpLnN1YnRyYWN0KHRoaXMucSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucjtcbn1cbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLm1vZE11bHQgPSBmdW5jdGlvbih4MSx4MilcbntcbiAgICByZXR1cm4gdGhpcy5tb2RSZWR1Y2UoeDEubXVsdGlwbHkoeDIpKTtcbn1cbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLm1vZFJlZHVjZSA9IGZ1bmN0aW9uKHgpXG57XG4gICAgaWYgKHRoaXMuZ2V0UigpICE9IG51bGwpXG4gICAge1xuICAgICAgICB2YXIgcUxlbiA9IHEuYml0TGVuZ3RoKCk7XG4gICAgICAgIHdoaWxlICh4LmJpdExlbmd0aCgpID4gKHFMZW4gKyAxKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHUgPSB4LnNoaWZ0UmlnaHQocUxlbik7XG4gICAgICAgICAgICB2YXIgdiA9IHguc3VidHJhY3QodS5zaGlmdExlZnQocUxlbikpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmdldFIoKS5lcXVhbHMoQmlnSW50ZWdlci5PTkUpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHUgPSB1Lm11bHRpcGx5KHRoaXMuZ2V0UigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHggPSB1LmFkZCh2KTsgXG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHguY29tcGFyZVRvKHEpID49IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHggPSB4LnN1YnRyYWN0KHEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIHggPSB4Lm1vZChxKTtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24oKVxue1xuICAgIGlmICghdGhpcy5xLnRlc3RCaXQoMCkpIHRocm93IFwidW5zdXBwb3J0ZWRcIjtcblxuICAgIC8vIHAgbW9kIDQgPT0gM1xuICAgIGlmICh0aGlzLnEudGVzdEJpdCgxKSlcbiAgICB7XG4gICAgXHR2YXIgeiA9IG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLngubW9kUG93KHRoaXMucS5zaGlmdFJpZ2h0KDIpLmFkZChCaWdJbnRlZ2VyLk9ORSksdGhpcy5xKSk7XG4gICAgXHRyZXR1cm4gei5zcXVhcmUoKS5lcXVhbHModGhpcykgPyB6IDogbnVsbDtcbiAgICB9XG5cbiAgICAvLyBwIG1vZCA0ID09IDFcbiAgICB2YXIgcU1pbnVzT25lID0gdGhpcy5xLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKTtcblxuICAgIHZhciBsZWdlbmRyZUV4cG9uZW50ID0gcU1pbnVzT25lLnNoaWZ0UmlnaHQoMSk7XG4gICAgaWYgKCEodGhpcy54Lm1vZFBvdyhsZWdlbmRyZUV4cG9uZW50LCB0aGlzLnEpLmVxdWFscyhCaWdJbnRlZ2VyLk9ORSkpKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHUgPSBxTWludXNPbmUuc2hpZnRSaWdodCgyKTtcbiAgICB2YXIgayA9IHUuc2hpZnRMZWZ0KDEpLmFkZChCaWdJbnRlZ2VyLk9ORSk7XG5cbiAgICB2YXIgUSA9IHRoaXMueDtcbiAgICB2YXIgZm91clEgPSBtb2REb3VibGUobW9kRG91YmxlKFEpKTtcblxuICAgIHZhciBVLCBWO1xuICAgIGRvXG4gICAge1xuICAgICAgICB2YXIgUDtcbiAgICAgICAgZG9cbiAgICAgICAge1xuICAgICAgICAgICAgUCA9IG5ldyBCaWdJbnRlZ2VyKHRoaXMucS5iaXRMZW5ndGgoKSwgbmV3IFNlY3VyZVJhbmRvbSgpKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoUC5jb21wYXJlVG8odGhpcy5xKSA+PSAwXG4gICAgICAgICAgICB8fCAhKFAubXVsdGlwbHkoUCkuc3VidHJhY3QoZm91clEpLm1vZFBvdyhsZWdlbmRyZUV4cG9uZW50LCB0aGlzLnEpLmVxdWFscyhxTWludXNPbmUpKSk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMubHVjYXNTZXF1ZW5jZShQLCBRLCBrKTtcbiAgICAgICAgVSA9IHJlc3VsdFswXTtcbiAgICAgICAgViA9IHJlc3VsdFsxXTtcblxuICAgICAgICBpZiAodGhpcy5tb2RNdWx0KFYsIFYpLmVxdWFscyhmb3VyUSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIEludGVnZXIgZGl2aXNpb24gYnkgMiwgbW9kIHFcbiAgICAgICAgICAgIGlmIChWLnRlc3RCaXQoMCkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgViA9IFYuYWRkKHEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBWID0gVi5zaGlmdFJpZ2h0KDEpO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAocSxWKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoVS5lcXVhbHMoQmlnSW50ZWdlci5PTkUpIHx8IFUuZXF1YWxzKHFNaW51c09uZSkpO1xuXG4gICAgcmV0dXJuIG51bGw7XG59XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5sdWNhc1NlcXVlbmNlID0gZnVuY3Rpb24oUCxRLGspXG57XG4gICAgdmFyIG4gPSBrLmJpdExlbmd0aCgpO1xuICAgIHZhciBzID0gay5nZXRMb3dlc3RTZXRCaXQoKTtcblxuICAgIHZhciBVaCA9IEJpZ0ludGVnZXIuT05FO1xuICAgIHZhciBWbCA9IEJpZ0ludGVnZXIuVFdPO1xuICAgIHZhciBWaCA9IFA7XG4gICAgdmFyIFFsID0gQmlnSW50ZWdlci5PTkU7XG4gICAgdmFyIFFoID0gQmlnSW50ZWdlci5PTkU7XG5cbiAgICBmb3IgKHZhciBqID0gbiAtIDE7IGogPj0gcyArIDE7IC0tailcbiAgICB7XG4gICAgICAgIFFsID0gdGhpcy5tb2RNdWx0KFFsLCBRaCk7XG5cbiAgICAgICAgaWYgKGsudGVzdEJpdChqKSlcbiAgICAgICAge1xuICAgICAgICAgICAgUWggPSB0aGlzLm1vZE11bHQoUWwsIFEpO1xuICAgICAgICAgICAgVWggPSB0aGlzLm1vZE11bHQoVWgsIFZoKTtcbiAgICAgICAgICAgIFZsID0gdGhpcy5tb2RSZWR1Y2UoVmgubXVsdGlwbHkoVmwpLnN1YnRyYWN0KFAubXVsdGlwbHkoUWwpKSk7XG4gICAgICAgICAgICBWaCA9IHRoaXMubW9kUmVkdWNlKFZoLm11bHRpcGx5KFZoKS5zdWJ0cmFjdChRaC5zaGlmdExlZnQoMSkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIFFoID0gUWw7XG4gICAgICAgICAgICBVaCA9IHRoaXMubW9kUmVkdWNlKFVoLm11bHRpcGx5KFZsKS5zdWJ0cmFjdChRbCkpO1xuICAgICAgICAgICAgVmggPSB0aGlzLm1vZFJlZHVjZShWaC5tdWx0aXBseShWbCkuc3VidHJhY3QoUC5tdWx0aXBseShRbCkpKTtcbiAgICAgICAgICAgIFZsID0gdGhpcy5tb2RSZWR1Y2UoVmwubXVsdGlwbHkoVmwpLnN1YnRyYWN0KFFsLnNoaWZ0TGVmdCgxKSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgUWwgPSB0aGlzLm1vZE11bHQoUWwsIFFoKTtcbiAgICBRaCA9IHRoaXMubW9kTXVsdChRbCwgUSk7XG4gICAgVWggPSB0aGlzLm1vZFJlZHVjZShVaC5tdWx0aXBseShWbCkuc3VidHJhY3QoUWwpKTtcbiAgICBWbCA9IHRoaXMubW9kUmVkdWNlKFZoLm11bHRpcGx5KFZsKS5zdWJ0cmFjdChQLm11bHRpcGx5KFFsKSkpO1xuICAgIFFsID0gdGhpcy5tb2RNdWx0KFFsLCBRaCk7XG5cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSBzOyArK2opXG4gICAge1xuICAgICAgICBVaCA9IHRoaXMubW9kTXVsdChVaCwgVmwpO1xuICAgICAgICBWbCA9IHRoaXMubW9kUmVkdWNlKFZsLm11bHRpcGx5KFZsKS5zdWJ0cmFjdChRbC5zaGlmdExlZnQoMSkpKTtcbiAgICAgICAgUWwgPSB0aGlzLm1vZE11bHQoUWwsIFFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gWyBVaCwgVmwgXTtcbn1cblxudmFyIGV4cG9ydHMgPSB7XG4gIEVDQ3VydmVGcDogRUNDdXJ2ZUZwLFxuICBFQ1BvaW50RnA6IEVDUG9pbnRGcCxcbiAgRUNGaWVsZEVsZW1lbnRGcDogRUNGaWVsZEVsZW1lbnRGcFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNcbiIsIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0cmVhZDogcmVhZCxcblx0cmVhZFNTSFByaXZhdGU6IHJlYWRTU0hQcml2YXRlLFxuXHR3cml0ZTogd3JpdGVcbn07XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuLi9hbGdzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG52YXIgS2V5ID0gcmVxdWlyZSgnLi4va2V5Jyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4uL3ByaXZhdGUta2V5Jyk7XG52YXIgcGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbnZhciByZmM0MjUzID0gcmVxdWlyZSgnLi9yZmM0MjUzJyk7XG52YXIgU1NIQnVmZmVyID0gcmVxdWlyZSgnLi4vc3NoLWJ1ZmZlcicpO1xudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpO1xuXG52YXIgYmNyeXB0O1xuXG5mdW5jdGlvbiByZWFkKGJ1Ziwgb3B0aW9ucykge1xuXHRyZXR1cm4gKHBlbS5yZWFkKGJ1Ziwgb3B0aW9ucykpO1xufVxuXG52YXIgTUFHSUMgPSAnb3BlbnNzaC1rZXktdjEnO1xuXG5mdW5jdGlvbiByZWFkU1NIUHJpdmF0ZSh0eXBlLCBidWYsIG9wdGlvbnMpIHtcblx0YnVmID0gbmV3IFNTSEJ1ZmZlcih7YnVmZmVyOiBidWZ9KTtcblxuXHR2YXIgbWFnaWMgPSBidWYucmVhZENTdHJpbmcoKTtcblx0YXNzZXJ0LnN0cmljdEVxdWFsKG1hZ2ljLCBNQUdJQywgJ2JhZCBtYWdpYyBzdHJpbmcnKTtcblxuXHR2YXIgY2lwaGVyID0gYnVmLnJlYWRTdHJpbmcoKTtcblx0dmFyIGtkZiA9IGJ1Zi5yZWFkU3RyaW5nKCk7XG5cdHZhciBrZGZPcHRzID0gYnVmLnJlYWRCdWZmZXIoKTtcblxuXHR2YXIgbmtleXMgPSBidWYucmVhZEludCgpO1xuXHRpZiAobmtleXMgIT09IDEpIHtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdPcGVuU1NILWZvcm1hdCBrZXkgZmlsZSBjb250YWlucyAnICtcblx0XHQgICAgJ211bHRpcGxlIGtleXM6IHRoaXMgaXMgdW5zdXBwb3J0ZWQuJykpO1xuXHR9XG5cblx0dmFyIHB1YktleSA9IGJ1Zi5yZWFkQnVmZmVyKCk7XG5cblx0aWYgKHR5cGUgPT09ICdwdWJsaWMnKSB7XG5cdFx0YXNzZXJ0Lm9rKGJ1Zi5hdEVuZCgpLCAnZXhjZXNzIGJ5dGVzIGxlZnQgYWZ0ZXIga2V5Jyk7XG5cdFx0cmV0dXJuIChyZmM0MjUzLnJlYWQocHViS2V5KSk7XG5cdH1cblxuXHR2YXIgcHJpdktleUJsb2IgPSBidWYucmVhZEJ1ZmZlcigpO1xuXHRhc3NlcnQub2soYnVmLmF0RW5kKCksICdleGNlc3MgYnl0ZXMgbGVmdCBhZnRlciBrZXknKTtcblxuXHR2YXIga2RmT3B0c0J1ZiA9IG5ldyBTU0hCdWZmZXIoeyBidWZmZXI6IGtkZk9wdHMgfSk7XG5cdHN3aXRjaCAoa2RmKSB7XG5cdGNhc2UgJ25vbmUnOlxuXHRcdGlmIChjaXBoZXIgIT09ICdub25lJykge1xuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcignT3BlblNTSC1mb3JtYXQga2V5IHVzZXMgS0RGIFwibm9uZVwiICcgK1xuXHRcdFx0ICAgICAnYnV0IHNwZWNpZmllcyBhIGNpcGhlciBvdGhlciB0aGFuIFwibm9uZVwiJykpO1xuXHRcdH1cblx0XHRicmVhaztcblx0Y2FzZSAnYmNyeXB0Jzpcblx0XHR2YXIgc2FsdCA9IGtkZk9wdHNCdWYucmVhZEJ1ZmZlcigpO1xuXHRcdHZhciByb3VuZHMgPSBrZGZPcHRzQnVmLnJlYWRJbnQoKTtcblx0XHR2YXIgY2luZiA9IHV0aWxzLm9wZW5zc2hDaXBoZXJJbmZvKGNpcGhlcik7XG5cdFx0aWYgKGJjcnlwdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRiY3J5cHQgPSByZXF1aXJlKCdiY3J5cHQtcGJrZGYnKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIChvcHRpb25zLnBhc3NwaHJhc2UpID09PSAnc3RyaW5nJykge1xuXHRcdFx0b3B0aW9ucy5wYXNzcGhyYXNlID0gQnVmZmVyLmZyb20ob3B0aW9ucy5wYXNzcGhyYXNlLFxuXHRcdFx0ICAgICd1dGYtOCcpO1xuXHRcdH1cblx0XHRpZiAoIUJ1ZmZlci5pc0J1ZmZlcihvcHRpb25zLnBhc3NwaHJhc2UpKSB7XG5cdFx0XHR0aHJvdyAobmV3IGVycm9ycy5LZXlFbmNyeXB0ZWRFcnJvcihcblx0XHRcdCAgICBvcHRpb25zLmZpbGVuYW1lLCAnT3BlblNTSCcpKTtcblx0XHR9XG5cblx0XHR2YXIgcGFzcyA9IG5ldyBVaW50OEFycmF5KG9wdGlvbnMucGFzc3BocmFzZSk7XG5cdFx0dmFyIHNhbHRpID0gbmV3IFVpbnQ4QXJyYXkoc2FsdCk7XG5cdFx0LyogVXNlIHRoZSBwYmtkZiB0byBkZXJpdmUgYm90aCB0aGUga2V5IGFuZCB0aGUgSVYuICovXG5cdFx0dmFyIG91dCA9IG5ldyBVaW50OEFycmF5KGNpbmYua2V5U2l6ZSArIGNpbmYuYmxvY2tTaXplKTtcblx0XHR2YXIgcmVzID0gYmNyeXB0LnBia2RmKHBhc3MsIHBhc3MubGVuZ3RoLCBzYWx0aSwgc2FsdGkubGVuZ3RoLFxuXHRcdCAgICBvdXQsIG91dC5sZW5ndGgsIHJvdW5kcyk7XG5cdFx0aWYgKHJlcyAhPT0gMCkge1xuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcignYmNyeXB0X3Bia2RmIGZ1bmN0aW9uIHJldHVybmVkICcgK1xuXHRcdFx0ICAgICdmYWlsdXJlLCBwYXJhbWV0ZXJzIGludmFsaWQnKSk7XG5cdFx0fVxuXHRcdG91dCA9IEJ1ZmZlci5mcm9tKG91dCk7XG5cdFx0dmFyIGNrZXkgPSBvdXQuc2xpY2UoMCwgY2luZi5rZXlTaXplKTtcblx0XHR2YXIgaXYgPSBvdXQuc2xpY2UoY2luZi5rZXlTaXplLCBjaW5mLmtleVNpemUgKyBjaW5mLmJsb2NrU2l6ZSk7XG5cdFx0dmFyIGNpcGhlclN0cmVhbSA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KGNpbmYub3BlbnNzbE5hbWUsXG5cdFx0ICAgIGNrZXksIGl2KTtcblx0XHRjaXBoZXJTdHJlYW0uc2V0QXV0b1BhZGRpbmcoZmFsc2UpO1xuXHRcdHZhciBjaHVuaywgY2h1bmtzID0gW107XG5cdFx0Y2lwaGVyU3RyZWFtLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcblx0XHRcdGlmIChlLnRvU3RyaW5nKCkuaW5kZXhPZignYmFkIGRlY3J5cHQnKSAhPT0gLTEpIHtcblx0XHRcdFx0dGhyb3cgKG5ldyBFcnJvcignSW5jb3JyZWN0IHBhc3NwaHJhc2UgJyArXG5cdFx0XHRcdCAgICAnc3VwcGxpZWQsIGNvdWxkIG5vdCBkZWNyeXB0IGtleScpKTtcblx0XHRcdH1cblx0XHRcdHRocm93IChlKTtcblx0XHR9KTtcblx0XHRjaXBoZXJTdHJlYW0ud3JpdGUocHJpdktleUJsb2IpO1xuXHRcdGNpcGhlclN0cmVhbS5lbmQoKTtcblx0XHR3aGlsZSAoKGNodW5rID0gY2lwaGVyU3RyZWFtLnJlYWQoKSkgIT09IG51bGwpXG5cdFx0XHRjaHVua3MucHVzaChjaHVuayk7XG5cdFx0cHJpdktleUJsb2IgPSBCdWZmZXIuY29uY2F0KGNodW5rcyk7XG5cdFx0YnJlYWs7XG5cdGRlZmF1bHQ6XG5cdFx0dGhyb3cgKG5ldyBFcnJvcihcblx0XHQgICAgJ09wZW5TU0gtZm9ybWF0IGtleSB1c2VzIHVua25vd24gS0RGIFwiJyArIGtkZiArICdcIicpKTtcblx0fVxuXG5cdGJ1ZiA9IG5ldyBTU0hCdWZmZXIoe2J1ZmZlcjogcHJpdktleUJsb2J9KTtcblxuXHR2YXIgY2hlY2tJbnQxID0gYnVmLnJlYWRJbnQoKTtcblx0dmFyIGNoZWNrSW50MiA9IGJ1Zi5yZWFkSW50KCk7XG5cdGlmIChjaGVja0ludDEgIT09IGNoZWNrSW50Mikge1xuXHRcdHRocm93IChuZXcgRXJyb3IoJ0luY29ycmVjdCBwYXNzcGhyYXNlIHN1cHBsaWVkLCBjb3VsZCBub3QgJyArXG5cdFx0ICAgICdkZWNyeXB0IGtleScpKTtcblx0fVxuXG5cdHZhciByZXQgPSB7fTtcblx0dmFyIGtleSA9IHJmYzQyNTMucmVhZEludGVybmFsKHJldCwgJ3ByaXZhdGUnLCBidWYucmVtYWluZGVyKCkpO1xuXG5cdGJ1Zi5za2lwKHJldC5jb25zdW1lZCk7XG5cblx0dmFyIGNvbW1lbnQgPSBidWYucmVhZFN0cmluZygpO1xuXHRrZXkuY29tbWVudCA9IGNvbW1lbnQ7XG5cblx0cmV0dXJuIChrZXkpO1xufVxuXG5mdW5jdGlvbiB3cml0ZShrZXksIG9wdGlvbnMpIHtcblx0dmFyIHB1YktleTtcblx0aWYgKFByaXZhdGVLZXkuaXNQcml2YXRlS2V5KGtleSkpXG5cdFx0cHViS2V5ID0ga2V5LnRvUHVibGljKCk7XG5cdGVsc2Vcblx0XHRwdWJLZXkgPSBrZXk7XG5cblx0dmFyIGNpcGhlciA9ICdub25lJztcblx0dmFyIGtkZiA9ICdub25lJztcblx0dmFyIGtkZm9wdHMgPSBCdWZmZXIuYWxsb2MoMCk7XG5cdHZhciBjaW5mID0geyBibG9ja1NpemU6IDggfTtcblx0dmFyIHBhc3NwaHJhc2U7XG5cdGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcblx0XHRwYXNzcGhyYXNlID0gb3B0aW9ucy5wYXNzcGhyYXNlO1xuXHRcdGlmICh0eXBlb2YgKHBhc3NwaHJhc2UpID09PSAnc3RyaW5nJylcblx0XHRcdHBhc3NwaHJhc2UgPSBCdWZmZXIuZnJvbShwYXNzcGhyYXNlLCAndXRmLTgnKTtcblx0XHRpZiAocGFzc3BocmFzZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRhc3NlcnQuYnVmZmVyKHBhc3NwaHJhc2UsICdvcHRpb25zLnBhc3NwaHJhc2UnKTtcblx0XHRcdGFzc2VydC5vcHRpb25hbFN0cmluZyhvcHRpb25zLmNpcGhlciwgJ29wdGlvbnMuY2lwaGVyJyk7XG5cdFx0XHRjaXBoZXIgPSBvcHRpb25zLmNpcGhlcjtcblx0XHRcdGlmIChjaXBoZXIgPT09IHVuZGVmaW5lZClcblx0XHRcdFx0Y2lwaGVyID0gJ2FlczEyOC1jdHInO1xuXHRcdFx0Y2luZiA9IHV0aWxzLm9wZW5zc2hDaXBoZXJJbmZvKGNpcGhlcik7XG5cdFx0XHRrZGYgPSAnYmNyeXB0Jztcblx0XHR9XG5cdH1cblxuXHR2YXIgcHJpdkJ1Zjtcblx0aWYgKFByaXZhdGVLZXkuaXNQcml2YXRlS2V5KGtleSkpIHtcblx0XHRwcml2QnVmID0gbmV3IFNTSEJ1ZmZlcih7fSk7XG5cdFx0dmFyIGNoZWNrSW50ID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDQpLnJlYWRVSW50MzJCRSgwKTtcblx0XHRwcml2QnVmLndyaXRlSW50KGNoZWNrSW50KTtcblx0XHRwcml2QnVmLndyaXRlSW50KGNoZWNrSW50KTtcblx0XHRwcml2QnVmLndyaXRlKGtleS50b0J1ZmZlcigncmZjNDI1MycpKTtcblx0XHRwcml2QnVmLndyaXRlU3RyaW5nKGtleS5jb21tZW50IHx8ICcnKTtcblxuXHRcdHZhciBuID0gMTtcblx0XHR3aGlsZSAocHJpdkJ1Zi5fb2Zmc2V0ICUgY2luZi5ibG9ja1NpemUgIT09IDApXG5cdFx0XHRwcml2QnVmLndyaXRlQ2hhcihuKyspO1xuXHRcdHByaXZCdWYgPSBwcml2QnVmLnRvQnVmZmVyKCk7XG5cdH1cblxuXHRzd2l0Y2ggKGtkZikge1xuXHRjYXNlICdub25lJzpcblx0XHRicmVhaztcblx0Y2FzZSAnYmNyeXB0Jzpcblx0XHR2YXIgc2FsdCA9IGNyeXB0by5yYW5kb21CeXRlcygxNik7XG5cdFx0dmFyIHJvdW5kcyA9IDE2O1xuXHRcdHZhciBrZGZzc2ggPSBuZXcgU1NIQnVmZmVyKHt9KTtcblx0XHRrZGZzc2gud3JpdGVCdWZmZXIoc2FsdCk7XG5cdFx0a2Rmc3NoLndyaXRlSW50KHJvdW5kcyk7XG5cdFx0a2Rmb3B0cyA9IGtkZnNzaC50b0J1ZmZlcigpO1xuXG5cdFx0aWYgKGJjcnlwdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRiY3J5cHQgPSByZXF1aXJlKCdiY3J5cHQtcGJrZGYnKTtcblx0XHR9XG5cdFx0dmFyIHBhc3MgPSBuZXcgVWludDhBcnJheShwYXNzcGhyYXNlKTtcblx0XHR2YXIgc2FsdGkgPSBuZXcgVWludDhBcnJheShzYWx0KTtcblx0XHQvKiBVc2UgdGhlIHBia2RmIHRvIGRlcml2ZSBib3RoIHRoZSBrZXkgYW5kIHRoZSBJVi4gKi9cblx0XHR2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoY2luZi5rZXlTaXplICsgY2luZi5ibG9ja1NpemUpO1xuXHRcdHZhciByZXMgPSBiY3J5cHQucGJrZGYocGFzcywgcGFzcy5sZW5ndGgsIHNhbHRpLCBzYWx0aS5sZW5ndGgsXG5cdFx0ICAgIG91dCwgb3V0Lmxlbmd0aCwgcm91bmRzKTtcblx0XHRpZiAocmVzICE9PSAwKSB7XG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKCdiY3J5cHRfcGJrZGYgZnVuY3Rpb24gcmV0dXJuZWQgJyArXG5cdFx0XHQgICAgJ2ZhaWx1cmUsIHBhcmFtZXRlcnMgaW52YWxpZCcpKTtcblx0XHR9XG5cdFx0b3V0ID0gQnVmZmVyLmZyb20ob3V0KTtcblx0XHR2YXIgY2tleSA9IG91dC5zbGljZSgwLCBjaW5mLmtleVNpemUpO1xuXHRcdHZhciBpdiA9IG91dC5zbGljZShjaW5mLmtleVNpemUsIGNpbmYua2V5U2l6ZSArIGNpbmYuYmxvY2tTaXplKTtcblxuXHRcdHZhciBjaXBoZXJTdHJlYW0gPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoY2luZi5vcGVuc3NsTmFtZSxcblx0XHQgICAgY2tleSwgaXYpO1xuXHRcdGNpcGhlclN0cmVhbS5zZXRBdXRvUGFkZGluZyhmYWxzZSk7XG5cdFx0dmFyIGNodW5rLCBjaHVua3MgPSBbXTtcblx0XHRjaXBoZXJTdHJlYW0ub25jZSgnZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0dGhyb3cgKGUpO1xuXHRcdH0pO1xuXHRcdGNpcGhlclN0cmVhbS53cml0ZShwcml2QnVmKTtcblx0XHRjaXBoZXJTdHJlYW0uZW5kKCk7XG5cdFx0d2hpbGUgKChjaHVuayA9IGNpcGhlclN0cmVhbS5yZWFkKCkpICE9PSBudWxsKVxuXHRcdFx0Y2h1bmtzLnB1c2goY2h1bmspO1xuXHRcdHByaXZCdWYgPSBCdWZmZXIuY29uY2F0KGNodW5rcyk7XG5cdFx0YnJlYWs7XG5cdGRlZmF1bHQ6XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5zdXBwb3J0ZWQga2RmICcgKyBrZGYpKTtcblx0fVxuXG5cdHZhciBidWYgPSBuZXcgU1NIQnVmZmVyKHt9KTtcblxuXHRidWYud3JpdGVDU3RyaW5nKE1BR0lDKTtcblx0YnVmLndyaXRlU3RyaW5nKGNpcGhlcik7XHQvKiBjaXBoZXIgKi9cblx0YnVmLndyaXRlU3RyaW5nKGtkZik7XHRcdC8qIGtkZiAqL1xuXHRidWYud3JpdGVCdWZmZXIoa2Rmb3B0cyk7XHQvKiBrZGZvcHRpb25zICovXG5cblx0YnVmLndyaXRlSW50KDEpO1x0XHQvKiBua2V5cyAqL1xuXHRidWYud3JpdGVCdWZmZXIocHViS2V5LnRvQnVmZmVyKCdyZmM0MjUzJykpO1xuXG5cdGlmIChwcml2QnVmKVxuXHRcdGJ1Zi53cml0ZUJ1ZmZlcihwcml2QnVmKTtcblxuXHRidWYgPSBidWYudG9CdWZmZXIoKTtcblxuXHR2YXIgaGVhZGVyO1xuXHRpZiAoUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5KSlcblx0XHRoZWFkZXIgPSAnT1BFTlNTSCBQUklWQVRFIEtFWSc7XG5cdGVsc2Vcblx0XHRoZWFkZXIgPSAnT1BFTlNTSCBQVUJMSUMgS0VZJztcblxuXHR2YXIgdG1wID0gYnVmLnRvU3RyaW5nKCdiYXNlNjQnKTtcblx0dmFyIGxlbiA9IHRtcC5sZW5ndGggKyAodG1wLmxlbmd0aCAvIDcwKSArXG5cdCAgICAxOCArIDE2ICsgaGVhZGVyLmxlbmd0aCoyICsgMTA7XG5cdGJ1ZiA9IEJ1ZmZlci5hbGxvYyhsZW4pO1xuXHR2YXIgbyA9IDA7XG5cdG8gKz0gYnVmLndyaXRlKCctLS0tLUJFR0lOICcgKyBoZWFkZXIgKyAnLS0tLS1cXG4nLCBvKTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0bXAubGVuZ3RoOyApIHtcblx0XHR2YXIgbGltaXQgPSBpICsgNzA7XG5cdFx0aWYgKGxpbWl0ID4gdG1wLmxlbmd0aClcblx0XHRcdGxpbWl0ID0gdG1wLmxlbmd0aDtcblx0XHRvICs9IGJ1Zi53cml0ZSh0bXAuc2xpY2UoaSwgbGltaXQpLCBvKTtcblx0XHRidWZbbysrXSA9IDEwO1xuXHRcdGkgPSBsaW1pdDtcblx0fVxuXHRvICs9IGJ1Zi53cml0ZSgnLS0tLS1FTkQgJyArIGhlYWRlciArICctLS0tLVxcbicsIG8pO1xuXG5cdHJldHVybiAoYnVmLnNsaWNlKDAsIG8pKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgaXNBcnJheSA9IGZ1bmN0aW9uIGlzQXJyYXkoYXJyKSB7XG5cdGlmICh0eXBlb2YgQXJyYXkuaXNBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KGFycik7XG5cdH1cblxuXHRyZXR1cm4gdG9TdHIuY2FsbChhcnIpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxudmFyIGlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuXHRpZiAoIW9iaiB8fCB0b1N0ci5jYWxsKG9iaikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIGhhc093bkNvbnN0cnVjdG9yID0gaGFzT3duLmNhbGwob2JqLCAnY29uc3RydWN0b3InKTtcblx0dmFyIGhhc0lzUHJvdG90eXBlT2YgPSBvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSAmJiBoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAnaXNQcm90b3R5cGVPZicpO1xuXHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdGlmIChvYmouY29uc3RydWN0b3IgJiYgIWhhc093bkNvbnN0cnVjdG9yICYmICFoYXNJc1Byb3RvdHlwZU9mKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG5cdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxuXHR2YXIga2V5O1xuXHRmb3IgKGtleSBpbiBvYmopIHsgLyoqLyB9XG5cblx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnIHx8IGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn07XG5cbi8vIElmIG5hbWUgaXMgJ19fcHJvdG9fXycsIGFuZCBPYmplY3QuZGVmaW5lUHJvcGVydHkgaXMgYXZhaWxhYmxlLCBkZWZpbmUgX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eSBvbiB0YXJnZXRcbnZhciBzZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIHNldFByb3BlcnR5KHRhcmdldCwgb3B0aW9ucykge1xuXHRpZiAoZGVmaW5lUHJvcGVydHkgJiYgb3B0aW9ucy5uYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdGRlZmluZVByb3BlcnR5KHRhcmdldCwgb3B0aW9ucy5uYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IG9wdGlvbnMubmV3VmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHRhcmdldFtvcHRpb25zLm5hbWVdID0gb3B0aW9ucy5uZXdWYWx1ZTtcblx0fVxufTtcblxuLy8gUmV0dXJuIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIF9fcHJvdG9fXyBpZiAnX19wcm90b19fJyBpcyBub3QgYW4gb3duIHByb3BlcnR5XG52YXIgZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBnZXRQcm9wZXJ0eShvYmosIG5hbWUpIHtcblx0aWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0aWYgKCFoYXNPd24uY2FsbChvYmosIG5hbWUpKSB7XG5cdFx0XHRyZXR1cm4gdm9pZCAwO1xuXHRcdH0gZWxzZSBpZiAoZ09QRCkge1xuXHRcdFx0Ly8gSW4gZWFybHkgdmVyc2lvbnMgb2Ygbm9kZSwgb2JqWydfX3Byb3RvX18nXSBpcyBidWdneSB3aGVuIG9iaiBoYXNcblx0XHRcdC8vIF9fcHJvdG9fXyBhcyBhbiBvd24gcHJvcGVydHkuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoKSB3b3Jrcy5cblx0XHRcdHJldHVybiBnT1BEKG9iaiwgbmFtZSkudmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9ialtuYW1lXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmU7XG5cdHZhciB0YXJnZXQgPSBhcmd1bWVudHNbMF07XG5cdHZhciBpID0gMTtcblx0dmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdHZhciBkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMV0gfHwge307XG5cdFx0Ly8gc2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdGkgPSAyO1xuXHR9XG5cdGlmICh0YXJnZXQgPT0gbnVsbCB8fCAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdGZvciAoOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzW2ldO1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAob3B0aW9ucyAhPSBudWxsKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRzcmMgPSBnZXRQcm9wZXJ0eSh0YXJnZXQsIG5hbWUpO1xuXHRcdFx0XHRjb3B5ID0gZ2V0UHJvcGVydHkob3B0aW9ucywgbmFtZSk7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAodGFyZ2V0ICE9PSBjb3B5KSB7XG5cdFx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdFx0aWYgKGRlZXAgJiYgY29weSAmJiAoaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBpc0FycmF5KGNvcHkpKSkpIHtcblx0XHRcdFx0XHRcdGlmIChjb3B5SXNBcnJheSkge1xuXHRcdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHRcdHNldFByb3BlcnR5KHRhcmdldCwgeyBuYW1lOiBuYW1lLCBuZXdWYWx1ZTogZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KSB9KTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBjb3B5ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBjb3B5IH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV0XCIpOyIsIid1c2Ugc3RyaWN0J1xuXG52YXIganNvblNhZmVTdHJpbmdpZnkgPSByZXF1aXJlKCdqc29uLXN0cmluZ2lmeS1zYWZlJylcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBkZWZlciA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICd1bmRlZmluZWQnXG4gID8gcHJvY2Vzcy5uZXh0VGlja1xuICA6IHNldEltbWVkaWF0ZVxuXG5mdW5jdGlvbiBwYXJhbXNIYXZlUmVxdWVzdEJvZHkgKHBhcmFtcykge1xuICByZXR1cm4gKFxuICAgIHBhcmFtcy5ib2R5IHx8XG4gICAgcGFyYW1zLnJlcXVlc3RCb2R5U3RyZWFtIHx8XG4gICAgKHBhcmFtcy5qc29uICYmIHR5cGVvZiBwYXJhbXMuanNvbiAhPT0gJ2Jvb2xlYW4nKSB8fFxuICAgIHBhcmFtcy5tdWx0aXBhcnRcbiAgKVxufVxuXG5mdW5jdGlvbiBzYWZlU3RyaW5naWZ5IChvYmosIHJlcGxhY2VyKSB7XG4gIHZhciByZXRcbiAgdHJ5IHtcbiAgICByZXQgPSBKU09OLnN0cmluZ2lmeShvYmosIHJlcGxhY2VyKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0ID0ganNvblNhZmVTdHJpbmdpZnkob2JqLCByZXBsYWNlcilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIG1kNSAoc3RyKSB7XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnbWQ1JykudXBkYXRlKHN0cikuZGlnZXN0KCdoZXgnKVxufVxuXG5mdW5jdGlvbiBpc1JlYWRTdHJlYW0gKHJzKSB7XG4gIHJldHVybiBycy5yZWFkYWJsZSAmJiBycy5wYXRoICYmIHJzLm1vZGVcbn1cblxuZnVuY3Rpb24gdG9CYXNlNjQgKHN0cikge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc3RyIHx8ICcnLCAndXRmOCcpLnRvU3RyaW5nKCdiYXNlNjQnKVxufVxuXG5mdW5jdGlvbiBjb3B5IChvYmopIHtcbiAgdmFyIG8gPSB7fVxuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICBvW2ldID0gb2JqW2ldXG4gIH0pXG4gIHJldHVybiBvXG59XG5cbmZ1bmN0aW9uIHZlcnNpb24gKCkge1xuICB2YXIgbnVtYmVycyA9IHByb2Nlc3MudmVyc2lvbi5yZXBsYWNlKCd2JywgJycpLnNwbGl0KCcuJylcbiAgcmV0dXJuIHtcbiAgICBtYWpvcjogcGFyc2VJbnQobnVtYmVyc1swXSwgMTApLFxuICAgIG1pbm9yOiBwYXJzZUludChudW1iZXJzWzFdLCAxMCksXG4gICAgcGF0Y2g6IHBhcnNlSW50KG51bWJlcnNbMl0sIDEwKVxuICB9XG59XG5cbmV4cG9ydHMucGFyYW1zSGF2ZVJlcXVlc3RCb2R5ID0gcGFyYW1zSGF2ZVJlcXVlc3RCb2R5XG5leHBvcnRzLnNhZmVTdHJpbmdpZnkgPSBzYWZlU3RyaW5naWZ5XG5leHBvcnRzLm1kNSA9IG1kNVxuZXhwb3J0cy5pc1JlYWRTdHJlYW0gPSBpc1JlYWRTdHJlYW1cbmV4cG9ydHMudG9CYXNlNjQgPSB0b0Jhc2U2NFxuZXhwb3J0cy5jb3B5ID0gY29weVxuZXhwb3J0cy52ZXJzaW9uID0gdmVyc2lvblxuZXhwb3J0cy5kZWZlciA9IGRlZmVyXG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxudmFyIEtleSA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgRmluZ2VycHJpbnQgPSByZXF1aXJlKCcuL2ZpbmdlcnByaW50Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi9wcml2YXRlLWtleScpO1xudmFyIENlcnRpZmljYXRlID0gcmVxdWlyZSgnLi9jZXJ0aWZpY2F0ZScpO1xudmFyIElkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xudmFyIGVycnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0LyogdG9wLWxldmVsIGNsYXNzZXMgKi9cblx0S2V5OiBLZXksXG5cdHBhcnNlS2V5OiBLZXkucGFyc2UsXG5cdEZpbmdlcnByaW50OiBGaW5nZXJwcmludCxcblx0cGFyc2VGaW5nZXJwcmludDogRmluZ2VycHJpbnQucGFyc2UsXG5cdFNpZ25hdHVyZTogU2lnbmF0dXJlLFxuXHRwYXJzZVNpZ25hdHVyZTogU2lnbmF0dXJlLnBhcnNlLFxuXHRQcml2YXRlS2V5OiBQcml2YXRlS2V5LFxuXHRwYXJzZVByaXZhdGVLZXk6IFByaXZhdGVLZXkucGFyc2UsXG5cdGdlbmVyYXRlUHJpdmF0ZUtleTogUHJpdmF0ZUtleS5nZW5lcmF0ZSxcblx0Q2VydGlmaWNhdGU6IENlcnRpZmljYXRlLFxuXHRwYXJzZUNlcnRpZmljYXRlOiBDZXJ0aWZpY2F0ZS5wYXJzZSxcblx0Y3JlYXRlU2VsZlNpZ25lZENlcnRpZmljYXRlOiBDZXJ0aWZpY2F0ZS5jcmVhdGVTZWxmU2lnbmVkLFxuXHRjcmVhdGVDZXJ0aWZpY2F0ZTogQ2VydGlmaWNhdGUuY3JlYXRlLFxuXHRJZGVudGl0eTogSWRlbnRpdHksXG5cdGlkZW50aXR5RnJvbUROOiBJZGVudGl0eS5wYXJzZUROLFxuXHRpZGVudGl0eUZvckhvc3Q6IElkZW50aXR5LmZvckhvc3QsXG5cdGlkZW50aXR5Rm9yVXNlcjogSWRlbnRpdHkuZm9yVXNlcixcblx0aWRlbnRpdHlGb3JFbWFpbDogSWRlbnRpdHkuZm9yRW1haWwsXG5cdGlkZW50aXR5RnJvbUFycmF5OiBJZGVudGl0eS5mcm9tQXJyYXksXG5cblx0LyogZXJyb3JzICovXG5cdEZpbmdlcnByaW50Rm9ybWF0RXJyb3I6IGVycnMuRmluZ2VycHJpbnRGb3JtYXRFcnJvcixcblx0SW52YWxpZEFsZ29yaXRobUVycm9yOiBlcnJzLkludmFsaWRBbGdvcml0aG1FcnJvcixcblx0S2V5UGFyc2VFcnJvcjogZXJycy5LZXlQYXJzZUVycm9yLFxuXHRTaWduYXR1cmVQYXJzZUVycm9yOiBlcnJzLlNpZ25hdHVyZVBhcnNlRXJyb3IsXG5cdEtleUVuY3J5cHRlZEVycm9yOiBlcnJzLktleUVuY3J5cHRlZEVycm9yLFxuXHRDZXJ0aWZpY2F0ZVBhcnNlRXJyb3I6IGVycnMuQ2VydGlmaWNhdGVQYXJzZUVycm9yXG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG5ld0ludmFsaWRBc24xRXJyb3I6IGZ1bmN0aW9uIChtc2cpIHtcbiAgICB2YXIgZSA9IG5ldyBFcnJvcigpO1xuICAgIGUubmFtZSA9ICdJbnZhbGlkQXNuMUVycm9yJztcbiAgICBlLm1lc3NhZ2UgPSBtc2cgfHwgJyc7XG4gICAgcmV0dXJuIGU7XG4gIH1cblxufTtcbiIsIi8vIENvcHlyaWdodCAyMDExIE1hcmsgQ2F2YWdlIDxtY2F2YWdlQGdtYWlsLmNvbT4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRU9DOiAwLFxuICBCb29sZWFuOiAxLFxuICBJbnRlZ2VyOiAyLFxuICBCaXRTdHJpbmc6IDMsXG4gIE9jdGV0U3RyaW5nOiA0LFxuICBOdWxsOiA1LFxuICBPSUQ6IDYsXG4gIE9iamVjdERlc2NyaXB0b3I6IDcsXG4gIEV4dGVybmFsOiA4LFxuICBSZWFsOiA5LCAvLyBmbG9hdFxuICBFbnVtZXJhdGlvbjogMTAsXG4gIFBEVjogMTEsXG4gIFV0ZjhTdHJpbmc6IDEyLFxuICBSZWxhdGl2ZU9JRDogMTMsXG4gIFNlcXVlbmNlOiAxNixcbiAgU2V0OiAxNyxcbiAgTnVtZXJpY1N0cmluZzogMTgsXG4gIFByaW50YWJsZVN0cmluZzogMTksXG4gIFQ2MVN0cmluZzogMjAsXG4gIFZpZGVvdGV4U3RyaW5nOiAyMSxcbiAgSUE1U3RyaW5nOiAyMixcbiAgVVRDVGltZTogMjMsXG4gIEdlbmVyYWxpemVkVGltZTogMjQsXG4gIEdyYXBoaWNTdHJpbmc6IDI1LFxuICBWaXNpYmxlU3RyaW5nOiAyNixcbiAgR2VuZXJhbFN0cmluZzogMjgsXG4gIFVuaXZlcnNhbFN0cmluZzogMjksXG4gIENoYXJhY3RlclN0cmluZzogMzAsXG4gIEJNUFN0cmluZzogMzEsXG4gIENvbnN0cnVjdG9yOiAzMixcbiAgQ29udGV4dDogMTI4XG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTcgSm95ZW50LCBJbmMuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHREaWZmaWVIZWxsbWFuOiBEaWZmaWVIZWxsbWFuLFxuXHRnZW5lcmF0ZUVDRFNBOiBnZW5lcmF0ZUVDRFNBLFxuXHRnZW5lcmF0ZUVEMjU1MTk6IGdlbmVyYXRlRUQyNTUxOVxufTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuL2FsZ3MnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBuYWNsID0gcmVxdWlyZSgndHdlZXRuYWNsJyk7XG5cbnZhciBLZXkgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuL3ByaXZhdGUta2V5Jyk7XG5cbnZhciBDUllQVE9fSEFWRV9FQ0RIID0gKGNyeXB0by5jcmVhdGVFQ0RIICE9PSB1bmRlZmluZWQpO1xuXG52YXIgZWNkaCA9IHJlcXVpcmUoJ2VjYy1qc2JuJyk7XG52YXIgZWMgPSByZXF1aXJlKCdlY2MtanNibi9saWIvZWMnKTtcbnZhciBqc2JuID0gcmVxdWlyZSgnanNibicpLkJpZ0ludGVnZXI7XG5cbmZ1bmN0aW9uIERpZmZpZUhlbGxtYW4oa2V5KSB7XG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUoa2V5LCBLZXksIFsxLCA0XSwgJ2tleScpO1xuXHR0aGlzLl9pc1ByaXYgPSBQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXksIFsxLCAzXSk7XG5cdHRoaXMuX2FsZ28gPSBrZXkudHlwZTtcblx0dGhpcy5fY3VydmUgPSBrZXkuY3VydmU7XG5cdHRoaXMuX2tleSA9IGtleTtcblx0aWYgKGtleS50eXBlID09PSAnZHNhJykge1xuXHRcdGlmICghQ1JZUFRPX0hBVkVfRUNESCkge1xuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcignRHVlIHRvIGJ1Z3MgaW4gdGhlIG5vZGUgMC4xMCAnICtcblx0XHRcdCAgICAnY3J5cHRvIEFQSSwgbm9kZSAwLjEyLnggb3IgbGF0ZXIgaXMgcmVxdWlyZWQgJyArXG5cdFx0XHQgICAgJ3RvIHVzZSBESCcpKTtcblx0XHR9XG5cdFx0dGhpcy5fZGggPSBjcnlwdG8uY3JlYXRlRGlmZmllSGVsbG1hbihcblx0XHQgICAga2V5LnBhcnQucC5kYXRhLCB1bmRlZmluZWQsXG5cdFx0ICAgIGtleS5wYXJ0LmcuZGF0YSwgdW5kZWZpbmVkKTtcblx0XHR0aGlzLl9wID0ga2V5LnBhcnQucDtcblx0XHR0aGlzLl9nID0ga2V5LnBhcnQuZztcblx0XHRpZiAodGhpcy5faXNQcml2KVxuXHRcdFx0dGhpcy5fZGguc2V0UHJpdmF0ZUtleShrZXkucGFydC54LmRhdGEpO1xuXHRcdHRoaXMuX2RoLnNldFB1YmxpY0tleShrZXkucGFydC55LmRhdGEpO1xuXG5cdH0gZWxzZSBpZiAoa2V5LnR5cGUgPT09ICdlY2RzYScpIHtcblx0XHRpZiAoIUNSWVBUT19IQVZFX0VDREgpIHtcblx0XHRcdHRoaXMuX2VjUGFyYW1zID0gbmV3IFg5RUNQYXJhbWV0ZXJzKHRoaXMuX2N1cnZlKTtcblxuXHRcdFx0aWYgKHRoaXMuX2lzUHJpdikge1xuXHRcdFx0XHR0aGlzLl9wcml2ID0gbmV3IEVDUHJpdmF0ZShcblx0XHRcdFx0ICAgIHRoaXMuX2VjUGFyYW1zLCBrZXkucGFydC5kLmRhdGEpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjdXJ2ZSA9IHtcblx0XHRcdCduaXN0cDI1Nic6ICdwcmltZTI1NnYxJyxcblx0XHRcdCduaXN0cDM4NCc6ICdzZWNwMzg0cjEnLFxuXHRcdFx0J25pc3RwNTIxJzogJ3NlY3A1MjFyMSdcblx0XHR9W2tleS5jdXJ2ZV07XG5cdFx0dGhpcy5fZGggPSBjcnlwdG8uY3JlYXRlRUNESChjdXJ2ZSk7XG5cdFx0aWYgKHR5cGVvZiAodGhpcy5fZGgpICE9PSAnb2JqZWN0JyB8fFxuXHRcdCAgICB0eXBlb2YgKHRoaXMuX2RoLnNldFByaXZhdGVLZXkpICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRDUllQVE9fSEFWRV9FQ0RIID0gZmFsc2U7XG5cdFx0XHREaWZmaWVIZWxsbWFuLmNhbGwodGhpcywga2V5KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX2lzUHJpdilcblx0XHRcdHRoaXMuX2RoLnNldFByaXZhdGVLZXkoa2V5LnBhcnQuZC5kYXRhKTtcblx0XHR0aGlzLl9kaC5zZXRQdWJsaWNLZXkoa2V5LnBhcnQuUS5kYXRhKTtcblxuXHR9IGVsc2UgaWYgKGtleS50eXBlID09PSAnY3VydmUyNTUxOScpIHtcblx0XHRpZiAodGhpcy5faXNQcml2KSB7XG5cdFx0XHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKGtleSwgUHJpdmF0ZUtleSwgWzEsIDVdLCAna2V5Jyk7XG5cdFx0XHR0aGlzLl9wcml2ID0ga2V5LnBhcnQuay5kYXRhO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdHRocm93IChuZXcgRXJyb3IoJ0RIIG5vdCBzdXBwb3J0ZWQgZm9yICcgKyBrZXkudHlwZSArICcga2V5cycpKTtcblx0fVxufVxuXG5EaWZmaWVIZWxsbWFuLnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICh0aGlzLl9pc1ByaXYpXG5cdFx0cmV0dXJuICh0aGlzLl9rZXkudG9QdWJsaWMoKSk7XG5cdHJldHVybiAodGhpcy5fa2V5KTtcbn07XG5cbkRpZmZpZUhlbGxtYW4ucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICh0aGlzLl9pc1ByaXYpXG5cdFx0cmV0dXJuICh0aGlzLl9rZXkpO1xuXHRlbHNlXG5cdFx0cmV0dXJuICh1bmRlZmluZWQpO1xufTtcbkRpZmZpZUhlbGxtYW4ucHJvdG90eXBlLmdldEtleSA9IERpZmZpZUhlbGxtYW4ucHJvdG90eXBlLmdldFByaXZhdGVLZXk7XG5cbkRpZmZpZUhlbGxtYW4ucHJvdG90eXBlLl9rZXlDaGVjayA9IGZ1bmN0aW9uIChwaywgaXNQdWIpIHtcblx0YXNzZXJ0Lm9iamVjdChwaywgJ2tleScpO1xuXHRpZiAoIWlzUHViKVxuXHRcdHV0aWxzLmFzc2VydENvbXBhdGlibGUocGssIFByaXZhdGVLZXksIFsxLCAzXSwgJ2tleScpO1xuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKHBrLCBLZXksIFsxLCA0XSwgJ2tleScpO1xuXG5cdGlmIChway50eXBlICE9PSB0aGlzLl9hbGdvKSB7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignQSAnICsgcGsudHlwZSArICcga2V5IGNhbm5vdCBiZSB1c2VkIGluICcgK1xuXHRcdCAgICB0aGlzLl9hbGdvICsgJyBEaWZmaWUtSGVsbG1hbicpKTtcblx0fVxuXG5cdGlmIChway5jdXJ2ZSAhPT0gdGhpcy5fY3VydmUpIHtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdBIGtleSBmcm9tIHRoZSAnICsgcGsuY3VydmUgKyAnIGN1cnZlICcgK1xuXHRcdCAgICAnY2Fubm90IGJlIHVzZWQgd2l0aCBhICcgKyB0aGlzLl9jdXJ2ZSArXG5cdFx0ICAgICcgRGlmZmllLUhlbGxtYW4nKSk7XG5cdH1cblxuXHRpZiAocGsudHlwZSA9PT0gJ2RzYScpIHtcblx0XHRhc3NlcnQuZGVlcEVxdWFsKHBrLnBhcnQucCwgdGhpcy5fcCxcblx0XHQgICAgJ0RTQSBrZXkgcHJpbWUgZG9lcyBub3QgbWF0Y2gnKTtcblx0XHRhc3NlcnQuZGVlcEVxdWFsKHBrLnBhcnQuZywgdGhpcy5fZyxcblx0XHQgICAgJ0RTQSBrZXkgZ2VuZXJhdG9yIGRvZXMgbm90IG1hdGNoJyk7XG5cdH1cbn07XG5cbkRpZmZpZUhlbGxtYW4ucHJvdG90eXBlLnNldEtleSA9IGZ1bmN0aW9uIChwaykge1xuXHR0aGlzLl9rZXlDaGVjayhwayk7XG5cblx0aWYgKHBrLnR5cGUgPT09ICdkc2EnKSB7XG5cdFx0dGhpcy5fZGguc2V0UHJpdmF0ZUtleShway5wYXJ0LnguZGF0YSk7XG5cdFx0dGhpcy5fZGguc2V0UHVibGljS2V5KHBrLnBhcnQueS5kYXRhKTtcblxuXHR9IGVsc2UgaWYgKHBrLnR5cGUgPT09ICdlY2RzYScpIHtcblx0XHRpZiAoQ1JZUFRPX0hBVkVfRUNESCkge1xuXHRcdFx0dGhpcy5fZGguc2V0UHJpdmF0ZUtleShway5wYXJ0LmQuZGF0YSk7XG5cdFx0XHR0aGlzLl9kaC5zZXRQdWJsaWNLZXkocGsucGFydC5RLmRhdGEpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9wcml2ID0gbmV3IEVDUHJpdmF0ZShcblx0XHRcdCAgICB0aGlzLl9lY1BhcmFtcywgcGsucGFydC5kLmRhdGEpO1xuXHRcdH1cblxuXHR9IGVsc2UgaWYgKHBrLnR5cGUgPT09ICdjdXJ2ZTI1NTE5Jykge1xuXHRcdHZhciBrID0gcGsucGFydC5rO1xuXHRcdGlmICghcGsucGFydC5rKVxuXHRcdFx0ayA9IHBrLnBhcnQucjtcblx0XHR0aGlzLl9wcml2ID0gay5kYXRhO1xuXHRcdGlmICh0aGlzLl9wcml2WzBdID09PSAweDAwKVxuXHRcdFx0dGhpcy5fcHJpdiA9IHRoaXMuX3ByaXYuc2xpY2UoMSk7XG5cdFx0dGhpcy5fcHJpdiA9IHRoaXMuX3ByaXYuc2xpY2UoMCwgMzIpO1xuXHR9XG5cdHRoaXMuX2tleSA9IHBrO1xuXHR0aGlzLl9pc1ByaXYgPSB0cnVlO1xufTtcbkRpZmZpZUhlbGxtYW4ucHJvdG90eXBlLnNldFByaXZhdGVLZXkgPSBEaWZmaWVIZWxsbWFuLnByb3RvdHlwZS5zZXRLZXk7XG5cbkRpZmZpZUhlbGxtYW4ucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXJwaykge1xuXHR0aGlzLl9rZXlDaGVjayhvdGhlcnBrLCB0cnVlKTtcblx0aWYgKCF0aGlzLl9pc1ByaXYpXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignREggZXhjaGFuZ2UgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHdpdGggJyArXG5cdFx0ICAgICdhIHByaXZhdGUga2V5IHlldCcpKTtcblxuXHR2YXIgcHViO1xuXHRpZiAodGhpcy5fYWxnbyA9PT0gJ2RzYScpIHtcblx0XHRyZXR1cm4gKHRoaXMuX2RoLmNvbXB1dGVTZWNyZXQoXG5cdFx0ICAgIG90aGVycGsucGFydC55LmRhdGEpKTtcblxuXHR9IGVsc2UgaWYgKHRoaXMuX2FsZ28gPT09ICdlY2RzYScpIHtcblx0XHRpZiAoQ1JZUFRPX0hBVkVfRUNESCkge1xuXHRcdFx0cmV0dXJuICh0aGlzLl9kaC5jb21wdXRlU2VjcmV0KFxuXHRcdFx0ICAgIG90aGVycGsucGFydC5RLmRhdGEpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHViID0gbmV3IEVDUHVibGljKFxuXHRcdFx0ICAgIHRoaXMuX2VjUGFyYW1zLCBvdGhlcnBrLnBhcnQuUS5kYXRhKTtcblx0XHRcdHJldHVybiAodGhpcy5fcHJpdi5kZXJpdmVTaGFyZWRTZWNyZXQocHViKSk7XG5cdFx0fVxuXG5cdH0gZWxzZSBpZiAodGhpcy5fYWxnbyA9PT0gJ2N1cnZlMjU1MTknKSB7XG5cdFx0cHViID0gb3RoZXJway5wYXJ0LkEuZGF0YTtcblx0XHR3aGlsZSAocHViWzBdID09PSAweDAwICYmIHB1Yi5sZW5ndGggPiAzMilcblx0XHRcdHB1YiA9IHB1Yi5zbGljZSgxKTtcblx0XHR2YXIgcHJpdiA9IHRoaXMuX3ByaXY7XG5cdFx0YXNzZXJ0LnN0cmljdEVxdWFsKHB1Yi5sZW5ndGgsIDMyKTtcblx0XHRhc3NlcnQuc3RyaWN0RXF1YWwocHJpdi5sZW5ndGgsIDMyKTtcblxuXHRcdHZhciBzZWNyZXQgPSBuYWNsLmJveC5iZWZvcmUobmV3IFVpbnQ4QXJyYXkocHViKSxcblx0XHQgICAgbmV3IFVpbnQ4QXJyYXkocHJpdikpO1xuXG5cdFx0cmV0dXJuIChCdWZmZXIuZnJvbShzZWNyZXQpKTtcblx0fVxuXG5cdHRocm93IChuZXcgRXJyb3IoJ0ludmFsaWQgYWxnb3JpdGhtOiAnICsgdGhpcy5fYWxnbykpO1xufTtcblxuRGlmZmllSGVsbG1hbi5wcm90b3R5cGUuZ2VuZXJhdGVLZXkgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBwYXJ0cyA9IFtdO1xuXHR2YXIgcHJpdiwgcHViO1xuXHRpZiAodGhpcy5fYWxnbyA9PT0gJ2RzYScpIHtcblx0XHR0aGlzLl9kaC5nZW5lcmF0ZUtleXMoKTtcblxuXHRcdHBhcnRzLnB1c2goe25hbWU6ICdwJywgZGF0YTogdGhpcy5fcC5kYXRhfSk7XG5cdFx0cGFydHMucHVzaCh7bmFtZTogJ3EnLCBkYXRhOiB0aGlzLl9rZXkucGFydC5xLmRhdGF9KTtcblx0XHRwYXJ0cy5wdXNoKHtuYW1lOiAnZycsIGRhdGE6IHRoaXMuX2cuZGF0YX0pO1xuXHRcdHBhcnRzLnB1c2goe25hbWU6ICd5JywgZGF0YTogdGhpcy5fZGguZ2V0UHVibGljS2V5KCl9KTtcblx0XHRwYXJ0cy5wdXNoKHtuYW1lOiAneCcsIGRhdGE6IHRoaXMuX2RoLmdldFByaXZhdGVLZXkoKX0pO1xuXHRcdHRoaXMuX2tleSA9IG5ldyBQcml2YXRlS2V5KHtcblx0XHRcdHR5cGU6ICdkc2EnLFxuXHRcdFx0cGFydHM6IHBhcnRzXG5cdFx0fSk7XG5cdFx0dGhpcy5faXNQcml2ID0gdHJ1ZTtcblx0XHRyZXR1cm4gKHRoaXMuX2tleSk7XG5cblx0fSBlbHNlIGlmICh0aGlzLl9hbGdvID09PSAnZWNkc2EnKSB7XG5cdFx0aWYgKENSWVBUT19IQVZFX0VDREgpIHtcblx0XHRcdHRoaXMuX2RoLmdlbmVyYXRlS2V5cygpO1xuXG5cdFx0XHRwYXJ0cy5wdXNoKHtuYW1lOiAnY3VydmUnLFxuXHRcdFx0ICAgIGRhdGE6IEJ1ZmZlci5mcm9tKHRoaXMuX2N1cnZlKX0pO1xuXHRcdFx0cGFydHMucHVzaCh7bmFtZTogJ1EnLCBkYXRhOiB0aGlzLl9kaC5nZXRQdWJsaWNLZXkoKX0pO1xuXHRcdFx0cGFydHMucHVzaCh7bmFtZTogJ2QnLCBkYXRhOiB0aGlzLl9kaC5nZXRQcml2YXRlS2V5KCl9KTtcblx0XHRcdHRoaXMuX2tleSA9IG5ldyBQcml2YXRlS2V5KHtcblx0XHRcdFx0dHlwZTogJ2VjZHNhJyxcblx0XHRcdFx0Y3VydmU6IHRoaXMuX2N1cnZlLFxuXHRcdFx0XHRwYXJ0czogcGFydHNcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5faXNQcml2ID0gdHJ1ZTtcblx0XHRcdHJldHVybiAodGhpcy5fa2V5KTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgbiA9IHRoaXMuX2VjUGFyYW1zLmdldE4oKTtcblx0XHRcdHZhciByID0gbmV3IGpzYm4oY3J5cHRvLnJhbmRvbUJ5dGVzKG4uYml0TGVuZ3RoKCkpKTtcblx0XHRcdHZhciBuMSA9IG4uc3VidHJhY3QoanNibi5PTkUpO1xuXHRcdFx0cHJpdiA9IHIubW9kKG4xKS5hZGQoanNibi5PTkUpO1xuXHRcdFx0cHViID0gdGhpcy5fZWNQYXJhbXMuZ2V0RygpLm11bHRpcGx5KHByaXYpO1xuXG5cdFx0XHRwcml2ID0gQnVmZmVyLmZyb20ocHJpdi50b0J5dGVBcnJheSgpKTtcblx0XHRcdHB1YiA9IEJ1ZmZlci5mcm9tKHRoaXMuX2VjUGFyYW1zLmdldEN1cnZlKCkuXG5cdFx0XHQgICAgZW5jb2RlUG9pbnRIZXgocHViKSwgJ2hleCcpO1xuXG5cdFx0XHR0aGlzLl9wcml2ID0gbmV3IEVDUHJpdmF0ZSh0aGlzLl9lY1BhcmFtcywgcHJpdik7XG5cblx0XHRcdHBhcnRzLnB1c2goe25hbWU6ICdjdXJ2ZScsXG5cdFx0XHQgICAgZGF0YTogQnVmZmVyLmZyb20odGhpcy5fY3VydmUpfSk7XG5cdFx0XHRwYXJ0cy5wdXNoKHtuYW1lOiAnUScsIGRhdGE6IHB1Yn0pO1xuXHRcdFx0cGFydHMucHVzaCh7bmFtZTogJ2QnLCBkYXRhOiBwcml2fSk7XG5cblx0XHRcdHRoaXMuX2tleSA9IG5ldyBQcml2YXRlS2V5KHtcblx0XHRcdFx0dHlwZTogJ2VjZHNhJyxcblx0XHRcdFx0Y3VydmU6IHRoaXMuX2N1cnZlLFxuXHRcdFx0XHRwYXJ0czogcGFydHNcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5faXNQcml2ID0gdHJ1ZTtcblx0XHRcdHJldHVybiAodGhpcy5fa2V5KTtcblx0XHR9XG5cblx0fSBlbHNlIGlmICh0aGlzLl9hbGdvID09PSAnY3VydmUyNTUxOScpIHtcblx0XHR2YXIgcGFpciA9IG5hY2wuYm94LmtleVBhaXIoKTtcblx0XHRwcml2ID0gQnVmZmVyLmZyb20ocGFpci5zZWNyZXRLZXkpO1xuXHRcdHB1YiA9IEJ1ZmZlci5mcm9tKHBhaXIucHVibGljS2V5KTtcblx0XHRwcml2ID0gQnVmZmVyLmNvbmNhdChbcHJpdiwgcHViXSk7XG5cdFx0YXNzZXJ0LnN0cmljdEVxdWFsKHByaXYubGVuZ3RoLCA2NCk7XG5cdFx0YXNzZXJ0LnN0cmljdEVxdWFsKHB1Yi5sZW5ndGgsIDMyKTtcblxuXHRcdHBhcnRzLnB1c2goe25hbWU6ICdBJywgZGF0YTogcHVifSk7XG5cdFx0cGFydHMucHVzaCh7bmFtZTogJ2snLCBkYXRhOiBwcml2fSk7XG5cdFx0dGhpcy5fa2V5ID0gbmV3IFByaXZhdGVLZXkoe1xuXHRcdFx0dHlwZTogJ2N1cnZlMjU1MTknLFxuXHRcdFx0cGFydHM6IHBhcnRzXG5cdFx0fSk7XG5cdFx0dGhpcy5faXNQcml2ID0gdHJ1ZTtcblx0XHRyZXR1cm4gKHRoaXMuX2tleSk7XG5cdH1cblxuXHR0aHJvdyAobmV3IEVycm9yKCdJbnZhbGlkIGFsZ29yaXRobTogJyArIHRoaXMuX2FsZ28pKTtcbn07XG5EaWZmaWVIZWxsbWFuLnByb3RvdHlwZS5nZW5lcmF0ZUtleXMgPSBEaWZmaWVIZWxsbWFuLnByb3RvdHlwZS5nZW5lcmF0ZUtleTtcblxuLyogVGhlc2UgYXJlIGhlbHBlcnMgZm9yIHVzaW5nIGVjYy1qc2JuIChmb3Igbm9kZSAwLjEwIGNvbXBhdGliaWxpdHkpLiAqL1xuXG5mdW5jdGlvbiBYOUVDUGFyYW1ldGVycyhuYW1lKSB7XG5cdHZhciBwYXJhbXMgPSBhbGdzLmN1cnZlc1tuYW1lXTtcblx0YXNzZXJ0Lm9iamVjdChwYXJhbXMpO1xuXG5cdHZhciBwID0gbmV3IGpzYm4ocGFyYW1zLnApO1xuXHR2YXIgYSA9IG5ldyBqc2JuKHBhcmFtcy5hKTtcblx0dmFyIGIgPSBuZXcganNibihwYXJhbXMuYik7XG5cdHZhciBuID0gbmV3IGpzYm4ocGFyYW1zLm4pO1xuXHR2YXIgaCA9IGpzYm4uT05FO1xuXHR2YXIgY3VydmUgPSBuZXcgZWMuRUNDdXJ2ZUZwKHAsIGEsIGIpO1xuXHR2YXIgRyA9IGN1cnZlLmRlY29kZVBvaW50SGV4KHBhcmFtcy5HLnRvU3RyaW5nKCdoZXgnKSk7XG5cblx0dGhpcy5jdXJ2ZSA9IGN1cnZlO1xuXHR0aGlzLmcgPSBHO1xuXHR0aGlzLm4gPSBuO1xuXHR0aGlzLmggPSBoO1xufVxuWDlFQ1BhcmFtZXRlcnMucHJvdG90eXBlLmdldEN1cnZlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuY3VydmUpOyB9O1xuWDlFQ1BhcmFtZXRlcnMucHJvdG90eXBlLmdldEcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5nKTsgfTtcblg5RUNQYXJhbWV0ZXJzLnByb3RvdHlwZS5nZXROID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMubik7IH07XG5YOUVDUGFyYW1ldGVycy5wcm90b3R5cGUuZ2V0SCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLmgpOyB9O1xuXG5mdW5jdGlvbiBFQ1B1YmxpYyhwYXJhbXMsIGJ1ZmZlcikge1xuXHR0aGlzLl9wYXJhbXMgPSBwYXJhbXM7XG5cdGlmIChidWZmZXJbMF0gPT09IDB4MDApXG5cdFx0YnVmZmVyID0gYnVmZmVyLnNsaWNlKDEpO1xuXHR0aGlzLl9wdWIgPSBwYXJhbXMuZ2V0Q3VydmUoKS5kZWNvZGVQb2ludEhleChidWZmZXIudG9TdHJpbmcoJ2hleCcpKTtcbn1cblxuZnVuY3Rpb24gRUNQcml2YXRlKHBhcmFtcywgYnVmZmVyKSB7XG5cdHRoaXMuX3BhcmFtcyA9IHBhcmFtcztcblx0dGhpcy5fcHJpdiA9IG5ldyBqc2JuKHV0aWxzLm1wTm9ybWFsaXplKGJ1ZmZlcikpO1xufVxuRUNQcml2YXRlLnByb3RvdHlwZS5kZXJpdmVTaGFyZWRTZWNyZXQgPSBmdW5jdGlvbiAocHViS2V5KSB7XG5cdGFzc2VydC5vayhwdWJLZXkgaW5zdGFuY2VvZiBFQ1B1YmxpYyk7XG5cdHZhciBTID0gcHViS2V5Ll9wdWIubXVsdGlwbHkodGhpcy5fcHJpdik7XG5cdHJldHVybiAoQnVmZmVyLmZyb20oUy5nZXRYKCkudG9CaWdJbnRlZ2VyKCkudG9CeXRlQXJyYXkoKSkpO1xufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVFRDI1NTE5KCkge1xuXHR2YXIgcGFpciA9IG5hY2wuc2lnbi5rZXlQYWlyKCk7XG5cdHZhciBwcml2ID0gQnVmZmVyLmZyb20ocGFpci5zZWNyZXRLZXkpO1xuXHR2YXIgcHViID0gQnVmZmVyLmZyb20ocGFpci5wdWJsaWNLZXkpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwocHJpdi5sZW5ndGgsIDY0KTtcblx0YXNzZXJ0LnN0cmljdEVxdWFsKHB1Yi5sZW5ndGgsIDMyKTtcblxuXHR2YXIgcGFydHMgPSBbXTtcblx0cGFydHMucHVzaCh7bmFtZTogJ0EnLCBkYXRhOiBwdWJ9KTtcblx0cGFydHMucHVzaCh7bmFtZTogJ2snLCBkYXRhOiBwcml2LnNsaWNlKDAsIDMyKX0pO1xuXHR2YXIga2V5ID0gbmV3IFByaXZhdGVLZXkoe1xuXHRcdHR5cGU6ICdlZDI1NTE5Jyxcblx0XHRwYXJ0czogcGFydHNcblx0fSk7XG5cdHJldHVybiAoa2V5KTtcbn1cblxuLyogR2VuZXJhdGVzIGEgbmV3IEVDRFNBIHByaXZhdGUga2V5IG9uIGEgZ2l2ZW4gY3VydmUuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUVDRFNBKGN1cnZlKSB7XG5cdHZhciBwYXJ0cyA9IFtdO1xuXHR2YXIga2V5O1xuXG5cdGlmIChDUllQVE9fSEFWRV9FQ0RIKSB7XG5cdFx0Lypcblx0XHQgKiBOb2RlIGNyeXB0byBkb2Vzbid0IGV4cG9zZSBrZXkgZ2VuZXJhdGlvbiBkaXJlY3RseSwgYnV0IHRoZVxuXHRcdCAqIEVDREggaW5zdGFuY2VzIGNhbiBnZW5lcmF0ZSBrZXlzLiBJdCB0dXJucyBvdXQgdGhpcyBqdXN0XG5cdFx0ICogY2FsbHMgaW50byB0aGUgT3BlblNTTCBnZW5lcmljIGtleSBnZW5lcmF0b3IsIGFuZCB3ZSBjYW5cblx0XHQgKiByZWFkIGl0cyBvdXRwdXQgaGFwcGlseSB3aXRob3V0IGRvaW5nIGFuIGFjdHVhbCBESC4gU28gd2Vcblx0XHQgKiB1c2UgdGhhdCBoZXJlLlxuXHRcdCAqL1xuXHRcdHZhciBvc0N1cnZlID0ge1xuXHRcdFx0J25pc3RwMjU2JzogJ3ByaW1lMjU2djEnLFxuXHRcdFx0J25pc3RwMzg0JzogJ3NlY3AzODRyMScsXG5cdFx0XHQnbmlzdHA1MjEnOiAnc2VjcDUyMXIxJ1xuXHRcdH1bY3VydmVdO1xuXG5cdFx0dmFyIGRoID0gY3J5cHRvLmNyZWF0ZUVDREgob3NDdXJ2ZSk7XG5cdFx0ZGguZ2VuZXJhdGVLZXlzKCk7XG5cblx0XHRwYXJ0cy5wdXNoKHtuYW1lOiAnY3VydmUnLFxuXHRcdCAgICBkYXRhOiBCdWZmZXIuZnJvbShjdXJ2ZSl9KTtcblx0XHRwYXJ0cy5wdXNoKHtuYW1lOiAnUScsIGRhdGE6IGRoLmdldFB1YmxpY0tleSgpfSk7XG5cdFx0cGFydHMucHVzaCh7bmFtZTogJ2QnLCBkYXRhOiBkaC5nZXRQcml2YXRlS2V5KCl9KTtcblxuXHRcdGtleSA9IG5ldyBQcml2YXRlS2V5KHtcblx0XHRcdHR5cGU6ICdlY2RzYScsXG5cdFx0XHRjdXJ2ZTogY3VydmUsXG5cdFx0XHRwYXJ0czogcGFydHNcblx0XHR9KTtcblx0XHRyZXR1cm4gKGtleSk7XG5cdH0gZWxzZSB7XG5cblx0XHR2YXIgZWNQYXJhbXMgPSBuZXcgWDlFQ1BhcmFtZXRlcnMoY3VydmUpO1xuXG5cdFx0LyogVGhpcyBhbGdvcml0aG0gdGFrZW4gZnJvbSBGSVBTIFBVQiAxODYtNCAoc2VjdGlvbiBCLjQuMSkgKi9cblx0XHR2YXIgbiA9IGVjUGFyYW1zLmdldE4oKTtcblx0XHQvKlxuXHRcdCAqIFRoZSBjcnlwdG8ucmFuZG9tQnl0ZXMoKSBmdW5jdGlvbiBjYW4gb25seSBnaXZlIHVzIHdob2xlXG5cdFx0ICogYnl0ZXMsIHNvIHRha2luZyBhIG5vZCBmcm9tIFg5LjYyLCB3ZSByb3VuZCB1cC5cblx0XHQgKi9cblx0XHR2YXIgY0J5dGVMZW4gPSBNYXRoLmNlaWwoKG4uYml0TGVuZ3RoKCkgKyA2NCkgLyA4KTtcblx0XHR2YXIgYyA9IG5ldyBqc2JuKGNyeXB0by5yYW5kb21CeXRlcyhjQnl0ZUxlbikpO1xuXG5cdFx0dmFyIG4xID0gbi5zdWJ0cmFjdChqc2JuLk9ORSk7XG5cdFx0dmFyIHByaXYgPSBjLm1vZChuMSkuYWRkKGpzYm4uT05FKTtcblx0XHR2YXIgcHViID0gZWNQYXJhbXMuZ2V0RygpLm11bHRpcGx5KHByaXYpO1xuXG5cdFx0cHJpdiA9IEJ1ZmZlci5mcm9tKHByaXYudG9CeXRlQXJyYXkoKSk7XG5cdFx0cHViID0gQnVmZmVyLmZyb20oZWNQYXJhbXMuZ2V0Q3VydmUoKS5cblx0XHQgICAgZW5jb2RlUG9pbnRIZXgocHViKSwgJ2hleCcpO1xuXG5cdFx0cGFydHMucHVzaCh7bmFtZTogJ2N1cnZlJywgZGF0YTogQnVmZmVyLmZyb20oY3VydmUpfSk7XG5cdFx0cGFydHMucHVzaCh7bmFtZTogJ1EnLCBkYXRhOiBwdWJ9KTtcblx0XHRwYXJ0cy5wdXNoKHtuYW1lOiAnZCcsIGRhdGE6IHByaXZ9KTtcblxuXHRcdGtleSA9IG5ldyBQcml2YXRlS2V5KHtcblx0XHRcdHR5cGU6ICdlY2RzYScsXG5cdFx0XHRjdXJ2ZTogY3VydmUsXG5cdFx0XHRwYXJ0czogcGFydHNcblx0XHR9KTtcblx0XHRyZXR1cm4gKGtleSk7XG5cdH1cbn1cbiIsIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0cmVhZDogcmVhZCxcblx0cmVhZFBrY3MxOiByZWFkUGtjczEsXG5cdHdyaXRlOiB3cml0ZSxcblx0d3JpdGVQa2NzMTogd3JpdGVQa2NzMVxufTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjEnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4uL2FsZ3MnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBLZXkgPSByZXF1aXJlKCcuLi9rZXknKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi4vcHJpdmF0ZS1rZXknKTtcbnZhciBwZW0gPSByZXF1aXJlKCcuL3BlbScpO1xuXG52YXIgcGtjczggPSByZXF1aXJlKCcuL3BrY3M4Jyk7XG52YXIgcmVhZEVDRFNBQ3VydmUgPSBwa2NzOC5yZWFkRUNEU0FDdXJ2ZTtcblxuZnVuY3Rpb24gcmVhZChidWYsIG9wdGlvbnMpIHtcblx0cmV0dXJuIChwZW0ucmVhZChidWYsIG9wdGlvbnMsICdwa2NzMScpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGUoa2V5LCBvcHRpb25zKSB7XG5cdHJldHVybiAocGVtLndyaXRlKGtleSwgb3B0aW9ucywgJ3BrY3MxJykpO1xufVxuXG4vKiBIZWxwZXIgdG8gcmVhZCBpbiBhIHNpbmdsZSBtcGludCAqL1xuZnVuY3Rpb24gcmVhZE1QSW50KGRlciwgbm0pIHtcblx0YXNzZXJ0LnN0cmljdEVxdWFsKGRlci5wZWVrKCksIGFzbjEuQmVyLkludGVnZXIsXG5cdCAgICBubSArICcgaXMgbm90IGFuIEludGVnZXInKTtcblx0cmV0dXJuICh1dGlscy5tcE5vcm1hbGl6ZShkZXIucmVhZFN0cmluZyhhc24xLkJlci5JbnRlZ2VyLCB0cnVlKSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczEoYWxnLCB0eXBlLCBkZXIpIHtcblx0c3dpdGNoIChhbGcpIHtcblx0Y2FzZSAnUlNBJzpcblx0XHRpZiAodHlwZSA9PT0gJ3B1YmxpYycpXG5cdFx0XHRyZXR1cm4gKHJlYWRQa2NzMVJTQVB1YmxpYyhkZXIpKTtcblx0XHRlbHNlIGlmICh0eXBlID09PSAncHJpdmF0ZScpXG5cdFx0XHRyZXR1cm4gKHJlYWRQa2NzMVJTQVByaXZhdGUoZGVyKSk7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBrZXkgdHlwZTogJyArIHR5cGUpKTtcblx0Y2FzZSAnRFNBJzpcblx0XHRpZiAodHlwZSA9PT0gJ3B1YmxpYycpXG5cdFx0XHRyZXR1cm4gKHJlYWRQa2NzMURTQVB1YmxpYyhkZXIpKTtcblx0XHRlbHNlIGlmICh0eXBlID09PSAncHJpdmF0ZScpXG5cdFx0XHRyZXR1cm4gKHJlYWRQa2NzMURTQVByaXZhdGUoZGVyKSk7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBrZXkgdHlwZTogJyArIHR5cGUpKTtcblx0Y2FzZSAnRUMnOlxuXHRjYXNlICdFQ0RTQSc6XG5cdFx0aWYgKHR5cGUgPT09ICdwcml2YXRlJylcblx0XHRcdHJldHVybiAocmVhZFBrY3MxRUNEU0FQcml2YXRlKGRlcikpO1xuXHRcdGVsc2UgaWYgKHR5cGUgPT09ICdwdWJsaWMnKVxuXHRcdFx0cmV0dXJuIChyZWFkUGtjczFFQ0RTQVB1YmxpYyhkZXIpKTtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdVbmtub3duIGtleSB0eXBlOiAnICsgdHlwZSkpO1xuXHRjYXNlICdFRERTQSc6XG5cdGNhc2UgJ0VkRFNBJzpcblx0XHRpZiAodHlwZSA9PT0gJ3ByaXZhdGUnKVxuXHRcdFx0cmV0dXJuIChyZWFkUGtjczFFZERTQVByaXZhdGUoZGVyKSk7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcih0eXBlICsgJyBrZXlzIG5vdCBzdXBwb3J0ZWQgd2l0aCBFZERTQScpKTtcblx0ZGVmYXVsdDpcblx0XHR0aHJvdyAobmV3IEVycm9yKCdVbmtub3duIGtleSBhbGdvOiAnICsgYWxnKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVhZFBrY3MxUlNBUHVibGljKGRlcikge1xuXHQvLyBtb2R1bHVzIGFuZCBleHBvbmVudFxuXHR2YXIgbiA9IHJlYWRNUEludChkZXIsICdtb2R1bHVzJyk7XG5cdHZhciBlID0gcmVhZE1QSW50KGRlciwgJ2V4cG9uZW50Jyk7XG5cblx0Ly8gbm93LCBtYWtlIHRoZSBrZXlcblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAncnNhJyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBuYW1lOiAnZScsIGRhdGE6IGUgfSxcblx0XHRcdHsgbmFtZTogJ24nLCBkYXRhOiBuIH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczFSU0FQcml2YXRlKGRlcikge1xuXHR2YXIgdmVyc2lvbiA9IHJlYWRNUEludChkZXIsICd2ZXJzaW9uJyk7XG5cdGFzc2VydC5zdHJpY3RFcXVhbCh2ZXJzaW9uWzBdLCAwKTtcblxuXHQvLyBtb2R1bHVzIHRoZW4gcHVibGljIGV4cG9uZW50XG5cdHZhciBuID0gcmVhZE1QSW50KGRlciwgJ21vZHVsdXMnKTtcblx0dmFyIGUgPSByZWFkTVBJbnQoZGVyLCAncHVibGljIGV4cG9uZW50Jyk7XG5cdHZhciBkID0gcmVhZE1QSW50KGRlciwgJ3ByaXZhdGUgZXhwb25lbnQnKTtcblx0dmFyIHAgPSByZWFkTVBJbnQoZGVyLCAncHJpbWUxJyk7XG5cdHZhciBxID0gcmVhZE1QSW50KGRlciwgJ3ByaW1lMicpO1xuXHR2YXIgZG1vZHAgPSByZWFkTVBJbnQoZGVyLCAnZXhwb25lbnQxJyk7XG5cdHZhciBkbW9kcSA9IHJlYWRNUEludChkZXIsICdleHBvbmVudDInKTtcblx0dmFyIGlxbXAgPSByZWFkTVBJbnQoZGVyLCAnaXFtcCcpO1xuXG5cdC8vIG5vdywgbWFrZSB0aGUga2V5XG5cdHZhciBrZXkgPSB7XG5cdFx0dHlwZTogJ3JzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ24nLCBkYXRhOiBuIH0sXG5cdFx0XHR7IG5hbWU6ICdlJywgZGF0YTogZSB9LFxuXHRcdFx0eyBuYW1lOiAnZCcsIGRhdGE6IGQgfSxcblx0XHRcdHsgbmFtZTogJ2lxbXAnLCBkYXRhOiBpcW1wIH0sXG5cdFx0XHR7IG5hbWU6ICdwJywgZGF0YTogcCB9LFxuXHRcdFx0eyBuYW1lOiAncScsIGRhdGE6IHEgfSxcblx0XHRcdHsgbmFtZTogJ2Rtb2RwJywgZGF0YTogZG1vZHAgfSxcblx0XHRcdHsgbmFtZTogJ2Rtb2RxJywgZGF0YTogZG1vZHEgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBQcml2YXRlS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczFEU0FQcml2YXRlKGRlcikge1xuXHR2YXIgdmVyc2lvbiA9IHJlYWRNUEludChkZXIsICd2ZXJzaW9uJyk7XG5cdGFzc2VydC5zdHJpY3RFcXVhbCh2ZXJzaW9uLnJlYWRVSW50OCgwKSwgMCk7XG5cblx0dmFyIHAgPSByZWFkTVBJbnQoZGVyLCAncCcpO1xuXHR2YXIgcSA9IHJlYWRNUEludChkZXIsICdxJyk7XG5cdHZhciBnID0gcmVhZE1QSW50KGRlciwgJ2cnKTtcblx0dmFyIHkgPSByZWFkTVBJbnQoZGVyLCAneScpO1xuXHR2YXIgeCA9IHJlYWRNUEludChkZXIsICd4Jyk7XG5cblx0Ly8gbm93LCBtYWtlIHRoZSBrZXlcblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAnZHNhJyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBuYW1lOiAncCcsIGRhdGE6IHAgfSxcblx0XHRcdHsgbmFtZTogJ3EnLCBkYXRhOiBxIH0sXG5cdFx0XHR7IG5hbWU6ICdnJywgZGF0YTogZyB9LFxuXHRcdFx0eyBuYW1lOiAneScsIGRhdGE6IHkgfSxcblx0XHRcdHsgbmFtZTogJ3gnLCBkYXRhOiB4IH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgUHJpdmF0ZUtleShrZXkpKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3MxRWREU0FQcml2YXRlKGRlcikge1xuXHR2YXIgdmVyc2lvbiA9IHJlYWRNUEludChkZXIsICd2ZXJzaW9uJyk7XG5cdGFzc2VydC5zdHJpY3RFcXVhbCh2ZXJzaW9uLnJlYWRVSW50OCgwKSwgMSk7XG5cblx0Ly8gcHJpdmF0ZSBrZXlcblx0dmFyIGsgPSBkZXIucmVhZFN0cmluZyhhc24xLkJlci5PY3RldFN0cmluZywgdHJ1ZSk7XG5cblx0ZGVyLnJlYWRTZXF1ZW5jZSgweGEwKTtcblx0dmFyIG9pZCA9IGRlci5yZWFkT0lEKCk7XG5cdGFzc2VydC5zdHJpY3RFcXVhbChvaWQsICcxLjMuMTAxLjExMicsICd0aGUgZWQyNTUxOSBjdXJ2ZSBpZGVudGlmaWVyJyk7XG5cblx0ZGVyLnJlYWRTZXF1ZW5jZSgweGExKTtcblx0dmFyIEEgPSB1dGlscy5yZWFkQml0U3RyaW5nKGRlcik7XG5cblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAnZWQyNTUxOScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ0EnLCBkYXRhOiB1dGlscy56ZXJvUGFkVG9MZW5ndGgoQSwgMzIpIH0sXG5cdFx0XHR7IG5hbWU6ICdrJywgZGF0YTogayB9XG5cdFx0XVxuXHR9O1xuXG5cdHJldHVybiAobmV3IFByaXZhdGVLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzMURTQVB1YmxpYyhkZXIpIHtcblx0dmFyIHkgPSByZWFkTVBJbnQoZGVyLCAneScpO1xuXHR2YXIgcCA9IHJlYWRNUEludChkZXIsICdwJyk7XG5cdHZhciBxID0gcmVhZE1QSW50KGRlciwgJ3EnKTtcblx0dmFyIGcgPSByZWFkTVBJbnQoZGVyLCAnZycpO1xuXG5cdHZhciBrZXkgPSB7XG5cdFx0dHlwZTogJ2RzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ3knLCBkYXRhOiB5IH0sXG5cdFx0XHR7IG5hbWU6ICdwJywgZGF0YTogcCB9LFxuXHRcdFx0eyBuYW1lOiAncScsIGRhdGE6IHEgfSxcblx0XHRcdHsgbmFtZTogJ2cnLCBkYXRhOiBnIH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczFFQ0RTQVB1YmxpYyhkZXIpIHtcblx0ZGVyLnJlYWRTZXF1ZW5jZSgpO1xuXG5cdHZhciBvaWQgPSBkZXIucmVhZE9JRCgpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwob2lkLCAnMS4yLjg0MC4xMDA0NS4yLjEnLCAnbXVzdCBiZSBlY1B1YmxpY0tleScpO1xuXG5cdHZhciBjdXJ2ZU9pZCA9IGRlci5yZWFkT0lEKCk7XG5cblx0dmFyIGN1cnZlO1xuXHR2YXIgY3VydmVzID0gT2JqZWN0LmtleXMoYWxncy5jdXJ2ZXMpO1xuXHRmb3IgKHZhciBqID0gMDsgaiA8IGN1cnZlcy5sZW5ndGg7ICsraikge1xuXHRcdHZhciBjID0gY3VydmVzW2pdO1xuXHRcdHZhciBjZCA9IGFsZ3MuY3VydmVzW2NdO1xuXHRcdGlmIChjZC5wa2NzOG9pZCA9PT0gY3VydmVPaWQpIHtcblx0XHRcdGN1cnZlID0gYztcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXHRhc3NlcnQuc3RyaW5nKGN1cnZlLCAnYSBrbm93biBFQ0RTQSBuYW1lZCBjdXJ2ZScpO1xuXG5cdHZhciBRID0gZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuQml0U3RyaW5nLCB0cnVlKTtcblx0USA9IHV0aWxzLmVjTm9ybWFsaXplKFEpO1xuXG5cdHZhciBrZXkgPSB7XG5cdFx0dHlwZTogJ2VjZHNhJyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBuYW1lOiAnY3VydmUnLCBkYXRhOiBCdWZmZXIuZnJvbShjdXJ2ZSkgfSxcblx0XHRcdHsgbmFtZTogJ1EnLCBkYXRhOiBRIH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczFFQ0RTQVByaXZhdGUoZGVyKSB7XG5cdHZhciB2ZXJzaW9uID0gcmVhZE1QSW50KGRlciwgJ3ZlcnNpb24nKTtcblx0YXNzZXJ0LnN0cmljdEVxdWFsKHZlcnNpb24ucmVhZFVJbnQ4KDApLCAxKTtcblxuXHQvLyBwcml2YXRlIGtleVxuXHR2YXIgZCA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLk9jdGV0U3RyaW5nLCB0cnVlKTtcblxuXHRkZXIucmVhZFNlcXVlbmNlKDB4YTApO1xuXHR2YXIgY3VydmUgPSByZWFkRUNEU0FDdXJ2ZShkZXIpO1xuXHRhc3NlcnQuc3RyaW5nKGN1cnZlLCAnYSBrbm93biBlbGxpcHRpYyBjdXJ2ZScpO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoMHhhMSk7XG5cdHZhciBRID0gZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuQml0U3RyaW5nLCB0cnVlKTtcblx0USA9IHV0aWxzLmVjTm9ybWFsaXplKFEpO1xuXG5cdHZhciBrZXkgPSB7XG5cdFx0dHlwZTogJ2VjZHNhJyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBuYW1lOiAnY3VydmUnLCBkYXRhOiBCdWZmZXIuZnJvbShjdXJ2ZSkgfSxcblx0XHRcdHsgbmFtZTogJ1EnLCBkYXRhOiBRIH0sXG5cdFx0XHR7IG5hbWU6ICdkJywgZGF0YTogZCB9XG5cdFx0XVxuXHR9O1xuXG5cdHJldHVybiAobmV3IFByaXZhdGVLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczEoZGVyLCBrZXkpIHtcblx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblxuXHRzd2l0Y2ggKGtleS50eXBlKSB7XG5cdGNhc2UgJ3JzYSc6XG5cdFx0aWYgKFByaXZhdGVLZXkuaXNQcml2YXRlS2V5KGtleSkpXG5cdFx0XHR3cml0ZVBrY3MxUlNBUHJpdmF0ZShkZXIsIGtleSk7XG5cdFx0ZWxzZVxuXHRcdFx0d3JpdGVQa2NzMVJTQVB1YmxpYyhkZXIsIGtleSk7XG5cdFx0YnJlYWs7XG5cdGNhc2UgJ2RzYSc6XG5cdFx0aWYgKFByaXZhdGVLZXkuaXNQcml2YXRlS2V5KGtleSkpXG5cdFx0XHR3cml0ZVBrY3MxRFNBUHJpdmF0ZShkZXIsIGtleSk7XG5cdFx0ZWxzZVxuXHRcdFx0d3JpdGVQa2NzMURTQVB1YmxpYyhkZXIsIGtleSk7XG5cdFx0YnJlYWs7XG5cdGNhc2UgJ2VjZHNhJzpcblx0XHRpZiAoUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5KSlcblx0XHRcdHdyaXRlUGtjczFFQ0RTQVByaXZhdGUoZGVyLCBrZXkpO1xuXHRcdGVsc2Vcblx0XHRcdHdyaXRlUGtjczFFQ0RTQVB1YmxpYyhkZXIsIGtleSk7XG5cdFx0YnJlYWs7XG5cdGNhc2UgJ2VkMjU1MTknOlxuXHRcdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdFx0d3JpdGVQa2NzMUVkRFNBUHJpdmF0ZShkZXIsIGtleSk7XG5cdFx0ZWxzZVxuXHRcdFx0d3JpdGVQa2NzMUVkRFNBUHVibGljKGRlciwga2V5KTtcblx0XHRicmVhaztcblx0ZGVmYXVsdDpcblx0XHR0aHJvdyAobmV3IEVycm9yKCdVbmtub3duIGtleSBhbGdvOiAnICsga2V5LnR5cGUpKTtcblx0fVxuXG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3MxUlNBUHVibGljKGRlciwga2V5KSB7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5uLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZS5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzMVJTQVByaXZhdGUoZGVyLCBrZXkpIHtcblx0dmFyIHZlciA9IEJ1ZmZlci5mcm9tKFswXSk7XG5cdGRlci53cml0ZUJ1ZmZlcih2ZXIsIGFzbjEuQmVyLkludGVnZXIpO1xuXG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5uLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZS5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmQuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5wLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQucS5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0aWYgKCFrZXkucGFydC5kbW9kcCB8fCAha2V5LnBhcnQuZG1vZHEpXG5cdFx0dXRpbHMuYWRkUlNBTWlzc2luZyhrZXkpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZG1vZHAuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5kbW9kcS5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmlxbXAuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczFEU0FQcml2YXRlKGRlciwga2V5KSB7XG5cdHZhciB2ZXIgPSBCdWZmZXIuZnJvbShbMF0pO1xuXHRkZXIud3JpdGVCdWZmZXIodmVyLCBhc24xLkJlci5JbnRlZ2VyKTtcblxuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQucC5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnEuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5nLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQueS5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnguZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczFEU0FQdWJsaWMoZGVyLCBrZXkpIHtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnkuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5wLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQucS5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmcuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczFFQ0RTQVB1YmxpYyhkZXIsIGtleSkge1xuXHRkZXIuc3RhcnRTZXF1ZW5jZSgpO1xuXG5cdGRlci53cml0ZU9JRCgnMS4yLjg0MC4xMDA0NS4yLjEnKTsgLyogZWNQdWJsaWNLZXkgKi9cblx0dmFyIGN1cnZlID0ga2V5LnBhcnQuY3VydmUuZGF0YS50b1N0cmluZygpO1xuXHR2YXIgY3VydmVPaWQgPSBhbGdzLmN1cnZlc1tjdXJ2ZV0ucGtjczhvaWQ7XG5cdGFzc2VydC5zdHJpbmcoY3VydmVPaWQsICdhIGtub3duIEVDRFNBIG5hbWVkIGN1cnZlJyk7XG5cdGRlci53cml0ZU9JRChjdXJ2ZU9pZCk7XG5cblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cblx0dmFyIFEgPSB1dGlscy5lY05vcm1hbGl6ZShrZXkucGFydC5RLmRhdGEsIHRydWUpO1xuXHRkZXIud3JpdGVCdWZmZXIoUSwgYXNuMS5CZXIuQml0U3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzMUVDRFNBUHJpdmF0ZShkZXIsIGtleSkge1xuXHR2YXIgdmVyID0gQnVmZmVyLmZyb20oWzFdKTtcblx0ZGVyLndyaXRlQnVmZmVyKHZlciwgYXNuMS5CZXIuSW50ZWdlcik7XG5cblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmQuZGF0YSwgYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKDB4YTApO1xuXHR2YXIgY3VydmUgPSBrZXkucGFydC5jdXJ2ZS5kYXRhLnRvU3RyaW5nKCk7XG5cdHZhciBjdXJ2ZU9pZCA9IGFsZ3MuY3VydmVzW2N1cnZlXS5wa2NzOG9pZDtcblx0YXNzZXJ0LnN0cmluZyhjdXJ2ZU9pZCwgJ2Ega25vd24gRUNEU0EgbmFtZWQgY3VydmUnKTtcblx0ZGVyLndyaXRlT0lEKGN1cnZlT2lkKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cblx0ZGVyLnN0YXJ0U2VxdWVuY2UoMHhhMSk7XG5cdHZhciBRID0gdXRpbHMuZWNOb3JtYWxpemUoa2V5LnBhcnQuUS5kYXRhLCB0cnVlKTtcblx0ZGVyLndyaXRlQnVmZmVyKFEsIGFzbjEuQmVyLkJpdFN0cmluZyk7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3MxRWREU0FQcml2YXRlKGRlciwga2V5KSB7XG5cdHZhciB2ZXIgPSBCdWZmZXIuZnJvbShbMV0pO1xuXHRkZXIud3JpdGVCdWZmZXIodmVyLCBhc24xLkJlci5JbnRlZ2VyKTtcblxuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuay5kYXRhLCBhc24xLkJlci5PY3RldFN0cmluZyk7XG5cblx0ZGVyLnN0YXJ0U2VxdWVuY2UoMHhhMCk7XG5cdGRlci53cml0ZU9JRCgnMS4zLjEwMS4xMTInKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cblx0ZGVyLnN0YXJ0U2VxdWVuY2UoMHhhMSk7XG5cdHV0aWxzLndyaXRlQml0U3RyaW5nKGRlciwga2V5LnBhcnQuQS5kYXRhKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczFFZERTQVB1YmxpYyhkZXIsIGtleSkge1xuXHR0aHJvdyAobmV3IEVycm9yKCdQdWJsaWMga2V5cyBhcmUgbm90IHN1cHBvcnRlZCBmb3IgRWREU0EgUEtDUyMxJykpO1xufVxuIiwiLy8gQ29weXJpZ2h0IDIwMTcgSm95ZW50LCBJbmMuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRyZWFkOiByZWFkLFxuXHR3cml0ZTogd3JpdGVcbn07XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBLZXkgPSByZXF1aXJlKCcuLi9rZXknKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi4vcHJpdmF0ZS1rZXknKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgU1NIQnVmZmVyID0gcmVxdWlyZSgnLi4vc3NoLWJ1ZmZlcicpO1xudmFyIERoZSA9IHJlcXVpcmUoJy4uL2RoZScpO1xuXG52YXIgc3VwcG9ydGVkQWxnb3MgPSB7XG5cdCdyc2Etc2hhMScgOiA1LFxuXHQncnNhLXNoYTI1NicgOiA4LFxuXHQncnNhLXNoYTUxMicgOiAxMCxcblx0J2VjZHNhLXAyNTYtc2hhMjU2JyA6IDEzLFxuXHQnZWNkc2EtcDM4NC1zaGEzODQnIDogMTRcblx0Lypcblx0ICogZWQyNTUxOSBpcyBoeXBvdGhldGljYWxseSBzdXBwb3J0ZWQgd2l0aCBpZCAxNVxuXHQgKiBidXQgdGhlIGNvbW1vbiB0b29scyBhdmFpbGFibGUgZG9uJ3QgYXBwZWFyIHRvIGJlXG5cdCAqIGNhcGFibGUgb2YgZ2VuZXJhdGluZy91c2luZyBlZDI1NTE5IGtleXNcblx0ICovXG59O1xuXG52YXIgc3VwcG9ydGVkQWxnb3NCeUlkID0ge307XG5PYmplY3Qua2V5cyhzdXBwb3J0ZWRBbGdvcykuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuXHRzdXBwb3J0ZWRBbGdvc0J5SWRbc3VwcG9ydGVkQWxnb3Nba11dID0gay50b1VwcGVyQ2FzZSgpO1xufSk7XG5cbmZ1bmN0aW9uIHJlYWQoYnVmLCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgKGJ1ZikgIT09ICdzdHJpbmcnKSB7XG5cdFx0YXNzZXJ0LmJ1ZmZlcihidWYsICdidWYnKTtcblx0XHRidWYgPSBidWYudG9TdHJpbmcoJ2FzY2lpJyk7XG5cdH1cblx0dmFyIGxpbmVzID0gYnVmLnNwbGl0KCdcXG4nKTtcblx0aWYgKGxpbmVzWzBdLm1hdGNoKC9eUHJpdmF0ZS1rZXktZm9ybWF0XFw6IHYxLykpIHtcblx0XHR2YXIgYWxnRWxlbXMgPSBsaW5lc1sxXS5zcGxpdCgnICcpO1xuXHRcdHZhciBhbGdvTnVtID0gcGFyc2VJbnQoYWxnRWxlbXNbMV0sIDEwKTtcblx0XHR2YXIgYWxnb05hbWUgPSBhbGdFbGVtc1syXTtcblx0XHRpZiAoIXN1cHBvcnRlZEFsZ29zQnlJZFthbGdvTnVtXSlcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGFsZ29yaXRobTogJyArIGFsZ29OYW1lKSk7XG5cdFx0cmV0dXJuIChyZWFkRE5TU0VDUHJpdmF0ZUtleShhbGdvTnVtLCBsaW5lcy5zbGljZSgyKSkpO1xuXHR9XG5cblx0Ly8gc2tpcCBhbnkgY29tbWVudC1saW5lc1xuXHR2YXIgbGluZSA9IDA7XG5cdC8qIEpTU1RZTEVEICovXG5cdHdoaWxlIChsaW5lc1tsaW5lXS5tYXRjaCgvXlxcOy8pKVxuXHRcdGxpbmUrKztcblx0Ly8gd2Ugc2hvdWxkIG5vdyBoYXZlICpvbmUgc2luZ2xlKiBsaW5lIGxlZnQgd2l0aCBvdXIgS0VZIG9uIGl0LlxuXHRpZiAoKGxpbmVzW2xpbmVdLm1hdGNoKC9cXC4gSU4gS0VZIC8pIHx8XG5cdCAgICBsaW5lc1tsaW5lXS5tYXRjaCgvXFwuIElOIEROU0tFWSAvKSkgJiYgbGluZXNbbGluZSsxXS5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gKHJlYWRSRkMzMTEwKGxpbmVzW2xpbmVdKSk7XG5cdH1cblx0dGhyb3cgKG5ldyBFcnJvcignQ2Fubm90IHBhcnNlIGRuc3NlYyBrZXknKSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRSRkMzMTEwKGtleVN0cmluZykge1xuXHR2YXIgZWxlbXMgPSBrZXlTdHJpbmcuc3BsaXQoJyAnKTtcblx0Ly91bnVzZWQgdmFyIGZsYWdzID0gcGFyc2VJbnQoZWxlbXNbM10sIDEwKTtcblx0Ly91bnVzZWQgdmFyIHByb3RvY29sID0gcGFyc2VJbnQoZWxlbXNbNF0sIDEwKTtcblx0dmFyIGFsZ29yaXRobSA9IHBhcnNlSW50KGVsZW1zWzVdLCAxMCk7XG5cdGlmICghc3VwcG9ydGVkQWxnb3NCeUlkW2FsZ29yaXRobV0pXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgYWxnb3JpdGhtOiAnICsgYWxnb3JpdGhtKSk7XG5cdHZhciBiYXNlNjRrZXkgPSBlbGVtcy5zbGljZSg2LCBlbGVtcy5sZW5ndGgpLmpvaW4oKTtcblx0dmFyIGtleUJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGJhc2U2NGtleSwgJ2Jhc2U2NCcpO1xuXHRpZiAoc3VwcG9ydGVkQWxnb3NCeUlkW2FsZ29yaXRobV0ubWF0Y2goL15SU0EtLykpIHtcblx0XHQvLyBqb2luIHRoZSByZXN0IG9mIHRoZSBib2R5IGludG8gYSBzaW5nbGUgYmFzZTY0LWJsb2Jcblx0XHR2YXIgcHVibGljRXhwb25lbnRMZW4gPSBrZXlCdWZmZXIucmVhZFVJbnQ4KDApO1xuXHRcdGlmIChwdWJsaWNFeHBvbmVudExlbiAhPSAzICYmIHB1YmxpY0V4cG9uZW50TGVuICE9IDEpXG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKCdDYW5ub3QgcGFyc2UgZG5zc2VjIGtleTogJyArXG5cdFx0XHQgICAgJ3Vuc3VwcG9ydGVkIGV4cG9uZW50IGxlbmd0aCcpKTtcblxuXHRcdHZhciBwdWJsaWNFeHBvbmVudCA9IGtleUJ1ZmZlci5zbGljZSgxLCBwdWJsaWNFeHBvbmVudExlbisxKTtcblx0XHRwdWJsaWNFeHBvbmVudCA9IHV0aWxzLm1wTm9ybWFsaXplKHB1YmxpY0V4cG9uZW50KTtcblx0XHR2YXIgbW9kdWx1cyA9IGtleUJ1ZmZlci5zbGljZSgxK3B1YmxpY0V4cG9uZW50TGVuKTtcblx0XHRtb2R1bHVzID0gdXRpbHMubXBOb3JtYWxpemUobW9kdWx1cyk7XG5cdFx0Ly8gbm93LCBtYWtlIHRoZSBrZXlcblx0XHR2YXIgcnNhS2V5ID0ge1xuXHRcdFx0dHlwZTogJ3JzYScsXG5cdFx0XHRwYXJ0czogW11cblx0XHR9O1xuXHRcdHJzYUtleS5wYXJ0cy5wdXNoKHsgbmFtZTogJ2UnLCBkYXRhOiBwdWJsaWNFeHBvbmVudH0pO1xuXHRcdHJzYUtleS5wYXJ0cy5wdXNoKHsgbmFtZTogJ24nLCBkYXRhOiBtb2R1bHVzfSk7XG5cdFx0cmV0dXJuIChuZXcgS2V5KHJzYUtleSkpO1xuXHR9XG5cdGlmIChzdXBwb3J0ZWRBbGdvc0J5SWRbYWxnb3JpdGhtXSA9PT0gJ0VDRFNBLVAzODQtU0hBMzg0JyB8fFxuXHQgICAgc3VwcG9ydGVkQWxnb3NCeUlkW2FsZ29yaXRobV0gPT09ICdFQ0RTQS1QMjU2LVNIQTI1NicpIHtcblx0XHR2YXIgY3VydmUgPSAnbmlzdHAzODQnO1xuXHRcdHZhciBzaXplID0gMzg0O1xuXHRcdGlmIChzdXBwb3J0ZWRBbGdvc0J5SWRbYWxnb3JpdGhtXS5tYXRjaCgvXkVDRFNBLVAyNTYtU0hBMjU2LykpIHtcblx0XHRcdGN1cnZlID0gJ25pc3RwMjU2Jztcblx0XHRcdHNpemUgPSAyNTY7XG5cdFx0fVxuXG5cdFx0dmFyIGVjZHNhS2V5ID0ge1xuXHRcdFx0dHlwZTogJ2VjZHNhJyxcblx0XHRcdGN1cnZlOiBjdXJ2ZSxcblx0XHRcdHNpemU6IHNpemUsXG5cdFx0XHRwYXJ0czogW1xuXHRcdFx0XHR7bmFtZTogJ2N1cnZlJywgZGF0YTogQnVmZmVyLmZyb20oY3VydmUpIH0sXG5cdFx0XHRcdHtuYW1lOiAnUScsIGRhdGE6IHV0aWxzLmVjTm9ybWFsaXplKGtleUJ1ZmZlcikgfVxuXHRcdFx0XVxuXHRcdH07XG5cdFx0cmV0dXJuIChuZXcgS2V5KGVjZHNhS2V5KSk7XG5cdH1cblx0dGhyb3cgKG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgYWxnb3JpdGhtOiAnICtcblx0ICAgIHN1cHBvcnRlZEFsZ29zQnlJZFthbGdvcml0aG1dKSk7XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRUb0J1ZihlKSB7XG5cdHJldHVybiAoQnVmZmVyLmZyb20oZS5zcGxpdCgnICcpWzFdLCAnYmFzZTY0JykpO1xufVxuXG5mdW5jdGlvbiByZWFkRE5TU0VDUlNBUHJpdmF0ZUtleShlbGVtZW50cykge1xuXHR2YXIgcnNhUGFyYW1zID0ge307XG5cdGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRpZiAoZWxlbWVudC5zcGxpdCgnICcpWzBdID09PSAnTW9kdWx1czonKVxuXHRcdFx0cnNhUGFyYW1zWyduJ10gPSBlbGVtZW50VG9CdWYoZWxlbWVudCk7XG5cdFx0ZWxzZSBpZiAoZWxlbWVudC5zcGxpdCgnICcpWzBdID09PSAnUHVibGljRXhwb25lbnQ6Jylcblx0XHRcdHJzYVBhcmFtc1snZSddID0gZWxlbWVudFRvQnVmKGVsZW1lbnQpO1xuXHRcdGVsc2UgaWYgKGVsZW1lbnQuc3BsaXQoJyAnKVswXSA9PT0gJ1ByaXZhdGVFeHBvbmVudDonKVxuXHRcdFx0cnNhUGFyYW1zWydkJ10gPSBlbGVtZW50VG9CdWYoZWxlbWVudCk7XG5cdFx0ZWxzZSBpZiAoZWxlbWVudC5zcGxpdCgnICcpWzBdID09PSAnUHJpbWUxOicpXG5cdFx0XHRyc2FQYXJhbXNbJ3AnXSA9IGVsZW1lbnRUb0J1ZihlbGVtZW50KTtcblx0XHRlbHNlIGlmIChlbGVtZW50LnNwbGl0KCcgJylbMF0gPT09ICdQcmltZTI6Jylcblx0XHRcdHJzYVBhcmFtc1sncSddID0gZWxlbWVudFRvQnVmKGVsZW1lbnQpO1xuXHRcdGVsc2UgaWYgKGVsZW1lbnQuc3BsaXQoJyAnKVswXSA9PT0gJ0V4cG9uZW50MTonKVxuXHRcdFx0cnNhUGFyYW1zWydkbW9kcCddID0gZWxlbWVudFRvQnVmKGVsZW1lbnQpO1xuXHRcdGVsc2UgaWYgKGVsZW1lbnQuc3BsaXQoJyAnKVswXSA9PT0gJ0V4cG9uZW50MjonKVxuXHRcdFx0cnNhUGFyYW1zWydkbW9kcSddID0gZWxlbWVudFRvQnVmKGVsZW1lbnQpO1xuXHRcdGVsc2UgaWYgKGVsZW1lbnQuc3BsaXQoJyAnKVswXSA9PT0gJ0NvZWZmaWNpZW50OicpXG5cdFx0XHRyc2FQYXJhbXNbJ2lxbXAnXSA9IGVsZW1lbnRUb0J1ZihlbGVtZW50KTtcblx0fSk7XG5cdC8vIG5vdywgbWFrZSB0aGUga2V5XG5cdHZhciBrZXkgPSB7XG5cdFx0dHlwZTogJ3JzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ2UnLCBkYXRhOiB1dGlscy5tcE5vcm1hbGl6ZShyc2FQYXJhbXNbJ2UnXSl9LFxuXHRcdFx0eyBuYW1lOiAnbicsIGRhdGE6IHV0aWxzLm1wTm9ybWFsaXplKHJzYVBhcmFtc1snbiddKX0sXG5cdFx0XHR7IG5hbWU6ICdkJywgZGF0YTogdXRpbHMubXBOb3JtYWxpemUocnNhUGFyYW1zWydkJ10pfSxcblx0XHRcdHsgbmFtZTogJ3AnLCBkYXRhOiB1dGlscy5tcE5vcm1hbGl6ZShyc2FQYXJhbXNbJ3AnXSl9LFxuXHRcdFx0eyBuYW1lOiAncScsIGRhdGE6IHV0aWxzLm1wTm9ybWFsaXplKHJzYVBhcmFtc1sncSddKX0sXG5cdFx0XHR7IG5hbWU6ICdkbW9kcCcsXG5cdFx0XHQgICAgZGF0YTogdXRpbHMubXBOb3JtYWxpemUocnNhUGFyYW1zWydkbW9kcCddKX0sXG5cdFx0XHR7IG5hbWU6ICdkbW9kcScsXG5cdFx0XHQgICAgZGF0YTogdXRpbHMubXBOb3JtYWxpemUocnNhUGFyYW1zWydkbW9kcSddKX0sXG5cdFx0XHR7IG5hbWU6ICdpcW1wJyxcblx0XHRcdCAgICBkYXRhOiB1dGlscy5tcE5vcm1hbGl6ZShyc2FQYXJhbXNbJ2lxbXAnXSl9XG5cdFx0XVxuXHR9O1xuXHRyZXR1cm4gKG5ldyBQcml2YXRlS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkRE5TU0VDUHJpdmF0ZUtleShhbGcsIGVsZW1lbnRzKSB7XG5cdGlmIChzdXBwb3J0ZWRBbGdvc0J5SWRbYWxnXS5tYXRjaCgvXlJTQS0vKSkge1xuXHRcdHJldHVybiAocmVhZEROU1NFQ1JTQVByaXZhdGVLZXkoZWxlbWVudHMpKTtcblx0fVxuXHRpZiAoc3VwcG9ydGVkQWxnb3NCeUlkW2FsZ10gPT09ICdFQ0RTQS1QMzg0LVNIQTM4NCcgfHxcblx0ICAgIHN1cHBvcnRlZEFsZ29zQnlJZFthbGddID09PSAnRUNEU0EtUDI1Ni1TSEEyNTYnKSB7XG5cdFx0dmFyIGQgPSBCdWZmZXIuZnJvbShlbGVtZW50c1swXS5zcGxpdCgnICcpWzFdLCAnYmFzZTY0Jyk7XG5cdFx0dmFyIGN1cnZlID0gJ25pc3RwMzg0Jztcblx0XHR2YXIgc2l6ZSA9IDM4NDtcblx0XHRpZiAoc3VwcG9ydGVkQWxnb3NCeUlkW2FsZ10gPT09ICdFQ0RTQS1QMjU2LVNIQTI1NicpIHtcblx0XHRcdGN1cnZlID0gJ25pc3RwMjU2Jztcblx0XHRcdHNpemUgPSAyNTY7XG5cdFx0fVxuXHRcdC8vIEROU1NFQyBnZW5lcmF0ZXMgdGhlIHB1YmxpYy1rZXkgb24gdGhlIGZseSAoZ28gY2FsY3VsYXRlIGl0KVxuXHRcdHZhciBwdWJsaWNLZXkgPSB1dGlscy5wdWJsaWNGcm9tUHJpdmF0ZUVDRFNBKGN1cnZlLCBkKTtcblx0XHR2YXIgUSA9IHB1YmxpY0tleS5wYXJ0WydRJ10uZGF0YTtcblx0XHR2YXIgZWNkc2FLZXkgPSB7XG5cdFx0XHR0eXBlOiAnZWNkc2EnLFxuXHRcdFx0Y3VydmU6IGN1cnZlLFxuXHRcdFx0c2l6ZTogc2l6ZSxcblx0XHRcdHBhcnRzOiBbXG5cdFx0XHRcdHtuYW1lOiAnY3VydmUnLCBkYXRhOiBCdWZmZXIuZnJvbShjdXJ2ZSkgfSxcblx0XHRcdFx0e25hbWU6ICdkJywgZGF0YTogZCB9LFxuXHRcdFx0XHR7bmFtZTogJ1EnLCBkYXRhOiBRIH1cblx0XHRcdF1cblx0XHR9O1xuXHRcdHJldHVybiAobmV3IFByaXZhdGVLZXkoZWNkc2FLZXkpKTtcblx0fVxuXHR0aHJvdyAobmV3IEVycm9yKCdVbnN1cHBvcnRlZCBhbGdvcml0aG06ICcgKyBzdXBwb3J0ZWRBbGdvc0J5SWRbYWxnXSkpO1xufVxuXG5mdW5jdGlvbiBkbnNzZWNUaW1lc3RhbXAoZGF0ZSkge1xuXHR2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKSArICcnOyAvL3N0cmluZ2lmeVxuXHR2YXIgbW9udGggPSAoZGF0ZS5nZXRNb250aCgpICsgMSk7XG5cdHZhciB0aW1lc3RhbXBTdHIgPSB5ZWFyICsgbW9udGggKyBkYXRlLmdldFVUQ0RhdGUoKTtcblx0dGltZXN0YW1wU3RyICs9ICcnICsgZGF0ZS5nZXRVVENIb3VycygpICsgZGF0ZS5nZXRVVENNaW51dGVzKCk7XG5cdHRpbWVzdGFtcFN0ciArPSBkYXRlLmdldFVUQ1NlY29uZHMoKTtcblx0cmV0dXJuICh0aW1lc3RhbXBTdHIpO1xufVxuXG5mdW5jdGlvbiByc2FBbGdGcm9tT3B0aW9ucyhvcHRzKSB7XG5cdGlmICghb3B0cyB8fCAhb3B0cy5oYXNoQWxnbyB8fCBvcHRzLmhhc2hBbGdvID09PSAnc2hhMScpXG5cdFx0cmV0dXJuICgnNSAoUlNBU0hBMSknKTtcblx0ZWxzZSBpZiAob3B0cy5oYXNoQWxnbyA9PT0gJ3NoYTI1NicpXG5cdFx0cmV0dXJuICgnOCAoUlNBU0hBMjU2KScpO1xuXHRlbHNlIGlmIChvcHRzLmhhc2hBbGdvID09PSAnc2hhNTEyJylcblx0XHRyZXR1cm4gKCcxMCAoUlNBU0hBNTEyKScpO1xuXHRlbHNlXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBvciB1bnN1cHBvcnRlZCBoYXNoOiAnICtcblx0XHQgICAgb3B0cy5oYXNoQWxnbykpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVJTQShrZXksIG9wdGlvbnMpIHtcblx0Ly8gaWYgd2UncmUgbWlzc2luZyBwYXJ0cywgYWRkIHRoZW0uXG5cdGlmICgha2V5LnBhcnQuZG1vZHAgfHwgIWtleS5wYXJ0LmRtb2RxKSB7XG5cdFx0dXRpbHMuYWRkUlNBTWlzc2luZyhrZXkpO1xuXHR9XG5cblx0dmFyIG91dCA9ICcnO1xuXHRvdXQgKz0gJ1ByaXZhdGUta2V5LWZvcm1hdDogdjEuM1xcbic7XG5cdG91dCArPSAnQWxnb3JpdGhtOiAnICsgcnNhQWxnRnJvbU9wdGlvbnMob3B0aW9ucykgKyAnXFxuJztcblx0dmFyIG4gPSB1dGlscy5tcERlbm9ybWFsaXplKGtleS5wYXJ0WyduJ10uZGF0YSk7XG5cdG91dCArPSAnTW9kdWx1czogJyArIG4udG9TdHJpbmcoJ2Jhc2U2NCcpICsgJ1xcbic7XG5cdHZhciBlID0gdXRpbHMubXBEZW5vcm1hbGl6ZShrZXkucGFydFsnZSddLmRhdGEpO1xuXHRvdXQgKz0gJ1B1YmxpY0V4cG9uZW50OiAnICsgZS50b1N0cmluZygnYmFzZTY0JykgKyAnXFxuJztcblx0dmFyIGQgPSB1dGlscy5tcERlbm9ybWFsaXplKGtleS5wYXJ0WydkJ10uZGF0YSk7XG5cdG91dCArPSAnUHJpdmF0ZUV4cG9uZW50OiAnICsgZC50b1N0cmluZygnYmFzZTY0JykgKyAnXFxuJztcblx0dmFyIHAgPSB1dGlscy5tcERlbm9ybWFsaXplKGtleS5wYXJ0WydwJ10uZGF0YSk7XG5cdG91dCArPSAnUHJpbWUxOiAnICsgcC50b1N0cmluZygnYmFzZTY0JykgKyAnXFxuJztcblx0dmFyIHEgPSB1dGlscy5tcERlbm9ybWFsaXplKGtleS5wYXJ0WydxJ10uZGF0YSk7XG5cdG91dCArPSAnUHJpbWUyOiAnICsgcS50b1N0cmluZygnYmFzZTY0JykgKyAnXFxuJztcblx0dmFyIGRtb2RwID0gdXRpbHMubXBEZW5vcm1hbGl6ZShrZXkucGFydFsnZG1vZHAnXS5kYXRhKTtcblx0b3V0ICs9ICdFeHBvbmVudDE6ICcgKyBkbW9kcC50b1N0cmluZygnYmFzZTY0JykgKyAnXFxuJztcblx0dmFyIGRtb2RxID0gdXRpbHMubXBEZW5vcm1hbGl6ZShrZXkucGFydFsnZG1vZHEnXS5kYXRhKTtcblx0b3V0ICs9ICdFeHBvbmVudDI6ICcgKyBkbW9kcS50b1N0cmluZygnYmFzZTY0JykgKyAnXFxuJztcblx0dmFyIGlxbXAgPSB1dGlscy5tcERlbm9ybWFsaXplKGtleS5wYXJ0WydpcW1wJ10uZGF0YSk7XG5cdG91dCArPSAnQ29lZmZpY2llbnQ6ICcgKyBpcW1wLnRvU3RyaW5nKCdiYXNlNjQnKSArICdcXG4nO1xuXHQvLyBBc3N1bWUgdGhhdCB3ZSdyZSB2YWxpZCBhcy1vZiBub3dcblx0dmFyIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCk7XG5cdG91dCArPSAnQ3JlYXRlZDogJyArIGRuc3NlY1RpbWVzdGFtcCh0aW1lc3RhbXApICsgJ1xcbic7XG5cdG91dCArPSAnUHVibGlzaDogJyArIGRuc3NlY1RpbWVzdGFtcCh0aW1lc3RhbXApICsgJ1xcbic7XG5cdG91dCArPSAnQWN0aXZhdGU6ICcgKyBkbnNzZWNUaW1lc3RhbXAodGltZXN0YW1wKSArICdcXG4nO1xuXHRyZXR1cm4gKEJ1ZmZlci5mcm9tKG91dCwgJ2FzY2lpJykpO1xufVxuXG5mdW5jdGlvbiB3cml0ZUVDRFNBKGtleSwgb3B0aW9ucykge1xuXHR2YXIgb3V0ID0gJyc7XG5cdG91dCArPSAnUHJpdmF0ZS1rZXktZm9ybWF0OiB2MS4zXFxuJztcblxuXHRpZiAoa2V5LmN1cnZlID09PSAnbmlzdHAyNTYnKSB7XG5cdFx0b3V0ICs9ICdBbGdvcml0aG06IDEzIChFQ0RTQVAyNTZTSEEyNTYpXFxuJztcblx0fSBlbHNlIGlmIChrZXkuY3VydmUgPT09ICduaXN0cDM4NCcpIHtcblx0XHRvdXQgKz0gJ0FsZ29yaXRobTogMTQgKEVDRFNBUDM4NFNIQTM4NClcXG4nO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IChuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGN1cnZlJykpO1xuXHR9XG5cdHZhciBiYXNlNjRLZXkgPSBrZXkucGFydFsnZCddLmRhdGEudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXHRvdXQgKz0gJ1ByaXZhdGVLZXk6ICcgKyBiYXNlNjRLZXkgKyAnXFxuJztcblxuXHQvLyBBc3N1bWUgdGhhdCB3ZSdyZSB2YWxpZCBhcy1vZiBub3dcblx0dmFyIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCk7XG5cdG91dCArPSAnQ3JlYXRlZDogJyArIGRuc3NlY1RpbWVzdGFtcCh0aW1lc3RhbXApICsgJ1xcbic7XG5cdG91dCArPSAnUHVibGlzaDogJyArIGRuc3NlY1RpbWVzdGFtcCh0aW1lc3RhbXApICsgJ1xcbic7XG5cdG91dCArPSAnQWN0aXZhdGU6ICcgKyBkbnNzZWNUaW1lc3RhbXAodGltZXN0YW1wKSArICdcXG4nO1xuXG5cdHJldHVybiAoQnVmZmVyLmZyb20ob3V0LCAnYXNjaWknKSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlKGtleSwgb3B0aW9ucykge1xuXHRpZiAoUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5KSkge1xuXHRcdGlmIChrZXkudHlwZSA9PT0gJ3JzYScpIHtcblx0XHRcdHJldHVybiAod3JpdGVSU0Eoa2V5LCBvcHRpb25zKSk7XG5cdFx0fSBlbHNlIGlmIChrZXkudHlwZSA9PT0gJ2VjZHNhJykge1xuXHRcdFx0cmV0dXJuICh3cml0ZUVDRFNBKGtleSwgb3B0aW9ucykpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKCdVbnN1cHBvcnRlZCBhbGdvcml0aG06ICcgKyBrZXkudHlwZSkpO1xuXHRcdH1cblx0fSBlbHNlIGlmIChLZXkuaXNLZXkoa2V5KSkge1xuXHRcdC8qXG5cdFx0ICogUkZDMzExMCByZXF1aXJlcyBhIGtleW5hbWUsIGFuZCBhIGtleXR5cGUsIHdoaWNoIHdlXG5cdFx0ICogZG9uJ3QgcmVhbGx5IGhhdmUgYSBtZWNoYW5pc20gZm9yIHNwZWNpZnlpbmcgc3VjaFxuXHRcdCAqIGFkZGl0aW9uYWwgbWV0YWRhdGEuXG5cdFx0ICovXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignRm9ybWF0IFwiZG5zc2VjXCIgb25seSBzdXBwb3J0cyAnICtcblx0XHQgICAgJ3dyaXRpbmcgcHJpdmF0ZSBrZXlzJykpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IChuZXcgRXJyb3IoJ2tleSBpcyBub3QgYSBLZXkgb3IgUHJpdmF0ZUtleScpKTtcblx0fVxufVxuIiwiZnVuY3Rpb24gQ2FzZWxlc3MgKGRpY3QpIHtcbiAgdGhpcy5kaWN0ID0gZGljdCB8fCB7fVxufVxuQ2FzZWxlc3MucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgY2xvYmJlcikge1xuICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIgaSBpbiBuYW1lKSB7XG4gICAgICB0aGlzLnNldChpLCBuYW1lW2ldLCB2YWx1ZSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBjbG9iYmVyID09PSAndW5kZWZpbmVkJykgY2xvYmJlciA9IHRydWVcbiAgICB2YXIgaGFzID0gdGhpcy5oYXMobmFtZSlcblxuICAgIGlmICghY2xvYmJlciAmJiBoYXMpIHRoaXMuZGljdFtoYXNdID0gdGhpcy5kaWN0W2hhc10gKyAnLCcgKyB2YWx1ZVxuICAgIGVsc2UgdGhpcy5kaWN0W2hhcyB8fCBuYW1lXSA9IHZhbHVlXG4gICAgcmV0dXJuIGhhc1xuICB9XG59XG5DYXNlbGVzcy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmRpY3QpXG4gICAgLCBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgO1xuICBmb3IgKHZhciBpPTA7aTxrZXlzLmxlbmd0aDtpKyspIHtcbiAgICBpZiAoa2V5c1tpXS50b0xvd2VyQ2FzZSgpID09PSBuYW1lKSByZXR1cm4ga2V5c1tpXVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuQ2FzZWxlc3MucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKClcbiAgdmFyIHJlc3VsdCwgX2tleVxuICB2YXIgaGVhZGVycyA9IHRoaXMuZGljdFxuICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBfa2V5ID0ga2V5LnRvTG93ZXJDYXNlKClcbiAgICBpZiAobmFtZSA9PT0gX2tleSkgcmVzdWx0ID0gaGVhZGVyc1trZXldXG4gIH0pXG4gIHJldHVybiByZXN1bHRcbn1cbkNhc2VsZXNzLnByb3RvdHlwZS5zd2FwID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIGhhcyA9IHRoaXMuaGFzKG5hbWUpXG4gIGlmIChoYXMgPT09IG5hbWUpIHJldHVyblxuICBpZiAoIWhhcykgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBubyBoZWFkZXIgdGhhbiBtYXRjaGVzIFwiJytuYW1lKydcIicpXG4gIHRoaXMuZGljdFtuYW1lXSA9IHRoaXMuZGljdFtoYXNdXG4gIGRlbGV0ZSB0aGlzLmRpY3RbaGFzXVxufVxuQ2FzZWxlc3MucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBoYXMgPSB0aGlzLmhhcyhuYW1lKVxuICByZXR1cm4gZGVsZXRlIHRoaXMuZGljdFtoYXMgfHwgbmFtZV1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGljdCkge3JldHVybiBuZXcgQ2FzZWxlc3MoZGljdCl9XG5tb2R1bGUuZXhwb3J0cy5odHRwaWZ5ID0gZnVuY3Rpb24gKHJlc3AsIGhlYWRlcnMpIHtcbiAgdmFyIGMgPSBuZXcgQ2FzZWxlc3MoaGVhZGVycylcbiAgcmVzcC5zZXRIZWFkZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgY2xvYmJlcikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm5cbiAgICByZXR1cm4gYy5zZXQoa2V5LCB2YWx1ZSwgY2xvYmJlcilcbiAgfVxuICByZXNwLmhhc0hlYWRlciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gYy5oYXMoa2V5KVxuICB9XG4gIHJlc3AuZ2V0SGVhZGVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBjLmdldChrZXkpXG4gIH1cbiAgcmVzcC5yZW1vdmVIZWFkZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGMuZGVsKGtleSlcbiAgfVxuICByZXNwLmhlYWRlcnMgPSBjLmRpY3RcbiAgcmV0dXJuIGNcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFVSSSA9IHJlcXVpcmUoJ3VyaS1qcycpXG4gICwgZXF1YWwgPSByZXF1aXJlKCdmYXN0LWRlZXAtZXF1YWwnKVxuICAsIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKVxuICAsIFNjaGVtYU9iamVjdCA9IHJlcXVpcmUoJy4vc2NoZW1hX29iaicpXG4gICwgdHJhdmVyc2UgPSByZXF1aXJlKCdqc29uLXNjaGVtYS10cmF2ZXJzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc29sdmU7XG5cbnJlc29sdmUubm9ybWFsaXplSWQgPSBub3JtYWxpemVJZDtcbnJlc29sdmUuZnVsbFBhdGggPSBnZXRGdWxsUGF0aDtcbnJlc29sdmUudXJsID0gcmVzb2x2ZVVybDtcbnJlc29sdmUuaWRzID0gcmVzb2x2ZUlkcztcbnJlc29sdmUuaW5saW5lUmVmID0gaW5saW5lUmVmO1xucmVzb2x2ZS5zY2hlbWEgPSByZXNvbHZlU2NoZW1hO1xuXG4vKipcbiAqIFtyZXNvbHZlIGFuZCBjb21waWxlIHRoZSByZWZlcmVuY2VzICgkcmVmKV1cbiAqIEB0aGlzICAgQWp2XG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY29tcGlsZSByZWZlcmVuY2UgdG8gc2NoZW1hIGNvbXBpbGF0aW9uIGZ1bmNpdG9uIChsb2NhbENvbXBpbGUpXG4gKiBAcGFyYW0gIHtPYmplY3R9IHJvb3Qgb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJvb3Qgc2NoZW1hIGZvciB0aGUgY3VycmVudCBzY2hlbWFcbiAqIEBwYXJhbSAge1N0cmluZ30gcmVmIHJlZmVyZW5jZSB0byByZXNvbHZlXG4gKiBAcmV0dXJuIHtPYmplY3R8RnVuY3Rpb259IHNjaGVtYSBvYmplY3QgKGlmIHRoZSBzY2hlbWEgY2FuIGJlIGlubGluZWQpIG9yIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZShjb21waWxlLCByb290LCByZWYpIHtcbiAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICB2YXIgcmVmVmFsID0gdGhpcy5fcmVmc1tyZWZdO1xuICBpZiAodHlwZW9mIHJlZlZhbCA9PSAnc3RyaW5nJykge1xuICAgIGlmICh0aGlzLl9yZWZzW3JlZlZhbF0pIHJlZlZhbCA9IHRoaXMuX3JlZnNbcmVmVmFsXTtcbiAgICBlbHNlIHJldHVybiByZXNvbHZlLmNhbGwodGhpcywgY29tcGlsZSwgcm9vdCwgcmVmVmFsKTtcbiAgfVxuXG4gIHJlZlZhbCA9IHJlZlZhbCB8fCB0aGlzLl9zY2hlbWFzW3JlZl07XG4gIGlmIChyZWZWYWwgaW5zdGFuY2VvZiBTY2hlbWFPYmplY3QpIHtcbiAgICByZXR1cm4gaW5saW5lUmVmKHJlZlZhbC5zY2hlbWEsIHRoaXMuX29wdHMuaW5saW5lUmVmcylcbiAgICAgICAgICAgID8gcmVmVmFsLnNjaGVtYVxuICAgICAgICAgICAgOiByZWZWYWwudmFsaWRhdGUgfHwgdGhpcy5fY29tcGlsZShyZWZWYWwpO1xuICB9XG5cbiAgdmFyIHJlcyA9IHJlc29sdmVTY2hlbWEuY2FsbCh0aGlzLCByb290LCByZWYpO1xuICB2YXIgc2NoZW1hLCB2LCBiYXNlSWQ7XG4gIGlmIChyZXMpIHtcbiAgICBzY2hlbWEgPSByZXMuc2NoZW1hO1xuICAgIHJvb3QgPSByZXMucm9vdDtcbiAgICBiYXNlSWQgPSByZXMuYmFzZUlkO1xuICB9XG5cbiAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFNjaGVtYU9iamVjdCkge1xuICAgIHYgPSBzY2hlbWEudmFsaWRhdGUgfHwgY29tcGlsZS5jYWxsKHRoaXMsIHNjaGVtYS5zY2hlbWEsIHJvb3QsIHVuZGVmaW5lZCwgYmFzZUlkKTtcbiAgfSBlbHNlIGlmIChzY2hlbWEgIT09IHVuZGVmaW5lZCkge1xuICAgIHYgPSBpbmxpbmVSZWYoc2NoZW1hLCB0aGlzLl9vcHRzLmlubGluZVJlZnMpXG4gICAgICAgID8gc2NoZW1hXG4gICAgICAgIDogY29tcGlsZS5jYWxsKHRoaXMsIHNjaGVtYSwgcm9vdCwgdW5kZWZpbmVkLCBiYXNlSWQpO1xuICB9XG5cbiAgcmV0dXJuIHY7XG59XG5cblxuLyoqXG4gKiBSZXNvbHZlIHNjaGVtYSwgaXRzIHJvb3QgYW5kIGJhc2VJZFxuICogQHRoaXMgQWp2XG4gKiBAcGFyYW0gIHtPYmplY3R9IHJvb3Qgcm9vdCBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIHNjaGVtYSwgcmVmVmFsLCByZWZzXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHJlZiAgcmVmZXJlbmNlIHRvIHJlc29sdmVcbiAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHdpdGggcHJvcGVydGllcyBzY2hlbWEsIHJvb3QsIGJhc2VJZFxuICovXG5mdW5jdGlvbiByZXNvbHZlU2NoZW1hKHJvb3QsIHJlZikge1xuICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gIHZhciBwID0gVVJJLnBhcnNlKHJlZilcbiAgICAsIHJlZlBhdGggPSBfZ2V0RnVsbFBhdGgocClcbiAgICAsIGJhc2VJZCA9IGdldEZ1bGxQYXRoKHRoaXMuX2dldElkKHJvb3Quc2NoZW1hKSk7XG4gIGlmIChPYmplY3Qua2V5cyhyb290LnNjaGVtYSkubGVuZ3RoID09PSAwIHx8IHJlZlBhdGggIT09IGJhc2VJZCkge1xuICAgIHZhciBpZCA9IG5vcm1hbGl6ZUlkKHJlZlBhdGgpO1xuICAgIHZhciByZWZWYWwgPSB0aGlzLl9yZWZzW2lkXTtcbiAgICBpZiAodHlwZW9mIHJlZlZhbCA9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHJlc29sdmVSZWN1cnNpdmUuY2FsbCh0aGlzLCByb290LCByZWZWYWwsIHApO1xuICAgIH0gZWxzZSBpZiAocmVmVmFsIGluc3RhbmNlb2YgU2NoZW1hT2JqZWN0KSB7XG4gICAgICBpZiAoIXJlZlZhbC52YWxpZGF0ZSkgdGhpcy5fY29tcGlsZShyZWZWYWwpO1xuICAgICAgcm9vdCA9IHJlZlZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVmVmFsID0gdGhpcy5fc2NoZW1hc1tpZF07XG4gICAgICBpZiAocmVmVmFsIGluc3RhbmNlb2YgU2NoZW1hT2JqZWN0KSB7XG4gICAgICAgIGlmICghcmVmVmFsLnZhbGlkYXRlKSB0aGlzLl9jb21waWxlKHJlZlZhbCk7XG4gICAgICAgIGlmIChpZCA9PSBub3JtYWxpemVJZChyZWYpKVxuICAgICAgICAgIHJldHVybiB7IHNjaGVtYTogcmVmVmFsLCByb290OiByb290LCBiYXNlSWQ6IGJhc2VJZCB9O1xuICAgICAgICByb290ID0gcmVmVmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXJvb3Quc2NoZW1hKSByZXR1cm47XG4gICAgYmFzZUlkID0gZ2V0RnVsbFBhdGgodGhpcy5fZ2V0SWQocm9vdC5zY2hlbWEpKTtcbiAgfVxuICByZXR1cm4gZ2V0SnNvblBvaW50ZXIuY2FsbCh0aGlzLCBwLCBiYXNlSWQsIHJvb3Quc2NoZW1hLCByb290KTtcbn1cblxuXG4vKiBAdGhpcyBBanYgKi9cbmZ1bmN0aW9uIHJlc29sdmVSZWN1cnNpdmUocm9vdCwgcmVmLCBwYXJzZWRSZWYpIHtcbiAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICB2YXIgcmVzID0gcmVzb2x2ZVNjaGVtYS5jYWxsKHRoaXMsIHJvb3QsIHJlZik7XG4gIGlmIChyZXMpIHtcbiAgICB2YXIgc2NoZW1hID0gcmVzLnNjaGVtYTtcbiAgICB2YXIgYmFzZUlkID0gcmVzLmJhc2VJZDtcbiAgICByb290ID0gcmVzLnJvb3Q7XG4gICAgdmFyIGlkID0gdGhpcy5fZ2V0SWQoc2NoZW1hKTtcbiAgICBpZiAoaWQpIGJhc2VJZCA9IHJlc29sdmVVcmwoYmFzZUlkLCBpZCk7XG4gICAgcmV0dXJuIGdldEpzb25Qb2ludGVyLmNhbGwodGhpcywgcGFyc2VkUmVmLCBiYXNlSWQsIHNjaGVtYSwgcm9vdCk7XG4gIH1cbn1cblxuXG52YXIgUFJFVkVOVF9TQ09QRV9DSEFOR0UgPSB1dGlsLnRvSGFzaChbJ3Byb3BlcnRpZXMnLCAncGF0dGVyblByb3BlcnRpZXMnLCAnZW51bScsICdkZXBlbmRlbmNpZXMnLCAnZGVmaW5pdGlvbnMnXSk7XG4vKiBAdGhpcyBBanYgKi9cbmZ1bmN0aW9uIGdldEpzb25Qb2ludGVyKHBhcnNlZFJlZiwgYmFzZUlkLCBzY2hlbWEsIHJvb3QpIHtcbiAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICBwYXJzZWRSZWYuZnJhZ21lbnQgPSBwYXJzZWRSZWYuZnJhZ21lbnQgfHwgJyc7XG4gIGlmIChwYXJzZWRSZWYuZnJhZ21lbnQuc2xpY2UoMCwxKSAhPSAnLycpIHJldHVybjtcbiAgdmFyIHBhcnRzID0gcGFyc2VkUmVmLmZyYWdtZW50LnNwbGl0KCcvJyk7XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG4gICAgaWYgKHBhcnQpIHtcbiAgICAgIHBhcnQgPSB1dGlsLnVuZXNjYXBlRnJhZ21lbnQocGFydCk7XG4gICAgICBzY2hlbWEgPSBzY2hlbWFbcGFydF07XG4gICAgICBpZiAoc2NoZW1hID09PSB1bmRlZmluZWQpIGJyZWFrO1xuICAgICAgdmFyIGlkO1xuICAgICAgaWYgKCFQUkVWRU5UX1NDT1BFX0NIQU5HRVtwYXJ0XSkge1xuICAgICAgICBpZCA9IHRoaXMuX2dldElkKHNjaGVtYSk7XG4gICAgICAgIGlmIChpZCkgYmFzZUlkID0gcmVzb2x2ZVVybChiYXNlSWQsIGlkKTtcbiAgICAgICAgaWYgKHNjaGVtYS4kcmVmKSB7XG4gICAgICAgICAgdmFyICRyZWYgPSByZXNvbHZlVXJsKGJhc2VJZCwgc2NoZW1hLiRyZWYpO1xuICAgICAgICAgIHZhciByZXMgPSByZXNvbHZlU2NoZW1hLmNhbGwodGhpcywgcm9vdCwgJHJlZik7XG4gICAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgc2NoZW1hID0gcmVzLnNjaGVtYTtcbiAgICAgICAgICAgIHJvb3QgPSByZXMucm9vdDtcbiAgICAgICAgICAgIGJhc2VJZCA9IHJlcy5iYXNlSWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzY2hlbWEgIT09IHVuZGVmaW5lZCAmJiBzY2hlbWEgIT09IHJvb3Quc2NoZW1hKVxuICAgIHJldHVybiB7IHNjaGVtYTogc2NoZW1hLCByb290OiByb290LCBiYXNlSWQ6IGJhc2VJZCB9O1xufVxuXG5cbnZhciBTSU1QTEVfSU5MSU5FRCA9IHV0aWwudG9IYXNoKFtcbiAgJ3R5cGUnLCAnZm9ybWF0JywgJ3BhdHRlcm4nLFxuICAnbWF4TGVuZ3RoJywgJ21pbkxlbmd0aCcsXG4gICdtYXhQcm9wZXJ0aWVzJywgJ21pblByb3BlcnRpZXMnLFxuICAnbWF4SXRlbXMnLCAnbWluSXRlbXMnLFxuICAnbWF4aW11bScsICdtaW5pbXVtJyxcbiAgJ3VuaXF1ZUl0ZW1zJywgJ211bHRpcGxlT2YnLFxuICAncmVxdWlyZWQnLCAnZW51bSdcbl0pO1xuZnVuY3Rpb24gaW5saW5lUmVmKHNjaGVtYSwgbGltaXQpIHtcbiAgaWYgKGxpbWl0ID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCB8fCBsaW1pdCA9PT0gdHJ1ZSkgcmV0dXJuIGNoZWNrTm9SZWYoc2NoZW1hKTtcbiAgZWxzZSBpZiAobGltaXQpIHJldHVybiBjb3VudEtleXMoc2NoZW1hKSA8PSBsaW1pdDtcbn1cblxuXG5mdW5jdGlvbiBjaGVja05vUmVmKHNjaGVtYSkge1xuICB2YXIgaXRlbTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hKSkge1xuICAgIGZvciAodmFyIGk9MDsgaTxzY2hlbWEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGl0ZW0gPSBzY2hlbWFbaV07XG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT0gJ29iamVjdCcgJiYgIWNoZWNrTm9SZWYoaXRlbSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIga2V5IGluIHNjaGVtYSkge1xuICAgICAgaWYgKGtleSA9PSAnJHJlZicpIHJldHVybiBmYWxzZTtcbiAgICAgIGl0ZW0gPSBzY2hlbWFba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgaXRlbSA9PSAnb2JqZWN0JyAmJiAhY2hlY2tOb1JlZihpdGVtKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuXG5mdW5jdGlvbiBjb3VudEtleXMoc2NoZW1hKSB7XG4gIHZhciBjb3VudCA9IDAsIGl0ZW07XG4gIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHtcbiAgICBmb3IgKHZhciBpPTA7IGk8c2NoZW1hLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpdGVtID0gc2NoZW1hW2ldO1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09ICdvYmplY3QnKSBjb3VudCArPSBjb3VudEtleXMoaXRlbSk7XG4gICAgICBpZiAoY291bnQgPT0gSW5maW5pdHkpIHJldHVybiBJbmZpbml0eTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIga2V5IGluIHNjaGVtYSkge1xuICAgICAgaWYgKGtleSA9PSAnJHJlZicpIHJldHVybiBJbmZpbml0eTtcbiAgICAgIGlmIChTSU1QTEVfSU5MSU5FRFtrZXldKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtID0gc2NoZW1hW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PSAnb2JqZWN0JykgY291bnQgKz0gY291bnRLZXlzKGl0ZW0pICsgMTtcbiAgICAgICAgaWYgKGNvdW50ID09IEluZmluaXR5KSByZXR1cm4gSW5maW5pdHk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb3VudDtcbn1cblxuXG5mdW5jdGlvbiBnZXRGdWxsUGF0aChpZCwgbm9ybWFsaXplKSB7XG4gIGlmIChub3JtYWxpemUgIT09IGZhbHNlKSBpZCA9IG5vcm1hbGl6ZUlkKGlkKTtcbiAgdmFyIHAgPSBVUkkucGFyc2UoaWQpO1xuICByZXR1cm4gX2dldEZ1bGxQYXRoKHApO1xufVxuXG5cbmZ1bmN0aW9uIF9nZXRGdWxsUGF0aChwKSB7XG4gIHJldHVybiBVUkkuc2VyaWFsaXplKHApLnNwbGl0KCcjJylbMF0gKyAnIyc7XG59XG5cblxudmFyIFRSQUlMSU5HX1NMQVNIX0hBU0ggPSAvI1xcLz8kLztcbmZ1bmN0aW9uIG5vcm1hbGl6ZUlkKGlkKSB7XG4gIHJldHVybiBpZCA/IGlkLnJlcGxhY2UoVFJBSUxJTkdfU0xBU0hfSEFTSCwgJycpIDogJyc7XG59XG5cblxuZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlSWQsIGlkKSB7XG4gIGlkID0gbm9ybWFsaXplSWQoaWQpO1xuICByZXR1cm4gVVJJLnJlc29sdmUoYmFzZUlkLCBpZCk7XG59XG5cblxuLyogQHRoaXMgQWp2ICovXG5mdW5jdGlvbiByZXNvbHZlSWRzKHNjaGVtYSkge1xuICB2YXIgc2NoZW1hSWQgPSBub3JtYWxpemVJZCh0aGlzLl9nZXRJZChzY2hlbWEpKTtcbiAgdmFyIGJhc2VJZHMgPSB7Jyc6IHNjaGVtYUlkfTtcbiAgdmFyIGZ1bGxQYXRocyA9IHsnJzogZ2V0RnVsbFBhdGgoc2NoZW1hSWQsIGZhbHNlKX07XG4gIHZhciBsb2NhbFJlZnMgPSB7fTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRyYXZlcnNlKHNjaGVtYSwge2FsbEtleXM6IHRydWV9LCBmdW5jdGlvbihzY2gsIGpzb25QdHIsIHJvb3RTY2hlbWEsIHBhcmVudEpzb25QdHIsIHBhcmVudEtleXdvcmQsIHBhcmVudFNjaGVtYSwga2V5SW5kZXgpIHtcbiAgICBpZiAoanNvblB0ciA9PT0gJycpIHJldHVybjtcbiAgICB2YXIgaWQgPSBzZWxmLl9nZXRJZChzY2gpO1xuICAgIHZhciBiYXNlSWQgPSBiYXNlSWRzW3BhcmVudEpzb25QdHJdO1xuICAgIHZhciBmdWxsUGF0aCA9IGZ1bGxQYXRoc1twYXJlbnRKc29uUHRyXSArICcvJyArIHBhcmVudEtleXdvcmQ7XG4gICAgaWYgKGtleUluZGV4ICE9PSB1bmRlZmluZWQpXG4gICAgICBmdWxsUGF0aCArPSAnLycgKyAodHlwZW9mIGtleUluZGV4ID09ICdudW1iZXInID8ga2V5SW5kZXggOiB1dGlsLmVzY2FwZUZyYWdtZW50KGtleUluZGV4KSk7XG5cbiAgICBpZiAodHlwZW9mIGlkID09ICdzdHJpbmcnKSB7XG4gICAgICBpZCA9IGJhc2VJZCA9IG5vcm1hbGl6ZUlkKGJhc2VJZCA/IFVSSS5yZXNvbHZlKGJhc2VJZCwgaWQpIDogaWQpO1xuXG4gICAgICB2YXIgcmVmVmFsID0gc2VsZi5fcmVmc1tpZF07XG4gICAgICBpZiAodHlwZW9mIHJlZlZhbCA9PSAnc3RyaW5nJykgcmVmVmFsID0gc2VsZi5fcmVmc1tyZWZWYWxdO1xuICAgICAgaWYgKHJlZlZhbCAmJiByZWZWYWwuc2NoZW1hKSB7XG4gICAgICAgIGlmICghZXF1YWwoc2NoLCByZWZWYWwuc2NoZW1hKSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lkIFwiJyArIGlkICsgJ1wiIHJlc29sdmVzIHRvIG1vcmUgdGhhbiBvbmUgc2NoZW1hJyk7XG4gICAgICB9IGVsc2UgaWYgKGlkICE9IG5vcm1hbGl6ZUlkKGZ1bGxQYXRoKSkge1xuICAgICAgICBpZiAoaWRbMF0gPT0gJyMnKSB7XG4gICAgICAgICAgaWYgKGxvY2FsUmVmc1tpZF0gJiYgIWVxdWFsKHNjaCwgbG9jYWxSZWZzW2lkXSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lkIFwiJyArIGlkICsgJ1wiIHJlc29sdmVzIHRvIG1vcmUgdGhhbiBvbmUgc2NoZW1hJyk7XG4gICAgICAgICAgbG9jYWxSZWZzW2lkXSA9IHNjaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLl9yZWZzW2lkXSA9IGZ1bGxQYXRoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGJhc2VJZHNbanNvblB0cl0gPSBiYXNlSWQ7XG4gICAgZnVsbFBhdGhzW2pzb25QdHJdID0gZnVsbFBhdGg7XG4gIH0pO1xuXG4gIHJldHVybiBsb2NhbFJlZnM7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBrZXlMaXN0ID0gT2JqZWN0LmtleXM7XG52YXIgaGFzUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIHZhciBhcnJBID0gaXNBcnJheShhKVxuICAgICAgLCBhcnJCID0gaXNBcnJheShiKVxuICAgICAgLCBpXG4gICAgICAsIGxlbmd0aFxuICAgICAgLCBrZXk7XG5cbiAgICBpZiAoYXJyQSAmJiBhcnJCKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFyckEgIT0gYXJyQikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGRhdGVBID0gYSBpbnN0YW5jZW9mIERhdGVcbiAgICAgICwgZGF0ZUIgPSBiIGluc3RhbmNlb2YgRGF0ZTtcbiAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcblxuICAgIHZhciByZWdleHBBID0gYSBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgLCByZWdleHBCID0gYiBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgICBpZiAocmVnZXhwQSAhPSByZWdleHBCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHJlZ2V4cEEgJiYgcmVnZXhwQikgcmV0dXJuIGEudG9TdHJpbmcoKSA9PSBiLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIga2V5cyA9IGtleUxpc3QoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoICE9PSBrZXlMaXN0KGIpLmxlbmd0aClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghaGFzUHJvcC5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoIWVxdWFsKGFba2V5XSwgYltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGEhPT1hICYmIGIhPT1iO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlc29sdmUgPSByZXF1aXJlKCcuL3Jlc29sdmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFZhbGlkYXRpb246IGVycm9yU3ViY2xhc3MoVmFsaWRhdGlvbkVycm9yKSxcbiAgTWlzc2luZ1JlZjogZXJyb3JTdWJjbGFzcyhNaXNzaW5nUmVmRXJyb3IpXG59O1xuXG5cbmZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcihlcnJvcnMpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ3ZhbGlkYXRpb24gZmFpbGVkJztcbiAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gIHRoaXMuYWp2ID0gdGhpcy52YWxpZGF0aW9uID0gdHJ1ZTtcbn1cblxuXG5NaXNzaW5nUmVmRXJyb3IubWVzc2FnZSA9IGZ1bmN0aW9uIChiYXNlSWQsIHJlZikge1xuICByZXR1cm4gJ2NhblxcJ3QgcmVzb2x2ZSByZWZlcmVuY2UgJyArIHJlZiArICcgZnJvbSBpZCAnICsgYmFzZUlkO1xufTtcblxuXG5mdW5jdGlvbiBNaXNzaW5nUmVmRXJyb3IoYmFzZUlkLCByZWYsIG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSB8fCBNaXNzaW5nUmVmRXJyb3IubWVzc2FnZShiYXNlSWQsIHJlZik7XG4gIHRoaXMubWlzc2luZ1JlZiA9IHJlc29sdmUudXJsKGJhc2VJZCwgcmVmKTtcbiAgdGhpcy5taXNzaW5nU2NoZW1hID0gcmVzb2x2ZS5ub3JtYWxpemVJZChyZXNvbHZlLmZ1bGxQYXRoKHRoaXMubWlzc2luZ1JlZikpO1xufVxuXG5cbmZ1bmN0aW9uIGVycm9yU3ViY2xhc3MoU3ViY2xhc3MpIHtcbiAgU3ViY2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICBTdWJjbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWJjbGFzcztcbiAgcmV0dXJuIFN1YmNsYXNzO1xufVxuIiwidmFyIHJuZyA9IHJlcXVpcmUoJy4vbGliL3JuZycpO1xudmFyIGJ5dGVzVG9VdWlkID0gcmVxdWlyZSgnLi9saWIvYnl0ZXNUb1V1aWQnKTtcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG5cbiAgaWYgKHR5cGVvZihvcHRpb25zKSA9PSAnc3RyaW5nJykge1xuICAgIGJ1ZiA9IG9wdGlvbnMgPT09ICdiaW5hcnknID8gbmV3IEFycmF5KDE2KSA6IG51bGw7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcbiAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG4gIGlmIChidWYpIHtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgMTY7ICsraWkpIHtcbiAgICAgIGJ1ZltpICsgaWldID0gcm5kc1tpaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBieXRlc1RvVXVpZChybmRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2NDtcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgdG91Z2ggPSByZXF1aXJlKCd0b3VnaC1jb29raWUnKVxuXG52YXIgQ29va2llID0gdG91Z2guQ29va2llXG52YXIgQ29va2llSmFyID0gdG91Z2guQ29va2llSmFyXG5cbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGlmIChzdHIgJiYgc3RyLnVyaSkge1xuICAgIHN0ciA9IHN0ci51cmlcbiAgfVxuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjb29raWUgZnVuY3Rpb24gb25seSBhY2NlcHRzIFNUUklORyBhcyBwYXJhbScpXG4gIH1cbiAgcmV0dXJuIENvb2tpZS5wYXJzZShzdHIsIHtsb29zZTogdHJ1ZX0pXG59XG5cbi8vIEFkYXB0IHRoZSBzb21ldGltZXMtQXN5bmMgYXBpIG9mIHRvdWdoLkNvb2tpZUphciB0byBvdXIgcmVxdWlyZW1lbnRzXG5mdW5jdGlvbiBSZXF1ZXN0SmFyIChzdG9yZSkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgc2VsZi5famFyID0gbmV3IENvb2tpZUphcihzdG9yZSwge2xvb3NlTW9kZTogdHJ1ZX0pXG59XG5SZXF1ZXN0SmFyLnByb3RvdHlwZS5zZXRDb29raWUgPSBmdW5jdGlvbiAoY29va2llT3JTdHIsIHVyaSwgb3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgcmV0dXJuIHNlbGYuX2phci5zZXRDb29raWVTeW5jKGNvb2tpZU9yU3RyLCB1cmksIG9wdGlvbnMgfHwge30pXG59XG5SZXF1ZXN0SmFyLnByb3RvdHlwZS5nZXRDb29raWVTdHJpbmcgPSBmdW5jdGlvbiAodXJpKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICByZXR1cm4gc2VsZi5famFyLmdldENvb2tpZVN0cmluZ1N5bmModXJpKVxufVxuUmVxdWVzdEphci5wcm90b3R5cGUuZ2V0Q29va2llcyA9IGZ1bmN0aW9uICh1cmkpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHJldHVybiBzZWxmLl9qYXIuZ2V0Q29va2llc1N5bmModXJpKVxufVxuXG5leHBvcnRzLmphciA9IGZ1bmN0aW9uIChzdG9yZSkge1xuICByZXR1cm4gbmV3IFJlcXVlc3RKYXIoc3RvcmUpXG59XG4iLCIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxOCwgU2FsZXNmb3JjZS5jb20sIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbiAqIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgU2FsZXNmb3JjZS5jb20gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heVxuICogYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4gKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4gKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuICogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuICogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiAqIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuICogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiAqIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4gKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuICogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbid1c2Ugc3RyaWN0JztcbnZhciBwc2wgPSByZXF1aXJlKCdwc2wnKTtcblxuZnVuY3Rpb24gZ2V0UHVibGljU3VmZml4KGRvbWFpbikge1xuICByZXR1cm4gcHNsLmdldChkb21haW4pO1xufVxuXG5leHBvcnRzLmdldFB1YmxpY1N1ZmZpeCA9IGdldFB1YmxpY1N1ZmZpeDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInB1bnljb2RlXCIpOyIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBTYWxlc2ZvcmNlLmNvbSwgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuICogYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiBTYWxlc2ZvcmNlLmNvbSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5XG4gKiBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuICogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4gKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuICogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiAqIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuLypqc2hpbnQgdW51c2VkOmZhbHNlICovXG5cbmZ1bmN0aW9uIFN0b3JlKCkge1xufVxuZXhwb3J0cy5TdG9yZSA9IFN0b3JlO1xuXG4vLyBTdG9yZXMgbWF5IGJlIHN5bmNocm9ub3VzLCBidXQgYXJlIHN0aWxsIHJlcXVpcmVkIHRvIHVzZSBhXG4vLyBDb250aW51YXRpb24tUGFzc2luZyBTdHlsZSBBUEkuICBUaGUgQ29va2llSmFyIGl0c2VsZiB3aWxsIGV4cG9zZSBhIFwiKlN5bmNcIlxuLy8gQVBJIHRoYXQgY29udmVydHMgZnJvbSBzeW5jaHJvbm91cy1jYWxsYmFja3MgdG8gaW1wZXJhdGl2ZSBzdHlsZS5cblN0b3JlLnByb3RvdHlwZS5zeW5jaHJvbm91cyA9IGZhbHNlO1xuXG5TdG9yZS5wcm90b3R5cGUuZmluZENvb2tpZSA9IGZ1bmN0aW9uKGRvbWFpbiwgcGF0aCwga2V5LCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2ZpbmRDb29raWUgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZmluZENvb2tpZXMgPSBmdW5jdGlvbihkb21haW4sIHBhdGgsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignZmluZENvb2tpZXMgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucHV0Q29va2llID0gZnVuY3Rpb24oY29va2llLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3B1dENvb2tpZSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS51cGRhdGVDb29raWUgPSBmdW5jdGlvbihvbGRDb29raWUsIG5ld0Nvb2tpZSwgY2IpIHtcbiAgLy8gcmVjb21tZW5kZWQgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbjpcbiAgLy8gcmV0dXJuIHRoaXMucHV0Q29va2llKG5ld0Nvb2tpZSwgY2IpO1xuICB0aHJvdyBuZXcgRXJyb3IoJ3VwZGF0ZUNvb2tpZSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZW1vdmVDb29raWUgPSBmdW5jdGlvbihkb21haW4sIHBhdGgsIGtleSwgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVDb29raWUgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVtb3ZlQ29va2llcyA9IGZ1bmN0aW9uKGRvbWFpbiwgcGF0aCwgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVDb29raWVzIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLmdldEFsbENvb2tpZXMgPSBmdW5jdGlvbihjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2dldEFsbENvb2tpZXMgaXMgbm90IGltcGxlbWVudGVkICh0aGVyZWZvcmUgamFyIGNhbm5vdCBiZSBzZXJpYWxpemVkKScpO1xufTtcbiIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBTYWxlc2ZvcmNlLmNvbSwgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuICogYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiBTYWxlc2ZvcmNlLmNvbSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5XG4gKiBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuICogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4gKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuICogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiAqIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcHVic3VmZml4ID0gcmVxdWlyZSgnLi9wdWJzdWZmaXgtcHNsJyk7XG5cbi8vIEdpdmVzIHRoZSBwZXJtdXRhdGlvbiBvZiBhbGwgcG9zc2libGUgZG9tYWluTWF0Y2goKWVzIG9mIGEgZ2l2ZW4gZG9tYWluLiBUaGVcbi8vIGFycmF5IGlzIGluIHNob3J0ZXN0LXRvLWxvbmdlc3Qgb3JkZXIuICBIYW5keSBmb3IgaW5kZXhpbmcuXG5mdW5jdGlvbiBwZXJtdXRlRG9tYWluIChkb21haW4pIHtcbiAgdmFyIHB1YlN1ZiA9IHB1YnN1ZmZpeC5nZXRQdWJsaWNTdWZmaXgoZG9tYWluKTtcbiAgaWYgKCFwdWJTdWYpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocHViU3VmID09IGRvbWFpbikge1xuICAgIHJldHVybiBbZG9tYWluXTtcbiAgfVxuXG4gIHZhciBwcmVmaXggPSBkb21haW4uc2xpY2UoMCwgLShwdWJTdWYubGVuZ3RoICsgMSkpOyAvLyBcIi5leGFtcGxlLmNvbVwiXG4gIHZhciBwYXJ0cyA9IHByZWZpeC5zcGxpdCgnLicpLnJldmVyc2UoKTtcbiAgdmFyIGN1ciA9IHB1YlN1ZjtcbiAgdmFyIHBlcm11dGF0aW9ucyA9IFtjdXJdO1xuICB3aGlsZSAocGFydHMubGVuZ3RoKSB7XG4gICAgY3VyID0gcGFydHMuc2hpZnQoKSArICcuJyArIGN1cjtcbiAgICBwZXJtdXRhdGlvbnMucHVzaChjdXIpO1xuICB9XG4gIHJldHVybiBwZXJtdXRhdGlvbnM7XG59XG5cbmV4cG9ydHMucGVybXV0ZURvbWFpbiA9IHBlcm11dGVEb21haW47XG4iLCIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgU2FsZXNmb3JjZS5jb20sIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbiAqIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgU2FsZXNmb3JjZS5jb20gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heVxuICogYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4gKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4gKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuICogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuICogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiAqIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuICogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiAqIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4gKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuICogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblwidXNlIHN0cmljdFwiO1xuLypcbiAqIFwiQSByZXF1ZXN0LXBhdGggcGF0aC1tYXRjaGVzIGEgZ2l2ZW4gY29va2llLXBhdGggaWYgYXQgbGVhc3Qgb25lIG9mIHRoZVxuICogZm9sbG93aW5nIGNvbmRpdGlvbnMgaG9sZHM6XCJcbiAqL1xuZnVuY3Rpb24gcGF0aE1hdGNoIChyZXFQYXRoLCBjb29raWVQYXRoKSB7XG4gIC8vIFwibyAgVGhlIGNvb2tpZS1wYXRoIGFuZCB0aGUgcmVxdWVzdC1wYXRoIGFyZSBpZGVudGljYWwuXCJcbiAgaWYgKGNvb2tpZVBhdGggPT09IHJlcVBhdGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBpZHggPSByZXFQYXRoLmluZGV4T2YoY29va2llUGF0aCk7XG4gIGlmIChpZHggPT09IDApIHtcbiAgICAvLyBcIm8gIFRoZSBjb29raWUtcGF0aCBpcyBhIHByZWZpeCBvZiB0aGUgcmVxdWVzdC1wYXRoLCBhbmQgdGhlIGxhc3RcbiAgICAvLyBjaGFyYWN0ZXIgb2YgdGhlIGNvb2tpZS1wYXRoIGlzICV4MkYgKFwiL1wiKS5cIlxuICAgIGlmIChjb29raWVQYXRoLnN1YnN0cigtMSkgPT09IFwiL1wiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBcIiBvICBUaGUgY29va2llLXBhdGggaXMgYSBwcmVmaXggb2YgdGhlIHJlcXVlc3QtcGF0aCwgYW5kIHRoZSBmaXJzdFxuICAgIC8vIGNoYXJhY3RlciBvZiB0aGUgcmVxdWVzdC1wYXRoIHRoYXQgaXMgbm90IGluY2x1ZGVkIGluIHRoZSBjb29raWUtIHBhdGhcbiAgICAvLyBpcyBhICV4MkYgKFwiL1wiKSBjaGFyYWN0ZXIuXCJcbiAgICBpZiAocmVxUGF0aC5zdWJzdHIoY29va2llUGF0aC5sZW5ndGgsIDEpID09PSBcIi9cIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnRzLnBhdGhNYXRjaCA9IHBhdGhNYXRjaDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJ1ZmZlclwiKTsiLCIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFZlcmlmaWVyOiBWZXJpZmllcixcblx0U2lnbmVyOiBTaWduZXJcbn07XG5cbnZhciBuYWNsID0gcmVxdWlyZSgndHdlZXRuYWNsJyk7XG52YXIgc3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBWZXJpZmllcihrZXksIGhhc2hBbGdvKSB7XG5cdGlmIChoYXNoQWxnby50b0xvd2VyQ2FzZSgpICE9PSAnc2hhNTEyJylcblx0XHR0aHJvdyAobmV3IEVycm9yKCdFRDI1NTE5IG9ubHkgc3VwcG9ydHMgdGhlIHVzZSBvZiAnICtcblx0XHQgICAgJ1NIQS01MTIgaGFzaGVzJykpO1xuXG5cdHRoaXMua2V5ID0ga2V5O1xuXHR0aGlzLmNodW5rcyA9IFtdO1xuXG5cdHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMsIHt9KTtcbn1cbnV0aWwuaW5oZXJpdHMoVmVyaWZpZXIsIHN0cmVhbS5Xcml0YWJsZSk7XG5cblZlcmlmaWVyLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuYywgY2IpIHtcblx0dGhpcy5jaHVua3MucHVzaChjaHVuayk7XG5cdGNiKCk7XG59O1xuXG5WZXJpZmllci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG5cdGlmICh0eXBlb2YgKGNodW5rKSA9PT0gJ3N0cmluZycpXG5cdFx0Y2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgJ2JpbmFyeScpO1xuXHR0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbn07XG5cblZlcmlmaWVyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiAoc2lnbmF0dXJlLCBmbXQpIHtcblx0dmFyIHNpZztcblx0aWYgKFNpZ25hdHVyZS5pc1NpZ25hdHVyZShzaWduYXR1cmUsIFsyLCAwXSkpIHtcblx0XHRpZiAoc2lnbmF0dXJlLnR5cGUgIT09ICdlZDI1NTE5Jylcblx0XHRcdHJldHVybiAoZmFsc2UpO1xuXHRcdHNpZyA9IHNpZ25hdHVyZS50b0J1ZmZlcigncmF3Jyk7XG5cblx0fSBlbHNlIGlmICh0eXBlb2YgKHNpZ25hdHVyZSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0c2lnID0gQnVmZmVyLmZyb20oc2lnbmF0dXJlLCAnYmFzZTY0Jyk7XG5cblx0fSBlbHNlIGlmIChTaWduYXR1cmUuaXNTaWduYXR1cmUoc2lnbmF0dXJlLCBbMSwgMF0pKSB7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignc2lnbmF0dXJlIHdhcyBjcmVhdGVkIGJ5IHRvbyBvbGQgJyArXG5cdFx0ICAgICdhIHZlcnNpb24gb2Ygc3NocGsgYW5kIGNhbm5vdCBiZSB2ZXJpZmllZCcpKTtcblx0fVxuXG5cdGFzc2VydC5idWZmZXIoc2lnKTtcblx0cmV0dXJuIChuYWNsLnNpZ24uZGV0YWNoZWQudmVyaWZ5KFxuXHQgICAgbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmNvbmNhdCh0aGlzLmNodW5rcykpLFxuXHQgICAgbmV3IFVpbnQ4QXJyYXkoc2lnKSxcblx0ICAgIG5ldyBVaW50OEFycmF5KHRoaXMua2V5LnBhcnQuQS5kYXRhKSkpO1xufTtcblxuZnVuY3Rpb24gU2lnbmVyKGtleSwgaGFzaEFsZ28pIHtcblx0aWYgKGhhc2hBbGdvLnRvTG93ZXJDYXNlKCkgIT09ICdzaGE1MTInKVxuXHRcdHRocm93IChuZXcgRXJyb3IoJ0VEMjU1MTkgb25seSBzdXBwb3J0cyB0aGUgdXNlIG9mICcgK1xuXHRcdCAgICAnU0hBLTUxMiBoYXNoZXMnKSk7XG5cblx0dGhpcy5rZXkgPSBrZXk7XG5cdHRoaXMuY2h1bmtzID0gW107XG5cblx0c3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcywge30pO1xufVxudXRpbC5pbmhlcml0cyhTaWduZXIsIHN0cmVhbS5Xcml0YWJsZSk7XG5cblNpZ25lci5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmMsIGNiKSB7XG5cdHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xuXHRjYigpO1xufTtcblxuU2lnbmVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcblx0aWYgKHR5cGVvZiAoY2h1bmspID09PSAnc3RyaW5nJylcblx0XHRjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCAnYmluYXJ5Jyk7XG5cdHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xufTtcblxuU2lnbmVyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2lnID0gbmFjbC5zaWduLmRldGFjaGVkKFxuXHQgICAgbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmNvbmNhdCh0aGlzLmNodW5rcykpLFxuXHQgICAgbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmNvbmNhdChbXG5cdFx0dGhpcy5rZXkucGFydC5rLmRhdGEsIHRoaXMua2V5LnBhcnQuQS5kYXRhXSkpKTtcblx0dmFyIHNpZ0J1ZiA9IEJ1ZmZlci5mcm9tKHNpZyk7XG5cdHZhciBzaWdPYmogPSBTaWduYXR1cmUucGFyc2Uoc2lnQnVmLCAnZWQyNTUxOScsICdyYXcnKTtcblx0c2lnT2JqLmhhc2hBbGdvcml0aG0gPSAnc2hhNTEyJztcblx0cmV0dXJuIChzaWdPYmopO1xufTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IEpveWVudCwgSW5jLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0cmVhZDogcmVhZCxcblx0d3JpdGU6IHdyaXRlXG59O1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEtleSA9IHJlcXVpcmUoJy4uL2tleScpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuLi9wcml2YXRlLWtleScpO1xuXG52YXIgcGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbnZhciBzc2ggPSByZXF1aXJlKCcuL3NzaCcpO1xudmFyIHJmYzQyNTMgPSByZXF1aXJlKCcuL3JmYzQyNTMnKTtcbnZhciBkbnNzZWMgPSByZXF1aXJlKCcuL2Ruc3NlYycpO1xudmFyIHB1dHR5ID0gcmVxdWlyZSgnLi9wdXR0eScpO1xuXG52YXIgRE5TU0VDX1BSSVZLRVlfSEVBREVSX1BSRUZJWCA9ICdQcml2YXRlLWtleS1mb3JtYXQ6IHYxJztcblxuZnVuY3Rpb24gcmVhZChidWYsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiAoYnVmKSA9PT0gJ3N0cmluZycpIHtcblx0XHRpZiAoYnVmLnRyaW0oKS5tYXRjaCgvXlstXStbIF0qQkVHSU4vKSlcblx0XHRcdHJldHVybiAocGVtLnJlYWQoYnVmLCBvcHRpb25zKSk7XG5cdFx0aWYgKGJ1Zi5tYXRjaCgvXlxccypzc2gtW2Etel0vKSlcblx0XHRcdHJldHVybiAoc3NoLnJlYWQoYnVmLCBvcHRpb25zKSk7XG5cdFx0aWYgKGJ1Zi5tYXRjaCgvXlxccyplY2RzYS0vKSlcblx0XHRcdHJldHVybiAoc3NoLnJlYWQoYnVmLCBvcHRpb25zKSk7XG5cdFx0aWYgKGJ1Zi5tYXRjaCgvXnB1dHR5LXVzZXIta2V5LWZpbGUtMjovaSkpXG5cdFx0XHRyZXR1cm4gKHB1dHR5LnJlYWQoYnVmLCBvcHRpb25zKSk7XG5cdFx0aWYgKGZpbmRETlNTRUNIZWFkZXIoYnVmKSlcblx0XHRcdHJldHVybiAoZG5zc2VjLnJlYWQoYnVmLCBvcHRpb25zKSk7XG5cdFx0YnVmID0gQnVmZmVyLmZyb20oYnVmLCAnYmluYXJ5Jyk7XG5cdH0gZWxzZSB7XG5cdFx0YXNzZXJ0LmJ1ZmZlcihidWYpO1xuXHRcdGlmIChmaW5kUEVNSGVhZGVyKGJ1ZikpXG5cdFx0XHRyZXR1cm4gKHBlbS5yZWFkKGJ1Ziwgb3B0aW9ucykpO1xuXHRcdGlmIChmaW5kU1NISGVhZGVyKGJ1ZikpXG5cdFx0XHRyZXR1cm4gKHNzaC5yZWFkKGJ1Ziwgb3B0aW9ucykpO1xuXHRcdGlmIChmaW5kUHVUVFlIZWFkZXIoYnVmKSlcblx0XHRcdHJldHVybiAocHV0dHkucmVhZChidWYsIG9wdGlvbnMpKTtcblx0XHRpZiAoZmluZEROU1NFQ0hlYWRlcihidWYpKVxuXHRcdFx0cmV0dXJuIChkbnNzZWMucmVhZChidWYsIG9wdGlvbnMpKTtcblx0fVxuXHRpZiAoYnVmLnJlYWRVSW50MzJCRSgwKSA8IGJ1Zi5sZW5ndGgpXG5cdFx0cmV0dXJuIChyZmM0MjUzLnJlYWQoYnVmLCBvcHRpb25zKSk7XG5cdHRocm93IChuZXcgRXJyb3IoJ0ZhaWxlZCB0byBhdXRvLWRldGVjdCBmb3JtYXQgb2Yga2V5JykpO1xufVxuXG5mdW5jdGlvbiBmaW5kUHVUVFlIZWFkZXIoYnVmKSB7XG5cdHZhciBvZmZzZXQgPSAwO1xuXHR3aGlsZSAob2Zmc2V0IDwgYnVmLmxlbmd0aCAmJlxuXHQgICAgKGJ1ZltvZmZzZXRdID09PSAzMiB8fCBidWZbb2Zmc2V0XSA9PT0gMTAgfHwgYnVmW29mZnNldF0gPT09IDkpKVxuXHRcdCsrb2Zmc2V0O1xuXHRpZiAob2Zmc2V0ICsgMjIgPD0gYnVmLmxlbmd0aCAmJlxuXHQgICAgYnVmLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgMjIpLnRvU3RyaW5nKCdhc2NpaScpLnRvTG93ZXJDYXNlKCkgPT09XG5cdCAgICAncHV0dHktdXNlci1rZXktZmlsZS0yOicpXG5cdFx0cmV0dXJuICh0cnVlKTtcblx0cmV0dXJuIChmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRTU0hIZWFkZXIoYnVmKSB7XG5cdHZhciBvZmZzZXQgPSAwO1xuXHR3aGlsZSAob2Zmc2V0IDwgYnVmLmxlbmd0aCAmJlxuXHQgICAgKGJ1ZltvZmZzZXRdID09PSAzMiB8fCBidWZbb2Zmc2V0XSA9PT0gMTAgfHwgYnVmW29mZnNldF0gPT09IDkpKVxuXHRcdCsrb2Zmc2V0O1xuXHRpZiAob2Zmc2V0ICsgNCA8PSBidWYubGVuZ3RoICYmXG5cdCAgICBidWYuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyA0KS50b1N0cmluZygnYXNjaWknKSA9PT0gJ3NzaC0nKVxuXHRcdHJldHVybiAodHJ1ZSk7XG5cdGlmIChvZmZzZXQgKyA2IDw9IGJ1Zi5sZW5ndGggJiZcblx0ICAgIGJ1Zi5zbGljZShvZmZzZXQsIG9mZnNldCArIDYpLnRvU3RyaW5nKCdhc2NpaScpID09PSAnZWNkc2EtJylcblx0XHRyZXR1cm4gKHRydWUpO1xuXHRyZXR1cm4gKGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gZmluZFBFTUhlYWRlcihidWYpIHtcblx0dmFyIG9mZnNldCA9IDA7XG5cdHdoaWxlIChvZmZzZXQgPCBidWYubGVuZ3RoICYmXG5cdCAgICAoYnVmW29mZnNldF0gPT09IDMyIHx8IGJ1ZltvZmZzZXRdID09PSAxMCkpXG5cdFx0KytvZmZzZXQ7XG5cdGlmIChidWZbb2Zmc2V0XSAhPT0gNDUpXG5cdFx0cmV0dXJuIChmYWxzZSk7XG5cdHdoaWxlIChvZmZzZXQgPCBidWYubGVuZ3RoICYmXG5cdCAgICAoYnVmW29mZnNldF0gPT09IDQ1KSlcblx0XHQrK29mZnNldDtcblx0d2hpbGUgKG9mZnNldCA8IGJ1Zi5sZW5ndGggJiZcblx0ICAgIChidWZbb2Zmc2V0XSA9PT0gMzIpKVxuXHRcdCsrb2Zmc2V0O1xuXHRpZiAob2Zmc2V0ICsgNSA+IGJ1Zi5sZW5ndGggfHxcblx0ICAgIGJ1Zi5zbGljZShvZmZzZXQsIG9mZnNldCArIDUpLnRvU3RyaW5nKCdhc2NpaScpICE9PSAnQkVHSU4nKVxuXHRcdHJldHVybiAoZmFsc2UpO1xuXHRyZXR1cm4gKHRydWUpO1xufVxuXG5mdW5jdGlvbiBmaW5kRE5TU0VDSGVhZGVyKGJ1Zikge1xuXHQvLyBwcml2YXRlIGNhc2UgZmlyc3Rcblx0aWYgKGJ1Zi5sZW5ndGggPD0gRE5TU0VDX1BSSVZLRVlfSEVBREVSX1BSRUZJWC5sZW5ndGgpXG5cdFx0cmV0dXJuIChmYWxzZSk7XG5cdHZhciBoZWFkZXJDaGVjayA9IGJ1Zi5zbGljZSgwLCBETlNTRUNfUFJJVktFWV9IRUFERVJfUFJFRklYLmxlbmd0aCk7XG5cdGlmIChoZWFkZXJDaGVjay50b1N0cmluZygnYXNjaWknKSA9PT0gRE5TU0VDX1BSSVZLRVlfSEVBREVSX1BSRUZJWClcblx0XHRyZXR1cm4gKHRydWUpO1xuXG5cdC8vIHB1YmxpYy1rZXkgUkZDMzExMCA/XG5cdC8vICdkb21haW4uY29tLiBJTiBLRVkgLi4uJyBvciAnZG9tYWluLmNvbS4gSU4gRE5TS0VZIC4uLidcblx0Ly8gc2tpcCBhbnkgY29tbWVudC1saW5lc1xuXHRpZiAodHlwZW9mIChidWYpICE9PSAnc3RyaW5nJykge1xuXHRcdGJ1ZiA9IGJ1Zi50b1N0cmluZygnYXNjaWknKTtcblx0fVxuXHR2YXIgbGluZXMgPSBidWYuc3BsaXQoJ1xcbicpO1xuXHR2YXIgbGluZSA9IDA7XG5cdC8qIEpTU1RZTEVEICovXG5cdHdoaWxlIChsaW5lc1tsaW5lXS5tYXRjaCgvXlxcOy8pKVxuXHRcdGxpbmUrKztcblx0aWYgKGxpbmVzW2xpbmVdLnRvU3RyaW5nKCdhc2NpaScpLm1hdGNoKC9cXC4gSU4gS0VZIC8pKVxuXHRcdHJldHVybiAodHJ1ZSk7XG5cdGlmIChsaW5lc1tsaW5lXS50b1N0cmluZygnYXNjaWknKS5tYXRjaCgvXFwuIElOIEROU0tFWSAvKSlcblx0XHRyZXR1cm4gKHRydWUpO1xuXHRyZXR1cm4gKGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gd3JpdGUoa2V5LCBvcHRpb25zKSB7XG5cdHRocm93IChuZXcgRXJyb3IoJ1wiYXV0b1wiIGZvcm1hdCBjYW5ub3QgYmUgdXNlZCBmb3Igd3JpdGluZycpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyeXB0b19oYXNoX3NoYTUxMiA9IHJlcXVpcmUoJ3R3ZWV0bmFjbCcpLmxvd2xldmVsLmNyeXB0b19oYXNoO1xuXG4vKlxuICogVGhpcyBmaWxlIGlzIGEgMToxIHBvcnQgZnJvbSB0aGUgT3BlbkJTRCBibG93ZmlzaC5jIGFuZCBiY3J5cHRfcGJrZGYuYy4gQXMgYVxuICogcmVzdWx0LCBpdCByZXRhaW5zIHRoZSBvcmlnaW5hbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UuIFRoZSB0d28gZmlsZXMgYXJlXG4gKiB1bmRlciBzbGlnaHRseSBkaWZmZXJlbnQgKGJ1dCBjb21wYXRpYmxlKSBsaWNlbnNlcywgYW5kIGFyZSBoZXJlIGNvbWJpbmVkIGluXG4gKiBvbmUgZmlsZS5cbiAqXG4gKiBDcmVkaXQgZm9yIHRoZSBhY3R1YWwgcG9ydGluZyB3b3JrIGdvZXMgdG86XG4gKiAgRGV2aSBNYW5kaXJpIDxtZUBkZXZpLndlYi5pZD5cbiAqL1xuXG4vKlxuICogVGhlIEJsb3dmaXNoIHBvcnRpb25zIGFyZSB1bmRlciB0aGUgZm9sbG93aW5nIGxpY2Vuc2U6XG4gKlxuICogQmxvd2Zpc2ggYmxvY2sgY2lwaGVyIGZvciBPcGVuQlNEXG4gKiBDb3B5cmlnaHQgMTk5NyBOaWVscyBQcm92b3MgPHByb3Zvc0BwaHlzbmV0LnVuaS1oYW1idXJnLmRlPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBhZHZpY2UgYnkgRGF2aWQgTWF6aWVyZXMgPGRtQGxjcy5taXQuZWR1Pi5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uc1xuICogYXJlIG1ldDpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqIDMuIFRoZSBuYW1lIG9mIHRoZSBhdXRob3IgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuICogICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQVVUSE9SIGBgQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1MgT1JcbiAqIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVNcbiAqIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuXG4gKiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gKiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVRcbiAqIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcbiAqIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWVxuICogVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXG4gKiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qXG4gKiBUaGUgYmNyeXB0X3Bia2RmIHBvcnRpb25zIGFyZSB1bmRlciB0aGUgZm9sbG93aW5nIGxpY2Vuc2U6XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzIFRlZCBVbmFuZ3N0IDx0ZWR1QG9wZW5ic2Qub3JnPlxuICpcbiAqIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxuICogcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZSBhYm92ZVxuICogY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBhcHBlYXIgaW4gYWxsIGNvcGllcy5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFU1xuICogV0lUSCBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1JcbiAqIEFOWSBTUEVDSUFMLCBESVJFQ1QsIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVNcbiAqIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST00gTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTlxuICogQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SIE9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0ZcbiAqIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SIFBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4gKi9cblxuLypcbiAqIFBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyAoSmF2YXNjcmlwdC1zcGVjaWZpYyk6XG4gKlxuICogQ29weXJpZ2h0IDIwMTYsIEpveWVudCBJbmNcbiAqIEF1dGhvcjogQWxleCBXaWxzb24gPGFsZXgud2lsc29uQGpveWVudC5jb20+XG4gKlxuICogUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG4gKiBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlXG4gKiBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXG4gKiBXSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUlxuICogQU5ZIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xuICogV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOXG4gKiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRlxuICogT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbiAqL1xuXG4vLyBQb3J0ZWQgZnJvbSBPcGVuQlNEIGJjcnlwdF9wYmtkZi5jIHYxLjlcblxudmFyIEJMRl9KID0gMDtcblxudmFyIEJsb3dmaXNoID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuUyA9IFtcbiAgICBuZXcgVWludDMyQXJyYXkoW1xuICAgICAgMHhkMTMxMGJhNiwgMHg5OGRmYjVhYywgMHgyZmZkNzJkYiwgMHhkMDFhZGZiNyxcbiAgICAgIDB4YjhlMWFmZWQsIDB4NmEyNjdlOTYsIDB4YmE3YzkwNDUsIDB4ZjEyYzdmOTksXG4gICAgICAweDI0YTE5OTQ3LCAweGIzOTE2Y2Y3LCAweDA4MDFmMmUyLCAweDg1OGVmYzE2LFxuICAgICAgMHg2MzY5MjBkOCwgMHg3MTU3NGU2OSwgMHhhNDU4ZmVhMywgMHhmNDkzM2Q3ZSxcbiAgICAgIDB4MGQ5NTc0OGYsIDB4NzI4ZWI2NTgsIDB4NzE4YmNkNTgsIDB4ODIxNTRhZWUsXG4gICAgICAweDdiNTRhNDFkLCAweGMyNWE1OWI1LCAweDljMzBkNTM5LCAweDJhZjI2MDEzLFxuICAgICAgMHhjNWQxYjAyMywgMHgyODYwODVmMCwgMHhjYTQxNzkxOCwgMHhiOGRiMzhlZixcbiAgICAgIDB4OGU3OWRjYjAsIDB4NjAzYTE4MGUsIDB4NmM5ZTBlOGIsIDB4YjAxZThhM2UsXG4gICAgICAweGQ3MTU3N2MxLCAweGJkMzE0YjI3LCAweDc4YWYyZmRhLCAweDU1NjA1YzYwLFxuICAgICAgMHhlNjU1MjVmMywgMHhhYTU1YWI5NCwgMHg1NzQ4OTg2MiwgMHg2M2U4MTQ0MCxcbiAgICAgIDB4NTVjYTM5NmEsIDB4MmFhYjEwYjYsIDB4YjRjYzVjMzQsIDB4MTE0MWU4Y2UsXG4gICAgICAweGExNTQ4NmFmLCAweDdjNzJlOTkzLCAweGIzZWUxNDExLCAweDYzNmZiYzJhLFxuICAgICAgMHgyYmE5YzU1ZCwgMHg3NDE4MzFmNiwgMHhjZTVjM2UxNiwgMHg5Yjg3OTMxZSxcbiAgICAgIDB4YWZkNmJhMzMsIDB4NmMyNGNmNWMsIDB4N2EzMjUzODEsIDB4Mjg5NTg2NzcsXG4gICAgICAweDNiOGY0ODk4LCAweDZiNGJiOWFmLCAweGM0YmZlODFiLCAweDY2MjgyMTkzLFxuICAgICAgMHg2MWQ4MDljYywgMHhmYjIxYTk5MSwgMHg0ODdjYWM2MCwgMHg1ZGVjODAzMixcbiAgICAgIDB4ZWY4NDVkNWQsIDB4ZTk4NTc1YjEsIDB4ZGMyNjIzMDIsIDB4ZWI2NTFiODgsXG4gICAgICAweDIzODkzZTgxLCAweGQzOTZhY2M1LCAweDBmNmQ2ZmYzLCAweDgzZjQ0MjM5LFxuICAgICAgMHgyZTBiNDQ4MiwgMHhhNDg0MjAwNCwgMHg2OWM4ZjA0YSwgMHg5ZTFmOWI1ZSxcbiAgICAgIDB4MjFjNjY4NDIsIDB4ZjZlOTZjOWEsIDB4NjcwYzljNjEsIDB4YWJkMzg4ZjAsXG4gICAgICAweDZhNTFhMGQyLCAweGQ4NTQyZjY4LCAweDk2MGZhNzI4LCAweGFiNTEzM2EzLFxuICAgICAgMHg2ZWVmMGI2YywgMHgxMzdhM2JlNCwgMHhiYTNiZjA1MCwgMHg3ZWZiMmE5OCxcbiAgICAgIDB4YTFmMTY1MWQsIDB4MzlhZjAxNzYsIDB4NjZjYTU5M2UsIDB4ODI0MzBlODgsXG4gICAgICAweDhjZWU4NjE5LCAweDQ1NmY5ZmI0LCAweDdkODRhNWMzLCAweDNiOGI1ZWJlLFxuICAgICAgMHhlMDZmNzVkOCwgMHg4NWMxMjA3MywgMHg0MDFhNDQ5ZiwgMHg1NmMxNmFhNixcbiAgICAgIDB4NGVkM2FhNjIsIDB4MzYzZjc3MDYsIDB4MWJmZWRmNzIsIDB4NDI5YjAyM2QsXG4gICAgICAweDM3ZDBkNzI0LCAweGQwMGExMjQ4LCAweGRiMGZlYWQzLCAweDQ5ZjFjMDliLFxuICAgICAgMHgwNzUzNzJjOSwgMHg4MDk5MWI3YiwgMHgyNWQ0NzlkOCwgMHhmNmU4ZGVmNyxcbiAgICAgIDB4ZTNmZTUwMWEsIDB4YjY3OTRjM2IsIDB4OTc2Y2UwYmQsIDB4MDRjMDA2YmEsXG4gICAgICAweGMxYTk0ZmI2LCAweDQwOWY2MGM0LCAweDVlNWM5ZWMyLCAweDE5NmEyNDYzLFxuICAgICAgMHg2OGZiNmZhZiwgMHgzZTZjNTNiNSwgMHgxMzM5YjJlYiwgMHgzYjUyZWM2ZixcbiAgICAgIDB4NmRmYzUxMWYsIDB4OWIzMDk1MmMsIDB4Y2M4MTQ1NDQsIDB4YWY1ZWJkMDksXG4gICAgICAweGJlZTNkMDA0LCAweGRlMzM0YWZkLCAweDY2MGYyODA3LCAweDE5MmU0YmIzLFxuICAgICAgMHhjMGNiYTg1NywgMHg0NWM4NzQwZiwgMHhkMjBiNWYzOSwgMHhiOWQzZmJkYixcbiAgICAgIDB4NTU3OWMwYmQsIDB4MWE2MDMyMGEsIDB4ZDZhMTAwYzYsIDB4NDAyYzcyNzksXG4gICAgICAweDY3OWYyNWZlLCAweGZiMWZhM2NjLCAweDhlYTVlOWY4LCAweGRiMzIyMmY4LFxuICAgICAgMHgzYzc1MTZkZiwgMHhmZDYxNmIxNSwgMHgyZjUwMWVjOCwgMHhhZDA1NTJhYixcbiAgICAgIDB4MzIzZGI1ZmEsIDB4ZmQyMzg3NjAsIDB4NTMzMTdiNDgsIDB4M2UwMGRmODIsXG4gICAgICAweDllNWM1N2JiLCAweGNhNmY4Y2EwLCAweDFhODc1NjJlLCAweGRmMTc2OWRiLFxuICAgICAgMHhkNTQyYThmNiwgMHgyODdlZmZjMywgMHhhYzY3MzJjNiwgMHg4YzRmNTU3MyxcbiAgICAgIDB4Njk1YjI3YjAsIDB4YmJjYTU4YzgsIDB4ZTFmZmEzNWQsIDB4YjhmMDExYTAsXG4gICAgICAweDEwZmEzZDk4LCAweGZkMjE4M2I4LCAweDRhZmNiNTZjLCAweDJkZDFkMzViLFxuICAgICAgMHg5YTUzZTQ3OSwgMHhiNmY4NDU2NSwgMHhkMjhlNDliYywgMHg0YmZiOTc5MCxcbiAgICAgIDB4ZTFkZGYyZGEsIDB4YTRjYjdlMzMsIDB4NjJmYjEzNDEsIDB4Y2VlNGM2ZTgsXG4gICAgICAweGVmMjBjYWRhLCAweDM2Nzc0YzAxLCAweGQwN2U5ZWZlLCAweDJiZjExZmI0LFxuICAgICAgMHg5NWRiZGE0ZCwgMHhhZTkwOTE5OCwgMHhlYWFkOGU3MSwgMHg2YjkzZDVhMCxcbiAgICAgIDB4ZDA4ZWQxZDAsIDB4YWZjNzI1ZTAsIDB4OGUzYzViMmYsIDB4OGU3NTk0YjcsXG4gICAgICAweDhmZjZlMmZiLCAweGYyMTIyYjY0LCAweDg4ODhiODEyLCAweDkwMGRmMDFjLFxuICAgICAgMHg0ZmFkNWVhMCwgMHg2ODhmYzMxYywgMHhkMWNmZjE5MSwgMHhiM2E4YzFhZCxcbiAgICAgIDB4MmYyZjIyMTgsIDB4YmUwZTE3NzcsIDB4ZWE3NTJkZmUsIDB4OGIwMjFmYTEsXG4gICAgICAweGU1YTBjYzBmLCAweGI1NmY3NGU4LCAweDE4YWNmM2Q2LCAweGNlODllMjk5LFxuICAgICAgMHhiNGE4NGZlMCwgMHhmZDEzZTBiNywgMHg3Y2M0M2I4MSwgMHhkMmFkYThkOSxcbiAgICAgIDB4MTY1ZmEyNjYsIDB4ODA5NTc3MDUsIDB4OTNjYzczMTQsIDB4MjExYTE0NzcsXG4gICAgICAweGU2YWQyMDY1LCAweDc3YjVmYTg2LCAweGM3NTQ0MmY1LCAweGZiOWQzNWNmLFxuICAgICAgMHhlYmNkYWYwYywgMHg3YjNlODlhMCwgMHhkNjQxMWJkMywgMHhhZTFlN2U0OSxcbiAgICAgIDB4MDAyNTBlMmQsIDB4MjA3MWIzNWUsIDB4MjI2ODAwYmIsIDB4NTdiOGUwYWYsXG4gICAgICAweDI0NjQzNjliLCAweGYwMDliOTFlLCAweDU1NjM5MTFkLCAweDU5ZGZhNmFhLFxuICAgICAgMHg3OGMxNDM4OSwgMHhkOTVhNTM3ZiwgMHgyMDdkNWJhMiwgMHgwMmU1YjljNSxcbiAgICAgIDB4ODMyNjAzNzYsIDB4NjI5NWNmYTksIDB4MTFjODE5NjgsIDB4NGU3MzRhNDEsXG4gICAgICAweGIzNDcyZGNhLCAweDdiMTRhOTRhLCAweDFiNTEwMDUyLCAweDlhNTMyOTE1LFxuICAgICAgMHhkNjBmNTczZiwgMHhiYzliYzZlNCwgMHgyYjYwYTQ3NiwgMHg4MWU2NzQwMCxcbiAgICAgIDB4MDhiYTZmYjUsIDB4NTcxYmU5MWYsIDB4ZjI5NmVjNmIsIDB4MmEwZGQ5MTUsXG4gICAgICAweGI2NjM2NTIxLCAweGU3YjlmOWI2LCAweGZmMzQwNTJlLCAweGM1ODU1NjY0LFxuICAgICAgMHg1M2IwMmQ1ZCwgMHhhOTlmOGZhMSwgMHgwOGJhNDc5OSwgMHg2ZTg1MDc2YV0pLFxuICAgIG5ldyBVaW50MzJBcnJheShbXG4gICAgICAweDRiN2E3MGU5LCAweGI1YjMyOTQ0LCAweGRiNzUwOTJlLCAweGM0MTkyNjIzLFxuICAgICAgMHhhZDZlYTZiMCwgMHg0OWE3ZGY3ZCwgMHg5Y2VlNjBiOCwgMHg4ZmVkYjI2NixcbiAgICAgIDB4ZWNhYThjNzEsIDB4Njk5YTE3ZmYsIDB4NTY2NDUyNmMsIDB4YzJiMTllZTEsXG4gICAgICAweDE5MzYwMmE1LCAweDc1MDk0YzI5LCAweGEwNTkxMzQwLCAweGU0MTgzYTNlLFxuICAgICAgMHgzZjU0OTg5YSwgMHg1YjQyOWQ2NSwgMHg2YjhmZTRkNiwgMHg5OWY3M2ZkNixcbiAgICAgIDB4YTFkMjljMDcsIDB4ZWZlODMwZjUsIDB4NGQyZDM4ZTYsIDB4ZjAyNTVkYzEsXG4gICAgICAweDRjZGQyMDg2LCAweDg0NzBlYjI2LCAweDYzODJlOWM2LCAweDAyMWVjYzVlLFxuICAgICAgMHgwOTY4NmIzZiwgMHgzZWJhZWZjOSwgMHgzYzk3MTgxNCwgMHg2YjZhNzBhMSxcbiAgICAgIDB4Njg3ZjM1ODQsIDB4NTJhMGUyODYsIDB4Yjc5YzUzMDUsIDB4YWE1MDA3MzcsXG4gICAgICAweDNlMDc4NDFjLCAweDdmZGVhZTVjLCAweDhlN2Q0NGVjLCAweDU3MTZmMmI4LFxuICAgICAgMHhiMDNhZGEzNywgMHhmMDUwMGMwZCwgMHhmMDFjMWYwNCwgMHgwMjAwYjNmZixcbiAgICAgIDB4YWUwY2Y1MWEsIDB4M2NiNTc0YjIsIDB4MjU4MzdhNTgsIDB4ZGMwOTIxYmQsXG4gICAgICAweGQxOTExM2Y5LCAweDdjYTkyZmY2LCAweDk0MzI0NzczLCAweDIyZjU0NzAxLFxuICAgICAgMHgzYWU1ZTU4MSwgMHgzN2MyZGFkYywgMHhjOGI1NzYzNCwgMHg5YWYzZGRhNyxcbiAgICAgIDB4YTk0NDYxNDYsIDB4MGZkMDAzMGUsIDB4ZWNjOGM3M2UsIDB4YTQ3NTFlNDEsXG4gICAgICAweGUyMzhjZDk5LCAweDNiZWEwZTJmLCAweDMyODBiYmExLCAweDE4M2ViMzMxLFxuICAgICAgMHg0ZTU0OGIzOCwgMHg0ZjZkYjkwOCwgMHg2ZjQyMGQwMywgMHhmNjBhMDRiZixcbiAgICAgIDB4MmNiODEyOTAsIDB4MjQ5NzdjNzksIDB4NTY3OWIwNzIsIDB4YmNhZjg5YWYsXG4gICAgICAweGRlOWE3NzFmLCAweGQ5OTMwODEwLCAweGIzOGJhZTEyLCAweGRjY2YzZjJlLFxuICAgICAgMHg1NTEyNzIxZiwgMHgyZTZiNzEyNCwgMHg1MDFhZGRlNiwgMHg5Zjg0Y2Q4NyxcbiAgICAgIDB4N2E1ODQ3MTgsIDB4NzQwOGRhMTcsIDB4YmM5ZjlhYmMsIDB4ZTk0YjdkOGMsXG4gICAgICAweGVjN2FlYzNhLCAweGRiODUxZGZhLCAweDYzMDk0MzY2LCAweGM0NjRjM2QyLFxuICAgICAgMHhlZjFjMTg0NywgMHgzMjE1ZDkwOCwgMHhkZDQzM2IzNywgMHgyNGMyYmExNixcbiAgICAgIDB4MTJhMTRkNDMsIDB4MmE2NWM0NTEsIDB4NTA5NDAwMDIsIDB4MTMzYWU0ZGQsXG4gICAgICAweDcxZGZmODllLCAweDEwMzE0ZTU1LCAweDgxYWM3N2Q2LCAweDVmMTExOTliLFxuICAgICAgMHgwNDM1NTZmMSwgMHhkN2EzYzc2YiwgMHgzYzExMTgzYiwgMHg1OTI0YTUwOSxcbiAgICAgIDB4ZjI4ZmU2ZWQsIDB4OTdmMWZiZmEsIDB4OWViYWJmMmMsIDB4MWUxNTNjNmUsXG4gICAgICAweDg2ZTM0NTcwLCAweGVhZTk2ZmIxLCAweDg2MGU1ZTBhLCAweDVhM2UyYWIzLFxuICAgICAgMHg3NzFmZTcxYywgMHg0ZTNkMDZmYSwgMHgyOTY1ZGNiOSwgMHg5OWU3MWQwZixcbiAgICAgIDB4ODAzZTg5ZDYsIDB4NTI2NmM4MjUsIDB4MmU0Y2M5NzgsIDB4OWMxMGIzNmEsXG4gICAgICAweGM2MTUwZWJhLCAweDk0ZTJlYTc4LCAweGE1ZmMzYzUzLCAweDFlMGEyZGY0LFxuICAgICAgMHhmMmY3NGVhNywgMHgzNjFkMmIzZCwgMHgxOTM5MjYwZiwgMHgxOWMyNzk2MCxcbiAgICAgIDB4NTIyM2E3MDgsIDB4ZjcxMzEyYjYsIDB4ZWJhZGZlNmUsIDB4ZWFjMzFmNjYsXG4gICAgICAweGUzYmM0NTk1LCAweGE2N2JjODgzLCAweGIxN2YzN2QxLCAweDAxOGNmZjI4LFxuICAgICAgMHhjMzMyZGRlZiwgMHhiZTZjNWFhNSwgMHg2NTU4MjE4NSwgMHg2OGFiOTgwMixcbiAgICAgIDB4ZWVjZWE1MGYsIDB4ZGIyZjk1M2IsIDB4MmFlZjdkYWQsIDB4NWI2ZTJmODQsXG4gICAgICAweDE1MjFiNjI4LCAweDI5MDc2MTcwLCAweGVjZGQ0Nzc1LCAweDYxOWYxNTEwLFxuICAgICAgMHgxM2NjYTgzMCwgMHhlYjYxYmQ5NiwgMHgwMzM0ZmUxZSwgMHhhYTAzNjNjZixcbiAgICAgIDB4YjU3MzVjOTAsIDB4NGM3MGEyMzksIDB4ZDU5ZTllMGIsIDB4Y2JhYWRlMTQsXG4gICAgICAweGVlY2M4NmJjLCAweDYwNjIyY2E3LCAweDljYWI1Y2FiLCAweGIyZjM4NDZlLFxuICAgICAgMHg2NDhiMWVhZiwgMHgxOWJkZjBjYSwgMHhhMDIzNjliOSwgMHg2NTVhYmI1MCxcbiAgICAgIDB4NDA2ODVhMzIsIDB4M2MyYWI0YjMsIDB4MzE5ZWU5ZDUsIDB4YzAyMWI4ZjcsXG4gICAgICAweDliNTQwYjE5LCAweDg3NWZhMDk5LCAweDk1Zjc5OTdlLCAweDYyM2Q3ZGE4LFxuICAgICAgMHhmODM3ODg5YSwgMHg5N2UzMmQ3NywgMHgxMWVkOTM1ZiwgMHgxNjY4MTI4MSxcbiAgICAgIDB4MGUzNTg4MjksIDB4YzdlNjFmZDYsIDB4OTZkZWRmYTEsIDB4Nzg1OGJhOTksXG4gICAgICAweDU3ZjU4NGE1LCAweDFiMjI3MjYzLCAweDliODNjM2ZmLCAweDFhYzI0Njk2LFxuICAgICAgMHhjZGIzMGFlYiwgMHg1MzJlMzA1NCwgMHg4ZmQ5NDhlNCwgMHg2ZGJjMzEyOCxcbiAgICAgIDB4NThlYmYyZWYsIDB4MzRjNmZmZWEsIDB4ZmUyOGVkNjEsIDB4ZWU3YzNjNzMsXG4gICAgICAweDVkNGExNGQ5LCAweGU4NjRiN2UzLCAweDQyMTA1ZDE0LCAweDIwM2UxM2UwLFxuICAgICAgMHg0NWVlZTJiNiwgMHhhM2FhYWJlYSwgMHhkYjZjNGYxNSwgMHhmYWNiNGZkMCxcbiAgICAgIDB4Yzc0MmY0NDIsIDB4ZWY2YWJiYjUsIDB4NjU0ZjNiMWQsIDB4NDFjZDIxMDUsXG4gICAgICAweGQ4MWU3OTllLCAweDg2ODU0ZGM3LCAweGU0NGI0NzZhLCAweDNkODE2MjUwLFxuICAgICAgMHhjZjYyYTFmMiwgMHg1YjhkMjY0NiwgMHhmYzg4ODNhMCwgMHhjMWM3YjZhMyxcbiAgICAgIDB4N2YxNTI0YzMsIDB4NjljYjc0OTIsIDB4NDc4NDhhMGIsIDB4NTY5MmIyODUsXG4gICAgICAweDA5NWJiZjAwLCAweGFkMTk0ODlkLCAweDE0NjJiMTc0LCAweDIzODIwZTAwLFxuICAgICAgMHg1ODQyOGQyYSwgMHgwYzU1ZjVlYSwgMHgxZGFkZjQzZSwgMHgyMzNmNzA2MSxcbiAgICAgIDB4MzM3MmYwOTIsIDB4OGQ5MzdlNDEsIDB4ZDY1ZmVjZjEsIDB4NmMyMjNiZGIsXG4gICAgICAweDdjZGUzNzU5LCAweGNiZWU3NDYwLCAweDQwODVmMmE3LCAweGNlNzczMjZlLFxuICAgICAgMHhhNjA3ODA4NCwgMHgxOWY4NTA5ZSwgMHhlOGVmZDg1NSwgMHg2MWQ5OTczNSxcbiAgICAgIDB4YTk2OWE3YWEsIDB4YzUwYzA2YzIsIDB4NWEwNGFiZmMsIDB4ODAwYmNhZGMsXG4gICAgICAweDllNDQ3YTJlLCAweGMzNDUzNDg0LCAweGZkZDU2NzA1LCAweDBlMWU5ZWM5LFxuICAgICAgMHhkYjczZGJkMywgMHgxMDU1ODhjZCwgMHg2NzVmZGE3OSwgMHhlMzY3NDM0MCxcbiAgICAgIDB4YzVjNDM0NjUsIDB4NzEzZTM4ZDgsIDB4M2QyOGY4OWUsIDB4ZjE2ZGZmMjAsXG4gICAgICAweDE1M2UyMWU3LCAweDhmYjAzZDRhLCAweGU2ZTM5ZjJiLCAweGRiODNhZGY3XSksXG4gICAgbmV3IFVpbnQzMkFycmF5KFtcbiAgICAgIDB4ZTkzZDVhNjgsIDB4OTQ4MTQwZjcsIDB4ZjY0YzI2MWMsIDB4OTQ2OTI5MzQsXG4gICAgICAweDQxMTUyMGY3LCAweDc2MDJkNGY3LCAweGJjZjQ2YjJlLCAweGQ0YTIwMDY4LFxuICAgICAgMHhkNDA4MjQ3MSwgMHgzMzIwZjQ2YSwgMHg0M2I3ZDRiNywgMHg1MDAwNjFhZixcbiAgICAgIDB4MWUzOWY2MmUsIDB4OTcyNDQ1NDYsIDB4MTQyMTRmNzQsIDB4YmY4Yjg4NDAsXG4gICAgICAweDRkOTVmYzFkLCAweDk2YjU5MWFmLCAweDcwZjRkZGQzLCAweDY2YTAyZjQ1LFxuICAgICAgMHhiZmJjMDllYywgMHgwM2JkOTc4NSwgMHg3ZmFjNmRkMCwgMHgzMWNiODUwNCxcbiAgICAgIDB4OTZlYjI3YjMsIDB4NTVmZDM5NDEsIDB4ZGEyNTQ3ZTYsIDB4YWJjYTBhOWEsXG4gICAgICAweDI4NTA3ODI1LCAweDUzMDQyOWY0LCAweDBhMmM4NmRhLCAweGU5YjY2ZGZiLFxuICAgICAgMHg2OGRjMTQ2MiwgMHhkNzQ4NjkwMCwgMHg2ODBlYzBhNCwgMHgyN2ExOGRlZSxcbiAgICAgIDB4NGYzZmZlYTIsIDB4ZTg4N2FkOGMsIDB4YjU4Y2UwMDYsIDB4N2FmNGQ2YjYsXG4gICAgICAweGFhY2UxZTdjLCAweGQzMzc1ZmVjLCAweGNlNzhhMzk5LCAweDQwNmIyYTQyLFxuICAgICAgMHgyMGZlOWUzNSwgMHhkOWYzODViOSwgMHhlZTM5ZDdhYiwgMHgzYjEyNGU4YixcbiAgICAgIDB4MWRjOWZhZjcsIDB4NGI2ZDE4NTYsIDB4MjZhMzY2MzEsIDB4ZWFlMzk3YjIsXG4gICAgICAweDNhNmVmYTc0LCAweGRkNWI0MzMyLCAweDY4NDFlN2Y3LCAweGNhNzgyMGZiLFxuICAgICAgMHhmYjBhZjU0ZSwgMHhkOGZlYjM5NywgMHg0NTQwNTZhYywgMHhiYTQ4OTUyNyxcbiAgICAgIDB4NTU1MzNhM2EsIDB4MjA4MzhkODcsIDB4ZmU2YmE5YjcsIDB4ZDA5Njk1NGIsXG4gICAgICAweDU1YTg2N2JjLCAweGExMTU5YTU4LCAweGNjYTkyOTYzLCAweDk5ZTFkYjMzLFxuICAgICAgMHhhNjJhNGE1NiwgMHgzZjMxMjVmOSwgMHg1ZWY0N2UxYywgMHg5MDI5MzE3YyxcbiAgICAgIDB4ZmRmOGU4MDIsIDB4MDQyNzJmNzAsIDB4ODBiYjE1NWMsIDB4MDUyODJjZTMsXG4gICAgICAweDk1YzExNTQ4LCAweGU0YzY2ZDIyLCAweDQ4YzExMzNmLCAweGM3MGY4NmRjLFxuICAgICAgMHgwN2Y5YzllZSwgMHg0MTA0MWYwZiwgMHg0MDQ3NzlhNCwgMHg1ZDg4NmUxNyxcbiAgICAgIDB4MzI1ZjUxZWIsIDB4ZDU5YmMwZDEsIDB4ZjJiY2MxOGYsIDB4NDExMTM1NjQsXG4gICAgICAweDI1N2I3ODM0LCAweDYwMmE5YzYwLCAweGRmZjhlOGEzLCAweDFmNjM2YzFiLFxuICAgICAgMHgwZTEyYjRjMiwgMHgwMmUxMzI5ZSwgMHhhZjY2NGZkMSwgMHhjYWQxODExNSxcbiAgICAgIDB4NmIyMzk1ZTAsIDB4MzMzZTkyZTEsIDB4M2IyNDBiNjIsIDB4ZWViZWI5MjIsXG4gICAgICAweDg1YjJhMjBlLCAweGU2YmEwZDk5LCAweGRlNzIwYzhjLCAweDJkYTJmNzI4LFxuICAgICAgMHhkMDEyNzg0NSwgMHg5NWI3OTRmZCwgMHg2NDdkMDg2MiwgMHhlN2NjZjVmMCxcbiAgICAgIDB4NTQ0OWEzNmYsIDB4ODc3ZDQ4ZmEsIDB4YzM5ZGZkMjcsIDB4ZjMzZThkMWUsXG4gICAgICAweDBhNDc2MzQxLCAweDk5MmVmZjc0LCAweDNhNmY2ZWFiLCAweGY0ZjhmZDM3LFxuICAgICAgMHhhODEyZGM2MCwgMHhhMWViZGRmOCwgMHg5OTFiZTE0YywgMHhkYjZlNmIwZCxcbiAgICAgIDB4YzY3YjU1MTAsIDB4NmQ2NzJjMzcsIDB4Mjc2NWQ0M2IsIDB4ZGNkMGU4MDQsXG4gICAgICAweGYxMjkwZGM3LCAweGNjMDBmZmEzLCAweGI1MzkwZjkyLCAweDY5MGZlZDBiLFxuICAgICAgMHg2NjdiOWZmYiwgMHhjZWRiN2Q5YywgMHhhMDkxY2YwYiwgMHhkOTE1NWVhMyxcbiAgICAgIDB4YmIxMzJmODgsIDB4NTE1YmFkMjQsIDB4N2I5NDc5YmYsIDB4NzYzYmQ2ZWIsXG4gICAgICAweDM3MzkyZWIzLCAweGNjMTE1OTc5LCAweDgwMjZlMjk3LCAweGY0MmUzMTJkLFxuICAgICAgMHg2ODQyYWRhNywgMHhjNjZhMmIzYiwgMHgxMjc1NGNjYywgMHg3ODJlZjExYyxcbiAgICAgIDB4NmExMjQyMzcsIDB4Yjc5MjUxZTcsIDB4MDZhMWJiZTYsIDB4NGJmYjYzNTAsXG4gICAgICAweDFhNmIxMDE4LCAweDExY2FlZGZhLCAweDNkMjViZGQ4LCAweGUyZTFjM2M5LFxuICAgICAgMHg0NDQyMTY1OSwgMHgwYTEyMTM4NiwgMHhkOTBjZWM2ZSwgMHhkNWFiZWEyYSxcbiAgICAgIDB4NjRhZjY3NGUsIDB4ZGE4NmE4NWYsIDB4YmViZmU5ODgsIDB4NjRlNGMzZmUsXG4gICAgICAweDlkYmM4MDU3LCAweGYwZjdjMDg2LCAweDYwNzg3YmY4LCAweDYwMDM2MDRkLFxuICAgICAgMHhkMWZkODM0NiwgMHhmNjM4MWZiMCwgMHg3NzQ1YWUwNCwgMHhkNzM2ZmNjYyxcbiAgICAgIDB4ODM0MjZiMzMsIDB4ZjAxZWFiNzEsIDB4YjA4MDQxODcsIDB4M2MwMDVlNWYsXG4gICAgICAweDc3YTA1N2JlLCAweGJkZThhZTI0LCAweDU1NDY0Mjk5LCAweGJmNTgyZTYxLFxuICAgICAgMHg0ZTU4ZjQ4ZiwgMHhmMmRkZmRhMiwgMHhmNDc0ZWYzOCwgMHg4Nzg5YmRjMixcbiAgICAgIDB4NTM2NmY5YzMsIDB4YzhiMzhlNzQsIDB4YjQ3NWYyNTUsIDB4NDZmY2Q5YjksXG4gICAgICAweDdhZWIyNjYxLCAweDhiMWRkZjg0LCAweDg0NmEwZTc5LCAweDkxNWY5NWUyLFxuICAgICAgMHg0NjZlNTk4ZSwgMHgyMGI0NTc3MCwgMHg4Y2Q1NTU5MSwgMHhjOTAyZGU0YyxcbiAgICAgIDB4YjkwYmFjZTEsIDB4YmI4MjA1ZDAsIDB4MTFhODYyNDgsIDB4NzU3NGE5OWUsXG4gICAgICAweGI3N2YxOWI2LCAweGUwYTlkYzA5LCAweDY2MmQwOWExLCAweGM0MzI0NjMzLFxuICAgICAgMHhlODVhMWYwMiwgMHgwOWYwYmU4YywgMHg0YTk5YTAyNSwgMHgxZDZlZmUxMCxcbiAgICAgIDB4MWFiOTNkMWQsIDB4MGJhNWE0ZGYsIDB4YTE4NmYyMGYsIDB4Mjg2OGYxNjksXG4gICAgICAweGRjYjdkYTgzLCAweDU3MzkwNmZlLCAweGExZTJjZTliLCAweDRmY2Q3ZjUyLFxuICAgICAgMHg1MDExNWUwMSwgMHhhNzA2ODNmYSwgMHhhMDAyYjVjNCwgMHgwZGU2ZDAyNyxcbiAgICAgIDB4OWFmODhjMjcsIDB4NzczZjg2NDEsIDB4YzM2MDRjMDYsIDB4NjFhODA2YjUsXG4gICAgICAweGYwMTc3YTI4LCAweGMwZjU4NmUwLCAweDAwNjA1OGFhLCAweDMwZGM3ZDYyLFxuICAgICAgMHgxMWU2OWVkNywgMHgyMzM4ZWE2MywgMHg1M2MyZGQ5NCwgMHhjMmMyMTYzNCxcbiAgICAgIDB4YmJjYmVlNTYsIDB4OTBiY2I2ZGUsIDB4ZWJmYzdkYTEsIDB4Y2U1OTFkNzYsXG4gICAgICAweDZmMDVlNDA5LCAweDRiN2MwMTg4LCAweDM5NzIwYTNkLCAweDdjOTI3YzI0LFxuICAgICAgMHg4NmUzNzI1ZiwgMHg3MjRkOWRiOSwgMHgxYWMxNWJiNCwgMHhkMzllYjhmYyxcbiAgICAgIDB4ZWQ1NDU1NzgsIDB4MDhmY2E1YjUsIDB4ZDgzZDdjZDMsIDB4NGRhZDBmYzQsXG4gICAgICAweDFlNTBlZjVlLCAweGIxNjFlNmY4LCAweGEyODUxNGQ5LCAweDZjNTExMzNjLFxuICAgICAgMHg2ZmQ1YzdlNywgMHg1NmUxNGVjNCwgMHgzNjJhYmZjZSwgMHhkZGM2YzgzNyxcbiAgICAgIDB4ZDc5YTMyMzQsIDB4OTI2MzgyMTIsIDB4NjcwZWZhOGUsIDB4NDA2MDAwZTBdKSxcbiAgICBuZXcgVWludDMyQXJyYXkoW1xuICAgICAgMHgzYTM5Y2UzNywgMHhkM2ZhZjVjZiwgMHhhYmMyNzczNywgMHg1YWM1MmQxYixcbiAgICAgIDB4NWNiMDY3OWUsIDB4NGZhMzM3NDIsIDB4ZDM4MjI3NDAsIDB4OTliYzliYmUsXG4gICAgICAweGQ1MTE4ZTlkLCAweGJmMGY3MzE1LCAweGQ2MmQxYzdlLCAweGM3MDBjNDdiLFxuICAgICAgMHhiNzhjMWI2YiwgMHgyMWExOTA0NSwgMHhiMjZlYjFiZSwgMHg2YTM2NmViNCxcbiAgICAgIDB4NTc0OGFiMmYsIDB4YmM5NDZlNzksIDB4YzZhMzc2ZDIsIDB4NjU0OWMyYzgsXG4gICAgICAweDUzMGZmOGVlLCAweDQ2OGRkZTdkLCAweGQ1NzMwYTFkLCAweDRjZDA0ZGM2LFxuICAgICAgMHgyOTM5YmJkYiwgMHhhOWJhNDY1MCwgMHhhYzk1MjZlOCwgMHhiZTVlZTMwNCxcbiAgICAgIDB4YTFmYWQ1ZjAsIDB4NmEyZDUxOWEsIDB4NjNlZjhjZTIsIDB4OWE4NmVlMjIsXG4gICAgICAweGMwODljMmI4LCAweDQzMjQyZWY2LCAweGE1MWUwM2FhLCAweDljZjJkMGE0LFxuICAgICAgMHg4M2MwNjFiYSwgMHg5YmU5NmE0ZCwgMHg4ZmU1MTU1MCwgMHhiYTY0NWJkNixcbiAgICAgIDB4MjgyNmEyZjksIDB4YTczYTNhZTEsIDB4NGJhOTk1ODYsIDB4ZWY1NTYyZTksXG4gICAgICAweGM3MmZlZmQzLCAweGY3NTJmN2RhLCAweDNmMDQ2ZjY5LCAweDc3ZmEwYTU5LFxuICAgICAgMHg4MGU0YTkxNSwgMHg4N2IwODYwMSwgMHg5YjA5ZTZhZCwgMHgzYjNlZTU5MyxcbiAgICAgIDB4ZTk5MGZkNWEsIDB4OWUzNGQ3OTcsIDB4MmNmMGI3ZDksIDB4MDIyYjhiNTEsXG4gICAgICAweDk2ZDVhYzNhLCAweDAxN2RhNjdkLCAweGQxY2YzZWQ2LCAweDdjN2QyZDI4LFxuICAgICAgMHgxZjlmMjVjZiwgMHhhZGYyYjg5YiwgMHg1YWQ2YjQ3MiwgMHg1YTg4ZjU0YyxcbiAgICAgIDB4ZTAyOWFjNzEsIDB4ZTAxOWE1ZTYsIDB4NDdiMGFjZmQsIDB4ZWQ5M2ZhOWIsXG4gICAgICAweGU4ZDNjNDhkLCAweDI4M2I1N2NjLCAweGY4ZDU2NjI5LCAweDc5MTMyZTI4LFxuICAgICAgMHg3ODVmMDE5MSwgMHhlZDc1NjA1NSwgMHhmNzk2MGU0NCwgMHhlM2QzNWU4YyxcbiAgICAgIDB4MTUwNTZkZDQsIDB4ODhmNDZkYmEsIDB4MDNhMTYxMjUsIDB4MDU2NGYwYmQsXG4gICAgICAweGMzZWI5ZTE1LCAweDNjOTA1N2EyLCAweDk3MjcxYWVjLCAweGE5M2EwNzJhLFxuICAgICAgMHgxYjNmNmQ5YiwgMHgxZTYzMjFmNSwgMHhmNTljNjZmYiwgMHgyNmRjZjMxOSxcbiAgICAgIDB4NzUzM2Q5MjgsIDB4YjE1NWZkZjUsIDB4MDM1NjM0ODIsIDB4OGFiYTNjYmIsXG4gICAgICAweDI4NTE3NzExLCAweGMyMGFkOWY4LCAweGFiY2M1MTY3LCAweGNjYWQ5MjVmLFxuICAgICAgMHg0ZGU4MTc1MSwgMHgzODMwZGM4ZSwgMHgzNzlkNTg2MiwgMHg5MzIwZjk5MSxcbiAgICAgIDB4ZWE3YTkwYzIsIDB4ZmIzZTdiY2UsIDB4NTEyMWNlNjQsIDB4Nzc0ZmJlMzIsXG4gICAgICAweGE4YjZlMzdlLCAweGMzMjkzZDQ2LCAweDQ4ZGU1MzY5LCAweDY0MTNlNjgwLFxuICAgICAgMHhhMmFlMDgxMCwgMHhkZDZkYjIyNCwgMHg2OTg1MmRmZCwgMHgwOTA3MjE2NixcbiAgICAgIDB4YjM5YTQ2MGEsIDB4NjQ0NWMwZGQsIDB4NTg2Y2RlY2YsIDB4MWMyMGM4YWUsXG4gICAgICAweDViYmVmN2RkLCAweDFiNTg4ZDQwLCAweGNjZDIwMTdmLCAweDZiYjRlM2JiLFxuICAgICAgMHhkZGEyNmE3ZSwgMHgzYTU5ZmY0NSwgMHgzZTM1MGE0NCwgMHhiY2I0Y2RkNSxcbiAgICAgIDB4NzJlYWNlYTgsIDB4ZmE2NDg0YmIsIDB4OGQ2NjEyYWUsIDB4YmYzYzZmNDcsXG4gICAgICAweGQyOWJlNDYzLCAweDU0MmY1ZDllLCAweGFlYzI3NzFiLCAweGY2NGU2MzcwLFxuICAgICAgMHg3NDBlMGQ4ZCwgMHhlNzViMTM1NywgMHhmODcyMTY3MSwgMHhhZjUzN2Q1ZCxcbiAgICAgIDB4NDA0MGNiMDgsIDB4NGViNGUyY2MsIDB4MzRkMjQ2NmEsIDB4MDExNWFmODQsXG4gICAgICAweGUxYjAwNDI4LCAweDk1OTgzYTFkLCAweDA2Yjg5ZmI0LCAweGNlNmVhMDQ4LFxuICAgICAgMHg2ZjNmM2I4MiwgMHgzNTIwYWI4MiwgMHgwMTFhMWQ0YiwgMHgyNzcyMjdmOCxcbiAgICAgIDB4NjExNTYwYjEsIDB4ZTc5MzNmZGMsIDB4YmIzYTc5MmIsIDB4MzQ0NTI1YmQsXG4gICAgICAweGEwODgzOWUxLCAweDUxY2U3OTRiLCAweDJmMzJjOWI3LCAweGEwMWZiYWM5LFxuICAgICAgMHhlMDFjYzg3ZSwgMHhiY2M3ZDFmNiwgMHhjZjAxMTFjMywgMHhhMWU4YWFjNyxcbiAgICAgIDB4MWE5MDg3NDksIDB4ZDQ0ZmJkOWEsIDB4ZDBkYWRlY2IsIDB4ZDUwYWRhMzgsXG4gICAgICAweDAzMzljMzJhLCAweGM2OTEzNjY3LCAweDhkZjkzMTdjLCAweGUwYjEyYjRmLFxuICAgICAgMHhmNzllNTliNywgMHg0M2Y1YmIzYSwgMHhmMmQ1MTlmZiwgMHgyN2Q5NDU5YyxcbiAgICAgIDB4YmY5NzIyMmMsIDB4MTVlNmZjMmEsIDB4MGY5MWZjNzEsIDB4OWI5NDE1MjUsXG4gICAgICAweGZhZTU5MzYxLCAweGNlYjY5Y2ViLCAweGMyYTg2NDU5LCAweDEyYmFhOGQxLFxuICAgICAgMHhiNmMxMDc1ZSwgMHhlMzA1NmEwYywgMHgxMGQyNTA2NSwgMHhjYjAzYTQ0MixcbiAgICAgIDB4ZTBlYzZlMGUsIDB4MTY5OGRiM2IsIDB4NGM5OGEwYmUsIDB4MzI3OGU5NjQsXG4gICAgICAweDlmMWY5NTMyLCAweGUwZDM5MmRmLCAweGQzYTAzNDJiLCAweDg5NzFmMjFlLFxuICAgICAgMHgxYjBhNzQ0MSwgMHg0YmEzMzQ4YywgMHhjNWJlNzEyMCwgMHhjMzc2MzJkOCxcbiAgICAgIDB4ZGYzNTlmOGQsIDB4OWI5OTJmMmUsIDB4ZTYwYjZmNDcsIDB4MGZlM2YxMWQsXG4gICAgICAweGU1NGNkYTU0LCAweDFlZGFkODkxLCAweGNlNjI3OWNmLCAweGNkM2U3ZTZmLFxuICAgICAgMHgxNjE4YjE2NiwgMHhmZDJjMWQwNSwgMHg4NDhmZDJjNSwgMHhmNmZiMjI5OSxcbiAgICAgIDB4ZjUyM2YzNTcsIDB4YTYzMjc2MjMsIDB4OTNhODM1MzEsIDB4NTZjY2NkMDIsXG4gICAgICAweGFjZjA4MTYyLCAweDVhNzVlYmI1LCAweDZlMTYzNjk3LCAweDg4ZDI3M2NjLFxuICAgICAgMHhkZTk2NjI5MiwgMHg4MWI5NDlkMCwgMHg0YzUwOTAxYiwgMHg3MWM2NTYxNCxcbiAgICAgIDB4ZTZjNmM3YmQsIDB4MzI3YTE0MGEsIDB4NDVlMWQwMDYsIDB4YzNmMjdiOWEsXG4gICAgICAweGM5YWE1M2ZkLCAweDYyYTgwZjAwLCAweGJiMjViZmUyLCAweDM1YmRkMmY2LFxuICAgICAgMHg3MTEyNjkwNSwgMHhiMjA0MDIyMiwgMHhiNmNiY2Y3YywgMHhjZDc2OWMyYixcbiAgICAgIDB4NTMxMTNlYzAsIDB4MTY0MGUzZDMsIDB4MzhhYmJkNjAsIDB4MjU0N2FkZjAsXG4gICAgICAweGJhMzgyMDljLCAweGY3NDZjZTc2LCAweDc3YWZhMWM1LCAweDIwNzU2MDYwLFxuICAgICAgMHg4NWNiZmU0ZSwgMHg4YWU4OGRkOCwgMHg3YWFhZjliMCwgMHg0Y2Y5YWE3ZSxcbiAgICAgIDB4MTk0OGMyNWMsIDB4MDJmYjhhOGMsIDB4MDFjMzZhZTQsIDB4ZDZlYmUxZjksXG4gICAgICAweDkwZDRmODY5LCAweGE2NWNkZWEwLCAweDNmMDkyNTJkLCAweGMyMDhlNjlmLFxuICAgICAgMHhiNzRlNjEzMiwgMHhjZTc3ZTI1YiwgMHg1NzhmZGZlMywgMHgzYWMzNzJlNl0pXG4gICAgXTtcbiAgdGhpcy5QID0gbmV3IFVpbnQzMkFycmF5KFtcbiAgICAweDI0M2Y2YTg4LCAweDg1YTMwOGQzLCAweDEzMTk4YTJlLCAweDAzNzA3MzQ0LFxuICAgIDB4YTQwOTM4MjIsIDB4Mjk5ZjMxZDAsIDB4MDgyZWZhOTgsIDB4ZWM0ZTZjODksXG4gICAgMHg0NTI4MjFlNiwgMHgzOGQwMTM3NywgMHhiZTU0NjZjZiwgMHgzNGU5MGM2YyxcbiAgICAweGMwYWMyOWI3LCAweGM5N2M1MGRkLCAweDNmODRkNWI1LCAweGI1NDcwOTE3LFxuICAgIDB4OTIxNmQ1ZDksIDB4ODk3OWZiMWJdKTtcbn07XG5cbmZ1bmN0aW9uIEYoUywgeDgsIGkpIHtcbiAgcmV0dXJuICgoKFNbMF1beDhbaSszXV0gK1xuICAgICAgICAgICAgU1sxXVt4OFtpKzJdXSkgXlxuICAgICAgICAgICAgU1syXVt4OFtpKzFdXSkgK1xuICAgICAgICAgICAgU1szXVt4OFtpXV0pO1xufTtcblxuQmxvd2Zpc2gucHJvdG90eXBlLmVuY2lwaGVyID0gZnVuY3Rpb24oeCwgeDgpIHtcbiAgaWYgKHg4ID09PSB1bmRlZmluZWQpIHtcbiAgICB4OCA9IG5ldyBVaW50OEFycmF5KHguYnVmZmVyKTtcbiAgICBpZiAoeC5ieXRlT2Zmc2V0ICE9PSAwKVxuICAgICAgeDggPSB4OC5zdWJhcnJheSh4LmJ5dGVPZmZzZXQpO1xuICB9XG4gIHhbMF0gXj0gdGhpcy5QWzBdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IDE2OyBpICs9IDIpIHtcbiAgICB4WzFdIF49IEYodGhpcy5TLCB4OCwgMCkgXiB0aGlzLlBbaV07XG4gICAgeFswXSBePSBGKHRoaXMuUywgeDgsIDQpIF4gdGhpcy5QW2krMV07XG4gIH1cbiAgdmFyIHQgPSB4WzBdO1xuICB4WzBdID0geFsxXSBeIHRoaXMuUFsxN107XG4gIHhbMV0gPSB0O1xufTtcblxuQmxvd2Zpc2gucHJvdG90eXBlLmRlY2lwaGVyID0gZnVuY3Rpb24oeCkge1xuICB2YXIgeDggPSBuZXcgVWludDhBcnJheSh4LmJ1ZmZlcik7XG4gIGlmICh4LmJ5dGVPZmZzZXQgIT09IDApXG4gICAgeDggPSB4OC5zdWJhcnJheSh4LmJ5dGVPZmZzZXQpO1xuICB4WzBdIF49IHRoaXMuUFsxN107XG4gIGZvciAodmFyIGkgPSAxNjsgaSA+IDA7IGkgLT0gMikge1xuICAgIHhbMV0gXj0gRih0aGlzLlMsIHg4LCAwKSBeIHRoaXMuUFtpXTtcbiAgICB4WzBdIF49IEYodGhpcy5TLCB4OCwgNCkgXiB0aGlzLlBbaS0xXTtcbiAgfVxuICB2YXIgdCA9IHhbMF07XG4gIHhbMF0gPSB4WzFdIF4gdGhpcy5QWzBdO1xuICB4WzFdID0gdDtcbn07XG5cbmZ1bmN0aW9uIHN0cmVhbTJ3b3JkKGRhdGEsIGRhdGFieXRlcyl7XG4gIHZhciBpLCB0ZW1wID0gMDtcbiAgZm9yIChpID0gMDsgaSA8IDQ7IGkrKywgQkxGX0orKykge1xuICAgIGlmIChCTEZfSiA+PSBkYXRhYnl0ZXMpIEJMRl9KID0gMDtcbiAgICB0ZW1wID0gKHRlbXAgPDwgOCkgfCBkYXRhW0JMRl9KXTtcbiAgfVxuICByZXR1cm4gdGVtcDtcbn07XG5cbkJsb3dmaXNoLnByb3RvdHlwZS5leHBhbmQwc3RhdGUgPSBmdW5jdGlvbihrZXksIGtleWJ5dGVzKSB7XG4gIHZhciBkID0gbmV3IFVpbnQzMkFycmF5KDIpLCBpLCBrO1xuICB2YXIgZDggPSBuZXcgVWludDhBcnJheShkLmJ1ZmZlcik7XG5cbiAgZm9yIChpID0gMCwgQkxGX0ogPSAwOyBpIDwgMTg7IGkrKykge1xuICAgIHRoaXMuUFtpXSBePSBzdHJlYW0yd29yZChrZXksIGtleWJ5dGVzKTtcbiAgfVxuICBCTEZfSiA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IDE4OyBpICs9IDIpIHtcbiAgICB0aGlzLmVuY2lwaGVyKGQsIGQ4KTtcbiAgICB0aGlzLlBbaV0gICA9IGRbMF07XG4gICAgdGhpcy5QW2krMV0gPSBkWzFdO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGZvciAoayA9IDA7IGsgPCAyNTY7IGsgKz0gMikge1xuICAgICAgdGhpcy5lbmNpcGhlcihkLCBkOCk7XG4gICAgICB0aGlzLlNbaV1ba10gICA9IGRbMF07XG4gICAgICB0aGlzLlNbaV1baysxXSA9IGRbMV07XG4gICAgfVxuICB9XG59O1xuXG5CbG93ZmlzaC5wcm90b3R5cGUuZXhwYW5kc3RhdGUgPSBmdW5jdGlvbihkYXRhLCBkYXRhYnl0ZXMsIGtleSwga2V5Ynl0ZXMpIHtcbiAgdmFyIGQgPSBuZXcgVWludDMyQXJyYXkoMiksIGksIGs7XG5cbiAgZm9yIChpID0gMCwgQkxGX0ogPSAwOyBpIDwgMTg7IGkrKykge1xuICAgIHRoaXMuUFtpXSBePSBzdHJlYW0yd29yZChrZXksIGtleWJ5dGVzKTtcbiAgfVxuXG4gIGZvciAoaSA9IDAsIEJMRl9KID0gMDsgaSA8IDE4OyBpICs9IDIpIHtcbiAgICBkWzBdIF49IHN0cmVhbTJ3b3JkKGRhdGEsIGRhdGFieXRlcyk7XG4gICAgZFsxXSBePSBzdHJlYW0yd29yZChkYXRhLCBkYXRhYnl0ZXMpO1xuICAgIHRoaXMuZW5jaXBoZXIoZCk7XG4gICAgdGhpcy5QW2ldICAgPSBkWzBdO1xuICAgIHRoaXMuUFtpKzFdID0gZFsxXTtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICBmb3IgKGsgPSAwOyBrIDwgMjU2OyBrICs9IDIpIHtcbiAgICAgIGRbMF0gXj0gc3RyZWFtMndvcmQoZGF0YSwgZGF0YWJ5dGVzKTtcbiAgICAgIGRbMV0gXj0gc3RyZWFtMndvcmQoZGF0YSwgZGF0YWJ5dGVzKTtcbiAgICAgIHRoaXMuZW5jaXBoZXIoZCk7XG4gICAgICB0aGlzLlNbaV1ba10gICA9IGRbMF07XG4gICAgICB0aGlzLlNbaV1baysxXSA9IGRbMV07XG4gICAgfVxuICB9XG4gIEJMRl9KID0gMDtcbn07XG5cbkJsb3dmaXNoLnByb3RvdHlwZS5lbmMgPSBmdW5jdGlvbihkYXRhLCBibG9ja3MpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3M7IGkrKykge1xuICAgIHRoaXMuZW5jaXBoZXIoZGF0YS5zdWJhcnJheShpKjIpKTtcbiAgfVxufTtcblxuQmxvd2Zpc2gucHJvdG90eXBlLmRlYyA9IGZ1bmN0aW9uKGRhdGEsIGJsb2Nrcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrczsgaSsrKSB7XG4gICAgdGhpcy5kZWNpcGhlcihkYXRhLnN1YmFycmF5KGkqMikpO1xuICB9XG59O1xuXG52YXIgQkNSWVBUX0JMT0NLUyA9IDgsXG4gICAgQkNSWVBUX0hBU0hTSVpFID0gMzI7XG5cbmZ1bmN0aW9uIGJjcnlwdF9oYXNoKHNoYTJwYXNzLCBzaGEyc2FsdCwgb3V0KSB7XG4gIHZhciBzdGF0ZSA9IG5ldyBCbG93ZmlzaCgpLFxuICAgICAgY2RhdGEgPSBuZXcgVWludDMyQXJyYXkoQkNSWVBUX0JMT0NLUyksIGksXG4gICAgICBjaXBoZXJ0ZXh0ID0gbmV3IFVpbnQ4QXJyYXkoWzc5LDEyMCwxMjEsOTksMTA0LDExNCwxMTEsMTA5LDk3LDExNiwxMDUsXG4gICAgICAgICAgICA5OSw2NiwxMDgsMTExLDExOSwxMDIsMTA1LDExNSwxMDQsODMsMTE5LDk3LDExNiw2OCwxMjEsMTEwLDk3LDEwOSxcbiAgICAgICAgICAgIDEwNSwxMTYsMTAxXSk7IC8vXCJPeHljaHJvbWF0aWNCbG93ZmlzaFN3YXREeW5hbWl0ZVwiXG5cbiAgc3RhdGUuZXhwYW5kc3RhdGUoc2hhMnNhbHQsIDY0LCBzaGEycGFzcywgNjQpO1xuICBmb3IgKGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuICAgIHN0YXRlLmV4cGFuZDBzdGF0ZShzaGEyc2FsdCwgNjQpO1xuICAgIHN0YXRlLmV4cGFuZDBzdGF0ZShzaGEycGFzcywgNjQpO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IEJDUllQVF9CTE9DS1M7IGkrKylcbiAgICBjZGF0YVtpXSA9IHN0cmVhbTJ3b3JkKGNpcGhlcnRleHQsIGNpcGhlcnRleHQuYnl0ZUxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGkgPCA2NDsgaSsrKVxuICAgIHN0YXRlLmVuYyhjZGF0YSwgY2RhdGEuYnl0ZUxlbmd0aCAvIDgpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBCQ1JZUFRfQkxPQ0tTOyBpKyspIHtcbiAgICBvdXRbNCppKzNdID0gY2RhdGFbaV0gPj4+IDI0O1xuICAgIG91dFs0KmkrMl0gPSBjZGF0YVtpXSA+Pj4gMTY7XG4gICAgb3V0WzQqaSsxXSA9IGNkYXRhW2ldID4+PiA4O1xuICAgIG91dFs0KmkrMF0gPSBjZGF0YVtpXTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYmNyeXB0X3Bia2RmKHBhc3MsIHBhc3NsZW4sIHNhbHQsIHNhbHRsZW4sIGtleSwga2V5bGVuLCByb3VuZHMpIHtcbiAgdmFyIHNoYTJwYXNzID0gbmV3IFVpbnQ4QXJyYXkoNjQpLFxuICAgICAgc2hhMnNhbHQgPSBuZXcgVWludDhBcnJheSg2NCksXG4gICAgICBvdXQgPSBuZXcgVWludDhBcnJheShCQ1JZUFRfSEFTSFNJWkUpLFxuICAgICAgdG1wb3V0ID0gbmV3IFVpbnQ4QXJyYXkoQkNSWVBUX0hBU0hTSVpFKSxcbiAgICAgIGNvdW50c2FsdCA9IG5ldyBVaW50OEFycmF5KHNhbHRsZW4rNCksXG4gICAgICBpLCBqLCBhbXQsIHN0cmlkZSwgZGVzdCwgY291bnQsXG4gICAgICBvcmlna2V5bGVuID0ga2V5bGVuO1xuXG4gIGlmIChyb3VuZHMgPCAxKVxuICAgIHJldHVybiAtMTtcbiAgaWYgKHBhc3NsZW4gPT09IDAgfHwgc2FsdGxlbiA9PT0gMCB8fCBrZXlsZW4gPT09IDAgfHxcbiAgICAgIGtleWxlbiA+IChvdXQuYnl0ZUxlbmd0aCAqIG91dC5ieXRlTGVuZ3RoKSB8fCBzYWx0bGVuID4gKDE8PDIwKSlcbiAgICByZXR1cm4gLTE7XG5cbiAgc3RyaWRlID0gTWF0aC5mbG9vcigoa2V5bGVuICsgb3V0LmJ5dGVMZW5ndGggLSAxKSAvIG91dC5ieXRlTGVuZ3RoKTtcbiAgYW10ID0gTWF0aC5mbG9vcigoa2V5bGVuICsgc3RyaWRlIC0gMSkgLyBzdHJpZGUpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzYWx0bGVuOyBpKyspXG4gICAgY291bnRzYWx0W2ldID0gc2FsdFtpXTtcblxuICBjcnlwdG9faGFzaF9zaGE1MTIoc2hhMnBhc3MsIHBhc3MsIHBhc3NsZW4pO1xuXG4gIGZvciAoY291bnQgPSAxOyBrZXlsZW4gPiAwOyBjb3VudCsrKSB7XG4gICAgY291bnRzYWx0W3NhbHRsZW4rMF0gPSBjb3VudCA+Pj4gMjQ7XG4gICAgY291bnRzYWx0W3NhbHRsZW4rMV0gPSBjb3VudCA+Pj4gMTY7XG4gICAgY291bnRzYWx0W3NhbHRsZW4rMl0gPSBjb3VudCA+Pj4gIDg7XG4gICAgY291bnRzYWx0W3NhbHRsZW4rM10gPSBjb3VudDtcblxuICAgIGNyeXB0b19oYXNoX3NoYTUxMihzaGEyc2FsdCwgY291bnRzYWx0LCBzYWx0bGVuICsgNCk7XG4gICAgYmNyeXB0X2hhc2goc2hhMnBhc3MsIHNoYTJzYWx0LCB0bXBvdXQpO1xuICAgIGZvciAoaSA9IG91dC5ieXRlTGVuZ3RoOyBpLS07KVxuICAgICAgb3V0W2ldID0gdG1wb3V0W2ldO1xuXG4gICAgZm9yIChpID0gMTsgaSA8IHJvdW5kczsgaSsrKSB7XG4gICAgICBjcnlwdG9faGFzaF9zaGE1MTIoc2hhMnNhbHQsIHRtcG91dCwgdG1wb3V0LmJ5dGVMZW5ndGgpO1xuICAgICAgYmNyeXB0X2hhc2goc2hhMnBhc3MsIHNoYTJzYWx0LCB0bXBvdXQpO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG91dC5ieXRlTGVuZ3RoOyBqKyspXG4gICAgICAgIG91dFtqXSBePSB0bXBvdXRbal07XG4gICAgfVxuXG4gICAgYW10ID0gTWF0aC5taW4oYW10LCBrZXlsZW4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBhbXQ7IGkrKykge1xuICAgICAgZGVzdCA9IGkgKiBzdHJpZGUgKyAoY291bnQgLSAxKTtcbiAgICAgIGlmIChkZXN0ID49IG9yaWdrZXlsZW4pXG4gICAgICAgIGJyZWFrO1xuICAgICAga2V5W2Rlc3RdID0gb3V0W2ldO1xuICAgIH1cbiAgICBrZXlsZW4gLT0gaTtcbiAgfVxuXG4gIHJldHVybiAwO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBCTE9DS1M6IEJDUllQVF9CTE9DS1MsXG4gICAgICBIQVNIU0laRTogQkNSWVBUX0hBU0hTSVpFLFxuICAgICAgaGFzaDogYmNyeXB0X2hhc2gsXG4gICAgICBwYmtkZjogYmNyeXB0X3Bia2RmXG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRyZWFkOiByZWFkLFxuXHR3cml0ZTogd3JpdGVcbn07XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciByZmM0MjUzID0gcmVxdWlyZSgnLi9yZmM0MjUzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEtleSA9IHJlcXVpcmUoJy4uL2tleScpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuLi9wcml2YXRlLWtleScpO1xuXG52YXIgc3NocHJpdiA9IHJlcXVpcmUoJy4vc3NoLXByaXZhdGUnKTtcblxuLypKU1NUWUxFRCovXG52YXIgU1NIS0VZX1JFID0gL14oW2EtejAtOS1dKylbIFxcdF0rKFthLXpBLVowLTkrXFwvXStbPV0qKShbIFxcdF0rKFteIFxcdF1bXlxcbl0qW1xcbl0qKT8pPyQvO1xuLypKU1NUWUxFRCovXG52YXIgU1NIS0VZX1JFMiA9IC9eKFthLXowLTktXSspWyBcXHRcXG5dKyhbYS16QS1aMC05K1xcL11bYS16QS1aMC05K1xcLyBcXHRcXG49XSopKFteYS16QS1aMC05K1xcLyBcXHRcXG49XS4qKT8kLztcblxuZnVuY3Rpb24gcmVhZChidWYsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiAoYnVmKSAhPT0gJ3N0cmluZycpIHtcblx0XHRhc3NlcnQuYnVmZmVyKGJ1ZiwgJ2J1ZicpO1xuXHRcdGJ1ZiA9IGJ1Zi50b1N0cmluZygnYXNjaWknKTtcblx0fVxuXG5cdHZhciB0cmltbWVkID0gYnVmLnRyaW0oKS5yZXBsYWNlKC9bXFxcXFxccl0vZywgJycpO1xuXHR2YXIgbSA9IHRyaW1tZWQubWF0Y2goU1NIS0VZX1JFKTtcblx0aWYgKCFtKVxuXHRcdG0gPSB0cmltbWVkLm1hdGNoKFNTSEtFWV9SRTIpO1xuXHRhc3NlcnQub2sobSwgJ2tleSBtdXN0IG1hdGNoIHJlZ2V4Jyk7XG5cblx0dmFyIHR5cGUgPSByZmM0MjUzLmFsZ1RvS2V5VHlwZShtWzFdKTtcblx0dmFyIGtidWYgPSBCdWZmZXIuZnJvbShtWzJdLCAnYmFzZTY0Jyk7XG5cblx0Lypcblx0ICogVGhpcyBpcyBhIGJpdCB0cmlja3kuIElmIHdlIG1hbmFnZWQgdG8gcGFyc2UgdGhlIGtleSBhbmQgbG9jYXRlIHRoZVxuXHQgKiBrZXkgY29tbWVudCB3aXRoIHRoZSByZWdleCwgdGhlbiBkbyBhIG5vbi1wYXJ0aWFsIHJlYWQgYW5kIGFzc2VydFxuXHQgKiB0aGF0IHdlIGhhdmUgY29uc3VtZWQgYWxsIGJ5dGVzLiBJZiB3ZSBjb3VsZG4ndCBsb2NhdGUgdGhlIGtleVxuXHQgKiBjb21tZW50LCB0aG91Z2gsIHRoZXJlIG1heSBiZSB3aGl0ZXNwYWNlIHNoZW5hbmlnYW5zIGdvaW5nIG9uIHRoYXRcblx0ICogaGF2ZSBjb25qb2luZWQgdGhlIGNvbW1lbnQgdG8gdGhlIHJlc3Qgb2YgdGhlIGtleS4gV2UgZG8gYSBwYXJ0aWFsXG5cdCAqIHJlYWQgaW4gdGhpcyBjYXNlIHRvIHRyeSB0byBtYWtlIHRoZSBiZXN0IG91dCBvZiBhIHNvcnJ5IHNpdHVhdGlvbi5cblx0ICovXG5cdHZhciBrZXk7XG5cdHZhciByZXQgPSB7fTtcblx0aWYgKG1bNF0pIHtcblx0XHR0cnkge1xuXHRcdFx0a2V5ID0gcmZjNDI1My5yZWFkKGtidWYpO1xuXG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0bSA9IHRyaW1tZWQubWF0Y2goU1NIS0VZX1JFMik7XG5cdFx0XHRhc3NlcnQub2sobSwgJ2tleSBtdXN0IG1hdGNoIHJlZ2V4Jyk7XG5cdFx0XHRrYnVmID0gQnVmZmVyLmZyb20obVsyXSwgJ2Jhc2U2NCcpO1xuXHRcdFx0a2V5ID0gcmZjNDI1My5yZWFkSW50ZXJuYWwocmV0LCAncHVibGljJywga2J1Zik7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGtleSA9IHJmYzQyNTMucmVhZEludGVybmFsKHJldCwgJ3B1YmxpYycsIGtidWYpO1xuXHR9XG5cblx0YXNzZXJ0LnN0cmljdEVxdWFsKHR5cGUsIGtleS50eXBlKTtcblxuXHRpZiAobVs0XSAmJiBtWzRdLmxlbmd0aCA+IDApIHtcblx0XHRrZXkuY29tbWVudCA9IG1bNF07XG5cblx0fSBlbHNlIGlmIChyZXQuY29uc3VtZWQpIHtcblx0XHQvKlxuXHRcdCAqIE5vdyB0aGUgbWFnaWM6IHRyeWluZyB0byByZWNvdmVyIHRoZSBrZXkgY29tbWVudCB3aGVuIGl0J3Ncblx0XHQgKiBnb3R0ZW4gY29uam9pbmVkIHRvIHRoZSBrZXkgb3Igb3RoZXJ3aXNlIHNoZW5hbmlnYW4nZC5cblx0XHQgKlxuXHRcdCAqIFdvcmsgb3V0IGhvdyBtdWNoIGJhc2U2NCB3ZSB1c2VkLCB0aGVuIGRyb3AgYWxsIG5vbi1iYXNlNjRcblx0XHQgKiBjaGFycyBmcm9tIHRoZSBiZWdpbm5pbmcgdXAgdG8gdGhpcyBwb2ludCBpbiB0aGUgdGhlIHN0cmluZy5cblx0XHQgKiBUaGVuIG9mZnNldCBpbiB0aGlzIGFuZCB0cnkgdG8gbWFrZSB1cCBmb3IgbWlzc2luZyA9IGNoYXJzLlxuXHRcdCAqL1xuXHRcdHZhciBkYXRhID0gbVsyXSArIChtWzNdID8gbVszXSA6ICcnKTtcblx0XHR2YXIgcmVhbE9mZnNldCA9IE1hdGguY2VpbChyZXQuY29uc3VtZWQgLyAzKSAqIDQ7XG5cdFx0ZGF0YSA9IGRhdGEuc2xpY2UoMCwgcmVhbE9mZnNldCAtIDIpLiAvKkpTU1RZTEVEKi9cblx0XHQgICAgcmVwbGFjZSgvW15hLXpBLVowLTkrXFwvPV0vZywgJycpICtcblx0XHQgICAgZGF0YS5zbGljZShyZWFsT2Zmc2V0IC0gMik7XG5cblx0XHR2YXIgcGFkZGluZyA9IHJldC5jb25zdW1lZCAlIDM7XG5cdFx0aWYgKHBhZGRpbmcgPiAwICYmXG5cdFx0ICAgIGRhdGEuc2xpY2UocmVhbE9mZnNldCAtIDEsIHJlYWxPZmZzZXQpICE9PSAnPScpXG5cdFx0XHRyZWFsT2Zmc2V0LS07XG5cdFx0d2hpbGUgKGRhdGEuc2xpY2UocmVhbE9mZnNldCwgcmVhbE9mZnNldCArIDEpID09PSAnPScpXG5cdFx0XHRyZWFsT2Zmc2V0Kys7XG5cblx0XHQvKiBGaW5hbGx5LCBncmFiIHdoYXQgd2UgdGhpbmsgaXMgdGhlIGNvbW1lbnQgJiBjbGVhbiBpdCB1cC4gKi9cblx0XHR2YXIgdHJhaWxlciA9IGRhdGEuc2xpY2UocmVhbE9mZnNldCk7XG5cdFx0dHJhaWxlciA9IHRyYWlsZXIucmVwbGFjZSgvW1xcclxcbl0vZywgJyAnKS5cblx0XHQgICAgcmVwbGFjZSgvXlxccysvLCAnJyk7XG5cdFx0aWYgKHRyYWlsZXIubWF0Y2goL15bYS16QS1aMC05XS8pKVxuXHRcdFx0a2V5LmNvbW1lbnQgPSB0cmFpbGVyO1xuXHR9XG5cblx0cmV0dXJuIChrZXkpO1xufVxuXG5mdW5jdGlvbiB3cml0ZShrZXksIG9wdGlvbnMpIHtcblx0YXNzZXJ0Lm9iamVjdChrZXkpO1xuXHRpZiAoIUtleS5pc0tleShrZXkpKVxuXHRcdHRocm93IChuZXcgRXJyb3IoJ011c3QgYmUgYSBwdWJsaWMga2V5JykpO1xuXG5cdHZhciBwYXJ0cyA9IFtdO1xuXHR2YXIgYWxnID0gcmZjNDI1My5rZXlUeXBlVG9BbGcoa2V5KTtcblx0cGFydHMucHVzaChhbGcpO1xuXG5cdHZhciBidWYgPSByZmM0MjUzLndyaXRlKGtleSk7XG5cdHBhcnRzLnB1c2goYnVmLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG5cblx0aWYgKGtleS5jb21tZW50KVxuXHRcdHBhcnRzLnB1c2goa2V5LmNvbW1lbnQpO1xuXG5cdHJldHVybiAoQnVmZmVyLmZyb20ocGFydHMuam9pbignICcpKSk7XG59XG4iLCIvLyBDb3B5cmlnaHQgMjAxOCBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHJlYWQ6IHJlYWQsXG5cdHdyaXRlOiB3cml0ZVxufTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIHJmYzQyNTMgPSByZXF1aXJlKCcuL3JmYzQyNTMnKTtcbnZhciBLZXkgPSByZXF1aXJlKCcuLi9rZXknKTtcblxudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpO1xuXG5mdW5jdGlvbiByZWFkKGJ1Ziwgb3B0aW9ucykge1xuXHR2YXIgbGluZXMgPSBidWYudG9TdHJpbmcoJ2FzY2lpJykuc3BsaXQoL1tcXHJcXG5dKy8pO1xuXHR2YXIgZm91bmQgPSBmYWxzZTtcblx0dmFyIHBhcnRzO1xuXHR2YXIgc2kgPSAwO1xuXHR3aGlsZSAoc2kgPCBsaW5lcy5sZW5ndGgpIHtcblx0XHRwYXJ0cyA9IHNwbGl0SGVhZGVyKGxpbmVzW3NpKytdKTtcblx0XHRpZiAocGFydHMgJiZcblx0XHQgICAgcGFydHNbMF0udG9Mb3dlckNhc2UoKSA9PT0gJ3B1dHR5LXVzZXIta2V5LWZpbGUtMicpIHtcblx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXHRpZiAoIWZvdW5kKSB7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignTm8gUHVUVFkgZm9ybWF0IGZpcnN0IGxpbmUgZm91bmQnKSk7XG5cdH1cblx0dmFyIGFsZyA9IHBhcnRzWzFdO1xuXG5cdHBhcnRzID0gc3BsaXRIZWFkZXIobGluZXNbc2krK10pO1xuXHRhc3NlcnQuZXF1YWwocGFydHNbMF0udG9Mb3dlckNhc2UoKSwgJ2VuY3J5cHRpb24nKTtcblxuXHRwYXJ0cyA9IHNwbGl0SGVhZGVyKGxpbmVzW3NpKytdKTtcblx0YXNzZXJ0LmVxdWFsKHBhcnRzWzBdLnRvTG93ZXJDYXNlKCksICdjb21tZW50Jyk7XG5cdHZhciBjb21tZW50ID0gcGFydHNbMV07XG5cblx0cGFydHMgPSBzcGxpdEhlYWRlcihsaW5lc1tzaSsrXSk7XG5cdGFzc2VydC5lcXVhbChwYXJ0c1swXS50b0xvd2VyQ2FzZSgpLCAncHVibGljLWxpbmVzJyk7XG5cdHZhciBwdWJsaWNMaW5lcyA9IHBhcnNlSW50KHBhcnRzWzFdLCAxMCk7XG5cdGlmICghaXNGaW5pdGUocHVibGljTGluZXMpIHx8IHB1YmxpY0xpbmVzIDwgMCB8fFxuXHQgICAgcHVibGljTGluZXMgPiBsaW5lcy5sZW5ndGgpIHtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdJbnZhbGlkIHB1YmxpYy1saW5lcyBjb3VudCcpKTtcblx0fVxuXG5cdHZhciBwdWJsaWNCdWYgPSBCdWZmZXIuZnJvbShcblx0ICAgIGxpbmVzLnNsaWNlKHNpLCBzaSArIHB1YmxpY0xpbmVzKS5qb2luKCcnKSwgJ2Jhc2U2NCcpO1xuXHR2YXIga2V5VHlwZSA9IHJmYzQyNTMuYWxnVG9LZXlUeXBlKGFsZyk7XG5cdHZhciBrZXkgPSByZmM0MjUzLnJlYWQocHVibGljQnVmKTtcblx0aWYgKGtleS50eXBlICE9PSBrZXlUeXBlKSB7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignT3V0ZXIga2V5IGFsZ29yaXRobSBtaXNtYXRjaCcpKTtcblx0fVxuXHRrZXkuY29tbWVudCA9IGNvbW1lbnQ7XG5cdHJldHVybiAoa2V5KTtcbn1cblxuZnVuY3Rpb24gc3BsaXRIZWFkZXIobGluZSkge1xuXHR2YXIgaWR4ID0gbGluZS5pbmRleE9mKCc6Jyk7XG5cdGlmIChpZHggPT09IC0xKVxuXHRcdHJldHVybiAobnVsbCk7XG5cdHZhciBoZWFkZXIgPSBsaW5lLnNsaWNlKDAsIGlkeCk7XG5cdCsraWR4O1xuXHR3aGlsZSAobGluZVtpZHhdID09PSAnICcpXG5cdFx0KytpZHg7XG5cdHZhciByZXN0ID0gbGluZS5zbGljZShpZHgpO1xuXHRyZXR1cm4gKFtoZWFkZXIsIHJlc3RdKTtcbn1cblxuZnVuY3Rpb24gd3JpdGUoa2V5LCBvcHRpb25zKSB7XG5cdGFzc2VydC5vYmplY3Qoa2V5KTtcblx0aWYgKCFLZXkuaXNLZXkoa2V5KSlcblx0XHR0aHJvdyAobmV3IEVycm9yKCdNdXN0IGJlIGEgcHVibGljIGtleScpKTtcblxuXHR2YXIgYWxnID0gcmZjNDI1My5rZXlUeXBlVG9BbGcoa2V5KTtcblx0dmFyIGJ1ZiA9IHJmYzQyNTMud3JpdGUoa2V5KTtcblx0dmFyIGNvbW1lbnQgPSBrZXkuY29tbWVudCB8fCAnJztcblxuXHR2YXIgYjY0ID0gYnVmLnRvU3RyaW5nKCdiYXNlNjQnKTtcblx0dmFyIGxpbmVzID0gd3JhcChiNjQsIDY0KTtcblxuXHRsaW5lcy51bnNoaWZ0KCdQdWJsaWMtTGluZXM6ICcgKyBsaW5lcy5sZW5ndGgpO1xuXHRsaW5lcy51bnNoaWZ0KCdDb21tZW50OiAnICsgY29tbWVudCk7XG5cdGxpbmVzLnVuc2hpZnQoJ0VuY3J5cHRpb246IG5vbmUnKTtcblx0bGluZXMudW5zaGlmdCgnUHVUVFktVXNlci1LZXktRmlsZS0yOiAnICsgYWxnKTtcblxuXHRyZXR1cm4gKEJ1ZmZlci5mcm9tKGxpbmVzLmpvaW4oJ1xcbicpICsgJ1xcbicpKTtcbn1cblxuZnVuY3Rpb24gd3JhcCh0eHQsIGxlbikge1xuXHR2YXIgbGluZXMgPSBbXTtcblx0dmFyIHBvcyA9IDA7XG5cdHdoaWxlIChwb3MgPCB0eHQubGVuZ3RoKSB7XG5cdFx0bGluZXMucHVzaCh0eHQuc2xpY2UocG9zLCBwb3MgKyA2NCkpO1xuXHRcdHBvcyArPSA2NDtcblx0fVxuXHRyZXR1cm4gKGxpbmVzKTtcbn1cbiIsIi8vIENvcHlyaWdodCAyMDE3IEpveWVudCwgSW5jLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0cmVhZDogcmVhZCxcblx0dmVyaWZ5OiB2ZXJpZnksXG5cdHNpZ246IHNpZ24sXG5cdHNpZ25Bc3luYzogc2lnbkFzeW5jLFxuXHR3cml0ZTogd3JpdGVcbn07XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuLi9hbGdzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEtleSA9IHJlcXVpcmUoJy4uL2tleScpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuLi9wcml2YXRlLWtleScpO1xudmFyIHBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7XG52YXIgSWRlbnRpdHkgPSByZXF1aXJlKCcuLi9pZGVudGl0eScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4uL3NpZ25hdHVyZScpO1xudmFyIENlcnRpZmljYXRlID0gcmVxdWlyZSgnLi4vY2VydGlmaWNhdGUnKTtcbnZhciBwa2NzOCA9IHJlcXVpcmUoJy4vcGtjczgnKTtcblxuLypcbiAqIFRoaXMgZmlsZSBpcyBiYXNlZCBvbiBSRkM1MjgwIChYLjUwOSkuXG4gKi9cblxuLyogSGVscGVyIHRvIHJlYWQgaW4gYSBzaW5nbGUgbXBpbnQgKi9cbmZ1bmN0aW9uIHJlYWRNUEludChkZXIsIG5tKSB7XG5cdGFzc2VydC5zdHJpY3RFcXVhbChkZXIucGVlaygpLCBhc24xLkJlci5JbnRlZ2VyLFxuXHQgICAgbm0gKyAnIGlzIG5vdCBhbiBJbnRlZ2VyJyk7XG5cdHJldHVybiAodXRpbHMubXBOb3JtYWxpemUoZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuSW50ZWdlciwgdHJ1ZSkpKTtcbn1cblxuZnVuY3Rpb24gdmVyaWZ5KGNlcnQsIGtleSkge1xuXHR2YXIgc2lnID0gY2VydC5zaWduYXR1cmVzLng1MDk7XG5cdGFzc2VydC5vYmplY3Qoc2lnLCAneDUwOSBzaWduYXR1cmUnKTtcblxuXHR2YXIgYWxnUGFydHMgPSBzaWcuYWxnby5zcGxpdCgnLScpO1xuXHRpZiAoYWxnUGFydHNbMF0gIT09IGtleS50eXBlKVxuXHRcdHJldHVybiAoZmFsc2UpO1xuXG5cdHZhciBibG9iID0gc2lnLmNhY2hlO1xuXHRpZiAoYmxvYiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIGRlciA9IG5ldyBhc24xLkJlcldyaXRlcigpO1xuXHRcdHdyaXRlVEJTQ2VydChjZXJ0LCBkZXIpO1xuXHRcdGJsb2IgPSBkZXIuYnVmZmVyO1xuXHR9XG5cblx0dmFyIHZlcmlmaWVyID0ga2V5LmNyZWF0ZVZlcmlmeShhbGdQYXJ0c1sxXSk7XG5cdHZlcmlmaWVyLndyaXRlKGJsb2IpO1xuXHRyZXR1cm4gKHZlcmlmaWVyLnZlcmlmeShzaWcuc2lnbmF0dXJlKSk7XG59XG5cbmZ1bmN0aW9uIExvY2FsKGkpIHtcblx0cmV0dXJuIChhc24xLkJlci5Db250ZXh0IHwgYXNuMS5CZXIuQ29uc3RydWN0b3IgfCBpKTtcbn1cblxuZnVuY3Rpb24gQ29udGV4dChpKSB7XG5cdHJldHVybiAoYXNuMS5CZXIuQ29udGV4dCB8IGkpO1xufVxuXG52YXIgU0lHTl9BTEdTID0ge1xuXHQncnNhLW1kNSc6ICcxLjIuODQwLjExMzU0OS4xLjEuNCcsXG5cdCdyc2Etc2hhMSc6ICcxLjIuODQwLjExMzU0OS4xLjEuNScsXG5cdCdyc2Etc2hhMjU2JzogJzEuMi44NDAuMTEzNTQ5LjEuMS4xMScsXG5cdCdyc2Etc2hhMzg0JzogJzEuMi44NDAuMTEzNTQ5LjEuMS4xMicsXG5cdCdyc2Etc2hhNTEyJzogJzEuMi44NDAuMTEzNTQ5LjEuMS4xMycsXG5cdCdkc2Etc2hhMSc6ICcxLjIuODQwLjEwMDQwLjQuMycsXG5cdCdkc2Etc2hhMjU2JzogJzIuMTYuODQwLjEuMTAxLjMuNC4zLjInLFxuXHQnZWNkc2Etc2hhMSc6ICcxLjIuODQwLjEwMDQ1LjQuMScsXG5cdCdlY2RzYS1zaGEyNTYnOiAnMS4yLjg0MC4xMDA0NS40LjMuMicsXG5cdCdlY2RzYS1zaGEzODQnOiAnMS4yLjg0MC4xMDA0NS40LjMuMycsXG5cdCdlY2RzYS1zaGE1MTInOiAnMS4yLjg0MC4xMDA0NS40LjMuNCcsXG5cdCdlZDI1NTE5LXNoYTUxMic6ICcxLjMuMTAxLjExMidcbn07XG5PYmplY3Qua2V5cyhTSUdOX0FMR1MpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0U0lHTl9BTEdTW1NJR05fQUxHU1trXV0gPSBrO1xufSk7XG5TSUdOX0FMR1NbJzEuMy4xNC4zLjIuMyddID0gJ3JzYS1tZDUnO1xuU0lHTl9BTEdTWycxLjMuMTQuMy4yLjI5J10gPSAncnNhLXNoYTEnO1xuXG52YXIgRVhUUyA9IHtcblx0J2lzc3VlcktleUlkJzogJzIuNS4yOS4zNScsXG5cdCdhbHROYW1lJzogJzIuNS4yOS4xNycsXG5cdCdiYXNpY0NvbnN0cmFpbnRzJzogJzIuNS4yOS4xOScsXG5cdCdrZXlVc2FnZSc6ICcyLjUuMjkuMTUnLFxuXHQnZXh0S2V5VXNhZ2UnOiAnMi41LjI5LjM3J1xufTtcblxuZnVuY3Rpb24gcmVhZChidWYsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiAoYnVmKSA9PT0gJ3N0cmluZycpIHtcblx0XHRidWYgPSBCdWZmZXIuZnJvbShidWYsICdiaW5hcnknKTtcblx0fVxuXHRhc3NlcnQuYnVmZmVyKGJ1ZiwgJ2J1ZicpO1xuXG5cdHZhciBkZXIgPSBuZXcgYXNuMS5CZXJSZWFkZXIoYnVmKTtcblxuXHRkZXIucmVhZFNlcXVlbmNlKCk7XG5cdGlmIChNYXRoLmFicyhkZXIubGVuZ3RoIC0gZGVyLnJlbWFpbikgPiAxKSB7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignREVSIHNlcXVlbmNlIGRvZXMgbm90IGNvbnRhaW4gd2hvbGUgYnl0ZSAnICtcblx0XHQgICAgJ3N0cmVhbScpKTtcblx0fVxuXG5cdHZhciB0YnNTdGFydCA9IGRlci5vZmZzZXQ7XG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0dmFyIHNpZ09mZnNldCA9IGRlci5vZmZzZXQgKyBkZXIubGVuZ3RoO1xuXHR2YXIgdGJzRW5kID0gc2lnT2Zmc2V0O1xuXG5cdGlmIChkZXIucGVlaygpID09PSBMb2NhbCgwKSkge1xuXHRcdGRlci5yZWFkU2VxdWVuY2UoTG9jYWwoMCkpO1xuXHRcdHZhciB2ZXJzaW9uID0gZGVyLnJlYWRJbnQoKTtcblx0XHRhc3NlcnQub2sodmVyc2lvbiA8PSAzLFxuXHRcdCAgICAnb25seSB4LjUwOSB2ZXJzaW9ucyB1cCB0byB2MyBzdXBwb3J0ZWQnKTtcblx0fVxuXG5cdHZhciBjZXJ0ID0ge307XG5cdGNlcnQuc2lnbmF0dXJlcyA9IHt9O1xuXHR2YXIgc2lnID0gKGNlcnQuc2lnbmF0dXJlcy54NTA5ID0ge30pO1xuXHRzaWcuZXh0cmFzID0ge307XG5cblx0Y2VydC5zZXJpYWwgPSByZWFkTVBJbnQoZGVyLCAnc2VyaWFsJyk7XG5cblx0ZGVyLnJlYWRTZXF1ZW5jZSgpO1xuXHR2YXIgYWZ0ZXIgPSBkZXIub2Zmc2V0ICsgZGVyLmxlbmd0aDtcblx0dmFyIGNlcnRBbGdPaWQgPSBkZXIucmVhZE9JRCgpO1xuXHR2YXIgY2VydEFsZyA9IFNJR05fQUxHU1tjZXJ0QWxnT2lkXTtcblx0aWYgKGNlcnRBbGcgPT09IHVuZGVmaW5lZClcblx0XHR0aHJvdyAobmV3IEVycm9yKCd1bmtub3duIHNpZ25hdHVyZSBhbGdvcml0aG0gJyArIGNlcnRBbGdPaWQpKTtcblxuXHRkZXIuX29mZnNldCA9IGFmdGVyO1xuXHRjZXJ0Lmlzc3VlciA9IElkZW50aXR5LnBhcnNlQXNuMShkZXIpO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0Y2VydC52YWxpZEZyb20gPSByZWFkRGF0ZShkZXIpO1xuXHRjZXJ0LnZhbGlkVW50aWwgPSByZWFkRGF0ZShkZXIpO1xuXG5cdGNlcnQuc3ViamVjdHMgPSBbSWRlbnRpdHkucGFyc2VBc24xKGRlcildO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0YWZ0ZXIgPSBkZXIub2Zmc2V0ICsgZGVyLmxlbmd0aDtcblx0Y2VydC5zdWJqZWN0S2V5ID0gcGtjczgucmVhZFBrY3M4KHVuZGVmaW5lZCwgJ3B1YmxpYycsIGRlcik7XG5cdGRlci5fb2Zmc2V0ID0gYWZ0ZXI7XG5cblx0LyogaXNzdWVyVW5pcXVlSUQgKi9cblx0aWYgKGRlci5wZWVrKCkgPT09IExvY2FsKDEpKSB7XG5cdFx0ZGVyLnJlYWRTZXF1ZW5jZShMb2NhbCgxKSk7XG5cdFx0c2lnLmV4dHJhcy5pc3N1ZXJVbmlxdWVJRCA9XG5cdFx0ICAgIGJ1Zi5zbGljZShkZXIub2Zmc2V0LCBkZXIub2Zmc2V0ICsgZGVyLmxlbmd0aCk7XG5cdFx0ZGVyLl9vZmZzZXQgKz0gZGVyLmxlbmd0aDtcblx0fVxuXG5cdC8qIHN1YmplY3RVbmlxdWVJRCAqL1xuXHRpZiAoZGVyLnBlZWsoKSA9PT0gTG9jYWwoMikpIHtcblx0XHRkZXIucmVhZFNlcXVlbmNlKExvY2FsKDIpKTtcblx0XHRzaWcuZXh0cmFzLnN1YmplY3RVbmlxdWVJRCA9XG5cdFx0ICAgIGJ1Zi5zbGljZShkZXIub2Zmc2V0LCBkZXIub2Zmc2V0ICsgZGVyLmxlbmd0aCk7XG5cdFx0ZGVyLl9vZmZzZXQgKz0gZGVyLmxlbmd0aDtcblx0fVxuXG5cdC8qIGV4dGVuc2lvbnMgKi9cblx0aWYgKGRlci5wZWVrKCkgPT09IExvY2FsKDMpKSB7XG5cdFx0ZGVyLnJlYWRTZXF1ZW5jZShMb2NhbCgzKSk7XG5cdFx0dmFyIGV4dEVuZCA9IGRlci5vZmZzZXQgKyBkZXIubGVuZ3RoO1xuXHRcdGRlci5yZWFkU2VxdWVuY2UoKTtcblxuXHRcdHdoaWxlIChkZXIub2Zmc2V0IDwgZXh0RW5kKVxuXHRcdFx0cmVhZEV4dGVuc2lvbihjZXJ0LCBidWYsIGRlcik7XG5cblx0XHRhc3NlcnQuc3RyaWN0RXF1YWwoZGVyLm9mZnNldCwgZXh0RW5kKTtcblx0fVxuXG5cdGFzc2VydC5zdHJpY3RFcXVhbChkZXIub2Zmc2V0LCBzaWdPZmZzZXQpO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0YWZ0ZXIgPSBkZXIub2Zmc2V0ICsgZGVyLmxlbmd0aDtcblx0dmFyIHNpZ0FsZ09pZCA9IGRlci5yZWFkT0lEKCk7XG5cdHZhciBzaWdBbGcgPSBTSUdOX0FMR1Nbc2lnQWxnT2lkXTtcblx0aWYgKHNpZ0FsZyA9PT0gdW5kZWZpbmVkKVxuXHRcdHRocm93IChuZXcgRXJyb3IoJ3Vua25vd24gc2lnbmF0dXJlIGFsZ29yaXRobSAnICsgc2lnQWxnT2lkKSk7XG5cdGRlci5fb2Zmc2V0ID0gYWZ0ZXI7XG5cblx0dmFyIHNpZ0RhdGEgPSBkZXIucmVhZFN0cmluZyhhc24xLkJlci5CaXRTdHJpbmcsIHRydWUpO1xuXHRpZiAoc2lnRGF0YVswXSA9PT0gMClcblx0XHRzaWdEYXRhID0gc2lnRGF0YS5zbGljZSgxKTtcblx0dmFyIGFsZ1BhcnRzID0gc2lnQWxnLnNwbGl0KCctJyk7XG5cblx0c2lnLnNpZ25hdHVyZSA9IFNpZ25hdHVyZS5wYXJzZShzaWdEYXRhLCBhbGdQYXJ0c1swXSwgJ2FzbjEnKTtcblx0c2lnLnNpZ25hdHVyZS5oYXNoQWxnb3JpdGhtID0gYWxnUGFydHNbMV07XG5cdHNpZy5hbGdvID0gc2lnQWxnO1xuXHRzaWcuY2FjaGUgPSBidWYuc2xpY2UodGJzU3RhcnQsIHRic0VuZCk7XG5cblx0cmV0dXJuIChuZXcgQ2VydGlmaWNhdGUoY2VydCkpO1xufVxuXG5mdW5jdGlvbiByZWFkRGF0ZShkZXIpIHtcblx0aWYgKGRlci5wZWVrKCkgPT09IGFzbjEuQmVyLlVUQ1RpbWUpIHtcblx0XHRyZXR1cm4gKHV0Y1RpbWVUb0RhdGUoZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuVVRDVGltZSkpKTtcblx0fSBlbHNlIGlmIChkZXIucGVlaygpID09PSBhc24xLkJlci5HZW5lcmFsaXplZFRpbWUpIHtcblx0XHRyZXR1cm4gKGdUaW1lVG9EYXRlKGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkdlbmVyYWxpemVkVGltZSkpKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdVbnN1cHBvcnRlZCBkYXRlIGZvcm1hdCcpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB3cml0ZURhdGUoZGVyLCBkYXRlKSB7XG5cdGlmIChkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPj0gMjA1MCB8fCBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPCAxOTUwKSB7XG5cdFx0ZGVyLndyaXRlU3RyaW5nKGRhdGVUb0dUaW1lKGRhdGUpLCBhc24xLkJlci5HZW5lcmFsaXplZFRpbWUpO1xuXHR9IGVsc2Uge1xuXHRcdGRlci53cml0ZVN0cmluZyhkYXRlVG9VVENUaW1lKGRhdGUpLCBhc24xLkJlci5VVENUaW1lKTtcblx0fVxufVxuXG4vKiBSRkM1MjgwLCBzZWN0aW9uIDQuMi4xLjYgKEdlbmVyYWxOYW1lIHR5cGUpICovXG52YXIgQUxUTkFNRSA9IHtcblx0T3RoZXJOYW1lOiBMb2NhbCgwKSxcblx0UkZDODIyTmFtZTogQ29udGV4dCgxKSxcblx0RE5TTmFtZTogQ29udGV4dCgyKSxcblx0WDQwMEFkZHJlc3M6IExvY2FsKDMpLFxuXHREaXJlY3RvcnlOYW1lOiBMb2NhbCg0KSxcblx0RURJUGFydHlOYW1lOiBMb2NhbCg1KSxcblx0VVJJOiBDb250ZXh0KDYpLFxuXHRJUEFkZHJlc3M6IENvbnRleHQoNyksXG5cdE9JRDogQ29udGV4dCg4KVxufTtcblxuLyogUkZDNTI4MCwgc2VjdGlvbiA0LjIuMS4xMiAoS2V5UHVycG9zZUlkKSAqL1xudmFyIEVYVFBVUlBPU0UgPSB7XG5cdCdzZXJ2ZXJBdXRoJzogJzEuMy42LjEuNS41LjcuMy4xJyxcblx0J2NsaWVudEF1dGgnOiAnMS4zLjYuMS41LjUuNy4zLjInLFxuXHQnY29kZVNpZ25pbmcnOiAnMS4zLjYuMS41LjUuNy4zLjMnLFxuXG5cdC8qIFNlZSBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L29pZC1kb2NzL2Jsb2IvbWFzdGVyL3Jvb3QubWQgKi9cblx0J2pveWVudERvY2tlcic6ICcxLjMuNi4xLjQuMS4zODY3OC4xLjQuMScsXG5cdCdqb3llbnRDbW9uJzogJzEuMy42LjEuNC4xLjM4Njc4LjEuNC4yJ1xufTtcbnZhciBFWFRQVVJQT1NFX1JFViA9IHt9O1xuT2JqZWN0LmtleXMoRVhUUFVSUE9TRSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuXHRFWFRQVVJQT1NFX1JFVltFWFRQVVJQT1NFW2tdXSA9IGs7XG59KTtcblxudmFyIEtFWVVTRUJJVFMgPSBbXG5cdCdzaWduYXR1cmUnLCAnaWRlbnRpdHknLCAna2V5RW5jcnlwdGlvbicsXG5cdCdlbmNyeXB0aW9uJywgJ2tleUFncmVlbWVudCcsICdjYScsICdjcmwnXG5dO1xuXG5mdW5jdGlvbiByZWFkRXh0ZW5zaW9uKGNlcnQsIGJ1ZiwgZGVyKSB7XG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0dmFyIGFmdGVyID0gZGVyLm9mZnNldCArIGRlci5sZW5ndGg7XG5cdHZhciBleHRJZCA9IGRlci5yZWFkT0lEKCk7XG5cdHZhciBpZDtcblx0dmFyIHNpZyA9IGNlcnQuc2lnbmF0dXJlcy54NTA5O1xuXHRpZiAoIXNpZy5leHRyYXMuZXh0cylcblx0XHRzaWcuZXh0cmFzLmV4dHMgPSBbXTtcblxuXHR2YXIgY3JpdGljYWw7XG5cdGlmIChkZXIucGVlaygpID09PSBhc24xLkJlci5Cb29sZWFuKVxuXHRcdGNyaXRpY2FsID0gZGVyLnJlYWRCb29sZWFuKCk7XG5cblx0c3dpdGNoIChleHRJZCkge1xuXHRjYXNlIChFWFRTLmJhc2ljQ29uc3RyYWludHMpOlxuXHRcdGRlci5yZWFkU2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHRcdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0XHR2YXIgYmNFbmQgPSBkZXIub2Zmc2V0ICsgZGVyLmxlbmd0aDtcblx0XHR2YXIgY2EgPSBmYWxzZTtcblx0XHRpZiAoZGVyLnBlZWsoKSA9PT0gYXNuMS5CZXIuQm9vbGVhbilcblx0XHRcdGNhID0gZGVyLnJlYWRCb29sZWFuKCk7XG5cdFx0aWYgKGNlcnQucHVycG9zZXMgPT09IHVuZGVmaW5lZClcblx0XHRcdGNlcnQucHVycG9zZXMgPSBbXTtcblx0XHRpZiAoY2EgPT09IHRydWUpXG5cdFx0XHRjZXJ0LnB1cnBvc2VzLnB1c2goJ2NhJyk7XG5cdFx0dmFyIGJjID0geyBvaWQ6IGV4dElkLCBjcml0aWNhbDogY3JpdGljYWwgfTtcblx0XHRpZiAoZGVyLm9mZnNldCA8IGJjRW5kICYmIGRlci5wZWVrKCkgPT09IGFzbjEuQmVyLkludGVnZXIpXG5cdFx0XHRiYy5wYXRoTGVuID0gZGVyLnJlYWRJbnQoKTtcblx0XHRzaWcuZXh0cmFzLmV4dHMucHVzaChiYyk7XG5cdFx0YnJlYWs7XG5cdGNhc2UgKEVYVFMuZXh0S2V5VXNhZ2UpOlxuXHRcdGRlci5yZWFkU2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHRcdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0XHRpZiAoY2VydC5wdXJwb3NlcyA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0Y2VydC5wdXJwb3NlcyA9IFtdO1xuXHRcdHZhciBla0VuZCA9IGRlci5vZmZzZXQgKyBkZXIubGVuZ3RoO1xuXHRcdHdoaWxlIChkZXIub2Zmc2V0IDwgZWtFbmQpIHtcblx0XHRcdHZhciBvaWQgPSBkZXIucmVhZE9JRCgpO1xuXHRcdFx0Y2VydC5wdXJwb3Nlcy5wdXNoKEVYVFBVUlBPU0VfUkVWW29pZF0gfHwgb2lkKTtcblx0XHR9XG5cdFx0Lypcblx0XHQgKiBUaGlzIGlzIGEgYml0IG9mIGEgaGFjazogaW4gdGhlIGNhc2Ugd2hlcmUgd2UgaGF2ZSBhIGNlcnRcblx0XHQgKiB0aGF0J3Mgb25seSBhbGxvd2VkIHRvIGRvIHNlcnZlckF1dGggb3IgY2xpZW50QXV0aCAoYW5kIG5vdFxuXHRcdCAqIHRoZSBvdGhlciksIHdlIHdhbnQgdG8gbWFrZSBzdXJlIGFsbCBvdXIgU3ViamVjdHMgYXJlIG9mXG5cdFx0ICogdGhlIHJpZ2h0IHR5cGUuIEJ1dCB3ZSBhbHJlYWR5IHBhcnNlZCBvdXIgU3ViamVjdHMgYW5kXG5cdFx0ICogZGVjaWRlZCBpZiB0aGV5IHdlcmUgaG9zdHMgb3IgdXNlcnMgZWFybGllciAoc2luY2UgaXQgYXBwZWFyc1xuXHRcdCAqIGZpcnN0IGluIHRoZSBjZXJ0KS5cblx0XHQgKlxuXHRcdCAqIFNvIHdlIGdvIHRocm91Z2ggYW5kIG11dGF0ZSB0aGVtIGludG8gdGhlIHJpZ2h0IGtpbmQgaGVyZSBpZlxuXHRcdCAqIGl0IGRvZXNuJ3QgbWF0Y2guIFRoaXMgbWlnaHQgbm90IGJlIGh1Z2VseSBiZW5lZmljaWFsLCBhcyBpdFxuXHRcdCAqIHNlZW1zIHRoYXQgc2luZ2xlLXB1cnBvc2UgY2VydHMgYXJlIG5vdCBvZnRlbiBzZWVuIGluIHRoZVxuXHRcdCAqIHdpbGQuXG5cdFx0ICovXG5cdFx0aWYgKGNlcnQucHVycG9zZXMuaW5kZXhPZignc2VydmVyQXV0aCcpICE9PSAtMSAmJlxuXHRcdCAgICBjZXJ0LnB1cnBvc2VzLmluZGV4T2YoJ2NsaWVudEF1dGgnKSA9PT0gLTEpIHtcblx0XHRcdGNlcnQuc3ViamVjdHMuZm9yRWFjaChmdW5jdGlvbiAoaWRlKSB7XG5cdFx0XHRcdGlmIChpZGUudHlwZSAhPT0gJ2hvc3QnKSB7XG5cdFx0XHRcdFx0aWRlLnR5cGUgPSAnaG9zdCc7XG5cdFx0XHRcdFx0aWRlLmhvc3RuYW1lID0gaWRlLnVpZCB8fFxuXHRcdFx0XHRcdCAgICBpZGUuZW1haWwgfHxcblx0XHRcdFx0XHQgICAgaWRlLmNvbXBvbmVudHNbMF0udmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoY2VydC5wdXJwb3Nlcy5pbmRleE9mKCdjbGllbnRBdXRoJykgIT09IC0xICYmXG5cdFx0ICAgIGNlcnQucHVycG9zZXMuaW5kZXhPZignc2VydmVyQXV0aCcpID09PSAtMSkge1xuXHRcdFx0Y2VydC5zdWJqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChpZGUpIHtcblx0XHRcdFx0aWYgKGlkZS50eXBlICE9PSAndXNlcicpIHtcblx0XHRcdFx0XHRpZGUudHlwZSA9ICd1c2VyJztcblx0XHRcdFx0XHRpZGUudWlkID0gaWRlLmhvc3RuYW1lIHx8XG5cdFx0XHRcdFx0ICAgIGlkZS5lbWFpbCB8fFxuXHRcdFx0XHRcdCAgICBpZGUuY29tcG9uZW50c1swXS52YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHNpZy5leHRyYXMuZXh0cy5wdXNoKHsgb2lkOiBleHRJZCwgY3JpdGljYWw6IGNyaXRpY2FsIH0pO1xuXHRcdGJyZWFrO1xuXHRjYXNlIChFWFRTLmtleVVzYWdlKTpcblx0XHRkZXIucmVhZFNlcXVlbmNlKGFzbjEuQmVyLk9jdGV0U3RyaW5nKTtcblx0XHR2YXIgYml0cyA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkJpdFN0cmluZywgdHJ1ZSk7XG5cdFx0dmFyIHNldEJpdHMgPSByZWFkQml0RmllbGQoYml0cywgS0VZVVNFQklUUyk7XG5cdFx0c2V0Qml0cy5mb3JFYWNoKGZ1bmN0aW9uIChiaXQpIHtcblx0XHRcdGlmIChjZXJ0LnB1cnBvc2VzID09PSB1bmRlZmluZWQpXG5cdFx0XHRcdGNlcnQucHVycG9zZXMgPSBbXTtcblx0XHRcdGlmIChjZXJ0LnB1cnBvc2VzLmluZGV4T2YoYml0KSA9PT0gLTEpXG5cdFx0XHRcdGNlcnQucHVycG9zZXMucHVzaChiaXQpO1xuXHRcdH0pO1xuXHRcdHNpZy5leHRyYXMuZXh0cy5wdXNoKHsgb2lkOiBleHRJZCwgY3JpdGljYWw6IGNyaXRpY2FsLFxuXHRcdCAgICBiaXRzOiBiaXRzIH0pO1xuXHRcdGJyZWFrO1xuXHRjYXNlIChFWFRTLmFsdE5hbWUpOlxuXHRcdGRlci5yZWFkU2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHRcdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0XHR2YXIgYWVFbmQgPSBkZXIub2Zmc2V0ICsgZGVyLmxlbmd0aDtcblx0XHR3aGlsZSAoZGVyLm9mZnNldCA8IGFlRW5kKSB7XG5cdFx0XHRzd2l0Y2ggKGRlci5wZWVrKCkpIHtcblx0XHRcdGNhc2UgQUxUTkFNRS5PdGhlck5hbWU6XG5cdFx0XHRjYXNlIEFMVE5BTUUuRURJUGFydHlOYW1lOlxuXHRcdFx0XHRkZXIucmVhZFNlcXVlbmNlKCk7XG5cdFx0XHRcdGRlci5fb2Zmc2V0ICs9IGRlci5sZW5ndGg7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBBTFROQU1FLk9JRDpcblx0XHRcdFx0ZGVyLnJlYWRPSUQoQUxUTkFNRS5PSUQpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgQUxUTkFNRS5SRkM4MjJOYW1lOlxuXHRcdFx0XHQvKiBSRkM4MjIgc3BlY2lmaWVzIGVtYWlsIGFkZHJlc3NlcyAqL1xuXHRcdFx0XHR2YXIgZW1haWwgPSBkZXIucmVhZFN0cmluZyhBTFROQU1FLlJGQzgyMk5hbWUpO1xuXHRcdFx0XHRpZCA9IElkZW50aXR5LmZvckVtYWlsKGVtYWlsKTtcblx0XHRcdFx0aWYgKCFjZXJ0LnN1YmplY3RzWzBdLmVxdWFscyhpZCkpXG5cdFx0XHRcdFx0Y2VydC5zdWJqZWN0cy5wdXNoKGlkKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEFMVE5BTUUuRGlyZWN0b3J5TmFtZTpcblx0XHRcdFx0ZGVyLnJlYWRTZXF1ZW5jZShBTFROQU1FLkRpcmVjdG9yeU5hbWUpO1xuXHRcdFx0XHRpZCA9IElkZW50aXR5LnBhcnNlQXNuMShkZXIpO1xuXHRcdFx0XHRpZiAoIWNlcnQuc3ViamVjdHNbMF0uZXF1YWxzKGlkKSlcblx0XHRcdFx0XHRjZXJ0LnN1YmplY3RzLnB1c2goaWQpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgQUxUTkFNRS5ETlNOYW1lOlxuXHRcdFx0XHR2YXIgaG9zdCA9IGRlci5yZWFkU3RyaW5nKFxuXHRcdFx0XHQgICAgQUxUTkFNRS5ETlNOYW1lKTtcblx0XHRcdFx0aWQgPSBJZGVudGl0eS5mb3JIb3N0KGhvc3QpO1xuXHRcdFx0XHRpZiAoIWNlcnQuc3ViamVjdHNbMF0uZXF1YWxzKGlkKSlcblx0XHRcdFx0XHRjZXJ0LnN1YmplY3RzLnB1c2goaWQpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGRlci5yZWFkU3RyaW5nKGRlci5wZWVrKCkpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0c2lnLmV4dHJhcy5leHRzLnB1c2goeyBvaWQ6IGV4dElkLCBjcml0aWNhbDogY3JpdGljYWwgfSk7XG5cdFx0YnJlYWs7XG5cdGRlZmF1bHQ6XG5cdFx0c2lnLmV4dHJhcy5leHRzLnB1c2goe1xuXHRcdFx0b2lkOiBleHRJZCxcblx0XHRcdGNyaXRpY2FsOiBjcml0aWNhbCxcblx0XHRcdGRhdGE6IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLk9jdGV0U3RyaW5nLCB0cnVlKVxuXHRcdH0pO1xuXHRcdGJyZWFrO1xuXHR9XG5cblx0ZGVyLl9vZmZzZXQgPSBhZnRlcjtcbn1cblxudmFyIFVUQ1RJTUVfUkUgPVxuICAgIC9eKFswLTldezJ9KShbMC05XXsyfSkoWzAtOV17Mn0pKFswLTldezJ9KShbMC05XXsyfSkoWzAtOV17Mn0pP1okLztcbmZ1bmN0aW9uIHV0Y1RpbWVUb0RhdGUodCkge1xuXHR2YXIgbSA9IHQubWF0Y2goVVRDVElNRV9SRSk7XG5cdGFzc2VydC5vayhtLCAndGltZXN0YW1wcyBtdXN0IGJlIGluIFVUQycpO1xuXHR2YXIgZCA9IG5ldyBEYXRlKCk7XG5cblx0dmFyIHRoaXNZZWFyID0gZC5nZXRVVENGdWxsWWVhcigpO1xuXHR2YXIgY2VudHVyeSA9IE1hdGguZmxvb3IodGhpc1llYXIgLyAxMDApICogMTAwO1xuXG5cdHZhciB5ZWFyID0gcGFyc2VJbnQobVsxXSwgMTApO1xuXHRpZiAodGhpc1llYXIgJSAxMDAgPCA1MCAmJiB5ZWFyID49IDYwKVxuXHRcdHllYXIgKz0gKGNlbnR1cnkgLSAxKTtcblx0ZWxzZVxuXHRcdHllYXIgKz0gY2VudHVyeTtcblx0ZC5zZXRVVENGdWxsWWVhcih5ZWFyLCBwYXJzZUludChtWzJdLCAxMCkgLSAxLCBwYXJzZUludChtWzNdLCAxMCkpO1xuXHRkLnNldFVUQ0hvdXJzKHBhcnNlSW50KG1bNF0sIDEwKSwgcGFyc2VJbnQobVs1XSwgMTApKTtcblx0aWYgKG1bNl0gJiYgbVs2XS5sZW5ndGggPiAwKVxuXHRcdGQuc2V0VVRDU2Vjb25kcyhwYXJzZUludChtWzZdLCAxMCkpO1xuXHRyZXR1cm4gKGQpO1xufVxuXG52YXIgR1RJTUVfUkUgPVxuICAgIC9eKFswLTldezR9KShbMC05XXsyfSkoWzAtOV17Mn0pKFswLTldezJ9KShbMC05XXsyfSkoWzAtOV17Mn0pP1okLztcbmZ1bmN0aW9uIGdUaW1lVG9EYXRlKHQpIHtcblx0dmFyIG0gPSB0Lm1hdGNoKEdUSU1FX1JFKTtcblx0YXNzZXJ0Lm9rKG0pO1xuXHR2YXIgZCA9IG5ldyBEYXRlKCk7XG5cblx0ZC5zZXRVVENGdWxsWWVhcihwYXJzZUludChtWzFdLCAxMCksIHBhcnNlSW50KG1bMl0sIDEwKSAtIDEsXG5cdCAgICBwYXJzZUludChtWzNdLCAxMCkpO1xuXHRkLnNldFVUQ0hvdXJzKHBhcnNlSW50KG1bNF0sIDEwKSwgcGFyc2VJbnQobVs1XSwgMTApKTtcblx0aWYgKG1bNl0gJiYgbVs2XS5sZW5ndGggPiAwKVxuXHRcdGQuc2V0VVRDU2Vjb25kcyhwYXJzZUludChtWzZdLCAxMCkpO1xuXHRyZXR1cm4gKGQpO1xufVxuXG5mdW5jdGlvbiB6ZXJvUGFkKG4sIG0pIHtcblx0aWYgKG0gPT09IHVuZGVmaW5lZClcblx0XHRtID0gMjtcblx0dmFyIHMgPSAnJyArIG47XG5cdHdoaWxlIChzLmxlbmd0aCA8IG0pXG5cdFx0cyA9ICcwJyArIHM7XG5cdHJldHVybiAocyk7XG59XG5cbmZ1bmN0aW9uIGRhdGVUb1VUQ1RpbWUoZCkge1xuXHR2YXIgcyA9ICcnO1xuXHRzICs9IHplcm9QYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwKTtcblx0cyArPSB6ZXJvUGFkKGQuZ2V0VVRDTW9udGgoKSArIDEpO1xuXHRzICs9IHplcm9QYWQoZC5nZXRVVENEYXRlKCkpO1xuXHRzICs9IHplcm9QYWQoZC5nZXRVVENIb3VycygpKTtcblx0cyArPSB6ZXJvUGFkKGQuZ2V0VVRDTWludXRlcygpKTtcblx0cyArPSB6ZXJvUGFkKGQuZ2V0VVRDU2Vjb25kcygpKTtcblx0cyArPSAnWic7XG5cdHJldHVybiAocyk7XG59XG5cbmZ1bmN0aW9uIGRhdGVUb0dUaW1lKGQpIHtcblx0dmFyIHMgPSAnJztcblx0cyArPSB6ZXJvUGFkKGQuZ2V0VVRDRnVsbFllYXIoKSwgNCk7XG5cdHMgKz0gemVyb1BhZChkLmdldFVUQ01vbnRoKCkgKyAxKTtcblx0cyArPSB6ZXJvUGFkKGQuZ2V0VVRDRGF0ZSgpKTtcblx0cyArPSB6ZXJvUGFkKGQuZ2V0VVRDSG91cnMoKSk7XG5cdHMgKz0gemVyb1BhZChkLmdldFVUQ01pbnV0ZXMoKSk7XG5cdHMgKz0gemVyb1BhZChkLmdldFVUQ1NlY29uZHMoKSk7XG5cdHMgKz0gJ1onO1xuXHRyZXR1cm4gKHMpO1xufVxuXG5mdW5jdGlvbiBzaWduKGNlcnQsIGtleSkge1xuXHRpZiAoY2VydC5zaWduYXR1cmVzLng1MDkgPT09IHVuZGVmaW5lZClcblx0XHRjZXJ0LnNpZ25hdHVyZXMueDUwOSA9IHt9O1xuXHR2YXIgc2lnID0gY2VydC5zaWduYXR1cmVzLng1MDk7XG5cblx0c2lnLmFsZ28gPSBrZXkudHlwZSArICctJyArIGtleS5kZWZhdWx0SGFzaEFsZ29yaXRobSgpO1xuXHRpZiAoU0lHTl9BTEdTW3NpZy5hbGdvXSA9PT0gdW5kZWZpbmVkKVxuXHRcdHJldHVybiAoZmFsc2UpO1xuXG5cdHZhciBkZXIgPSBuZXcgYXNuMS5CZXJXcml0ZXIoKTtcblx0d3JpdGVUQlNDZXJ0KGNlcnQsIGRlcik7XG5cdHZhciBibG9iID0gZGVyLmJ1ZmZlcjtcblx0c2lnLmNhY2hlID0gYmxvYjtcblxuXHR2YXIgc2lnbmVyID0ga2V5LmNyZWF0ZVNpZ24oKTtcblx0c2lnbmVyLndyaXRlKGJsb2IpO1xuXHRjZXJ0LnNpZ25hdHVyZXMueDUwOS5zaWduYXR1cmUgPSBzaWduZXIuc2lnbigpO1xuXG5cdHJldHVybiAodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIHNpZ25Bc3luYyhjZXJ0LCBzaWduZXIsIGRvbmUpIHtcblx0aWYgKGNlcnQuc2lnbmF0dXJlcy54NTA5ID09PSB1bmRlZmluZWQpXG5cdFx0Y2VydC5zaWduYXR1cmVzLng1MDkgPSB7fTtcblx0dmFyIHNpZyA9IGNlcnQuc2lnbmF0dXJlcy54NTA5O1xuXG5cdHZhciBkZXIgPSBuZXcgYXNuMS5CZXJXcml0ZXIoKTtcblx0d3JpdGVUQlNDZXJ0KGNlcnQsIGRlcik7XG5cdHZhciBibG9iID0gZGVyLmJ1ZmZlcjtcblx0c2lnLmNhY2hlID0gYmxvYjtcblxuXHRzaWduZXIoYmxvYiwgZnVuY3Rpb24gKGVyciwgc2lnbmF0dXJlKSB7XG5cdFx0aWYgKGVycikge1xuXHRcdFx0ZG9uZShlcnIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRzaWcuYWxnbyA9IHNpZ25hdHVyZS50eXBlICsgJy0nICsgc2lnbmF0dXJlLmhhc2hBbGdvcml0aG07XG5cdFx0aWYgKFNJR05fQUxHU1tzaWcuYWxnb10gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZG9uZShuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmluZyBhbGdvcml0aG0gXCInICtcblx0XHRcdCAgICBzaWcuYWxnbyArICdcIicpKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0c2lnLnNpZ25hdHVyZSA9IHNpZ25hdHVyZTtcblx0XHRkb25lKCk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiB3cml0ZShjZXJ0LCBvcHRpb25zKSB7XG5cdHZhciBzaWcgPSBjZXJ0LnNpZ25hdHVyZXMueDUwOTtcblx0YXNzZXJ0Lm9iamVjdChzaWcsICd4NTA5IHNpZ25hdHVyZScpO1xuXG5cdHZhciBkZXIgPSBuZXcgYXNuMS5CZXJXcml0ZXIoKTtcblx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblx0aWYgKHNpZy5jYWNoZSkge1xuXHRcdGRlci5fZW5zdXJlKHNpZy5jYWNoZS5sZW5ndGgpO1xuXHRcdHNpZy5jYWNoZS5jb3B5KGRlci5fYnVmLCBkZXIuX29mZnNldCk7XG5cdFx0ZGVyLl9vZmZzZXQgKz0gc2lnLmNhY2hlLmxlbmd0aDtcblx0fSBlbHNlIHtcblx0XHR3cml0ZVRCU0NlcnQoY2VydCwgZGVyKTtcblx0fVxuXG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdGRlci53cml0ZU9JRChTSUdOX0FMR1Nbc2lnLmFsZ29dKTtcblx0aWYgKHNpZy5hbGdvLm1hdGNoKC9ecnNhLS8pKVxuXHRcdGRlci53cml0ZU51bGwoKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cblx0dmFyIHNpZ0RhdGEgPSBzaWcuc2lnbmF0dXJlLnRvQnVmZmVyKCdhc24xJyk7XG5cdHZhciBkYXRhID0gQnVmZmVyLmFsbG9jKHNpZ0RhdGEubGVuZ3RoICsgMSk7XG5cdGRhdGFbMF0gPSAwO1xuXHRzaWdEYXRhLmNvcHkoZGF0YSwgMSk7XG5cdGRlci53cml0ZUJ1ZmZlcihkYXRhLCBhc24xLkJlci5CaXRTdHJpbmcpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHRyZXR1cm4gKGRlci5idWZmZXIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVRCU0NlcnQoY2VydCwgZGVyKSB7XG5cdHZhciBzaWcgPSBjZXJ0LnNpZ25hdHVyZXMueDUwOTtcblx0YXNzZXJ0Lm9iamVjdChzaWcsICd4NTA5IHNpZ25hdHVyZScpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cblx0ZGVyLnN0YXJ0U2VxdWVuY2UoTG9jYWwoMCkpO1xuXHRkZXIud3JpdGVJbnQoMik7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdGRlci53cml0ZUJ1ZmZlcih1dGlscy5tcE5vcm1hbGl6ZShjZXJ0LnNlcmlhbCksIGFzbjEuQmVyLkludGVnZXIpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdGRlci53cml0ZU9JRChTSUdOX0FMR1Nbc2lnLmFsZ29dKTtcblx0aWYgKHNpZy5hbGdvLm1hdGNoKC9ecnNhLS8pKVxuXHRcdGRlci53cml0ZU51bGwoKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cblx0Y2VydC5pc3N1ZXIudG9Bc24xKGRlcik7XG5cblx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblx0d3JpdGVEYXRlKGRlciwgY2VydC52YWxpZEZyb20pO1xuXHR3cml0ZURhdGUoZGVyLCBjZXJ0LnZhbGlkVW50aWwpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHR2YXIgc3ViamVjdCA9IGNlcnQuc3ViamVjdHNbMF07XG5cdHZhciBhbHROYW1lcyA9IGNlcnQuc3ViamVjdHMuc2xpY2UoMSk7XG5cdHN1YmplY3QudG9Bc24xKGRlcik7XG5cblx0cGtjczgud3JpdGVQa2NzOChkZXIsIGNlcnQuc3ViamVjdEtleSk7XG5cblx0aWYgKHNpZy5leHRyYXMgJiYgc2lnLmV4dHJhcy5pc3N1ZXJVbmlxdWVJRCkge1xuXHRcdGRlci53cml0ZUJ1ZmZlcihzaWcuZXh0cmFzLmlzc3VlclVuaXF1ZUlELCBMb2NhbCgxKSk7XG5cdH1cblxuXHRpZiAoc2lnLmV4dHJhcyAmJiBzaWcuZXh0cmFzLnN1YmplY3RVbmlxdWVJRCkge1xuXHRcdGRlci53cml0ZUJ1ZmZlcihzaWcuZXh0cmFzLnN1YmplY3RVbmlxdWVJRCwgTG9jYWwoMikpO1xuXHR9XG5cblx0aWYgKGFsdE5hbWVzLmxlbmd0aCA+IDAgfHwgc3ViamVjdC50eXBlID09PSAnaG9zdCcgfHxcblx0ICAgIChjZXJ0LnB1cnBvc2VzICE9PSB1bmRlZmluZWQgJiYgY2VydC5wdXJwb3Nlcy5sZW5ndGggPiAwKSB8fFxuXHQgICAgKHNpZy5leHRyYXMgJiYgc2lnLmV4dHJhcy5leHRzKSkge1xuXHRcdGRlci5zdGFydFNlcXVlbmNlKExvY2FsKDMpKTtcblx0XHRkZXIuc3RhcnRTZXF1ZW5jZSgpO1xuXG5cdFx0dmFyIGV4dHMgPSBbXTtcblx0XHRpZiAoY2VydC5wdXJwb3NlcyAhPT0gdW5kZWZpbmVkICYmIGNlcnQucHVycG9zZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0ZXh0cy5wdXNoKHtcblx0XHRcdFx0b2lkOiBFWFRTLmJhc2ljQ29uc3RyYWludHMsXG5cdFx0XHRcdGNyaXRpY2FsOiB0cnVlXG5cdFx0XHR9KTtcblx0XHRcdGV4dHMucHVzaCh7XG5cdFx0XHRcdG9pZDogRVhUUy5rZXlVc2FnZSxcblx0XHRcdFx0Y3JpdGljYWw6IHRydWVcblx0XHRcdH0pO1xuXHRcdFx0ZXh0cy5wdXNoKHtcblx0XHRcdFx0b2lkOiBFWFRTLmV4dEtleVVzYWdlLFxuXHRcdFx0XHRjcml0aWNhbDogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGV4dHMucHVzaCh7IG9pZDogRVhUUy5hbHROYW1lIH0pO1xuXHRcdGlmIChzaWcuZXh0cmFzICYmIHNpZy5leHRyYXMuZXh0cylcblx0XHRcdGV4dHMgPSBzaWcuZXh0cmFzLmV4dHM7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGV4dHMubGVuZ3RoOyArK2kpIHtcblx0XHRcdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdFx0XHRkZXIud3JpdGVPSUQoZXh0c1tpXS5vaWQpO1xuXG5cdFx0XHRpZiAoZXh0c1tpXS5jcml0aWNhbCAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRkZXIud3JpdGVCb29sZWFuKGV4dHNbaV0uY3JpdGljYWwpO1xuXG5cdFx0XHRpZiAoZXh0c1tpXS5vaWQgPT09IEVYVFMuYWx0TmFtZSkge1xuXHRcdFx0XHRkZXIuc3RhcnRTZXF1ZW5jZShhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdFx0XHRcdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdFx0XHRcdGlmIChzdWJqZWN0LnR5cGUgPT09ICdob3N0Jykge1xuXHRcdFx0XHRcdGRlci53cml0ZVN0cmluZyhzdWJqZWN0Lmhvc3RuYW1lLFxuXHRcdFx0XHRcdCAgICBDb250ZXh0KDIpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGFsdE5hbWVzLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdFx0aWYgKGFsdE5hbWVzW2pdLnR5cGUgPT09ICdob3N0Jykge1xuXHRcdFx0XHRcdFx0ZGVyLndyaXRlU3RyaW5nKFxuXHRcdFx0XHRcdFx0ICAgIGFsdE5hbWVzW2pdLmhvc3RuYW1lLFxuXHRcdFx0XHRcdFx0ICAgIEFMVE5BTUUuRE5TTmFtZSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChhbHROYW1lc1tqXS50eXBlID09PVxuXHRcdFx0XHRcdCAgICAnZW1haWwnKSB7XG5cdFx0XHRcdFx0XHRkZXIud3JpdGVTdHJpbmcoXG5cdFx0XHRcdFx0XHQgICAgYWx0TmFtZXNbal0uZW1haWwsXG5cdFx0XHRcdFx0XHQgICAgQUxUTkFNRS5SRkM4MjJOYW1lKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Lypcblx0XHRcdFx0XHRcdCAqIEVuY29kZSBhbnl0aGluZyBlbHNlIGFzIGFcblx0XHRcdFx0XHRcdCAqIEROIHN0eWxlIG5hbWUgZm9yIG5vdy5cblx0XHRcdFx0XHRcdCAqL1xuXHRcdFx0XHRcdFx0ZGVyLnN0YXJ0U2VxdWVuY2UoXG5cdFx0XHRcdFx0XHQgICAgQUxUTkFNRS5EaXJlY3RvcnlOYW1lKTtcblx0XHRcdFx0XHRcdGFsdE5hbWVzW2pdLnRvQXNuMShkZXIpO1xuXHRcdFx0XHRcdFx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGRlci5lbmRTZXF1ZW5jZSgpO1xuXHRcdFx0XHRkZXIuZW5kU2VxdWVuY2UoKTtcblx0XHRcdH0gZWxzZSBpZiAoZXh0c1tpXS5vaWQgPT09IEVYVFMuYmFzaWNDb25zdHJhaW50cykge1xuXHRcdFx0XHRkZXIuc3RhcnRTZXF1ZW5jZShhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdFx0XHRcdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdFx0XHRcdHZhciBjYSA9IChjZXJ0LnB1cnBvc2VzLmluZGV4T2YoJ2NhJykgIT09IC0xKTtcblx0XHRcdFx0dmFyIHBhdGhMZW4gPSBleHRzW2ldLnBhdGhMZW47XG5cdFx0XHRcdGRlci53cml0ZUJvb2xlYW4oY2EpO1xuXHRcdFx0XHRpZiAocGF0aExlbiAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRcdGRlci53cml0ZUludChwYXRoTGVuKTtcblx0XHRcdFx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cdFx0XHRcdGRlci5lbmRTZXF1ZW5jZSgpO1xuXHRcdFx0fSBlbHNlIGlmIChleHRzW2ldLm9pZCA9PT0gRVhUUy5leHRLZXlVc2FnZSkge1xuXHRcdFx0XHRkZXIuc3RhcnRTZXF1ZW5jZShhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdFx0XHRcdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdFx0XHRcdGNlcnQucHVycG9zZXMuZm9yRWFjaChmdW5jdGlvbiAocHVycG9zZSkge1xuXHRcdFx0XHRcdGlmIChwdXJwb3NlID09PSAnY2EnKVxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdGlmIChLRVlVU0VCSVRTLmluZGV4T2YocHVycG9zZSkgIT09IC0xKVxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdHZhciBvaWQgPSBwdXJwb3NlO1xuXHRcdFx0XHRcdGlmIChFWFRQVVJQT1NFW3B1cnBvc2VdICE9PSB1bmRlZmluZWQpXG5cdFx0XHRcdFx0XHRvaWQgPSBFWFRQVVJQT1NFW3B1cnBvc2VdO1xuXHRcdFx0XHRcdGRlci53cml0ZU9JRChvaWQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cdFx0XHRcdGRlci5lbmRTZXF1ZW5jZSgpO1xuXHRcdFx0fSBlbHNlIGlmIChleHRzW2ldLm9pZCA9PT0gRVhUUy5rZXlVc2FnZSkge1xuXHRcdFx0XHRkZXIuc3RhcnRTZXF1ZW5jZShhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdFx0XHRcdC8qXG5cdFx0XHRcdCAqIElmIHdlIHBhcnNlZCB0aGlzIGNlcnRpZmljYXRlIGZyb20gYSBieXRlXG5cdFx0XHRcdCAqIHN0cmVhbSAoaS5lLiB3ZSBkaWRuJ3QgZ2VuZXJhdGUgaXQgaW4gc3NocGspXG5cdFx0XHRcdCAqIHRoZW4gd2UnbGwgaGF2ZSBhIFwiLmJpdHNcIiBwcm9wZXJ0eSBvbiB0aGVcblx0XHRcdFx0ICogZXh0IHdpdGggdGhlIG9yaWdpbmFsIHJhdyBieXRlIGNvbnRlbnRzLlxuXHRcdFx0XHQgKlxuXHRcdFx0XHQgKiBJZiB3ZSBoYXZlIHRoaXMsIHVzZSBpdCBoZXJlIGluc3RlYWQgb2Zcblx0XHRcdFx0ICogcmVnZW5lcmF0aW5nIGl0LiBUaGlzIGd1YXJhbnRlZXMgd2Ugb3V0cHV0XG5cdFx0XHRcdCAqIHRoZSBzYW1lIGRhdGEgd2UgcGFyc2VkLCBzbyBzaWduYXR1cmVzIHN0aWxsXG5cdFx0XHRcdCAqIHZhbGlkYXRlLlxuXHRcdFx0XHQgKi9cblx0XHRcdFx0aWYgKGV4dHNbaV0uYml0cyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0ZGVyLndyaXRlQnVmZmVyKGV4dHNbaV0uYml0cyxcblx0XHRcdFx0XHQgICAgYXNuMS5CZXIuQml0U3RyaW5nKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgYml0cyA9IHdyaXRlQml0RmllbGQoY2VydC5wdXJwb3Nlcyxcblx0XHRcdFx0XHQgICAgS0VZVVNFQklUUyk7XG5cdFx0XHRcdFx0ZGVyLndyaXRlQnVmZmVyKGJpdHMsXG5cdFx0XHRcdFx0ICAgIGFzbjEuQmVyLkJpdFN0cmluZyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZXIud3JpdGVCdWZmZXIoZXh0c1tpXS5kYXRhLFxuXHRcdFx0XHQgICAgYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZXIuZW5kU2VxdWVuY2UoKTtcblx0XHR9XG5cblx0XHRkZXIuZW5kU2VxdWVuY2UoKTtcblx0XHRkZXIuZW5kU2VxdWVuY2UoKTtcblx0fVxuXG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xufVxuXG4vKlxuICogUmVhZHMgYW4gQVNOLjEgQkVSIGJpdGZpZWxkIG91dCBvZiB0aGUgQnVmZmVyIHByb2R1Y2VkIGJ5IGRvaW5nXG4gKiBgQmVyUmVhZGVyI3JlYWRTdHJpbmcoYXNuMS5CZXIuQml0U3RyaW5nKWAuIFRoYXQgZnVuY3Rpb24gZ2l2ZXMgdXMgdGhlIHJhd1xuICogY29udGVudHMgb2YgdGhlIEJpdFN0cmluZyB0YWcsIHdoaWNoIGlzIGEgY291bnQgb2YgdW51c2VkIGJpdHMgZm9sbG93ZWQgYnlcbiAqIHRoZSBiaXRzIGFzIGEgcmlnaHQtcGFkZGVkIGJ5dGUgc3RyaW5nLlxuICpcbiAqIGBiaXRzYCBpcyB0aGUgQnVmZmVyLCBgYml0SW5kZXhgIHNob3VsZCBjb250YWluIGFuIGFycmF5IG9mIHN0cmluZyBuYW1lc1xuICogZm9yIHRoZSBiaXRzIGluIHRoZSBzdHJpbmcsIG9yZGVyZWQgc3RhcnRpbmcgd2l0aCBiaXQgIzAgaW4gdGhlIEFTTi4xIHNwZWMuXG4gKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBTdHJpbmdzLCB0aGUgbmFtZXMgb2YgdGhlIGJpdHMgdGhhdCB3ZXJlIHNldCB0byAxLlxuICovXG5mdW5jdGlvbiByZWFkQml0RmllbGQoYml0cywgYml0SW5kZXgpIHtcblx0dmFyIGJpdExlbiA9IDggKiAoYml0cy5sZW5ndGggLSAxKSAtIGJpdHNbMF07XG5cdHZhciBzZXRCaXRzID0ge307XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYml0TGVuOyArK2kpIHtcblx0XHR2YXIgYnl0ZU4gPSAxICsgTWF0aC5mbG9vcihpIC8gOCk7XG5cdFx0dmFyIGJpdCA9IDcgLSAoaSAlIDgpO1xuXHRcdHZhciBtYXNrID0gMSA8PCBiaXQ7XG5cdFx0dmFyIGJpdFZhbCA9ICgoYml0c1tieXRlTl0gJiBtYXNrKSAhPT0gMCk7XG5cdFx0dmFyIG5hbWUgPSBiaXRJbmRleFtpXTtcblx0XHRpZiAoYml0VmFsICYmIHR5cGVvZiAobmFtZSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRzZXRCaXRzW25hbWVdID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIChPYmplY3Qua2V5cyhzZXRCaXRzKSk7XG59XG5cbi8qXG4gKiBgc2V0Qml0c2AgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgY29udGFpbmluZyB0aGUgbmFtZXMgZm9yIGVhY2ggYml0IHRoYXRcbiAqIHNvdWxkIGJlIHNldCB0byAxLiBgYml0SW5kZXhgIGlzIHNhbWUgYXMgaW4gYHJlYWRCaXRGaWVsZCgpYC5cbiAqXG4gKiBSZXR1cm5zIGEgQnVmZmVyLCByZWFkeSB0byBiZSB3cml0dGVuIG91dCB3aXRoIGBCZXJXcml0ZXIjd3JpdGVTdHJpbmcoKWAuXG4gKi9cbmZ1bmN0aW9uIHdyaXRlQml0RmllbGQoc2V0Qml0cywgYml0SW5kZXgpIHtcblx0dmFyIGJpdExlbiA9IGJpdEluZGV4Lmxlbmd0aDtcblx0dmFyIGJsZW4gPSBNYXRoLmNlaWwoYml0TGVuIC8gOCk7XG5cdHZhciB1bnVzZWQgPSBibGVuICogOCAtIGJpdExlbjtcblx0dmFyIGJpdHMgPSBCdWZmZXIuYWxsb2MoMSArIGJsZW4pOyAvLyB6ZXJvLWZpbGxlZFxuXHRiaXRzWzBdID0gdW51c2VkO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGJpdExlbjsgKytpKSB7XG5cdFx0dmFyIGJ5dGVOID0gMSArIE1hdGguZmxvb3IoaSAvIDgpO1xuXHRcdHZhciBiaXQgPSA3IC0gKGkgJSA4KTtcblx0XHR2YXIgbWFzayA9IDEgPDwgYml0O1xuXHRcdHZhciBuYW1lID0gYml0SW5kZXhbaV07XG5cdFx0aWYgKG5hbWUgPT09IHVuZGVmaW5lZClcblx0XHRcdGNvbnRpbnVlO1xuXHRcdHZhciBiaXRWYWwgPSAoc2V0Qml0cy5pbmRleE9mKG5hbWUpICE9PSAtMSk7XG5cdFx0aWYgKGJpdFZhbCkge1xuXHRcdFx0Yml0c1tieXRlTl0gfD0gbWFzaztcblx0XHR9XG5cdH1cblx0cmV0dXJuIChiaXRzKTtcbn1cbiIsIi8qIVxuICogbWltZS10eXBlc1xuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRiID0gcmVxdWlyZSgnbWltZS1kYicpXG52YXIgZXh0bmFtZSA9IHJlcXVpcmUoJ3BhdGgnKS5leHRuYW1lXG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEVYVFJBQ1RfVFlQRV9SRUdFWFAgPSAvXlxccyooW147XFxzXSopKD86O3xcXHN8JCkvXG52YXIgVEVYVF9UWVBFX1JFR0VYUCA9IC9edGV4dFxcLy9pXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5jaGFyc2V0ID0gY2hhcnNldFxuZXhwb3J0cy5jaGFyc2V0cyA9IHsgbG9va3VwOiBjaGFyc2V0IH1cbmV4cG9ydHMuY29udGVudFR5cGUgPSBjb250ZW50VHlwZVxuZXhwb3J0cy5leHRlbnNpb24gPSBleHRlbnNpb25cbmV4cG9ydHMuZXh0ZW5zaW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbClcbmV4cG9ydHMubG9va3VwID0gbG9va3VwXG5leHBvcnRzLnR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4vLyBQb3B1bGF0ZSB0aGUgZXh0ZW5zaW9ucy90eXBlcyBtYXBzXG5wb3B1bGF0ZU1hcHMoZXhwb3J0cy5leHRlbnNpb25zLCBleHBvcnRzLnR5cGVzKVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBjaGFyc2V0IGZvciBhIE1JTUUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gY2hhcnNldCAodHlwZSkge1xuICBpZiAoIXR5cGUgfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUT0RPOiB1c2UgbWVkaWEtdHlwZXJcbiAgdmFyIG1hdGNoID0gRVhUUkFDVF9UWVBFX1JFR0VYUC5leGVjKHR5cGUpXG4gIHZhciBtaW1lID0gbWF0Y2ggJiYgZGJbbWF0Y2hbMV0udG9Mb3dlckNhc2UoKV1cblxuICBpZiAobWltZSAmJiBtaW1lLmNoYXJzZXQpIHtcbiAgICByZXR1cm4gbWltZS5jaGFyc2V0XG4gIH1cblxuICAvLyBkZWZhdWx0IHRleHQvKiB0byB1dGYtOFxuICBpZiAobWF0Y2ggJiYgVEVYVF9UWVBFX1JFR0VYUC50ZXN0KG1hdGNoWzFdKSkge1xuICAgIHJldHVybiAnVVRGLTgnXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBmdWxsIENvbnRlbnQtVHlwZSBoZWFkZXIgZ2l2ZW4gYSBNSU1FIHR5cGUgb3IgZXh0ZW5zaW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGNvbnRlbnRUeXBlIChzdHIpIHtcbiAgLy8gVE9ETzogc2hvdWxkIHRoaXMgZXZlbiBiZSBpbiB0aGlzIG1vZHVsZT9cbiAgaWYgKCFzdHIgfHwgdHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHZhciBtaW1lID0gc3RyLmluZGV4T2YoJy8nKSA9PT0gLTFcbiAgICA/IGV4cG9ydHMubG9va3VwKHN0cilcbiAgICA6IHN0clxuXG4gIGlmICghbWltZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIGNvbnRlbnQtdHlwZSBvciBvdGhlciBtb2R1bGVcbiAgaWYgKG1pbWUuaW5kZXhPZignY2hhcnNldCcpID09PSAtMSkge1xuICAgIHZhciBjaGFyc2V0ID0gZXhwb3J0cy5jaGFyc2V0KG1pbWUpXG4gICAgaWYgKGNoYXJzZXQpIG1pbWUgKz0gJzsgY2hhcnNldD0nICsgY2hhcnNldC50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICByZXR1cm4gbWltZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBleHRlbnNpb24gZm9yIGEgTUlNRSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBleHRlbnNpb24gKHR5cGUpIHtcbiAgaWYgKCF0eXBlIHx8IHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIG1lZGlhLXR5cGVyXG4gIHZhciBtYXRjaCA9IEVYVFJBQ1RfVFlQRV9SRUdFWFAuZXhlYyh0eXBlKVxuXG4gIC8vIGdldCBleHRlbnNpb25zXG4gIHZhciBleHRzID0gbWF0Y2ggJiYgZXhwb3J0cy5leHRlbnNpb25zW21hdGNoWzFdLnRvTG93ZXJDYXNlKCldXG5cbiAgaWYgKCFleHRzIHx8ICFleHRzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGV4dHNbMF1cbn1cblxuLyoqXG4gKiBMb29rdXAgdGhlIE1JTUUgdHlwZSBmb3IgYSBmaWxlIHBhdGgvZXh0ZW5zaW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBsb29rdXAgKHBhdGgpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gZ2V0IHRoZSBleHRlbnNpb24gKFwiZXh0XCIgb3IgXCIuZXh0XCIgb3IgZnVsbCBwYXRoKVxuICB2YXIgZXh0ZW5zaW9uID0gZXh0bmFtZSgneC4nICsgcGF0aClcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5zdWJzdHIoMSlcblxuICBpZiAoIWV4dGVuc2lvbikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMudHlwZXNbZXh0ZW5zaW9uXSB8fCBmYWxzZVxufVxuXG4vKipcbiAqIFBvcHVsYXRlIHRoZSBleHRlbnNpb25zIGFuZCB0eXBlcyBtYXBzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb3B1bGF0ZU1hcHMgKGV4dGVuc2lvbnMsIHR5cGVzKSB7XG4gIC8vIHNvdXJjZSBwcmVmZXJlbmNlIChsZWFzdCAtPiBtb3N0KVxuICB2YXIgcHJlZmVyZW5jZSA9IFsnbmdpbngnLCAnYXBhY2hlJywgdW5kZWZpbmVkLCAnaWFuYSddXG5cbiAgT2JqZWN0LmtleXMoZGIpLmZvckVhY2goZnVuY3Rpb24gZm9yRWFjaE1pbWVUeXBlICh0eXBlKSB7XG4gICAgdmFyIG1pbWUgPSBkYlt0eXBlXVxuICAgIHZhciBleHRzID0gbWltZS5leHRlbnNpb25zXG5cbiAgICBpZiAoIWV4dHMgfHwgIWV4dHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBtaW1lIC0+IGV4dGVuc2lvbnNcbiAgICBleHRlbnNpb25zW3R5cGVdID0gZXh0c1xuXG4gICAgLy8gZXh0ZW5zaW9uIC0+IG1pbWVcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBleHRlbnNpb24gPSBleHRzW2ldXG5cbiAgICAgIGlmICh0eXBlc1tleHRlbnNpb25dKSB7XG4gICAgICAgIHZhciBmcm9tID0gcHJlZmVyZW5jZS5pbmRleE9mKGRiW3R5cGVzW2V4dGVuc2lvbl1dLnNvdXJjZSlcbiAgICAgICAgdmFyIHRvID0gcHJlZmVyZW5jZS5pbmRleE9mKG1pbWUuc291cmNlKVxuXG4gICAgICAgIGlmICh0eXBlc1tleHRlbnNpb25dICE9PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyAmJlxuICAgICAgICAgIChmcm9tID4gdG8gfHwgKGZyb20gPT09IHRvICYmIHR5cGVzW2V4dGVuc2lvbl0uc3Vic3RyKDAsIDEyKSA9PT0gJ2FwcGxpY2F0aW9uLycpKSkge1xuICAgICAgICAgIC8vIHNraXAgdGhlIHJlbWFwcGluZ1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHRoZSBleHRlbnNpb24gLT4gbWltZVxuICAgICAgdHlwZXNbZXh0ZW5zaW9uXSA9IHR5cGVcbiAgICB9XG4gIH0pXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ0bHNcIik7IiwidmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtO1xudmFyIERlbGF5ZWRTdHJlYW0gPSByZXF1aXJlKCdkZWxheWVkLXN0cmVhbScpO1xudmFyIGRlZmVyID0gcmVxdWlyZSgnLi9kZWZlci5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbWJpbmVkU3RyZWFtO1xuZnVuY3Rpb24gQ29tYmluZWRTdHJlYW0oKSB7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG4gIHRoaXMuZGF0YVNpemUgPSAwO1xuICB0aGlzLm1heERhdGFTaXplID0gMiAqIDEwMjQgKiAxMDI0O1xuICB0aGlzLnBhdXNlU3RyZWFtcyA9IHRydWU7XG5cbiAgdGhpcy5fcmVsZWFzZWQgPSBmYWxzZTtcbiAgdGhpcy5fc3RyZWFtcyA9IFtdO1xuICB0aGlzLl9jdXJyZW50U3RyZWFtID0gbnVsbDtcbn1cbnV0aWwuaW5oZXJpdHMoQ29tYmluZWRTdHJlYW0sIFN0cmVhbSk7XG5cbkNvbWJpbmVkU3RyZWFtLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIGNvbWJpbmVkU3RyZWFtID0gbmV3IHRoaXMoKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgZm9yICh2YXIgb3B0aW9uIGluIG9wdGlvbnMpIHtcbiAgICBjb21iaW5lZFN0cmVhbVtvcHRpb25dID0gb3B0aW9uc1tvcHRpb25dO1xuICB9XG5cbiAgcmV0dXJuIGNvbWJpbmVkU3RyZWFtO1xufTtcblxuQ29tYmluZWRTdHJlYW0uaXNTdHJlYW1MaWtlID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIHJldHVybiAodHlwZW9mIHN0cmVhbSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAmJiAodHlwZW9mIHN0cmVhbSAhPT0gJ3N0cmluZycpXG4gICAgJiYgKHR5cGVvZiBzdHJlYW0gIT09ICdib29sZWFuJylcbiAgICAmJiAodHlwZW9mIHN0cmVhbSAhPT0gJ251bWJlcicpXG4gICAgJiYgKCFCdWZmZXIuaXNCdWZmZXIoc3RyZWFtKSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIHZhciBpc1N0cmVhbUxpa2UgPSBDb21iaW5lZFN0cmVhbS5pc1N0cmVhbUxpa2Uoc3RyZWFtKTtcblxuICBpZiAoaXNTdHJlYW1MaWtlKSB7XG4gICAgaWYgKCEoc3RyZWFtIGluc3RhbmNlb2YgRGVsYXllZFN0cmVhbSkpIHtcbiAgICAgIHZhciBuZXdTdHJlYW0gPSBEZWxheWVkU3RyZWFtLmNyZWF0ZShzdHJlYW0sIHtcbiAgICAgICAgbWF4RGF0YVNpemU6IEluZmluaXR5LFxuICAgICAgICBwYXVzZVN0cmVhbTogdGhpcy5wYXVzZVN0cmVhbXMsXG4gICAgICB9KTtcbiAgICAgIHN0cmVhbS5vbignZGF0YScsIHRoaXMuX2NoZWNrRGF0YVNpemUuYmluZCh0aGlzKSk7XG4gICAgICBzdHJlYW0gPSBuZXdTdHJlYW07XG4gICAgfVxuXG4gICAgdGhpcy5faGFuZGxlRXJyb3JzKHN0cmVhbSk7XG5cbiAgICBpZiAodGhpcy5wYXVzZVN0cmVhbXMpIHtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuX3N0cmVhbXMucHVzaChzdHJlYW0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICBTdHJlYW0ucHJvdG90eXBlLnBpcGUuY2FsbCh0aGlzLCBkZXN0LCBvcHRpb25zKTtcbiAgdGhpcy5yZXN1bWUoKTtcbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX2dldE5leHQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY3VycmVudFN0cmVhbSA9IG51bGw7XG4gIHZhciBzdHJlYW0gPSB0aGlzLl9zdHJlYW1zLnNoaWZ0KCk7XG5cblxuICBpZiAodHlwZW9mIHN0cmVhbSA9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuZW5kKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzdHJlYW0gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9waXBlTmV4dChzdHJlYW0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBnZXRTdHJlYW0gPSBzdHJlYW07XG4gIGdldFN0cmVhbShmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgaXNTdHJlYW1MaWtlID0gQ29tYmluZWRTdHJlYW0uaXNTdHJlYW1MaWtlKHN0cmVhbSk7XG4gICAgaWYgKGlzU3RyZWFtTGlrZSkge1xuICAgICAgc3RyZWFtLm9uKCdkYXRhJywgdGhpcy5fY2hlY2tEYXRhU2l6ZS5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuX2hhbmRsZUVycm9ycyhzdHJlYW0pO1xuICAgIH1cblxuICAgIGRlZmVyKHRoaXMuX3BpcGVOZXh0LmJpbmQodGhpcywgc3RyZWFtKSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX3BpcGVOZXh0ID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIHRoaXMuX2N1cnJlbnRTdHJlYW0gPSBzdHJlYW07XG5cbiAgdmFyIGlzU3RyZWFtTGlrZSA9IENvbWJpbmVkU3RyZWFtLmlzU3RyZWFtTGlrZShzdHJlYW0pO1xuICBpZiAoaXNTdHJlYW1MaWtlKSB7XG4gICAgc3RyZWFtLm9uKCdlbmQnLCB0aGlzLl9nZXROZXh0LmJpbmQodGhpcykpO1xuICAgIHN0cmVhbS5waXBlKHRoaXMsIHtlbmQ6IGZhbHNlfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gc3RyZWFtO1xuICB0aGlzLndyaXRlKHZhbHVlKTtcbiAgdGhpcy5fZ2V0TmV4dCgpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9oYW5kbGVFcnJvcnMgPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgc2VsZi5fZW1pdEVycm9yKGVycik7XG4gIH0pO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMucGF1c2VTdHJlYW1zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYodGhpcy5wYXVzZVN0cmVhbXMgJiYgdGhpcy5fY3VycmVudFN0cmVhbSAmJiB0eXBlb2YodGhpcy5fY3VycmVudFN0cmVhbS5wYXVzZSkgPT0gJ2Z1bmN0aW9uJykgdGhpcy5fY3VycmVudFN0cmVhbS5wYXVzZSgpO1xuICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5fcmVsZWFzZWQpIHtcbiAgICB0aGlzLl9yZWxlYXNlZCA9IHRydWU7XG4gICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5fZ2V0TmV4dCgpO1xuICB9XG5cbiAgaWYodGhpcy5wYXVzZVN0cmVhbXMgJiYgdGhpcy5fY3VycmVudFN0cmVhbSAmJiB0eXBlb2YodGhpcy5fY3VycmVudFN0cmVhbS5yZXN1bWUpID09ICdmdW5jdGlvbicpIHRoaXMuX2N1cnJlbnRTdHJlYW0ucmVzdW1lKCk7XG4gIHRoaXMuZW1pdCgncmVzdW1lJyk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3Jlc2V0KCk7XG4gIHRoaXMuZW1pdCgnZW5kJyk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZXNldCgpO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgdGhpcy5fc3RyZWFtcyA9IFtdO1xuICB0aGlzLl9jdXJyZW50U3RyZWFtID0gbnVsbDtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fY2hlY2tEYXRhU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl91cGRhdGVEYXRhU2l6ZSgpO1xuICBpZiAodGhpcy5kYXRhU2l6ZSA8PSB0aGlzLm1heERhdGFTaXplKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1lc3NhZ2UgPVxuICAgICdEZWxheWVkU3RyZWFtI21heERhdGFTaXplIG9mICcgKyB0aGlzLm1heERhdGFTaXplICsgJyBieXRlcyBleGNlZWRlZC4nO1xuICB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKG1lc3NhZ2UpKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fdXBkYXRlRGF0YVNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kYXRhU2l6ZSA9IDA7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl9zdHJlYW1zLmZvckVhY2goZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgaWYgKCFzdHJlYW0uZGF0YVNpemUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxmLmRhdGFTaXplICs9IHN0cmVhbS5kYXRhU2l6ZTtcbiAgfSk7XG5cbiAgaWYgKHRoaXMuX2N1cnJlbnRTdHJlYW0gJiYgdGhpcy5fY3VycmVudFN0cmVhbS5kYXRhU2l6ZSkge1xuICAgIHRoaXMuZGF0YVNpemUgKz0gdGhpcy5fY3VycmVudFN0cmVhbS5kYXRhU2l6ZTtcbiAgfVxufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9lbWl0RXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcbiAgdGhpcy5fcmVzZXQoKTtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG59O1xuIiwidmFyIGFzeW5jID0gcmVxdWlyZSgnLi9hc3luYy5qcycpXG4gICwgYWJvcnQgPSByZXF1aXJlKCcuL2Fib3J0LmpzJylcbiAgO1xuXG4vLyBBUElcbm1vZHVsZS5leHBvcnRzID0gaXRlcmF0ZTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVhY2ggam9iIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7YXJyYXl8b2JqZWN0fSBsaXN0IC0gYXJyYXkgb3Igb2JqZWN0IChuYW1lZCBsaXN0KSB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gcnVuXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBjdXJyZW50IGpvYiBzdGF0dXNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gaW52b2tlZCB3aGVuIGFsbCBlbGVtZW50cyBwcm9jZXNzZWRcbiAqL1xuZnVuY3Rpb24gaXRlcmF0ZShsaXN0LCBpdGVyYXRvciwgc3RhdGUsIGNhbGxiYWNrKVxue1xuICAvLyBzdG9yZSBjdXJyZW50IGluZGV4XG4gIHZhciBrZXkgPSBzdGF0ZVsna2V5ZWRMaXN0J10gPyBzdGF0ZVsna2V5ZWRMaXN0J11bc3RhdGUuaW5kZXhdIDogc3RhdGUuaW5kZXg7XG5cbiAgc3RhdGUuam9ic1trZXldID0gcnVuSm9iKGl0ZXJhdG9yLCBrZXksIGxpc3Rba2V5XSwgZnVuY3Rpb24oZXJyb3IsIG91dHB1dClcbiAge1xuICAgIC8vIGRvbid0IHJlcGVhdCB5b3Vyc2VsZlxuICAgIC8vIHNraXAgc2Vjb25kYXJ5IGNhbGxiYWNrc1xuICAgIGlmICghKGtleSBpbiBzdGF0ZS5qb2JzKSlcbiAgICB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gY2xlYW4gdXAgam9ic1xuICAgIGRlbGV0ZSBzdGF0ZS5qb2JzW2tleV07XG5cbiAgICBpZiAoZXJyb3IpXG4gICAge1xuICAgICAgLy8gZG9uJ3QgcHJvY2VzcyByZXN0IG9mIHRoZSByZXN1bHRzXG4gICAgICAvLyBzdG9wIHN0aWxsIGFjdGl2ZSBqb2JzXG4gICAgICAvLyBhbmQgcmVzZXQgdGhlIGxpc3RcbiAgICAgIGFib3J0KHN0YXRlKTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgIHN0YXRlLnJlc3VsdHNba2V5XSA9IG91dHB1dDtcbiAgICB9XG5cbiAgICAvLyByZXR1cm4gc2FsdmFnZWQgcmVzdWx0c1xuICAgIGNhbGxiYWNrKGVycm9yLCBzdGF0ZS5yZXN1bHRzKTtcbiAgfSk7XG59XG5cbi8qKlxuICogUnVucyBpdGVyYXRvciBvdmVyIHByb3ZpZGVkIGpvYiBlbGVtZW50XG4gKlxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIGludm9rZVxuICogQHBhcmFtICAge3N0cmluZ3xudW1iZXJ9IGtleSAtIGtleS9pbmRleCBvZiB0aGUgZWxlbWVudCBpbiB0aGUgbGlzdCBvZiBqb2JzXG4gKiBAcGFyYW0gICB7bWl4ZWR9IGl0ZW0gLSBqb2IgZGVzY3JpcHRpb25cbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBpbnZva2VkIGFmdGVyIGl0ZXJhdG9yIGlzIGRvbmUgd2l0aCB0aGUgam9iXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb258bWl4ZWR9IC0gam9iIGFib3J0IGZ1bmN0aW9uIG9yIHNvbWV0aGluZyBlbHNlXG4gKi9cbmZ1bmN0aW9uIHJ1bkpvYihpdGVyYXRvciwga2V5LCBpdGVtLCBjYWxsYmFjaylcbntcbiAgdmFyIGFib3J0ZXI7XG5cbiAgLy8gYWxsb3cgc2hvcnRjdXQgaWYgaXRlcmF0b3IgZXhwZWN0cyBvbmx5IHR3byBhcmd1bWVudHNcbiAgaWYgKGl0ZXJhdG9yLmxlbmd0aCA9PSAyKVxuICB7XG4gICAgYWJvcnRlciA9IGl0ZXJhdG9yKGl0ZW0sIGFzeW5jKGNhbGxiYWNrKSk7XG4gIH1cbiAgLy8gb3RoZXJ3aXNlIGdvIHdpdGggZnVsbCB0aHJlZSBhcmd1bWVudHNcbiAgZWxzZVxuICB7XG4gICAgYWJvcnRlciA9IGl0ZXJhdG9yKGl0ZW0sIGtleSwgYXN5bmMoY2FsbGJhY2spKTtcbiAgfVxuXG4gIHJldHVybiBhYm9ydGVyO1xufVxuIiwidmFyIGRlZmVyID0gcmVxdWlyZSgnLi9kZWZlci5qcycpO1xuXG4vLyBBUElcbm1vZHVsZS5leHBvcnRzID0gYXN5bmM7XG5cbi8qKlxuICogUnVucyBwcm92aWRlZCBjYWxsYmFjayBhc3luY2hyb25vdXNseVxuICogZXZlbiBpZiBjYWxsYmFjayBpdHNlbGYgaXMgbm90XG4gKlxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIGludm9rZVxuICogQHJldHVybnMge2Z1bmN0aW9ufSAtIGF1Z21lbnRlZCBjYWxsYmFja1xuICovXG5mdW5jdGlvbiBhc3luYyhjYWxsYmFjaylcbntcbiAgdmFyIGlzQXN5bmMgPSBmYWxzZTtcblxuICAvLyBjaGVjayBpZiBhc3luYyBoYXBwZW5lZFxuICBkZWZlcihmdW5jdGlvbigpIHsgaXNBc3luYyA9IHRydWU7IH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiBhc3luY19jYWxsYmFjayhlcnIsIHJlc3VsdClcbiAge1xuICAgIGlmIChpc0FzeW5jKVxuICAgIHtcbiAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgIGRlZmVyKGZ1bmN0aW9uIG5leHRUaWNrX2NhbGxiYWNrKClcbiAgICAgIHtcbiAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuIiwiLy8gQVBJXG5tb2R1bGUuZXhwb3J0cyA9IGFib3J0O1xuXG4vKipcbiAqIEFib3J0cyBsZWZ0b3ZlciBhY3RpdmUgam9ic1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIGN1cnJlbnQgc3RhdGUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFib3J0KHN0YXRlKVxue1xuICBPYmplY3Qua2V5cyhzdGF0ZS5qb2JzKS5mb3JFYWNoKGNsZWFuLmJpbmQoc3RhdGUpKTtcblxuICAvLyByZXNldCBsZWZ0b3ZlciBqb2JzXG4gIHN0YXRlLmpvYnMgPSB7fTtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgbGVmdG92ZXIgam9iIGJ5IGludm9raW5nIGFib3J0IGZ1bmN0aW9uIGZvciB0aGUgcHJvdmlkZWQgam9iIGlkXG4gKlxuICogQHRoaXMgIHN0YXRlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGtleSAtIGpvYiBpZCB0byBhYm9ydFxuICovXG5mdW5jdGlvbiBjbGVhbihrZXkpXG57XG4gIGlmICh0eXBlb2YgdGhpcy5qb2JzW2tleV0gPT0gJ2Z1bmN0aW9uJylcbiAge1xuICAgIHRoaXMuam9ic1trZXldKCk7XG4gIH1cbn1cbiIsIi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBzdGF0ZTtcblxuLyoqXG4gKiBDcmVhdGVzIGluaXRpYWwgc3RhdGUgb2JqZWN0XG4gKiBmb3IgaXRlcmF0aW9uIG92ZXIgbGlzdFxuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBsaXN0IHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufG51bGx9IHNvcnRNZXRob2QgLSBmdW5jdGlvbiB0byB1c2UgZm9yIGtleXMgc29ydCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGBudWxsYCB0byBrZWVwIHRoZW0gYXMgaXNcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gaW5pdGlhbCBzdGF0ZSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gc3RhdGUobGlzdCwgc29ydE1ldGhvZClcbntcbiAgdmFyIGlzTmFtZWRMaXN0ID0gIUFycmF5LmlzQXJyYXkobGlzdClcbiAgICAsIGluaXRTdGF0ZSA9XG4gICAge1xuICAgICAgaW5kZXggICAgOiAwLFxuICAgICAga2V5ZWRMaXN0OiBpc05hbWVkTGlzdCB8fCBzb3J0TWV0aG9kID8gT2JqZWN0LmtleXMobGlzdCkgOiBudWxsLFxuICAgICAgam9icyAgICAgOiB7fSxcbiAgICAgIHJlc3VsdHMgIDogaXNOYW1lZExpc3QgPyB7fSA6IFtdLFxuICAgICAgc2l6ZSAgICAgOiBpc05hbWVkTGlzdCA/IE9iamVjdC5rZXlzKGxpc3QpLmxlbmd0aCA6IGxpc3QubGVuZ3RoXG4gICAgfVxuICAgIDtcblxuICBpZiAoc29ydE1ldGhvZClcbiAge1xuICAgIC8vIHNvcnQgYXJyYXkga2V5cyBiYXNlZCBvbiBpdCdzIHZhbHVlc1xuICAgIC8vIHNvcnQgb2JqZWN0J3Mga2V5cyBqdXN0IG9uIG93biBtZXJpdFxuICAgIGluaXRTdGF0ZS5rZXllZExpc3Quc29ydChpc05hbWVkTGlzdCA/IHNvcnRNZXRob2QgOiBmdW5jdGlvbihhLCBiKVxuICAgIHtcbiAgICAgIHJldHVybiBzb3J0TWV0aG9kKGxpc3RbYV0sIGxpc3RbYl0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGluaXRTdGF0ZTtcbn1cbiIsInZhciBhYm9ydCA9IHJlcXVpcmUoJy4vYWJvcnQuanMnKVxuICAsIGFzeW5jID0gcmVxdWlyZSgnLi9hc3luYy5qcycpXG4gIDtcblxuLy8gQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHRlcm1pbmF0b3I7XG5cbi8qKlxuICogVGVybWluYXRlcyBqb2JzIGluIHRoZSBhdHRhY2hlZCBzdGF0ZSBjb250ZXh0XG4gKlxuICogQHRoaXMgIEFzeW5jS2l0U3RhdGUjXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZpbmFsIGNhbGxiYWNrIHRvIGludm9rZSBhZnRlciB0ZXJtaW5hdGlvblxuICovXG5mdW5jdGlvbiB0ZXJtaW5hdG9yKGNhbGxiYWNrKVxue1xuICBpZiAoIU9iamVjdC5rZXlzKHRoaXMuam9icykubGVuZ3RoKVxuICB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZmFzdCBmb3J3YXJkIGl0ZXJhdGlvbiBpbmRleFxuICB0aGlzLmluZGV4ID0gdGhpcy5zaXplO1xuXG4gIC8vIGFib3J0IGpvYnNcbiAgYWJvcnQodGhpcyk7XG5cbiAgLy8gc2VuZCBiYWNrIHJlc3VsdHMgd2UgaGF2ZSBzbyBmYXJcbiAgYXN5bmMoY2FsbGJhY2spKG51bGwsIHRoaXMucmVzdWx0cyk7XG59XG4iLCJ2YXIgaXRlcmF0ZSAgICA9IHJlcXVpcmUoJy4vbGliL2l0ZXJhdGUuanMnKVxuICAsIGluaXRTdGF0ZSAgPSByZXF1aXJlKCcuL2xpYi9zdGF0ZS5qcycpXG4gICwgdGVybWluYXRvciA9IHJlcXVpcmUoJy4vbGliL3Rlcm1pbmF0b3IuanMnKVxuICA7XG5cbi8vIFB1YmxpYyBBUElcbm1vZHVsZS5leHBvcnRzID0gc2VyaWFsT3JkZXJlZDtcbi8vIHNvcnRpbmcgaGVscGVyc1xubW9kdWxlLmV4cG9ydHMuYXNjZW5kaW5nICA9IGFzY2VuZGluZztcbm1vZHVsZS5leHBvcnRzLmRlc2NlbmRpbmcgPSBkZXNjZW5kaW5nO1xuXG4vKipcbiAqIFJ1bnMgaXRlcmF0b3Igb3ZlciBwcm92aWRlZCBzb3J0ZWQgYXJyYXkgZWxlbWVudHMgaW4gc2VyaWVzXG4gKlxuICogQHBhcmFtICAge2FycmF5fG9iamVjdH0gbGlzdCAtIGFycmF5IG9yIG9iamVjdCAobmFtZWQgbGlzdCkgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gcnVuXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IHNvcnRNZXRob2QgLSBjdXN0b20gc29ydCBmdW5jdGlvblxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgd2hlbiBhbGwgZWxlbWVudHMgcHJvY2Vzc2VkXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gam9icyB0ZXJtaW5hdG9yXG4gKi9cbmZ1bmN0aW9uIHNlcmlhbE9yZGVyZWQobGlzdCwgaXRlcmF0b3IsIHNvcnRNZXRob2QsIGNhbGxiYWNrKVxue1xuICB2YXIgc3RhdGUgPSBpbml0U3RhdGUobGlzdCwgc29ydE1ldGhvZCk7XG5cbiAgaXRlcmF0ZShsaXN0LCBpdGVyYXRvciwgc3RhdGUsIGZ1bmN0aW9uIGl0ZXJhdG9ySGFuZGxlcihlcnJvciwgcmVzdWx0KVxuICB7XG4gICAgaWYgKGVycm9yKVxuICAgIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yLCByZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXRlLmluZGV4Kys7XG5cbiAgICAvLyBhcmUgd2UgdGhlcmUgeWV0P1xuICAgIGlmIChzdGF0ZS5pbmRleCA8IChzdGF0ZVsna2V5ZWRMaXN0J10gfHwgbGlzdCkubGVuZ3RoKVxuICAgIHtcbiAgICAgIGl0ZXJhdGUobGlzdCwgaXRlcmF0b3IsIHN0YXRlLCBpdGVyYXRvckhhbmRsZXIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGRvbmUgaGVyZVxuICAgIGNhbGxiYWNrKG51bGwsIHN0YXRlLnJlc3VsdHMpO1xuICB9KTtcblxuICByZXR1cm4gdGVybWluYXRvci5iaW5kKHN0YXRlLCBjYWxsYmFjayk7XG59XG5cbi8qXG4gKiAtLSBTb3J0IG1ldGhvZHNcbiAqL1xuXG4vKipcbiAqIHNvcnQgaGVscGVyIHRvIHNvcnQgYXJyYXkgZWxlbWVudHMgaW4gYXNjZW5kaW5nIG9yZGVyXG4gKlxuICogQHBhcmFtICAge21peGVkfSBhIC0gYW4gaXRlbSB0byBjb21wYXJlXG4gKiBAcGFyYW0gICB7bWl4ZWR9IGIgLSBhbiBpdGVtIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gY29tcGFyaXNvbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpXG57XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMDtcbn1cblxuLyoqXG4gKiBzb3J0IGhlbHBlciB0byBzb3J0IGFycmF5IGVsZW1lbnRzIGluIGRlc2NlbmRpbmcgb3JkZXJcbiAqXG4gKiBAcGFyYW0gICB7bWl4ZWR9IGEgLSBhbiBpdGVtIHRvIGNvbXBhcmVcbiAqIEBwYXJhbSAgIHttaXhlZH0gYiAtIGFuIGl0ZW0gdG8gY29tcGFyZVxuICogQHJldHVybnMge251bWJlcn0gLSBjb21wYXJpc29uIHJlc3VsdFxuICovXG5mdW5jdGlvbiBkZXNjZW5kaW5nKGEsIGIpXG57XG4gIHJldHVybiAtMSAqIGFzY2VuZGluZyhhLCBiKTtcbn1cbiIsInZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxuXG5cbmZ1bmN0aW9uIGlzU3RyZWFtIChvYmopIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHN0cmVhbS5TdHJlYW1cbn1cblxuXG5mdW5jdGlvbiBpc1JlYWRhYmxlIChvYmopIHtcbiAgcmV0dXJuIGlzU3RyZWFtKG9iaikgJiYgdHlwZW9mIG9iai5fcmVhZCA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouX3JlYWRhYmxlU3RhdGUgPT0gJ29iamVjdCdcbn1cblxuXG5mdW5jdGlvbiBpc1dyaXRhYmxlIChvYmopIHtcbiAgcmV0dXJuIGlzU3RyZWFtKG9iaikgJiYgdHlwZW9mIG9iai5fd3JpdGUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLl93cml0YWJsZVN0YXRlID09ICdvYmplY3QnXG59XG5cblxuZnVuY3Rpb24gaXNEdXBsZXggKG9iaikge1xuICByZXR1cm4gaXNSZWFkYWJsZShvYmopICYmIGlzV3JpdGFibGUob2JqKVxufVxuXG5cbm1vZHVsZS5leHBvcnRzICAgICAgICAgICAgPSBpc1N0cmVhbVxubW9kdWxlLmV4cG9ydHMuaXNSZWFkYWJsZSA9IGlzUmVhZGFibGVcbm1vZHVsZS5leHBvcnRzLmlzV3JpdGFibGUgPSBpc1dyaXRhYmxlXG5tb2R1bGUuZXhwb3J0cy5pc0R1cGxleCAgID0gaXNEdXBsZXhcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG52YXIgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmb3JtYXRzOiBmb3JtYXRzLFxuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBoZXhUYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgICAgICBhcnJheS5wdXNoKCclJyArICgoaSA8IDE2ID8gJzAnIDogJycpICsgaS50b1N0cmluZygxNikpLnRvVXBwZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn0oKSk7XG5cbnZhciBjb21wYWN0UXVldWUgPSBmdW5jdGlvbiBjb21wYWN0UXVldWUocXVldWUpIHtcbiAgICB2YXIgb2JqO1xuXG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICB2YXIgaXRlbSA9IHF1ZXVlLnBvcCgpO1xuICAgICAgICBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHZhciBjb21wYWN0ZWQgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9ialtqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFjdGVkLnB1c2gob2JqW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGl0ZW0ub2JqW2l0ZW0ucHJvcF0gPSBjb21wYWN0ZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIGFycmF5VG9PYmplY3QgPSBmdW5jdGlvbiBhcnJheVRvT2JqZWN0KHNvdXJjZSwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSBvcHRpb25zICYmIG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgb2JqW2ldID0gc291cmNlW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBtZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGFyZ2V0LnB1c2goc291cmNlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGxhaW5PYmplY3RzIHx8IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzIHx8ICFoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFt0YXJnZXQsIHNvdXJjZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gW3RhcmdldF0uY29uY2F0KHNvdXJjZSk7XG4gICAgfVxuXG4gICAgdmFyIG1lcmdlVGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgIUFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBtZXJnZVRhcmdldCA9IGFycmF5VG9PYmplY3QodGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIEFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgaWYgKGhhcy5jYWxsKHRhcmdldCwgaSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0W2ldICYmIHR5cGVvZiB0YXJnZXRbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IG1lcmdlKHRhcmdldFtpXSwgaXRlbSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtrZXldO1xuXG4gICAgICAgIGlmIChoYXMuY2FsbChhY2MsIGtleSkpIHtcbiAgICAgICAgICAgIGFjY1trZXldID0gbWVyZ2UoYWNjW2tleV0sIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBtZXJnZVRhcmdldCk7XG59O1xuXG52YXIgYXNzaWduID0gZnVuY3Rpb24gYXNzaWduU2luZ2xlU291cmNlKHRhcmdldCwgc291cmNlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICBhY2Nba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHRhcmdldCk7XG59O1xuXG52YXIgZGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcblxudmFyIGVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShzdHIpIHtcbiAgICAvLyBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgd3JpdHRlbiBieSBCcmlhbiBXaGl0ZSAobXNjZGV4KSBmb3IgdGhlIGlvLmpzIGNvcmUgcXVlcnlzdHJpbmcgbGlicmFyeS5cbiAgICAvLyBJdCBoYXMgYmVlbiBhZGFwdGVkIGhlcmUgZm9yIHN0cmljdGVyIGFkaGVyZW5jZSB0byBSRkMgMzk4NlxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gc3RyIDogU3RyaW5nKHN0cik7XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjID09PSAweDJEIC8vIC1cbiAgICAgICAgICAgIHx8IGMgPT09IDB4MkUgLy8gLlxuICAgICAgICAgICAgfHwgYyA9PT0gMHg1RiAvLyBfXG4gICAgICAgICAgICB8fCBjID09PSAweDdFIC8vIH5cbiAgICAgICAgICAgIHx8IChjID49IDB4MzAgJiYgYyA8PSAweDM5KSAvLyAwLTlcbiAgICAgICAgICAgIHx8IChjID49IDB4NDEgJiYgYyA8PSAweDVBKSAvLyBhLXpcbiAgICAgICAgICAgIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKSAvLyBBLVpcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvdXQgKz0gc3RyaW5nLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICBvdXQgPSBvdXQgKyBoZXhUYWJsZVtjXTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgKGhleFRhYmxlWzB4QzAgfCAoYyA+PiA2KV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyA8IDB4RDgwMCB8fCBjID49IDB4RTAwMCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgKGhleFRhYmxlWzB4RTAgfCAoYyA+PiAxMildICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXSArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzRkYpIDw8IDEwKSB8IChzdHJpbmcuY2hhckNvZGVBdChpKSAmIDB4M0ZGKSk7XG4gICAgICAgIG91dCArPSBoZXhUYWJsZVsweEYwIHwgKGMgPj4gMTgpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDEyKSAmIDB4M0YpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxudmFyIGNvbXBhY3QgPSBmdW5jdGlvbiBjb21wYWN0KHZhbHVlKSB7XG4gICAgdmFyIHF1ZXVlID0gW3sgb2JqOiB7IG86IHZhbHVlIH0sIHByb3A6ICdvJyB9XTtcbiAgICB2YXIgcmVmcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgaXRlbSA9IHF1ZXVlW2ldO1xuICAgICAgICB2YXIgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTtcblxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbal07XG4gICAgICAgICAgICB2YXIgdmFsID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsICYmIHJlZnMuaW5kZXhPZih2YWwpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goeyBvYmo6IG9iaiwgcHJvcDoga2V5IH0pO1xuICAgICAgICAgICAgICAgIHJlZnMucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBhY3RRdWV1ZShxdWV1ZSk7XG59O1xuXG52YXIgaXNSZWdFeHAgPSBmdW5jdGlvbiBpc1JlZ0V4cChvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTtcblxudmFyIGlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iaikpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgYXJyYXlUb09iamVjdDogYXJyYXlUb09iamVjdCxcbiAgICBhc3NpZ246IGFzc2lnbixcbiAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgIGRlY29kZTogZGVjb2RlLFxuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgICBpc1JlZ0V4cDogaXNSZWdFeHAsXG4gICAgbWVyZ2U6IG1lcmdlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciBwZXJjZW50VHdlbnRpZXMgPSAvJTIwL2c7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgICdkZWZhdWx0JzogJ1JGQzM5ODYnLFxuICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZS5jYWxsKHZhbHVlLCBwZXJjZW50VHdlbnRpZXMsICcrJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjaGVtYU9iamVjdDtcblxuZnVuY3Rpb24gU2NoZW1hT2JqZWN0KG9iaikge1xuICB1dGlsLmNvcHkob2JqLCB0aGlzKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGF0YSwgb3B0cykge1xuICAgIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykgb3B0cyA9IHsgY21wOiBvcHRzIH07XG4gICAgdmFyIGN5Y2xlcyA9ICh0eXBlb2Ygb3B0cy5jeWNsZXMgPT09ICdib29sZWFuJykgPyBvcHRzLmN5Y2xlcyA6IGZhbHNlO1xuXG4gICAgdmFyIGNtcCA9IG9wdHMuY21wICYmIChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgIHZhciBhb2JqID0geyBrZXk6IGEsIHZhbHVlOiBub2RlW2FdIH07XG4gICAgICAgICAgICAgICAgdmFyIGJvYmogPSB7IGtleTogYiwgdmFsdWU6IG5vZGVbYl0gfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZihhb2JqLCBib2JqKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfSkob3B0cy5jbXApO1xuXG4gICAgdmFyIHNlZW4gPSBbXTtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIHN0cmluZ2lmeSAobm9kZSkge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLnRvSlNPTiAmJiB0eXBlb2Ygbm9kZS50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnRvSlNPTigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZW9mIG5vZGUgPT0gJ251bWJlcicpIHJldHVybiBpc0Zpbml0ZShub2RlKSA/ICcnICsgbm9kZSA6ICdudWxsJztcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0JykgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5vZGUpO1xuXG4gICAgICAgIHZhciBpLCBvdXQ7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgICAgICAgICBvdXQgPSAnWyc7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpKSBvdXQgKz0gJywnO1xuICAgICAgICAgICAgICAgIG91dCArPSBzdHJpbmdpZnkobm9kZVtpXSkgfHwgJ251bGwnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dCArICddJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuXG4gICAgICAgIGlmIChzZWVuLmluZGV4T2Yobm9kZSkgIT09IC0xKSB7XG4gICAgICAgICAgICBpZiAoY3ljbGVzKSByZXR1cm4gSlNPTi5zdHJpbmdpZnkoJ19fY3ljbGVfXycpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29udmVydGluZyBjaXJjdWxhciBzdHJ1Y3R1cmUgdG8gSlNPTicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ucHVzaChub2RlKSAtIDE7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobm9kZSkuc29ydChjbXAgJiYgY21wKG5vZGUpKTtcbiAgICAgICAgb3V0ID0gJyc7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHN0cmluZ2lmeShub2RlW2tleV0pO1xuXG4gICAgICAgICAgICBpZiAoIXZhbHVlKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChvdXQpIG91dCArPSAnLCc7XG4gICAgICAgICAgICBvdXQgKz0gSlNPTi5zdHJpbmdpZnkoa2V5KSArICc6JyArIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHNlZW4uc3BsaWNlKHNlZW5JbmRleCwgMSk7XG4gICAgICAgIHJldHVybiAneycgKyBvdXQgKyAnfSc7XG4gICAgfSkoZGF0YSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV92YWxpZGF0ZShpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyc7XG4gIHZhciAkYXN5bmMgPSBpdC5zY2hlbWEuJGFzeW5jID09PSB0cnVlLFxuICAgICRyZWZLZXl3b3JkcyA9IGl0LnV0aWwuc2NoZW1hSGFzUnVsZXNFeGNlcHQoaXQuc2NoZW1hLCBpdC5SVUxFUy5hbGwsICckcmVmJyksXG4gICAgJGlkID0gaXQuc2VsZi5fZ2V0SWQoaXQuc2NoZW1hKTtcbiAgaWYgKGl0LmlzVG9wKSB7XG4gICAgb3V0ICs9ICcgdmFyIHZhbGlkYXRlID0gJztcbiAgICBpZiAoJGFzeW5jKSB7XG4gICAgICBpdC5hc3luYyA9IHRydWU7XG4gICAgICBvdXQgKz0gJ2FzeW5jICc7XG4gICAgfVxuICAgIG91dCArPSAnZnVuY3Rpb24oZGF0YSwgZGF0YVBhdGgsIHBhcmVudERhdGEsIHBhcmVudERhdGFQcm9wZXJ0eSwgcm9vdERhdGEpIHsgXFwndXNlIHN0cmljdFxcJzsgJztcbiAgICBpZiAoJGlkICYmIChpdC5vcHRzLnNvdXJjZUNvZGUgfHwgaXQub3B0cy5wcm9jZXNzQ29kZSkpIHtcbiAgICAgIG91dCArPSAnICcgKyAoJy9cXCojIHNvdXJjZVVSTD0nICsgJGlkICsgJyAqLycpICsgJyAnO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIGl0LnNjaGVtYSA9PSAnYm9vbGVhbicgfHwgISgkcmVmS2V5d29yZHMgfHwgaXQuc2NoZW1hLiRyZWYpKSB7XG4gICAgdmFyICRrZXl3b3JkID0gJ2ZhbHNlIHNjaGVtYSc7XG4gICAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gICAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICAgIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gICAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gICAgdmFyICRlcnJvcktleXdvcmQ7XG4gICAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgICB2YXIgJHZhbGlkID0gJ3ZhbGlkJyArICRsdmw7XG4gICAgaWYgKGl0LnNjaGVtYSA9PT0gZmFsc2UpIHtcbiAgICAgIGlmIChpdC5pc1RvcCkge1xuICAgICAgICAkYnJlYWtPbkVycm9yID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIHZhciAnICsgKCR2YWxpZCkgKyAnID0gZmFsc2U7ICc7XG4gICAgICB9XG4gICAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ2ZhbHNlIHNjaGVtYScpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHt9ICc7XG4gICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnYm9vbGVhbiBzY2hlbWEgaXMgZmFsc2VcXCcgJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IGZhbHNlICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICB9XG4gICAgICB2YXIgX19lcnIgPSBvdXQ7XG4gICAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGl0LmlzVG9wKSB7XG4gICAgICAgIGlmICgkYXN5bmMpIHtcbiAgICAgICAgICBvdXQgKz0gJyByZXR1cm4gZGF0YTsgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBudWxsOyByZXR1cm4gdHJ1ZTsgJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJHZhbGlkKSArICcgPSB0cnVlOyAnO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXQuaXNUb3ApIHtcbiAgICAgIG91dCArPSAnIH07IHJldHVybiB2YWxpZGF0ZTsgJztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuICBpZiAoaXQuaXNUb3ApIHtcbiAgICB2YXIgJHRvcCA9IGl0LmlzVG9wLFxuICAgICAgJGx2bCA9IGl0LmxldmVsID0gMCxcbiAgICAgICRkYXRhTHZsID0gaXQuZGF0YUxldmVsID0gMCxcbiAgICAgICRkYXRhID0gJ2RhdGEnO1xuICAgIGl0LnJvb3RJZCA9IGl0LnJlc29sdmUuZnVsbFBhdGgoaXQuc2VsZi5fZ2V0SWQoaXQucm9vdC5zY2hlbWEpKTtcbiAgICBpdC5iYXNlSWQgPSBpdC5iYXNlSWQgfHwgaXQucm9vdElkO1xuICAgIGRlbGV0ZSBpdC5pc1RvcDtcbiAgICBpdC5kYXRhUGF0aEFyciA9IFt1bmRlZmluZWRdO1xuICAgIG91dCArPSAnIHZhciB2RXJyb3JzID0gbnVsbDsgJztcbiAgICBvdXQgKz0gJyB2YXIgZXJyb3JzID0gMDsgICAgICc7XG4gICAgb3V0ICs9ICcgaWYgKHJvb3REYXRhID09PSB1bmRlZmluZWQpIHJvb3REYXRhID0gZGF0YTsgJztcbiAgfSBlbHNlIHtcbiAgICB2YXIgJGx2bCA9IGl0LmxldmVsLFxuICAgICAgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWwsXG4gICAgICAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gICAgaWYgKCRpZCkgaXQuYmFzZUlkID0gaXQucmVzb2x2ZS51cmwoaXQuYmFzZUlkLCAkaWQpO1xuICAgIGlmICgkYXN5bmMgJiYgIWl0LmFzeW5jKSB0aHJvdyBuZXcgRXJyb3IoJ2FzeW5jIHNjaGVtYSBpbiBzeW5jIHNjaGVtYScpO1xuICAgIG91dCArPSAnIHZhciBlcnJzXycgKyAoJGx2bCkgKyAnID0gZXJyb3JzOyc7XG4gIH1cbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsLFxuICAgICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnMsXG4gICAgJGNsb3NpbmdCcmFjZXMxID0gJycsXG4gICAgJGNsb3NpbmdCcmFjZXMyID0gJyc7XG4gIHZhciAkZXJyb3JLZXl3b3JkO1xuICB2YXIgJHR5cGVTY2hlbWEgPSBpdC5zY2hlbWEudHlwZSxcbiAgICAkdHlwZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCR0eXBlU2NoZW1hKTtcbiAgaWYgKCR0eXBlU2NoZW1hICYmIGl0Lm9wdHMubnVsbGFibGUgJiYgaXQuc2NoZW1hLm51bGxhYmxlID09PSB0cnVlKSB7XG4gICAgaWYgKCR0eXBlSXNBcnJheSkge1xuICAgICAgaWYgKCR0eXBlU2NoZW1hLmluZGV4T2YoJ251bGwnKSA9PSAtMSkgJHR5cGVTY2hlbWEgPSAkdHlwZVNjaGVtYS5jb25jYXQoJ251bGwnKTtcbiAgICB9IGVsc2UgaWYgKCR0eXBlU2NoZW1hICE9ICdudWxsJykge1xuICAgICAgJHR5cGVTY2hlbWEgPSBbJHR5cGVTY2hlbWEsICdudWxsJ107XG4gICAgICAkdHlwZUlzQXJyYXkgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoJHR5cGVJc0FycmF5ICYmICR0eXBlU2NoZW1hLmxlbmd0aCA9PSAxKSB7XG4gICAgJHR5cGVTY2hlbWEgPSAkdHlwZVNjaGVtYVswXTtcbiAgICAkdHlwZUlzQXJyYXkgPSBmYWxzZTtcbiAgfVxuICBpZiAoaXQuc2NoZW1hLiRyZWYgJiYgJHJlZktleXdvcmRzKSB7XG4gICAgaWYgKGl0Lm9wdHMuZXh0ZW5kUmVmcyA9PSAnZmFpbCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignJHJlZjogdmFsaWRhdGlvbiBrZXl3b3JkcyB1c2VkIGluIHNjaGVtYSBhdCBwYXRoIFwiJyArIGl0LmVyclNjaGVtYVBhdGggKyAnXCIgKHNlZSBvcHRpb24gZXh0ZW5kUmVmcyknKTtcbiAgICB9IGVsc2UgaWYgKGl0Lm9wdHMuZXh0ZW5kUmVmcyAhPT0gdHJ1ZSkge1xuICAgICAgJHJlZktleXdvcmRzID0gZmFsc2U7XG4gICAgICBpdC5sb2dnZXIud2FybignJHJlZjoga2V5d29yZHMgaWdub3JlZCBpbiBzY2hlbWEgYXQgcGF0aCBcIicgKyBpdC5lcnJTY2hlbWFQYXRoICsgJ1wiJyk7XG4gICAgfVxuICB9XG4gIGlmIChpdC5zY2hlbWEuJGNvbW1lbnQgJiYgaXQub3B0cy4kY29tbWVudCkge1xuICAgIG91dCArPSAnICcgKyAoaXQuUlVMRVMuYWxsLiRjb21tZW50LmNvZGUoaXQsICckY29tbWVudCcpKTtcbiAgfVxuICBpZiAoJHR5cGVTY2hlbWEpIHtcbiAgICBpZiAoaXQub3B0cy5jb2VyY2VUeXBlcykge1xuICAgICAgdmFyICRjb2VyY2VUb1R5cGVzID0gaXQudXRpbC5jb2VyY2VUb1R5cGVzKGl0Lm9wdHMuY29lcmNlVHlwZXMsICR0eXBlU2NoZW1hKTtcbiAgICB9XG4gICAgdmFyICRydWxlc0dyb3VwID0gaXQuUlVMRVMudHlwZXNbJHR5cGVTY2hlbWFdO1xuICAgIGlmICgkY29lcmNlVG9UeXBlcyB8fCAkdHlwZUlzQXJyYXkgfHwgJHJ1bGVzR3JvdXAgPT09IHRydWUgfHwgKCRydWxlc0dyb3VwICYmICEkc2hvdWxkVXNlR3JvdXAoJHJ1bGVzR3JvdXApKSkge1xuICAgICAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArICcudHlwZScsXG4gICAgICAgICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvdHlwZSc7XG4gICAgICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgJy50eXBlJyxcbiAgICAgICAgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy90eXBlJyxcbiAgICAgICAgJG1ldGhvZCA9ICR0eXBlSXNBcnJheSA/ICdjaGVja0RhdGFUeXBlcycgOiAnY2hlY2tEYXRhVHlwZSc7XG4gICAgICBvdXQgKz0gJyBpZiAoJyArIChpdC51dGlsWyRtZXRob2RdKCR0eXBlU2NoZW1hLCAkZGF0YSwgdHJ1ZSkpICsgJykgeyAnO1xuICAgICAgaWYgKCRjb2VyY2VUb1R5cGVzKSB7XG4gICAgICAgIHZhciAkZGF0YVR5cGUgPSAnZGF0YVR5cGUnICsgJGx2bCxcbiAgICAgICAgICAkY29lcmNlZCA9ICdjb2VyY2VkJyArICRsdmw7XG4gICAgICAgIG91dCArPSAnIHZhciAnICsgKCRkYXRhVHlwZSkgKyAnID0gdHlwZW9mICcgKyAoJGRhdGEpICsgJzsgJztcbiAgICAgICAgaWYgKGl0Lm9wdHMuY29lcmNlVHlwZXMgPT0gJ2FycmF5Jykge1xuICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCRkYXRhVHlwZSkgKyAnID09IFxcJ29iamVjdFxcJyAmJiBBcnJheS5pc0FycmF5KCcgKyAoJGRhdGEpICsgJykpICcgKyAoJGRhdGFUeXBlKSArICcgPSBcXCdhcnJheVxcJzsgJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkY29lcmNlZCkgKyAnID0gdW5kZWZpbmVkOyAnO1xuICAgICAgICB2YXIgJGJyYWNlc0NvZXJjaW9uID0gJyc7XG4gICAgICAgIHZhciBhcnIxID0gJGNvZXJjZVRvVHlwZXM7XG4gICAgICAgIGlmIChhcnIxKSB7XG4gICAgICAgICAgdmFyICR0eXBlLCAkaSA9IC0xLFxuICAgICAgICAgICAgbDEgPSBhcnIxLmxlbmd0aCAtIDE7XG4gICAgICAgICAgd2hpbGUgKCRpIDwgbDEpIHtcbiAgICAgICAgICAgICR0eXBlID0gYXJyMVskaSArPSAxXTtcbiAgICAgICAgICAgIGlmICgkaSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkY29lcmNlZCkgKyAnID09PSB1bmRlZmluZWQpIHsgJztcbiAgICAgICAgICAgICAgJGJyYWNlc0NvZXJjaW9uICs9ICd9JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdC5vcHRzLmNvZXJjZVR5cGVzID09ICdhcnJheScgJiYgJHR5cGUgIT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkZGF0YVR5cGUpICsgJyA9PSBcXCdhcnJheVxcJyAmJiAnICsgKCRkYXRhKSArICcubGVuZ3RoID09IDEpIHsgJyArICgkY29lcmNlZCkgKyAnID0gJyArICgkZGF0YSkgKyAnID0gJyArICgkZGF0YSkgKyAnWzBdOyAnICsgKCRkYXRhVHlwZSkgKyAnID0gdHlwZW9mICcgKyAoJGRhdGEpICsgJzsgIH0gJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkdHlwZSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkZGF0YVR5cGUpICsgJyA9PSBcXCdudW1iZXJcXCcgfHwgJyArICgkZGF0YVR5cGUpICsgJyA9PSBcXCdib29sZWFuXFwnKSAnICsgKCRjb2VyY2VkKSArICcgPSBcXCdcXCcgKyAnICsgKCRkYXRhKSArICc7IGVsc2UgaWYgKCcgKyAoJGRhdGEpICsgJyA9PT0gbnVsbCkgJyArICgkY29lcmNlZCkgKyAnID0gXFwnXFwnOyAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkdHlwZSA9PSAnbnVtYmVyJyB8fCAkdHlwZSA9PSAnaW50ZWdlcicpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJGRhdGFUeXBlKSArICcgPT0gXFwnYm9vbGVhblxcJyB8fCAnICsgKCRkYXRhKSArICcgPT09IG51bGwgfHwgKCcgKyAoJGRhdGFUeXBlKSArICcgPT0gXFwnc3RyaW5nXFwnICYmICcgKyAoJGRhdGEpICsgJyAmJiAnICsgKCRkYXRhKSArICcgPT0gKycgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgICAgICAgICBpZiAoJHR5cGUgPT0gJ2ludGVnZXInKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgJiYgISgnICsgKCRkYXRhKSArICcgJSAxKSc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICcpKSAnICsgKCRjb2VyY2VkKSArICcgPSArJyArICgkZGF0YSkgKyAnOyAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkdHlwZSA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJGRhdGEpICsgJyA9PT0gXFwnZmFsc2VcXCcgfHwgJyArICgkZGF0YSkgKyAnID09PSAwIHx8ICcgKyAoJGRhdGEpICsgJyA9PT0gbnVsbCkgJyArICgkY29lcmNlZCkgKyAnID0gZmFsc2U7IGVsc2UgaWYgKCcgKyAoJGRhdGEpICsgJyA9PT0gXFwndHJ1ZVxcJyB8fCAnICsgKCRkYXRhKSArICcgPT09IDEpICcgKyAoJGNvZXJjZWQpICsgJyA9IHRydWU7ICc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCR0eXBlID09ICdudWxsJykge1xuICAgICAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkZGF0YSkgKyAnID09PSBcXCdcXCcgfHwgJyArICgkZGF0YSkgKyAnID09PSAwIHx8ICcgKyAoJGRhdGEpICsgJyA9PT0gZmFsc2UpICcgKyAoJGNvZXJjZWQpICsgJyA9IG51bGw7ICc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0Lm9wdHMuY29lcmNlVHlwZXMgPT0gJ2FycmF5JyAmJiAkdHlwZSA9PSAnYXJyYXknKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCRkYXRhVHlwZSkgKyAnID09IFxcJ3N0cmluZ1xcJyB8fCAnICsgKCRkYXRhVHlwZSkgKyAnID09IFxcJ251bWJlclxcJyB8fCAnICsgKCRkYXRhVHlwZSkgKyAnID09IFxcJ2Jvb2xlYW5cXCcgfHwgJyArICgkZGF0YSkgKyAnID09IG51bGwpICcgKyAoJGNvZXJjZWQpICsgJyA9IFsnICsgKCRkYXRhKSArICddOyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyAnICsgKCRicmFjZXNDb2VyY2lvbikgKyAnIGlmICgnICsgKCRjb2VyY2VkKSArICcgPT09IHVuZGVmaW5lZCkgeyAgICc7XG4gICAgICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAgICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgkZXJyb3JLZXl3b3JkIHx8ICd0eXBlJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyB0eXBlOiBcXCcnO1xuICAgICAgICAgIGlmICgkdHlwZUlzQXJyYXkpIHtcbiAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYS5qb2luKFwiLFwiKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnXFwnIH0gJztcbiAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIGJlICc7XG4gICAgICAgICAgICBpZiAoJHR5cGVJc0FycmF5KSB7XG4gICAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYS5qb2luKFwiLFwiKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdXQgKz0gJycgKyAoJHR5cGVTY2hlbWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICdcXCcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9fZXJyID0gb3V0O1xuICAgICAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyB9IGVsc2UgeyAgJztcbiAgICAgICAgdmFyICRwYXJlbnREYXRhID0gJGRhdGFMdmwgPyAnZGF0YScgKyAoKCRkYXRhTHZsIC0gMSkgfHwgJycpIDogJ3BhcmVudERhdGEnLFxuICAgICAgICAgICRwYXJlbnREYXRhUHJvcGVydHkgPSAkZGF0YUx2bCA/IGl0LmRhdGFQYXRoQXJyWyRkYXRhTHZsXSA6ICdwYXJlbnREYXRhUHJvcGVydHknO1xuICAgICAgICBvdXQgKz0gJyAnICsgKCRkYXRhKSArICcgPSAnICsgKCRjb2VyY2VkKSArICc7ICc7XG4gICAgICAgIGlmICghJGRhdGFMdmwpIHtcbiAgICAgICAgICBvdXQgKz0gJ2lmICgnICsgKCRwYXJlbnREYXRhKSArICcgIT09IHVuZGVmaW5lZCknO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnICcgKyAoJHBhcmVudERhdGEpICsgJ1snICsgKCRwYXJlbnREYXRhUHJvcGVydHkpICsgJ10gPSAnICsgKCRjb2VyY2VkKSArICc7IH0gJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAgICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgkZXJyb3JLZXl3b3JkIHx8ICd0eXBlJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyB0eXBlOiBcXCcnO1xuICAgICAgICAgIGlmICgkdHlwZUlzQXJyYXkpIHtcbiAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYS5qb2luKFwiLFwiKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnXFwnIH0gJztcbiAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIGJlICc7XG4gICAgICAgICAgICBpZiAoJHR5cGVJc0FycmF5KSB7XG4gICAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYS5qb2luKFwiLFwiKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdXQgKz0gJycgKyAoJHR5cGVTY2hlbWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICdcXCcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9fZXJyID0gb3V0O1xuICAgICAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgIH1cbiAgfVxuICBpZiAoaXQuc2NoZW1hLiRyZWYgJiYgISRyZWZLZXl3b3Jkcykge1xuICAgIG91dCArPSAnICcgKyAoaXQuUlVMRVMuYWxsLiRyZWYuY29kZShpdCwgJyRyZWYnKSkgKyAnICc7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgIG91dCArPSAnIH0gaWYgKGVycm9ycyA9PT0gJztcbiAgICAgIGlmICgkdG9wKSB7XG4gICAgICAgIG91dCArPSAnMCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJ2VycnNfJyArICgkbHZsKTtcbiAgICAgIH1cbiAgICAgIG91dCArPSAnKSB7ICc7XG4gICAgICAkY2xvc2luZ0JyYWNlczIgKz0gJ30nO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYXJyMiA9IGl0LlJVTEVTO1xuICAgIGlmIChhcnIyKSB7XG4gICAgICB2YXIgJHJ1bGVzR3JvdXAsIGkyID0gLTEsXG4gICAgICAgIGwyID0gYXJyMi5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkyIDwgbDIpIHtcbiAgICAgICAgJHJ1bGVzR3JvdXAgPSBhcnIyW2kyICs9IDFdO1xuICAgICAgICBpZiAoJHNob3VsZFVzZUdyb3VwKCRydWxlc0dyb3VwKSkge1xuICAgICAgICAgIGlmICgkcnVsZXNHcm91cC50eXBlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArIChpdC51dGlsLmNoZWNrRGF0YVR5cGUoJHJ1bGVzR3JvdXAudHlwZSwgJGRhdGEpKSArICcpIHsgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudXNlRGVmYXVsdHMgJiYgIWl0LmNvbXBvc2l0ZVJ1bGUpIHtcbiAgICAgICAgICAgIGlmICgkcnVsZXNHcm91cC50eXBlID09ICdvYmplY3QnICYmIGl0LnNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hLnByb3BlcnRpZXMsXG4gICAgICAgICAgICAgICAgJHNjaGVtYUtleXMgPSBPYmplY3Qua2V5cygkc2NoZW1hKTtcbiAgICAgICAgICAgICAgdmFyIGFycjMgPSAkc2NoZW1hS2V5cztcbiAgICAgICAgICAgICAgaWYgKGFycjMpIHtcbiAgICAgICAgICAgICAgICB2YXIgJHByb3BlcnR5S2V5LCBpMyA9IC0xLFxuICAgICAgICAgICAgICAgICAgbDMgPSBhcnIzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGkzIDwgbDMpIHtcbiAgICAgICAgICAgICAgICAgICRwcm9wZXJ0eUtleSA9IGFycjNbaTMgKz0gMV07XG4gICAgICAgICAgICAgICAgICB2YXIgJHNjaCA9ICRzY2hlbWFbJHByb3BlcnR5S2V5XTtcbiAgICAgICAgICAgICAgICAgIGlmICgkc2NoLmRlZmF1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJHBhc3NEYXRhID0gJGRhdGEgKyBpdC51dGlsLmdldFByb3BlcnR5KCRwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSAnICBpZiAoJyArICgkcGFzc0RhdGEpICsgJyA9PT0gdW5kZWZpbmVkICc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC5vcHRzLnVzZURlZmF1bHRzID09ICdlbXB0eScpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gJyB8fCAnICsgKCRwYXNzRGF0YSkgKyAnID09PSBudWxsIHx8ICcgKyAoJHBhc3NEYXRhKSArICcgPT09IFxcJ1xcJyAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSAnICkgJyArICgkcGFzc0RhdGEpICsgJyA9ICc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC5vcHRzLnVzZURlZmF1bHRzID09ICdzaGFyZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICcgJyArIChpdC51c2VEZWZhdWx0KCRzY2guZGVmYXVsdCkpICsgJyAnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIG91dCArPSAnICcgKyAoSlNPTi5zdHJpbmdpZnkoJHNjaC5kZWZhdWx0KSkgKyAnICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICc7ICc7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRydWxlc0dyb3VwLnR5cGUgPT0gJ2FycmF5JyAmJiBBcnJheS5pc0FycmF5KGl0LnNjaGVtYS5pdGVtcykpIHtcbiAgICAgICAgICAgICAgdmFyIGFycjQgPSBpdC5zY2hlbWEuaXRlbXM7XG4gICAgICAgICAgICAgIGlmIChhcnI0KSB7XG4gICAgICAgICAgICAgICAgdmFyICRzY2gsICRpID0gLTEsXG4gICAgICAgICAgICAgICAgICBsNCA9IGFycjQubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoJGkgPCBsNCkge1xuICAgICAgICAgICAgICAgICAgJHNjaCA9IGFycjRbJGkgKz0gMV07XG4gICAgICAgICAgICAgICAgICBpZiAoJHNjaC5kZWZhdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRwYXNzRGF0YSA9ICRkYXRhICsgJ1snICsgJGkgKyAnXSc7XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSAnICBpZiAoJyArICgkcGFzc0RhdGEpICsgJyA9PT0gdW5kZWZpbmVkICc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC5vcHRzLnVzZURlZmF1bHRzID09ICdlbXB0eScpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gJyB8fCAnICsgKCRwYXNzRGF0YSkgKyAnID09PSBudWxsIHx8ICcgKyAoJHBhc3NEYXRhKSArICcgPT09IFxcJ1xcJyAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSAnICkgJyArICgkcGFzc0RhdGEpICsgJyA9ICc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC5vcHRzLnVzZURlZmF1bHRzID09ICdzaGFyZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICcgJyArIChpdC51c2VEZWZhdWx0KCRzY2guZGVmYXVsdCkpICsgJyAnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIG91dCArPSAnICcgKyAoSlNPTi5zdHJpbmdpZnkoJHNjaC5kZWZhdWx0KSkgKyAnICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICc7ICc7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBhcnI1ID0gJHJ1bGVzR3JvdXAucnVsZXM7XG4gICAgICAgICAgaWYgKGFycjUpIHtcbiAgICAgICAgICAgIHZhciAkcnVsZSwgaTUgPSAtMSxcbiAgICAgICAgICAgICAgbDUgPSBhcnI1Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB3aGlsZSAoaTUgPCBsNSkge1xuICAgICAgICAgICAgICAkcnVsZSA9IGFycjVbaTUgKz0gMV07XG4gICAgICAgICAgICAgIGlmICgkc2hvdWxkVXNlUnVsZSgkcnVsZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGNvZGUgPSAkcnVsZS5jb2RlKGl0LCAkcnVsZS5rZXl3b3JkLCAkcnVsZXNHcm91cC50eXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoJGNvZGUpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnICcgKyAoJGNvZGUpICsgJyAnO1xuICAgICAgICAgICAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgJGNsb3NpbmdCcmFjZXMxICs9ICd9JztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAgIG91dCArPSAnICcgKyAoJGNsb3NpbmdCcmFjZXMxKSArICcgJztcbiAgICAgICAgICAgICRjbG9zaW5nQnJhY2VzMSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJHJ1bGVzR3JvdXAudHlwZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgICAgaWYgKCR0eXBlU2NoZW1hICYmICR0eXBlU2NoZW1hID09PSAkcnVsZXNHcm91cC50eXBlICYmICEkY29lcmNlVG9UeXBlcykge1xuICAgICAgICAgICAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgICAgICAgICAgICAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArICcudHlwZScsXG4gICAgICAgICAgICAgICAgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy90eXBlJztcbiAgICAgICAgICAgICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICAgICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgICAgICAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ3R5cGUnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IHR5cGU6IFxcJyc7XG4gICAgICAgICAgICAgICAgaWYgKCR0eXBlSXNBcnJheSkge1xuICAgICAgICAgICAgICAgICAgb3V0ICs9ICcnICsgKCR0eXBlU2NoZW1hLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgb3V0ICs9ICcnICsgKCR0eXBlU2NoZW1hKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3V0ICs9ICdcXCcgfSAnO1xuICAgICAgICAgICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgYmUgJztcbiAgICAgICAgICAgICAgICAgIGlmICgkdHlwZUlzQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICcnICsgKCR0eXBlU2NoZW1hLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJ1xcJyAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgX19lcnIgPSBvdXQ7XG4gICAgICAgICAgICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAgIG91dCArPSAnIGlmIChlcnJvcnMgPT09ICc7XG4gICAgICAgICAgICBpZiAoJHRvcCkge1xuICAgICAgICAgICAgICBvdXQgKz0gJzAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICdlcnJzXycgKyAoJGx2bCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgKz0gJykgeyAnO1xuICAgICAgICAgICAgJGNsb3NpbmdCcmFjZXMyICs9ICd9JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyAnICsgKCRjbG9zaW5nQnJhY2VzMikgKyAnICc7XG4gIH1cbiAgaWYgKCR0b3ApIHtcbiAgICBpZiAoJGFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyBpZiAoZXJyb3JzID09PSAwKSByZXR1cm4gZGF0YTsgICAgICAgICAgICc7XG4gICAgICBvdXQgKz0gJyBlbHNlIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IodkVycm9ycyk7ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IHZFcnJvcnM7ICc7XG4gICAgICBvdXQgKz0gJyByZXR1cm4gZXJyb3JzID09PSAwOyAgICAgICAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9OyByZXR1cm4gdmFsaWRhdGU7JztcbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB2YXIgJyArICgkdmFsaWQpICsgJyA9IGVycm9ycyA9PT0gZXJyc18nICsgKCRsdmwpICsgJzsnO1xuICB9XG4gIG91dCA9IGl0LnV0aWwuY2xlYW5VcENvZGUob3V0KTtcbiAgaWYgKCR0b3ApIHtcbiAgICBvdXQgPSBpdC51dGlsLmZpbmFsQ2xlYW5VcENvZGUob3V0LCAkYXN5bmMpO1xuICB9XG5cbiAgZnVuY3Rpb24gJHNob3VsZFVzZUdyb3VwKCRydWxlc0dyb3VwKSB7XG4gICAgdmFyIHJ1bGVzID0gJHJ1bGVzR3JvdXAucnVsZXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKylcbiAgICAgIGlmICgkc2hvdWxkVXNlUnVsZShydWxlc1tpXSkpIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gJHNob3VsZFVzZVJ1bGUoJHJ1bGUpIHtcbiAgICByZXR1cm4gaXQuc2NoZW1hWyRydWxlLmtleXdvcmRdICE9PSB1bmRlZmluZWQgfHwgKCRydWxlLmltcGxlbWVudHMgJiYgJHJ1bGVJbXBsZW1lbnRzU29tZUtleXdvcmQoJHJ1bGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uICRydWxlSW1wbGVtZW50c1NvbWVLZXl3b3JkKCRydWxlKSB7XG4gICAgdmFyIGltcGwgPSAkcnVsZS5pbXBsZW1lbnRzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW1wbC5sZW5ndGg7IGkrKylcbiAgICAgIGlmIChpdC5zY2hlbWFbaW1wbFtpXV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfX2xpbWl0KGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZXJyb3JLZXl3b3JkO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgdmFyICRpc01heCA9ICRrZXl3b3JkID09ICdtYXhpbXVtJyxcbiAgICAkZXhjbHVzaXZlS2V5d29yZCA9ICRpc01heCA/ICdleGNsdXNpdmVNYXhpbXVtJyA6ICdleGNsdXNpdmVNaW5pbXVtJyxcbiAgICAkc2NoZW1hRXhjbCA9IGl0LnNjaGVtYVskZXhjbHVzaXZlS2V5d29yZF0sXG4gICAgJGlzRGF0YUV4Y2wgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWFFeGNsICYmICRzY2hlbWFFeGNsLiRkYXRhLFxuICAgICRvcCA9ICRpc01heCA/ICc8JyA6ICc+JyxcbiAgICAkbm90T3AgPSAkaXNNYXggPyAnPicgOiAnPCcsXG4gICAgJGVycm9yS2V5d29yZCA9IHVuZGVmaW5lZDtcbiAgaWYgKCRpc0RhdGFFeGNsKSB7XG4gICAgdmFyICRzY2hlbWFWYWx1ZUV4Y2wgPSBpdC51dGlsLmdldERhdGEoJHNjaGVtYUV4Y2wuJGRhdGEsICRkYXRhTHZsLCBpdC5kYXRhUGF0aEFyciksXG4gICAgICAkZXhjbHVzaXZlID0gJ2V4Y2x1c2l2ZScgKyAkbHZsLFxuICAgICAgJGV4Y2xUeXBlID0gJ2V4Y2xUeXBlJyArICRsdmwsXG4gICAgICAkZXhjbElzTnVtYmVyID0gJ2V4Y2xJc051bWJlcicgKyAkbHZsLFxuICAgICAgJG9wRXhwciA9ICdvcCcgKyAkbHZsLFxuICAgICAgJG9wU3RyID0gJ1xcJyArICcgKyAkb3BFeHByICsgJyArIFxcJyc7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYUV4Y2wnICsgKCRsdmwpICsgJyA9ICcgKyAoJHNjaGVtYVZhbHVlRXhjbCkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZUV4Y2wgPSAnc2NoZW1hRXhjbCcgKyAkbHZsO1xuICAgIG91dCArPSAnIHZhciAnICsgKCRleGNsdXNpdmUpICsgJzsgdmFyICcgKyAoJGV4Y2xUeXBlKSArICcgPSB0eXBlb2YgJyArICgkc2NoZW1hVmFsdWVFeGNsKSArICc7IGlmICgnICsgKCRleGNsVHlwZSkgKyAnICE9IFxcJ2Jvb2xlYW5cXCcgJiYgJyArICgkZXhjbFR5cGUpICsgJyAhPSBcXCd1bmRlZmluZWRcXCcgJiYgJyArICgkZXhjbFR5cGUpICsgJyAhPSBcXCdudW1iZXJcXCcpIHsgJztcbiAgICB2YXIgJGVycm9yS2V5d29yZCA9ICRleGNsdXNpdmVLZXl3b3JkO1xuICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ19leGNsdXNpdmVMaW1pdCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHt9ICc7XG4gICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCcnICsgKCRleGNsdXNpdmVLZXl3b3JkKSArICcgc2hvdWxkIGJlIGJvb2xlYW5cXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgdmFyIF9fZXJyID0gb3V0O1xuICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9IGVsc2UgaWYgKCAnO1xuICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICBvdXQgKz0gJyAoJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ251bWJlclxcJykgfHwgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgJyArICgkZXhjbFR5cGUpICsgJyA9PSBcXCdudW1iZXJcXCcgPyAoICgnICsgKCRleGNsdXNpdmUpICsgJyA9ICcgKyAoJHNjaGVtYVZhbHVlKSArICcgPT09IHVuZGVmaW5lZCB8fCAnICsgKCRzY2hlbWFWYWx1ZUV4Y2wpICsgJyAnICsgKCRvcCkgKyAnPSAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnKSA/ICcgKyAoJGRhdGEpICsgJyAnICsgKCRub3RPcCkgKyAnPSAnICsgKCRzY2hlbWFWYWx1ZUV4Y2wpICsgJyA6ICcgKyAoJGRhdGEpICsgJyAnICsgKCRub3RPcCkgKyAnICcgKyAoJHNjaGVtYVZhbHVlKSArICcgKSA6ICggKCcgKyAoJGV4Y2x1c2l2ZSkgKyAnID0gJyArICgkc2NoZW1hVmFsdWVFeGNsKSArICcgPT09IHRydWUpID8gJyArICgkZGF0YSkgKyAnICcgKyAoJG5vdE9wKSArICc9ICcgKyAoJHNjaGVtYVZhbHVlKSArICcgOiAnICsgKCRkYXRhKSArICcgJyArICgkbm90T3ApICsgJyAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICkgfHwgJyArICgkZGF0YSkgKyAnICE9PSAnICsgKCRkYXRhKSArICcpIHsgdmFyIG9wJyArICgkbHZsKSArICcgPSAnICsgKCRleGNsdXNpdmUpICsgJyA/IFxcJycgKyAoJG9wKSArICdcXCcgOiBcXCcnICsgKCRvcCkgKyAnPVxcJzsgJztcbiAgICBpZiAoJHNjaGVtYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAkZXJyb3JLZXl3b3JkID0gJGV4Y2x1c2l2ZUtleXdvcmQ7XG4gICAgICAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAkZXhjbHVzaXZlS2V5d29yZDtcbiAgICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWFWYWx1ZUV4Y2w7XG4gICAgICAkaXNEYXRhID0gJGlzRGF0YUV4Y2w7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciAkZXhjbElzTnVtYmVyID0gdHlwZW9mICRzY2hlbWFFeGNsID09ICdudW1iZXInLFxuICAgICAgJG9wU3RyID0gJG9wO1xuICAgIGlmICgkZXhjbElzTnVtYmVyICYmICRpc0RhdGEpIHtcbiAgICAgIHZhciAkb3BFeHByID0gJ1xcJycgKyAkb3BTdHIgKyAnXFwnJztcbiAgICAgIG91dCArPSAnIGlmICggJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnICgnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mICcgKyAoJHNjaGVtYVZhbHVlKSArICcgIT0gXFwnbnVtYmVyXFwnKSB8fCAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgKCAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnID09PSB1bmRlZmluZWQgfHwgJyArICgkc2NoZW1hRXhjbCkgKyAnICcgKyAoJG9wKSArICc9ICcgKyAoJHNjaGVtYVZhbHVlKSArICcgPyAnICsgKCRkYXRhKSArICcgJyArICgkbm90T3ApICsgJz0gJyArICgkc2NoZW1hRXhjbCkgKyAnIDogJyArICgkZGF0YSkgKyAnICcgKyAoJG5vdE9wKSArICcgJyArICgkc2NoZW1hVmFsdWUpICsgJyApIHx8ICcgKyAoJGRhdGEpICsgJyAhPT0gJyArICgkZGF0YSkgKyAnKSB7ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgkZXhjbElzTnVtYmVyICYmICRzY2hlbWEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAkZXhjbHVzaXZlID0gdHJ1ZTtcbiAgICAgICAgJGVycm9yS2V5d29yZCA9ICRleGNsdXNpdmVLZXl3b3JkO1xuICAgICAgICAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAkZXhjbHVzaXZlS2V5d29yZDtcbiAgICAgICAgJHNjaGVtYVZhbHVlID0gJHNjaGVtYUV4Y2w7XG4gICAgICAgICRub3RPcCArPSAnPSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoJGV4Y2xJc051bWJlcikgJHNjaGVtYVZhbHVlID0gTWF0aFskaXNNYXggPyAnbWluJyA6ICdtYXgnXSgkc2NoZW1hRXhjbCwgJHNjaGVtYSk7XG4gICAgICAgIGlmICgkc2NoZW1hRXhjbCA9PT0gKCRleGNsSXNOdW1iZXIgPyAkc2NoZW1hVmFsdWUgOiB0cnVlKSkge1xuICAgICAgICAgICRleGNsdXNpdmUgPSB0cnVlO1xuICAgICAgICAgICRlcnJvcktleXdvcmQgPSAkZXhjbHVzaXZlS2V5d29yZDtcbiAgICAgICAgICAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAkZXhjbHVzaXZlS2V5d29yZDtcbiAgICAgICAgICAkbm90T3AgKz0gJz0nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRleGNsdXNpdmUgPSBmYWxzZTtcbiAgICAgICAgICAkb3BTdHIgKz0gJz0nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgJG9wRXhwciA9ICdcXCcnICsgJG9wU3RyICsgJ1xcJyc7XG4gICAgICBvdXQgKz0gJyBpZiAoICc7XG4gICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICBvdXQgKz0gJyAoJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ251bWJlclxcJykgfHwgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnICcgKyAoJGRhdGEpICsgJyAnICsgKCRub3RPcCkgKyAnICcgKyAoJHNjaGVtYVZhbHVlKSArICcgfHwgJyArICgkZGF0YSkgKyAnICE9PSAnICsgKCRkYXRhKSArICcpIHsgJztcbiAgICB9XG4gIH1cbiAgJGVycm9yS2V5d29yZCA9ICRlcnJvcktleXdvcmQgfHwgJGtleXdvcmQ7XG4gIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgkZXJyb3JLZXl3b3JkIHx8ICdfbGltaXQnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGNvbXBhcmlzb246ICcgKyAoJG9wRXhwcikgKyAnLCBsaW1pdDogJyArICgkc2NoZW1hVmFsdWUpICsgJywgZXhjbHVzaXZlOiAnICsgKCRleGNsdXNpdmUpICsgJyB9ICc7XG4gICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBiZSAnICsgKCRvcFN0cikgKyAnICc7XG4gICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICBvdXQgKz0gJ1xcJyArICcgKyAoJHNjaGVtYVZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnJyArICgkc2NoZW1hVmFsdWUpICsgJ1xcJyc7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgIG91dCArPSAnICwgc2NoZW1hOiAgJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAndmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyAgICAgICAgICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICB9XG4gIG91dCArPSAnIH0gJztcbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9fbGltaXRJdGVtcyhpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGVycm9yS2V5d29yZDtcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICRpc0RhdGEgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWEgJiYgJHNjaGVtYS4kZGF0YSxcbiAgICAkc2NoZW1hVmFsdWU7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLmdldERhdGEoJHNjaGVtYS4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgfSBlbHNlIHtcbiAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hO1xuICB9XG4gIHZhciAkb3AgPSAka2V5d29yZCA9PSAnbWF4SXRlbXMnID8gJz4nIDogJzwnO1xuICBvdXQgKz0gJ2lmICggJztcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyAoJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ251bWJlclxcJykgfHwgJztcbiAgfVxuICBvdXQgKz0gJyAnICsgKCRkYXRhKSArICcubGVuZ3RoICcgKyAoJG9wKSArICcgJyArICgkc2NoZW1hVmFsdWUpICsgJykgeyAnO1xuICB2YXIgJGVycm9yS2V5d29yZCA9ICRrZXl3b3JkO1xuICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJGVycm9yS2V5d29yZCB8fCAnX2xpbWl0SXRlbXMnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGxpbWl0OiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnIH0gJztcbiAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIE5PVCBoYXZlICc7XG4gICAgICBpZiAoJGtleXdvcmQgPT0gJ21heEl0ZW1zJykge1xuICAgICAgICBvdXQgKz0gJ21vcmUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICdmZXdlcic7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB0aGFuICc7XG4gICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICBvdXQgKz0gJ1xcJyArICcgKyAoJHNjaGVtYVZhbHVlKSArICcgKyBcXCcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcnICsgKCRzY2hlbWEpO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgaXRlbXNcXCcgJztcbiAgICB9XG4gICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6ICAnO1xuICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgb3V0ICs9ICd2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnJyArICgkc2NoZW1hKTtcbiAgICAgIH1cbiAgICAgIG91dCArPSAnICAgICAgICAgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gJztcbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB7fSAnO1xuICB9XG4gIHZhciBfX2VyciA9IG91dDtcbiAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gIH1cbiAgb3V0ICs9ICd9ICc7XG4gIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfX2xpbWl0TGVuZ3RoKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZXJyb3JLZXl3b3JkO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgdmFyICRvcCA9ICRrZXl3b3JkID09ICdtYXhMZW5ndGgnID8gJz4nIDogJzwnO1xuICBvdXQgKz0gJ2lmICggJztcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyAoJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ251bWJlclxcJykgfHwgJztcbiAgfVxuICBpZiAoaXQub3B0cy51bmljb2RlID09PSBmYWxzZSkge1xuICAgIG91dCArPSAnICcgKyAoJGRhdGEpICsgJy5sZW5ndGggJztcbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB1Y3MybGVuZ3RoKCcgKyAoJGRhdGEpICsgJykgJztcbiAgfVxuICBvdXQgKz0gJyAnICsgKCRvcCkgKyAnICcgKyAoJHNjaGVtYVZhbHVlKSArICcpIHsgJztcbiAgdmFyICRlcnJvcktleXdvcmQgPSAka2V5d29yZDtcbiAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ19saW1pdExlbmd0aCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgbGltaXQ6ICcgKyAoJHNjaGVtYVZhbHVlKSArICcgfSAnO1xuICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgTk9UIGJlICc7XG4gICAgICBpZiAoJGtleXdvcmQgPT0gJ21heExlbmd0aCcpIHtcbiAgICAgICAgb3V0ICs9ICdsb25nZXInO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICdzaG9ydGVyJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIHRoYW4gJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnXFwnICsgJyArICgkc2NoZW1hVmFsdWUpICsgJyArIFxcJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyBjaGFyYWN0ZXJzXFwnICc7XG4gICAgfVxuICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgIG91dCArPSAnICwgc2NoZW1hOiAgJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAndmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyAgICAgICAgICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICB9XG4gIG91dCArPSAnfSAnO1xuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnIGVsc2UgeyAnO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX19saW1pdFByb3BlcnRpZXMoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRlcnJvcktleXdvcmQ7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkaXNEYXRhID0gaXQub3B0cy4kZGF0YSAmJiAkc2NoZW1hICYmICRzY2hlbWEuJGRhdGEsXG4gICAgJHNjaGVtYVZhbHVlO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIG91dCArPSAnIHZhciBzY2hlbWEnICsgKCRsdmwpICsgJyA9ICcgKyAoaXQudXRpbC5nZXREYXRhKCRzY2hlbWEuJGRhdGEsICRkYXRhTHZsLCBpdC5kYXRhUGF0aEFycikpICsgJzsgJztcbiAgICAkc2NoZW1hVmFsdWUgPSAnc2NoZW1hJyArICRsdmw7XG4gIH0gZWxzZSB7XG4gICAgJHNjaGVtYVZhbHVlID0gJHNjaGVtYTtcbiAgfVxuICB2YXIgJG9wID0gJGtleXdvcmQgPT0gJ21heFByb3BlcnRpZXMnID8gJz4nIDogJzwnO1xuICBvdXQgKz0gJ2lmICggJztcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyAoJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ251bWJlclxcJykgfHwgJztcbiAgfVxuICBvdXQgKz0gJyBPYmplY3Qua2V5cygnICsgKCRkYXRhKSArICcpLmxlbmd0aCAnICsgKCRvcCkgKyAnICcgKyAoJHNjaGVtYVZhbHVlKSArICcpIHsgJztcbiAgdmFyICRlcnJvcktleXdvcmQgPSAka2V5d29yZDtcbiAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ19saW1pdFByb3BlcnRpZXMnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGxpbWl0OiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnIH0gJztcbiAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIE5PVCBoYXZlICc7XG4gICAgICBpZiAoJGtleXdvcmQgPT0gJ21heFByb3BlcnRpZXMnKSB7XG4gICAgICAgIG91dCArPSAnbW9yZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJ2Zld2VyJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIHRoYW4gJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnXFwnICsgJyArICgkc2NoZW1hVmFsdWUpICsgJyArIFxcJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyBwcm9wZXJ0aWVzXFwnICc7XG4gICAgfVxuICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgIG91dCArPSAnICwgc2NoZW1hOiAgJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAndmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyAgICAgICAgICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICB9XG4gIG91dCArPSAnfSAnO1xuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnIGVsc2UgeyAnO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gbnBtIHBhY2thZ2VzXG52YXIgT2F1dGggPSByZXF1aXJlKCdvYXV0aCcpO1xuXG4vLyBDb3JlIHBhY2thZ2VzXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbi8vIEN1c3RvbSBQYWNrYWdlc1xudmFyIGVycm9yU3RyaW5ncyA9IHJlcXVpcmUoJy4vZXJyb3InKTtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIE9hdXRoVXRpbFxuICovXG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZ2V0IGFuIE9BdXRoIHZlcmlmaWNhdGlvbiBVUkwgdXNpbmcgdGhlIGdpdmVuIEFQSSBjb25maWd1cmF0aW9uLlxuICpcbiAqIEBtZW1iZXJPZiBPYXV0aFV0aWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGluZm9ybWF0aW9uIG5lZWRlZCB0byBhY2Nlc3MgdGhlIEppcmEgQVBJXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnLmhvc3QgVGhlIGhvc3RuYW1lIG9mIHRoZSBKaXJhIEFQSS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLnByb3RvY29sPWh0dHBzXSAtIFRoZSBwcm90b2NvbCB1c2VkIHRvIGFjY3NlcyB0aGUgSmlyYSBBUEkuXG4gKiBAcGFyYW0ge251bWJlcn0gW2NvbmZpZy5wb3J0PTQ0M10gLSBUaGUgcG9ydCBudW1iZXIgdXNlZCB0byBjb25uZWN0IHRvIEppcmEuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbmZpZy5wYXRoX3ByZWZpeD1cIi9cIl0gVGhlIHByZWZpeCB0byB1c2UgaW4gZnJvbnQgb2YgdGhlIHBhdGgsIGlmIEppcmEgaXNuJ3QgYXQgXCIvXCJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLnZlcnNpb249Ml0gLSBUaGUgdmVyc2lvbiBvZiB0aGUgSmlyYSBBUEkgdG8gd2hpY2ggeW91IHdpbGwgYmUgY29ubmVjdGluZy4gIEN1cnJlbnRseSwgb25seVxuICogICAgIHZlcnNpb24gMiBpcyBzdXBwb3J0ZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnLm9hdXRoIFRoZSBvYXV0aCBpbmZvcm1hdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IGNvbmZpZy5vYXV0aC5jb25zdW1lcl9rZXkgVGhlIGNvbnN1bWVyIGtleSBvZiB0aGUgYXBwbGljYXRpb24gYWNjZXNzaW5nIEppcmEuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnLm9hdXRoLnByaXZhdGVfa2V5IFRoZSBwcml2YXRlIGtleSBvZiB0aGUgYXBwbGljYXRpb24gYWNjZXNzaW5nIEppcmEuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbmZpZy5vYXV0aC5jYWxsYmFja191cmxdIFRoZSBjYWxsYmFjayBVUkwgdG8gYmUgY2FsbGVkIGFmdGVyIHRoZSB0b2tlbiBpcyBnZW5lcmF0ZWQuICBJZiB0aGlzIGlzXG4gKiAgICAgbm90IGluY2x1ZGVkLCB0aGUgdXNlciB3aWxsIGJlIGdpdmVuIGEgdmVyaWZpY2F0aW9uIGNvZGUgYWZ0ZXIgYXV0aG9yaXppbmcgdGhlIHRva2VuLCBpbnN0ZWFkIG9mIEppcmEgbWFraW5nIGFcbiAqICAgICBjYWxsYmFjayB0byB0aGUgYXBwbGljYXRpb24uXG4gKiBAcGFyYW0ge09hdXRoVXRpbH5nZXRPYXV0aFVybENhbGxiYWNrfSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIFVSTCBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gKi9cbmV4cG9ydHMuZ2V0QXV0aG9yaXplVVJMID0gZnVuY3Rpb24gKGNvbmZpZywgY2FsbGJhY2spIHtcbiAgICB2YXIgcHJlZml4ID0gY29uZmlnLnBhdGhfcHJlZml4ID8gY29uZmlnLnBhdGhfcHJlZml4IDogJyc7XG4gICAgdmFyIEFVVEhfVE9LRU5fQVBQRU5EID0gJy9vYXV0aC9hdXRob3JpemUnO1xuICAgIHZhciBTRVJWTEVUX0JBU0VfVVJMID0gcHJlZml4ICsgJy9wbHVnaW5zL3NlcnZsZXQnO1xuXG4gICAgdmFyIGF1dGhVUkwgPSB1cmwuZm9ybWF0KHtcbiAgICAgICAgcHJvdG9jb2w6IGNvbmZpZy5wcm90b2NvbCA/IGNvbmZpZy5wcm90b2NvbCA6ICdodHRwcycsXG4gICAgICAgIGhvc3RuYW1lOiBjb25maWcuaG9zdCxcbiAgICAgICAgcG9ydDogY29uZmlnLnBvcnQgPyBjb25maWcucG9ydCA6IG51bGwsXG4gICAgICAgIHBhdGhuYW1lOiBTRVJWTEVUX0JBU0VfVVJMICsgQVVUSF9UT0tFTl9BUFBFTkRcbiAgICB9KTtcblxuICAgIHZhciBvYXV0aCA9IGdlbmVyYXRlT0F1dGhPYmplY3QoY29uZmlnKTtcblxuICAgIG9hdXRoLmdldE9BdXRoUmVxdWVzdFRva2VuKGZ1bmN0aW9uIChlcnIsIHRva2VuLCB0b2tlbl9zZWNyZXQpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHt1cmw6IGF1dGhVUkwgKyBcIj9vYXV0aF90b2tlbj1cIiArIHRva2VuLCB0b2tlbjogdG9rZW4sIHRva2VuX3NlY3JldDogdG9rZW5fc2VjcmV0fSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIEdpdmVuIGFuIE9BdXRoIHRva2VuLCB0aGUgdG9rZW4gc2VjcmV0LCBhbmQgYW4gYWNjZXNzIHZlcmlmaWNhdGlvbiBjb2RlIChwcm92aWRlZCBieSBKaXJhKSwgc3dhcCBhbiBPQXV0aCByZXF1ZXN0XG4gKiB0b2tlbiB3aXRoIGFuIE9BdXRoIGFjY2VzcyB0b2tlbi5cbiAqXG4gKiBAbWVtYmVyT2YgT2F1dGhVdGlsXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBpbmZvcm1hdGlvbiBuZWVkZWQgdG8gYWNjZXNzIHRoZSBKaXJhIEFQSVxuICogQHBhcmFtIHtzdHJpbmd9IGNvbmZpZy5ob3N0IFRoZSBob3N0bmFtZSBvZiB0aGUgSmlyYSBBUEkuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbmZpZy5wcm90b2NvbD1odHRwc10gLSBUaGUgcHJvdG9jb2wgdXNlZCB0byBhY2NzZXMgdGhlIEppcmEgQVBJLlxuICogQHBhcmFtIHtudW1iZXJ9IFtjb25maWcucG9ydD00NDNdIC0gVGhlIHBvcnQgbnVtYmVyIHVzZWQgdG8gY29ubmVjdCB0byBKaXJhLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb25maWcudmVyc2lvbj0yXSAtIFRoZSB2ZXJzaW9uIG9mIHRoZSBKaXJhIEFQSSB0byB3aGljaCB5b3Ugd2lsbCBiZSBjb25uZWN0aW5nLiAgQ3VycmVudGx5LCBvbmx5XG4gKiAgICAgdmVyc2lvbiAyIGlzIHN1cHBvcnRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcub2F1dGggVGhlIG9hdXRoIGluZm9ybWF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnLm9hdXRoLmNvbnN1bWVyX2tleSBUaGUgY29uc3VtZXIga2V5IG9mIHRoZSBhcHBsaWNhdGlvbiBhY2Nlc3NpbmcgSmlyYS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWcub2F1dGgucHJpdmF0ZV9rZXkgVGhlIHByaXZhdGUga2V5IG9mIHRoZSBhcHBsaWNhdGlvbiBhY2Nlc3NpbmcgSmlyYS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWcub2F1dGgudG9rZW4gVGhlIE9BdXRoIFRva2VuIHN1cHBsaWVkIGJ5IEppcmEuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnLm9hdXRoLnRva2VuX3NlY3JldCBUaGUgT0F1dGggVG9rZW4gc2VjcmV0IHN1cHBsaWVkIGJ5IEppcmEuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnLm9hdXRoLm9hdXRoX3ZlcmlmaWVyIFRoZSB2ZXJpZmllZCBjb2RlIGdpdmVuIHRvIHRoZSB1c2VyIGFmdGVyIGF1dGhvcml6aW5nIHRoZSBPQXV0aCB0b2tlbi5cbiAqIEBwYXJhbSB7T2F1dGhVdGlsfnN3YXBSZXF1ZXN0VG9rZW5DYWxsYmFja30gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSB0b2tlbiBoYXMgYmVlbiBzd2FwcGVkLlxuICovXG5leHBvcnRzLnN3YXBSZXF1ZXN0VG9rZW5XaXRoQWNjZXNzVG9rZW4gPSBmdW5jdGlvbihjb25maWcsIGNhbGxiYWNrKSB7XG4gICAgaWYoIWNvbmZpZy5vYXV0aC5vYXV0aF92ZXJpZmllcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX1ZFUklGSUVSX0VSUk9SKTtcbiAgICB9XG5cbiAgICB2YXIgb2F1dGggPSBnZW5lcmF0ZU9BdXRoT2JqZWN0KGNvbmZpZyk7XG5cbiAgICB2YXIgdG9rZW4gPSBjb25maWcub2F1dGgudG9rZW47XG4gICAgdmFyIHNlY3JldCA9IGNvbmZpZy5vYXV0aC50b2tlbl9zZWNyZXQ7XG4gICAgdmFyIHZlcmlmaWVyID0gY29uZmlnLm9hdXRoLm9hdXRoX3ZlcmlmaWVyO1xuXG4gICAgb2F1dGguZ2V0T0F1dGhBY2Nlc3NUb2tlbih0b2tlbiwgc2VjcmV0LCB2ZXJpZmllciwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIE9BdXRoIG9iamVjdC5cbiAqXG4gKiBAbWVtYmVyT2YgT2F1dGhVdGlsXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBpbmZvcm1hdGlvbiBuZWVkZWQgdG8gYWNjZXNzIHRoZSBKaXJhIEFQSVxuICogQHBhcmFtIHtzdHJpbmd9IGNvbmZpZy5ob3N0IFRoZSBob3N0bmFtZSBvZiB0aGUgSmlyYSBBUEkuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbmZpZy5wcm90b2NvbD1odHRwc10gLSBUaGUgcHJvdG9jb2wgdXNlZCB0byBhY2NzZXMgdGhlIEppcmEgQVBJLlxuICogQHBhcmFtIHtudW1iZXJ9IFtjb25maWcucG9ydD00NDNdIC0gVGhlIHBvcnQgbnVtYmVyIHVzZWQgdG8gY29ubmVjdCB0byBKaXJhLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb25maWcucGF0aF9wcmVmaXg9XCIvXCJdIFRoZSBwcmVmaXggdG8gdXNlIGluIGZyb250IG9mIHRoZSBwYXRoLCBpZiBKaXJhIGlzbid0IGF0IFwiL1wiXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbmZpZy52ZXJzaW9uPTJdIC0gVGhlIHZlcnNpb24gb2YgdGhlIEppcmEgQVBJIHRvIHdoaWNoIHlvdSB3aWxsIGJlIGNvbm5lY3RpbmcuICBDdXJyZW50bHksIG9ubHlcbiAqICAgICB2ZXJzaW9uIDIgaXMgc3VwcG9ydGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZy5vYXV0aCBUaGUgb2F1dGggaW5mb3JtYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWcub2F1dGguY29uc3VtZXJfa2V5IFRoZSBjb25zdW1lciBrZXkgb2YgdGhlIGFwcGxpY2F0aW9uIGFjY2Vzc2luZyBKaXJhLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbmZpZy5vYXV0aC5wcml2YXRlX2tleSBUaGUgcHJpdmF0ZSBrZXkgb2YgdGhlIGFwcGxpY2F0aW9uIGFjY2Vzc2luZyBKaXJhLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb25maWcub2F1dGguY2FsbGJhY2tfdXJsXSBUaGUgY2FsbGJhY2sgVVJMIHRvIGJlIGNhbGxlZCBhZnRlciB0aGUgdG9rZW4gaXMgZ2VuZXJhdGVkLiAgSWYgdGhpcyBpc1xuICogICAgIG5vdCBpbmNsdWRlZCwgdGhlIHVzZXIgd2lsbCBiZSBnaXZlbiBhIHZlcmlmaWNhdGlvbiBjb2RlIGFmdGVyIGF1dGhvcml6aW5nIHRoZSB0b2tlbiwgaW5zdGVhZCBvZiBKaXJhIG1ha2luZyBhXG4gKiAgICAgY2FsbGJhY2sgdG8gdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtleHBvcnRzLk9BdXRofSBUaGUgZ2VuZXJhdGVkIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVPQXV0aE9iamVjdChjb25maWcpIHtcbiAgICB2YXIgcHJlZml4ID0gY29uZmlnLnBhdGhfcHJlZml4ID8gY29uZmlnLnBhdGhfcHJlZml4IDogJyc7XG4gICAgdmFyIFNFUlZMRVRfQkFTRV9VUkwgPSBwcmVmaXggKyAnL3BsdWdpbnMvc2VydmxldCc7XG4gICAgdmFyIFJFUV9UT0tFTl9BUFBFTkQgPSAnL29hdXRoL3JlcXVlc3QtdG9rZW4nO1xuXG4gICAgdmFyIEFDQ0VTU19UT0tFTl9BUFBFTkQgPSAnL29hdXRoL2FjY2Vzcy10b2tlbic7XG4gICAgdmFyIHNpZyA9ICdSU0EtU0hBMSc7XG5cbiAgICBpZiAoIWNvbmZpZy5ob3N0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fSE9TVF9FUlJPUik7XG4gICAgfSBlbHNlIGlmICghY29uZmlnLm9hdXRoLmNvbnN1bWVyX2tleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0NPTlNVTUVSX0tFWV9FUlJPUik7XG4gICAgfSBlbHNlIGlmICghY29uZmlnLm9hdXRoLnByaXZhdGVfa2V5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fUFJJVkFURV9LRVlfRVJST1IpO1xuICAgIH1cblxuICAgIHZhciBjb25zdW1lcl9rZXkgPSBjb25maWcub2F1dGguY29uc3VtZXJfa2V5O1xuICAgIHZhciBwcml2YXRlX2tleSA9IGNvbmZpZy5vYXV0aC5wcml2YXRlX2tleTtcblxuICAgIHZhciByZXFVUkwgPSB1cmwuZm9ybWF0KHtcbiAgICAgICAgcHJvdG9jb2w6IGNvbmZpZy5wcm90b2NvbCA/IGNvbmZpZy5wcm90b2NvbCA6ICdodHRwcycsXG4gICAgICAgIGhvc3RuYW1lOiBjb25maWcuaG9zdCxcbiAgICAgICAgcG9ydDogY29uZmlnLnBvcnQgPyBjb25maWcucG9ydCA6IG51bGwsXG4gICAgICAgIHBhdGhuYW1lOiBTRVJWTEVUX0JBU0VfVVJMICsgUkVRX1RPS0VOX0FQUEVORFxuICAgIH0pO1xuXG4gICAgdmFyIGFjY2Vzc1VSTCA9IHVybC5mb3JtYXQoe1xuICAgICAgICBwcm90b2NvbDogY29uZmlnLnByb3RvY29sID8gY29uZmlnLnByb3RvY29sIDogJ2h0dHBzJyxcbiAgICAgICAgaG9zdG5hbWU6IGNvbmZpZy5ob3N0LFxuICAgICAgICBwb3J0OiBjb25maWcucG9ydCA/IGNvbmZpZy5wb3J0IDogbnVsbCxcbiAgICAgICAgcGF0aG5hbWU6IFNFUlZMRVRfQkFTRV9VUkwgKyBBQ0NFU1NfVE9LRU5fQVBQRU5EXG4gICAgfSk7XG5cbiAgICB2YXIgY2IgPSBjb25maWcub2F1dGguY2FsbGJhY2tfdXJsID8gY29uZmlnLm9hdXRoLmNhbGxiYWNrX3VybCA6ICdvb2InO1xuXG4gICAgcmV0dXJuIG5ldyBPYXV0aC5PQXV0aChyZXFVUkwsIGFjY2Vzc1VSTCwgY29uc3VtZXJfa2V5LCBwcml2YXRlX2tleSwgJzEuMCcsIGNiLCBzaWcpO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIHVzZWQgYnkgZ2V0T2F1dGhVcmwuXG4gKiBAY2FsbGJhY2sgT2F1dGhVdGlsfmdldE9hdXRoVXJsQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gZXJyb3IgVGhlIGVycm9yIHdoaWNoIG9jY3VycmVkLCBpZiBhbnkuXG4gKiBAcGFyYW0ge09iamVjdH0gb2F1dGggVGhlIE9BdXRoIGluZm9ybWF0aW9uIHJldHJpZXZlZCBmcm9tIHRoZSBKaXJhIEFQSS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBvYXV0aC51cmwgVGhlIFVSTCB0aGF0IHNob3VsZCBiZSB2aXNpdGVkIGJ5IHRoZSB1c2VyIHRvIHZlcmlmeSB0aGUgT0F1dGggYWNjZXNzLlxuICogQHBhcmFtIHtTdHJpbmd9IG9hdXRoLnRva2VuIFRoZSBPQXV0aCBUb2tlbiByZXRyaWV2ZWQgZnJvbSB0aGUgSmlyYSBBUEkuXG4gKiBAcGFyYW0ge1N0cmluZ30gb2F1dGgudG9rZW5fc2VjcmV0IFRoZSBPQXV0aCBUb2tlbiBTZWNyZXQgcmV0cmlldmVkIGZyb20gdGhlIEppcmEgQVBJLlxuICovXG5cbi8qKlxuICogQ2FsbGJhY2sgdXNlZCBieSBzd2FwUmVxdWVzdFRva2VuV2l0aEFjY2Vzc1Rva2VuXG4gKiBAY2FsbGJhY2sgT2F1dGhVdGlsfnN3YXBSZXF1ZXN0VG9rZW5DYWxsYmFja1xuICogQHBhcmFtIHsqfSBlcnJvciBUaGUgZXJyb3Igd2hpY2ggb2NjdXJyZWQsIGlmIGFueS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhY2Nlc3NfdG9rZW4gVGhlIGFjY2VzcyB0b2tlbiByZXRyaWV2ZWQgZnJvbSBKaXJhLlxuICovXG4iLCJ2YXIgY3J5cHRvPSByZXF1aXJlKCdjcnlwdG8nKSxcbiAgICBzaGExPSByZXF1aXJlKCcuL3NoYTEnKSxcbiAgICBodHRwPSByZXF1aXJlKCdodHRwJyksXG4gICAgaHR0cHM9IHJlcXVpcmUoJ2h0dHBzJyksXG4gICAgVVJMPSByZXF1aXJlKCd1cmwnKSxcbiAgICBxdWVyeXN0cmluZz0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKSxcbiAgICBPQXV0aFV0aWxzPSByZXF1aXJlKCcuL191dGlscycpO1xuXG5leHBvcnRzLk9BdXRoPSBmdW5jdGlvbihyZXF1ZXN0VXJsLCBhY2Nlc3NVcmwsIGNvbnN1bWVyS2V5LCBjb25zdW1lclNlY3JldCwgdmVyc2lvbiwgYXV0aG9yaXplX2NhbGxiYWNrLCBzaWduYXR1cmVNZXRob2QsIG5vbmNlU2l6ZSwgY3VzdG9tSGVhZGVycykge1xuICB0aGlzLl9pc0VjaG8gPSBmYWxzZTtcblxuICB0aGlzLl9yZXF1ZXN0VXJsPSByZXF1ZXN0VXJsO1xuICB0aGlzLl9hY2Nlc3NVcmw9IGFjY2Vzc1VybDtcbiAgdGhpcy5fY29uc3VtZXJLZXk9IGNvbnN1bWVyS2V5O1xuICB0aGlzLl9jb25zdW1lclNlY3JldD0gdGhpcy5fZW5jb2RlRGF0YSggY29uc3VtZXJTZWNyZXQgKTtcbiAgaWYgKHNpZ25hdHVyZU1ldGhvZCA9PSBcIlJTQS1TSEExXCIpIHtcbiAgICB0aGlzLl9wcml2YXRlS2V5ID0gY29uc3VtZXJTZWNyZXQ7XG4gIH1cbiAgdGhpcy5fdmVyc2lvbj0gdmVyc2lvbjtcbiAgaWYoIGF1dGhvcml6ZV9jYWxsYmFjayA9PT0gdW5kZWZpbmVkICkge1xuICAgIHRoaXMuX2F1dGhvcml6ZV9jYWxsYmFjaz0gXCJvb2JcIjtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLl9hdXRob3JpemVfY2FsbGJhY2s9IGF1dGhvcml6ZV9jYWxsYmFjaztcbiAgfVxuXG4gIGlmKCBzaWduYXR1cmVNZXRob2QgIT0gXCJQTEFJTlRFWFRcIiAmJiBzaWduYXR1cmVNZXRob2QgIT0gXCJITUFDLVNIQTFcIiAmJiBzaWduYXR1cmVNZXRob2QgIT0gXCJSU0EtU0hBMVwiKVxuICAgIHRocm93IG5ldyBFcnJvcihcIlVuLXN1cHBvcnRlZCBzaWduYXR1cmUgbWV0aG9kOiBcIiArIHNpZ25hdHVyZU1ldGhvZCApXG4gIHRoaXMuX3NpZ25hdHVyZU1ldGhvZD0gc2lnbmF0dXJlTWV0aG9kO1xuICB0aGlzLl9ub25jZVNpemU9IG5vbmNlU2l6ZSB8fCAzMjtcbiAgdGhpcy5faGVhZGVycz0gY3VzdG9tSGVhZGVycyB8fCB7XCJBY2NlcHRcIiA6IFwiKi8qXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29ubmVjdGlvblwiIDogXCJjbG9zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlVzZXItQWdlbnRcIiA6IFwiTm9kZSBhdXRoZW50aWNhdGlvblwifVxuICB0aGlzLl9jbGllbnRPcHRpb25zPSB0aGlzLl9kZWZhdWx0Q2xpZW50T3B0aW9ucz0ge1wicmVxdWVzdFRva2VuSHR0cE1ldGhvZFwiOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFjY2Vzc1Rva2VuSHR0cE1ldGhvZFwiOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvbGxvd1JlZGlyZWN0c1wiOiB0cnVlfTtcbiAgdGhpcy5fb2F1dGhQYXJhbWV0ZXJTZXBlcmF0b3IgPSBcIixcIjtcbn07XG5cbmV4cG9ydHMuT0F1dGhFY2hvPSBmdW5jdGlvbihyZWFsbSwgdmVyaWZ5X2NyZWRlbnRpYWxzLCBjb25zdW1lcktleSwgY29uc3VtZXJTZWNyZXQsIHZlcnNpb24sIHNpZ25hdHVyZU1ldGhvZCwgbm9uY2VTaXplLCBjdXN0b21IZWFkZXJzKSB7XG4gIHRoaXMuX2lzRWNobyA9IHRydWU7XG5cbiAgdGhpcy5fcmVhbG09IHJlYWxtO1xuICB0aGlzLl92ZXJpZnlDcmVkZW50aWFscyA9IHZlcmlmeV9jcmVkZW50aWFscztcbiAgdGhpcy5fY29uc3VtZXJLZXk9IGNvbnN1bWVyS2V5O1xuICB0aGlzLl9jb25zdW1lclNlY3JldD0gdGhpcy5fZW5jb2RlRGF0YSggY29uc3VtZXJTZWNyZXQgKTtcbiAgaWYgKHNpZ25hdHVyZU1ldGhvZCA9PSBcIlJTQS1TSEExXCIpIHtcbiAgICB0aGlzLl9wcml2YXRlS2V5ID0gY29uc3VtZXJTZWNyZXQ7XG4gIH1cbiAgdGhpcy5fdmVyc2lvbj0gdmVyc2lvbjtcblxuICBpZiggc2lnbmF0dXJlTWV0aG9kICE9IFwiUExBSU5URVhUXCIgJiYgc2lnbmF0dXJlTWV0aG9kICE9IFwiSE1BQy1TSEExXCIgJiYgc2lnbmF0dXJlTWV0aG9kICE9IFwiUlNBLVNIQTFcIilcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbi1zdXBwb3J0ZWQgc2lnbmF0dXJlIG1ldGhvZDogXCIgKyBzaWduYXR1cmVNZXRob2QgKTtcbiAgdGhpcy5fc2lnbmF0dXJlTWV0aG9kPSBzaWduYXR1cmVNZXRob2Q7XG4gIHRoaXMuX25vbmNlU2l6ZT0gbm9uY2VTaXplIHx8IDMyO1xuICB0aGlzLl9oZWFkZXJzPSBjdXN0b21IZWFkZXJzIHx8IHtcIkFjY2VwdFwiIDogXCIqLypcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb25uZWN0aW9uXCIgOiBcImNsb3NlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVXNlci1BZ2VudFwiIDogXCJOb2RlIGF1dGhlbnRpY2F0aW9uXCJ9O1xuICB0aGlzLl9vYXV0aFBhcmFtZXRlclNlcGVyYXRvciA9IFwiLFwiO1xufVxuXG5leHBvcnRzLk9BdXRoRWNoby5wcm90b3R5cGUgPSBleHBvcnRzLk9BdXRoLnByb3RvdHlwZTtcblxuZXhwb3J0cy5PQXV0aC5wcm90b3R5cGUuX2dldFRpbWVzdGFtcD0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKCAobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMCApO1xufVxuXG5leHBvcnRzLk9BdXRoLnByb3RvdHlwZS5fZW5jb2RlRGF0YT0gZnVuY3Rpb24odG9FbmNvZGUpe1xuIGlmKCB0b0VuY29kZSA9PSBudWxsIHx8IHRvRW5jb2RlID09IFwiXCIgKSByZXR1cm4gXCJcIlxuIGVsc2Uge1xuICAgIHZhciByZXN1bHQ9IGVuY29kZVVSSUNvbXBvbmVudCh0b0VuY29kZSk7XG4gICAgLy8gRml4IHRoZSBtaXNtYXRjaCBiZXR3ZWVuIE9BdXRoJ3MgIFJGQzM5ODYncyBhbmQgSmF2YXNjcmlwdCdzIGJlbGllZnMgaW4gd2hhdCBpcyByaWdodCBhbmQgd3JvbmcgOylcbiAgICByZXR1cm4gcmVzdWx0LnJlcGxhY2UoL1xcIS9nLCBcIiUyMVwiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwnL2csIFwiJTI3XCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCgvZywgXCIlMjhcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcKS9nLCBcIiUyOVwiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwqL2csIFwiJTJBXCIpO1xuIH1cbn1cblxuZXhwb3J0cy5PQXV0aC5wcm90b3R5cGUuX2RlY29kZURhdGE9IGZ1bmN0aW9uKHRvRGVjb2RlKSB7XG4gIGlmKCB0b0RlY29kZSAhPSBudWxsICkge1xuICAgIHRvRGVjb2RlID0gdG9EZWNvZGUucmVwbGFjZSgvXFwrL2csIFwiIFwiKTtcbiAgfVxuICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KCB0b0RlY29kZSk7XG59XG5cbmV4cG9ydHMuT0F1dGgucHJvdG90eXBlLl9nZXRTaWduYXR1cmU9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBwYXJhbWV0ZXJzLCB0b2tlblNlY3JldCkge1xuICB2YXIgc2lnbmF0dXJlQmFzZT0gdGhpcy5fY3JlYXRlU2lnbmF0dXJlQmFzZShtZXRob2QsIHVybCwgcGFyYW1ldGVycyk7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVTaWduYXR1cmUoIHNpZ25hdHVyZUJhc2UsIHRva2VuU2VjcmV0ICk7XG59XG5cbmV4cG9ydHMuT0F1dGgucHJvdG90eXBlLl9ub3JtYWxpemVVcmw9IGZ1bmN0aW9uKHVybCkge1xuICB2YXIgcGFyc2VkVXJsPSBVUkwucGFyc2UodXJsLCB0cnVlKVxuICAgdmFyIHBvcnQgPVwiXCI7XG4gICBpZiggcGFyc2VkVXJsLnBvcnQgKSB7XG4gICAgIGlmKCAocGFyc2VkVXJsLnByb3RvY29sID09IFwiaHR0cDpcIiAmJiBwYXJzZWRVcmwucG9ydCAhPSBcIjgwXCIgKSB8fFxuICAgICAgICAgKHBhcnNlZFVybC5wcm90b2NvbCA9PSBcImh0dHBzOlwiICYmIHBhcnNlZFVybC5wb3J0ICE9IFwiNDQzXCIpICkge1xuICAgICAgICAgICBwb3J0PSBcIjpcIiArIHBhcnNlZFVybC5wb3J0O1xuICAgICAgICAgfVxuICAgfVxuXG4gIGlmKCAhcGFyc2VkVXJsLnBhdGhuYW1lICB8fCBwYXJzZWRVcmwucGF0aG5hbWUgPT0gXCJcIiApIHBhcnNlZFVybC5wYXRobmFtZSA9XCIvXCI7XG5cbiAgcmV0dXJuIHBhcnNlZFVybC5wcm90b2NvbCArIFwiLy9cIiArIHBhcnNlZFVybC5ob3N0bmFtZSArIHBvcnQgKyBwYXJzZWRVcmwucGF0aG5hbWU7XG59XG5cbi8vIElzIHRoZSBwYXJhbWV0ZXIgY29uc2lkZXJlZCBhbiBPQXV0aCBwYXJhbWV0ZXJcbmV4cG9ydHMuT0F1dGgucHJvdG90eXBlLl9pc1BhcmFtZXRlck5hbWVBbk9BdXRoUGFyYW1ldGVyPSBmdW5jdGlvbihwYXJhbWV0ZXIpIHtcbiAgdmFyIG0gPSBwYXJhbWV0ZXIubWF0Y2goJ15vYXV0aF8nKTtcbiAgaWYoIG0gJiYgKCBtWzBdID09PSBcIm9hdXRoX1wiICkgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBidWlsZCB0aGUgT0F1dGggcmVxdWVzdCBhdXRob3JpemF0aW9uIGhlYWRlclxuZXhwb3J0cy5PQXV0aC5wcm90b3R5cGUuX2J1aWxkQXV0aG9yaXphdGlvbkhlYWRlcnM9IGZ1bmN0aW9uKG9yZGVyZWRQYXJhbWV0ZXJzKSB7XG4gIHZhciBhdXRoSGVhZGVyPVwiT0F1dGggXCI7XG4gIGlmKCB0aGlzLl9pc0VjaG8gKSB7XG4gICAgYXV0aEhlYWRlciArPSAncmVhbG09XCInICsgdGhpcy5fcmVhbG0gKyAnXCIsJztcbiAgfVxuXG4gIGZvciggdmFyIGk9IDAgOyBpIDwgb3JkZXJlZFBhcmFtZXRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgLy8gV2hpbHN0IHRoZSBhbGwgdGhlIHBhcmFtZXRlcnMgc2hvdWxkIGJlIGluY2x1ZGVkIHdpdGhpbiB0aGUgc2lnbmF0dXJlLCBvbmx5IHRoZSBvYXV0aF8gYXJndW1lbnRzXG4gICAgIC8vIHNob3VsZCBhcHBlYXIgd2l0aGluIHRoZSBhdXRob3JpemF0aW9uIGhlYWRlci5cbiAgICAgaWYoIHRoaXMuX2lzUGFyYW1ldGVyTmFtZUFuT0F1dGhQYXJhbWV0ZXIob3JkZXJlZFBhcmFtZXRlcnNbaV1bMF0pICkge1xuICAgICAgYXV0aEhlYWRlcis9IFwiXCIgKyB0aGlzLl9lbmNvZGVEYXRhKG9yZGVyZWRQYXJhbWV0ZXJzW2ldWzBdKStcIj1cXFwiXCIrIHRoaXMuX2VuY29kZURhdGEob3JkZXJlZFBhcmFtZXRlcnNbaV1bMV0pK1wiXFxcIlwiKyB0aGlzLl9vYXV0aFBhcmFtZXRlclNlcGVyYXRvcjtcbiAgICAgfVxuICB9XG5cbiAgYXV0aEhlYWRlcj0gYXV0aEhlYWRlci5zdWJzdHJpbmcoMCwgYXV0aEhlYWRlci5sZW5ndGgtdGhpcy5fb2F1dGhQYXJhbWV0ZXJTZXBlcmF0b3IubGVuZ3RoKTtcbiAgcmV0dXJuIGF1dGhIZWFkZXI7XG59XG5cbi8vIFRha2VzIGFuIG9iamVjdCBsaXRlcmFsIHRoYXQgcmVwcmVzZW50cyB0aGUgYXJndW1lbnRzLCBhbmQgcmV0dXJucyBhbiBhcnJheVxuLy8gb2YgYXJndW1lbnQvdmFsdWUgcGFpcnMuXG5leHBvcnRzLk9BdXRoLnByb3RvdHlwZS5fbWFrZUFycmF5T2ZBcmd1bWVudHNIYXNoPSBmdW5jdGlvbihhcmd1bWVudHNIYXNoKSB7XG4gIHZhciBhcmd1bWVudF9wYWlycz0gW107XG4gIGZvcih2YXIga2V5IGluIGFyZ3VtZW50c0hhc2ggKSB7XG4gICAgaWYgKGFyZ3VtZW50c0hhc2guaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgIHZhciB2YWx1ZT0gYXJndW1lbnRzSGFzaFtrZXldO1xuICAgICAgIGlmKCBBcnJheS5pc0FycmF5KHZhbHVlKSApIHtcbiAgICAgICAgIGZvcih2YXIgaT0wO2k8dmFsdWUubGVuZ3RoO2krKykge1xuICAgICAgICAgICBhcmd1bWVudF9wYWlyc1thcmd1bWVudF9wYWlycy5sZW5ndGhdPSBba2V5LCB2YWx1ZVtpXV07XG4gICAgICAgICB9XG4gICAgICAgfVxuICAgICAgIGVsc2Uge1xuICAgICAgICAgYXJndW1lbnRfcGFpcnNbYXJndW1lbnRfcGFpcnMubGVuZ3RoXT0gW2tleSwgdmFsdWVdO1xuICAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyZ3VtZW50X3BhaXJzO1xufVxuXG4vLyBTb3J0cyB0aGUgZW5jb2RlZCBrZXkgdmFsdWUgcGFpcnMgYnkgZW5jb2RlZCBuYW1lLCB0aGVuIGVuY29kZWQgdmFsdWVcbmV4cG9ydHMuT0F1dGgucHJvdG90eXBlLl9zb3J0UmVxdWVzdFBhcmFtcz0gZnVuY3Rpb24oYXJndW1lbnRfcGFpcnMpIHtcbiAgLy8gU29ydCBieSBuYW1lLCB0aGVuIHZhbHVlLlxuICBhcmd1bWVudF9wYWlycy5zb3J0KGZ1bmN0aW9uKGEsYikge1xuICAgICAgaWYgKCBhWzBdPT0gYlswXSApICB7XG4gICAgICAgIHJldHVybiBhWzFdIDwgYlsxXSA/IC0xIDogMTtcbiAgICAgIH1cbiAgICAgIGVsc2UgcmV0dXJuIGFbMF0gPCBiWzBdID8gLTEgOiAxO1xuICB9KTtcblxuICByZXR1cm4gYXJndW1lbnRfcGFpcnM7XG59XG5cbmV4cG9ydHMuT0F1dGgucHJvdG90eXBlLl9ub3JtYWxpc2VSZXF1ZXN0UGFyYW1zPSBmdW5jdGlvbihhcmdzKSB7XG4gIHZhciBhcmd1bWVudF9wYWlycz0gdGhpcy5fbWFrZUFycmF5T2ZBcmd1bWVudHNIYXNoKGFyZ3MpO1xuICAvLyBGaXJzdCBlbmNvZGUgdGhlbSAjMy40LjEuMy4yIC4xXG4gIGZvcih2YXIgaT0wO2k8YXJndW1lbnRfcGFpcnMubGVuZ3RoO2krKykge1xuICAgIGFyZ3VtZW50X3BhaXJzW2ldWzBdPSB0aGlzLl9lbmNvZGVEYXRhKCBhcmd1bWVudF9wYWlyc1tpXVswXSApO1xuICAgIGFyZ3VtZW50X3BhaXJzW2ldWzFdPSB0aGlzLl9lbmNvZGVEYXRhKCBhcmd1bWVudF9wYWlyc1tpXVsxXSApO1xuICB9XG5cbiAgLy8gVGhlbiBzb3J0IHRoZW0gIzMuNC4xLjMuMiAuMlxuICBhcmd1bWVudF9wYWlycz0gdGhpcy5fc29ydFJlcXVlc3RQYXJhbXMoIGFyZ3VtZW50X3BhaXJzICk7XG5cbiAgLy8gVGhlbiBjb25jYXRlbmF0ZSB0b2dldGhlciAjMy40LjEuMy4yIC4zICYgLjRcbiAgdmFyIGFyZ3M9IFwiXCI7XG4gIGZvcih2YXIgaT0wO2k8YXJndW1lbnRfcGFpcnMubGVuZ3RoO2krKykge1xuICAgICAgYXJncys9IGFyZ3VtZW50X3BhaXJzW2ldWzBdO1xuICAgICAgYXJncys9IFwiPVwiXG4gICAgICBhcmdzKz0gYXJndW1lbnRfcGFpcnNbaV1bMV07XG4gICAgICBpZiggaSA8IGFyZ3VtZW50X3BhaXJzLmxlbmd0aC0xICkgYXJncys9IFwiJlwiO1xuICB9XG4gIHJldHVybiBhcmdzO1xufVxuXG5leHBvcnRzLk9BdXRoLnByb3RvdHlwZS5fY3JlYXRlU2lnbmF0dXJlQmFzZT0gZnVuY3Rpb24obWV0aG9kLCB1cmwsIHBhcmFtZXRlcnMpIHtcbiAgdXJsPSB0aGlzLl9lbmNvZGVEYXRhKCB0aGlzLl9ub3JtYWxpemVVcmwodXJsKSApO1xuICBwYXJhbWV0ZXJzPSB0aGlzLl9lbmNvZGVEYXRhKCBwYXJhbWV0ZXJzICk7XG4gIHJldHVybiBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiJlwiICsgdXJsICsgXCImXCIgKyBwYXJhbWV0ZXJzO1xufVxuXG5leHBvcnRzLk9BdXRoLnByb3RvdHlwZS5fY3JlYXRlU2lnbmF0dXJlPSBmdW5jdGlvbihzaWduYXR1cmVCYXNlLCB0b2tlblNlY3JldCkge1xuICAgaWYoIHRva2VuU2VjcmV0ID09PSB1bmRlZmluZWQgKSB2YXIgdG9rZW5TZWNyZXQ9IFwiXCI7XG4gICBlbHNlIHRva2VuU2VjcmV0PSB0aGlzLl9lbmNvZGVEYXRhKCB0b2tlblNlY3JldCApO1xuICAgLy8gY29uc3VtZXJTZWNyZXQgaXMgYWxyZWFkeSBlbmNvZGVkXG4gICB2YXIga2V5PSB0aGlzLl9jb25zdW1lclNlY3JldCArIFwiJlwiICsgdG9rZW5TZWNyZXQ7XG5cbiAgIHZhciBoYXNoPSBcIlwiXG4gICBpZiggdGhpcy5fc2lnbmF0dXJlTWV0aG9kID09IFwiUExBSU5URVhUXCIgKSB7XG4gICAgIGhhc2g9IGtleTtcbiAgIH1cbiAgIGVsc2UgaWYgKHRoaXMuX3NpZ25hdHVyZU1ldGhvZCA9PSBcIlJTQS1TSEExXCIpIHtcbiAgICAga2V5ID0gdGhpcy5fcHJpdmF0ZUtleSB8fCBcIlwiO1xuICAgICBoYXNoPSBjcnlwdG8uY3JlYXRlU2lnbihcIlJTQS1TSEExXCIpLnVwZGF0ZShzaWduYXR1cmVCYXNlKS5zaWduKGtleSwgJ2Jhc2U2NCcpO1xuICAgfVxuICAgZWxzZSB7XG4gICAgICAgaWYoIGNyeXB0by5IbWFjICkge1xuICAgICAgICAgaGFzaCA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMVwiLCBrZXkpLnVwZGF0ZShzaWduYXR1cmVCYXNlKS5kaWdlc3QoXCJiYXNlNjRcIik7XG4gICAgICAgfVxuICAgICAgIGVsc2Uge1xuICAgICAgICAgaGFzaD0gc2hhMS5ITUFDU0hBMShrZXksIHNpZ25hdHVyZUJhc2UpO1xuICAgICAgIH1cbiAgIH1cbiAgIHJldHVybiBoYXNoO1xufVxuZXhwb3J0cy5PQXV0aC5wcm90b3R5cGUuTk9OQ0VfQ0hBUlM9IFsnYScsJ2InLCdjJywnZCcsJ2UnLCdmJywnZycsJ2gnLCdpJywnaicsJ2snLCdsJywnbScsJ24nLFxuICAgICAgICAgICAgICAnbycsJ3AnLCdxJywncicsJ3MnLCd0JywndScsJ3YnLCd3JywneCcsJ3knLCd6JywnQScsJ0InLFxuICAgICAgICAgICAgICAnQycsJ0QnLCdFJywnRicsJ0cnLCdIJywnSScsJ0onLCdLJywnTCcsJ00nLCdOJywnTycsJ1AnLFxuICAgICAgICAgICAgICAnUScsJ1InLCdTJywnVCcsJ1UnLCdWJywnVycsJ1gnLCdZJywnWicsJzAnLCcxJywnMicsJzMnLFxuICAgICAgICAgICAgICAnNCcsJzUnLCc2JywnNycsJzgnLCc5J107XG5cbmV4cG9ydHMuT0F1dGgucHJvdG90eXBlLl9nZXROb25jZT0gZnVuY3Rpb24obm9uY2VTaXplKSB7XG4gICB2YXIgcmVzdWx0ID0gW107XG4gICB2YXIgY2hhcnM9IHRoaXMuTk9OQ0VfQ0hBUlM7XG4gICB2YXIgY2hhcl9wb3M7XG4gICB2YXIgbm9uY2VfY2hhcnNfbGVuZ3RoPSBjaGFycy5sZW5ndGg7XG5cbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9uY2VTaXplOyBpKyspIHtcbiAgICAgICBjaGFyX3Bvcz0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbm9uY2VfY2hhcnNfbGVuZ3RoKTtcbiAgICAgICByZXN1bHRbaV09ICBjaGFyc1tjaGFyX3Bvc107XG4gICB9XG4gICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xufVxuXG5leHBvcnRzLk9BdXRoLnByb3RvdHlwZS5fY3JlYXRlQ2xpZW50PSBmdW5jdGlvbiggcG9ydCwgaG9zdG5hbWUsIG1ldGhvZCwgcGF0aCwgaGVhZGVycywgc3NsRW5hYmxlZCApIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgaG9zdDogaG9zdG5hbWUsXG4gICAgcG9ydDogcG9ydCxcbiAgICBwYXRoOiBwYXRoLFxuICAgIG1ldGhvZDogbWV0aG9kLFxuICAgIGhlYWRlcnM6IGhlYWRlcnNcbiAgfTtcbiAgdmFyIGh0dHBNb2RlbDtcbiAgaWYoIHNzbEVuYWJsZWQgKSB7XG4gICAgaHR0cE1vZGVsPSBodHRwcztcbiAgfSBlbHNlIHtcbiAgICBodHRwTW9kZWw9IGh0dHA7XG4gIH1cbiAgcmV0dXJuIGh0dHBNb2RlbC5yZXF1ZXN0KG9wdGlvbnMpO1xufVxuXG5leHBvcnRzLk9BdXRoLnByb3RvdHlwZS5fcHJlcGFyZVBhcmFtZXRlcnM9IGZ1bmN0aW9uKCBvYXV0aF90b2tlbiwgb2F1dGhfdG9rZW5fc2VjcmV0LCBtZXRob2QsIHVybCwgZXh0cmFfcGFyYW1zICkge1xuICB2YXIgb2F1dGhQYXJhbWV0ZXJzPSB7XG4gICAgICBcIm9hdXRoX3RpbWVzdGFtcFwiOiAgICAgICAgdGhpcy5fZ2V0VGltZXN0YW1wKCksXG4gICAgICBcIm9hdXRoX25vbmNlXCI6ICAgICAgICAgICAgdGhpcy5fZ2V0Tm9uY2UodGhpcy5fbm9uY2VTaXplKSxcbiAgICAgIFwib2F1dGhfdmVyc2lvblwiOiAgICAgICAgICB0aGlzLl92ZXJzaW9uLFxuICAgICAgXCJvYXV0aF9zaWduYXR1cmVfbWV0aG9kXCI6IHRoaXMuX3NpZ25hdHVyZU1ldGhvZCxcbiAgICAgIFwib2F1dGhfY29uc3VtZXJfa2V5XCI6ICAgICB0aGlzLl9jb25zdW1lcktleVxuICB9O1xuXG4gIGlmKCBvYXV0aF90b2tlbiApIHtcbiAgICBvYXV0aFBhcmFtZXRlcnNbXCJvYXV0aF90b2tlblwiXT0gb2F1dGhfdG9rZW47XG4gIH1cblxuICB2YXIgc2lnO1xuICBpZiggdGhpcy5faXNFY2hvICkge1xuICAgIHNpZyA9IHRoaXMuX2dldFNpZ25hdHVyZSggXCJHRVRcIiwgIHRoaXMuX3ZlcmlmeUNyZWRlbnRpYWxzLCAgdGhpcy5fbm9ybWFsaXNlUmVxdWVzdFBhcmFtcyhvYXV0aFBhcmFtZXRlcnMpLCBvYXV0aF90b2tlbl9zZWNyZXQpO1xuICB9XG4gIGVsc2Uge1xuICAgIGlmKCBleHRyYV9wYXJhbXMgKSB7XG4gICAgICBmb3IoIHZhciBrZXkgaW4gZXh0cmFfcGFyYW1zICkge1xuICAgICAgICBpZiAoZXh0cmFfcGFyYW1zLmhhc093blByb3BlcnR5KGtleSkpIG9hdXRoUGFyYW1ldGVyc1trZXldPSBleHRyYV9wYXJhbXNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHBhcnNlZFVybD0gVVJMLnBhcnNlKCB1cmwsIGZhbHNlICk7XG5cbiAgICBpZiggcGFyc2VkVXJsLnF1ZXJ5ICkge1xuICAgICAgdmFyIGtleTI7XG4gICAgICB2YXIgZXh0cmFQYXJhbWV0ZXJzPSBxdWVyeXN0cmluZy5wYXJzZShwYXJzZWRVcmwucXVlcnkpO1xuICAgICAgZm9yKHZhciBrZXkgaW4gZXh0cmFQYXJhbWV0ZXJzICkge1xuICAgICAgICB2YXIgdmFsdWU9IGV4dHJhUGFyYW1ldGVyc1trZXldO1xuICAgICAgICAgIGlmKCB0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiApe1xuICAgICAgICAgICAgLy8gVE9ETzogVGhpcyBwcm9iYWJseSBzaG91bGQgYmUgcmVjdXJzaXZlXG4gICAgICAgICAgICBmb3Ioa2V5MiBpbiB2YWx1ZSl7XG4gICAgICAgICAgICAgIG9hdXRoUGFyYW1ldGVyc1trZXkgKyBcIltcIiArIGtleTIgKyBcIl1cIl0gPSB2YWx1ZVtrZXkyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2F1dGhQYXJhbWV0ZXJzW2tleV09IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNpZyA9IHRoaXMuX2dldFNpZ25hdHVyZSggbWV0aG9kLCAgdXJsLCAgdGhpcy5fbm9ybWFsaXNlUmVxdWVzdFBhcmFtcyhvYXV0aFBhcmFtZXRlcnMpLCBvYXV0aF90b2tlbl9zZWNyZXQpO1xuICB9XG5cbiAgdmFyIG9yZGVyZWRQYXJhbWV0ZXJzPSB0aGlzLl9zb3J0UmVxdWVzdFBhcmFtcyggdGhpcy5fbWFrZUFycmF5T2ZBcmd1bWVudHNIYXNoKG9hdXRoUGFyYW1ldGVycykgKTtcbiAgb3JkZXJlZFBhcmFtZXRlcnNbb3JkZXJlZFBhcmFtZXRlcnMubGVuZ3RoXT0gW1wib2F1dGhfc2lnbmF0dXJlXCIsIHNpZ107XG4gIHJldHVybiBvcmRlcmVkUGFyYW1ldGVycztcbn1cblxuZXhwb3J0cy5PQXV0aC5wcm90b3R5cGUuX3BlcmZvcm1TZWN1cmVSZXF1ZXN0PSBmdW5jdGlvbiggb2F1dGhfdG9rZW4sIG9hdXRoX3Rva2VuX3NlY3JldCwgbWV0aG9kLCB1cmwsIGV4dHJhX3BhcmFtcywgcG9zdF9ib2R5LCBwb3N0X2NvbnRlbnRfdHlwZSwgIGNhbGxiYWNrICkge1xuICB2YXIgb3JkZXJlZFBhcmFtZXRlcnM9IHRoaXMuX3ByZXBhcmVQYXJhbWV0ZXJzKG9hdXRoX3Rva2VuLCBvYXV0aF90b2tlbl9zZWNyZXQsIG1ldGhvZCwgdXJsLCBleHRyYV9wYXJhbXMpO1xuXG4gIGlmKCAhcG9zdF9jb250ZW50X3R5cGUgKSB7XG4gICAgcG9zdF9jb250ZW50X3R5cGU9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG4gIH1cbiAgdmFyIHBhcnNlZFVybD0gVVJMLnBhcnNlKCB1cmwsIGZhbHNlICk7XG4gIGlmKCBwYXJzZWRVcmwucHJvdG9jb2wgPT0gXCJodHRwOlwiICYmICFwYXJzZWRVcmwucG9ydCApIHBhcnNlZFVybC5wb3J0PSA4MDtcbiAgaWYoIHBhcnNlZFVybC5wcm90b2NvbCA9PSBcImh0dHBzOlwiICYmICFwYXJzZWRVcmwucG9ydCApIHBhcnNlZFVybC5wb3J0PSA0NDM7XG5cbiAgdmFyIGhlYWRlcnM9IHt9O1xuICB2YXIgYXV0aG9yaXphdGlvbiA9IHRoaXMuX2J1aWxkQXV0aG9yaXphdGlvbkhlYWRlcnMob3JkZXJlZFBhcmFtZXRlcnMpO1xuICBpZiAoIHRoaXMuX2lzRWNobyApIHtcbiAgICBoZWFkZXJzW1wiWC1WZXJpZnktQ3JlZGVudGlhbHMtQXV0aG9yaXphdGlvblwiXT0gYXV0aG9yaXphdGlvbjtcbiAgfVxuICBlbHNlIHtcbiAgICBoZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXT0gYXV0aG9yaXphdGlvbjtcbiAgfVxuXG4gIGhlYWRlcnNbXCJIb3N0XCJdID0gcGFyc2VkVXJsLmhvc3RcblxuICBmb3IoIHZhciBrZXkgaW4gdGhpcy5faGVhZGVycyApIHtcbiAgICBpZiAodGhpcy5faGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBoZWFkZXJzW2tleV09IHRoaXMuX2hlYWRlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICAvLyBGaWx0ZXIgb3V0IGFueSBwYXNzZWQgZXh0cmFfcGFyYW1zIHRoYXQgYXJlIHJlYWxseSB0byBkbyB3aXRoIE9BdXRoXG4gIGZvcih2YXIga2V5IGluIGV4dHJhX3BhcmFtcykge1xuICAgIGlmKCB0aGlzLl9pc1BhcmFtZXRlck5hbWVBbk9BdXRoUGFyYW1ldGVyKCBrZXkgKSApIHtcbiAgICAgIGRlbGV0ZSBleHRyYV9wYXJhbXNba2V5XTtcbiAgICB9XG4gIH1cblxuICBpZiggKG1ldGhvZCA9PSBcIlBPU1RcIiB8fCBtZXRob2QgPT0gXCJQVVRcIikgICYmICggcG9zdF9ib2R5ID09IG51bGwgJiYgZXh0cmFfcGFyYW1zICE9IG51bGwpICkge1xuICAgIC8vIEZpeCB0aGUgbWlzbWF0Y2ggYmV0d2VlbiB0aGUgb3V0cHV0IG9mIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSgpIGFuZCB0aGlzLl9lbmNvZGVEYXRhKClcbiAgICBwb3N0X2JvZHk9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShleHRyYV9wYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCEvZywgXCIlMjFcIilcbiAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJy9nLCBcIiUyN1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwoL2csIFwiJTI4XCIpXG4gICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCkvZywgXCIlMjlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcKi9nLCBcIiUyQVwiKTtcbiAgfVxuXG4gIGlmKCBwb3N0X2JvZHkgKSB7XG4gICAgICBpZiAoIEJ1ZmZlci5pc0J1ZmZlcihwb3N0X2JvZHkpICkge1xuICAgICAgICAgIGhlYWRlcnNbXCJDb250ZW50LWxlbmd0aFwiXT0gcG9zdF9ib2R5Lmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGVhZGVyc1tcIkNvbnRlbnQtbGVuZ3RoXCJdPSBCdWZmZXIuYnl0ZUxlbmd0aChwb3N0X2JvZHkpO1xuICAgICAgfVxuICB9IGVsc2Uge1xuICAgICAgaGVhZGVyc1tcIkNvbnRlbnQtbGVuZ3RoXCJdPSAwO1xuICB9XG5cbiAgaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXT0gcG9zdF9jb250ZW50X3R5cGU7XG5cbiAgdmFyIHBhdGg7XG4gIGlmKCAhcGFyc2VkVXJsLnBhdGhuYW1lICB8fCBwYXJzZWRVcmwucGF0aG5hbWUgPT0gXCJcIiApIHBhcnNlZFVybC5wYXRobmFtZSA9XCIvXCI7XG4gIGlmKCBwYXJzZWRVcmwucXVlcnkgKSBwYXRoPSBwYXJzZWRVcmwucGF0aG5hbWUgKyBcIj9cIisgcGFyc2VkVXJsLnF1ZXJ5IDtcbiAgZWxzZSBwYXRoPSBwYXJzZWRVcmwucGF0aG5hbWU7XG5cbiAgdmFyIHJlcXVlc3Q7XG4gIGlmKCBwYXJzZWRVcmwucHJvdG9jb2wgPT0gXCJodHRwczpcIiApIHtcbiAgICByZXF1ZXN0PSB0aGlzLl9jcmVhdGVDbGllbnQocGFyc2VkVXJsLnBvcnQsIHBhcnNlZFVybC5ob3N0bmFtZSwgbWV0aG9kLCBwYXRoLCBoZWFkZXJzLCB0cnVlKTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXF1ZXN0PSB0aGlzLl9jcmVhdGVDbGllbnQocGFyc2VkVXJsLnBvcnQsIHBhcnNlZFVybC5ob3N0bmFtZSwgbWV0aG9kLCBwYXRoLCBoZWFkZXJzKTtcbiAgfVxuXG4gIHZhciBjbGllbnRPcHRpb25zID0gdGhpcy5fY2xpZW50T3B0aW9ucztcbiAgaWYoIGNhbGxiYWNrICkge1xuICAgIHZhciBkYXRhPVwiXCI7XG4gICAgdmFyIHNlbGY9IHRoaXM7XG5cbiAgICAvLyBTb21lIGhvc3RzICpjb3VnaCogZ29vZ2xlIGFwcGVhciB0byBjbG9zZSB0aGUgY29ubmVjdGlvbiBlYXJseSAvIHNlbmQgbm8gY29udGVudC1sZW5ndGggaGVhZGVyXG4gICAgLy8gYWxsb3cgdGhpcyBiZWhhdmlvdXIuXG4gICAgdmFyIGFsbG93RWFybHlDbG9zZT0gT0F1dGhVdGlscy5pc0FuRWFybHlDbG9zZUhvc3QoIHBhcnNlZFVybC5ob3N0bmFtZSApO1xuICAgIHZhciBjYWxsYmFja0NhbGxlZD0gZmFsc2U7XG4gICAgdmFyIHBhc3NCYWNrQ29udHJvbCA9IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcbiAgICAgIGlmKCFjYWxsYmFja0NhbGxlZCkge1xuICAgICAgICBjYWxsYmFja0NhbGxlZD0gdHJ1ZTtcbiAgICAgICAgaWYgKCByZXNwb25zZS5zdGF0dXNDb2RlID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXNDb2RlIDw9IDI5OSApIHtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCBkYXRhLCByZXNwb25zZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRm9sbG93IDMwMSBvciAzMDIgcmVkaXJlY3RzIHdpdGggTG9jYXRpb24gSFRUUCBoZWFkZXJcbiAgICAgICAgICBpZigocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PSAzMDEgfHwgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9PSAzMDIpICYmIGNsaWVudE9wdGlvbnMuZm9sbG93UmVkaXJlY3RzICYmIHJlc3BvbnNlLmhlYWRlcnMgJiYgcmVzcG9uc2UuaGVhZGVycy5sb2NhdGlvbikge1xuICAgICAgICAgICAgc2VsZi5fcGVyZm9ybVNlY3VyZVJlcXVlc3QoIG9hdXRoX3Rva2VuLCBvYXV0aF90b2tlbl9zZWNyZXQsIG1ldGhvZCwgcmVzcG9uc2UuaGVhZGVycy5sb2NhdGlvbiwgZXh0cmFfcGFyYW1zLCBwb3N0X2JvZHksIHBvc3RfY29udGVudF90eXBlLCAgY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHsgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzQ29kZSwgZGF0YTogZGF0YSB9LCBkYXRhLCByZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vbigncmVzcG9uc2UnLCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJlc3BvbnNlLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgICByZXNwb25zZS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICBkYXRhKz1jaHVuaztcbiAgICAgIH0pO1xuICAgICAgcmVzcG9uc2Uub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcGFzc0JhY2tDb250cm9sKCByZXNwb25zZSApO1xuICAgICAgfSk7XG4gICAgICByZXNwb25zZS5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmKCBhbGxvd0Vhcmx5Q2xvc2UgKSB7XG4gICAgICAgICAgcGFzc0JhY2tDb250cm9sKCByZXNwb25zZSApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJlcXVlc3Qub24oXCJlcnJvclwiLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGlmKCFjYWxsYmFja0NhbGxlZCkge1xuICAgICAgICBjYWxsYmFja0NhbGxlZD0gdHJ1ZTtcbiAgICAgICAgY2FsbGJhY2soIGVyciApXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiggKG1ldGhvZCA9PSBcIlBPU1RcIiB8fCBtZXRob2QgPT1cIlBVVFwiKSAmJiBwb3N0X2JvZHkgIT0gbnVsbCAmJiBwb3N0X2JvZHkgIT0gXCJcIiApIHtcbiAgICAgIHJlcXVlc3Qud3JpdGUocG9zdF9ib2R5KTtcbiAgICB9XG4gICAgcmVxdWVzdC5lbmQoKTtcbiAgfVxuICBlbHNlIHtcbiAgICBpZiggKG1ldGhvZCA9PSBcIlBPU1RcIiB8fCBtZXRob2QgPT1cIlBVVFwiKSAmJiBwb3N0X2JvZHkgIT0gbnVsbCAmJiBwb3N0X2JvZHkgIT0gXCJcIiApIHtcbiAgICAgIHJlcXVlc3Qud3JpdGUocG9zdF9ib2R5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH1cblxuICByZXR1cm47XG59XG5cbmV4cG9ydHMuT0F1dGgucHJvdG90eXBlLnNldENsaWVudE9wdGlvbnM9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIGtleSxcbiAgICAgIG1lcmdlZE9wdGlvbnM9IHt9LFxuICAgICAgaGFzT3duUHJvcGVydHk9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yKCBrZXkgaW4gdGhpcy5fZGVmYXVsdENsaWVudE9wdGlvbnMgKSB7XG4gICAgaWYoICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIGtleSkgKSB7XG4gICAgICBtZXJnZWRPcHRpb25zW2tleV09IHRoaXMuX2RlZmF1bHRDbGllbnRPcHRpb25zW2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lcmdlZE9wdGlvbnNba2V5XT0gb3B0aW9uc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2NsaWVudE9wdGlvbnM9IG1lcmdlZE9wdGlvbnM7XG59O1xuXG5leHBvcnRzLk9BdXRoLnByb3RvdHlwZS5nZXRPQXV0aEFjY2Vzc1Rva2VuPSBmdW5jdGlvbihvYXV0aF90b2tlbiwgb2F1dGhfdG9rZW5fc2VjcmV0LCBvYXV0aF92ZXJpZmllciwgIGNhbGxiYWNrKSB7XG4gIHZhciBleHRyYVBhcmFtcz0ge307XG4gIGlmKCB0eXBlb2Ygb2F1dGhfdmVyaWZpZXIgPT0gXCJmdW5jdGlvblwiICkge1xuICAgIGNhbGxiYWNrPSBvYXV0aF92ZXJpZmllcjtcbiAgfSBlbHNlIHtcbiAgICBleHRyYVBhcmFtcy5vYXV0aF92ZXJpZmllcj0gb2F1dGhfdmVyaWZpZXI7XG4gIH1cblxuICAgdGhpcy5fcGVyZm9ybVNlY3VyZVJlcXVlc3QoIG9hdXRoX3Rva2VuLCBvYXV0aF90b2tlbl9zZWNyZXQsIHRoaXMuX2NsaWVudE9wdGlvbnMuYWNjZXNzVG9rZW5IdHRwTWV0aG9kLCB0aGlzLl9hY2Nlc3NVcmwsIGV4dHJhUGFyYW1zLCBudWxsLCBudWxsLCBmdW5jdGlvbihlcnJvciwgZGF0YSwgcmVzcG9uc2UpIHtcbiAgICAgICAgIGlmKCBlcnJvciApIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICB2YXIgcmVzdWx0cz0gcXVlcnlzdHJpbmcucGFyc2UoIGRhdGEgKTtcbiAgICAgICAgICAgdmFyIG9hdXRoX2FjY2Vzc190b2tlbj0gcmVzdWx0c1tcIm9hdXRoX3Rva2VuXCJdO1xuICAgICAgICAgICBkZWxldGUgcmVzdWx0c1tcIm9hdXRoX3Rva2VuXCJdO1xuICAgICAgICAgICB2YXIgb2F1dGhfYWNjZXNzX3Rva2VuX3NlY3JldD0gcmVzdWx0c1tcIm9hdXRoX3Rva2VuX3NlY3JldFwiXTtcbiAgICAgICAgICAgZGVsZXRlIHJlc3VsdHNbXCJvYXV0aF90b2tlbl9zZWNyZXRcIl07XG4gICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG9hdXRoX2FjY2Vzc190b2tlbiwgb2F1dGhfYWNjZXNzX3Rva2VuX3NlY3JldCwgcmVzdWx0cyApO1xuICAgICAgICAgfVxuICAgfSlcbn1cblxuLy8gRGVwcmVjYXRlZFxuZXhwb3J0cy5PQXV0aC5wcm90b3R5cGUuZ2V0UHJvdGVjdGVkUmVzb3VyY2U9IGZ1bmN0aW9uKHVybCwgbWV0aG9kLCBvYXV0aF90b2tlbiwgb2F1dGhfdG9rZW5fc2VjcmV0LCBjYWxsYmFjaykge1xuICB0aGlzLl9wZXJmb3JtU2VjdXJlUmVxdWVzdCggb2F1dGhfdG9rZW4sIG9hdXRoX3Rva2VuX3NlY3JldCwgbWV0aG9kLCB1cmwsIG51bGwsIFwiXCIsIG51bGwsIGNhbGxiYWNrICk7XG59XG5cbmV4cG9ydHMuT0F1dGgucHJvdG90eXBlLmRlbGV0ZT0gZnVuY3Rpb24odXJsLCBvYXV0aF90b2tlbiwgb2F1dGhfdG9rZW5fc2VjcmV0LCBjYWxsYmFjaykge1xuICByZXR1cm4gdGhpcy5fcGVyZm9ybVNlY3VyZVJlcXVlc3QoIG9hdXRoX3Rva2VuLCBvYXV0aF90b2tlbl9zZWNyZXQsIFwiREVMRVRFXCIsIHVybCwgbnVsbCwgXCJcIiwgbnVsbCwgY2FsbGJhY2sgKTtcbn1cblxuZXhwb3J0cy5PQXV0aC5wcm90b3R5cGUuZ2V0PSBmdW5jdGlvbih1cmwsIG9hdXRoX3Rva2VuLCBvYXV0aF90b2tlbl9zZWNyZXQsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0aGlzLl9wZXJmb3JtU2VjdXJlUmVxdWVzdCggb2F1dGhfdG9rZW4sIG9hdXRoX3Rva2VuX3NlY3JldCwgXCJHRVRcIiwgdXJsLCBudWxsLCBcIlwiLCBudWxsLCBjYWxsYmFjayApO1xufVxuXG5leHBvcnRzLk9BdXRoLnByb3RvdHlwZS5fcHV0T3JQb3N0PSBmdW5jdGlvbihtZXRob2QsIHVybCwgb2F1dGhfdG9rZW4sIG9hdXRoX3Rva2VuX3NlY3JldCwgcG9zdF9ib2R5LCBwb3N0X2NvbnRlbnRfdHlwZSwgY2FsbGJhY2spIHtcbiAgdmFyIGV4dHJhX3BhcmFtcz0gbnVsbDtcbiAgaWYoIHR5cGVvZiBwb3N0X2NvbnRlbnRfdHlwZSA9PSBcImZ1bmN0aW9uXCIgKSB7XG4gICAgY2FsbGJhY2s9IHBvc3RfY29udGVudF90eXBlO1xuICAgIHBvc3RfY29udGVudF90eXBlPSBudWxsO1xuICB9XG4gIGlmICggdHlwZW9mIHBvc3RfYm9keSAhPSBcInN0cmluZ1wiICYmICFCdWZmZXIuaXNCdWZmZXIocG9zdF9ib2R5KSApIHtcbiAgICBwb3N0X2NvbnRlbnRfdHlwZT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxuICAgIGV4dHJhX3BhcmFtcz0gcG9zdF9ib2R5O1xuICAgIHBvc3RfYm9keT0gbnVsbDtcbiAgfVxuICByZXR1cm4gdGhpcy5fcGVyZm9ybVNlY3VyZVJlcXVlc3QoIG9hdXRoX3Rva2VuLCBvYXV0aF90b2tlbl9zZWNyZXQsIG1ldGhvZCwgdXJsLCBleHRyYV9wYXJhbXMsIHBvc3RfYm9keSwgcG9zdF9jb250ZW50X3R5cGUsIGNhbGxiYWNrICk7XG59XG5cblxuZXhwb3J0cy5PQXV0aC5wcm90b3R5cGUucHV0PSBmdW5jdGlvbih1cmwsIG9hdXRoX3Rva2VuLCBvYXV0aF90b2tlbl9zZWNyZXQsIHBvc3RfYm9keSwgcG9zdF9jb250ZW50X3R5cGUsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0aGlzLl9wdXRPclBvc3QoXCJQVVRcIiwgdXJsLCBvYXV0aF90b2tlbiwgb2F1dGhfdG9rZW5fc2VjcmV0LCBwb3N0X2JvZHksIHBvc3RfY29udGVudF90eXBlLCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydHMuT0F1dGgucHJvdG90eXBlLnBvc3Q9IGZ1bmN0aW9uKHVybCwgb2F1dGhfdG9rZW4sIG9hdXRoX3Rva2VuX3NlY3JldCwgcG9zdF9ib2R5LCBwb3N0X2NvbnRlbnRfdHlwZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIHRoaXMuX3B1dE9yUG9zdChcIlBPU1RcIiwgdXJsLCBvYXV0aF90b2tlbiwgb2F1dGhfdG9rZW5fc2VjcmV0LCBwb3N0X2JvZHksIHBvc3RfY29udGVudF90eXBlLCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogR2V0cyBhIHJlcXVlc3QgdG9rZW4gZnJvbSB0aGUgT0F1dGggcHJvdmlkZXIgYW5kIHBhc3NlcyB0aGF0IGluZm9ybWF0aW9uIGJhY2tcbiAqIHRvIHRoZSBjYWxsaW5nIGNvZGUuXG4gKlxuICogVGhlIGNhbGxiYWNrIHNob3VsZCBleHBlY3QgYSBmdW5jdGlvbiBvZiB0aGUgZm9sbG93aW5nIGZvcm06XG4gKlxuICogZnVuY3Rpb24oZXJyLCB0b2tlbiwgdG9rZW5fc2VjcmV0LCBwYXJzZWRRdWVyeVN0cmluZykge31cbiAqXG4gKiBUaGlzIG1ldGhvZCBoYXMgb3B0aW9uYWwgcGFyYW1ldGVycyBzbyBjYW4gYmUgY2FsbGVkIGluIHRoZSBmb2xsb3dpbmcgMiB3YXlzOlxuICpcbiAqIDEpIFByaW1hcnkgdXNlIGNhc2U6IERvZXMgYSBiYXNpYyByZXF1ZXN0IHdpdGggbm8gZXh0cmEgcGFyYW1ldGVyc1xuICogIGdldE9BdXRoUmVxdWVzdFRva2VuKCBjYWxsYmFja0Z1bmN0aW9uIClcbiAqXG4gKiAyKSBBcyBhYm92ZSBidXQgYWxsb3dzIGZvciBwcm92aXNpb24gb2YgZXh0cmEgcGFyYW1ldGVycyB0byBiZSBzZW50IGFzIHBhcnQgb2YgdGhlIHF1ZXJ5IHRvIHRoZSBzZXJ2ZXIuXG4gKiAgZ2V0T0F1dGhSZXF1ZXN0VG9rZW4oIGV4dHJhUGFyYW1zLCBjYWxsYmFja0Z1bmN0aW9uIClcbiAqXG4gKiBOLkIuIFRoaXMgbWV0aG9kIHdpbGwgSFRUUCBQT1NUIHZlcmJzIGJ5IGRlZmF1bHQsIGlmIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMgYmVoYXZpb3VyIHlvdSB3aWxsXG4gKiBuZWVkIHRvIHByb3ZpZGUgYSByZXF1ZXN0VG9rZW5IdHRwTWV0aG9kIG9wdGlvbiB3aGVuIGNyZWF0aW5nIHRoZSBjbGllbnQuXG4gKlxuICoqL1xuZXhwb3J0cy5PQXV0aC5wcm90b3R5cGUuZ2V0T0F1dGhSZXF1ZXN0VG9rZW49IGZ1bmN0aW9uKCBleHRyYVBhcmFtcywgY2FsbGJhY2sgKSB7XG4gICBpZiggdHlwZW9mIGV4dHJhUGFyYW1zID09IFwiZnVuY3Rpb25cIiApe1xuICAgICBjYWxsYmFjayA9IGV4dHJhUGFyYW1zO1xuICAgICBleHRyYVBhcmFtcyA9IHt9O1xuICAgfVxuICAvLyBDYWxsYmFja3MgYXJlIDEuMEEgcmVsYXRlZFxuICBpZiggdGhpcy5fYXV0aG9yaXplX2NhbGxiYWNrICkge1xuICAgIGV4dHJhUGFyYW1zW1wib2F1dGhfY2FsbGJhY2tcIl09IHRoaXMuX2F1dGhvcml6ZV9jYWxsYmFjaztcbiAgfVxuICB0aGlzLl9wZXJmb3JtU2VjdXJlUmVxdWVzdCggbnVsbCwgbnVsbCwgdGhpcy5fY2xpZW50T3B0aW9ucy5yZXF1ZXN0VG9rZW5IdHRwTWV0aG9kLCB0aGlzLl9yZXF1ZXN0VXJsLCBleHRyYVBhcmFtcywgbnVsbCwgbnVsbCwgZnVuY3Rpb24oZXJyb3IsIGRhdGEsIHJlc3BvbnNlKSB7XG4gICAgaWYoIGVycm9yICkgY2FsbGJhY2soZXJyb3IpO1xuICAgIGVsc2Uge1xuICAgICAgdmFyIHJlc3VsdHM9IHF1ZXJ5c3RyaW5nLnBhcnNlKGRhdGEpO1xuXG4gICAgICB2YXIgb2F1dGhfdG9rZW49IHJlc3VsdHNbXCJvYXV0aF90b2tlblwiXTtcbiAgICAgIHZhciBvYXV0aF90b2tlbl9zZWNyZXQ9IHJlc3VsdHNbXCJvYXV0aF90b2tlbl9zZWNyZXRcIl07XG4gICAgICBkZWxldGUgcmVzdWx0c1tcIm9hdXRoX3Rva2VuXCJdO1xuICAgICAgZGVsZXRlIHJlc3VsdHNbXCJvYXV0aF90b2tlbl9zZWNyZXRcIl07XG4gICAgICBjYWxsYmFjayhudWxsLCBvYXV0aF90b2tlbiwgb2F1dGhfdG9rZW5fc2VjcmV0LCAgcmVzdWx0cyApO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydHMuT0F1dGgucHJvdG90eXBlLnNpZ25Vcmw9IGZ1bmN0aW9uKHVybCwgb2F1dGhfdG9rZW4sIG9hdXRoX3Rva2VuX3NlY3JldCwgbWV0aG9kKSB7XG5cbiAgaWYoIG1ldGhvZCA9PT0gdW5kZWZpbmVkICkge1xuICAgIHZhciBtZXRob2Q9IFwiR0VUXCI7XG4gIH1cblxuICB2YXIgb3JkZXJlZFBhcmFtZXRlcnM9IHRoaXMuX3ByZXBhcmVQYXJhbWV0ZXJzKG9hdXRoX3Rva2VuLCBvYXV0aF90b2tlbl9zZWNyZXQsIG1ldGhvZCwgdXJsLCB7fSk7XG4gIHZhciBwYXJzZWRVcmw9IFVSTC5wYXJzZSggdXJsLCBmYWxzZSApO1xuXG4gIHZhciBxdWVyeT1cIlwiO1xuICBmb3IoIHZhciBpPSAwIDsgaSA8IG9yZGVyZWRQYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVlcnkrPSBvcmRlcmVkUGFyYW1ldGVyc1tpXVswXStcIj1cIisgdGhpcy5fZW5jb2RlRGF0YShvcmRlcmVkUGFyYW1ldGVyc1tpXVsxXSkgKyBcIiZcIjtcbiAgfVxuICBxdWVyeT0gcXVlcnkuc3Vic3RyaW5nKDAsIHF1ZXJ5Lmxlbmd0aC0xKTtcblxuICByZXR1cm4gcGFyc2VkVXJsLnByb3RvY29sICsgXCIvL1wiKyBwYXJzZWRVcmwuaG9zdCArIHBhcnNlZFVybC5wYXRobmFtZSArIFwiP1wiICsgcXVlcnk7XG59O1xuXG5leHBvcnRzLk9BdXRoLnByb3RvdHlwZS5hdXRoSGVhZGVyPSBmdW5jdGlvbih1cmwsIG9hdXRoX3Rva2VuLCBvYXV0aF90b2tlbl9zZWNyZXQsIG1ldGhvZCkge1xuICBpZiggbWV0aG9kID09PSB1bmRlZmluZWQgKSB7XG4gICAgdmFyIG1ldGhvZD0gXCJHRVRcIjtcbiAgfVxuXG4gIHZhciBvcmRlcmVkUGFyYW1ldGVycz0gdGhpcy5fcHJlcGFyZVBhcmFtZXRlcnMob2F1dGhfdG9rZW4sIG9hdXRoX3Rva2VuX3NlY3JldCwgbWV0aG9kLCB1cmwsIHt9KTtcbiAgcmV0dXJuIHRoaXMuX2J1aWxkQXV0aG9yaXphdGlvbkhlYWRlcnMob3JkZXJlZFBhcmFtZXRlcnMpO1xufTtcbiIsIi8vIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGlzIGEgaG9zdCB0aGF0IGNsb3NlcyAqYmVmb3JlKiBpdCBlbmRzPyE/IVxubW9kdWxlLmV4cG9ydHMuaXNBbkVhcmx5Q2xvc2VIb3N0PSBmdW5jdGlvbiggaG9zdE5hbWUgKSB7XG4gIHJldHVybiBob3N0TmFtZSAmJiBob3N0TmFtZS5tYXRjaChcIi4qZ29vZ2xlKGFwaXMpPy5jb20kXCIpXG59IiwidmFyIGNhbWVsQ2FzZSA9IHJlcXVpcmUoJ2NhbWVsY2FzZScpXG52YXIgZGVjYW1lbGl6ZSA9IHJlcXVpcmUoJ2RlY2FtZWxpemUnKVxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbnZhciB0b2tlbml6ZUFyZ1N0cmluZyA9IHJlcXVpcmUoJy4vbGliL3Rva2VuaXplLWFyZy1zdHJpbmcnKVxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJylcblxuZnVuY3Rpb24gcGFyc2UgKGFyZ3MsIG9wdHMpIHtcbiAgaWYgKCFvcHRzKSBvcHRzID0ge31cbiAgLy8gYWxsb3cgYSBzdHJpbmcgYXJndW1lbnQgdG8gYmUgcGFzc2VkIGluIHJhdGhlclxuICAvLyB0aGFuIGFuIGFyZ3YgYXJyYXkuXG4gIGFyZ3MgPSB0b2tlbml6ZUFyZ1N0cmluZyhhcmdzKVxuXG4gIC8vIGFsaWFzZXMgbWlnaHQgaGF2ZSB0cmFuc2l0aXZlIHJlbGF0aW9uc2hpcHMsIG5vcm1hbGl6ZSB0aGlzLlxuICB2YXIgYWxpYXNlcyA9IGNvbWJpbmVBbGlhc2VzKG9wdHMuYWxpYXMgfHwge30pXG4gIHZhciBjb25maWd1cmF0aW9uID0gYXNzaWduKHtcbiAgICAnc2hvcnQtb3B0aW9uLWdyb3Vwcyc6IHRydWUsXG4gICAgJ2NhbWVsLWNhc2UtZXhwYW5zaW9uJzogdHJ1ZSxcbiAgICAnZG90LW5vdGF0aW9uJzogdHJ1ZSxcbiAgICAncGFyc2UtbnVtYmVycyc6IHRydWUsXG4gICAgJ2Jvb2xlYW4tbmVnYXRpb24nOiB0cnVlLFxuICAgICduZWdhdGlvbi1wcmVmaXgnOiAnbm8tJyxcbiAgICAnZHVwbGljYXRlLWFyZ3VtZW50cy1hcnJheSc6IHRydWUsXG4gICAgJ2ZsYXR0ZW4tZHVwbGljYXRlLWFycmF5cyc6IHRydWUsXG4gICAgJ3BvcHVsYXRlLS0nOiBmYWxzZSxcbiAgICAnY29tYmluZS1hcnJheXMnOiBmYWxzZSxcbiAgICAnc2V0LXBsYWNlaG9sZGVyLWtleSc6IGZhbHNlLFxuICAgICdoYWx0LWF0LW5vbi1vcHRpb24nOiBmYWxzZVxuICB9LCBvcHRzLmNvbmZpZ3VyYXRpb24pXG4gIHZhciBkZWZhdWx0cyA9IG9wdHMuZGVmYXVsdCB8fCB7fVxuICB2YXIgY29uZmlnT2JqZWN0cyA9IG9wdHMuY29uZmlnT2JqZWN0cyB8fCBbXVxuICB2YXIgZW52UHJlZml4ID0gb3B0cy5lbnZQcmVmaXhcbiAgdmFyIG5vdEZsYWdzT3B0aW9uID0gY29uZmlndXJhdGlvblsncG9wdWxhdGUtLSddXG4gIHZhciBub3RGbGFnc0FyZ3YgPSBub3RGbGFnc09wdGlvbiA/ICctLScgOiAnXydcbiAgdmFyIG5ld0FsaWFzZXMgPSB7fVxuICAvLyBhbGxvdyBhIGkxOG4gaGFuZGxlciB0byBiZSBwYXNzZWQgaW4sIGRlZmF1bHQgdG8gYSBmYWtlIG9uZSAodXRpbC5mb3JtYXQpLlxuICB2YXIgX18gPSBvcHRzLl9fIHx8IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gdXRpbC5mb3JtYXQuYXBwbHkodXRpbCwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgfVxuICB2YXIgZXJyb3IgPSBudWxsXG4gIHZhciBmbGFncyA9IHtcbiAgICBhbGlhc2VzOiB7fSxcbiAgICBhcnJheXM6IHt9LFxuICAgIGJvb2xzOiB7fSxcbiAgICBzdHJpbmdzOiB7fSxcbiAgICBudW1iZXJzOiB7fSxcbiAgICBjb3VudHM6IHt9LFxuICAgIG5vcm1hbGl6ZToge30sXG4gICAgY29uZmlnczoge30sXG4gICAgZGVmYXVsdGVkOiB7fSxcbiAgICBuYXJnczoge30sXG4gICAgY29lcmNpb25zOiB7fSxcbiAgICBrZXlzOiBbXVxuICB9XG4gIHZhciBuZWdhdGl2ZSA9IC9eLVswLTldKyhcXC5bMC05XSspPy9cbiAgdmFyIG5lZ2F0ZWRCb29sZWFuID0gbmV3IFJlZ0V4cCgnXi0tJyArIGNvbmZpZ3VyYXRpb25bJ25lZ2F0aW9uLXByZWZpeCddICsgJyguKyknKVxuXG4gIDtbXS5jb25jYXQob3B0cy5hcnJheSkuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goZnVuY3Rpb24gKG9wdCkge1xuICAgIHZhciBrZXkgPSBvcHQua2V5IHx8IG9wdFxuXG4gICAgLy8gYXNzaWduIHRvIGZsYWdzW2Jvb2xzfHN0cmluZ3N8bnVtYmVyc11cbiAgICBjb25zdCBhc3NpZ25tZW50ID0gT2JqZWN0LmtleXMob3B0KS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuICh7XG4gICAgICAgIGJvb2xlYW46ICdib29scycsXG4gICAgICAgIHN0cmluZzogJ3N0cmluZ3MnLFxuICAgICAgICBudW1iZXI6ICdudW1iZXJzJ1xuICAgICAgfSlba2V5XVxuICAgIH0pLmZpbHRlcihCb29sZWFuKS5wb3AoKVxuXG4gICAgLy8gYXNzaWduIGtleSB0byBiZSBjb2VyY2VkXG4gICAgaWYgKGFzc2lnbm1lbnQpIHtcbiAgICAgIGZsYWdzW2Fzc2lnbm1lbnRdW2tleV0gPSB0cnVlXG4gICAgfVxuXG4gICAgZmxhZ3MuYXJyYXlzW2tleV0gPSB0cnVlXG4gICAgZmxhZ3Mua2V5cy5wdXNoKGtleSlcbiAgfSlcblxuICA7W10uY29uY2F0KG9wdHMuYm9vbGVhbikuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGZsYWdzLmJvb2xzW2tleV0gPSB0cnVlXG4gICAgZmxhZ3Mua2V5cy5wdXNoKGtleSlcbiAgfSlcblxuICA7W10uY29uY2F0KG9wdHMuc3RyaW5nKS5maWx0ZXIoQm9vbGVhbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZmxhZ3Muc3RyaW5nc1trZXldID0gdHJ1ZVxuICAgIGZsYWdzLmtleXMucHVzaChrZXkpXG4gIH0pXG5cbiAgO1tdLmNvbmNhdChvcHRzLm51bWJlcikuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGZsYWdzLm51bWJlcnNba2V5XSA9IHRydWVcbiAgICBmbGFncy5rZXlzLnB1c2goa2V5KVxuICB9KVxuXG4gIDtbXS5jb25jYXQob3B0cy5jb3VudCkuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGZsYWdzLmNvdW50c1trZXldID0gdHJ1ZVxuICAgIGZsYWdzLmtleXMucHVzaChrZXkpXG4gIH0pXG5cbiAgO1tdLmNvbmNhdChvcHRzLm5vcm1hbGl6ZSkuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGZsYWdzLm5vcm1hbGl6ZVtrZXldID0gdHJ1ZVxuICAgIGZsYWdzLmtleXMucHVzaChrZXkpXG4gIH0pXG5cbiAgT2JqZWN0LmtleXMob3B0cy5uYXJnIHx8IHt9KS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgZmxhZ3MubmFyZ3Nba10gPSBvcHRzLm5hcmdba11cbiAgICBmbGFncy5rZXlzLnB1c2goaylcbiAgfSlcblxuICBPYmplY3Qua2V5cyhvcHRzLmNvZXJjZSB8fCB7fSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIGZsYWdzLmNvZXJjaW9uc1trXSA9IG9wdHMuY29lcmNlW2tdXG4gICAgZmxhZ3Mua2V5cy5wdXNoKGspXG4gIH0pXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob3B0cy5jb25maWcpIHx8IHR5cGVvZiBvcHRzLmNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICA7W10uY29uY2F0KG9wdHMuY29uZmlnKS5maWx0ZXIoQm9vbGVhbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBmbGFncy5jb25maWdzW2tleV0gPSB0cnVlXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICBPYmplY3Qua2V5cyhvcHRzLmNvbmZpZyB8fCB7fSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgZmxhZ3MuY29uZmlnc1trXSA9IG9wdHMuY29uZmlnW2tdXG4gICAgfSlcbiAgfVxuXG4gIC8vIGNyZWF0ZSBhIGxvb2t1cCB0YWJsZSB0aGF0IHRha2VzIGludG8gYWNjb3VudCBhbGxcbiAgLy8gY29tYmluYXRpb25zIG9mIGFsaWFzZXM6IHtmOiBbJ2ZvbyddLCBmb286IFsnZiddfVxuICBleHRlbmRBbGlhc2VzKG9wdHMua2V5LCBhbGlhc2VzLCBvcHRzLmRlZmF1bHQsIGZsYWdzLmFycmF5cylcblxuICAvLyBhcHBseSBkZWZhdWx0IHZhbHVlcyB0byBhbGwgYWxpYXNlcy5cbiAgT2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIChmbGFncy5hbGlhc2VzW2tleV0gfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgICBkZWZhdWx0c1thbGlhc10gPSBkZWZhdWx0c1trZXldXG4gICAgfSlcbiAgfSlcblxuICB2YXIgYXJndiA9IHsgXzogW10gfVxuXG4gIE9iamVjdC5rZXlzKGZsYWdzLmJvb2xzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlZmF1bHRzLCBrZXkpKSB7XG4gICAgICBzZXRBcmcoa2V5LCBkZWZhdWx0c1trZXldKVxuICAgICAgc2V0RGVmYXVsdGVkKGtleSlcbiAgICB9XG4gIH0pXG5cbiAgdmFyIG5vdEZsYWdzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXVxuICAgIHZhciBicm9rZW5cbiAgICB2YXIga2V5XG4gICAgdmFyIGxldHRlcnNcbiAgICB2YXIgbVxuICAgIHZhciBuZXh0XG4gICAgdmFyIHZhbHVlXG5cbiAgICAvLyAtLSBzZXBhcmF0ZWQgYnkgPVxuICAgIGlmIChhcmcubWF0Y2goL14tLS4rPS8pIHx8IChcbiAgICAgICFjb25maWd1cmF0aW9uWydzaG9ydC1vcHRpb24tZ3JvdXBzJ10gJiYgYXJnLm1hdGNoKC9eLS4rPS8pXG4gICAgKSkge1xuICAgICAgLy8gVXNpbmcgW1xcc1xcU10gaW5zdGVhZCBvZiAuIGJlY2F1c2UganMgZG9lc24ndCBzdXBwb3J0IHRoZVxuICAgICAgLy8gJ2RvdGFsbCcgcmVnZXggbW9kaWZpZXIuIFNlZTpcbiAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwNjgzMDgvMTMyMTZcbiAgICAgIG0gPSBhcmcubWF0Y2goL14tLT8oW149XSspPShbXFxzXFxTXSopJC8pXG5cbiAgICAgIC8vIG5hcmdzIGZvcm1hdCA9ICctLWY9bW9ua2V5IHdhc2hpbmcgY2F0J1xuICAgICAgaWYgKGNoZWNrQWxsQWxpYXNlcyhtWzFdLCBmbGFncy5uYXJncykpIHtcbiAgICAgICAgYXJncy5zcGxpY2UoaSArIDEsIDAsIG1bMl0pXG4gICAgICAgIGkgPSBlYXROYXJncyhpLCBtWzFdLCBhcmdzKVxuICAgICAgLy8gYXJyYXlzIGZvcm1hdCA9ICctLWY9YSBiIGMnXG4gICAgICB9IGVsc2UgaWYgKGNoZWNrQWxsQWxpYXNlcyhtWzFdLCBmbGFncy5hcnJheXMpICYmIGFyZ3MubGVuZ3RoID4gaSArIDEpIHtcbiAgICAgICAgYXJncy5zcGxpY2UoaSArIDEsIDAsIG1bMl0pXG4gICAgICAgIGkgPSBlYXRBcnJheShpLCBtWzFdLCBhcmdzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0QXJnKG1bMV0sIG1bMl0pXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcmcubWF0Y2gobmVnYXRlZEJvb2xlYW4pICYmIGNvbmZpZ3VyYXRpb25bJ2Jvb2xlYW4tbmVnYXRpb24nXSkge1xuICAgICAga2V5ID0gYXJnLm1hdGNoKG5lZ2F0ZWRCb29sZWFuKVsxXVxuICAgICAgc2V0QXJnKGtleSwgZmFsc2UpXG5cbiAgICAvLyAtLSBzZXBlcmF0ZWQgYnkgc3BhY2UuXG4gICAgfSBlbHNlIGlmIChhcmcubWF0Y2goL14tLS4rLykgfHwgKFxuICAgICAgIWNvbmZpZ3VyYXRpb25bJ3Nob3J0LW9wdGlvbi1ncm91cHMnXSAmJiBhcmcubWF0Y2goL14tLisvKVxuICAgICkpIHtcbiAgICAgIGtleSA9IGFyZy5tYXRjaCgvXi0tPyguKykvKVsxXVxuXG4gICAgICAvLyBuYXJncyBmb3JtYXQgPSAnLS1mb28gYSBiIGMnXG4gICAgICBpZiAoY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MubmFyZ3MpKSB7XG4gICAgICAgIGkgPSBlYXROYXJncyhpLCBrZXksIGFyZ3MpXG4gICAgICAvLyBhcnJheSBmb3JtYXQgPSAnLS1mb28gYSBiIGMnXG4gICAgICB9IGVsc2UgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmFycmF5cykgJiYgYXJncy5sZW5ndGggPiBpICsgMSkge1xuICAgICAgICBpID0gZWF0QXJyYXkoaSwga2V5LCBhcmdzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dCA9IGFyZ3NbaSArIDFdXG5cbiAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCAmJiAoIW5leHQubWF0Y2goL14tLykgfHxcbiAgICAgICAgICBuZXh0Lm1hdGNoKG5lZ2F0aXZlKSkgJiZcbiAgICAgICAgICAhY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuYm9vbHMpICYmXG4gICAgICAgICAgIWNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmNvdW50cykpIHtcbiAgICAgICAgICBzZXRBcmcoa2V5LCBuZXh0KVxuICAgICAgICAgIGkrK1xuICAgICAgICB9IGVsc2UgaWYgKC9eKHRydWV8ZmFsc2UpJC8udGVzdChuZXh0KSkge1xuICAgICAgICAgIHNldEFyZyhrZXksIG5leHQpXG4gICAgICAgICAgaSsrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0QXJnKGtleSwgZGVmYXVsdFZhbHVlKGtleSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIC8vIGRvdC1ub3RhdGlvbiBmbGFnIHNlcGVyYXRlZCBieSAnPScuXG4gICAgfSBlbHNlIGlmIChhcmcubWF0Y2goL14tLlxcLi4rPS8pKSB7XG4gICAgICBtID0gYXJnLm1hdGNoKC9eLShbXj1dKyk9KFtcXHNcXFNdKikkLylcbiAgICAgIHNldEFyZyhtWzFdLCBtWzJdKVxuXG4gICAgLy8gZG90LW5vdGF0aW9uIGZsYWcgc2VwZXJhdGVkIGJ5IHNwYWNlLlxuICAgIH0gZWxzZSBpZiAoYXJnLm1hdGNoKC9eLS5cXC4uKy8pKSB7XG4gICAgICBuZXh0ID0gYXJnc1tpICsgMV1cbiAgICAgIGtleSA9IGFyZy5tYXRjaCgvXi0oLlxcLi4rKS8pWzFdXG5cbiAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQgJiYgIW5leHQubWF0Y2goL14tLykgJiZcbiAgICAgICAgIWNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmJvb2xzKSAmJlxuICAgICAgICAhY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuY291bnRzKSkge1xuICAgICAgICBzZXRBcmcoa2V5LCBuZXh0KVxuICAgICAgICBpKytcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEFyZyhrZXksIGRlZmF1bHRWYWx1ZShrZXkpKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJnLm1hdGNoKC9eLVteLV0rLykgJiYgIWFyZy5tYXRjaChuZWdhdGl2ZSkpIHtcbiAgICAgIGxldHRlcnMgPSBhcmcuc2xpY2UoMSwgLTEpLnNwbGl0KCcnKVxuICAgICAgYnJva2VuID0gZmFsc2VcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZXR0ZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIG5leHQgPSBhcmcuc2xpY2UoaiArIDIpXG5cbiAgICAgICAgaWYgKGxldHRlcnNbaiArIDFdICYmIGxldHRlcnNbaiArIDFdID09PSAnPScpIHtcbiAgICAgICAgICB2YWx1ZSA9IGFyZy5zbGljZShqICsgMylcbiAgICAgICAgICBrZXkgPSBsZXR0ZXJzW2pdXG5cbiAgICAgICAgICAvLyBuYXJncyBmb3JtYXQgPSAnLWY9bW9ua2V5IHdhc2hpbmcgY2F0J1xuICAgICAgICAgIGlmIChjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5uYXJncykpIHtcbiAgICAgICAgICAgIGFyZ3Muc3BsaWNlKGkgKyAxLCAwLCB2YWx1ZSlcbiAgICAgICAgICAgIGkgPSBlYXROYXJncyhpLCBrZXksIGFyZ3MpXG4gICAgICAgICAgLy8gYXJyYXkgZm9ybWF0ID0gJy1mPWEgYiBjJ1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuYXJyYXlzKSAmJiBhcmdzLmxlbmd0aCA+IGkgKyAxKSB7XG4gICAgICAgICAgICBhcmdzLnNwbGljZShpICsgMSwgMCwgdmFsdWUpXG4gICAgICAgICAgICBpID0gZWF0QXJyYXkoaSwga2V5LCBhcmdzKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRBcmcoa2V5LCB2YWx1ZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicm9rZW4gPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0ID09PSAnLScpIHtcbiAgICAgICAgICBzZXRBcmcobGV0dGVyc1tqXSwgbmV4dClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3VycmVudCBsZXR0ZXIgaXMgYW4gYWxwaGFiZXRpYyBjaGFyYWN0ZXIgYW5kIG5leHQgdmFsdWUgaXMgYSBudW1iZXJcbiAgICAgICAgaWYgKC9bQS1aYS16XS8udGVzdChsZXR0ZXJzW2pdKSAmJlxuICAgICAgICAgIC9eLT9cXGQrKFxcLlxcZCopPyhlLT9cXGQrKT8kLy50ZXN0KG5leHQpKSB7XG4gICAgICAgICAgc2V0QXJnKGxldHRlcnNbal0sIG5leHQpXG4gICAgICAgICAgYnJva2VuID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGV0dGVyc1tqICsgMV0gJiYgbGV0dGVyc1tqICsgMV0ubWF0Y2goL1xcVy8pKSB7XG4gICAgICAgICAgc2V0QXJnKGxldHRlcnNbal0sIG5leHQpXG4gICAgICAgICAgYnJva2VuID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0QXJnKGxldHRlcnNbal0sIGRlZmF1bHRWYWx1ZShsZXR0ZXJzW2pdKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBrZXkgPSBhcmcuc2xpY2UoLTEpWzBdXG5cbiAgICAgIGlmICghYnJva2VuICYmIGtleSAhPT0gJy0nKSB7XG4gICAgICAgIC8vIG5hcmdzIGZvcm1hdCA9ICctZiBhIGIgYydcbiAgICAgICAgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLm5hcmdzKSkge1xuICAgICAgICAgIGkgPSBlYXROYXJncyhpLCBrZXksIGFyZ3MpXG4gICAgICAgIC8vIGFycmF5IGZvcm1hdCA9ICctZiBhIGIgYydcbiAgICAgICAgfSBlbHNlIGlmIChjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5hcnJheXMpICYmIGFyZ3MubGVuZ3RoID4gaSArIDEpIHtcbiAgICAgICAgICBpID0gZWF0QXJyYXkoaSwga2V5LCBhcmdzKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQgPSBhcmdzW2kgKyAxXVxuXG4gICAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCAmJiAoIS9eKC18LS0pW14tXS8udGVzdChuZXh0KSB8fFxuICAgICAgICAgICAgbmV4dC5tYXRjaChuZWdhdGl2ZSkpICYmXG4gICAgICAgICAgICAhY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuYm9vbHMpICYmXG4gICAgICAgICAgICAhY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuY291bnRzKSkge1xuICAgICAgICAgICAgc2V0QXJnKGtleSwgbmV4dClcbiAgICAgICAgICAgIGkrK1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14odHJ1ZXxmYWxzZSkkLy50ZXN0KG5leHQpKSB7XG4gICAgICAgICAgICBzZXRBcmcoa2V5LCBuZXh0KVxuICAgICAgICAgICAgaSsrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldEFyZyhrZXksIGRlZmF1bHRWYWx1ZShrZXkpKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJnID09PSAnLS0nKSB7XG4gICAgICBub3RGbGFncyA9IGFyZ3Muc2xpY2UoaSArIDEpXG4gICAgICBicmVha1xuICAgIH0gZWxzZSBpZiAoY29uZmlndXJhdGlvblsnaGFsdC1hdC1ub24tb3B0aW9uJ10pIHtcbiAgICAgIG5vdEZsYWdzID0gYXJncy5zbGljZShpKVxuICAgICAgYnJlYWtcbiAgICB9IGVsc2Uge1xuICAgICAgYXJndi5fLnB1c2gobWF5YmVDb2VyY2VOdW1iZXIoJ18nLCBhcmcpKVxuICAgIH1cbiAgfVxuXG4gIC8vIG9yZGVyIG9mIHByZWNlZGVuY2U6XG4gIC8vIDEuIGNvbW1hbmQgbGluZSBhcmdcbiAgLy8gMi4gdmFsdWUgZnJvbSBlbnYgdmFyXG4gIC8vIDMuIHZhbHVlIGZyb20gY29uZmlnIGZpbGVcbiAgLy8gNC4gdmFsdWUgZnJvbSBjb25maWcgb2JqZWN0c1xuICAvLyA1LiBjb25maWd1cmVkIGRlZmF1bHQgdmFsdWVcbiAgYXBwbHlFbnZWYXJzKGFyZ3YsIHRydWUpIC8vIHNwZWNpYWwgY2FzZTogY2hlY2sgZW52IHZhcnMgdGhhdCBwb2ludCB0byBjb25maWcgZmlsZVxuICBhcHBseUVudlZhcnMoYXJndiwgZmFsc2UpXG4gIHNldENvbmZpZyhhcmd2KVxuICBzZXRDb25maWdPYmplY3RzKClcbiAgYXBwbHlEZWZhdWx0c0FuZEFsaWFzZXMoYXJndiwgZmxhZ3MuYWxpYXNlcywgZGVmYXVsdHMpXG4gIGFwcGx5Q29lcmNpb25zKGFyZ3YpXG4gIGlmIChjb25maWd1cmF0aW9uWydzZXQtcGxhY2Vob2xkZXIta2V5J10pIHNldFBsYWNlaG9sZGVyS2V5cyhhcmd2KVxuXG4gIC8vIGZvciBhbnkgY291bnRzIGVpdGhlciBub3QgaW4gYXJncyBvciB3aXRob3V0IGFuIGV4cGxpY2l0IGRlZmF1bHQsIHNldCB0byAwXG4gIE9iamVjdC5rZXlzKGZsYWdzLmNvdW50cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXNLZXkoYXJndiwga2V5LnNwbGl0KCcuJykpKSBzZXRBcmcoa2V5LCAwKVxuICB9KVxuXG4gIC8vICctLScgZGVmYXVsdHMgdG8gdW5kZWZpbmVkLlxuICBpZiAobm90RmxhZ3NPcHRpb24gJiYgbm90RmxhZ3MubGVuZ3RoKSBhcmd2W25vdEZsYWdzQXJndl0gPSBbXVxuICBub3RGbGFncy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBhcmd2W25vdEZsYWdzQXJndl0ucHVzaChrZXkpXG4gIH0pXG5cbiAgLy8gaG93IG1hbnkgYXJndW1lbnRzIHNob3VsZCB3ZSBjb25zdW1lLCBiYXNlZFxuICAvLyBvbiB0aGUgbmFyZ3Mgb3B0aW9uP1xuICBmdW5jdGlvbiBlYXROYXJncyAoaSwga2V5LCBhcmdzKSB7XG4gICAgdmFyIGlpXG4gICAgY29uc3QgdG9FYXQgPSBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5uYXJncylcblxuICAgIC8vIG5hcmdzIHdpbGwgbm90IGNvbnN1bWUgZmxhZyBhcmd1bWVudHMsIGUuZy4sIC1hYmMsIC0tZm9vLFxuICAgIC8vIGFuZCB0ZXJtaW5hdGVzIHdoZW4gb25lIGlzIG9ic2VydmVkLlxuICAgIHZhciBhdmFpbGFibGUgPSAwXG4gICAgZm9yIChpaSA9IGkgKyAxOyBpaSA8IGFyZ3MubGVuZ3RoOyBpaSsrKSB7XG4gICAgICBpZiAoIWFyZ3NbaWldLm1hdGNoKC9eLVteMC05XS8pKSBhdmFpbGFibGUrK1xuICAgICAgZWxzZSBicmVha1xuICAgIH1cblxuICAgIGlmIChhdmFpbGFibGUgPCB0b0VhdCkgZXJyb3IgPSBFcnJvcihfXygnTm90IGVub3VnaCBhcmd1bWVudHMgZm9sbG93aW5nOiAlcycsIGtleSkpXG5cbiAgICBjb25zdCBjb25zdW1lZCA9IE1hdGgubWluKGF2YWlsYWJsZSwgdG9FYXQpXG4gICAgZm9yIChpaSA9IGkgKyAxOyBpaSA8IChjb25zdW1lZCArIGkgKyAxKTsgaWkrKykge1xuICAgICAgc2V0QXJnKGtleSwgYXJnc1tpaV0pXG4gICAgfVxuXG4gICAgcmV0dXJuIChpICsgY29uc3VtZWQpXG4gIH1cblxuICAvLyBpZiBhbiBvcHRpb24gaXMgYW4gYXJyYXksIGVhdCBhbGwgbm9uLWh5cGhlbmF0ZWQgYXJndW1lbnRzXG4gIC8vIGZvbGxvd2luZyBpdC4uLiBZVU0hXG4gIC8vIGUuZy4sIC0tZm9vIGFwcGxlIGJhbmFuYSBjYXQgYmVjb21lcyBbXCJhcHBsZVwiLCBcImJhbmFuYVwiLCBcImNhdFwiXVxuICBmdW5jdGlvbiBlYXRBcnJheSAoaSwga2V5LCBhcmdzKSB7XG4gICAgdmFyIHN0YXJ0ID0gaSArIDFcbiAgICB2YXIgYXJnc1RvU2V0ID0gW11cbiAgICB2YXIgbXVsdGlwbGVBcnJheUZsYWcgPSBpID4gMFxuICAgIGZvciAodmFyIGlpID0gaSArIDE7IGlpIDwgYXJncy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIGlmICgvXi0vLnRlc3QoYXJnc1tpaV0pICYmICFuZWdhdGl2ZS50ZXN0KGFyZ3NbaWldKSkge1xuICAgICAgICBpZiAoaWkgPT09IHN0YXJ0KSB7XG4gICAgICAgICAgc2V0QXJnKGtleSwgZGVmYXVsdEZvclR5cGUoJ2FycmF5JykpXG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbGVBcnJheUZsYWcgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpID0gaWlcbiAgICAgIGFyZ3NUb1NldC5wdXNoKGFyZ3NbaWldKVxuICAgIH1cbiAgICBpZiAobXVsdGlwbGVBcnJheUZsYWcpIHtcbiAgICAgIHNldEFyZyhrZXksIGFyZ3NUb1NldC5tYXAoZnVuY3Rpb24gKGFyZykge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc1ZhbHVlKGtleSwgYXJnKVxuICAgICAgfSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFyZ3NUb1NldC5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgc2V0QXJnKGtleSwgYXJnKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gaVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QXJnIChrZXksIHZhbCkge1xuICAgIHVuc2V0RGVmYXVsdGVkKGtleSlcblxuICAgIGlmICgvLS8udGVzdChrZXkpICYmIGNvbmZpZ3VyYXRpb25bJ2NhbWVsLWNhc2UtZXhwYW5zaW9uJ10pIHtcbiAgICAgIHZhciBhbGlhcyA9IGtleS5zcGxpdCgnLicpLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gY2FtZWxDYXNlKHByb3ApXG4gICAgICB9KS5qb2luKCcuJylcbiAgICAgIGFkZE5ld0FsaWFzKGtleSwgYWxpYXMpXG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gcHJvY2Vzc1ZhbHVlKGtleSwgdmFsKVxuXG4gICAgdmFyIHNwbGl0S2V5ID0ga2V5LnNwbGl0KCcuJylcbiAgICBzZXRLZXkoYXJndiwgc3BsaXRLZXksIHZhbHVlKVxuXG4gICAgLy8gaGFuZGxlIHBvcHVsYXRpbmcgYWxpYXNlcyBvZiB0aGUgZnVsbCBrZXlcbiAgICBpZiAoZmxhZ3MuYWxpYXNlc1trZXldKSB7XG4gICAgICBmbGFncy5hbGlhc2VzW2tleV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICB4ID0geC5zcGxpdCgnLicpXG4gICAgICAgIHNldEtleShhcmd2LCB4LCB2YWx1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIHBvcHVsYXRpbmcgYWxpYXNlcyBvZiB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgZG90LW5vdGF0aW9uIGtleVxuICAgIGlmIChzcGxpdEtleS5sZW5ndGggPiAxICYmIGNvbmZpZ3VyYXRpb25bJ2RvdC1ub3RhdGlvbiddKSB7XG4gICAgICA7KGZsYWdzLmFsaWFzZXNbc3BsaXRLZXlbMF1dIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHggPSB4LnNwbGl0KCcuJylcblxuICAgICAgICAvLyBleHBhbmQgYWxpYXMgd2l0aCBuZXN0ZWQgb2JqZWN0cyBpbiBrZXlcbiAgICAgICAgdmFyIGEgPSBbXS5jb25jYXQoc3BsaXRLZXkpXG4gICAgICAgIGEuc2hpZnQoKSAvLyBudWtlIHRoZSBvbGQga2V5LlxuICAgICAgICB4ID0geC5jb25jYXQoYSlcblxuICAgICAgICBzZXRLZXkoYXJndiwgeCwgdmFsdWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIFNldCBub3JtYWxpemUgZ2V0dGVyIGFuZCBzZXR0ZXIgd2hlbiBrZXkgaXMgaW4gJ25vcm1hbGl6ZScgYnV0IGlzbid0IGFuIGFycmF5XG4gICAgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLm5vcm1hbGl6ZSkgJiYgIWNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmFycmF5cykpIHtcbiAgICAgIHZhciBrZXlzID0gW2tleV0uY29uY2F0KGZsYWdzLmFsaWFzZXNba2V5XSB8fCBbXSlcbiAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGFyZ3YuX19kZWZpbmVTZXR0ZXJfXyhrZXksIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgdmFsID0gcGF0aC5ub3JtYWxpemUodilcbiAgICAgICAgfSlcblxuICAgICAgICBhcmd2Ll9fZGVmaW5lR2V0dGVyX18oa2V5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gcGF0aC5ub3JtYWxpemUodmFsKSA6IHZhbFxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGROZXdBbGlhcyAoa2V5LCBhbGlhcykge1xuICAgIGlmICghKGZsYWdzLmFsaWFzZXNba2V5XSAmJiBmbGFncy5hbGlhc2VzW2tleV0ubGVuZ3RoKSkge1xuICAgICAgZmxhZ3MuYWxpYXNlc1trZXldID0gW2FsaWFzXVxuICAgICAgbmV3QWxpYXNlc1thbGlhc10gPSB0cnVlXG4gICAgfVxuICAgIGlmICghKGZsYWdzLmFsaWFzZXNbYWxpYXNdICYmIGZsYWdzLmFsaWFzZXNbYWxpYXNdLmxlbmd0aCkpIHtcbiAgICAgIGFkZE5ld0FsaWFzKGFsaWFzLCBrZXkpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1ZhbHVlIChrZXksIHZhbCkge1xuICAgIC8vIHN0cmluZ3MgbWF5IGJlIHF1b3RlZCwgY2xlYW4gdGhpcyB1cCBhcyB3ZSBhc3NpZ24gdmFsdWVzLlxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJlxuICAgICAgKHZhbFswXSA9PT0gXCInXCIgfHwgdmFsWzBdID09PSAnXCInKSAmJlxuICAgICAgdmFsW3ZhbC5sZW5ndGggLSAxXSA9PT0gdmFsWzBdXG4gICAgKSB7XG4gICAgICB2YWwgPSB2YWwuc3Vic3RyaW5nKDEsIHZhbC5sZW5ndGggLSAxKVxuICAgIH1cblxuICAgIC8vIGhhbmRsZSBwYXJzaW5nIGJvb2xlYW4gYXJndW1lbnRzIC0tZm9vPXRydWUgLS1iYXIgZmFsc2UuXG4gICAgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmJvb2xzKSB8fCBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5jb3VudHMpKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHZhbCA9IHZhbCA9PT0gJ3RydWUnXG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gbWF5YmVDb2VyY2VOdW1iZXIoa2V5LCB2YWwpXG5cbiAgICAvLyBpbmNyZW1lbnQgYSBjb3VudCBnaXZlbiBhcyBhcmcgKGVpdGhlciBubyB2YWx1ZSBvciB2YWx1ZSBwYXJzZWQgYXMgYm9vbGVhbilcbiAgICBpZiAoY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuY291bnRzKSAmJiAoaXNVbmRlZmluZWQodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSkge1xuICAgICAgdmFsdWUgPSBpbmNyZW1lbnRcbiAgICB9XG5cbiAgICAvLyBTZXQgbm9ybWFsaXplZCB2YWx1ZSB3aGVuIGtleSBpcyBpbiAnbm9ybWFsaXplJyBhbmQgaW4gJ2FycmF5cydcbiAgICBpZiAoY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3Mubm9ybWFsaXplKSAmJiBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5hcnJheXMpKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB2YWx1ZSA9IHZhbC5tYXAocGF0aC5ub3JtYWxpemUpXG4gICAgICBlbHNlIHZhbHVlID0gcGF0aC5ub3JtYWxpemUodmFsKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heWJlQ29lcmNlTnVtYmVyIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKCFjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5zdHJpbmdzKSAmJiAhY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuY29lcmNpb25zKSkge1xuICAgICAgY29uc3Qgc2hvdWxkQ29lcmNlTnVtYmVyID0gaXNOdW1iZXIodmFsdWUpICYmIGNvbmZpZ3VyYXRpb25bJ3BhcnNlLW51bWJlcnMnXSAmJiAoXG4gICAgICAgIE51bWJlci5pc1NhZmVJbnRlZ2VyKE1hdGguZmxvb3IodmFsdWUpKVxuICAgICAgKVxuICAgICAgaWYgKHNob3VsZENvZXJjZU51bWJlciB8fCAoIWlzVW5kZWZpbmVkKHZhbHVlKSAmJiBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5udW1iZXJzKSkpIHZhbHVlID0gTnVtYmVyKHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIHNldCBhcmdzIGZyb20gY29uZmlnLmpzb24gZmlsZSwgdGhpcyBzaG91bGQgYmVcbiAgLy8gYXBwbGllZCBsYXN0IHNvIHRoYXQgZGVmYXVsdHMgY2FuIGJlIGFwcGxpZWQuXG4gIGZ1bmN0aW9uIHNldENvbmZpZyAoYXJndikge1xuICAgIHZhciBjb25maWdMb29rdXAgPSB7fVxuXG4gICAgLy8gZXhwYW5kIGRlZmF1bHRzL2FsaWFzZXMsIGluLWNhc2UgYW55IGhhcHBlbiB0byByZWZlcmVuY2VcbiAgICAvLyB0aGUgY29uZmlnLmpzb24gZmlsZS5cbiAgICBhcHBseURlZmF1bHRzQW5kQWxpYXNlcyhjb25maWdMb29rdXAsIGZsYWdzLmFsaWFzZXMsIGRlZmF1bHRzKVxuXG4gICAgT2JqZWN0LmtleXMoZmxhZ3MuY29uZmlncykuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnS2V5KSB7XG4gICAgICB2YXIgY29uZmlnUGF0aCA9IGFyZ3ZbY29uZmlnS2V5XSB8fCBjb25maWdMb29rdXBbY29uZmlnS2V5XVxuICAgICAgaWYgKGNvbmZpZ1BhdGgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgY29uZmlnID0gbnVsbFxuICAgICAgICAgIHZhciByZXNvbHZlZENvbmZpZ1BhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnUGF0aClcblxuICAgICAgICAgIGlmICh0eXBlb2YgZmxhZ3MuY29uZmlnc1tjb25maWdLZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25maWcgPSBmbGFncy5jb25maWdzW2NvbmZpZ0tleV0ocmVzb2x2ZWRDb25maWdQYXRoKVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25maWcgPSBlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgZXJyb3IgPSBjb25maWdcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IHJlcXVpcmUocmVzb2x2ZWRDb25maWdQYXRoKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldENvbmZpZ09iamVjdChjb25maWcpXG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgaWYgKGFyZ3ZbY29uZmlnS2V5XSkgZXJyb3IgPSBFcnJvcihfXygnSW52YWxpZCBKU09OIGNvbmZpZyBmaWxlOiAlcycsIGNvbmZpZ1BhdGgpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHNldCBhcmdzIGZyb20gY29uZmlnIG9iamVjdC5cbiAgLy8gaXQgcmVjdXJzaXZlbHkgY2hlY2tzIG5lc3RlZCBvYmplY3RzLlxuICBmdW5jdGlvbiBzZXRDb25maWdPYmplY3QgKGNvbmZpZywgcHJldikge1xuICAgIE9iamVjdC5rZXlzKGNvbmZpZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBjb25maWdba2V5XVxuICAgICAgdmFyIGZ1bGxLZXkgPSBwcmV2ID8gcHJldiArICcuJyArIGtleSA6IGtleVxuXG4gICAgICAvLyBpZiB0aGUgdmFsdWUgaXMgYW4gaW5uZXIgb2JqZWN0IGFuZCB3ZSBoYXZlIGRvdC1ub3RhdGlvblxuICAgICAgLy8gZW5hYmxlZCwgdHJlYXQgaW5uZXIgb2JqZWN0cyBpbiBjb25maWcgdGhlIHNhbWUgYXNcbiAgICAgIC8vIGhlYXZpbHkgbmVzdGVkIGRvdCBub3RhdGlvbnMgKGZvby5iYXIuYXBwbGUpLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIGNvbmZpZ3VyYXRpb25bJ2RvdC1ub3RhdGlvbiddKSB7XG4gICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBhbiBvYmplY3QgYnV0IG5vdCBhbiBhcnJheSwgY2hlY2sgbmVzdGVkIG9iamVjdFxuICAgICAgICBzZXRDb25maWdPYmplY3QodmFsdWUsIGZ1bGxLZXkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzZXR0aW5nIGFyZ3VtZW50cyB2aWEgQ0xJIHRha2VzIHByZWNlZGVuY2Ugb3ZlclxuICAgICAgICAvLyB2YWx1ZXMgd2l0aGluIHRoZSBjb25maWcgZmlsZS5cbiAgICAgICAgaWYgKCFoYXNLZXkoYXJndiwgZnVsbEtleS5zcGxpdCgnLicpKSB8fCAoZmxhZ3MuZGVmYXVsdGVkW2Z1bGxLZXldKSB8fCAoZmxhZ3MuYXJyYXlzW2Z1bGxLZXldICYmIGNvbmZpZ3VyYXRpb25bJ2NvbWJpbmUtYXJyYXlzJ10pKSB7XG4gICAgICAgICAgc2V0QXJnKGZ1bGxLZXksIHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHNldCBhbGwgY29uZmlnIG9iamVjdHMgcGFzc2VkIGluIG9wdHNcbiAgZnVuY3Rpb24gc2V0Q29uZmlnT2JqZWN0cyAoKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWdPYmplY3RzID09PSAndW5kZWZpbmVkJykgcmV0dXJuXG4gICAgY29uZmlnT2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWdPYmplY3QpIHtcbiAgICAgIHNldENvbmZpZ09iamVjdChjb25maWdPYmplY3QpXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5RW52VmFycyAoYXJndiwgY29uZmlnT25seSkge1xuICAgIGlmICh0eXBlb2YgZW52UHJlZml4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuXG5cbiAgICB2YXIgcHJlZml4ID0gdHlwZW9mIGVudlByZWZpeCA9PT0gJ3N0cmluZycgPyBlbnZQcmVmaXggOiAnJ1xuICAgIE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5mb3JFYWNoKGZ1bmN0aW9uIChlbnZWYXIpIHtcbiAgICAgIGlmIChwcmVmaXggPT09ICcnIHx8IGVudlZhci5sYXN0SW5kZXhPZihwcmVmaXgsIDApID09PSAwKSB7XG4gICAgICAgIC8vIGdldCBhcnJheSBvZiBuZXN0ZWQga2V5cyBhbmQgY29udmVydCB0aGVtIHRvIGNhbWVsIGNhc2VcbiAgICAgICAgdmFyIGtleXMgPSBlbnZWYXIuc3BsaXQoJ19fJykubWFwKGZ1bmN0aW9uIChrZXksIGkpIHtcbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAga2V5ID0ga2V5LnN1YnN0cmluZyhwcmVmaXgubGVuZ3RoKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2FtZWxDYXNlKGtleSlcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoKChjb25maWdPbmx5ICYmIGZsYWdzLmNvbmZpZ3Nba2V5cy5qb2luKCcuJyldKSB8fCAhY29uZmlnT25seSkgJiYgKCFoYXNLZXkoYXJndiwga2V5cykgfHwgZmxhZ3MuZGVmYXVsdGVkW2tleXMuam9pbignLicpXSkpIHtcbiAgICAgICAgICBzZXRBcmcoa2V5cy5qb2luKCcuJyksIHByb2Nlc3MuZW52W2VudlZhcl0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlDb2VyY2lvbnMgKGFyZ3YpIHtcbiAgICB2YXIgY29lcmNlXG4gICAgdmFyIGFwcGxpZWQgPSB7fVxuICAgIE9iamVjdC5rZXlzKGFyZ3YpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFhcHBsaWVkLmhhc093blByb3BlcnR5KGtleSkpIHsgLy8gSWYgd2UgaGF2ZW4ndCBhbHJlYWR5IGNvZXJjZWQgdGhpcyBvcHRpb24gdmlhIG9uZSBvZiBpdHMgYWxpYXNlc1xuICAgICAgICBjb2VyY2UgPSBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5jb2VyY2lvbnMpXG4gICAgICAgIGlmICh0eXBlb2YgY29lcmNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNvZXJjZShhcmd2W2tleV0pXG4gICAgICAgICAgICA7KFtdLmNvbmNhdChmbGFncy5hbGlhc2VzW2tleV0gfHwgW10sIGtleSkpLmZvckVhY2goYWxpID0+IHtcbiAgICAgICAgICAgICAgYXBwbGllZFthbGldID0gYXJndlthbGldID0gdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBlcnJvciA9IGVyclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBzZXRQbGFjZWhvbGRlcktleXMgKGFyZ3YpIHtcbiAgICBmbGFncy5rZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgLy8gZG9uJ3Qgc2V0IHBsYWNlaG9sZGVyIGtleXMgZm9yIGRvdCBub3RhdGlvbiBvcHRpb25zICdmb28uYmFyJy5cbiAgICAgIGlmICh+a2V5LmluZGV4T2YoJy4nKSkgcmV0dXJuXG4gICAgICBpZiAodHlwZW9mIGFyZ3Zba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIGFyZ3Zba2V5XSA9IHVuZGVmaW5lZFxuICAgIH0pXG4gICAgcmV0dXJuIGFyZ3ZcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5RGVmYXVsdHNBbmRBbGlhc2VzIChvYmosIGFsaWFzZXMsIGRlZmF1bHRzKSB7XG4gICAgT2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFoYXNLZXkob2JqLCBrZXkuc3BsaXQoJy4nKSkpIHtcbiAgICAgICAgc2V0S2V5KG9iaiwga2V5LnNwbGl0KCcuJyksIGRlZmF1bHRzW2tleV0pXG5cbiAgICAgICAgOyhhbGlhc2VzW2tleV0gfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICBpZiAoaGFzS2V5KG9iaiwgeC5zcGxpdCgnLicpKSkgcmV0dXJuXG4gICAgICAgICAgc2V0S2V5KG9iaiwgeC5zcGxpdCgnLicpLCBkZWZhdWx0c1trZXldKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBoYXNLZXkgKG9iaiwga2V5cykge1xuICAgIHZhciBvID0gb2JqXG5cbiAgICBpZiAoIWNvbmZpZ3VyYXRpb25bJ2RvdC1ub3RhdGlvbiddKSBrZXlzID0gW2tleXMuam9pbignLicpXVxuXG4gICAga2V5cy5zbGljZSgwLCAtMSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBvID0gKG9ba2V5XSB8fCB7fSlcbiAgICB9KVxuXG4gICAgdmFyIGtleSA9IGtleXNba2V5cy5sZW5ndGggLSAxXVxuXG4gICAgaWYgKHR5cGVvZiBvICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlXG4gICAgZWxzZSByZXR1cm4ga2V5IGluIG9cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEtleSAob2JqLCBrZXlzLCB2YWx1ZSkge1xuICAgIHZhciBvID0gb2JqXG5cbiAgICBpZiAoIWNvbmZpZ3VyYXRpb25bJ2RvdC1ub3RhdGlvbiddKSBrZXlzID0gW2tleXMuam9pbignLicpXVxuXG4gICAga2V5cy5zbGljZSgwLCAtMSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuICAgICAgaWYgKHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvW2tleV0gPSB7fVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9ba2V5XSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShvW2tleV0pKSB7XG4gICAgICAgIC8vIGVuc3VyZSB0aGF0IG9ba2V5XSBpcyBhbiBhcnJheSwgYW5kIHRoYXQgdGhlIGxhc3QgaXRlbSBpcyBhbiBlbXB0eSBvYmplY3QuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9ba2V5XSkpIHtcbiAgICAgICAgICBvW2tleV0ucHVzaCh7fSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvW2tleV0gPSBbb1trZXldLCB7fV1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdlIHdhbnQgdG8gdXBkYXRlIHRoZSBlbXB0eSBvYmplY3QgYXQgdGhlIGVuZCBvZiB0aGUgb1trZXldIGFycmF5LCBzbyBzZXQgbyB0byB0aGF0IG9iamVjdFxuICAgICAgICBvID0gb1trZXldW29ba2V5XS5sZW5ndGggLSAxXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbyA9IG9ba2V5XVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB2YXIga2V5ID0ga2V5c1trZXlzLmxlbmd0aCAtIDFdXG5cbiAgICB2YXIgaXNUeXBlQXJyYXkgPSBjaGVja0FsbEFsaWFzZXMoa2V5cy5qb2luKCcuJyksIGZsYWdzLmFycmF5cylcbiAgICB2YXIgaXNWYWx1ZUFycmF5ID0gQXJyYXkuaXNBcnJheSh2YWx1ZSlcbiAgICB2YXIgZHVwbGljYXRlID0gY29uZmlndXJhdGlvblsnZHVwbGljYXRlLWFyZ3VtZW50cy1hcnJheSddXG5cbiAgICBpZiAodmFsdWUgPT09IGluY3JlbWVudCkge1xuICAgICAgb1trZXldID0gaW5jcmVtZW50KG9ba2V5XSlcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob1trZXldKSkge1xuICAgICAgaWYgKGR1cGxpY2F0ZSAmJiBpc1R5cGVBcnJheSAmJiBpc1ZhbHVlQXJyYXkpIHtcbiAgICAgICAgb1trZXldID0gY29uZmlndXJhdGlvblsnZmxhdHRlbi1kdXBsaWNhdGUtYXJyYXlzJ10gPyBvW2tleV0uY29uY2F0KHZhbHVlKSA6IChBcnJheS5pc0FycmF5KG9ba2V5XVswXSkgPyBvW2tleV0gOiBbb1trZXldXSkuY29uY2F0KFt2YWx1ZV0pXG4gICAgICB9IGVsc2UgaWYgKCFkdXBsaWNhdGUgJiYgQm9vbGVhbihpc1R5cGVBcnJheSkgPT09IEJvb2xlYW4oaXNWYWx1ZUFycmF5KSkge1xuICAgICAgICBvW2tleV0gPSB2YWx1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb1trZXldID0gb1trZXldLmNvbmNhdChbdmFsdWVdKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob1trZXldID09PSB1bmRlZmluZWQgJiYgaXNUeXBlQXJyYXkpIHtcbiAgICAgIG9ba2V5XSA9IGlzVmFsdWVBcnJheSA/IHZhbHVlIDogW3ZhbHVlXVxuICAgIH0gZWxzZSBpZiAoZHVwbGljYXRlICYmICEob1trZXldID09PSB1bmRlZmluZWQgfHwgY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuYm9vbHMpIHx8IGNoZWNrQWxsQWxpYXNlcyhrZXlzLmpvaW4oJy4nKSwgZmxhZ3MuYm9vbHMpIHx8IGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmNvdW50cykpKSB7XG4gICAgICBvW2tleV0gPSBbIG9ba2V5XSwgdmFsdWUgXVxuICAgIH0gZWxzZSB7XG4gICAgICBvW2tleV0gPSB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIC8vIGV4dGVuZCB0aGUgYWxpYXNlcyBsaXN0IHdpdGggaW5mZXJyZWQgYWxpYXNlcy5cbiAgZnVuY3Rpb24gZXh0ZW5kQWxpYXNlcyAoKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIE9iamVjdC5rZXlzKG9iaiB8fCB7fSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIHNob3J0LWNpcmN1aXQgaWYgd2UndmUgYWxyZWFkeSBhZGRlZCBhIGtleVxuICAgICAgICAvLyB0byB0aGUgYWxpYXNlcyBhcnJheSwgZm9yIGV4YW1wbGUgaXQgbWlnaHRcbiAgICAgICAgLy8gZXhpc3QgaW4gYm90aCAnb3B0cy5kZWZhdWx0JyBhbmQgJ29wdHMua2V5Jy5cbiAgICAgICAgaWYgKGZsYWdzLmFsaWFzZXNba2V5XSkgcmV0dXJuXG5cbiAgICAgICAgZmxhZ3MuYWxpYXNlc1trZXldID0gW10uY29uY2F0KGFsaWFzZXNba2V5XSB8fCBbXSlcbiAgICAgICAgLy8gRm9yIFwiLS1vcHRpb24tbmFtZVwiLCBhbHNvIHNldCBhcmd2Lm9wdGlvbk5hbWVcbiAgICAgICAgZmxhZ3MuYWxpYXNlc1trZXldLmNvbmNhdChrZXkpLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICBpZiAoLy0vLnRlc3QoeCkgJiYgY29uZmlndXJhdGlvblsnY2FtZWwtY2FzZS1leHBhbnNpb24nXSkge1xuICAgICAgICAgICAgdmFyIGMgPSBjYW1lbENhc2UoeClcbiAgICAgICAgICAgIGlmIChjICE9PSBrZXkgJiYgZmxhZ3MuYWxpYXNlc1trZXldLmluZGV4T2YoYykgPT09IC0xKSB7XG4gICAgICAgICAgICAgIGZsYWdzLmFsaWFzZXNba2V5XS5wdXNoKGMpXG4gICAgICAgICAgICAgIG5ld0FsaWFzZXNbY10gPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAvLyBGb3IgXCItLW9wdGlvbk5hbWVcIiwgYWxzbyBzZXQgYXJndlsnb3B0aW9uLW5hbWUnXVxuICAgICAgICBmbGFncy5hbGlhc2VzW2tleV0uY29uY2F0KGtleSkuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIGlmICh4Lmxlbmd0aCA+IDEgJiYgL1tBLVpdLy50ZXN0KHgpICYmIGNvbmZpZ3VyYXRpb25bJ2NhbWVsLWNhc2UtZXhwYW5zaW9uJ10pIHtcbiAgICAgICAgICAgIHZhciBjID0gZGVjYW1lbGl6ZSh4LCAnLScpXG4gICAgICAgICAgICBpZiAoYyAhPT0ga2V5ICYmIGZsYWdzLmFsaWFzZXNba2V5XS5pbmRleE9mKGMpID09PSAtMSkge1xuICAgICAgICAgICAgICBmbGFncy5hbGlhc2VzW2tleV0ucHVzaChjKVxuICAgICAgICAgICAgICBuZXdBbGlhc2VzW2NdID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgZmxhZ3MuYWxpYXNlc1trZXldLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICBmbGFncy5hbGlhc2VzW3hdID0gW2tleV0uY29uY2F0KGZsYWdzLmFsaWFzZXNba2V5XS5maWx0ZXIoZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgIHJldHVybiB4ICE9PSB5XG4gICAgICAgICAgfSkpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvLyBjaGVjayBpZiBhIGZsYWcgaXMgc2V0IGZvciBhbnkgb2YgYSBrZXkncyBhbGlhc2VzLlxuICBmdW5jdGlvbiBjaGVja0FsbEFsaWFzZXMgKGtleSwgZmxhZykge1xuICAgIHZhciBpc1NldCA9IGZhbHNlXG4gICAgdmFyIHRvQ2hlY2sgPSBbXS5jb25jYXQoZmxhZ3MuYWxpYXNlc1trZXldIHx8IFtdLCBrZXkpXG5cbiAgICB0b0NoZWNrLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGZsYWdba2V5XSkgaXNTZXQgPSBmbGFnW2tleV1cbiAgICB9KVxuXG4gICAgcmV0dXJuIGlzU2V0XG4gIH1cblxuICBmdW5jdGlvbiBzZXREZWZhdWx0ZWQgKGtleSkge1xuICAgIFtdLmNvbmNhdChmbGFncy5hbGlhc2VzW2tleV0gfHwgW10sIGtleSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgZmxhZ3MuZGVmYXVsdGVkW2tdID0gdHJ1ZVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiB1bnNldERlZmF1bHRlZCAoa2V5KSB7XG4gICAgW10uY29uY2F0KGZsYWdzLmFsaWFzZXNba2V5XSB8fCBbXSwga2V5KS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICBkZWxldGUgZmxhZ3MuZGVmYXVsdGVkW2tdXG4gICAgfSlcbiAgfVxuXG4gIC8vIG1ha2UgYSBiZXN0IGVmZm9yIHRvIHBpY2sgYSBkZWZhdWx0IHZhbHVlXG4gIC8vIGZvciBhbiBvcHRpb24gYmFzZWQgb24gbmFtZSBhbmQgdHlwZS5cbiAgZnVuY3Rpb24gZGVmYXVsdFZhbHVlIChrZXkpIHtcbiAgICBpZiAoIWNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmJvb2xzKSAmJlxuICAgICAgICAhY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuY291bnRzKSAmJlxuICAgICAgICBgJHtrZXl9YCBpbiBkZWZhdWx0cykge1xuICAgICAgcmV0dXJuIGRlZmF1bHRzW2tleV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRlZmF1bHRGb3JUeXBlKGd1ZXNzVHlwZShrZXkpKVxuICAgIH1cbiAgfVxuXG4gIC8vIHJldHVybiBhIGRlZmF1bHQgdmFsdWUsIGdpdmVuIHRoZSB0eXBlIG9mIGEgZmxhZy4sXG4gIC8vIGUuZy4sIGtleSBvZiB0eXBlICdzdHJpbmcnIHdpbGwgZGVmYXVsdCB0byAnJywgcmF0aGVyIHRoYW4gJ3RydWUnLlxuICBmdW5jdGlvbiBkZWZhdWx0Rm9yVHlwZSAodHlwZSkge1xuICAgIHZhciBkZWYgPSB7XG4gICAgICBib29sZWFuOiB0cnVlLFxuICAgICAgc3RyaW5nOiAnJyxcbiAgICAgIG51bWJlcjogdW5kZWZpbmVkLFxuICAgICAgYXJyYXk6IFtdXG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZlt0eXBlXVxuICB9XG5cbiAgLy8gZ2l2ZW4gYSBmbGFnLCBlbmZvcmNlIGEgZGVmYXVsdCB0eXBlLlxuICBmdW5jdGlvbiBndWVzc1R5cGUgKGtleSkge1xuICAgIHZhciB0eXBlID0gJ2Jvb2xlYW4nXG5cbiAgICBpZiAoY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3Muc3RyaW5ncykpIHR5cGUgPSAnc3RyaW5nJ1xuICAgIGVsc2UgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLm51bWJlcnMpKSB0eXBlID0gJ251bWJlcidcbiAgICBlbHNlIGlmIChjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5hcnJheXMpKSB0eXBlID0gJ2FycmF5J1xuXG4gICAgcmV0dXJuIHR5cGVcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTnVtYmVyICh4KSB7XG4gICAgaWYgKHggPT09IG51bGwgfHwgeCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2VcbiAgICAvLyBpZiBsb2FkZWQgZnJvbSBjb25maWcsIG1heSBhbHJlYWR5IGJlIGEgbnVtYmVyLlxuICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHJldHVybiB0cnVlXG4gICAgLy8gaGV4YWRlY2ltYWwuXG4gICAgaWYgKC9eMHhbMC05YS1mXSskL2kudGVzdCh4KSkgcmV0dXJuIHRydWVcbiAgICAvLyBkb24ndCB0cmVhdCAwMTIzIGFzIGEgbnVtYmVyOyBhcyBpdCBkcm9wcyB0aGUgbGVhZGluZyAnMCcuXG4gICAgaWYgKHgubGVuZ3RoID4gMSAmJiB4WzBdID09PSAnMCcpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiAvXlstXT8oPzpcXGQrKD86XFwuXFxkKik/fFxcLlxcZCspKGVbLStdP1xcZCspPyQvLnRlc3QoeClcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVW5kZWZpbmVkIChudW0pIHtcbiAgICByZXR1cm4gbnVtID09PSB1bmRlZmluZWRcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYXJndjogYXJndixcbiAgICBlcnJvcjogZXJyb3IsXG4gICAgYWxpYXNlczogZmxhZ3MuYWxpYXNlcyxcbiAgICBuZXdBbGlhc2VzOiBuZXdBbGlhc2VzLFxuICAgIGNvbmZpZ3VyYXRpb246IGNvbmZpZ3VyYXRpb25cbiAgfVxufVxuXG4vLyBpZiBhbnkgYWxpYXNlcyByZWZlcmVuY2UgZWFjaCBvdGhlciwgd2Ugc2hvdWxkXG4vLyBtZXJnZSB0aGVtIHRvZ2V0aGVyLlxuZnVuY3Rpb24gY29tYmluZUFsaWFzZXMgKGFsaWFzZXMpIHtcbiAgdmFyIGFsaWFzQXJyYXlzID0gW11cbiAgdmFyIGNoYW5nZSA9IHRydWVcbiAgdmFyIGNvbWJpbmVkID0ge31cblxuICAvLyB0dXJuIGFsaWFzIGxvb2t1cCBoYXNoIHtrZXk6IFsnYWxpYXMxJywgJ2FsaWFzMiddfSBpbnRvXG4gIC8vIGEgc2ltcGxlIGFycmF5IFsna2V5JywgJ2FsaWFzMScsICdhbGlhczInXVxuICBPYmplY3Qua2V5cyhhbGlhc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBhbGlhc0FycmF5cy5wdXNoKFxuICAgICAgW10uY29uY2F0KGFsaWFzZXNba2V5XSwga2V5KVxuICAgIClcbiAgfSlcblxuICAvLyBjb21iaW5lIGFycmF5cyB1bnRpbCB6ZXJvIGNoYW5nZXMgYXJlXG4gIC8vIG1hZGUgaW4gYW4gaXRlcmF0aW9uLlxuICB3aGlsZSAoY2hhbmdlKSB7XG4gICAgY2hhbmdlID0gZmFsc2VcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsaWFzQXJyYXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBpaSA9IGkgKyAxOyBpaSA8IGFsaWFzQXJyYXlzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICB2YXIgaW50ZXJzZWN0ID0gYWxpYXNBcnJheXNbaV0uZmlsdGVyKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgcmV0dXJuIGFsaWFzQXJyYXlzW2lpXS5pbmRleE9mKHYpICE9PSAtMVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChpbnRlcnNlY3QubGVuZ3RoKSB7XG4gICAgICAgICAgYWxpYXNBcnJheXNbaV0gPSBhbGlhc0FycmF5c1tpXS5jb25jYXQoYWxpYXNBcnJheXNbaWldKVxuICAgICAgICAgIGFsaWFzQXJyYXlzLnNwbGljZShpaSwgMSlcbiAgICAgICAgICBjaGFuZ2UgPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG1hcCBhcnJheXMgYmFjayB0byB0aGUgaGFzaC1sb29rdXAgKGRlLWR1cGUgd2hpbGVcbiAgLy8gd2UncmUgYXQgaXQpLlxuICBhbGlhc0FycmF5cy5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhc0FycmF5KSB7XG4gICAgYWxpYXNBcnJheSA9IGFsaWFzQXJyYXkuZmlsdGVyKGZ1bmN0aW9uICh2LCBpLCBzZWxmKSB7XG4gICAgICByZXR1cm4gc2VsZi5pbmRleE9mKHYpID09PSBpXG4gICAgfSlcbiAgICBjb21iaW5lZFthbGlhc0FycmF5LnBvcCgpXSA9IGFsaWFzQXJyYXlcbiAgfSlcblxuICByZXR1cm4gY29tYmluZWRcbn1cblxuZnVuY3Rpb24gYXNzaWduIChkZWZhdWx0cywgY29uZmlndXJhdGlvbikge1xuICB2YXIgbyA9IHt9XG4gIGNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uIHx8IHt9XG5cbiAgT2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICBvW2tdID0gZGVmYXVsdHNba11cbiAgfSlcbiAgT2JqZWN0LmtleXMoY29uZmlndXJhdGlvbikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIG9ba10gPSBjb25maWd1cmF0aW9uW2tdXG4gIH0pXG5cbiAgcmV0dXJuIG9cbn1cblxuLy8gdGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlbiBhIGNvdW50IGlzIGdpdmVuIGFzIGFuIGFyZ1xuLy8gaXQgaXMgTk9UIGNhbGxlZCB0byBzZXQgYSBkZWZhdWx0IHZhbHVlXG4vLyB0aHVzIHdlIGNhbiBzdGFydCB0aGUgY291bnQgYXQgMSBpbnN0ZWFkIG9mIDBcbmZ1bmN0aW9uIGluY3JlbWVudCAob3JpZykge1xuICByZXR1cm4gb3JpZyAhPT0gdW5kZWZpbmVkID8gb3JpZyArIDEgOiAxXG59XG5cbmZ1bmN0aW9uIFBhcnNlciAoYXJncywgb3B0cykge1xuICB2YXIgcmVzdWx0ID0gcGFyc2UoYXJncy5zbGljZSgpLCBvcHRzKVxuXG4gIHJldHVybiByZXN1bHQuYXJndlxufVxuXG4vLyBwYXJzZSBhcmd1bWVudHMgYW5kIHJldHVybiBkZXRhaWxlZFxuLy8gbWV0YSBpbmZvcm1hdGlvbiwgYWxpYXNlcywgZXRjLlxuUGFyc2VyLmRldGFpbGVkID0gZnVuY3Rpb24gKGFyZ3MsIG9wdHMpIHtcbiAgcmV0dXJuIHBhcnNlKGFyZ3Muc2xpY2UoKSwgb3B0cylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXJcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBDb3JlIHBhY2thZ2VzXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbi8vIE5wbSBwYWNrYWdlc1xudmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbi8vIEN1c3RvbSBwYWNrYWdlc1xudmFyIGFwcGxpY2F0aW9uUHJvcGVydGllcyA9IHJlcXVpcmUoJy4vYXBpL2FwcGxpY2F0aW9uLXByb3BlcnRpZXMnKTtcbnZhciBhdHRhY2htZW50ID0gcmVxdWlyZSgnLi9hcGkvYXR0YWNobWVudCcpO1xudmFyIGF1ZGl0aW5nID0gcmVxdWlyZSgnLi9hcGkvYXVkaXRpbmcnKTtcbnZhciBhdXRoID0gcmVxdWlyZSgnLi9hcGkvYXV0aCcpO1xudmFyIGF2YXRhciA9IHJlcXVpcmUoJy4vYXBpL2F2YXRhcicpO1xudmFyIGJvYXJkID0gcmVxdWlyZSgnLi9hcGkvYm9hcmQnKTtcbnZhciBjb21tZW50ID0gcmVxdWlyZSgnLi9hcGkvY29tbWVudCcpO1xudmFyIGNvbXBvbmVudCA9IHJlcXVpcmUoJy4vYXBpL2NvbXBvbmVudCcpO1xudmFyIGN1c3RvbUZpZWxkT3B0aW9uID0gcmVxdWlyZSgnLi9hcGkvY3VzdG9tRmllbGRPcHRpb24nKTtcbnZhciBkYXNoYm9hcmQgPSByZXF1aXJlKCcuL2FwaS9kYXNoYm9hcmQnKTtcbnZhciBlcnJvclN0cmluZ3MgPSByZXF1aXJlKCcuL2xpYi9lcnJvcicpO1xudmFyIGZpZWxkID0gcmVxdWlyZSgnLi9hcGkvZmllbGQnKTtcbnZhciBmaWx0ZXIgPSByZXF1aXJlKCcuL2FwaS9maWx0ZXInKTtcbnZhciBncm91cCA9IHJlcXVpcmUoJy4vYXBpL2dyb3VwJyk7XG52YXIgZ3JvdXBVc2VyUGlja2VyID0gcmVxdWlyZSgnLi9hcGkvZ3JvdXBVc2VyUGlja2VyJyk7XG52YXIgZ3JvdXBzID0gcmVxdWlyZSgnLi9hcGkvZ3JvdXBzJyk7XG52YXIgaXNzdWUgPSByZXF1aXJlKCcuL2FwaS9pc3N1ZScpO1xudmFyIGlzc3VlTGluayA9IHJlcXVpcmUoJy4vYXBpL2lzc3VlTGluaycpO1xudmFyIGlzc3VlTGlua1R5cGUgPSByZXF1aXJlKCcuL2FwaS9pc3N1ZUxpbmtUeXBlJyk7XG52YXIgaXNzdWVUeXBlID0gcmVxdWlyZSgnLi9hcGkvaXNzdWVUeXBlJyk7XG52YXIganFsID0gcmVxdWlyZSgnLi9hcGkvanFsJyk7XG52YXIgbGljZW5zZVJvbGUgPSByZXF1aXJlKCcuL2FwaS9saWNlbnNlUm9sZScpO1xudmFyIGxpY2Vuc2VWYWxpZGF0b3IgPSByZXF1aXJlKCcuL2FwaS9saWNlbnNlVmFsaWRhdG9yJyk7XG52YXIgbXlQZXJtaXNzaW9ucyA9IHJlcXVpcmUoJy4vYXBpL215UGVybWlzc2lvbnMnKTtcbnZhciBteVByZWZlcmVuY2VzID0gcmVxdWlyZSgnLi9hcGkvbXlQcmVmZXJlbmNlcycpO1xudmFyIG15c2VsZiA9IHJlcXVpcmUoJy4vYXBpL215c2VsZicpO1xudmFyIG9hdXRoX3V0aWwgPSByZXF1aXJlKCcuL2xpYi9vYXV0aF91dGlsJyk7XG52YXIgcGFzc3dvcmQgPSByZXF1aXJlKCcuL2FwaS9wYXNzd29yZCcpO1xudmFyIHBlcm1pc3Npb25zID0gcmVxdWlyZSgnLi9hcGkvcGVybWlzc2lvbnMnKTtcbnZhciBwZXJtaXNzaW9uU2NoZW1lID0gcmVxdWlyZSgnLi9hcGkvcGVybWlzc2lvbi1zY2hlbWUnKTtcbnZhciBwcmlvcml0eSA9IHJlcXVpcmUoJy4vYXBpL3ByaW9yaXR5Jyk7XG52YXIgcHJvamVjdCA9IHJlcXVpcmUoJy4vYXBpL3Byb2plY3QnKTtcbnZhciBwcm9qZWN0Q2F0ZWdvcnkgPSByZXF1aXJlKCcuL2FwaS9wcm9qZWN0Q2F0ZWdvcnknKTtcbnZhciBwcm9qZWN0VmFsaWRhdGUgPSByZXF1aXJlKCcuL2FwaS9wcm9qZWN0VmFsaWRhdGUnKTtcbnZhciByZWluZGV4ID0gcmVxdWlyZSgnLi9hcGkvcmVpbmRleCcpO1xudmFyIHJlc29sdXRpb24gPSByZXF1aXJlKCcuL2FwaS9yZXNvbHV0aW9uJyk7XG52YXIgcm9sZXMgPSByZXF1aXJlKCcuL2FwaS9yb2xlcycpO1xudmFyIHNjcmVlbnMgPSByZXF1aXJlKCcuL2FwaS9zY3JlZW5zJyk7XG52YXIgc2VhcmNoID0gcmVxdWlyZSgnLi9hcGkvc2VhcmNoJyk7XG52YXIgc2VjdXJpdHlMZXZlbCA9IHJlcXVpcmUoJy4vYXBpL3NlY3VyaXR5TGV2ZWwnKTtcbnZhciBzZXJ2ZXJJbmZvID0gcmVxdWlyZSgnLi9hcGkvc2VydmVySW5mbycpO1xudmFyIHNldHRpbmdzID0gcmVxdWlyZSgnLi9hcGkvc2V0dGluZ3MnKTtcbnZhciBzcHJpbnQgPSByZXF1aXJlKCcuL2FwaS9zcHJpbnQnKTtcbnZhciBzdGF0dXMgPSByZXF1aXJlKCcuL2FwaS9zdGF0dXMnKTtcbnZhciBzdGF0dXNDYXRlZ29yeSA9IHJlcXVpcmUoJy4vYXBpL3N0YXR1c0NhdGVnb3J5Jyk7XG52YXIgdXNlciA9IHJlcXVpcmUoJy4vYXBpL3VzZXInKTtcbnZhciB2ZXJzaW9uID0gcmVxdWlyZSgnLi9hcGkvdmVyc2lvbicpO1xudmFyIHdlYmhvb2sgPSByZXF1aXJlKCcuL2FwaS93ZWJob29rJyk7XG52YXIgd29ya2Zsb3cgPSByZXF1aXJlKCcuL2FwaS93b3JrZmxvdycpO1xudmFyIHdvcmtmbG93U2NoZW1lID0gcmVxdWlyZSgnLi9hcGkvd29ya2Zsb3dTY2hlbWUnKTtcbnZhciB3b3JrbG9nID0gcmVxdWlyZSgnLi9hcGkvd29ya2xvZycpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjbGllbnQgZm9yIHRoZSBKaXJhIFJFU1QgQVBJXG4gKlxuICogQGNvbnN0cnVjdG9yIEppcmFDbGllbnRcbiAqIEBwcm9wZXJ0eSB7QWdpbGVCb2FyZENsaWVudH0gYm9hcmRcbiAqIEBwcm9wZXJ0eSB7QWdpbGVTcHJpbnRDbGllbnR9IHNwcmludFxuICpcbiAqIEBwcm9wZXJ0eSB7QXBwbGljYXRpb25Qcm9wZXJ0aWVzQ2xpZW50fSBhcHBsaWNhdGlvblByb3BlcnRpZXNcbiAqIEBwcm9wZXJ0eSB7QXR0YWNobWVudENsaWVudH0gYXR0YWNobWVudFxuICogQHByb3BlcnR5IHtBdWRpdGluZ0NsaWVudH0gYXVkaXRpbmdcbiAqIEBwcm9wZXJ0eSB7QXV0aENsaWVudH0gYXV0aFxuICogQHByb3BlcnR5IHtBdmF0YXJDbGllbnR9IGF2YXRhclxuICogQHByb3BlcnR5IHtDb21tZW50Q2xpZW50fSBjb21tZW50XG4gKiBAcHJvcGVydHkge0NvbXBvbmVudENsaWVudH0gY29tcG9uZW50XG4gKiBAcHJvcGVydHkge0N1c3RvbUZpZWxkT3B0aW9uQ2xpZW50fSBjdXN0b21GaWVsZE9wdGlvblxuICogQHByb3BlcnR5IHtEYXNoYm9hcmRDbGllbnR9IGRhc2hib2FyZFxuICogQHByb3BlcnR5IHtGaWVsZENsaWVudH0gZmllbGRcbiAqIEBwcm9wZXJ0eSB7RmlsdGVyQ2xpZW50fSBmaWx0ZXJcbiAqIEBwcm9wZXJ0eSB7R3JvdXBDbGllbnR9IGdyb3VwXG4gKiBAcHJvcGVydHkge0dyb3VwVXNlclBpY2tlckNsaWVudH0gZ3JvdXBVc2VyUGlja2VyXG4gKiBAcHJvcGVydHkge0dyb3Vwc0NsaWVudH0gZ3JvdXBzXG4gKiBAcHJvcGVydHkge0lzc3VlQ2xpZW50fSBpc3N1ZVxuICogQHByb3BlcnR5IHtJc3N1ZUxpbmtDbGllbnR9IGlzc3VlTGlua1xuICogQHByb3BlcnR5IHtJc3N1ZUxpbmtUeXBlQ2xpZW50fSBpc3N1ZUxpbmtUeXBlXG4gKiBAcHJvcGVydHkge0lzc3VlVHlwZUNsaWVudH0gaXNzdWVUeXBlXG4gKiBAcHJvcGVydHkge0pxbENsaWVudH0ganFsXG4gKiBAcHJvcGVydHkge0xpY2Vuc2VSb2xlQ2xpZW50fSBsaWNlbnNlUm9sZVxuICogQHByb3BlcnR5IHtMaWNlbnNlVmFsaWRhdG9yQ2xpZW50fSBsaWNlbnNlVmFsaWRhdG9yXG4gKiBAcHJvcGVydHkge015UGVybWlzc2lvbnNDbGllbnR9IG15UGVybWlzc2lvbnNcbiAqIEBwcm9wZXJ0eSB7TXlQcmVmZXJlbmNlc0NsaWVudH0gbXlQcmVmZXJlbmNlc1xuICogQHByb3BlcnR5IHtNeXNlbGZDbGllbnR9IG15c2VsZlxuICogQHByb3BlcnR5IHtQYXNzd29yZENsaWVudH0gcGFzc3dvcmRcbiAqIEBwcm9wZXJ0eSB7UGVybWlzc2lvbnNDbGllbnR9IHBlcm1pc3Npb25zXG4gKiBAcHJvcGVydHkge1Blcm1pc3Npb25TY2hlbWVDbGllbnR9IHBlcm1pc3Npb25TY2hlbWVcbiAqIEBwcm9wZXJ0eSB7UHJpb3JpdHlDbGllbnR9IHByaW9yaXR5XG4gKiBAcHJvcGVydHkge1Byb2plY3RDYXRlZ29yeUNsaWVudH0gcHJvamVjdENhdGVnb3J5XG4gKiBAcHJvcGVydHkge1Byb2plY3RDbGllbnR9IHByb2plY3RcbiAqIEBwcm9wZXJ0eSB7UHJvamVjdFZhbGlkYXRlQ2xpZW50fSBwcm9qZWN0VmFsaWRhdGVcbiAqIEBwcm9wZXJ0eSB7UmVpbmRleENsaWVudH0gcmVpbmRleFxuICogQHByb3BlcnR5IHtSZXNvbHV0aW9uQ2xpZW50fSByZXNvbHV0aW9uXG4gKiBAcHJvcGVydHkge1JvbGVDbGllbnR9IHJvbGVzXG4gKiBAcHJvcGVydHkge1NjcmVlbnNDbGllbnR9IHNjcmVlbnNcbiAqIEBwcm9wZXJ0eSB7U2VhcmNoQ2xpZW50fSBzZWFyY2hcbiAqIEBwcm9wZXJ0eSB7U2VjdXJpdHlMZXZlbENsaWVudH0gc2VjdXJpdHlMZXZlbFxuICogQHByb3BlcnR5IHtTZXJ2ZXJJbmZvQ2xpZW50fSBzZXJ2ZXJJbmZvXG4gKiBAcHJvcGVydHkge1NldHRpbmdzQ2xpZW50fSBzZXR0aW5nc1xuICogQHByb3BlcnR5IHtTdGF0dXNDYXRlZ29yeUNsaWVudH0gc3RhdHVzQ2F0ZWdvcnlcbiAqIEBwcm9wZXJ0eSB7U3RhdHVzQ2xpZW50fSBzdGF0dXNcbiAqIEBwcm9wZXJ0eSB7VXNlckNsaWVudH0gdXNlclxuICogQHByb3BlcnR5IHtWZXJzaW9uQ2xpZW50fSB2ZXJzaW9uXG4gKiBAcHJvcGVydHkge1dlYmhvb2tDbGllbnR9IHdlYmhvb2tcbiAqIEBwcm9wZXJ0eSB7V29ya2Zsb3dDbGllbnR9IHdvcmtmbG93XG4gKiBAcHJvcGVydHkge1dvcmtmbG93U2NoZW1lQ2xpZW50fSB3b3JrZmxvd1NjaGVtZVxuICogQHByb3BlcnR5IHtXb3JrbG9nQ2xpZW50fSB3b3JrbG9nXG4gKlxuICogQHBhcmFtIGNvbmZpZyBUaGUgaW5mb3JtYXRpb24gbmVlZGVkIHRvIGFjY2VzcyB0aGUgSmlyYSBBUElcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWcuaG9zdCBUaGUgaG9zdG5hbWUgb2YgdGhlIEppcmEgQVBJLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb25maWcucHJvdG9jb2w9aHR0cHNdIFRoZSBwcm90b2NvbCB1c2VkIHRvIGFjY3NlcyB0aGUgSmlyYSBBUEkuXG4gKiBAcGFyYW0ge251bWJlcn0gW2NvbmZpZy5wb3J0PTQ0M10gVGhlIHBvcnQgbnVtYmVyIHVzZWQgdG8gY29ubmVjdCB0byBKaXJhLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb25maWcucGF0aF9wcmVmaXg9XCIvXCJdIFRoZSBwcmVmaXggdG8gdXNlIGluIGZyb250IG9mIHRoZSBwYXRoLCBpZiBKaXJhIGlzbid0IGF0IFwiL1wiXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbmZpZy52ZXJzaW9uPTJdIFRoZSB2ZXJzaW9uIG9mIHRoZSBKaXJhIEFQSSB0byB3aGljaCB5b3Ugd2lsbCBiZSBjb25uZWN0aW5nLiAgQ3VycmVudGx5LCBvbmx5XG4gKiAgICAgdmVyc2lvbiAyIGlzIHN1cHBvcnRlZC5cbiAqIEBwYXJhbSBjb25maWcuYXV0aCBUaGUgYXV0aGVudGljYXRpb24gaW5mb3JtYXRpb24gdXNlZCB0cCBjb25uZWN0IHRvIEppcmEuIE11c3QgY29udGFpbiBFSVRIRVIgdXNlcm5hbWUgYW5kIHBhc3N3b3JkXG4gKiAgICAgT1Igb2F1dGggaW5mb3JtYXRpb24uICBPYXV0aCBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgb3ZlciB1c2VybmFtZS9wYXNzd29yZCBhdXRoZW50aWNhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLmJhc2ljX2F1dGgudXNlcm5hbWVdIFRoZSB1c2VybmFtZSBvZiB0aGUgdXNlciB0aGF0IHdpbGwgYmUgYXV0aGVudGljYXRlZC4gTVVTVCBiZSBpbmNsdWRlZFxuICogICAgIGlmIHVzaW5nIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBhdXRoZW50aWNhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLmJhc2ljX2F1dGgucGFzc3dvcmRdIFRoZSBwYXNzd29yZCBvZiB0aGUgdXNlciB0aGF0IHdpbGwgYmUgYXV0aGVudGljYXRlZC4gTVVTVCBiZSBpbmNsdWRlZFxuICogICAgIGlmIHVzaW5nIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBhdXRoZW50aWNhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLm9hdXRoLmNvbnN1bWVyX2tleV0gVGhlIGNvbnN1bWVyIGtleSB1c2VkIGluIHRoZSBKaXJhIEFwcGxpY2F0aW9uIExpbmsgZm9yIG9hdXRoXG4gKiAgICAgYXV0aGVudGljYXRpb24uICBNVVNUIGJlIGluY2x1ZGVkIGlmIHVzaW5nIE9BdXRoLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb25maWcub2F1dGgucHJpdmF0ZV9rZXldIFRoZSBwcml2YXRlIGtleSB1c2VkIGZvciBPQXV0aCBzZWN1cml0eS4gTVVTVCBiZSBpbmNsdWRlZCBpZiB1c2luZyBPQXV0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLm9hdXRoLnRva2VuXSBUaGUgVkVSSUZJRUQgdG9rZW4gdXNlZCB0byBjb25uZWN0IHRvIHRoZSBKaXJhIEFQSS4gIE1VU1QgYmUgaW5jbHVkZWQgaWYgdXNpbmdcbiAqICAgICBPQXV0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLm9hdXRoLnRva2VuX3NlY3JldF0gVGhlIHNlY3JldCBmb3IgdGhlIGFib3ZlIHRva2VuLiAgTVVTVCBiZSBpbmNsdWRlZCBpZiB1c2luZyBPYXV0aC5cbiAqIEBwYXJhbSB7Q29va2llSmFyfSBbY29uZmlnLmNvb2tpZV9qYXJdIFRoZSBDb29raWVKYXIgdG8gdXNlIGZvciBldmVyeSByZXF1ZXN0cy5cbiAqIEBwYXJhbSB7UHJvbWlzZX0gW2NvbmZpZy5wcm9taXNlXSBBbnkgZnVuY3Rpb24gKGNvbnN0cnVjdG9yKSBjb21wYXRpYmxlIHdpdGggUHJvbWlzZSAoYmx1ZWJpcmQsIFEsLi4uKS5cbiAqICAgICAgRGVmYXVsdCAtIG5hdGl2ZSBQcm9taXNlLlxuICogQHBhcmFtIHtSZXF1ZXN0fSBbY29uZmlnLnJlcXVlc3RdIEFueSBmdW5jdGlvbiAoY29uc3RydWN0b3IpIGNvbXBhdGlibGUgd2l0aCBSZXF1ZXN0IChyZXF1ZXN0LCBzdXBlcnRlc3QsLi4uKS5cbiAqICAgICAgRGVmYXVsdCAtIHJlcXVpcmUoJ3JlcXVlc3QnKS5cbiAqL1xuXG52YXIgSmlyYUNsaWVudCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIGlmKCFjb25maWcuaG9zdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0hPU1RfRVJST1IpO1xuICAgIH1cbiAgICB0aGlzLmhvc3QgPSBjb25maWcuaG9zdDtcbiAgICB0aGlzLnByb3RvY29sID0gY29uZmlnLnByb3RvY29sID8gY29uZmlnLnByb3RvY29sIDogJ2h0dHBzJztcbiAgICB0aGlzLnBhdGhfcHJlZml4ID0gY29uZmlnLnBhdGhfcHJlZml4ID8gY29uZmlnLnBhdGhfcHJlZml4IDogJy8nO1xuICAgIHRoaXMucG9ydCA9IGNvbmZpZy5wb3J0O1xuICAgIHRoaXMuYXBpVmVyc2lvbiA9IDI7IC8vIFRPRE8gQWRkIHN1cHBvcnQgZm9yIG90aGVyIHZlcnNpb25zLlxuICAgIHRoaXMuYWdpbGVBcGlWZXJzaW9uID0gJzEuMCc7XG4gICAgdGhpcy5hdXRoQXBpVmVyc2lvbiA9ICcxJztcbiAgICB0aGlzLndlYmhvb2tBcGlWZXJzaW9uID0gJzEuMCc7XG4gICAgdGhpcy5wcm9taXNlID0gY29uZmlnLnByb21pc2UgfHwgUHJvbWlzZTtcbiAgICB0aGlzLnJlcXVlc3RMaWIgPSBjb25maWcucmVxdWVzdCB8fCByZXF1ZXN0O1xuICAgIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gY29uZmlnLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICAgIGlmIChjb25maWcub2F1dGgpIHtcbiAgICAgICAgaWYgKCFjb25maWcub2F1dGguY29uc3VtZXJfa2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0NPTlNVTUVSX0tFWV9FUlJPUik7XG4gICAgICAgIH0gZWxzZSBpZiAoIWNvbmZpZy5vYXV0aC5wcml2YXRlX2tleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19QUklWQVRFX0tFWV9FUlJPUik7XG4gICAgICAgIH0gZWxzZSBpZiAoIWNvbmZpZy5vYXV0aC50b2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19PQVVUSF9UT0tFTl9FUlJPUik7XG4gICAgICAgIH0gZWxzZSBpZiAoIWNvbmZpZy5vYXV0aC50b2tlbl9zZWNyZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fT0FVVEhfVE9LRU5fU0VDUkVUX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub2F1dGhDb25maWcgPSBjb25maWcub2F1dGg7XG4gICAgICAgIHRoaXMub2F1dGhDb25maWcuc2lnbmF0dXJlX21ldGhvZCA9ICdSU0EtU0hBMSc7XG5cbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5iYXNpY19hdXRoKSB7XG4gICAgICAgIGlmIChjb25maWcuYmFzaWNfYXV0aC5iYXNlNjQpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzaWNfYXV0aCA9IHtcbiAgICAgICAgICAgICAgYmFzZTY0OiBjb25maWcuYmFzaWNfYXV0aC5iYXNlNjRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghY29uZmlnLmJhc2ljX2F1dGgudXNlcm5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX1VTRVJOQU1FX0VSUk9SKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbmZpZy5iYXNpY19hdXRoLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19QQVNTV09SRF9FUlJPUik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYmFzaWNfYXV0aCA9IHtcbiAgICAgICAgICAgICAgICB1c2VyOiBjb25maWcuYmFzaWNfYXV0aC51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzOiBjb25maWcuYmFzaWNfYXV0aC5wYXNzd29yZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb25maWcuY29va2llX2phcikge1xuICAgICAgICB0aGlzLmNvb2tpZV9qYXIgPSBjb25maWcuY29va2llX2phcjtcbiAgICB9XG5cbiAgICB0aGlzLmFwcGxpY2F0aW9uUHJvcGVydGllcyA9IG5ldyBhcHBsaWNhdGlvblByb3BlcnRpZXModGhpcyk7XG4gICAgdGhpcy5hdHRhY2htZW50ID0gbmV3IGF0dGFjaG1lbnQodGhpcyk7XG4gICAgdGhpcy5hdWRpdGluZyA9IG5ldyBhdWRpdGluZyh0aGlzKTtcbiAgICB0aGlzLmF1dGggPSBuZXcgYXV0aCh0aGlzKTtcbiAgICB0aGlzLmF2YXRhciA9IG5ldyBhdmF0YXIodGhpcyk7XG4gICAgdGhpcy5ib2FyZCA9IG5ldyBib2FyZCh0aGlzKTtcbiAgICB0aGlzLmNvbW1lbnQgPSBuZXcgY29tbWVudCh0aGlzKTtcbiAgICB0aGlzLmNvbXBvbmVudCA9IG5ldyBjb21wb25lbnQodGhpcyk7XG4gICAgdGhpcy5jdXN0b21GaWVsZE9wdGlvbiA9IG5ldyBjdXN0b21GaWVsZE9wdGlvbih0aGlzKTtcbiAgICB0aGlzLmRhc2hib2FyZCA9IG5ldyBkYXNoYm9hcmQodGhpcyk7XG4gICAgdGhpcy5maWVsZCA9IG5ldyBmaWVsZCh0aGlzKTtcbiAgICB0aGlzLmZpbHRlciA9IG5ldyBmaWx0ZXIodGhpcyk7XG4gICAgdGhpcy5ncm91cCA9IG5ldyBncm91cCh0aGlzKTtcbiAgICB0aGlzLmdyb3VwVXNlclBpY2tlciA9IG5ldyBncm91cFVzZXJQaWNrZXIodGhpcyk7XG4gICAgdGhpcy5ncm91cHMgPSBuZXcgZ3JvdXBzKHRoaXMpO1xuICAgIHRoaXMuaXNzdWUgPSBuZXcgaXNzdWUodGhpcyk7XG4gICAgdGhpcy5pc3N1ZUxpbmsgPSBuZXcgaXNzdWVMaW5rKHRoaXMpO1xuICAgIHRoaXMuaXNzdWVMaW5rVHlwZSA9IG5ldyBpc3N1ZUxpbmtUeXBlKHRoaXMpO1xuICAgIHRoaXMuaXNzdWVUeXBlID0gbmV3IGlzc3VlVHlwZSh0aGlzKTtcbiAgICB0aGlzLmpxbCA9IG5ldyBqcWwodGhpcyk7XG4gICAgdGhpcy5saWNlbnNlUm9sZSA9IG5ldyBsaWNlbnNlUm9sZSh0aGlzKTtcbiAgICB0aGlzLmxpY2Vuc2VWYWxpZGF0b3IgPSBuZXcgbGljZW5zZVZhbGlkYXRvcih0aGlzKTtcbiAgICB0aGlzLm15UGVybWlzc2lvbnMgPSBuZXcgbXlQZXJtaXNzaW9ucyh0aGlzKTtcbiAgICB0aGlzLm15UHJlZmVyZW5jZXMgPSBuZXcgbXlQcmVmZXJlbmNlcyh0aGlzKTtcbiAgICB0aGlzLm15c2VsZiA9IG5ldyBteXNlbGYodGhpcyk7XG4gICAgdGhpcy5wYXNzd29yZCA9IG5ldyBwYXNzd29yZCh0aGlzKTtcbiAgICB0aGlzLnBlcm1pc3Npb25zID0gbmV3IHBlcm1pc3Npb25zKHRoaXMpO1xuICAgIHRoaXMucGVybWlzc2lvblNjaGVtZSA9IG5ldyBwZXJtaXNzaW9uU2NoZW1lKHRoaXMpO1xuICAgIHRoaXMucHJpb3JpdHkgPSBuZXcgcHJpb3JpdHkodGhpcyk7XG4gICAgdGhpcy5wcm9qZWN0ID0gbmV3IHByb2plY3QodGhpcyk7XG4gICAgdGhpcy5wcm9qZWN0Q2F0ZWdvcnkgPSBuZXcgcHJvamVjdENhdGVnb3J5KHRoaXMpO1xuICAgIHRoaXMucHJvamVjdFZhbGlkYXRlID0gbmV3IHByb2plY3RWYWxpZGF0ZSh0aGlzKTtcbiAgICB0aGlzLnJlaW5kZXggPSBuZXcgcmVpbmRleCh0aGlzKTtcbiAgICB0aGlzLnJlc29sdXRpb24gPSBuZXcgcmVzb2x1dGlvbih0aGlzKTtcbiAgICB0aGlzLnJvbGVzID0gbmV3IHJvbGVzKHRoaXMpO1xuICAgIHRoaXMuc2NyZWVucyA9IG5ldyBzY3JlZW5zKHRoaXMpO1xuICAgIHRoaXMuc2VhcmNoID0gbmV3IHNlYXJjaCh0aGlzKTtcbiAgICB0aGlzLnNlY3VyaXR5TGV2ZWwgPSBuZXcgc2VjdXJpdHlMZXZlbCh0aGlzKTtcbiAgICB0aGlzLnNlcnZlckluZm8gPSBuZXcgc2VydmVySW5mbyh0aGlzKTtcbiAgICB0aGlzLnNldHRpbmdzID0gbmV3IHNldHRpbmdzKHRoaXMpO1xuICAgIHRoaXMuc3ByaW50ID0gbmV3IHNwcmludCh0aGlzKTtcbiAgICB0aGlzLnN0YXR1cyA9IG5ldyBzdGF0dXModGhpcyk7XG4gICAgdGhpcy5zdGF0dXNDYXRlZ29yeSA9IG5ldyBzdGF0dXNDYXRlZ29yeSh0aGlzKTtcbiAgICB0aGlzLnVzZXIgPSBuZXcgdXNlcih0aGlzKTtcbiAgICB0aGlzLnZlcnNpb24gPSBuZXcgdmVyc2lvbih0aGlzKTtcbiAgICB0aGlzLndlYmhvb2sgPSBuZXcgd2ViaG9vayh0aGlzKTtcbiAgICB0aGlzLndvcmtmbG93ID0gbmV3IHdvcmtmbG93KHRoaXMpO1xuICAgIHRoaXMud29ya2Zsb3dTY2hlbWUgPSBuZXcgd29ya2Zsb3dTY2hlbWUodGhpcyk7XG4gICAgdGhpcy53b3JrbG9nID0gbmV3IHdvcmtsb2codGhpcyk7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogU2ltcGxlIHV0aWxpdHkgdG8gYnVpbGQgYSBSRVNUIGVuZHBvaW50IFVSTCBmb3IgdGhlIEppcmEgQVBJLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBidWlsZFVSTFxuICAgICAqIEBtZW1iZXJPZiBKaXJhQ2xpZW50I1xuICAgICAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBVUkwgd2l0aG91dCBjb25jZXJuIGZvciB0aGUgcm9vdCBvZiB0aGUgUkVTVCBBUEkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbnN0cnVjdGVkIFVSTC5cbiAgICAgKi9cbiAgICB0aGlzLmJ1aWxkVVJMID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIGFwaUJhc2VQYXRoID0gdGhpcy5wYXRoX3ByZWZpeCArICdyZXN0L2FwaS8nO1xuICAgICAgICB2YXIgdmVyc2lvbiA9IHRoaXMuYXBpVmVyc2lvbjtcbiAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSB1cmwuZm9ybWF0KHtcbiAgICAgICAgICAgIHByb3RvY29sOiB0aGlzLnByb3RvY29sLFxuICAgICAgICAgICAgaG9zdG5hbWU6IHRoaXMuaG9zdCxcbiAgICAgICAgICAgIHBvcnQ6IHRoaXMucG9ydCxcbiAgICAgICAgICAgIHBhdGhuYW1lOiBhcGlCYXNlUGF0aCArIHZlcnNpb24gKyBwYXRoXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdFVybCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNpbXBsZSB1dGlsaXR5IHRvIGJ1aWxkIGEgUkVTVCBlbmRwb2ludCBVUkwgZm9yIHRoZSBKaXJhIEFnaWxlIEFQSS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgYnVpbGRBZ2lsZVVSTFxuICAgICAqIEBtZW1iZXJPZiBKaXJhQ2xpZW50I1xuICAgICAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBVUkwgd2l0aG91dCBjb25jZXJuIGZvciB0aGUgcm9vdCBvZiB0aGUgUkVTVCBBUEkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbnN0cnVjdGVkIFVSTC5cbiAgICAgKi9cbiAgICB0aGlzLmJ1aWxkQWdpbGVVUkwgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgYXBpQmFzZVBhdGggPSB0aGlzLnBhdGhfcHJlZml4ICsgJ3Jlc3QvYWdpbGUvJztcbiAgICAgICAgdmFyIHZlcnNpb24gPSB0aGlzLmFnaWxlQXBpVmVyc2lvbjtcbiAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSB1cmwuZm9ybWF0KHtcbiAgICAgICAgICAgIHByb3RvY29sOiB0aGlzLnByb3RvY29sLFxuICAgICAgICAgICAgaG9zdG5hbWU6IHRoaXMuaG9zdCxcbiAgICAgICAgICAgIHBvcnQ6IHRoaXMucG9ydCxcbiAgICAgICAgICAgIHBhdGhuYW1lOiBhcGlCYXNlUGF0aCArIHZlcnNpb24gKyBwYXRoXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdFVybCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNpbXBsZSB1dGlsaXR5IHRvIGJ1aWxkIGEgUkVTVCBlbmRwb2ludCBVUkwgZm9yIHRoZSBKaXJhIEF1dGggQVBJLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBidWlsZEF1dGhVUkxcbiAgICAgKiBAbWVtYmVyT2YgSmlyYUNsaWVudCNcbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgcGF0aCBvZiB0aGUgVVJMIHdpdGhvdXQgY29uY2VybiBmb3IgdGhlIHJvb3Qgb2YgdGhlIFJFU1QgQVBJLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb25zdHJ1Y3RlZCBVUkwuXG4gICAgICovXG4gICAgdGhpcy5idWlsZEF1dGhVUkwgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgYXBpQmFzZVBhdGggPSB0aGlzLnBhdGhfcHJlZml4ICsgJ3Jlc3QvYXV0aC8nO1xuICAgICAgICB2YXIgdmVyc2lvbiA9IHRoaXMuYXV0aEFwaVZlcnNpb247XG4gICAgICAgIHZhciByZXF1ZXN0VXJsID0gdXJsLmZvcm1hdCh7XG4gICAgICAgICAgICBwcm90b2NvbDogdGhpcy5wcm90b2NvbCxcbiAgICAgICAgICAgIGhvc3RuYW1lOiB0aGlzLmhvc3QsXG4gICAgICAgICAgICBwb3J0OiB0aGlzLnBvcnQsXG4gICAgICAgICAgICBwYXRobmFtZTogYXBpQmFzZVBhdGggKyB2ZXJzaW9uICsgcGF0aFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RVcmwpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTaW1wbGUgdXRpbGl0eSB0byBidWlsZCBhIFJFU1QgZW5kcG9pbnQgVVJMIGZvciB0aGUgSmlyYSB3ZWJob29rIEFQSS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgYnVpbGRXZWJob29rVVJMXG4gICAgICogQG1lbWJlck9mIEppcmFDbGllbnQjXG4gICAgICogQHBhcmFtIHBhdGggVGhlIHBhdGggb2YgdGhlIFVSTCB3aXRob3V0IGNvbmNlcm4gZm9yIHRoZSByb290IG9mIHRoZSBSRVNUIEFQSS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29uc3RydWN0ZWQgVVJMLlxuICAgICAqL1xuICAgIHRoaXMuYnVpbGRXZWJob29rVVJMID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIGFwaUJhc2VQYXRoID0gdGhpcy5wYXRoX3ByZWZpeCArICdyZXN0L3dlYmhvb2tzLyc7XG4gICAgICAgIHZhciB2ZXJzaW9uID0gdGhpcy53ZWJob29rQXBpVmVyc2lvbjtcbiAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSB1cmwuZm9ybWF0KHtcbiAgICAgICAgICAgIHByb3RvY29sOiB0aGlzLnByb3RvY29sLFxuICAgICAgICAgICAgaG9zdG5hbWU6IHRoaXMuaG9zdCxcbiAgICAgICAgICAgIHBvcnQ6IHRoaXMucG9ydCxcbiAgICAgICAgICAgIHBhdGhuYW1lOiBhcGlCYXNlUGF0aCArIHZlcnNpb24gKyBwYXRoXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdFVybCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1ha2UgYSByZXF1ZXN0IHRvIHRoZSBKaXJhIEFQSSBhbmQgY2FsbCBiYWNrIHdpdGggaXQncyByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgbWFrZVJlcXVlc3RcbiAgICAgKiBAbWVtYmVyT2YgSmlyYUNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgcmVxdWVzdCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aXRoIHRoZSBBUElzIHJlc3BvbnNlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3VjY2Vzc1N0cmluZ10gSWYgc3VwcGxpZWQsIHRoaXMgaXMgcmVwb3J0ZWQgaW5zdGVhZCBvZiB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aXRoIEFQSXMgcmVzcG9uc2Ugb3IgcmVqZWN0ZWQgd2l0aCBlcnJvclxuICAgICAqL1xuICAgIHRoaXMubWFrZVJlcXVlc3QgPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2ssIHN1Y2Nlc3NTdHJpbmcpIHtcbiAgICAgICAgbGV0IHJlcXVlc3RMaWIgPSB0aGlzLnJlcXVlc3RMaWI7XG4gICAgICAgIG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG5cbiAgICAgICAgaWYgKHRoaXMub2F1dGhDb25maWcpIHtcbiAgICAgICAgICAgIG9wdGlvbnMub2F1dGggPSB0aGlzLm9hdXRoQ29uZmlnO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYmFzaWNfYXV0aCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYmFzaWNfYXV0aC5iYXNlNjQpIHtcbiAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmhlYWRlcnMgPSB7fVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gJ0Jhc2ljICcgKyB0aGlzLmJhc2ljX2F1dGguYmFzZTY0XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvcHRpb25zLmF1dGggPSB0aGlzLmJhc2ljX2F1dGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29va2llX2phcikge1xuICAgICAgICAgICAgb3B0aW9ucy5qYXIgPSB0aGlzLmNvb2tpZV9qYXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlcXVlc3RMaWIob3B0aW9ucywgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2UsIGJvZHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyIHx8IHJlc3BvbnNlLnN0YXR1c0NvZGUudG9TdHJpbmcoKVswXSAhPSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIgPyBlcnIgOiBib2R5LCBudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBib2R5ID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChqc29uRXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhqc29uRXJyLCBudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHN1Y2Nlc3NTdHJpbmcgPyBzdWNjZXNzU3RyaW5nIDogYm9keSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMucHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVxID0gcmVxdWVzdExpYihvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdE9iaiA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICByZXEub24oJ3JlcXVlc3QnLCBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICByZXF1ZXN0T2JqID0gcmVxdWVzdDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJlcS5vbigncmVzcG9uc2UnLCBmdW5jdGlvbihyZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNhdmluZyBlcnJvclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSByZXNwb25zZS5zdGF0dXNDb2RlLnRvU3RyaW5nKClbMF0gIT09ICcyJztcblxuICAgICAgICAgICAgICAgICAgICAvLyBDb2xsZWN0aW5nIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHB1c2ggPSBib2R5LnB1c2guYmluZChib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2Uub24oJ2RhdGEnLCBwdXNoKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEYXRhIGNvbGxlY3RlZFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYm9keS5qb2luKCcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2luZyBKU09OXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0WzBdID09PSAnWycgfHwgcmVzdWx0WzBdID09PSAneycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmJvZHkgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Zzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdE9iai5faGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXF1ZXN0T2JqLl9oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXEub24oJ2Vycm9yJywgcmVqZWN0KTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbn0pLmNhbGwoSmlyYUNsaWVudC5wcm90b3R5cGUpO1xuXG5KaXJhQ2xpZW50Lm9hdXRoX3V0aWwgPSByZXF1aXJlKCcuL2xpYi9vYXV0aF91dGlsJyk7XG5cbmV4cG9ydHMub2F1dGhfdXRpbCA9IG9hdXRoX3V0aWw7XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCB3b3JkcyBjb21wb3NlZCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gKi9cbnZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG52YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmXFxcXHVmZTIwLVxcXFx1ZmUyMycsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGYwJyxcbiAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICByc0xvd2VyUmFuZ2UgPSAnYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmJyxcbiAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgcnNQdW5jdHVhdGlvblJhbmdlID0gJ1xcXFx1MjAwMC1cXFxcdTIwNmYnLFxuICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnLFxuICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLFxuICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9NYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSArICddJyxcbiAgICByc0RpZ2l0cyA9ICdcXFxcZCsnLFxuICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgcnNNaXNjID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyByc0JyZWFrUmFuZ2UgKyByc0RpZ2l0cyArIHJzRGluZ2JhdFJhbmdlICsgcnNMb3dlclJhbmdlICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICByc1VwcGVyID0gJ1snICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xudmFyIHJzTG93ZXJNaXNjID0gJyg/OicgKyByc0xvd2VyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgIHJzVXBwZXJNaXNjID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgIHJzT3B0TG93ZXJDb250ciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgIHJzT3B0VXBwZXJDb250ciA9ICcoPzonICsgcnNBcG9zICsgJyg/OkR8TEx8TXxSRXxTfFR8VkUpKT8nLFxuICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxO1xuXG4vKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbnZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gKi9cbnZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xudmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0TG93ZXJDb250ciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICByc1VwcGVyTWlzYyArICcrJyArIHJzT3B0VXBwZXJDb250ciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc0xvd2VyTWlzYywgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyTWlzYyArICcrJyArIHJzT3B0TG93ZXJDb250cixcbiAgcnNVcHBlciArICcrJyArIHJzT3B0VXBwZXJDb250cixcbiAgcnNEaWdpdHMsXG4gIHJzRW1vamlcbl0uam9pbignfCcpLCAnZycpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG52YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezIsfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xudmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICdcXHhkZic6ICdzcycsXG4gIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzcydcbn07XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxuLyoqXG4gKiBTcGxpdHMgYW4gQVNDSUkgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICovXG5mdW5jdGlvbiBhc2NpaVdvcmRzKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG4vKipcbiAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gKi9cbnZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbn1cblxuLyoqXG4gKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG4vKipcbiAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICogLy8gPT4gJ2RlamEgdnUnXG4gKi9cbmZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gKiAvLyA9PiAnZm9vX2JhcidcbiAqXG4gKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gKiAvLyA9PiAnZm9vX2JhcidcbiAqXG4gKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAqIC8vID0+ICdmb29fYmFyJ1xuICovXG52YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG59KTtcblxuLyoqXG4gKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAqL1xuZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICB9XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc25ha2VDYXNlO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG52YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xudmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZlxcXFx1ZmUyMC1cXFxcdWZlMjMnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmMCcsXG4gICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib01hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlICsgJ10nLFxuICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcnNMb3dlck1pc2MgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNVcHBlck1pc2MgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNPcHRMb3dlckNvbnRyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgcnNPcHRVcHBlckNvbnRyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xudmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAqL1xudmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG52YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG52YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRMb3dlckNvbnRyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gIHJzVXBwZXJNaXNjICsgJysnICsgcnNPcHRVcHBlckNvbnRyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTG93ZXJNaXNjLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgcnNVcHBlciArICc/JyArIHJzTG93ZXJNaXNjICsgJysnICsgcnNPcHRMb3dlckNvbnRyLFxuICByc1VwcGVyICsgJysnICsgcnNPcHRVcHBlckNvbnRyLFxuICByc0RpZ2l0cyxcbiAgcnNFbW9qaVxuXS5qb2luKCd8JyksICdnJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xudmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib01hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbnZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mix9W2Etel18WzAtOV1bYS16QS1aXXxbYS16QS1aXVswLTldfFteYS16QS1aMC05IF0vO1xuXG4vKiogVXNlZCB0byBtYXAgTGF0aW4gVW5pY29kZSBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuICovXG52YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICdcXHhjMCc6ICdBJywgICdcXHhjMSc6ICdBJywgJ1xceGMyJzogJ0EnLCAnXFx4YzMnOiAnQScsICdcXHhjNCc6ICdBJywgJ1xceGM1JzogJ0EnLFxuICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAnXFx4ZDAnOiAnRCcsICAnXFx4ZjAnOiAnZCcsXG4gICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICdcXHhjYyc6ICdJJywgICdcXHhjZCc6ICdJJywgJ1xceGNlJzogJ0knLCAnXFx4Y2YnOiAnSScsXG4gICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgJ1xceGQyJzogJ08nLCAgJ1xceGQzJzogJ08nLCAnXFx4ZDQnOiAnTycsICdcXHhkNSc6ICdPJywgJ1xceGQ2JzogJ08nLCAnXFx4ZDgnOiAnTycsXG4gICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAnXFx4ZjknOiAndScsICAnXFx4ZmEnOiAndScsICdcXHhmYic6ICd1JywgJ1xceGZjJzogJ3UnLFxuICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgJ1xceGRlJzogJ1RoJywgJ1xceGZlJzogJ3RoJyxcbiAgJ1xceGRmJzogJ3NzJyxcbiAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgJ1xcdTAxMDAnOiAnQScsICAnXFx1MDEwMic6ICdBJywgJ1xcdTAxMDQnOiAnQScsXG4gICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICdcXHUwMTA3JzogJ2MnLCAgJ1xcdTAxMDknOiAnYycsICdcXHUwMTBiJzogJ2MnLCAnXFx1MDEwZCc6ICdjJyxcbiAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAnXFx1MDExMyc6ICdlJywgICdcXHUwMTE1JzogJ2UnLCAnXFx1MDExNyc6ICdlJywgJ1xcdTAxMTknOiAnZScsICdcXHUwMTFiJzogJ2UnLFxuICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgJ1xcdTAxMjQnOiAnSCcsICAnXFx1MDEyNic6ICdIJywgJ1xcdTAxMjUnOiAnaCcsICdcXHUwMTI3JzogJ2gnLFxuICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAnXFx1MDEzNCc6ICdKJywgICdcXHUwMTM1JzogJ2onLFxuICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgJ1xcdTAxM2EnOiAnbCcsICAnXFx1MDEzYyc6ICdsJywgJ1xcdTAxM2UnOiAnbCcsICdcXHUwMTQwJzogJ2wnLCAnXFx1MDE0Mic6ICdsJyxcbiAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICdcXHUwMTRjJzogJ08nLCAgJ1xcdTAxNGUnOiAnTycsICdcXHUwMTUwJzogJ08nLFxuICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICdcXHUwMTU1JzogJ3InLCAgJ1xcdTAxNTcnOiAncicsICdcXHUwMTU5JzogJ3InLFxuICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgJ1xcdTAxNjInOiAnVCcsICAnXFx1MDE2NCc6ICdUJywgJ1xcdTAxNjYnOiAnVCcsXG4gICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgJ1xcdTAxNjknOiAndScsICAnXFx1MDE2Yic6ICd1JywgJ1xcdTAxNmQnOiAndScsICdcXHUwMTZmJzogJ3UnLCAnXFx1MDE3MSc6ICd1JywgJ1xcdTAxNzMnOiAndScsXG4gICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAnXFx1MDE3OSc6ICdaJywgICdcXHUwMTdiJzogJ1onLCAnXFx1MDE3ZCc6ICdaJyxcbiAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAnXFx1MDE1Mic6ICdPZScsICdcXHUwMTUzJzogJ29lJyxcbiAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3NzJ1xufTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xufVxuXG4vKipcbiAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbi8qKlxuICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAqL1xudmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG59XG5cbi8qKlxuICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gIH1cbiAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5ndGg7XG4gIH1cbiAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICBzdGFydCA+Pj49IDA7XG5cbiAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICovXG5mdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAqIC8vID0+ICdmb29CYXInXG4gKlxuICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gKiAvLyA9PiAnZm9vQmFyJ1xuICpcbiAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICogLy8gPT4gJ2Zvb0JhcidcbiAqL1xudmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xufSk7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gKiB0byBsb3dlciBjYXNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICogLy8gPT4gJ0ZyZWQnXG4gKi9cbmZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG59XG5cbi8qKlxuICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gKiAvLyA9PiAnZGVqYSB2dSdcbiAqL1xuZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gKiAvLyA9PiAnRnJlZCdcbiAqXG4gKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAqIC8vID0+ICdGUkVEJ1xuICovXG52YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuLyoqXG4gKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAqL1xuZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICB9XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxDYXNlO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG52YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xudmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZlxcXFx1ZmUyMC1cXFxcdWZlMjMnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmMCcsXG4gICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UgKyAnXScsXG4gICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByc0xvd2VyTWlzYyA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICByc1VwcGVyTWlzYyA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICByc09wdExvd2VyQ29udHIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICByc09wdFVwcGVyQ29udHIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG52YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICovXG52YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbnZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdExvd2VyQ29udHIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgcnNVcHBlck1pc2MgKyAnKycgKyByc09wdFVwcGVyQ29udHIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNMb3dlck1pc2MsICckJ10uam9pbignfCcpICsgJyknLFxuICByc1VwcGVyICsgJz8nICsgcnNMb3dlck1pc2MgKyAnKycgKyByc09wdExvd2VyQ29udHIsXG4gIHJzVXBwZXIgKyAnKycgKyByc09wdFVwcGVyQ29udHIsXG4gIHJzRGlnaXRzLFxuICByc0Vtb2ppXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xudmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyLH1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbi8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbnZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICdcXHhlMCc6ICdhJywgICdcXHhlMSc6ICdhJywgJ1xceGUyJzogJ2EnLCAnXFx4ZTMnOiAnYScsICdcXHhlNCc6ICdhJywgJ1xceGU1JzogJ2EnLFxuICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgJ1xceGM4JzogJ0UnLCAgJ1xceGM5JzogJ0UnLCAnXFx4Y2EnOiAnRScsICdcXHhjYic6ICdFJyxcbiAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgJ1xceGVjJzogJ2knLCAgJ1xceGVkJzogJ2knLCAnXFx4ZWUnOiAnaScsICdcXHhlZic6ICdpJyxcbiAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgJ1xceGYyJzogJ28nLCAgJ1xceGYzJzogJ28nLCAnXFx4ZjQnOiAnbycsICdcXHhmNSc6ICdvJywgJ1xceGY2JzogJ28nLCAnXFx4ZjgnOiAnbycsXG4gICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICdcXHhkZCc6ICdZJywgICdcXHhmZCc6ICd5JywgJ1xceGZmJzogJ3knLFxuICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAnXFx4ZGYnOiAnc3MnLFxuICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgJ1xcdTAxMDEnOiAnYScsICAnXFx1MDEwMyc6ICdhJywgJ1xcdTAxMDUnOiAnYScsXG4gICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAnXFx1MDEwZSc6ICdEJywgICdcXHUwMTEwJzogJ0QnLCAnXFx1MDEwZic6ICdkJywgJ1xcdTAxMTEnOiAnZCcsXG4gICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICdcXHUwMTFjJzogJ0cnLCAgJ1xcdTAxMWUnOiAnRycsICdcXHUwMTIwJzogJ0cnLCAnXFx1MDEyMic6ICdHJyxcbiAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICdcXHUwMTI4JzogJ0knLCAgJ1xcdTAxMmEnOiAnSScsICdcXHUwMTJjJzogJ0knLCAnXFx1MDEyZSc6ICdJJywgJ1xcdTAxMzAnOiAnSScsXG4gICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICdcXHUwMTM2JzogJ0snLCAgJ1xcdTAxMzcnOiAnaycsICdcXHUwMTM4JzogJ2snLFxuICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAnXFx1MDE0Myc6ICdOJywgICdcXHUwMTQ1JzogJ04nLCAnXFx1MDE0Nyc6ICdOJywgJ1xcdTAxNGEnOiAnTicsXG4gICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICdcXHUwMTRkJzogJ28nLCAgJ1xcdTAxNGYnOiAnbycsICdcXHUwMTUxJzogJ28nLFxuICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICdcXHUwMTVhJzogJ1MnLCAgJ1xcdTAxNWMnOiAnUycsICdcXHUwMTVlJzogJ1MnLCAnXFx1MDE2MCc6ICdTJyxcbiAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgJ1xcdTAxNjMnOiAndCcsICAnXFx1MDE2NSc6ICd0JywgJ1xcdTAxNjcnOiAndCcsXG4gICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgJ1xcdTAxNzQnOiAnVycsICAnXFx1MDE3NSc6ICd3JyxcbiAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAnXFx1MDE3YSc6ICd6JywgICdcXHUwMTdjJzogJ3onLCAnXFx1MDE3ZSc6ICd6JyxcbiAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAnXFx1MDE0OSc6IFwiJ25cIiwgJ1xcdTAxN2YnOiAnc3MnXG59O1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbi8qKlxuICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICovXG52YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG59XG5cbi8qKlxuICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAqIC8vID0+ICdkZWphIHZ1J1xuICovXG5mdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICogLy8gPT4gJ2Zvby1iYXInXG4gKlxuICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICogLy8gPT4gJ2Zvby1iYXInXG4gKlxuICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gKiAvLyA9PiAnZm9vLWJhcidcbiAqL1xudmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbi8qKlxuICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gKi9cbmZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtlYmFiQ2FzZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm9zXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhZGxpbmVcIik7IiwidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIF8wNzc3ID0gcGFyc2VJbnQoJzA3NzcnLCA4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBta2RpclAubWtkaXJwID0gbWtkaXJQLm1rZGlyUCA9IG1rZGlyUDtcblxuZnVuY3Rpb24gbWtkaXJQIChwLCBvcHRzLCBmLCBtYWRlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGYgPSBvcHRzO1xuICAgICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKCFvcHRzIHx8IHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRzID0geyBtb2RlOiBvcHRzIH07XG4gICAgfVxuICAgIFxuICAgIHZhciBtb2RlID0gb3B0cy5tb2RlO1xuICAgIHZhciB4ZnMgPSBvcHRzLmZzIHx8IGZzO1xuICAgIFxuICAgIGlmIChtb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbW9kZSA9IF8wNzc3ICYgKH5wcm9jZXNzLnVtYXNrKCkpO1xuICAgIH1cbiAgICBpZiAoIW1hZGUpIG1hZGUgPSBudWxsO1xuICAgIFxuICAgIHZhciBjYiA9IGYgfHwgZnVuY3Rpb24gKCkge307XG4gICAgcCA9IHBhdGgucmVzb2x2ZShwKTtcbiAgICBcbiAgICB4ZnMubWtkaXIocCwgbW9kZSwgZnVuY3Rpb24gKGVyKSB7XG4gICAgICAgIGlmICghZXIpIHtcbiAgICAgICAgICAgIG1hZGUgPSBtYWRlIHx8IHA7XG4gICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgbWFkZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChlci5jb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdFTk9FTlQnOlxuICAgICAgICAgICAgICAgIG1rZGlyUChwYXRoLmRpcm5hbWUocCksIG9wdHMsIGZ1bmN0aW9uIChlciwgbWFkZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXIpIGNiKGVyLCBtYWRlKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBta2RpclAocCwgb3B0cywgY2IsIG1hZGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiBhbnkgb3RoZXIgZXJyb3IsIGp1c3Qgc2VlIGlmIHRoZXJlJ3MgYSBkaXJcbiAgICAgICAgICAgIC8vIHRoZXJlIGFscmVhZHkuICBJZiBzbywgdGhlbiBob29yYXkhICBJZiBub3QsIHRoZW4gc29tZXRoaW5nXG4gICAgICAgICAgICAvLyBpcyBib3JrZWQuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHhmcy5zdGF0KHAsIGZ1bmN0aW9uIChlcjIsIHN0YXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN0YXQgZmFpbHMsIHRoZW4gdGhhdCdzIHN1cGVyIHdlaXJkLlxuICAgICAgICAgICAgICAgICAgICAvLyBsZXQgdGhlIG9yaWdpbmFsIGVycm9yIGJlIHRoZSBmYWlsdXJlIHJlYXNvbi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyMiB8fCAhc3RhdC5pc0RpcmVjdG9yeSgpKSBjYihlciwgbWFkZSlcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBjYihudWxsLCBtYWRlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5ta2RpclAuc3luYyA9IGZ1bmN0aW9uIHN5bmMgKHAsIG9wdHMsIG1hZGUpIHtcbiAgICBpZiAoIW9wdHMgfHwgdHlwZW9mIG9wdHMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIG9wdHMgPSB7IG1vZGU6IG9wdHMgfTtcbiAgICB9XG4gICAgXG4gICAgdmFyIG1vZGUgPSBvcHRzLm1vZGU7XG4gICAgdmFyIHhmcyA9IG9wdHMuZnMgfHwgZnM7XG4gICAgXG4gICAgaWYgKG1vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtb2RlID0gXzA3NzcgJiAofnByb2Nlc3MudW1hc2soKSk7XG4gICAgfVxuICAgIGlmICghbWFkZSkgbWFkZSA9IG51bGw7XG5cbiAgICBwID0gcGF0aC5yZXNvbHZlKHApO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgeGZzLm1rZGlyU3luYyhwLCBtb2RlKTtcbiAgICAgICAgbWFkZSA9IG1hZGUgfHwgcDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycjApIHtcbiAgICAgICAgc3dpdGNoIChlcnIwLmNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0VOT0VOVCcgOlxuICAgICAgICAgICAgICAgIG1hZGUgPSBzeW5jKHBhdGguZGlybmFtZShwKSwgb3B0cywgbWFkZSk7XG4gICAgICAgICAgICAgICAgc3luYyhwLCBvcHRzLCBtYWRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgYW55IG90aGVyIGVycm9yLCBqdXN0IHNlZSBpZiB0aGVyZSdzIGEgZGlyXG4gICAgICAgICAgICAvLyB0aGVyZSBhbHJlYWR5LiAgSWYgc28sIHRoZW4gaG9vcmF5ISAgSWYgbm90LCB0aGVuIHNvbWV0aGluZ1xuICAgICAgICAgICAgLy8gaXMgYm9ya2VkLlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB2YXIgc3RhdDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ID0geGZzLnN0YXRTeW5jKHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyMSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnIwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXN0YXQuaXNEaXJlY3RvcnkoKSkgdGhyb3cgZXJyMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYWRlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcHJlc2VydmVDYW1lbENhc2UgPSBpbnB1dCA9PiB7XG5cdGxldCBpc0xhc3RDaGFyTG93ZXIgPSBmYWxzZTtcblx0bGV0IGlzTGFzdENoYXJVcHBlciA9IGZhbHNlO1xuXHRsZXQgaXNMYXN0TGFzdENoYXJVcHBlciA9IGZhbHNlO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBjID0gaW5wdXRbaV07XG5cblx0XHRpZiAoaXNMYXN0Q2hhckxvd2VyICYmIC9bYS16QS1aXS8udGVzdChjKSAmJiBjLnRvVXBwZXJDYXNlKCkgPT09IGMpIHtcblx0XHRcdGlucHV0ID0gaW5wdXQuc2xpY2UoMCwgaSkgKyAnLScgKyBpbnB1dC5zbGljZShpKTtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IGZhbHNlO1xuXHRcdFx0aXNMYXN0TGFzdENoYXJVcHBlciA9IGlzTGFzdENoYXJVcHBlcjtcblx0XHRcdGlzTGFzdENoYXJVcHBlciA9IHRydWU7XG5cdFx0XHRpKys7XG5cdFx0fSBlbHNlIGlmIChpc0xhc3RDaGFyVXBwZXIgJiYgaXNMYXN0TGFzdENoYXJVcHBlciAmJiAvW2EtekEtWl0vLnRlc3QoYykgJiYgYy50b0xvd2VyQ2FzZSgpID09PSBjKSB7XG5cdFx0XHRpbnB1dCA9IGlucHV0LnNsaWNlKDAsIGkgLSAxKSArICctJyArIGlucHV0LnNsaWNlKGkgLSAxKTtcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSBmYWxzZTtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IGMudG9Mb3dlckNhc2UoKSA9PT0gYztcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSBjLnRvVXBwZXJDYXNlKCkgPT09IGM7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHtcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdHBhc2NhbENhc2U6IGZhbHNlXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGNvbnN0IHBvc3RQcm9jZXNzID0geCA9PiBvcHRpb25zLnBhc2NhbENhc2UgPyB4LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgeC5zbGljZSgxKSA6IHg7XG5cblx0aWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdFx0aW5wdXQgPSBpbnB1dC5tYXAoeCA9PiB4LnRyaW0oKSlcblx0XHRcdC5maWx0ZXIoeCA9PiB4Lmxlbmd0aClcblx0XHRcdC5qb2luKCctJyk7XG5cdH0gZWxzZSB7XG5cdFx0aW5wdXQgPSBpbnB1dC50cmltKCk7XG5cdH1cblxuXHRpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0aWYgKGlucHV0Lmxlbmd0aCA9PT0gMSkge1xuXHRcdHJldHVybiBvcHRpb25zLnBhc2NhbENhc2UgPyBpbnB1dC50b1VwcGVyQ2FzZSgpIDogaW5wdXQudG9Mb3dlckNhc2UoKTtcblx0fVxuXG5cdGlmICgvXlthLXpcXGRdKyQvLnRlc3QoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIHBvc3RQcm9jZXNzKGlucHV0KTtcblx0fVxuXG5cdGNvbnN0IGhhc1VwcGVyQ2FzZSA9IGlucHV0ICE9PSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuXG5cdGlmIChoYXNVcHBlckNhc2UpIHtcblx0XHRpbnB1dCA9IHByZXNlcnZlQ2FtZWxDYXNlKGlucHV0KTtcblx0fVxuXG5cdGlucHV0ID0gaW5wdXRcblx0XHQucmVwbGFjZSgvXltfLlxcLSBdKy8sICcnKVxuXHRcdC50b0xvd2VyQ2FzZSgpXG5cdFx0LnJlcGxhY2UoL1tfLlxcLSBdKyhcXHd8JCkvZywgKG0sIHAxKSA9PiBwMS50b1VwcGVyQ2FzZSgpKTtcblxuXHRyZXR1cm4gcG9zdFByb2Nlc3MoaW5wdXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgc2VwKSB7XG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG5cdH1cblxuXHRzZXAgPSB0eXBlb2Ygc2VwID09PSAndW5kZWZpbmVkJyA/ICdfJyA6IHNlcDtcblxuXHRyZXR1cm4gc3RyXG5cdFx0LnJlcGxhY2UoLyhbYS16XFxkXSkoW0EtWl0pL2csICckMScgKyBzZXAgKyAnJDInKVxuXHRcdC5yZXBsYWNlKC8oW0EtWl0rKShbQS1aXVthLXpcXGRdKykvZywgJyQxJyArIHNlcCArICckMicpXG5cdFx0LnRvTG93ZXJDYXNlKCk7XG59O1xuIiwiLy8gdGFrZSBhbiB1bi1zcGxpdCBhcmd2IHN0cmluZyBhbmQgdG9rZW5pemUgaXQuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmdTdHJpbmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJnU3RyaW5nKSkgcmV0dXJuIGFyZ1N0cmluZ1xuXG4gIGFyZ1N0cmluZyA9IGFyZ1N0cmluZy50cmltKClcblxuICB2YXIgaSA9IDBcbiAgdmFyIHByZXZDID0gbnVsbFxuICB2YXIgYyA9IG51bGxcbiAgdmFyIG9wZW5pbmcgPSBudWxsXG4gIHZhciBhcmdzID0gW11cblxuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgYXJnU3RyaW5nLmxlbmd0aDsgaWkrKykge1xuICAgIHByZXZDID0gY1xuICAgIGMgPSBhcmdTdHJpbmcuY2hhckF0KGlpKVxuXG4gICAgLy8gc3BsaXQgb24gc3BhY2VzIHVubGVzcyB3ZSdyZSBpbiBxdW90ZXMuXG4gICAgaWYgKGMgPT09ICcgJyAmJiAhb3BlbmluZykge1xuICAgICAgaWYgKCEocHJldkMgPT09ICcgJykpIHtcbiAgICAgICAgaSsrXG4gICAgICB9XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIGRvbid0IHNwbGl0IHRoZSBzdHJpbmcgaWYgd2UncmUgaW4gbWF0Y2hpbmdcbiAgICAvLyBvcGVuaW5nIG9yIGNsb3Npbmcgc2luZ2xlIGFuZCBkb3VibGUgcXVvdGVzLlxuICAgIGlmIChjID09PSBvcGVuaW5nKSB7XG4gICAgICBpZiAoIWFyZ3NbaV0pIGFyZ3NbaV0gPSAnJ1xuICAgICAgb3BlbmluZyA9IG51bGxcbiAgICB9IGVsc2UgaWYgKChjID09PSBcIidcIiB8fCBjID09PSAnXCInKSAmJiAhb3BlbmluZykge1xuICAgICAgb3BlbmluZyA9IGNcbiAgICB9XG5cbiAgICBpZiAoIWFyZ3NbaV0pIGFyZ3NbaV0gPSAnJ1xuICAgIGFyZ3NbaV0gKz0gY1xuICB9XG5cbiAgcmV0dXJuIGFyZ3Ncbn1cbiIsImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUNvbnRleHQocmVxKSB7XG5cdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHR0aHJvdyBlO1xufVxud2VicGFja0VtcHR5Q29udGV4dC5rZXlzID0gZnVuY3Rpb24oKSB7IHJldHVybiBbXTsgfTtcbndlYnBhY2tFbXB0eUNvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG53ZWJwYWNrRW1wdHlDb250ZXh0LmlkID0gOTc7IiwiLy8gQ29weXJpZ2h0IDIwMTAtMjAxMiBNaWtlYWwgUm9nZXJzXG4vL1xuLy8gICAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vICAgIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vICAgIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyAgICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyAgICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyAgICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vICAgIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vICAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4ndXNlIHN0cmljdCdcblxudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpXG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vbGliL2Nvb2tpZXMnKVxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2xpYi9oZWxwZXJzJylcblxudmFyIHBhcmFtc0hhdmVSZXF1ZXN0Qm9keSA9IGhlbHBlcnMucGFyYW1zSGF2ZVJlcXVlc3RCb2R5XG5cbi8vIG9yZ2FuaXplIHBhcmFtcyBmb3IgcGF0Y2gsIHBvc3QsIHB1dCwgaGVhZCwgZGVsXG5mdW5jdGlvbiBpbml0UGFyYW1zICh1cmksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9uc1xuICB9XG5cbiAgdmFyIHBhcmFtcyA9IHt9XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICBleHRlbmQocGFyYW1zLCBvcHRpb25zLCB7dXJpOiB1cml9KVxuICB9IGVsc2UgaWYgKHR5cGVvZiB1cmkgPT09ICdzdHJpbmcnKSB7XG4gICAgZXh0ZW5kKHBhcmFtcywge3VyaTogdXJpfSlcbiAgfSBlbHNlIHtcbiAgICBleHRlbmQocGFyYW1zLCB1cmkpXG4gIH1cblxuICBwYXJhbXMuY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBwYXJhbXMuY2FsbGJhY2tcbiAgcmV0dXJuIHBhcmFtc1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0ICh1cmksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5kZWZpbmVkIGlzIG5vdCBhIHZhbGlkIHVyaSBvciBvcHRpb25zIG9iamVjdC4nKVxuICB9XG5cbiAgdmFyIHBhcmFtcyA9IGluaXRQYXJhbXModXJpLCBvcHRpb25zLCBjYWxsYmFjaylcblxuICBpZiAocGFyYW1zLm1ldGhvZCA9PT0gJ0hFQUQnICYmIHBhcmFtc0hhdmVSZXF1ZXN0Qm9keShwYXJhbXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdIVFRQIEhFQUQgcmVxdWVzdHMgTVVTVCBOT1QgaW5jbHVkZSBhIHJlcXVlc3QgYm9keS4nKVxuICB9XG5cbiAgcmV0dXJuIG5ldyByZXF1ZXN0LlJlcXVlc3QocGFyYW1zKVxufVxuXG5mdW5jdGlvbiB2ZXJiRnVuYyAodmVyYikge1xuICB2YXIgbWV0aG9kID0gdmVyYi50b1VwcGVyQ2FzZSgpXG4gIHJldHVybiBmdW5jdGlvbiAodXJpLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBwYXJhbXMgPSBpbml0UGFyYW1zKHVyaSwgb3B0aW9ucywgY2FsbGJhY2spXG4gICAgcGFyYW1zLm1ldGhvZCA9IG1ldGhvZFxuICAgIHJldHVybiByZXF1ZXN0KHBhcmFtcywgcGFyYW1zLmNhbGxiYWNrKVxuICB9XG59XG5cbi8vIGRlZmluZSBsaWtlIHRoaXMgdG8gcGxlYXNlIGNvZGVpbnRlbC9pbnRlbGxpc2Vuc2UgSURFc1xucmVxdWVzdC5nZXQgPSB2ZXJiRnVuYygnZ2V0JylcbnJlcXVlc3QuaGVhZCA9IHZlcmJGdW5jKCdoZWFkJylcbnJlcXVlc3Qub3B0aW9ucyA9IHZlcmJGdW5jKCdvcHRpb25zJylcbnJlcXVlc3QucG9zdCA9IHZlcmJGdW5jKCdwb3N0JylcbnJlcXVlc3QucHV0ID0gdmVyYkZ1bmMoJ3B1dCcpXG5yZXF1ZXN0LnBhdGNoID0gdmVyYkZ1bmMoJ3BhdGNoJylcbnJlcXVlc3QuZGVsID0gdmVyYkZ1bmMoJ2RlbGV0ZScpXG5yZXF1ZXN0WydkZWxldGUnXSA9IHZlcmJGdW5jKCdkZWxldGUnKVxuXG5yZXF1ZXN0LmphciA9IGZ1bmN0aW9uIChzdG9yZSkge1xuICByZXR1cm4gY29va2llcy5qYXIoc3RvcmUpXG59XG5cbnJlcXVlc3QuY29va2llID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gY29va2llcy5wYXJzZShzdHIpXG59XG5cbmZ1bmN0aW9uIHdyYXBSZXF1ZXN0TWV0aG9kIChtZXRob2QsIG9wdGlvbnMsIHJlcXVlc3RlciwgdmVyYikge1xuICByZXR1cm4gZnVuY3Rpb24gKHVyaSwgb3B0cywgY2FsbGJhY2spIHtcbiAgICB2YXIgcGFyYW1zID0gaW5pdFBhcmFtcyh1cmksIG9wdHMsIGNhbGxiYWNrKVxuXG4gICAgdmFyIHRhcmdldCA9IHt9XG4gICAgZXh0ZW5kKHRydWUsIHRhcmdldCwgb3B0aW9ucywgcGFyYW1zKVxuXG4gICAgdGFyZ2V0LnBvb2wgPSBwYXJhbXMucG9vbCB8fCBvcHRpb25zLnBvb2xcblxuICAgIGlmICh2ZXJiKSB7XG4gICAgICB0YXJnZXQubWV0aG9kID0gdmVyYi50b1VwcGVyQ2FzZSgpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1ldGhvZCA9IHJlcXVlc3RlclxuICAgIH1cblxuICAgIHJldHVybiBtZXRob2QodGFyZ2V0LCB0YXJnZXQuY2FsbGJhY2spXG4gIH1cbn1cblxucmVxdWVzdC5kZWZhdWx0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCByZXF1ZXN0ZXIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXF1ZXN0ZXIgPSBvcHRpb25zXG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB2YXIgZGVmYXVsdHMgPSB3cmFwUmVxdWVzdE1ldGhvZChzZWxmLCBvcHRpb25zLCByZXF1ZXN0ZXIpXG5cbiAgdmFyIHZlcmJzID0gWydnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdkZWwnLCAnZGVsZXRlJ11cbiAgdmVyYnMuZm9yRWFjaChmdW5jdGlvbiAodmVyYikge1xuICAgIGRlZmF1bHRzW3ZlcmJdID0gd3JhcFJlcXVlc3RNZXRob2Qoc2VsZlt2ZXJiXSwgb3B0aW9ucywgcmVxdWVzdGVyLCB2ZXJiKVxuICB9KVxuXG4gIGRlZmF1bHRzLmNvb2tpZSA9IHdyYXBSZXF1ZXN0TWV0aG9kKHNlbGYuY29va2llLCBvcHRpb25zLCByZXF1ZXN0ZXIpXG4gIGRlZmF1bHRzLmphciA9IHNlbGYuamFyXG4gIGRlZmF1bHRzLmRlZmF1bHRzID0gc2VsZi5kZWZhdWx0c1xuICByZXR1cm4gZGVmYXVsdHNcbn1cblxucmVxdWVzdC5mb3JldmVyID0gZnVuY3Rpb24gKGFnZW50T3B0aW9ucywgb3B0aW9uc0FyZykge1xuICB2YXIgb3B0aW9ucyA9IHt9XG4gIGlmIChvcHRpb25zQXJnKSB7XG4gICAgZXh0ZW5kKG9wdGlvbnMsIG9wdGlvbnNBcmcpXG4gIH1cbiAgaWYgKGFnZW50T3B0aW9ucykge1xuICAgIG9wdGlvbnMuYWdlbnRPcHRpb25zID0gYWdlbnRPcHRpb25zXG4gIH1cblxuICBvcHRpb25zLmZvcmV2ZXIgPSB0cnVlXG4gIHJldHVybiByZXF1ZXN0LmRlZmF1bHRzKG9wdGlvbnMpXG59XG5cbi8vIEV4cG9ydHNcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1ZXN0XG5yZXF1ZXN0LlJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKVxucmVxdWVzdC5pbml0UGFyYW1zID0gaW5pdFBhcmFtc1xuXG4vLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3IgcmVxdWVzdC5kZWJ1Z1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVlc3QsICdkZWJ1ZycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QuUmVxdWVzdC5kZWJ1Z1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChkZWJ1Zykge1xuICAgIHJlcXVlc3QuUmVxdWVzdC5kZWJ1ZyA9IGRlYnVnXG4gIH1cbn0pXG4iLCIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgU2FsZXNmb3JjZS5jb20sIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbiAqIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgU2FsZXNmb3JjZS5jb20gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heVxuICogYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4gKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4gKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuICogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuICogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiAqIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuICogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiAqIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4gKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuICogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbid1c2Ugc3RyaWN0JztcbnZhciBuZXQgPSByZXF1aXJlKCduZXQnKTtcbnZhciB1cmxQYXJzZSA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgcHVic3VmZml4ID0gcmVxdWlyZSgnLi9wdWJzdWZmaXgtcHNsJyk7XG52YXIgU3RvcmUgPSByZXF1aXJlKCcuL3N0b3JlJykuU3RvcmU7XG52YXIgTWVtb3J5Q29va2llU3RvcmUgPSByZXF1aXJlKCcuL21lbXN0b3JlJykuTWVtb3J5Q29va2llU3RvcmU7XG52YXIgcGF0aE1hdGNoID0gcmVxdWlyZSgnLi9wYXRoTWF0Y2gnKS5wYXRoTWF0Y2g7XG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5cbnZhciBwdW55Y29kZTtcbnRyeSB7XG4gIHB1bnljb2RlID0gcmVxdWlyZSgncHVueWNvZGUnKTtcbn0gY2F0Y2goZSkge1xuICBjb25zb2xlLndhcm4oXCJ0b3VnaC1jb29raWU6IGNhbid0IGxvYWQgcHVueWNvZGU7IHdvbid0IHVzZSBwdW55Y29kZSBmb3IgZG9tYWluIG5vcm1hbGl6YXRpb25cIik7XG59XG5cbi8vIEZyb20gUkZDNjI2NSBTNC4xLjFcbi8vIG5vdGUgdGhhdCBpdCBleGNsdWRlcyBcXHgzQiBcIjtcIlxudmFyIENPT0tJRV9PQ1RFVFMgPSAvXltcXHgyMVxceDIzLVxceDJCXFx4MkQtXFx4M0FcXHgzQy1cXHg1QlxceDVELVxceDdFXSskLztcblxudmFyIENPTlRST0xfQ0hBUlMgPSAvW1xceDAwLVxceDFGXS87XG5cbi8vIEZyb20gQ2hyb21pdW0gLy8gJ1xccicsICdcXG4nIGFuZCAnXFwwJyBzaG91bGQgYmUgdHJlYXRlZCBhcyBhIHRlcm1pbmF0b3IgaW5cbi8vIHRoZSBcInJlbGF4ZWRcIiBtb2RlLCBzZWU6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vQ2hyb21pdW1XZWJBcHBzL2Nocm9taXVtL2Jsb2IvYjNkM2I0ZGE4YmI5NGMxYjJlMDYxNjAwZGYxMDZkNTkwZmRhMzYyMC9uZXQvY29va2llcy9wYXJzZWRfY29va2llLmNjI0w2MFxudmFyIFRFUk1JTkFUT1JTID0gWydcXG4nLCAnXFxyJywgJ1xcMCddO1xuXG4vLyBSRkM2MjY1IFM0LjEuMSBkZWZpbmVzIHBhdGggdmFsdWUgYXMgJ2FueSBDSEFSIGV4Y2VwdCBDVExzIG9yIFwiO1wiJ1xuLy8gTm90ZSAnOycgaXMgXFx4M0JcbnZhciBQQVRIX1ZBTFVFID0gL1tcXHgyMC1cXHgzQVxceDNDLVxceDdFXSsvO1xuXG4vLyBkYXRlLXRpbWUgcGFyc2luZyBjb25zdGFudHMgKFJGQzYyNjUgUzUuMS4xKVxuXG52YXIgREFURV9ERUxJTSA9IC9bXFx4MDlcXHgyMC1cXHgyRlxceDNCLVxceDQwXFx4NUItXFx4NjBcXHg3Qi1cXHg3RV0vO1xuXG52YXIgTU9OVEhfVE9fTlVNID0ge1xuICBqYW46MCwgZmViOjEsIG1hcjoyLCBhcHI6MywgbWF5OjQsIGp1bjo1LFxuICBqdWw6NiwgYXVnOjcsIHNlcDo4LCBvY3Q6OSwgbm92OjEwLCBkZWM6MTFcbn07XG52YXIgTlVNX1RPX01PTlRIID0gW1xuICAnSmFuJywnRmViJywnTWFyJywnQXByJywnTWF5JywnSnVuJywnSnVsJywnQXVnJywnU2VwJywnT2N0JywnTm92JywnRGVjJ1xuXTtcbnZhciBOVU1fVE9fREFZID0gW1xuICAnU3VuJywnTW9uJywnVHVlJywnV2VkJywnVGh1JywnRnJpJywnU2F0J1xuXTtcblxudmFyIE1BWF9USU1FID0gMjE0NzQ4MzY0NzAwMDsgLy8gMzEtYml0IG1heFxudmFyIE1JTl9USU1FID0gMDsgLy8gMzEtYml0IG1pblxuXG4vKlxuICogUGFyc2VzIGEgTmF0dXJhbCBudW1iZXIgKGkuZS4sIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyKSB3aXRoIGVpdGhlciB0aGVcbiAqICAgIDxtaW4+KjxtYXg+RElHSVQgKCBub24tZGlnaXQgKk9DVEVUIClcbiAqIG9yXG4gKiAgICA8bWluPio8bWF4PkRJR0lUXG4gKiBncmFtbWFyIChSRkM2MjY1IFM1LjEuMSkuXG4gKlxuICogVGhlIFwidHJhaWxpbmdPS1wiIGJvb2xlYW4gY29udHJvbHMgaWYgdGhlIGdyYW1tYXIgYWNjZXB0cyBhXG4gKiBcIiggbm9uLWRpZ2l0ICpPQ1RFVCApXCIgdHJhaWxlci5cbiAqL1xuZnVuY3Rpb24gcGFyc2VEaWdpdHModG9rZW4sIG1pbkRpZ2l0cywgbWF4RGlnaXRzLCB0cmFpbGluZ09LKSB7XG4gIHZhciBjb3VudCA9IDA7XG4gIHdoaWxlIChjb3VudCA8IHRva2VuLmxlbmd0aCkge1xuICAgIHZhciBjID0gdG9rZW4uY2hhckNvZGVBdChjb3VudCk7XG4gICAgLy8gXCJub24tZGlnaXQgPSAleDAwLTJGIC8gJXgzQS1GRlwiXG4gICAgaWYgKGMgPD0gMHgyRiB8fCBjID49IDB4M0EpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjb3VudCsrO1xuICB9XG5cbiAgLy8gY29uc3RyYWluIHRvIGEgbWluaW11bSBhbmQgbWF4aW11bSBudW1iZXIgb2YgZGlnaXRzLlxuICBpZiAoY291bnQgPCBtaW5EaWdpdHMgfHwgY291bnQgPiBtYXhEaWdpdHMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghdHJhaWxpbmdPSyAmJiBjb3VudCAhPSB0b2tlbi5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUludCh0b2tlbi5zdWJzdHIoMCxjb3VudCksIDEwKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lKHRva2VuKSB7XG4gIHZhciBwYXJ0cyA9IHRva2VuLnNwbGl0KCc6Jyk7XG4gIHZhciByZXN1bHQgPSBbMCwwLDBdO1xuXG4gIC8qIFJGNjI1NiBTNS4xLjE6XG4gICAqICAgICAgdGltZSAgICAgICAgICAgID0gaG1zLXRpbWUgKCBub24tZGlnaXQgKk9DVEVUIClcbiAgICogICAgICBobXMtdGltZSAgICAgICAgPSB0aW1lLWZpZWxkIFwiOlwiIHRpbWUtZmllbGQgXCI6XCIgdGltZS1maWVsZFxuICAgKiAgICAgIHRpbWUtZmllbGQgICAgICA9IDEqMkRJR0lUXG4gICAqL1xuXG4gIGlmIChwYXJ0cy5sZW5ndGggIT09IDMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgLy8gXCJ0aW1lLWZpZWxkXCIgbXVzdCBiZSBzdHJpY3RseSBcIjEqMkRJR0lUXCIsIEhPV0VWRVIsIFwiaG1zLXRpbWVcIiBjYW4gYmVcbiAgICAvLyBmb2xsb3dlZCBieSBcIiggbm9uLWRpZ2l0ICpPQ1RFVCApXCIgc28gdGhlcmVmb3JlIHRoZSBsYXN0IHRpbWUtZmllbGQgY2FuXG4gICAgLy8gaGF2ZSBhIHRyYWlsZXJcbiAgICB2YXIgdHJhaWxpbmdPSyA9IChpID09IDIpO1xuICAgIHZhciBudW0gPSBwYXJzZURpZ2l0cyhwYXJ0c1tpXSwgMSwgMiwgdHJhaWxpbmdPSyk7XG4gICAgaWYgKG51bSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJlc3VsdFtpXSA9IG51bTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9udGgodG9rZW4pIHtcbiAgdG9rZW4gPSBTdHJpbmcodG9rZW4pLnN1YnN0cigwLDMpLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBudW0gPSBNT05USF9UT19OVU1bdG9rZW5dO1xuICByZXR1cm4gbnVtID49IDAgPyBudW0gOiBudWxsO1xufVxuXG4vKlxuICogUkZDNjI2NSBTNS4xLjEgZGF0ZSBwYXJzZXIgKHNlZSBSRkMgZm9yIGZ1bGwgZ3JhbW1hcilcbiAqL1xuZnVuY3Rpb24gcGFyc2VEYXRlKHN0cikge1xuICBpZiAoIXN0cikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIFJGQzYyNjUgUzUuMS4xOlxuICAgKiAyLiBQcm9jZXNzIGVhY2ggZGF0ZS10b2tlbiBzZXF1ZW50aWFsbHkgaW4gdGhlIG9yZGVyIHRoZSBkYXRlLXRva2Vuc1xuICAgKiBhcHBlYXIgaW4gdGhlIGNvb2tpZS1kYXRlXG4gICAqL1xuICB2YXIgdG9rZW5zID0gc3RyLnNwbGl0KERBVEVfREVMSU0pO1xuICBpZiAoIXRva2Vucykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBob3VyID0gbnVsbDtcbiAgdmFyIG1pbnV0ZSA9IG51bGw7XG4gIHZhciBzZWNvbmQgPSBudWxsO1xuICB2YXIgZGF5T2ZNb250aCA9IG51bGw7XG4gIHZhciBtb250aCA9IG51bGw7XG4gIHZhciB5ZWFyID0gbnVsbDtcblxuICBmb3IgKHZhciBpPTA7IGk8dG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldLnRyaW0oKTtcbiAgICBpZiAoIXRva2VuLmxlbmd0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdDtcblxuICAgIC8qIDIuMS4gSWYgdGhlIGZvdW5kLXRpbWUgZmxhZyBpcyBub3Qgc2V0IGFuZCB0aGUgdG9rZW4gbWF0Y2hlcyB0aGUgdGltZVxuICAgICAqIHByb2R1Y3Rpb24sIHNldCB0aGUgZm91bmQtdGltZSBmbGFnIGFuZCBzZXQgdGhlIGhvdXItIHZhbHVlLFxuICAgICAqIG1pbnV0ZS12YWx1ZSwgYW5kIHNlY29uZC12YWx1ZSB0byB0aGUgbnVtYmVycyBkZW5vdGVkIGJ5IHRoZSBkaWdpdHMgaW5cbiAgICAgKiB0aGUgZGF0ZS10b2tlbiwgcmVzcGVjdGl2ZWx5LiAgU2tpcCB0aGUgcmVtYWluaW5nIHN1Yi1zdGVwcyBhbmQgY29udGludWVcbiAgICAgKiB0byB0aGUgbmV4dCBkYXRlLXRva2VuLlxuICAgICAqL1xuICAgIGlmIChzZWNvbmQgPT09IG51bGwpIHtcbiAgICAgIHJlc3VsdCA9IHBhcnNlVGltZSh0b2tlbik7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGhvdXIgPSByZXN1bHRbMF07XG4gICAgICAgIG1pbnV0ZSA9IHJlc3VsdFsxXTtcbiAgICAgICAgc2Vjb25kID0gcmVzdWx0WzJdO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiAyLjIuIElmIHRoZSBmb3VuZC1kYXktb2YtbW9udGggZmxhZyBpcyBub3Qgc2V0IGFuZCB0aGUgZGF0ZS10b2tlbiBtYXRjaGVzXG4gICAgICogdGhlIGRheS1vZi1tb250aCBwcm9kdWN0aW9uLCBzZXQgdGhlIGZvdW5kLWRheS1vZi0gbW9udGggZmxhZyBhbmQgc2V0XG4gICAgICogdGhlIGRheS1vZi1tb250aC12YWx1ZSB0byB0aGUgbnVtYmVyIGRlbm90ZWQgYnkgdGhlIGRhdGUtdG9rZW4uICBTa2lwXG4gICAgICogdGhlIHJlbWFpbmluZyBzdWItc3RlcHMgYW5kIGNvbnRpbnVlIHRvIHRoZSBuZXh0IGRhdGUtdG9rZW4uXG4gICAgICovXG4gICAgaWYgKGRheU9mTW9udGggPT09IG51bGwpIHtcbiAgICAgIC8vIFwiZGF5LW9mLW1vbnRoID0gMSoyRElHSVQgKCBub24tZGlnaXQgKk9DVEVUIClcIlxuICAgICAgcmVzdWx0ID0gcGFyc2VEaWdpdHModG9rZW4sIDEsIDIsIHRydWUpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICBkYXlPZk1vbnRoID0gcmVzdWx0O1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiAyLjMuIElmIHRoZSBmb3VuZC1tb250aCBmbGFnIGlzIG5vdCBzZXQgYW5kIHRoZSBkYXRlLXRva2VuIG1hdGNoZXMgdGhlXG4gICAgICogbW9udGggcHJvZHVjdGlvbiwgc2V0IHRoZSBmb3VuZC1tb250aCBmbGFnIGFuZCBzZXQgdGhlIG1vbnRoLXZhbHVlIHRvXG4gICAgICogdGhlIG1vbnRoIGRlbm90ZWQgYnkgdGhlIGRhdGUtdG9rZW4uICBTa2lwIHRoZSByZW1haW5pbmcgc3ViLXN0ZXBzIGFuZFxuICAgICAqIGNvbnRpbnVlIHRvIHRoZSBuZXh0IGRhdGUtdG9rZW4uXG4gICAgICovXG4gICAgaWYgKG1vbnRoID09PSBudWxsKSB7XG4gICAgICByZXN1bHQgPSBwYXJzZU1vbnRoKHRva2VuKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IG51bGwpIHtcbiAgICAgICAgbW9udGggPSByZXN1bHQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIDIuNC4gSWYgdGhlIGZvdW5kLXllYXIgZmxhZyBpcyBub3Qgc2V0IGFuZCB0aGUgZGF0ZS10b2tlbiBtYXRjaGVzIHRoZVxuICAgICAqIHllYXIgcHJvZHVjdGlvbiwgc2V0IHRoZSBmb3VuZC15ZWFyIGZsYWcgYW5kIHNldCB0aGUgeWVhci12YWx1ZSB0byB0aGVcbiAgICAgKiBudW1iZXIgZGVub3RlZCBieSB0aGUgZGF0ZS10b2tlbi4gIFNraXAgdGhlIHJlbWFpbmluZyBzdWItc3RlcHMgYW5kXG4gICAgICogY29udGludWUgdG8gdGhlIG5leHQgZGF0ZS10b2tlbi5cbiAgICAgKi9cbiAgICBpZiAoeWVhciA9PT0gbnVsbCkge1xuICAgICAgLy8gXCJ5ZWFyID0gMio0RElHSVQgKCBub24tZGlnaXQgKk9DVEVUIClcIlxuICAgICAgcmVzdWx0ID0gcGFyc2VEaWdpdHModG9rZW4sIDIsIDQsIHRydWUpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICB5ZWFyID0gcmVzdWx0O1xuICAgICAgICAvKiBGcm9tIFM1LjEuMTpcbiAgICAgICAgICogMy4gIElmIHRoZSB5ZWFyLXZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byA3MCBhbmQgbGVzc1xuICAgICAgICAgKiB0aGFuIG9yIGVxdWFsIHRvIDk5LCBpbmNyZW1lbnQgdGhlIHllYXItdmFsdWUgYnkgMTkwMC5cbiAgICAgICAgICogNC4gIElmIHRoZSB5ZWFyLXZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwIGFuZCBsZXNzXG4gICAgICAgICAqIHRoYW4gb3IgZXF1YWwgdG8gNjksIGluY3JlbWVudCB0aGUgeWVhci12YWx1ZSBieSAyMDAwLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHllYXIgPj0gNzAgJiYgeWVhciA8PSA5OSkge1xuICAgICAgICAgIHllYXIgKz0gMTkwMDtcbiAgICAgICAgfSBlbHNlIGlmICh5ZWFyID49IDAgJiYgeWVhciA8PSA2OSkge1xuICAgICAgICAgIHllYXIgKz0gMjAwMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qIFJGQyA2MjY1IFM1LjEuMVxuICAgKiBcIjUuIEFib3J0IHRoZXNlIHN0ZXBzIGFuZCBmYWlsIHRvIHBhcnNlIHRoZSBjb29raWUtZGF0ZSBpZjpcbiAgICogICAgICogIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm91bmQtZGF5LW9mLW1vbnRoLCBmb3VuZC1tb250aCwgZm91bmQtXG4gICAqICAgICAgICB5ZWFyLCBvciBmb3VuZC10aW1lIGZsYWdzIGlzIG5vdCBzZXQsXG4gICAqICAgICAqICB0aGUgZGF5LW9mLW1vbnRoLXZhbHVlIGlzIGxlc3MgdGhhbiAxIG9yIGdyZWF0ZXIgdGhhbiAzMSxcbiAgICogICAgICogIHRoZSB5ZWFyLXZhbHVlIGlzIGxlc3MgdGhhbiAxNjAxLFxuICAgKiAgICAgKiAgdGhlIGhvdXItdmFsdWUgaXMgZ3JlYXRlciB0aGFuIDIzLFxuICAgKiAgICAgKiAgdGhlIG1pbnV0ZS12YWx1ZSBpcyBncmVhdGVyIHRoYW4gNTksIG9yXG4gICAqICAgICAqICB0aGUgc2Vjb25kLXZhbHVlIGlzIGdyZWF0ZXIgdGhhbiA1OS5cbiAgICogICAgIChOb3RlIHRoYXQgbGVhcCBzZWNvbmRzIGNhbm5vdCBiZSByZXByZXNlbnRlZCBpbiB0aGlzIHN5bnRheC4pXCJcbiAgICpcbiAgICogU28sIGluIG9yZGVyIGFzIGFib3ZlOlxuICAgKi9cbiAgaWYgKFxuICAgIGRheU9mTW9udGggPT09IG51bGwgfHwgbW9udGggPT09IG51bGwgfHwgeWVhciA9PT0gbnVsbCB8fCBzZWNvbmQgPT09IG51bGwgfHxcbiAgICBkYXlPZk1vbnRoIDwgMSB8fCBkYXlPZk1vbnRoID4gMzEgfHxcbiAgICB5ZWFyIDwgMTYwMSB8fFxuICAgIGhvdXIgPiAyMyB8fFxuICAgIG1pbnV0ZSA+IDU5IHx8XG4gICAgc2Vjb25kID4gNTlcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXlPZk1vbnRoLCBob3VyLCBtaW51dGUsIHNlY29uZCkpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcbiAgdmFyIGQgPSBkYXRlLmdldFVUQ0RhdGUoKTsgZCA9IGQgPj0gMTAgPyBkIDogJzAnK2Q7XG4gIHZhciBoID0gZGF0ZS5nZXRVVENIb3VycygpOyBoID0gaCA+PSAxMCA/IGggOiAnMCcraDtcbiAgdmFyIG0gPSBkYXRlLmdldFVUQ01pbnV0ZXMoKTsgbSA9IG0gPj0gMTAgPyBtIDogJzAnK207XG4gIHZhciBzID0gZGF0ZS5nZXRVVENTZWNvbmRzKCk7IHMgPSBzID49IDEwID8gcyA6ICcwJytzO1xuICByZXR1cm4gTlVNX1RPX0RBWVtkYXRlLmdldFVUQ0RheSgpXSArICcsICcgK1xuICAgIGQrJyAnKyBOVU1fVE9fTU9OVEhbZGF0ZS5nZXRVVENNb250aCgpXSArJyAnKyBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKycgJytcbiAgICBoKyc6JyttKyc6JytzKycgR01UJztcbn1cblxuLy8gUzUuMS4yIENhbm9uaWNhbGl6ZWQgSG9zdCBOYW1lc1xuZnVuY3Rpb24gY2Fub25pY2FsRG9tYWluKHN0cikge1xuICBpZiAoc3RyID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoL15cXC4vLCcnKTsgLy8gUzQuMS4yLjMgJiBTNS4yLjM6IGlnbm9yZSBsZWFkaW5nIC5cblxuICAvLyBjb252ZXJ0IHRvIElETiBpZiBhbnkgbm9uLUFTQ0lJIGNoYXJhY3RlcnNcbiAgaWYgKHB1bnljb2RlICYmIC9bXlxcdTAwMDEtXFx1MDA3Zl0vLnRlc3Qoc3RyKSkge1xuICAgIHN0ciA9IHB1bnljb2RlLnRvQVNDSUkoc3RyKTtcbiAgfVxuXG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKTtcbn1cblxuLy8gUzUuMS4zIERvbWFpbiBNYXRjaGluZ1xuZnVuY3Rpb24gZG9tYWluTWF0Y2goc3RyLCBkb21TdHIsIGNhbm9uaWNhbGl6ZSkge1xuICBpZiAoc3RyID09IG51bGwgfHwgZG9tU3RyID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoY2Fub25pY2FsaXplICE9PSBmYWxzZSkge1xuICAgIHN0ciA9IGNhbm9uaWNhbERvbWFpbihzdHIpO1xuICAgIGRvbVN0ciA9IGNhbm9uaWNhbERvbWFpbihkb21TdHIpO1xuICB9XG5cbiAgLypcbiAgICogXCJUaGUgZG9tYWluIHN0cmluZyBhbmQgdGhlIHN0cmluZyBhcmUgaWRlbnRpY2FsLiAoTm90ZSB0aGF0IGJvdGggdGhlXG4gICAqIGRvbWFpbiBzdHJpbmcgYW5kIHRoZSBzdHJpbmcgd2lsbCBoYXZlIGJlZW4gY2Fub25pY2FsaXplZCB0byBsb3dlciBjYXNlIGF0XG4gICAqIHRoaXMgcG9pbnQpXCJcbiAgICovXG4gIGlmIChzdHIgPT0gZG9tU3RyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiBcIkFsbCBvZiB0aGUgZm9sbG93aW5nIFt0aHJlZV0gY29uZGl0aW9ucyBob2xkOlwiIChvcmRlciBhZGp1c3RlZCBmcm9tIHRoZSBSRkMpICovXG5cbiAgLyogXCIqIFRoZSBzdHJpbmcgaXMgYSBob3N0IG5hbWUgKGkuZS4sIG5vdCBhbiBJUCBhZGRyZXNzKS5cIiAqL1xuICBpZiAobmV0LmlzSVAoc3RyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qIFwiKiBUaGUgZG9tYWluIHN0cmluZyBpcyBhIHN1ZmZpeCBvZiB0aGUgc3RyaW5nXCIgKi9cbiAgdmFyIGlkeCA9IHN0ci5pbmRleE9mKGRvbVN0cik7XG4gIGlmIChpZHggPD0gMCkge1xuICAgIHJldHVybiBmYWxzZTsgLy8gaXQncyBhIG5vbi1tYXRjaCAoLTEpIG9yIHByZWZpeCAoMClcbiAgfVxuXG4gIC8vIGUuZyBcImEuYi5jXCIuaW5kZXhPZihcImIuY1wiKSA9PT0gMlxuICAvLyA1ID09PSAzKzJcbiAgaWYgKHN0ci5sZW5ndGggIT09IGRvbVN0ci5sZW5ndGggKyBpZHgpIHsgLy8gaXQncyBub3QgYSBzdWZmaXhcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKiBcIiogVGhlIGxhc3QgY2hhcmFjdGVyIG9mIHRoZSBzdHJpbmcgdGhhdCBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGRvbWFpblxuICAqIHN0cmluZyBpcyBhICV4MkUgKFwiLlwiKSBjaGFyYWN0ZXIuXCIgKi9cbiAgaWYgKHN0ci5zdWJzdHIoaWR4LTEsMSkgIT09ICcuJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5cbi8vIFJGQzYyNjUgUzUuMS40IFBhdGhzIGFuZCBQYXRoLU1hdGNoXG5cbi8qXG4gKiBcIlRoZSB1c2VyIGFnZW50IE1VU1QgdXNlIGFuIGFsZ29yaXRobSBlcXVpdmFsZW50IHRvIHRoZSBmb2xsb3dpbmcgYWxnb3JpdGhtXG4gKiB0byBjb21wdXRlIHRoZSBkZWZhdWx0LXBhdGggb2YgYSBjb29raWU6XCJcbiAqXG4gKiBBc3N1bXB0aW9uOiB0aGUgcGF0aCAoYW5kIG5vdCBxdWVyeSBwYXJ0IG9yIGFic29sdXRlIHVyaSkgaXMgcGFzc2VkIGluLlxuICovXG5mdW5jdGlvbiBkZWZhdWx0UGF0aChwYXRoKSB7XG4gIC8vIFwiMi4gSWYgdGhlIHVyaS1wYXRoIGlzIGVtcHR5IG9yIGlmIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHVyaS1wYXRoIGlzIG5vdFxuICAvLyBhICV4MkYgKFwiL1wiKSBjaGFyYWN0ZXIsIG91dHB1dCAleDJGIChcIi9cIikgYW5kIHNraXAgdGhlIHJlbWFpbmluZyBzdGVwcy5cbiAgaWYgKCFwYXRoIHx8IHBhdGguc3Vic3RyKDAsMSkgIT09IFwiL1wiKSB7XG4gICAgcmV0dXJuIFwiL1wiO1xuICB9XG5cbiAgLy8gXCIzLiBJZiB0aGUgdXJpLXBhdGggY29udGFpbnMgbm8gbW9yZSB0aGFuIG9uZSAleDJGIChcIi9cIikgY2hhcmFjdGVyLCBvdXRwdXRcbiAgLy8gJXgyRiAoXCIvXCIpIGFuZCBza2lwIHRoZSByZW1haW5pbmcgc3RlcC5cIlxuICBpZiAocGF0aCA9PT0gXCIvXCIpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIHZhciByaWdodFNsYXNoID0gcGF0aC5sYXN0SW5kZXhPZihcIi9cIik7XG4gIGlmIChyaWdodFNsYXNoID09PSAwKSB7XG4gICAgcmV0dXJuIFwiL1wiO1xuICB9XG5cbiAgLy8gXCI0LiBPdXRwdXQgdGhlIGNoYXJhY3RlcnMgb2YgdGhlIHVyaS1wYXRoIGZyb20gdGhlIGZpcnN0IGNoYXJhY3RlciB1cCB0byxcbiAgLy8gYnV0IG5vdCBpbmNsdWRpbmcsIHRoZSByaWdodC1tb3N0ICV4MkYgKFwiL1wiKS5cIlxuICByZXR1cm4gcGF0aC5zbGljZSgwLCByaWdodFNsYXNoKTtcbn1cblxuZnVuY3Rpb24gdHJpbVRlcm1pbmF0b3Ioc3RyKSB7XG4gIGZvciAodmFyIHQgPSAwOyB0IDwgVEVSTUlOQVRPUlMubGVuZ3RoOyB0KyspIHtcbiAgICB2YXIgdGVybWluYXRvcklkeCA9IHN0ci5pbmRleE9mKFRFUk1JTkFUT1JTW3RdKTtcbiAgICBpZiAodGVybWluYXRvcklkeCAhPT0gLTEpIHtcbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCx0ZXJtaW5hdG9ySWR4KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiBwYXJzZUNvb2tpZVBhaXIoY29va2llUGFpciwgbG9vc2VNb2RlKSB7XG4gIGNvb2tpZVBhaXIgPSB0cmltVGVybWluYXRvcihjb29raWVQYWlyKTtcblxuICB2YXIgZmlyc3RFcSA9IGNvb2tpZVBhaXIuaW5kZXhPZignPScpO1xuICBpZiAobG9vc2VNb2RlKSB7XG4gICAgaWYgKGZpcnN0RXEgPT09IDApIHsgLy8gJz0nIGlzIGltbWVkaWF0ZWx5IGF0IHN0YXJ0XG4gICAgICBjb29raWVQYWlyID0gY29va2llUGFpci5zdWJzdHIoMSk7XG4gICAgICBmaXJzdEVxID0gY29va2llUGFpci5pbmRleE9mKCc9Jyk7IC8vIG1pZ2h0IHN0aWxsIG5lZWQgdG8gc3BsaXQgb24gJz0nXG4gICAgfVxuICB9IGVsc2UgeyAvLyBub24tbG9vc2UgbW9kZVxuICAgIGlmIChmaXJzdEVxIDw9IDApIHsgLy8gbm8gJz0nIG9yIGlzIGF0IHN0YXJ0XG4gICAgICByZXR1cm47IC8vIG5lZWRzIHRvIGhhdmUgbm9uLWVtcHR5IFwiY29va2llLW5hbWVcIlxuICAgIH1cbiAgfVxuXG4gIHZhciBjb29raWVOYW1lLCBjb29raWVWYWx1ZTtcbiAgaWYgKGZpcnN0RXEgPD0gMCkge1xuICAgIGNvb2tpZU5hbWUgPSBcIlwiO1xuICAgIGNvb2tpZVZhbHVlID0gY29va2llUGFpci50cmltKCk7XG4gIH0gZWxzZSB7XG4gICAgY29va2llTmFtZSA9IGNvb2tpZVBhaXIuc3Vic3RyKDAsIGZpcnN0RXEpLnRyaW0oKTtcbiAgICBjb29raWVWYWx1ZSA9IGNvb2tpZVBhaXIuc3Vic3RyKGZpcnN0RXErMSkudHJpbSgpO1xuICB9XG5cbiAgaWYgKENPTlRST0xfQ0hBUlMudGVzdChjb29raWVOYW1lKSB8fCBDT05UUk9MX0NIQVJTLnRlc3QoY29va2llVmFsdWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGMgPSBuZXcgQ29va2llKCk7XG4gIGMua2V5ID0gY29va2llTmFtZTtcbiAgYy52YWx1ZSA9IGNvb2tpZVZhbHVlO1xuICByZXR1cm4gYztcbn1cblxuZnVuY3Rpb24gcGFyc2Uoc3RyLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgc3RyID0gc3RyLnRyaW0oKTtcblxuICAvLyBXZSB1c2UgYSByZWdleCB0byBwYXJzZSB0aGUgXCJuYW1lLXZhbHVlLXBhaXJcIiBwYXJ0IG9mIFM1LjJcbiAgdmFyIGZpcnN0U2VtaSA9IHN0ci5pbmRleE9mKCc7Jyk7IC8vIFM1LjIgc3RlcCAxXG4gIHZhciBjb29raWVQYWlyID0gKGZpcnN0U2VtaSA9PT0gLTEpID8gc3RyIDogc3RyLnN1YnN0cigwLCBmaXJzdFNlbWkpO1xuICB2YXIgYyA9IHBhcnNlQ29va2llUGFpcihjb29raWVQYWlyLCAhIW9wdGlvbnMubG9vc2UpO1xuICBpZiAoIWMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZmlyc3RTZW1pID09PSAtMSkge1xuICAgIHJldHVybiBjO1xuICB9XG5cbiAgLy8gUzUuMi4zIFwidW5wYXJzZWQtYXR0cmlidXRlcyBjb25zaXN0IG9mIHRoZSByZW1haW5kZXIgb2YgdGhlIHNldC1jb29raWUtc3RyaW5nXG4gIC8vIChpbmNsdWRpbmcgdGhlICV4M0IgKFwiO1wiKSBpbiBxdWVzdGlvbikuXCIgcGx1cyBsYXRlciBvbiBpbiB0aGUgc2FtZSBzZWN0aW9uXG4gIC8vIFwiZGlzY2FyZCB0aGUgZmlyc3QgXCI7XCIgYW5kIHRyaW1cIi5cbiAgdmFyIHVucGFyc2VkID0gc3RyLnNsaWNlKGZpcnN0U2VtaSArIDEpLnRyaW0oKTtcblxuICAvLyBcIklmIHRoZSB1bnBhcnNlZC1hdHRyaWJ1dGVzIHN0cmluZyBpcyBlbXB0eSwgc2tpcCB0aGUgcmVzdCBvZiB0aGVzZVxuICAvLyBzdGVwcy5cIlxuICBpZiAodW5wYXJzZWQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICAvKlxuICAgKiBTNS4yIHNheXMgdGhhdCB3aGVuIGxvb3Bpbmcgb3ZlciB0aGUgaXRlbXMgXCJbcF1yb2Nlc3MgdGhlIGF0dHJpYnV0ZS1uYW1lXG4gICAqIGFuZCBhdHRyaWJ1dGUtdmFsdWUgYWNjb3JkaW5nIHRvIHRoZSByZXF1aXJlbWVudHMgaW4gdGhlIGZvbGxvd2luZ1xuICAgKiBzdWJzZWN0aW9uc1wiIGZvciBldmVyeSBpdGVtLiAgUGx1cywgZm9yIG1hbnkgb2YgdGhlIGluZGl2aWR1YWwgYXR0cmlidXRlc1xuICAgKiBpbiBTNS4zIGl0IHNheXMgdG8gdXNlIHRoZSBcImF0dHJpYnV0ZS12YWx1ZSBvZiB0aGUgbGFzdCBhdHRyaWJ1dGUgaW4gdGhlXG4gICAqIGNvb2tpZS1hdHRyaWJ1dGUtbGlzdFwiLiAgVGhlcmVmb3JlLCBpbiB0aGlzIGltcGxlbWVudGF0aW9uLCB3ZSBvdmVyd3JpdGVcbiAgICogdGhlIHByZXZpb3VzIHZhbHVlLlxuICAgKi9cbiAgdmFyIGNvb2tpZV9hdnMgPSB1bnBhcnNlZC5zcGxpdCgnOycpO1xuICB3aGlsZSAoY29va2llX2F2cy5sZW5ndGgpIHtcbiAgICB2YXIgYXYgPSBjb29raWVfYXZzLnNoaWZ0KCkudHJpbSgpO1xuICAgIGlmIChhdi5sZW5ndGggPT09IDApIHsgLy8gaGFwcGVucyBpZiBcIjs7XCIgYXBwZWFyc1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBhdl9zZXAgPSBhdi5pbmRleE9mKCc9Jyk7XG4gICAgdmFyIGF2X2tleSwgYXZfdmFsdWU7XG5cbiAgICBpZiAoYXZfc2VwID09PSAtMSkge1xuICAgICAgYXZfa2V5ID0gYXY7XG4gICAgICBhdl92YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF2X2tleSA9IGF2LnN1YnN0cigwLGF2X3NlcCk7XG4gICAgICBhdl92YWx1ZSA9IGF2LnN1YnN0cihhdl9zZXArMSk7XG4gICAgfVxuXG4gICAgYXZfa2V5ID0gYXZfa2V5LnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKGF2X3ZhbHVlKSB7XG4gICAgICBhdl92YWx1ZSA9IGF2X3ZhbHVlLnRyaW0oKTtcbiAgICB9XG5cbiAgICBzd2l0Y2goYXZfa2V5KSB7XG4gICAgY2FzZSAnZXhwaXJlcyc6IC8vIFM1LjIuMVxuICAgICAgaWYgKGF2X3ZhbHVlKSB7XG4gICAgICAgIHZhciBleHAgPSBwYXJzZURhdGUoYXZfdmFsdWUpO1xuICAgICAgICAvLyBcIklmIHRoZSBhdHRyaWJ1dGUtdmFsdWUgZmFpbGVkIHRvIHBhcnNlIGFzIGEgY29va2llIGRhdGUsIGlnbm9yZSB0aGVcbiAgICAgICAgLy8gY29va2llLWF2LlwiXG4gICAgICAgIGlmIChleHApIHtcbiAgICAgICAgICAvLyBvdmVyIGFuZCB1bmRlcmZsb3cgbm90IHJlYWxpc3RpY2FsbHkgYSBjb25jZXJuOiBWOCdzIGdldFRpbWUoKSBzZWVtcyB0b1xuICAgICAgICAgIC8vIHN0b3JlIHNvbWV0aGluZyBsYXJnZXIgdGhhbiBhIDMyLWJpdCB0aW1lX3QgKGV2ZW4gd2l0aCAzMi1iaXQgbm9kZSlcbiAgICAgICAgICBjLmV4cGlyZXMgPSBleHA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbWF4LWFnZSc6IC8vIFM1LjIuMlxuICAgICAgaWYgKGF2X3ZhbHVlKSB7XG4gICAgICAgIC8vIFwiSWYgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiB0aGUgYXR0cmlidXRlLXZhbHVlIGlzIG5vdCBhIERJR0lUIG9yIGEgXCItXCJcbiAgICAgICAgLy8gY2hhcmFjdGVyIC4uLltvcl0uLi4gSWYgdGhlIHJlbWFpbmRlciBvZiBhdHRyaWJ1dGUtdmFsdWUgY29udGFpbnMgYVxuICAgICAgICAvLyBub24tRElHSVQgY2hhcmFjdGVyLCBpZ25vcmUgdGhlIGNvb2tpZS1hdi5cIlxuICAgICAgICBpZiAoL14tP1swLTldKyQvLnRlc3QoYXZfdmFsdWUpKSB7XG4gICAgICAgICAgdmFyIGRlbHRhID0gcGFyc2VJbnQoYXZfdmFsdWUsIDEwKTtcbiAgICAgICAgICAvLyBcIklmIGRlbHRhLXNlY29uZHMgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHplcm8gKDApLCBsZXQgZXhwaXJ5LXRpbWVcbiAgICAgICAgICAvLyBiZSB0aGUgZWFybGllc3QgcmVwcmVzZW50YWJsZSBkYXRlIGFuZCB0aW1lLlwiXG4gICAgICAgICAgYy5zZXRNYXhBZ2UoZGVsdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2RvbWFpbic6IC8vIFM1LjIuM1xuICAgICAgLy8gXCJJZiB0aGUgYXR0cmlidXRlLXZhbHVlIGlzIGVtcHR5LCB0aGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkLiAgSG93ZXZlcixcbiAgICAgIC8vIHRoZSB1c2VyIGFnZW50IFNIT1VMRCBpZ25vcmUgdGhlIGNvb2tpZS1hdiBlbnRpcmVseS5cIlxuICAgICAgaWYgKGF2X3ZhbHVlKSB7XG4gICAgICAgIC8vIFM1LjIuMyBcIkxldCBjb29raWUtZG9tYWluIGJlIHRoZSBhdHRyaWJ1dGUtdmFsdWUgd2l0aG91dCB0aGUgbGVhZGluZyAleDJFXG4gICAgICAgIC8vIChcIi5cIikgY2hhcmFjdGVyLlwiXG4gICAgICAgIHZhciBkb21haW4gPSBhdl92YWx1ZS50cmltKCkucmVwbGFjZSgvXlxcLi8sICcnKTtcbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgIC8vIFwiQ29udmVydCB0aGUgY29va2llLWRvbWFpbiB0byBsb3dlciBjYXNlLlwiXG4gICAgICAgICAgYy5kb21haW4gPSBkb21haW4udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwYXRoJzogLy8gUzUuMi40XG4gICAgICAvKlxuICAgICAgICogXCJJZiB0aGUgYXR0cmlidXRlLXZhbHVlIGlzIGVtcHR5IG9yIGlmIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlXG4gICAgICAgKiBhdHRyaWJ1dGUtdmFsdWUgaXMgbm90ICV4MkYgKFwiL1wiKTpcbiAgICAgICAqICAgTGV0IGNvb2tpZS1wYXRoIGJlIHRoZSBkZWZhdWx0LXBhdGguXG4gICAgICAgKiBPdGhlcndpc2U6XG4gICAgICAgKiAgIExldCBjb29raWUtcGF0aCBiZSB0aGUgYXR0cmlidXRlLXZhbHVlLlwiXG4gICAgICAgKlxuICAgICAgICogV2UnbGwgcmVwcmVzZW50IHRoZSBkZWZhdWx0LXBhdGggYXMgbnVsbCBzaW5jZSBpdCBkZXBlbmRzIG9uIHRoZVxuICAgICAgICogY29udGV4dCBvZiB0aGUgcGFyc2luZy5cbiAgICAgICAqL1xuICAgICAgYy5wYXRoID0gYXZfdmFsdWUgJiYgYXZfdmFsdWVbMF0gPT09IFwiL1wiID8gYXZfdmFsdWUgOiBudWxsO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdzZWN1cmUnOiAvLyBTNS4yLjVcbiAgICAgIC8qXG4gICAgICAgKiBcIklmIHRoZSBhdHRyaWJ1dGUtbmFtZSBjYXNlLWluc2Vuc2l0aXZlbHkgbWF0Y2hlcyB0aGUgc3RyaW5nIFwiU2VjdXJlXCIsXG4gICAgICAgKiB0aGUgdXNlciBhZ2VudCBNVVNUIGFwcGVuZCBhbiBhdHRyaWJ1dGUgdG8gdGhlIGNvb2tpZS1hdHRyaWJ1dGUtbGlzdFxuICAgICAgICogd2l0aCBhbiBhdHRyaWJ1dGUtbmFtZSBvZiBTZWN1cmUgYW5kIGFuIGVtcHR5IGF0dHJpYnV0ZS12YWx1ZS5cIlxuICAgICAgICovXG4gICAgICBjLnNlY3VyZSA9IHRydWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2h0dHBvbmx5JzogLy8gUzUuMi42IC0tIGVmZmVjdGl2ZWx5IHRoZSBzYW1lIGFzICdzZWN1cmUnXG4gICAgICBjLmh0dHBPbmx5ID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGMuZXh0ZW5zaW9ucyA9IGMuZXh0ZW5zaW9ucyB8fCBbXTtcbiAgICAgIGMuZXh0ZW5zaW9ucy5wdXNoKGF2KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjO1xufVxuXG4vLyBhdm9pZCB0aGUgVjggZGVvcHRpbWl6YXRpb24gbW9uc3RlciFcbmZ1bmN0aW9uIGpzb25QYXJzZShzdHIpIHtcbiAgdmFyIG9iajtcbiAgdHJ5IHtcbiAgICBvYmogPSBKU09OLnBhcnNlKHN0cik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBmcm9tSlNPTihzdHIpIHtcbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBvYmo7XG4gIGlmICh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJykge1xuICAgIG9iaiA9IGpzb25QYXJzZShzdHIpO1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGFzc3VtZSBpdCdzIGFuIE9iamVjdFxuICAgIG9iaiA9IHN0cjtcbiAgfVxuXG4gIHZhciBjID0gbmV3IENvb2tpZSgpO1xuICBmb3IgKHZhciBpPTA7IGk8Q29va2llLnNlcmlhbGl6YWJsZVByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IENvb2tpZS5zZXJpYWxpemFibGVQcm9wZXJ0aWVzW2ldO1xuICAgIGlmIChvYmpbcHJvcF0gPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBvYmpbcHJvcF0gPT09IENvb2tpZS5wcm90b3R5cGVbcHJvcF0pXG4gICAge1xuICAgICAgY29udGludWU7IC8vIGxlYXZlIGFzIHByb3RvdHlwZSBkZWZhdWx0XG4gICAgfVxuXG4gICAgaWYgKHByb3AgPT09ICdleHBpcmVzJyB8fFxuICAgICAgICBwcm9wID09PSAnY3JlYXRpb24nIHx8XG4gICAgICAgIHByb3AgPT09ICdsYXN0QWNjZXNzZWQnKVxuICAgIHtcbiAgICAgIGlmIChvYmpbcHJvcF0gPT09IG51bGwpIHtcbiAgICAgICAgY1twcm9wXSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjW3Byb3BdID0gb2JqW3Byb3BdID09IFwiSW5maW5pdHlcIiA/XG4gICAgICAgICAgXCJJbmZpbml0eVwiIDogbmV3IERhdGUob2JqW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY1twcm9wXSA9IG9ialtwcm9wXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYztcbn1cblxuLyogU2VjdGlvbiA1LjQgcGFydCAyOlxuICogXCIqICBDb29raWVzIHdpdGggbG9uZ2VyIHBhdGhzIGFyZSBsaXN0ZWQgYmVmb3JlIGNvb2tpZXMgd2l0aFxuICogICAgIHNob3J0ZXIgcGF0aHMuXG4gKlxuICogICogIEFtb25nIGNvb2tpZXMgdGhhdCBoYXZlIGVxdWFsLWxlbmd0aCBwYXRoIGZpZWxkcywgY29va2llcyB3aXRoXG4gKiAgICAgZWFybGllciBjcmVhdGlvbi10aW1lcyBhcmUgbGlzdGVkIGJlZm9yZSBjb29raWVzIHdpdGggbGF0ZXJcbiAqICAgICBjcmVhdGlvbi10aW1lcy5cIlxuICovXG5cbmZ1bmN0aW9uIGNvb2tpZUNvbXBhcmUoYSxiKSB7XG4gIHZhciBjbXAgPSAwO1xuXG4gIC8vIGRlc2NlbmRpbmcgZm9yIGxlbmd0aDogYiBDTVAgYVxuICB2YXIgYVBhdGhMZW4gPSBhLnBhdGggPyBhLnBhdGgubGVuZ3RoIDogMDtcbiAgdmFyIGJQYXRoTGVuID0gYi5wYXRoID8gYi5wYXRoLmxlbmd0aCA6IDA7XG4gIGNtcCA9IGJQYXRoTGVuIC0gYVBhdGhMZW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgLy8gYXNjZW5kaW5nIGZvciB0aW1lOiBhIENNUCBiXG4gIHZhciBhVGltZSA9IGEuY3JlYXRpb24gPyBhLmNyZWF0aW9uLmdldFRpbWUoKSA6IE1BWF9USU1FO1xuICB2YXIgYlRpbWUgPSBiLmNyZWF0aW9uID8gYi5jcmVhdGlvbi5nZXRUaW1lKCkgOiBNQVhfVElNRTtcbiAgY21wID0gYVRpbWUgLSBiVGltZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICAvLyBicmVhayB0aWVzIGZvciB0aGUgc2FtZSBtaWxsaXNlY29uZCAocHJlY2lzaW9uIG9mIEphdmFTY3JpcHQncyBjbG9jaylcbiAgY21wID0gYS5jcmVhdGlvbkluZGV4IC0gYi5jcmVhdGlvbkluZGV4O1xuXG4gIHJldHVybiBjbXA7XG59XG5cbi8vIEdpdmVzIHRoZSBwZXJtdXRhdGlvbiBvZiBhbGwgcG9zc2libGUgcGF0aE1hdGNoKCllcyBvZiBhIGdpdmVuIHBhdGguIFRoZVxuLy8gYXJyYXkgaXMgaW4gbG9uZ2VzdC10by1zaG9ydGVzdCBvcmRlci4gIEhhbmR5IGZvciBpbmRleGluZy5cbmZ1bmN0aW9uIHBlcm11dGVQYXRoKHBhdGgpIHtcbiAgaWYgKHBhdGggPT09ICcvJykge1xuICAgIHJldHVybiBbJy8nXTtcbiAgfVxuICBpZiAocGF0aC5sYXN0SW5kZXhPZignLycpID09PSBwYXRoLmxlbmd0aC0xKSB7XG4gICAgcGF0aCA9IHBhdGguc3Vic3RyKDAscGF0aC5sZW5ndGgtMSk7XG4gIH1cbiAgdmFyIHBlcm11dGF0aW9ucyA9IFtwYXRoXTtcbiAgd2hpbGUgKHBhdGgubGVuZ3RoID4gMSkge1xuICAgIHZhciBsaW5kZXggPSBwYXRoLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgaWYgKGxpbmRleCA9PT0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLGxpbmRleCk7XG4gICAgcGVybXV0YXRpb25zLnB1c2gocGF0aCk7XG4gIH1cbiAgcGVybXV0YXRpb25zLnB1c2goJy8nKTtcbiAgcmV0dXJuIHBlcm11dGF0aW9ucztcbn1cblxuZnVuY3Rpb24gZ2V0Q29va2llQ29udGV4dCh1cmwpIHtcbiAgaWYgKHVybCBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgLy8gTk9URTogZGVjb2RlVVJJIHdpbGwgdGhyb3cgb24gbWFsZm9ybWVkIFVSSXMgKHNlZSBHSC0zMikuXG4gIC8vIFRoZXJlZm9yZSwgd2Ugd2lsbCBqdXN0IHNraXAgZGVjb2RpbmcgZm9yIHN1Y2ggVVJJcy5cbiAgdHJ5IHtcbiAgICB1cmwgPSBkZWNvZGVVUkkodXJsKTtcbiAgfVxuICBjYXRjaChlcnIpIHtcbiAgICAvLyBTaWxlbnRseSBzd2FsbG93IGVycm9yXG4gIH1cblxuICByZXR1cm4gdXJsUGFyc2UodXJsKTtcbn1cblxuZnVuY3Rpb24gQ29va2llKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgaWYgKENvb2tpZS5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkocHJvcCkgJiZcbiAgICAgICAgQ29va2llLnByb3RvdHlwZVtwcm9wXSAhPT0gb3B0aW9uc1twcm9wXSAmJlxuICAgICAgICBwcm9wLnN1YnN0cigwLDEpICE9PSAnXycpXG4gICAge1xuICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgfVxuICB9LCB0aGlzKTtcblxuICB0aGlzLmNyZWF0aW9uID0gdGhpcy5jcmVhdGlvbiB8fCBuZXcgRGF0ZSgpO1xuXG4gIC8vIHVzZWQgdG8gYnJlYWsgY3JlYXRpb24gdGllcyBpbiBjb29raWVDb21wYXJlKCk6XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY3JlYXRpb25JbmRleCcsIHtcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLCAvLyBpbXBvcnRhbnQgZm9yIGFzc2VydC5kZWVwRXF1YWwgY2hlY2tzXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6ICsrQ29va2llLmNvb2tpZXNDcmVhdGVkXG4gIH0pO1xufVxuXG5Db29raWUuY29va2llc0NyZWF0ZWQgPSAwOyAvLyBpbmNyZW1lbnRlZCBlYWNoIHRpbWUgYSBjb29raWUgaXMgY3JlYXRlZFxuXG5Db29raWUucGFyc2UgPSBwYXJzZTtcbkNvb2tpZS5mcm9tSlNPTiA9IGZyb21KU09OO1xuXG5Db29raWUucHJvdG90eXBlLmtleSA9IFwiXCI7XG5Db29raWUucHJvdG90eXBlLnZhbHVlID0gXCJcIjtcblxuLy8gdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBSRkMgaGFzIHRoZW06XG5Db29raWUucHJvdG90eXBlLmV4cGlyZXMgPSBcIkluZmluaXR5XCI7IC8vIGNvZXJjZXMgdG8gbGl0ZXJhbCBJbmZpbml0eVxuQ29va2llLnByb3RvdHlwZS5tYXhBZ2UgPSBudWxsOyAvLyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgZXhwaXJlcyBmb3IgVFRMXG5Db29raWUucHJvdG90eXBlLmRvbWFpbiA9IG51bGw7XG5Db29raWUucHJvdG90eXBlLnBhdGggPSBudWxsO1xuQ29va2llLnByb3RvdHlwZS5zZWN1cmUgPSBmYWxzZTtcbkNvb2tpZS5wcm90b3R5cGUuaHR0cE9ubHkgPSBmYWxzZTtcbkNvb2tpZS5wcm90b3R5cGUuZXh0ZW5zaW9ucyA9IG51bGw7XG5cbi8vIHNldCBieSB0aGUgQ29va2llSmFyOlxuQ29va2llLnByb3RvdHlwZS5ob3N0T25seSA9IG51bGw7IC8vIGJvb2xlYW4gd2hlbiBzZXRcbkNvb2tpZS5wcm90b3R5cGUucGF0aElzRGVmYXVsdCA9IG51bGw7IC8vIGJvb2xlYW4gd2hlbiBzZXRcbkNvb2tpZS5wcm90b3R5cGUuY3JlYXRpb24gPSBudWxsOyAvLyBEYXRlIHdoZW4gc2V0OyBkZWZhdWx0ZWQgYnkgQ29va2llLnBhcnNlXG5Db29raWUucHJvdG90eXBlLmxhc3RBY2Nlc3NlZCA9IG51bGw7IC8vIERhdGUgd2hlbiBzZXRcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb29raWUucHJvdG90eXBlLCAnY3JlYXRpb25JbmRleCcsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgd3JpdGFibGU6IHRydWUsXG4gIHZhbHVlOiAwXG59KTtcblxuQ29va2llLnNlcmlhbGl6YWJsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhDb29raWUucHJvdG90eXBlKVxuICAuZmlsdGVyKGZ1bmN0aW9uKHByb3ApIHtcbiAgICByZXR1cm4gIShcbiAgICAgIENvb2tpZS5wcm90b3R5cGVbcHJvcF0gaW5zdGFuY2VvZiBGdW5jdGlvbiB8fFxuICAgICAgcHJvcCA9PT0gJ2NyZWF0aW9uSW5kZXgnIHx8XG4gICAgICBwcm9wLnN1YnN0cigwLDEpID09PSAnXydcbiAgICApO1xuICB9KTtcblxuQ29va2llLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gIHJldHVybiAnQ29va2llPVwiJyt0aGlzLnRvU3RyaW5nKCkgK1xuICAgICc7IGhvc3RPbmx5PScrKHRoaXMuaG9zdE9ubHkgIT0gbnVsbCA/IHRoaXMuaG9zdE9ubHkgOiAnPycpICtcbiAgICAnOyBhQWdlPScrKHRoaXMubGFzdEFjY2Vzc2VkID8gKG5vdy10aGlzLmxhc3RBY2Nlc3NlZC5nZXRUaW1lKCkpKydtcycgOiAnPycpICtcbiAgICAnOyBjQWdlPScrKHRoaXMuY3JlYXRpb24gPyAobm93LXRoaXMuY3JlYXRpb24uZ2V0VGltZSgpKSsnbXMnIDogJz8nKSArXG4gICAgJ1wiJztcbn07XG5cbi8vIFVzZSB0aGUgbmV3IGN1c3RvbSBpbnNwZWN0aW9uIHN5bWJvbCB0byBhZGQgdGhlIGN1c3RvbSBpbnNwZWN0IGZ1bmN0aW9uIGlmXG4vLyBhdmFpbGFibGUuXG5pZiAodXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICBDb29raWUucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gQ29va2llLnByb3RvdHlwZS5pbnNwZWN0O1xufVxuXG5Db29raWUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgb2JqID0ge307XG5cbiAgdmFyIHByb3BzID0gQ29va2llLnNlcmlhbGl6YWJsZVByb3BlcnRpZXM7XG4gIGZvciAodmFyIGk9MDsgaTxwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG4gICAgaWYgKHRoaXNbcHJvcF0gPT09IENvb2tpZS5wcm90b3R5cGVbcHJvcF0pIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBsZWF2ZSBhcyBwcm90b3R5cGUgZGVmYXVsdFxuICAgIH1cblxuICAgIGlmIChwcm9wID09PSAnZXhwaXJlcycgfHxcbiAgICAgICAgcHJvcCA9PT0gJ2NyZWF0aW9uJyB8fFxuICAgICAgICBwcm9wID09PSAnbGFzdEFjY2Vzc2VkJylcbiAgICB7XG4gICAgICBpZiAodGhpc1twcm9wXSA9PT0gbnVsbCkge1xuICAgICAgICBvYmpbcHJvcF0gPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW3Byb3BdID0gdGhpc1twcm9wXSA9PSBcIkluZmluaXR5XCIgPyAvLyBpbnRlbnRpb25hbGx5IG5vdCA9PT1cbiAgICAgICAgICBcIkluZmluaXR5XCIgOiB0aGlzW3Byb3BdLnRvSVNPU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wID09PSAnbWF4QWdlJykge1xuICAgICAgaWYgKHRoaXNbcHJvcF0gIT09IG51bGwpIHtcbiAgICAgICAgLy8gYWdhaW4sIGludGVudGlvbmFsbHkgbm90ID09PVxuICAgICAgICBvYmpbcHJvcF0gPSAodGhpc1twcm9wXSA9PSBJbmZpbml0eSB8fCB0aGlzW3Byb3BdID09IC1JbmZpbml0eSkgP1xuICAgICAgICAgIHRoaXNbcHJvcF0udG9TdHJpbmcoKSA6IHRoaXNbcHJvcF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzW3Byb3BdICE9PSBDb29raWUucHJvdG90eXBlW3Byb3BdKSB7XG4gICAgICAgIG9ialtwcm9wXSA9IHRoaXNbcHJvcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbkNvb2tpZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZyb21KU09OKHRoaXMudG9KU09OKCkpO1xufTtcblxuQ29va2llLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICBpZiAoIUNPT0tJRV9PQ1RFVFMudGVzdCh0aGlzLnZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodGhpcy5leHBpcmVzICE9IEluZmluaXR5ICYmICEodGhpcy5leHBpcmVzIGluc3RhbmNlb2YgRGF0ZSkgJiYgIXBhcnNlRGF0ZSh0aGlzLmV4cGlyZXMpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0aGlzLm1heEFnZSAhPSBudWxsICYmIHRoaXMubWF4QWdlIDw9IDApIHtcbiAgICByZXR1cm4gZmFsc2U7IC8vIFwiTWF4LUFnZT1cIiBub24temVyby1kaWdpdCAqRElHSVRcbiAgfVxuICBpZiAodGhpcy5wYXRoICE9IG51bGwgJiYgIVBBVEhfVkFMVUUudGVzdCh0aGlzLnBhdGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGNkb21haW4gPSB0aGlzLmNkb21haW4oKTtcbiAgaWYgKGNkb21haW4pIHtcbiAgICBpZiAoY2RvbWFpbi5tYXRjaCgvXFwuJC8pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7IC8vIFM0LjEuMi4zIHN1Z2dlc3RzIHRoYXQgdGhpcyBpcyBiYWQuIGRvbWFpbk1hdGNoKCkgdGVzdHMgY29uZmlybSB0aGlzXG4gICAgfVxuICAgIHZhciBzdWZmaXggPSBwdWJzdWZmaXguZ2V0UHVibGljU3VmZml4KGNkb21haW4pO1xuICAgIGlmIChzdWZmaXggPT0gbnVsbCkgeyAvLyBpdCdzIGEgcHVibGljIHN1ZmZpeFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNvb2tpZS5wcm90b3R5cGUuc2V0RXhwaXJlcyA9IGZ1bmN0aW9uIHNldEV4cGlyZXMoZXhwKSB7XG4gIGlmIChleHAgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgdGhpcy5leHBpcmVzID0gZXhwO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZXhwaXJlcyA9IHBhcnNlRGF0ZShleHApIHx8IFwiSW5maW5pdHlcIjtcbiAgfVxufTtcblxuQ29va2llLnByb3RvdHlwZS5zZXRNYXhBZ2UgPSBmdW5jdGlvbiBzZXRNYXhBZ2UoYWdlKSB7XG4gIGlmIChhZ2UgPT09IEluZmluaXR5IHx8IGFnZSA9PT0gLUluZmluaXR5KSB7XG4gICAgdGhpcy5tYXhBZ2UgPSBhZ2UudG9TdHJpbmcoKTsgLy8gc28gSlNPTi5zdHJpbmdpZnkoKSB3b3Jrc1xuICB9IGVsc2Uge1xuICAgIHRoaXMubWF4QWdlID0gYWdlO1xuICB9XG59O1xuXG4vLyBnaXZlcyBDb29raWUgaGVhZGVyIGZvcm1hdFxuQ29va2llLnByb3RvdHlwZS5jb29raWVTdHJpbmcgPSBmdW5jdGlvbiBjb29raWVTdHJpbmcoKSB7XG4gIHZhciB2YWwgPSB0aGlzLnZhbHVlO1xuICBpZiAodmFsID09IG51bGwpIHtcbiAgICB2YWwgPSAnJztcbiAgfVxuICBpZiAodGhpcy5rZXkgPT09ICcnKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuICByZXR1cm4gdGhpcy5rZXkrJz0nK3ZhbDtcbn07XG5cbi8vIGdpdmVzIFNldC1Db29raWUgaGVhZGVyIGZvcm1hdFxuQ29va2llLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICB2YXIgc3RyID0gdGhpcy5jb29raWVTdHJpbmcoKTtcblxuICBpZiAodGhpcy5leHBpcmVzICE9IEluZmluaXR5KSB7XG4gICAgaWYgKHRoaXMuZXhwaXJlcyBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHN0ciArPSAnOyBFeHBpcmVzPScrZm9ybWF0RGF0ZSh0aGlzLmV4cGlyZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJzsgRXhwaXJlcz0nK3RoaXMuZXhwaXJlcztcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5tYXhBZ2UgIT0gbnVsbCAmJiB0aGlzLm1heEFnZSAhPSBJbmZpbml0eSkge1xuICAgIHN0ciArPSAnOyBNYXgtQWdlPScrdGhpcy5tYXhBZ2U7XG4gIH1cblxuICBpZiAodGhpcy5kb21haW4gJiYgIXRoaXMuaG9zdE9ubHkpIHtcbiAgICBzdHIgKz0gJzsgRG9tYWluPScrdGhpcy5kb21haW47XG4gIH1cbiAgaWYgKHRoaXMucGF0aCkge1xuICAgIHN0ciArPSAnOyBQYXRoPScrdGhpcy5wYXRoO1xuICB9XG5cbiAgaWYgKHRoaXMuc2VjdXJlKSB7XG4gICAgc3RyICs9ICc7IFNlY3VyZSc7XG4gIH1cbiAgaWYgKHRoaXMuaHR0cE9ubHkpIHtcbiAgICBzdHIgKz0gJzsgSHR0cE9ubHknO1xuICB9XG4gIGlmICh0aGlzLmV4dGVuc2lvbnMpIHtcbiAgICB0aGlzLmV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbihleHQpIHtcbiAgICAgIHN0ciArPSAnOyAnK2V4dDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuXG4vLyBUVEwoKSBwYXJ0aWFsbHkgcmVwbGFjZXMgdGhlIFwiZXhwaXJ5LXRpbWVcIiBwYXJ0cyBvZiBTNS4zIHN0ZXAgMyAoc2V0Q29va2llKClcbi8vIGVsc2V3aGVyZSlcbi8vIFM1LjMgc2F5cyB0byBnaXZlIHRoZSBcImxhdGVzdCByZXByZXNlbnRhYmxlIGRhdGVcIiBmb3Igd2hpY2ggd2UgdXNlIEluZmluaXR5XG4vLyBGb3IgXCJleHBpcmVkXCIgd2UgdXNlIDBcbkNvb2tpZS5wcm90b3R5cGUuVFRMID0gZnVuY3Rpb24gVFRMKG5vdykge1xuICAvKiBSRkM2MjY1IFM0LjEuMi4yIElmIGEgY29va2llIGhhcyBib3RoIHRoZSBNYXgtQWdlIGFuZCB0aGUgRXhwaXJlc1xuICAgKiBhdHRyaWJ1dGUsIHRoZSBNYXgtQWdlIGF0dHJpYnV0ZSBoYXMgcHJlY2VkZW5jZSBhbmQgY29udHJvbHMgdGhlXG4gICAqIGV4cGlyYXRpb24gZGF0ZSBvZiB0aGUgY29va2llLlxuICAgKiAoQ29uY3VycyB3aXRoIFM1LjMgc3RlcCAzKVxuICAgKi9cbiAgaWYgKHRoaXMubWF4QWdlICE9IG51bGwpIHtcbiAgICByZXR1cm4gdGhpcy5tYXhBZ2U8PTAgPyAwIDogdGhpcy5tYXhBZ2UqMTAwMDtcbiAgfVxuXG4gIHZhciBleHBpcmVzID0gdGhpcy5leHBpcmVzO1xuICBpZiAoZXhwaXJlcyAhPSBJbmZpbml0eSkge1xuICAgIGlmICghKGV4cGlyZXMgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgZXhwaXJlcyA9IHBhcnNlRGF0ZShleHBpcmVzKSB8fCBJbmZpbml0eTtcbiAgICB9XG5cbiAgICBpZiAoZXhwaXJlcyA9PSBJbmZpbml0eSkge1xuICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgIH1cblxuICAgIHJldHVybiBleHBpcmVzLmdldFRpbWUoKSAtIChub3cgfHwgRGF0ZS5ub3coKSk7XG4gIH1cblxuICByZXR1cm4gSW5maW5pdHk7XG59O1xuXG4vLyBleHBpcnlUaW1lKCkgcmVwbGFjZXMgdGhlIFwiZXhwaXJ5LXRpbWVcIiBwYXJ0cyBvZiBTNS4zIHN0ZXAgMyAoc2V0Q29va2llKClcbi8vIGVsc2V3aGVyZSlcbkNvb2tpZS5wcm90b3R5cGUuZXhwaXJ5VGltZSA9IGZ1bmN0aW9uIGV4cGlyeVRpbWUobm93KSB7XG4gIGlmICh0aGlzLm1heEFnZSAhPSBudWxsKSB7XG4gICAgdmFyIHJlbGF0aXZlVG8gPSBub3cgfHwgdGhpcy5jcmVhdGlvbiB8fCBuZXcgRGF0ZSgpO1xuICAgIHZhciBhZ2UgPSAodGhpcy5tYXhBZ2UgPD0gMCkgPyAtSW5maW5pdHkgOiB0aGlzLm1heEFnZSoxMDAwO1xuICAgIHJldHVybiByZWxhdGl2ZVRvLmdldFRpbWUoKSArIGFnZTtcbiAgfVxuXG4gIGlmICh0aGlzLmV4cGlyZXMgPT0gSW5maW5pdHkpIHtcbiAgICByZXR1cm4gSW5maW5pdHk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuZXhwaXJlcy5nZXRUaW1lKCk7XG59O1xuXG4vLyBleHBpcnlEYXRlKCkgcmVwbGFjZXMgdGhlIFwiZXhwaXJ5LXRpbWVcIiBwYXJ0cyBvZiBTNS4zIHN0ZXAgMyAoc2V0Q29va2llKClcbi8vIGVsc2V3aGVyZSksIGV4Y2VwdCBpdCByZXR1cm5zIGEgRGF0ZVxuQ29va2llLnByb3RvdHlwZS5leHBpcnlEYXRlID0gZnVuY3Rpb24gZXhwaXJ5RGF0ZShub3cpIHtcbiAgdmFyIG1pbGxpc2VjID0gdGhpcy5leHBpcnlUaW1lKG5vdyk7XG4gIGlmIChtaWxsaXNlYyA9PSBJbmZpbml0eSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShNQVhfVElNRSk7XG4gIH0gZWxzZSBpZiAobWlsbGlzZWMgPT0gLUluZmluaXR5KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE1JTl9USU1FKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IERhdGUobWlsbGlzZWMpO1xuICB9XG59O1xuXG4vLyBUaGlzIHJlcGxhY2VzIHRoZSBcInBlcnNpc3RlbnQtZmxhZ1wiIHBhcnRzIG9mIFM1LjMgc3RlcCAzXG5Db29raWUucHJvdG90eXBlLmlzUGVyc2lzdGVudCA9IGZ1bmN0aW9uIGlzUGVyc2lzdGVudCgpIHtcbiAgcmV0dXJuICh0aGlzLm1heEFnZSAhPSBudWxsIHx8IHRoaXMuZXhwaXJlcyAhPSBJbmZpbml0eSk7XG59O1xuXG4vLyBNb3N0bHkgUzUuMS4yIGFuZCBTNS4yLjM6XG5Db29raWUucHJvdG90eXBlLmNkb21haW4gPVxuQ29va2llLnByb3RvdHlwZS5jYW5vbmljYWxpemVkRG9tYWluID0gZnVuY3Rpb24gY2Fub25pY2FsaXplZERvbWFpbigpIHtcbiAgaWYgKHRoaXMuZG9tYWluID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY2Fub25pY2FsRG9tYWluKHRoaXMuZG9tYWluKTtcbn07XG5cbmZ1bmN0aW9uIENvb2tpZUphcihzdG9yZSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgb3B0aW9ucyA9IHtyZWplY3RQdWJsaWNTdWZmaXhlczogb3B0aW9uc307XG4gIH0gZWxzZSBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmIChvcHRpb25zLnJlamVjdFB1YmxpY1N1ZmZpeGVzICE9IG51bGwpIHtcbiAgICB0aGlzLnJlamVjdFB1YmxpY1N1ZmZpeGVzID0gb3B0aW9ucy5yZWplY3RQdWJsaWNTdWZmaXhlcztcbiAgfVxuICBpZiAob3B0aW9ucy5sb29zZU1vZGUgIT0gbnVsbCkge1xuICAgIHRoaXMuZW5hYmxlTG9vc2VNb2RlID0gb3B0aW9ucy5sb29zZU1vZGU7XG4gIH1cblxuICBpZiAoIXN0b3JlKSB7XG4gICAgc3RvcmUgPSBuZXcgTWVtb3J5Q29va2llU3RvcmUoKTtcbiAgfVxuICB0aGlzLnN0b3JlID0gc3RvcmU7XG59XG5Db29raWVKYXIucHJvdG90eXBlLnN0b3JlID0gbnVsbDtcbkNvb2tpZUphci5wcm90b3R5cGUucmVqZWN0UHVibGljU3VmZml4ZXMgPSB0cnVlO1xuQ29va2llSmFyLnByb3RvdHlwZS5lbmFibGVMb29zZU1vZGUgPSBmYWxzZTtcbnZhciBDQU5fQkVfU1lOQyA9IFtdO1xuXG5DQU5fQkVfU1lOQy5wdXNoKCdzZXRDb29raWUnKTtcbkNvb2tpZUphci5wcm90b3R5cGUuc2V0Q29va2llID0gZnVuY3Rpb24oY29va2llLCB1cmwsIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBlcnI7XG4gIHZhciBjb250ZXh0ID0gZ2V0Q29va2llQ29udGV4dCh1cmwpO1xuICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgY2IgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBob3N0ID0gY2Fub25pY2FsRG9tYWluKGNvbnRleHQuaG9zdG5hbWUpO1xuICB2YXIgbG9vc2UgPSB0aGlzLmVuYWJsZUxvb3NlTW9kZTtcbiAgaWYgKG9wdGlvbnMubG9vc2UgIT0gbnVsbCkge1xuICAgIGxvb3NlID0gb3B0aW9ucy5sb29zZTtcbiAgfVxuXG4gIC8vIFM1LjMgc3RlcCAxXG4gIGlmICghKGNvb2tpZSBpbnN0YW5jZW9mIENvb2tpZSkpIHtcbiAgICBjb29raWUgPSBDb29raWUucGFyc2UoY29va2llLCB7IGxvb3NlOiBsb29zZSB9KTtcbiAgfVxuICBpZiAoIWNvb2tpZSkge1xuICAgIGVyciA9IG5ldyBFcnJvcihcIkNvb2tpZSBmYWlsZWQgdG8gcGFyc2VcIik7XG4gICAgcmV0dXJuIGNiKG9wdGlvbnMuaWdub3JlRXJyb3IgPyBudWxsIDogZXJyKTtcbiAgfVxuXG4gIC8vIFM1LjMgc3RlcCAyXG4gIHZhciBub3cgPSBvcHRpb25zLm5vdyB8fCBuZXcgRGF0ZSgpOyAvLyB3aWxsIGFzc2lnbiBsYXRlciB0byBzYXZlIGVmZm9ydCBpbiB0aGUgZmFjZSBvZiBlcnJvcnNcblxuICAvLyBTNS4zIHN0ZXAgMzogTk9PUDsgcGVyc2lzdGVudC1mbGFnIGFuZCBleHBpcnktdGltZSBpcyBoYW5kbGVkIGJ5IGdldENvb2tpZSgpXG5cbiAgLy8gUzUuMyBzdGVwIDQ6IE5PT1A7IGRvbWFpbiBpcyBudWxsIGJ5IGRlZmF1bHRcblxuICAvLyBTNS4zIHN0ZXAgNTogcHVibGljIHN1ZmZpeGVzXG4gIGlmICh0aGlzLnJlamVjdFB1YmxpY1N1ZmZpeGVzICYmIGNvb2tpZS5kb21haW4pIHtcbiAgICB2YXIgc3VmZml4ID0gcHVic3VmZml4LmdldFB1YmxpY1N1ZmZpeChjb29raWUuY2RvbWFpbigpKTtcbiAgICBpZiAoc3VmZml4ID09IG51bGwpIHsgLy8gZS5nLiBcImNvbVwiXG4gICAgICBlcnIgPSBuZXcgRXJyb3IoXCJDb29raWUgaGFzIGRvbWFpbiBzZXQgdG8gYSBwdWJsaWMgc3VmZml4XCIpO1xuICAgICAgcmV0dXJuIGNiKG9wdGlvbnMuaWdub3JlRXJyb3IgPyBudWxsIDogZXJyKTtcbiAgICB9XG4gIH1cblxuICAvLyBTNS4zIHN0ZXAgNjpcbiAgaWYgKGNvb2tpZS5kb21haW4pIHtcbiAgICBpZiAoIWRvbWFpbk1hdGNoKGhvc3QsIGNvb2tpZS5jZG9tYWluKCksIGZhbHNlKSkge1xuICAgICAgZXJyID0gbmV3IEVycm9yKFwiQ29va2llIG5vdCBpbiB0aGlzIGhvc3QncyBkb21haW4uIENvb2tpZTpcIitjb29raWUuY2RvbWFpbigpK1wiIFJlcXVlc3Q6XCIraG9zdCk7XG4gICAgICByZXR1cm4gY2Iob3B0aW9ucy5pZ25vcmVFcnJvciA/IG51bGwgOiBlcnIpO1xuICAgIH1cblxuICAgIGlmIChjb29raWUuaG9zdE9ubHkgPT0gbnVsbCkgeyAvLyBkb24ndCByZXNldCBpZiBhbHJlYWR5IHNldFxuICAgICAgY29va2llLmhvc3RPbmx5ID0gZmFsc2U7XG4gICAgfVxuXG4gIH0gZWxzZSB7XG4gICAgY29va2llLmhvc3RPbmx5ID0gdHJ1ZTtcbiAgICBjb29raWUuZG9tYWluID0gaG9zdDtcbiAgfVxuXG4gIC8vUzUuMi40IElmIHRoZSBhdHRyaWJ1dGUtdmFsdWUgaXMgZW1wdHkgb3IgaWYgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiB0aGVcbiAgLy9hdHRyaWJ1dGUtdmFsdWUgaXMgbm90ICV4MkYgKFwiL1wiKTpcbiAgLy9MZXQgY29va2llLXBhdGggYmUgdGhlIGRlZmF1bHQtcGF0aC5cbiAgaWYgKCFjb29raWUucGF0aCB8fCBjb29raWUucGF0aFswXSAhPT0gJy8nKSB7XG4gICAgY29va2llLnBhdGggPSBkZWZhdWx0UGF0aChjb250ZXh0LnBhdGhuYW1lKTtcbiAgICBjb29raWUucGF0aElzRGVmYXVsdCA9IHRydWU7XG4gIH1cblxuICAvLyBTNS4zIHN0ZXAgODogTk9PUDsgc2VjdXJlIGF0dHJpYnV0ZVxuICAvLyBTNS4zIHN0ZXAgOTogTk9PUDsgaHR0cE9ubHkgYXR0cmlidXRlXG5cbiAgLy8gUzUuMyBzdGVwIDEwXG4gIGlmIChvcHRpb25zLmh0dHAgPT09IGZhbHNlICYmIGNvb2tpZS5odHRwT25seSkge1xuICAgIGVyciA9IG5ldyBFcnJvcihcIkNvb2tpZSBpcyBIdHRwT25seSBhbmQgdGhpcyBpc24ndCBhbiBIVFRQIEFQSVwiKTtcbiAgICByZXR1cm4gY2Iob3B0aW9ucy5pZ25vcmVFcnJvciA/IG51bGwgOiBlcnIpO1xuICB9XG5cbiAgdmFyIHN0b3JlID0gdGhpcy5zdG9yZTtcblxuICBpZiAoIXN0b3JlLnVwZGF0ZUNvb2tpZSkge1xuICAgIHN0b3JlLnVwZGF0ZUNvb2tpZSA9IGZ1bmN0aW9uKG9sZENvb2tpZSwgbmV3Q29va2llLCBjYikge1xuICAgICAgdGhpcy5wdXRDb29raWUobmV3Q29va2llLCBjYik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpdGhDb29raWUoZXJyLCBvbGRDb29raWUpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKG51bGwsIGNvb2tpZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChvbGRDb29raWUpIHtcbiAgICAgIC8vIFM1LjMgc3RlcCAxMSAtIFwiSWYgdGhlIGNvb2tpZSBzdG9yZSBjb250YWlucyBhIGNvb2tpZSB3aXRoIHRoZSBzYW1lIG5hbWUsXG4gICAgICAvLyBkb21haW4sIGFuZCBwYXRoIGFzIHRoZSBuZXdseSBjcmVhdGVkIGNvb2tpZTpcIlxuICAgICAgaWYgKG9wdGlvbnMuaHR0cCA9PT0gZmFsc2UgJiYgb2xkQ29va2llLmh0dHBPbmx5KSB7IC8vIHN0ZXAgMTEuMlxuICAgICAgICBlcnIgPSBuZXcgRXJyb3IoXCJvbGQgQ29va2llIGlzIEh0dHBPbmx5IGFuZCB0aGlzIGlzbid0IGFuIEhUVFAgQVBJXCIpO1xuICAgICAgICByZXR1cm4gY2Iob3B0aW9ucy5pZ25vcmVFcnJvciA/IG51bGwgOiBlcnIpO1xuICAgICAgfVxuICAgICAgY29va2llLmNyZWF0aW9uID0gb2xkQ29va2llLmNyZWF0aW9uOyAvLyBzdGVwIDExLjNcbiAgICAgIGNvb2tpZS5jcmVhdGlvbkluZGV4ID0gb2xkQ29va2llLmNyZWF0aW9uSW5kZXg7IC8vIHByZXNlcnZlIHRpZS1icmVha2VyXG4gICAgICBjb29raWUubGFzdEFjY2Vzc2VkID0gbm93O1xuICAgICAgLy8gU3RlcCAxMS40IChkZWxldGUgY29va2llKSBpcyBpbXBsaWVkIGJ5IGp1c3Qgc2V0dGluZyB0aGUgbmV3IG9uZTpcbiAgICAgIHN0b3JlLnVwZGF0ZUNvb2tpZShvbGRDb29raWUsIGNvb2tpZSwgbmV4dCk7IC8vIHN0ZXAgMTJcblxuICAgIH0gZWxzZSB7XG4gICAgICBjb29raWUuY3JlYXRpb24gPSBjb29raWUubGFzdEFjY2Vzc2VkID0gbm93O1xuICAgICAgc3RvcmUucHV0Q29va2llKGNvb2tpZSwgbmV4dCk7IC8vIHN0ZXAgMTJcbiAgICB9XG4gIH1cblxuICBzdG9yZS5maW5kQ29va2llKGNvb2tpZS5kb21haW4sIGNvb2tpZS5wYXRoLCBjb29raWUua2V5LCB3aXRoQ29va2llKTtcbn07XG5cbi8vIFJGQzYzNjUgUzUuNFxuQ0FOX0JFX1NZTkMucHVzaCgnZ2V0Q29va2llcycpO1xuQ29va2llSmFyLnByb3RvdHlwZS5nZXRDb29raWVzID0gZnVuY3Rpb24odXJsLCBvcHRpb25zLCBjYikge1xuICB2YXIgY29udGV4dCA9IGdldENvb2tpZUNvbnRleHQodXJsKTtcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIGNiID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgaG9zdCA9IGNhbm9uaWNhbERvbWFpbihjb250ZXh0Lmhvc3RuYW1lKTtcbiAgdmFyIHBhdGggPSBjb250ZXh0LnBhdGhuYW1lIHx8ICcvJztcblxuICB2YXIgc2VjdXJlID0gb3B0aW9ucy5zZWN1cmU7XG4gIGlmIChzZWN1cmUgPT0gbnVsbCAmJiBjb250ZXh0LnByb3RvY29sICYmXG4gICAgICAoY29udGV4dC5wcm90b2NvbCA9PSAnaHR0cHM6JyB8fCBjb250ZXh0LnByb3RvY29sID09ICd3c3M6JykpXG4gIHtcbiAgICBzZWN1cmUgPSB0cnVlO1xuICB9XG5cbiAgdmFyIGh0dHAgPSBvcHRpb25zLmh0dHA7XG4gIGlmIChodHRwID09IG51bGwpIHtcbiAgICBodHRwID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBub3cgPSBvcHRpb25zLm5vdyB8fCBEYXRlLm5vdygpO1xuICB2YXIgZXhwaXJlQ2hlY2sgPSBvcHRpb25zLmV4cGlyZSAhPT0gZmFsc2U7XG4gIHZhciBhbGxQYXRocyA9ICEhb3B0aW9ucy5hbGxQYXRocztcbiAgdmFyIHN0b3JlID0gdGhpcy5zdG9yZTtcblxuICBmdW5jdGlvbiBtYXRjaGluZ0Nvb2tpZShjKSB7XG4gICAgLy8gXCJFaXRoZXI6XG4gICAgLy8gICBUaGUgY29va2llJ3MgaG9zdC1vbmx5LWZsYWcgaXMgdHJ1ZSBhbmQgdGhlIGNhbm9uaWNhbGl6ZWRcbiAgICAvLyAgIHJlcXVlc3QtaG9zdCBpcyBpZGVudGljYWwgdG8gdGhlIGNvb2tpZSdzIGRvbWFpbi5cbiAgICAvLyBPcjpcbiAgICAvLyAgIFRoZSBjb29raWUncyBob3N0LW9ubHktZmxhZyBpcyBmYWxzZSBhbmQgdGhlIGNhbm9uaWNhbGl6ZWRcbiAgICAvLyAgIHJlcXVlc3QtaG9zdCBkb21haW4tbWF0Y2hlcyB0aGUgY29va2llJ3MgZG9tYWluLlwiXG4gICAgaWYgKGMuaG9zdE9ubHkpIHtcbiAgICAgIGlmIChjLmRvbWFpbiAhPSBob3N0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFkb21haW5NYXRjaChob3N0LCBjLmRvbWFpbiwgZmFsc2UpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBcIlRoZSByZXF1ZXN0LXVyaSdzIHBhdGggcGF0aC1tYXRjaGVzIHRoZSBjb29raWUncyBwYXRoLlwiXG4gICAgaWYgKCFhbGxQYXRocyAmJiAhcGF0aE1hdGNoKHBhdGgsIGMucGF0aCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBcIklmIHRoZSBjb29raWUncyBzZWN1cmUtb25seS1mbGFnIGlzIHRydWUsIHRoZW4gdGhlIHJlcXVlc3QtdXJpJ3NcbiAgICAvLyBzY2hlbWUgbXVzdCBkZW5vdGUgYSBcInNlY3VyZVwiIHByb3RvY29sXCJcbiAgICBpZiAoYy5zZWN1cmUgJiYgIXNlY3VyZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFwiSWYgdGhlIGNvb2tpZSdzIGh0dHAtb25seS1mbGFnIGlzIHRydWUsIHRoZW4gZXhjbHVkZSB0aGUgY29va2llIGlmIHRoZVxuICAgIC8vIGNvb2tpZS1zdHJpbmcgaXMgYmVpbmcgZ2VuZXJhdGVkIGZvciBhIFwibm9uLUhUVFBcIiBBUElcIlxuICAgIGlmIChjLmh0dHBPbmx5ICYmICFodHRwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gZGVmZXJyZWQgZnJvbSBTNS4zXG4gICAgLy8gbm9uLVJGQzogYWxsb3cgcmV0ZW50aW9uIG9mIGV4cGlyZWQgY29va2llcyBieSBjaG9pY2VcbiAgICBpZiAoZXhwaXJlQ2hlY2sgJiYgYy5leHBpcnlUaW1lKCkgPD0gbm93KSB7XG4gICAgICBzdG9yZS5yZW1vdmVDb29raWUoYy5kb21haW4sIGMucGF0aCwgYy5rZXksIGZ1bmN0aW9uKCl7fSk7IC8vIHJlc3VsdCBpZ25vcmVkXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdG9yZS5maW5kQ29va2llcyhob3N0LCBhbGxQYXRocyA/IG51bGwgOiBwYXRoLCBmdW5jdGlvbihlcnIsY29va2llcykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJldHVybiBjYihlcnIpO1xuICAgIH1cblxuICAgIGNvb2tpZXMgPSBjb29raWVzLmZpbHRlcihtYXRjaGluZ0Nvb2tpZSk7XG5cbiAgICAvLyBzb3J0aW5nIG9mIFM1LjQgcGFydCAyXG4gICAgaWYgKG9wdGlvbnMuc29ydCAhPT0gZmFsc2UpIHtcbiAgICAgIGNvb2tpZXMgPSBjb29raWVzLnNvcnQoY29va2llQ29tcGFyZSk7XG4gICAgfVxuXG4gICAgLy8gUzUuNCBwYXJ0IDNcbiAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb29raWVzLmZvckVhY2goZnVuY3Rpb24oYykge1xuICAgICAgYy5sYXN0QWNjZXNzZWQgPSBub3c7XG4gICAgfSk7XG4gICAgLy8gVE9ETyBwZXJzaXN0IGxhc3RBY2Nlc3NlZFxuXG4gICAgY2IobnVsbCxjb29raWVzKTtcbiAgfSk7XG59O1xuXG5DQU5fQkVfU1lOQy5wdXNoKCdnZXRDb29raWVTdHJpbmcnKTtcbkNvb2tpZUphci5wcm90b3R5cGUuZ2V0Q29va2llU3RyaW5nID0gZnVuY3Rpb24oLyouLi4sIGNiKi8pIHtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7XG4gIHZhciBjYiA9IGFyZ3MucG9wKCk7XG4gIHZhciBuZXh0ID0gZnVuY3Rpb24oZXJyLGNvb2tpZXMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYihudWxsLCBjb29raWVzXG4gICAgICAgIC5zb3J0KGNvb2tpZUNvbXBhcmUpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24oYyl7XG4gICAgICAgICAgcmV0dXJuIGMuY29va2llU3RyaW5nKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5qb2luKCc7ICcpKTtcbiAgICB9XG4gIH07XG4gIGFyZ3MucHVzaChuZXh0KTtcbiAgdGhpcy5nZXRDb29raWVzLmFwcGx5KHRoaXMsYXJncyk7XG59O1xuXG5DQU5fQkVfU1lOQy5wdXNoKCdnZXRTZXRDb29raWVTdHJpbmdzJyk7XG5Db29raWVKYXIucHJvdG90eXBlLmdldFNldENvb2tpZVN0cmluZ3MgPSBmdW5jdGlvbigvKi4uLiwgY2IqLykge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtcbiAgdmFyIGNiID0gYXJncy5wb3AoKTtcbiAgdmFyIG5leHQgPSBmdW5jdGlvbihlcnIsY29va2llcykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKG51bGwsIGNvb2tpZXMubWFwKGZ1bmN0aW9uKGMpe1xuICAgICAgICByZXR1cm4gYy50b1N0cmluZygpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcbiAgYXJncy5wdXNoKG5leHQpO1xuICB0aGlzLmdldENvb2tpZXMuYXBwbHkodGhpcyxhcmdzKTtcbn07XG5cbkNBTl9CRV9TWU5DLnB1c2goJ3NlcmlhbGl6ZScpO1xuQ29va2llSmFyLnByb3RvdHlwZS5zZXJpYWxpemUgPSBmdW5jdGlvbihjYikge1xuICB2YXIgdHlwZSA9IHRoaXMuc3RvcmUuY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKHR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdHlwZSA9IG51bGw7XG4gIH1cblxuICAvLyB1cGRhdGUgUkVBRE1FLm1kIFwiU2VyaWFsaXphdGlvbiBGb3JtYXRcIiBpZiB5b3UgY2hhbmdlIHRoaXMsIHBsZWFzZSFcbiAgdmFyIHNlcmlhbGl6ZWQgPSB7XG4gICAgLy8gVGhlIHZlcnNpb24gb2YgdG91Z2gtY29va2llIHRoYXQgc2VyaWFsaXplZCB0aGlzIGphci4gR2VuZXJhbGx5IGEgZ29vZFxuICAgIC8vIHByYWN0aWNlIHNpbmNlIGZ1dHVyZSB2ZXJzaW9ucyBjYW4gbWFrZSBkYXRhIGltcG9ydCBkZWNpc2lvbnMgYmFzZWQgb25cbiAgICAvLyBrbm93biBwYXN0IGJlaGF2aW9yLiBXaGVuL2lmIHRoaXMgbWF0dGVycywgdXNlIGBzZW12ZXJgLlxuICAgIHZlcnNpb246ICd0b3VnaC1jb29raWVAJytWRVJTSU9OLFxuXG4gICAgLy8gYWRkIHRoZSBzdG9yZSB0eXBlLCB0byBtYWtlIGh1bWFucyBoYXBweTpcbiAgICBzdG9yZVR5cGU6IHR5cGUsXG5cbiAgICAvLyBDb29raWVKYXIgY29uZmlndXJhdGlvbjpcbiAgICByZWplY3RQdWJsaWNTdWZmaXhlczogISF0aGlzLnJlamVjdFB1YmxpY1N1ZmZpeGVzLFxuXG4gICAgLy8gdGhpcyBnZXRzIGZpbGxlZCBmcm9tIGdldEFsbENvb2tpZXM6XG4gICAgY29va2llczogW11cbiAgfTtcblxuICBpZiAoISh0aGlzLnN0b3JlLmdldEFsbENvb2tpZXMgJiZcbiAgICAgICAgdHlwZW9mIHRoaXMuc3RvcmUuZ2V0QWxsQ29va2llcyA9PT0gJ2Z1bmN0aW9uJykpXG4gIHtcbiAgICByZXR1cm4gY2IobmV3IEVycm9yKCdzdG9yZSBkb2VzIG5vdCBzdXBwb3J0IGdldEFsbENvb2tpZXMgYW5kIGNhbm5vdCBiZSBzZXJpYWxpemVkJykpO1xuICB9XG5cbiAgdGhpcy5zdG9yZS5nZXRBbGxDb29raWVzKGZ1bmN0aW9uKGVycixjb29raWVzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIGNiKGVycik7XG4gICAgfVxuXG4gICAgc2VyaWFsaXplZC5jb29raWVzID0gY29va2llcy5tYXAoZnVuY3Rpb24oY29va2llKSB7XG4gICAgICAvLyBjb252ZXJ0IHRvIHNlcmlhbGl6ZWQgJ3JhdycgY29va2llc1xuICAgICAgY29va2llID0gKGNvb2tpZSBpbnN0YW5jZW9mIENvb2tpZSkgPyBjb29raWUudG9KU09OKCkgOiBjb29raWU7XG5cbiAgICAgIC8vIFJlbW92ZSB0aGUgaW5kZXggc28gbmV3IG9uZXMgZ2V0IGFzc2lnbmVkIGR1cmluZyBkZXNlcmlhbGl6YXRpb25cbiAgICAgIGRlbGV0ZSBjb29raWUuY3JlYXRpb25JbmRleDtcblxuICAgICAgcmV0dXJuIGNvb2tpZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjYihudWxsLCBzZXJpYWxpemVkKTtcbiAgfSk7XG59O1xuXG4vLyB3ZWxsLWtub3duIG5hbWUgdGhhdCBKU09OLnN0cmluZ2lmeSBjYWxsc1xuQ29va2llSmFyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2VyaWFsaXplU3luYygpO1xufTtcblxuLy8gdXNlIHRoZSBjbGFzcyBtZXRob2QgQ29va2llSmFyLmRlc2VyaWFsaXplIGluc3RlYWQgb2YgY2FsbGluZyB0aGlzIGRpcmVjdGx5XG5DQU5fQkVfU1lOQy5wdXNoKCdfaW1wb3J0Q29va2llcycpO1xuQ29va2llSmFyLnByb3RvdHlwZS5faW1wb3J0Q29va2llcyA9IGZ1bmN0aW9uKHNlcmlhbGl6ZWQsIGNiKSB7XG4gIHZhciBqYXIgPSB0aGlzO1xuICB2YXIgY29va2llcyA9IHNlcmlhbGl6ZWQuY29va2llcztcbiAgaWYgKCFjb29raWVzIHx8ICFBcnJheS5pc0FycmF5KGNvb2tpZXMpKSB7XG4gICAgcmV0dXJuIGNiKG5ldyBFcnJvcignc2VyaWFsaXplZCBqYXIgaGFzIG5vIGNvb2tpZXMgYXJyYXknKSk7XG4gIH1cbiAgY29va2llcyA9IGNvb2tpZXMuc2xpY2UoKTsgLy8gZG8gbm90IG1vZGlmeSB0aGUgb3JpZ2luYWxcblxuICBmdW5jdGlvbiBwdXROZXh0KGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJldHVybiBjYihlcnIpO1xuICAgIH1cblxuICAgIGlmICghY29va2llcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBjYihlcnIsIGphcik7XG4gICAgfVxuXG4gICAgdmFyIGNvb2tpZTtcbiAgICB0cnkge1xuICAgICAgY29va2llID0gZnJvbUpTT04oY29va2llcy5zaGlmdCgpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gY2IoZSk7XG4gICAgfVxuXG4gICAgaWYgKGNvb2tpZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHB1dE5leHQobnVsbCk7IC8vIHNraXAgdGhpcyBjb29raWVcbiAgICB9XG5cbiAgICBqYXIuc3RvcmUucHV0Q29va2llKGNvb2tpZSwgcHV0TmV4dCk7XG4gIH1cblxuICBwdXROZXh0KCk7XG59O1xuXG5Db29raWVKYXIuZGVzZXJpYWxpemUgPSBmdW5jdGlvbihzdHJPck9iaiwgc3RvcmUsIGNiKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAzKSB7XG4gICAgLy8gc3RvcmUgaXMgb3B0aW9uYWxcbiAgICBjYiA9IHN0b3JlO1xuICAgIHN0b3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkO1xuICBpZiAodHlwZW9mIHN0ck9yT2JqID09PSAnc3RyaW5nJykge1xuICAgIHNlcmlhbGl6ZWQgPSBqc29uUGFyc2Uoc3RyT3JPYmopO1xuICAgIGlmIChzZXJpYWxpemVkIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiBjYihzZXJpYWxpemVkKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZCA9IHN0ck9yT2JqO1xuICB9XG5cbiAgdmFyIGphciA9IG5ldyBDb29raWVKYXIoc3RvcmUsIHNlcmlhbGl6ZWQucmVqZWN0UHVibGljU3VmZml4ZXMpO1xuICBqYXIuX2ltcG9ydENvb2tpZXMoc2VyaWFsaXplZCwgZnVuY3Rpb24oZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIGNiKGVycik7XG4gICAgfVxuICAgIGNiKG51bGwsIGphcik7XG4gIH0pO1xufTtcblxuQ29va2llSmFyLmRlc2VyaWFsaXplU3luYyA9IGZ1bmN0aW9uKHN0ck9yT2JqLCBzdG9yZSkge1xuICB2YXIgc2VyaWFsaXplZCA9IHR5cGVvZiBzdHJPck9iaiA9PT0gJ3N0cmluZycgP1xuICAgIEpTT04ucGFyc2Uoc3RyT3JPYmopIDogc3RyT3JPYmo7XG4gIHZhciBqYXIgPSBuZXcgQ29va2llSmFyKHN0b3JlLCBzZXJpYWxpemVkLnJlamVjdFB1YmxpY1N1ZmZpeGVzKTtcblxuICAvLyBjYXRjaCB0aGlzIG1pc3Rha2UgZWFybHk6XG4gIGlmICghamFyLnN0b3JlLnN5bmNocm9ub3VzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb29raWVKYXIgc3RvcmUgaXMgbm90IHN5bmNocm9ub3VzOyB1c2UgYXN5bmMgQVBJIGluc3RlYWQuJyk7XG4gIH1cblxuICBqYXIuX2ltcG9ydENvb2tpZXNTeW5jKHNlcmlhbGl6ZWQpO1xuICByZXR1cm4gamFyO1xufTtcbkNvb2tpZUphci5mcm9tSlNPTiA9IENvb2tpZUphci5kZXNlcmlhbGl6ZVN5bmM7XG5cbkNBTl9CRV9TWU5DLnB1c2goJ2Nsb25lJyk7XG5Db29raWVKYXIucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24obmV3U3RvcmUsIGNiKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgY2IgPSBuZXdTdG9yZTtcbiAgICBuZXdTdG9yZSA9IG51bGw7XG4gIH1cblxuICB0aGlzLnNlcmlhbGl6ZShmdW5jdGlvbihlcnIsc2VyaWFsaXplZCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJldHVybiBjYihlcnIpO1xuICAgIH1cbiAgICBDb29raWVKYXIuZGVzZXJpYWxpemUobmV3U3RvcmUsIHNlcmlhbGl6ZWQsIGNiKTtcbiAgfSk7XG59O1xuXG4vLyBVc2UgYSBjbG9zdXJlIHRvIHByb3ZpZGUgYSB0cnVlIGltcGVyYXRpdmUgQVBJIGZvciBzeW5jaHJvbm91cyBzdG9yZXMuXG5mdW5jdGlvbiBzeW5jV3JhcChtZXRob2QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5zdG9yZS5zeW5jaHJvbm91cykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb29raWVKYXIgc3RvcmUgaXMgbm90IHN5bmNocm9ub3VzOyB1c2UgYXN5bmMgQVBJIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIHZhciBzeW5jRXJyLCBzeW5jUmVzdWx0O1xuICAgIGFyZ3MucHVzaChmdW5jdGlvbiBzeW5jQ2IoZXJyLCByZXN1bHQpIHtcbiAgICAgIHN5bmNFcnIgPSBlcnI7XG4gICAgICBzeW5jUmVzdWx0ID0gcmVzdWx0O1xuICAgIH0pO1xuICAgIHRoaXNbbWV0aG9kXS5hcHBseSh0aGlzLCBhcmdzKTtcblxuICAgIGlmIChzeW5jRXJyKSB7XG4gICAgICB0aHJvdyBzeW5jRXJyO1xuICAgIH1cbiAgICByZXR1cm4gc3luY1Jlc3VsdDtcbiAgfTtcbn1cblxuLy8gd3JhcCBhbGwgZGVjbGFyZWQgQ0FOX0JFX1NZTkMgbWV0aG9kcyBpbiB0aGUgc3luYyB3cmFwcGVyXG5DQU5fQkVfU1lOQy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBDb29raWVKYXIucHJvdG90eXBlW21ldGhvZCsnU3luYyddID0gc3luY1dyYXAobWV0aG9kKTtcbn0pO1xuXG5leHBvcnRzLkNvb2tpZUphciA9IENvb2tpZUphcjtcbmV4cG9ydHMuQ29va2llID0gQ29va2llO1xuZXhwb3J0cy5TdG9yZSA9IFN0b3JlO1xuZXhwb3J0cy5NZW1vcnlDb29raWVTdG9yZSA9IE1lbW9yeUNvb2tpZVN0b3JlO1xuZXhwb3J0cy5wYXJzZURhdGUgPSBwYXJzZURhdGU7XG5leHBvcnRzLmZvcm1hdERhdGUgPSBmb3JtYXREYXRlO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5mcm9tSlNPTiA9IGZyb21KU09OO1xuZXhwb3J0cy5kb21haW5NYXRjaCA9IGRvbWFpbk1hdGNoO1xuZXhwb3J0cy5kZWZhdWx0UGF0aCA9IGRlZmF1bHRQYXRoO1xuZXhwb3J0cy5wYXRoTWF0Y2ggPSBwYXRoTWF0Y2g7XG5leHBvcnRzLmdldFB1YmxpY1N1ZmZpeCA9IHB1YnN1ZmZpeC5nZXRQdWJsaWNTdWZmaXg7XG5leHBvcnRzLmNvb2tpZUNvbXBhcmUgPSBjb29raWVDb21wYXJlO1xuZXhwb3J0cy5wZXJtdXRlRG9tYWluID0gcmVxdWlyZSgnLi9wZXJtdXRlRG9tYWluJykucGVybXV0ZURvbWFpbjtcbmV4cG9ydHMucGVybXV0ZVBhdGggPSBwZXJtdXRlUGF0aDtcbmV4cG9ydHMuY2Fub25pY2FsRG9tYWluID0gY2Fub25pY2FsRG9tYWluO1xuIiwiLyplc2xpbnQgbm8tdmFyOjAsIHByZWZlci1hcnJvdy1jYWxsYmFjazogMCwgb2JqZWN0LXNob3J0aGFuZDogMCAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBQdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG5cblxudmFyIGludGVybmFscyA9IHt9O1xuXG5cbi8vXG4vLyBSZWFkIHJ1bGVzIGZyb20gZmlsZS5cbi8vXG5pbnRlcm5hbHMucnVsZXMgPSByZXF1aXJlKCcuL2RhdGEvcnVsZXMuanNvbicpLm1hcChmdW5jdGlvbiAocnVsZSkge1xuXG4gIHJldHVybiB7XG4gICAgcnVsZTogcnVsZSxcbiAgICBzdWZmaXg6IHJ1bGUucmVwbGFjZSgvXihcXCpcXC58XFwhKS8sICcnKSxcbiAgICBwdW55U3VmZml4OiAtMSxcbiAgICB3aWxkY2FyZDogcnVsZS5jaGFyQXQoMCkgPT09ICcqJyxcbiAgICBleGNlcHRpb246IHJ1bGUuY2hhckF0KDApID09PSAnISdcbiAgfTtcbn0pO1xuXG5cbi8vXG4vLyBDaGVjayBpcyBnaXZlbiBzdHJpbmcgZW5kcyB3aXRoIGBzdWZmaXhgLlxuLy9cbmludGVybmFscy5lbmRzV2l0aCA9IGZ1bmN0aW9uIChzdHIsIHN1ZmZpeCkge1xuXG4gIHJldHVybiBzdHIuaW5kZXhPZihzdWZmaXgsIHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKSAhPT0gLTE7XG59O1xuXG5cbi8vXG4vLyBGaW5kIHJ1bGUgZm9yIGEgZ2l2ZW4gZG9tYWluLlxuLy9cbmludGVybmFscy5maW5kUnVsZSA9IGZ1bmN0aW9uIChkb21haW4pIHtcblxuICB2YXIgcHVueURvbWFpbiA9IFB1bnljb2RlLnRvQVNDSUkoZG9tYWluKTtcbiAgcmV0dXJuIGludGVybmFscy5ydWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIHJ1bGUpIHtcblxuICAgIGlmIChydWxlLnB1bnlTdWZmaXggPT09IC0xKXtcbiAgICAgIHJ1bGUucHVueVN1ZmZpeCA9IFB1bnljb2RlLnRvQVNDSUkocnVsZS5zdWZmaXgpO1xuICAgIH1cbiAgICBpZiAoIWludGVybmFscy5lbmRzV2l0aChwdW55RG9tYWluLCAnLicgKyBydWxlLnB1bnlTdWZmaXgpICYmIHB1bnlEb21haW4gIT09IHJ1bGUucHVueVN1ZmZpeCkge1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfVxuICAgIC8vIFRoaXMgaGFzIGJlZW4gY29tbWVudGVkIG91dCBhcyBpdCBuZXZlciBzZWVtcyB0byBydW4uIFRoaXMgaXMgYmVjYXVzZVxuICAgIC8vIHN1YiB0bGRzIGFsd2F5cyBhcHBlYXIgYWZ0ZXIgdGhlaXIgcGFyZW50cyBhbmQgd2UgbmV2ZXIgZmluZCBhIHNob3J0ZXJcbiAgICAvLyBtYXRjaC5cbiAgICAvL2lmIChtZW1vKSB7XG4gICAgLy8gIHZhciBtZW1vU3VmZml4ID0gUHVueWNvZGUudG9BU0NJSShtZW1vLnN1ZmZpeCk7XG4gICAgLy8gIGlmIChtZW1vU3VmZml4Lmxlbmd0aCA+PSBwdW55U3VmZml4Lmxlbmd0aCkge1xuICAgIC8vICAgIHJldHVybiBtZW1vO1xuICAgIC8vICB9XG4gICAgLy99XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH0sIG51bGwpO1xufTtcblxuXG4vL1xuLy8gRXJyb3IgY29kZXMgYW5kIG1lc3NhZ2VzLlxuLy9cbmV4cG9ydHMuZXJyb3JDb2RlcyA9IHtcbiAgRE9NQUlOX1RPT19TSE9SVDogJ0RvbWFpbiBuYW1lIHRvbyBzaG9ydC4nLFxuICBET01BSU5fVE9PX0xPTkc6ICdEb21haW4gbmFtZSB0b28gbG9uZy4gSXQgc2hvdWxkIGJlIG5vIG1vcmUgdGhhbiAyNTUgY2hhcnMuJyxcbiAgTEFCRUxfU1RBUlRTX1dJVEhfREFTSDogJ0RvbWFpbiBuYW1lIGxhYmVsIGNhbiBub3Qgc3RhcnQgd2l0aCBhIGRhc2guJyxcbiAgTEFCRUxfRU5EU19XSVRIX0RBU0g6ICdEb21haW4gbmFtZSBsYWJlbCBjYW4gbm90IGVuZCB3aXRoIGEgZGFzaC4nLFxuICBMQUJFTF9UT09fTE9ORzogJ0RvbWFpbiBuYW1lIGxhYmVsIHNob3VsZCBiZSBhdCBtb3N0IDYzIGNoYXJzIGxvbmcuJyxcbiAgTEFCRUxfVE9PX1NIT1JUOiAnRG9tYWluIG5hbWUgbGFiZWwgc2hvdWxkIGJlIGF0IGxlYXN0IDEgY2hhcmFjdGVyIGxvbmcuJyxcbiAgTEFCRUxfSU5WQUxJRF9DSEFSUzogJ0RvbWFpbiBuYW1lIGxhYmVsIGNhbiBvbmx5IGNvbnRhaW4gYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgb3IgZGFzaGVzLidcbn07XG5cblxuLy9cbi8vIFZhbGlkYXRlIGRvbWFpbiBuYW1lIGFuZCB0aHJvdyBpZiBub3QgdmFsaWQuXG4vL1xuLy8gRnJvbSB3aWtpcGVkaWE6XG4vL1xuLy8gSG9zdG5hbWVzIGFyZSBjb21wb3NlZCBvZiBzZXJpZXMgb2YgbGFiZWxzIGNvbmNhdGVuYXRlZCB3aXRoIGRvdHMsIGFzIGFyZSBhbGxcbi8vIGRvbWFpbiBuYW1lcy4gRWFjaCBsYWJlbCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNjMgY2hhcmFjdGVycyBsb25nLCBhbmQgdGhlXG4vLyBlbnRpcmUgaG9zdG5hbWUgKGluY2x1ZGluZyB0aGUgZGVsaW1pdGluZyBkb3RzKSBoYXMgYSBtYXhpbXVtIG9mIDI1NSBjaGFycy5cbi8vXG4vLyBBbGxvd2VkIGNoYXJzOlxuLy9cbi8vICogYGEtemBcbi8vICogYDAtOWBcbi8vICogYC1gIGJ1dCBub3QgYXMgYSBzdGFydGluZyBvciBlbmRpbmcgY2hhcmFjdGVyXG4vLyAqIGAuYCBhcyBhIHNlcGFyYXRvciBmb3IgdGhlIHRleHR1YWwgcG9ydGlvbnMgb2YgYSBkb21haW4gbmFtZVxuLy9cbi8vICogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Eb21haW5fbmFtZVxuLy8gKiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hvc3RuYW1lXG4vL1xuaW50ZXJuYWxzLnZhbGlkYXRlID0gZnVuY3Rpb24gKGlucHV0KSB7XG5cbiAgLy8gQmVmb3JlIHdlIGNhbiB2YWxpZGF0ZSB3ZSBuZWVkIHRvIHRha2UgY2FyZSBvZiBJRE5zIHdpdGggdW5pY29kZSBjaGFycy5cbiAgdmFyIGFzY2lpID0gUHVueWNvZGUudG9BU0NJSShpbnB1dCk7XG5cbiAgaWYgKGFzY2lpLmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm4gJ0RPTUFJTl9UT09fU0hPUlQnO1xuICB9XG4gIGlmIChhc2NpaS5sZW5ndGggPiAyNTUpIHtcbiAgICByZXR1cm4gJ0RPTUFJTl9UT09fTE9ORyc7XG4gIH1cblxuICAvLyBDaGVjayBlYWNoIHBhcnQncyBsZW5ndGggYW5kIGFsbG93ZWQgY2hhcnMuXG4gIHZhciBsYWJlbHMgPSBhc2NpaS5zcGxpdCgnLicpO1xuICB2YXIgbGFiZWw7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyArK2kpIHtcbiAgICBsYWJlbCA9IGxhYmVsc1tpXTtcbiAgICBpZiAoIWxhYmVsLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICdMQUJFTF9UT09fU0hPUlQnO1xuICAgIH1cbiAgICBpZiAobGFiZWwubGVuZ3RoID4gNjMpIHtcbiAgICAgIHJldHVybiAnTEFCRUxfVE9PX0xPTkcnO1xuICAgIH1cbiAgICBpZiAobGFiZWwuY2hhckF0KDApID09PSAnLScpIHtcbiAgICAgIHJldHVybiAnTEFCRUxfU1RBUlRTX1dJVEhfREFTSCc7XG4gICAgfVxuICAgIGlmIChsYWJlbC5jaGFyQXQobGFiZWwubGVuZ3RoIC0gMSkgPT09ICctJykge1xuICAgICAgcmV0dXJuICdMQUJFTF9FTkRTX1dJVEhfREFTSCc7XG4gICAgfVxuICAgIGlmICghL15bYS16MC05XFwtXSskLy50ZXN0KGxhYmVsKSkge1xuICAgICAgcmV0dXJuICdMQUJFTF9JTlZBTElEX0NIQVJTJztcbiAgICB9XG4gIH1cbn07XG5cblxuLy9cbi8vIFB1YmxpYyBBUElcbi8vXG5cblxuLy9cbi8vIFBhcnNlIGRvbWFpbi5cbi8vXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gKGlucHV0KSB7XG5cbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdEb21haW4gbmFtZSBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICB9XG5cbiAgLy8gRm9yY2UgZG9tYWluIHRvIGxvd2VyY2FzZS5cbiAgdmFyIGRvbWFpbiA9IGlucHV0LnNsaWNlKDApLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gSGFuZGxlIEZRRE4uXG4gIC8vIFRPRE86IFNpbXBseSByZW1vdmUgdHJhaWxpbmcgZG90P1xuICBpZiAoZG9tYWluLmNoYXJBdChkb21haW4ubGVuZ3RoIC0gMSkgPT09ICcuJykge1xuICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgwLCBkb21haW4ubGVuZ3RoIC0gMSk7XG4gIH1cblxuICAvLyBWYWxpZGF0ZSBhbmQgc2FuaXRpc2UgaW5wdXQuXG4gIHZhciBlcnJvciA9IGludGVybmFscy52YWxpZGF0ZShkb21haW4pO1xuICBpZiAoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5wdXQ6IGlucHV0LFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgbWVzc2FnZTogZXhwb3J0cy5lcnJvckNvZGVzW2Vycm9yXSxcbiAgICAgICAgY29kZTogZXJyb3JcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIHBhcnNlZCA9IHtcbiAgICBpbnB1dDogaW5wdXQsXG4gICAgdGxkOiBudWxsLFxuICAgIHNsZDogbnVsbCxcbiAgICBkb21haW46IG51bGwsXG4gICAgc3ViZG9tYWluOiBudWxsLFxuICAgIGxpc3RlZDogZmFsc2VcbiAgfTtcblxuICB2YXIgZG9tYWluUGFydHMgPSBkb21haW4uc3BsaXQoJy4nKTtcblxuICAvLyBOb24tSW50ZXJuZXQgVExEXG4gIGlmIChkb21haW5QYXJ0c1tkb21haW5QYXJ0cy5sZW5ndGggLSAxXSA9PT0gJ2xvY2FsJykge1xuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cblxuICB2YXIgaGFuZGxlUHVueWNvZGUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICBpZiAoIS94bi0tLy50ZXN0KGRvbWFpbikpIHtcbiAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuICAgIGlmIChwYXJzZWQuZG9tYWluKSB7XG4gICAgICBwYXJzZWQuZG9tYWluID0gUHVueWNvZGUudG9BU0NJSShwYXJzZWQuZG9tYWluKTtcbiAgICB9XG4gICAgaWYgKHBhcnNlZC5zdWJkb21haW4pIHtcbiAgICAgIHBhcnNlZC5zdWJkb21haW4gPSBQdW55Y29kZS50b0FTQ0lJKHBhcnNlZC5zdWJkb21haW4pO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9O1xuXG4gIHZhciBydWxlID0gaW50ZXJuYWxzLmZpbmRSdWxlKGRvbWFpbik7XG5cbiAgLy8gVW5saXN0ZWQgdGxkLlxuICBpZiAoIXJ1bGUpIHtcbiAgICBpZiAoZG9tYWluUGFydHMubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gICAgcGFyc2VkLnRsZCA9IGRvbWFpblBhcnRzLnBvcCgpO1xuICAgIHBhcnNlZC5zbGQgPSBkb21haW5QYXJ0cy5wb3AoKTtcbiAgICBwYXJzZWQuZG9tYWluID0gW3BhcnNlZC5zbGQsIHBhcnNlZC50bGRdLmpvaW4oJy4nKTtcbiAgICBpZiAoZG9tYWluUGFydHMubGVuZ3RoKSB7XG4gICAgICBwYXJzZWQuc3ViZG9tYWluID0gZG9tYWluUGFydHMucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBoYW5kbGVQdW55Y29kZSgpO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCB3ZSBrbm93IHRoZSBwdWJsaWMgc3VmZml4IGlzIGxpc3RlZC5cbiAgcGFyc2VkLmxpc3RlZCA9IHRydWU7XG5cbiAgdmFyIHRsZFBhcnRzID0gcnVsZS5zdWZmaXguc3BsaXQoJy4nKTtcbiAgdmFyIHByaXZhdGVQYXJ0cyA9IGRvbWFpblBhcnRzLnNsaWNlKDAsIGRvbWFpblBhcnRzLmxlbmd0aCAtIHRsZFBhcnRzLmxlbmd0aCk7XG5cbiAgaWYgKHJ1bGUuZXhjZXB0aW9uKSB7XG4gICAgcHJpdmF0ZVBhcnRzLnB1c2godGxkUGFydHMuc2hpZnQoKSk7XG4gIH1cblxuICBwYXJzZWQudGxkID0gdGxkUGFydHMuam9pbignLicpO1xuXG4gIGlmICghcHJpdmF0ZVBhcnRzLmxlbmd0aCkge1xuICAgIHJldHVybiBoYW5kbGVQdW55Y29kZSgpO1xuICB9XG5cbiAgaWYgKHJ1bGUud2lsZGNhcmQpIHtcbiAgICB0bGRQYXJ0cy51bnNoaWZ0KHByaXZhdGVQYXJ0cy5wb3AoKSk7XG4gICAgcGFyc2VkLnRsZCA9IHRsZFBhcnRzLmpvaW4oJy4nKTtcbiAgfVxuXG4gIGlmICghcHJpdmF0ZVBhcnRzLmxlbmd0aCkge1xuICAgIHJldHVybiBoYW5kbGVQdW55Y29kZSgpO1xuICB9XG5cbiAgcGFyc2VkLnNsZCA9IHByaXZhdGVQYXJ0cy5wb3AoKTtcbiAgcGFyc2VkLmRvbWFpbiA9IFtwYXJzZWQuc2xkLCAgcGFyc2VkLnRsZF0uam9pbignLicpO1xuXG4gIGlmIChwcml2YXRlUGFydHMubGVuZ3RoKSB7XG4gICAgcGFyc2VkLnN1YmRvbWFpbiA9IHByaXZhdGVQYXJ0cy5qb2luKCcuJyk7XG4gIH1cblxuICByZXR1cm4gaGFuZGxlUHVueWNvZGUoKTtcbn07XG5cblxuLy9cbi8vIEdldCBkb21haW4uXG4vL1xuZXhwb3J0cy5nZXQgPSBmdW5jdGlvbiAoZG9tYWluKSB7XG5cbiAgaWYgKCFkb21haW4pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZXhwb3J0cy5wYXJzZShkb21haW4pLmRvbWFpbiB8fCBudWxsO1xufTtcblxuXG4vL1xuLy8gQ2hlY2sgd2hldGhlciBkb21haW4gYmVsb25ncyB0byBhIGtub3duIHB1YmxpYyBzdWZmaXguXG4vL1xuZXhwb3J0cy5pc1ZhbGlkID0gZnVuY3Rpb24gKGRvbWFpbikge1xuXG4gIHZhciBwYXJzZWQgPSBleHBvcnRzLnBhcnNlKGRvbWFpbik7XG4gIHJldHVybiBCb29sZWFuKHBhcnNlZC5kb21haW4gJiYgcGFyc2VkLmxpc3RlZCk7XG59O1xuIiwiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUsIFNhbGVzZm9yY2UuY29tLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gKiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIFNhbGVzZm9yY2UuY29tIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXlcbiAqIGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXRcbiAqIHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuICogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuICogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiAqIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiAqIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiAqIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4gKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiAqIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4gKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuICogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiAqIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG4ndXNlIHN0cmljdCc7XG52YXIgU3RvcmUgPSByZXF1aXJlKCcuL3N0b3JlJykuU3RvcmU7XG52YXIgcGVybXV0ZURvbWFpbiA9IHJlcXVpcmUoJy4vcGVybXV0ZURvbWFpbicpLnBlcm11dGVEb21haW47XG52YXIgcGF0aE1hdGNoID0gcmVxdWlyZSgnLi9wYXRoTWF0Y2gnKS5wYXRoTWF0Y2g7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gTWVtb3J5Q29va2llU3RvcmUoKSB7XG4gIFN0b3JlLmNhbGwodGhpcyk7XG4gIHRoaXMuaWR4ID0ge307XG59XG51dGlsLmluaGVyaXRzKE1lbW9yeUNvb2tpZVN0b3JlLCBTdG9yZSk7XG5leHBvcnRzLk1lbW9yeUNvb2tpZVN0b3JlID0gTWVtb3J5Q29va2llU3RvcmU7XG5NZW1vcnlDb29raWVTdG9yZS5wcm90b3R5cGUuaWR4ID0gbnVsbDtcblxuLy8gU2luY2UgaXQncyBqdXN0IGEgc3RydWN0IGluIFJBTSwgdGhpcyBTdG9yZSBpcyBzeW5jaHJvbm91c1xuTWVtb3J5Q29va2llU3RvcmUucHJvdG90eXBlLnN5bmNocm9ub3VzID0gdHJ1ZTtcblxuLy8gZm9yY2UgYSBkZWZhdWx0IGRlcHRoOlxuTWVtb3J5Q29va2llU3RvcmUucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFwieyBpZHg6IFwiK3V0aWwuaW5zcGVjdCh0aGlzLmlkeCwgZmFsc2UsIDIpKycgfSc7XG59O1xuXG4vLyBVc2UgdGhlIG5ldyBjdXN0b20gaW5zcGVjdGlvbiBzeW1ib2wgdG8gYWRkIHRoZSBjdXN0b20gaW5zcGVjdCBmdW5jdGlvbiBpZlxuLy8gYXZhaWxhYmxlLlxuaWYgKHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgTWVtb3J5Q29va2llU3RvcmUucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gTWVtb3J5Q29va2llU3RvcmUucHJvdG90eXBlLmluc3BlY3Q7XG59XG5cbk1lbW9yeUNvb2tpZVN0b3JlLnByb3RvdHlwZS5maW5kQ29va2llID0gZnVuY3Rpb24oZG9tYWluLCBwYXRoLCBrZXksIGNiKSB7XG4gIGlmICghdGhpcy5pZHhbZG9tYWluXSkge1xuICAgIHJldHVybiBjYihudWxsLHVuZGVmaW5lZCk7XG4gIH1cbiAgaWYgKCF0aGlzLmlkeFtkb21haW5dW3BhdGhdKSB7XG4gICAgcmV0dXJuIGNiKG51bGwsdW5kZWZpbmVkKTtcbiAgfVxuICByZXR1cm4gY2IobnVsbCx0aGlzLmlkeFtkb21haW5dW3BhdGhdW2tleV18fG51bGwpO1xufTtcblxuTWVtb3J5Q29va2llU3RvcmUucHJvdG90eXBlLmZpbmRDb29raWVzID0gZnVuY3Rpb24oZG9tYWluLCBwYXRoLCBjYikge1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICBpZiAoIWRvbWFpbikge1xuICAgIHJldHVybiBjYihudWxsLFtdKTtcbiAgfVxuXG4gIHZhciBwYXRoTWF0Y2hlcjtcbiAgaWYgKCFwYXRoKSB7XG4gICAgLy8gbnVsbCBtZWFucyBcImFsbCBwYXRoc1wiXG4gICAgcGF0aE1hdGNoZXIgPSBmdW5jdGlvbiBtYXRjaEFsbChkb21haW5JbmRleCkge1xuICAgICAgZm9yICh2YXIgY3VyUGF0aCBpbiBkb21haW5JbmRleCkge1xuICAgICAgICB2YXIgcGF0aEluZGV4ID0gZG9tYWluSW5kZXhbY3VyUGF0aF07XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwYXRoSW5kZXgpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2gocGF0aEluZGV4W2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICB9IGVsc2Uge1xuICAgIHBhdGhNYXRjaGVyID0gZnVuY3Rpb24gbWF0Y2hSRkMoZG9tYWluSW5kZXgpIHtcbiAgICAgICAvL05PVEU6IHdlIHNob3VsZCB1c2UgcGF0aC1tYXRjaCBhbGdvcml0aG0gZnJvbSBTNS4xLjQgaGVyZVxuICAgICAgIC8vKHNlZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9DaHJvbWl1bVdlYkFwcHMvY2hyb21pdW0vYmxvYi9iM2QzYjRkYThiYjk0YzFiMmUwNjE2MDBkZjEwNmQ1OTBmZGEzNjIwL25ldC9jb29raWVzL2Nhbm9uaWNhbF9jb29raWUuY2MjTDI5OSlcbiAgICAgICBPYmplY3Qua2V5cyhkb21haW5JbmRleCkuZm9yRWFjaChmdW5jdGlvbiAoY29va2llUGF0aCkge1xuICAgICAgICAgaWYgKHBhdGhNYXRjaChwYXRoLCBjb29raWVQYXRoKSkge1xuICAgICAgICAgICB2YXIgcGF0aEluZGV4ID0gZG9tYWluSW5kZXhbY29va2llUGF0aF07XG5cbiAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHBhdGhJbmRleCkge1xuICAgICAgICAgICAgIHJlc3VsdHMucHVzaChwYXRoSW5kZXhba2V5XSk7XG4gICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICB9KTtcbiAgICAgfTtcbiAgfVxuXG4gIHZhciBkb21haW5zID0gcGVybXV0ZURvbWFpbihkb21haW4pIHx8IFtkb21haW5dO1xuICB2YXIgaWR4ID0gdGhpcy5pZHg7XG4gIGRvbWFpbnMuZm9yRWFjaChmdW5jdGlvbihjdXJEb21haW4pIHtcbiAgICB2YXIgZG9tYWluSW5kZXggPSBpZHhbY3VyRG9tYWluXTtcbiAgICBpZiAoIWRvbWFpbkluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHBhdGhNYXRjaGVyKGRvbWFpbkluZGV4KTtcbiAgfSk7XG5cbiAgY2IobnVsbCxyZXN1bHRzKTtcbn07XG5cbk1lbW9yeUNvb2tpZVN0b3JlLnByb3RvdHlwZS5wdXRDb29raWUgPSBmdW5jdGlvbihjb29raWUsIGNiKSB7XG4gIGlmICghdGhpcy5pZHhbY29va2llLmRvbWFpbl0pIHtcbiAgICB0aGlzLmlkeFtjb29raWUuZG9tYWluXSA9IHt9O1xuICB9XG4gIGlmICghdGhpcy5pZHhbY29va2llLmRvbWFpbl1bY29va2llLnBhdGhdKSB7XG4gICAgdGhpcy5pZHhbY29va2llLmRvbWFpbl1bY29va2llLnBhdGhdID0ge307XG4gIH1cbiAgdGhpcy5pZHhbY29va2llLmRvbWFpbl1bY29va2llLnBhdGhdW2Nvb2tpZS5rZXldID0gY29va2llO1xuICBjYihudWxsKTtcbn07XG5cbk1lbW9yeUNvb2tpZVN0b3JlLnByb3RvdHlwZS51cGRhdGVDb29raWUgPSBmdW5jdGlvbihvbGRDb29raWUsIG5ld0Nvb2tpZSwgY2IpIHtcbiAgLy8gdXBkYXRlQ29va2llKCkgbWF5IGF2b2lkIHVwZGF0aW5nIGNvb2tpZXMgdGhhdCBhcmUgaWRlbnRpY2FsLiAgRm9yIGV4YW1wbGUsXG4gIC8vIGxhc3RBY2Nlc3NlZCBtYXkgbm90IGJlIGltcG9ydGFudCB0byBzb21lIHN0b3JlcyBhbmQgYW4gZXF1YWxpdHlcbiAgLy8gY29tcGFyaXNvbiBjb3VsZCBleGNsdWRlIHRoYXQgZmllbGQuXG4gIHRoaXMucHV0Q29va2llKG5ld0Nvb2tpZSxjYik7XG59O1xuXG5NZW1vcnlDb29raWVTdG9yZS5wcm90b3R5cGUucmVtb3ZlQ29va2llID0gZnVuY3Rpb24oZG9tYWluLCBwYXRoLCBrZXksIGNiKSB7XG4gIGlmICh0aGlzLmlkeFtkb21haW5dICYmIHRoaXMuaWR4W2RvbWFpbl1bcGF0aF0gJiYgdGhpcy5pZHhbZG9tYWluXVtwYXRoXVtrZXldKSB7XG4gICAgZGVsZXRlIHRoaXMuaWR4W2RvbWFpbl1bcGF0aF1ba2V5XTtcbiAgfVxuICBjYihudWxsKTtcbn07XG5cbk1lbW9yeUNvb2tpZVN0b3JlLnByb3RvdHlwZS5yZW1vdmVDb29raWVzID0gZnVuY3Rpb24oZG9tYWluLCBwYXRoLCBjYikge1xuICBpZiAodGhpcy5pZHhbZG9tYWluXSkge1xuICAgIGlmIChwYXRoKSB7XG4gICAgICBkZWxldGUgdGhpcy5pZHhbZG9tYWluXVtwYXRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMuaWR4W2RvbWFpbl07XG4gICAgfVxuICB9XG4gIHJldHVybiBjYihudWxsKTtcbn07XG5cbk1lbW9yeUNvb2tpZVN0b3JlLnByb3RvdHlwZS5nZXRBbGxDb29raWVzID0gZnVuY3Rpb24oY2IpIHtcbiAgdmFyIGNvb2tpZXMgPSBbXTtcbiAgdmFyIGlkeCA9IHRoaXMuaWR4O1xuXG4gIHZhciBkb21haW5zID0gT2JqZWN0LmtleXMoaWR4KTtcbiAgZG9tYWlucy5mb3JFYWNoKGZ1bmN0aW9uKGRvbWFpbikge1xuICAgIHZhciBwYXRocyA9IE9iamVjdC5rZXlzKGlkeFtkb21haW5dKTtcbiAgICBwYXRocy5mb3JFYWNoKGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaWR4W2RvbWFpbl1bcGF0aF0pO1xuICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoa2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgY29va2llcy5wdXNoKGlkeFtkb21haW5dW3BhdGhdW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gU29ydCBieSBjcmVhdGlvbkluZGV4IHNvIGRlc2VyaWFsaXppbmcgcmV0YWlucyB0aGUgY3JlYXRpb24gb3JkZXIuXG4gIC8vIFdoZW4gaW1wbGVtZW50aW5nIHlvdXIgb3duIHN0b3JlLCB0aGlzIFNIT1VMRCByZXRhaW4gdGhlIG9yZGVyIHRvb1xuICBjb29raWVzLnNvcnQoZnVuY3Rpb24oYSxiKSB7XG4gICAgcmV0dXJuIChhLmNyZWF0aW9uSW5kZXh8fDApIC0gKGIuY3JlYXRpb25JbmRleHx8MCk7XG4gIH0pO1xuXG4gIGNiKG51bGwsIGNvb2tpZXMpO1xufTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeVxuZXhwb3J0cy5nZXRTZXJpYWxpemUgPSBzZXJpYWxpemVyXG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmosIHJlcGxhY2VyLCBzcGFjZXMsIGN5Y2xlUmVwbGFjZXIpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgc2VyaWFsaXplcihyZXBsYWNlciwgY3ljbGVSZXBsYWNlciksIHNwYWNlcylcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplcihyZXBsYWNlciwgY3ljbGVSZXBsYWNlcikge1xuICB2YXIgc3RhY2sgPSBbXSwga2V5cyA9IFtdXG5cbiAgaWYgKGN5Y2xlUmVwbGFjZXIgPT0gbnVsbCkgY3ljbGVSZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoc3RhY2tbMF0gPT09IHZhbHVlKSByZXR1cm4gXCJbQ2lyY3VsYXIgfl1cIlxuICAgIHJldHVybiBcIltDaXJjdWxhciB+LlwiICsga2V5cy5zbGljZSgwLCBzdGFjay5pbmRleE9mKHZhbHVlKSkuam9pbihcIi5cIikgKyBcIl1cIlxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHRoaXNQb3MgPSBzdGFjay5pbmRleE9mKHRoaXMpXG4gICAgICB+dGhpc1BvcyA/IHN0YWNrLnNwbGljZSh0aGlzUG9zICsgMSkgOiBzdGFjay5wdXNoKHRoaXMpXG4gICAgICB+dGhpc1BvcyA/IGtleXMuc3BsaWNlKHRoaXNQb3MsIEluZmluaXR5LCBrZXkpIDoga2V5cy5wdXNoKGtleSlcbiAgICAgIGlmICh+c3RhY2suaW5kZXhPZih2YWx1ZSkpIHZhbHVlID0gY3ljbGVSZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpXG4gICAgfVxuICAgIGVsc2Ugc3RhY2sucHVzaCh2YWx1ZSlcblxuICAgIHJldHVybiByZXBsYWNlciA9PSBudWxsID8gdmFsdWUgOiByZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKVxudmFyIGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKVxudmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG52YXIgemxpYiA9IHJlcXVpcmUoJ3psaWInKVxudmFyIGF3czIgPSByZXF1aXJlKCdhd3Mtc2lnbjInKVxudmFyIGF3czQgPSByZXF1aXJlKCdhd3M0JylcbnZhciBodHRwU2lnbmF0dXJlID0gcmVxdWlyZSgnaHR0cC1zaWduYXR1cmUnKVxudmFyIG1pbWUgPSByZXF1aXJlKCdtaW1lLXR5cGVzJylcbnZhciBjYXNlbGVzcyA9IHJlcXVpcmUoJ2Nhc2VsZXNzJylcbnZhciBGb3JldmVyQWdlbnQgPSByZXF1aXJlKCdmb3JldmVyLWFnZW50JylcbnZhciBGb3JtRGF0YSA9IHJlcXVpcmUoJ2Zvcm0tZGF0YScpXG52YXIgZXh0ZW5kID0gcmVxdWlyZSgnZXh0ZW5kJylcbnZhciBpc3N0cmVhbSA9IHJlcXVpcmUoJ2lzc3RyZWFtJylcbnZhciBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCdpcy10eXBlZGFycmF5Jykuc3RyaWN0XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vbGliL2hlbHBlcnMnKVxudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuL2xpYi9jb29raWVzJylcbnZhciBnZXRQcm94eUZyb21VUkkgPSByZXF1aXJlKCcuL2xpYi9nZXRQcm94eUZyb21VUkknKVxudmFyIFF1ZXJ5c3RyaW5nID0gcmVxdWlyZSgnLi9saWIvcXVlcnlzdHJpbmcnKS5RdWVyeXN0cmluZ1xudmFyIEhhciA9IHJlcXVpcmUoJy4vbGliL2hhcicpLkhhclxudmFyIEF1dGggPSByZXF1aXJlKCcuL2xpYi9hdXRoJykuQXV0aFxudmFyIE9BdXRoID0gcmVxdWlyZSgnLi9saWIvb2F1dGgnKS5PQXV0aFxudmFyIGhhd2sgPSByZXF1aXJlKCcuL2xpYi9oYXdrJylcbnZhciBNdWx0aXBhcnQgPSByZXF1aXJlKCcuL2xpYi9tdWx0aXBhcnQnKS5NdWx0aXBhcnRcbnZhciBSZWRpcmVjdCA9IHJlcXVpcmUoJy4vbGliL3JlZGlyZWN0JykuUmVkaXJlY3RcbnZhciBUdW5uZWwgPSByZXF1aXJlKCcuL2xpYi90dW5uZWwnKS5UdW5uZWxcbnZhciBub3cgPSByZXF1aXJlKCdwZXJmb3JtYW5jZS1ub3cnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBzYWZlU3RyaW5naWZ5ID0gaGVscGVycy5zYWZlU3RyaW5naWZ5XG52YXIgaXNSZWFkU3RyZWFtID0gaGVscGVycy5pc1JlYWRTdHJlYW1cbnZhciB0b0Jhc2U2NCA9IGhlbHBlcnMudG9CYXNlNjRcbnZhciBkZWZlciA9IGhlbHBlcnMuZGVmZXJcbnZhciBjb3B5ID0gaGVscGVycy5jb3B5XG52YXIgdmVyc2lvbiA9IGhlbHBlcnMudmVyc2lvblxudmFyIGdsb2JhbENvb2tpZUphciA9IGNvb2tpZXMuamFyKClcblxudmFyIGdsb2JhbFBvb2wgPSB7fVxuXG5mdW5jdGlvbiBmaWx0ZXJGb3JOb25SZXNlcnZlZCAocmVzZXJ2ZWQsIG9wdGlvbnMpIHtcbiAgLy8gRmlsdGVyIG91dCBwcm9wZXJ0aWVzIHRoYXQgYXJlIG5vdCByZXNlcnZlZC5cbiAgLy8gUmVzZXJ2ZWQgdmFsdWVzIGFyZSBwYXNzZWQgaW4gYXQgY2FsbCBzaXRlLlxuXG4gIHZhciBvYmplY3QgPSB7fVxuICBmb3IgKHZhciBpIGluIG9wdGlvbnMpIHtcbiAgICB2YXIgbm90UmVzZXJ2ZWQgPSAocmVzZXJ2ZWQuaW5kZXhPZihpKSA9PT0gLTEpXG4gICAgaWYgKG5vdFJlc2VydmVkKSB7XG4gICAgICBvYmplY3RbaV0gPSBvcHRpb25zW2ldXG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Rcbn1cblxuZnVuY3Rpb24gZmlsdGVyT3V0UmVzZXJ2ZWRGdW5jdGlvbnMgKHJlc2VydmVkLCBvcHRpb25zKSB7XG4gIC8vIEZpbHRlciBvdXQgcHJvcGVydGllcyB0aGF0IGFyZSBmdW5jdGlvbnMgYW5kIGFyZSByZXNlcnZlZC5cbiAgLy8gUmVzZXJ2ZWQgdmFsdWVzIGFyZSBwYXNzZWQgaW4gYXQgY2FsbCBzaXRlLlxuXG4gIHZhciBvYmplY3QgPSB7fVxuICBmb3IgKHZhciBpIGluIG9wdGlvbnMpIHtcbiAgICB2YXIgaXNSZXNlcnZlZCA9ICEocmVzZXJ2ZWQuaW5kZXhPZihpKSA9PT0gLTEpXG4gICAgdmFyIGlzRnVuY3Rpb24gPSAodHlwZW9mIG9wdGlvbnNbaV0gPT09ICdmdW5jdGlvbicpXG4gICAgaWYgKCEoaXNSZXNlcnZlZCAmJiBpc0Z1bmN0aW9uKSkge1xuICAgICAgb2JqZWN0W2ldID0gb3B0aW9uc1tpXVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0XG59XG5cbi8vIFJldHVybiBhIHNpbXBsZXIgcmVxdWVzdCBvYmplY3QgdG8gYWxsb3cgc2VyaWFsaXphdGlvblxuZnVuY3Rpb24gcmVxdWVzdFRvSlNPTiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICByZXR1cm4ge1xuICAgIHVyaTogc2VsZi51cmksXG4gICAgbWV0aG9kOiBzZWxmLm1ldGhvZCxcbiAgICBoZWFkZXJzOiBzZWxmLmhlYWRlcnNcbiAgfVxufVxuXG4vLyBSZXR1cm4gYSBzaW1wbGVyIHJlc3BvbnNlIG9iamVjdCB0byBhbGxvdyBzZXJpYWxpemF0aW9uXG5mdW5jdGlvbiByZXNwb25zZVRvSlNPTiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICByZXR1cm4ge1xuICAgIHN0YXR1c0NvZGU6IHNlbGYuc3RhdHVzQ29kZSxcbiAgICBib2R5OiBzZWxmLmJvZHksXG4gICAgaGVhZGVyczogc2VsZi5oZWFkZXJzLFxuICAgIHJlcXVlc3Q6IHJlcXVlc3RUb0pTT04uY2FsbChzZWxmLnJlcXVlc3QpXG4gIH1cbn1cblxuZnVuY3Rpb24gUmVxdWVzdCAob3B0aW9ucykge1xuICAvLyBpZiBnaXZlbiB0aGUgbWV0aG9kIHByb3BlcnR5IGluIG9wdGlvbnMsIHNldCBwcm9wZXJ0eSBleHBsaWNpdE1ldGhvZCB0byB0cnVlXG5cbiAgLy8gZXh0ZW5kIHRoZSBSZXF1ZXN0IGluc3RhbmNlIHdpdGggYW55IG5vbi1yZXNlcnZlZCBwcm9wZXJ0aWVzXG4gIC8vIHJlbW92ZSBhbnkgcmVzZXJ2ZWQgZnVuY3Rpb25zIGZyb20gdGhlIG9wdGlvbnMgb2JqZWN0XG4gIC8vIHNldCBSZXF1ZXN0IGluc3RhbmNlIHRvIGJlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuICAvLyBjYWxsIGluaXRcblxuICB2YXIgc2VsZiA9IHRoaXNcblxuICAvLyBzdGFydCB3aXRoIEhBUiwgdGhlbiBvdmVycmlkZSB3aXRoIGFkZGl0aW9uYWwgb3B0aW9uc1xuICBpZiAob3B0aW9ucy5oYXIpIHtcbiAgICBzZWxmLl9oYXIgPSBuZXcgSGFyKHNlbGYpXG4gICAgb3B0aW9ucyA9IHNlbGYuX2hhci5vcHRpb25zKG9wdGlvbnMpXG4gIH1cblxuICBzdHJlYW0uU3RyZWFtLmNhbGwoc2VsZilcbiAgdmFyIHJlc2VydmVkID0gT2JqZWN0LmtleXMoUmVxdWVzdC5wcm90b3R5cGUpXG4gIHZhciBub25SZXNlcnZlZCA9IGZpbHRlckZvck5vblJlc2VydmVkKHJlc2VydmVkLCBvcHRpb25zKVxuXG4gIGV4dGVuZChzZWxmLCBub25SZXNlcnZlZClcbiAgb3B0aW9ucyA9IGZpbHRlck91dFJlc2VydmVkRnVuY3Rpb25zKHJlc2VydmVkLCBvcHRpb25zKVxuXG4gIHNlbGYucmVhZGFibGUgPSB0cnVlXG4gIHNlbGYud3JpdGFibGUgPSB0cnVlXG4gIGlmIChvcHRpb25zLm1ldGhvZCkge1xuICAgIHNlbGYuZXhwbGljaXRNZXRob2QgPSB0cnVlXG4gIH1cbiAgc2VsZi5fcXMgPSBuZXcgUXVlcnlzdHJpbmcoc2VsZilcbiAgc2VsZi5fYXV0aCA9IG5ldyBBdXRoKHNlbGYpXG4gIHNlbGYuX29hdXRoID0gbmV3IE9BdXRoKHNlbGYpXG4gIHNlbGYuX211bHRpcGFydCA9IG5ldyBNdWx0aXBhcnQoc2VsZilcbiAgc2VsZi5fcmVkaXJlY3QgPSBuZXcgUmVkaXJlY3Qoc2VsZilcbiAgc2VsZi5fdHVubmVsID0gbmV3IFR1bm5lbChzZWxmKVxuICBzZWxmLmluaXQob3B0aW9ucylcbn1cblxudXRpbC5pbmhlcml0cyhSZXF1ZXN0LCBzdHJlYW0uU3RyZWFtKVxuXG4vLyBEZWJ1Z2dpbmdcblJlcXVlc3QuZGVidWcgPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHICYmIC9cXGJyZXF1ZXN0XFxiLy50ZXN0KHByb2Nlc3MuZW52Lk5PREVfREVCVUcpXG5mdW5jdGlvbiBkZWJ1ZyAoKSB7XG4gIGlmIChSZXF1ZXN0LmRlYnVnKSB7XG4gICAgY29uc29sZS5lcnJvcignUkVRVUVTVCAlcycsIHV0aWwuZm9ybWF0LmFwcGx5KHV0aWwsIGFyZ3VtZW50cykpXG4gIH1cbn1cblJlcXVlc3QucHJvdG90eXBlLmRlYnVnID0gZGVidWdcblxuUmVxdWVzdC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIC8vIGluaXQoKSBjb250YWlucyBhbGwgdGhlIGNvZGUgdG8gc2V0dXAgdGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAvLyB0aGUgYWN0dWFsIG91dGdvaW5nIHJlcXVlc3QgaXMgbm90IHN0YXJ0ZWQgdW50aWwgc3RhcnQoKSBpcyBjYWxsZWRcbiAgLy8gdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgZnJvbSBib3RoIHRoZSBjb25zdHJ1Y3RvciBhbmQgb24gcmVkaXJlY3QuXG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuICBzZWxmLmhlYWRlcnMgPSBzZWxmLmhlYWRlcnMgPyBjb3B5KHNlbGYuaGVhZGVycykgOiB7fVxuXG4gIC8vIERlbGV0ZSBoZWFkZXJzIHdpdGggdmFsdWUgdW5kZWZpbmVkIHNpbmNlIHRoZXkgYnJlYWtcbiAgLy8gQ2xpZW50UmVxdWVzdC5PdXRnb2luZ01lc3NhZ2Uuc2V0SGVhZGVyIGluIG5vZGUgMC4xMlxuICBmb3IgKHZhciBoZWFkZXJOYW1lIGluIHNlbGYuaGVhZGVycykge1xuICAgIGlmICh0eXBlb2Ygc2VsZi5oZWFkZXJzW2hlYWRlck5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGVsZXRlIHNlbGYuaGVhZGVyc1toZWFkZXJOYW1lXVxuICAgIH1cbiAgfVxuXG4gIGNhc2VsZXNzLmh0dHBpZnkoc2VsZiwgc2VsZi5oZWFkZXJzKVxuXG4gIGlmICghc2VsZi5tZXRob2QpIHtcbiAgICBzZWxmLm1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8ICdHRVQnXG4gIH1cbiAgaWYgKCFzZWxmLmxvY2FsQWRkcmVzcykge1xuICAgIHNlbGYubG9jYWxBZGRyZXNzID0gb3B0aW9ucy5sb2NhbEFkZHJlc3NcbiAgfVxuXG4gIHNlbGYuX3FzLmluaXQob3B0aW9ucylcblxuICBkZWJ1ZyhvcHRpb25zKVxuICBpZiAoIXNlbGYucG9vbCAmJiBzZWxmLnBvb2wgIT09IGZhbHNlKSB7XG4gICAgc2VsZi5wb29sID0gZ2xvYmFsUG9vbFxuICB9XG4gIHNlbGYuZGVzdHMgPSBzZWxmLmRlc3RzIHx8IFtdXG4gIHNlbGYuX19pc1JlcXVlc3RSZXF1ZXN0ID0gdHJ1ZVxuXG4gIC8vIFByb3RlY3QgYWdhaW5zdCBkb3VibGUgY2FsbGJhY2tcbiAgaWYgKCFzZWxmLl9jYWxsYmFjayAmJiBzZWxmLmNhbGxiYWNrKSB7XG4gICAgc2VsZi5fY2FsbGJhY2sgPSBzZWxmLmNhbGxiYWNrXG4gICAgc2VsZi5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLl9jYWxsYmFja0NhbGxlZCkge1xuICAgICAgICByZXR1cm4gLy8gUHJpbnQgYSB3YXJuaW5nIG1heWJlP1xuICAgICAgfVxuICAgICAgc2VsZi5fY2FsbGJhY2tDYWxsZWQgPSB0cnVlXG4gICAgICBzZWxmLl9jYWxsYmFjay5hcHBseShzZWxmLCBhcmd1bWVudHMpXG4gICAgfVxuICAgIHNlbGYub24oJ2Vycm9yJywgc2VsZi5jYWxsYmFjay5iaW5kKCkpXG4gICAgc2VsZi5vbignY29tcGxldGUnLCBzZWxmLmNhbGxiYWNrLmJpbmQoc2VsZiwgbnVsbCkpXG4gIH1cblxuICAvLyBQZW9wbGUgdXNlIHRoaXMgcHJvcGVydHkgaW5zdGVhZCBhbGwgdGhlIHRpbWUsIHNvIHN1cHBvcnQgaXRcbiAgaWYgKCFzZWxmLnVyaSAmJiBzZWxmLnVybCkge1xuICAgIHNlbGYudXJpID0gc2VsZi51cmxcbiAgICBkZWxldGUgc2VsZi51cmxcbiAgfVxuXG4gIC8vIElmIHRoZXJlJ3MgYSBiYXNlVXJsLCB0aGVuIHVzZSBpdCBhcyB0aGUgYmFzZSBVUkwgKGkuZS4gdXJpIG11c3QgYmVcbiAgLy8gc3BlY2lmaWVkIGFzIGEgcmVsYXRpdmUgcGF0aCBhbmQgaXMgYXBwZW5kZWQgdG8gYmFzZVVybCkuXG4gIGlmIChzZWxmLmJhc2VVcmwpIHtcbiAgICBpZiAodHlwZW9mIHNlbGYuYmFzZVVybCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBzZWxmLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdvcHRpb25zLmJhc2VVcmwgbXVzdCBiZSBhIHN0cmluZycpKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2VsZi51cmkgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gc2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignb3B0aW9ucy51cmkgbXVzdCBiZSBhIHN0cmluZyB3aGVuIHVzaW5nIG9wdGlvbnMuYmFzZVVybCcpKVxuICAgIH1cblxuICAgIGlmIChzZWxmLnVyaS5pbmRleE9mKCcvLycpID09PSAwIHx8IHNlbGYudXJpLmluZGV4T2YoJzovLycpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ29wdGlvbnMudXJpIG11c3QgYmUgYSBwYXRoIHdoZW4gdXNpbmcgb3B0aW9ucy5iYXNlVXJsJykpXG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGFsbCBjYXNlcyB0byBtYWtlIHN1cmUgdGhhdCB0aGVyZSdzIG9ubHkgb25lIHNsYXNoIGJldHdlZW5cbiAgICAvLyBiYXNlVXJsIGFuZCB1cmkuXG4gICAgdmFyIGJhc2VVcmxFbmRzV2l0aFNsYXNoID0gc2VsZi5iYXNlVXJsLmxhc3RJbmRleE9mKCcvJykgPT09IHNlbGYuYmFzZVVybC5sZW5ndGggLSAxXG4gICAgdmFyIHVyaVN0YXJ0c1dpdGhTbGFzaCA9IHNlbGYudXJpLmluZGV4T2YoJy8nKSA9PT0gMFxuXG4gICAgaWYgKGJhc2VVcmxFbmRzV2l0aFNsYXNoICYmIHVyaVN0YXJ0c1dpdGhTbGFzaCkge1xuICAgICAgc2VsZi51cmkgPSBzZWxmLmJhc2VVcmwgKyBzZWxmLnVyaS5zbGljZSgxKVxuICAgIH0gZWxzZSBpZiAoYmFzZVVybEVuZHNXaXRoU2xhc2ggfHwgdXJpU3RhcnRzV2l0aFNsYXNoKSB7XG4gICAgICBzZWxmLnVyaSA9IHNlbGYuYmFzZVVybCArIHNlbGYudXJpXG4gICAgfSBlbHNlIGlmIChzZWxmLnVyaSA9PT0gJycpIHtcbiAgICAgIHNlbGYudXJpID0gc2VsZi5iYXNlVXJsXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYudXJpID0gc2VsZi5iYXNlVXJsICsgJy8nICsgc2VsZi51cmlcbiAgICB9XG4gICAgZGVsZXRlIHNlbGYuYmFzZVVybFxuICB9XG5cbiAgLy8gQSBVUkkgaXMgbmVlZGVkIGJ5IHRoaXMgcG9pbnQsIGVtaXQgZXJyb3IgaWYgd2UgaGF2ZW4ndCBiZWVuIGFibGUgdG8gZ2V0IG9uZVxuICBpZiAoIXNlbGYudXJpKSB7XG4gICAgcmV0dXJuIHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ29wdGlvbnMudXJpIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQnKSlcbiAgfVxuXG4gIC8vIElmIGEgc3RyaW5nIFVSSS9VUkwgd2FzIGdpdmVuLCBwYXJzZSBpdCBpbnRvIGEgVVJMIG9iamVjdFxuICBpZiAodHlwZW9mIHNlbGYudXJpID09PSAnc3RyaW5nJykge1xuICAgIHNlbGYudXJpID0gdXJsLnBhcnNlKHNlbGYudXJpKVxuICB9XG5cbiAgLy8gU29tZSBVUkwgb2JqZWN0cyBhcmUgbm90IGZyb20gYSBVUkwgcGFyc2VkIHN0cmluZyBhbmQgbmVlZCBocmVmIGFkZGVkXG4gIGlmICghc2VsZi51cmkuaHJlZikge1xuICAgIHNlbGYudXJpLmhyZWYgPSB1cmwuZm9ybWF0KHNlbGYudXJpKVxuICB9XG5cbiAgLy8gREVQUkVDQVRFRDogV2FybmluZyBmb3IgdXNlcnMgb2YgdGhlIG9sZCBVbml4IFNvY2tldHMgVVJMIFNjaGVtZVxuICBpZiAoc2VsZi51cmkucHJvdG9jb2wgPT09ICd1bml4OicpIHtcbiAgICByZXR1cm4gc2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignYHVuaXg6Ly9gIFVSTCBzY2hlbWUgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gUGxlYXNlIHVzZSB0aGUgZm9ybWF0IGBodHRwOi8vdW5peDpTT0NLRVQ6UEFUSGAnKSlcbiAgfVxuXG4gIC8vIFN1cHBvcnQgVW5peCBTb2NrZXRzXG4gIGlmIChzZWxmLnVyaS5ob3N0ID09PSAndW5peCcpIHtcbiAgICBzZWxmLmVuYWJsZVVuaXhTb2NrZXQoKVxuICB9XG5cbiAgaWYgKHNlbGYuc3RyaWN0U1NMID09PSBmYWxzZSkge1xuICAgIHNlbGYucmVqZWN0VW5hdXRob3JpemVkID0gZmFsc2VcbiAgfVxuXG4gIGlmICghc2VsZi51cmkucGF0aG5hbWUpIHsgc2VsZi51cmkucGF0aG5hbWUgPSAnLycgfVxuXG4gIGlmICghKHNlbGYudXJpLmhvc3QgfHwgKHNlbGYudXJpLmhvc3RuYW1lICYmIHNlbGYudXJpLnBvcnQpKSAmJiAhc2VsZi51cmkuaXNVbml4KSB7XG4gICAgLy8gSW52YWxpZCBVUkk6IGl0IG1heSBnZW5lcmF0ZSBsb3Qgb2YgYmFkIGVycm9ycywgbGlrZSAnVHlwZUVycm9yOiBDYW5ub3QgY2FsbCBtZXRob2QgYGluZGV4T2ZgIG9mIHVuZGVmaW5lZCcgaW4gQ29va2llSmFyXG4gICAgLy8gRGV0ZWN0IGFuZCByZWplY3QgaXQgYXMgc29vbiBhcyBwb3NzaWJsZVxuICAgIHZhciBmYXVsdHlVcmkgPSB1cmwuZm9ybWF0KHNlbGYudXJpKVxuICAgIHZhciBtZXNzYWdlID0gJ0ludmFsaWQgVVJJIFwiJyArIGZhdWx0eVVyaSArICdcIidcbiAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBObyBvcHRpb24gPyBUaGlzIGNhbiBiZSB0aGUgc2lnbiBvZiBhIHJlZGlyZWN0XG4gICAgICAvLyBBcyB0aGlzIGlzIGEgY2FzZSB3aGVyZSB0aGUgdXNlciBjYW5ub3QgZG8gYW55dGhpbmcgKHRoZXkgZGlkbid0IGNhbGwgcmVxdWVzdCBkaXJlY3RseSB3aXRoIHRoaXMgVVJMKVxuICAgICAgLy8gdGhleSBzaG91bGQgYmUgd2FybmVkIHRoYXQgaXQgY2FuIGJlIGNhdXNlZCBieSBhIHJlZGlyZWN0aW9uIChjYW4gc2F2ZSBzb21lIGhhaXIpXG4gICAgICBtZXNzYWdlICs9ICcuIFRoaXMgY2FuIGJlIGNhdXNlZCBieSBhIGNyYXBweSByZWRpcmVjdGlvbi4nXG4gICAgfVxuICAgIC8vIFRoaXMgZXJyb3Igd2FzIGZhdGFsXG4gICAgc2VsZi5hYm9ydCgpXG4gICAgcmV0dXJuIHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IobWVzc2FnZSkpXG4gIH1cblxuICBpZiAoIXNlbGYuaGFzT3duUHJvcGVydHkoJ3Byb3h5JykpIHtcbiAgICBzZWxmLnByb3h5ID0gZ2V0UHJveHlGcm9tVVJJKHNlbGYudXJpKVxuICB9XG5cbiAgc2VsZi50dW5uZWwgPSBzZWxmLl90dW5uZWwuaXNFbmFibGVkKClcbiAgaWYgKHNlbGYucHJveHkpIHtcbiAgICBzZWxmLl90dW5uZWwuc2V0dXAob3B0aW9ucylcbiAgfVxuXG4gIHNlbGYuX3JlZGlyZWN0Lm9uUmVxdWVzdChvcHRpb25zKVxuXG4gIHNlbGYuc2V0SG9zdCA9IGZhbHNlXG4gIGlmICghc2VsZi5oYXNIZWFkZXIoJ2hvc3QnKSkge1xuICAgIHZhciBob3N0SGVhZGVyTmFtZSA9IHNlbGYub3JpZ2luYWxIb3N0SGVhZGVyTmFtZSB8fCAnaG9zdCdcbiAgICBzZWxmLnNldEhlYWRlcihob3N0SGVhZGVyTmFtZSwgc2VsZi51cmkuaG9zdClcbiAgICAvLyBEcm9wIDpwb3J0IHN1ZmZpeCBmcm9tIEhvc3QgaGVhZGVyIGlmIGtub3duIHByb3RvY29sLlxuICAgIGlmIChzZWxmLnVyaS5wb3J0KSB7XG4gICAgICBpZiAoKHNlbGYudXJpLnBvcnQgPT09ICc4MCcgJiYgc2VsZi51cmkucHJvdG9jb2wgPT09ICdodHRwOicpIHx8XG4gICAgICAgICAgKHNlbGYudXJpLnBvcnQgPT09ICc0NDMnICYmIHNlbGYudXJpLnByb3RvY29sID09PSAnaHR0cHM6JykpIHtcbiAgICAgICAgc2VsZi5zZXRIZWFkZXIoaG9zdEhlYWRlck5hbWUsIHNlbGYudXJpLmhvc3RuYW1lKVxuICAgICAgfVxuICAgIH1cbiAgICBzZWxmLnNldEhvc3QgPSB0cnVlXG4gIH1cblxuICBzZWxmLmphcihzZWxmLl9qYXIgfHwgb3B0aW9ucy5qYXIpXG5cbiAgaWYgKCFzZWxmLnVyaS5wb3J0KSB7XG4gICAgaWYgKHNlbGYudXJpLnByb3RvY29sID09PSAnaHR0cDonKSB7IHNlbGYudXJpLnBvcnQgPSA4MCB9IGVsc2UgaWYgKHNlbGYudXJpLnByb3RvY29sID09PSAnaHR0cHM6JykgeyBzZWxmLnVyaS5wb3J0ID0gNDQzIH1cbiAgfVxuXG4gIGlmIChzZWxmLnByb3h5ICYmICFzZWxmLnR1bm5lbCkge1xuICAgIHNlbGYucG9ydCA9IHNlbGYucHJveHkucG9ydFxuICAgIHNlbGYuaG9zdCA9IHNlbGYucHJveHkuaG9zdG5hbWVcbiAgfSBlbHNlIHtcbiAgICBzZWxmLnBvcnQgPSBzZWxmLnVyaS5wb3J0XG4gICAgc2VsZi5ob3N0ID0gc2VsZi51cmkuaG9zdG5hbWVcbiAgfVxuXG4gIGlmIChvcHRpb25zLmZvcm0pIHtcbiAgICBzZWxmLmZvcm0ob3B0aW9ucy5mb3JtKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuZm9ybURhdGEpIHtcbiAgICB2YXIgZm9ybURhdGEgPSBvcHRpb25zLmZvcm1EYXRhXG4gICAgdmFyIHJlcXVlc3RGb3JtID0gc2VsZi5mb3JtKClcbiAgICB2YXIgYXBwZW5kRm9ybVZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnb3B0aW9ucycpKSB7XG4gICAgICAgIHJlcXVlc3RGb3JtLmFwcGVuZChrZXksIHZhbHVlLnZhbHVlLCB2YWx1ZS5vcHRpb25zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdEZvcm0uYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGZvcm1LZXkgaW4gZm9ybURhdGEpIHtcbiAgICAgIGlmIChmb3JtRGF0YS5oYXNPd25Qcm9wZXJ0eShmb3JtS2V5KSkge1xuICAgICAgICB2YXIgZm9ybVZhbHVlID0gZm9ybURhdGFbZm9ybUtleV1cbiAgICAgICAgaWYgKGZvcm1WYWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmb3JtVmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGFwcGVuZEZvcm1WYWx1ZShmb3JtS2V5LCBmb3JtVmFsdWVbal0pXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFwcGVuZEZvcm1WYWx1ZShmb3JtS2V5LCBmb3JtVmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAob3B0aW9ucy5xcykge1xuICAgIHNlbGYucXMob3B0aW9ucy5xcylcbiAgfVxuXG4gIGlmIChzZWxmLnVyaS5wYXRoKSB7XG4gICAgc2VsZi5wYXRoID0gc2VsZi51cmkucGF0aFxuICB9IGVsc2Uge1xuICAgIHNlbGYucGF0aCA9IHNlbGYudXJpLnBhdGhuYW1lICsgKHNlbGYudXJpLnNlYXJjaCB8fCAnJylcbiAgfVxuXG4gIGlmIChzZWxmLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgc2VsZi5wYXRoID0gJy8nXG4gIH1cblxuICAvLyBBdXRoIG11c3QgaGFwcGVuIGxhc3QgaW4gY2FzZSBzaWduaW5nIGlzIGRlcGVuZGVudCBvbiBvdGhlciBoZWFkZXJzXG4gIGlmIChvcHRpb25zLmF3cykge1xuICAgIHNlbGYuYXdzKG9wdGlvbnMuYXdzKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGF3aykge1xuICAgIHNlbGYuaGF3ayhvcHRpb25zLmhhd2spXG4gIH1cblxuICBpZiAob3B0aW9ucy5odHRwU2lnbmF0dXJlKSB7XG4gICAgc2VsZi5odHRwU2lnbmF0dXJlKG9wdGlvbnMuaHR0cFNpZ25hdHVyZSlcbiAgfVxuXG4gIGlmIChvcHRpb25zLmF1dGgpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMuYXV0aCwgJ3VzZXJuYW1lJykpIHtcbiAgICAgIG9wdGlvbnMuYXV0aC51c2VyID0gb3B0aW9ucy5hdXRoLnVzZXJuYW1lXG4gICAgfVxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucy5hdXRoLCAncGFzc3dvcmQnKSkge1xuICAgICAgb3B0aW9ucy5hdXRoLnBhc3MgPSBvcHRpb25zLmF1dGgucGFzc3dvcmRcbiAgICB9XG5cbiAgICBzZWxmLmF1dGgoXG4gICAgICBvcHRpb25zLmF1dGgudXNlcixcbiAgICAgIG9wdGlvbnMuYXV0aC5wYXNzLFxuICAgICAgb3B0aW9ucy5hdXRoLnNlbmRJbW1lZGlhdGVseSxcbiAgICAgIG9wdGlvbnMuYXV0aC5iZWFyZXJcbiAgICApXG4gIH1cblxuICBpZiAoc2VsZi5nemlwICYmICFzZWxmLmhhc0hlYWRlcignYWNjZXB0LWVuY29kaW5nJykpIHtcbiAgICBzZWxmLnNldEhlYWRlcignYWNjZXB0LWVuY29kaW5nJywgJ2d6aXAsIGRlZmxhdGUnKVxuICB9XG5cbiAgaWYgKHNlbGYudXJpLmF1dGggJiYgIXNlbGYuaGFzSGVhZGVyKCdhdXRob3JpemF0aW9uJykpIHtcbiAgICB2YXIgdXJpQXV0aFBpZWNlcyA9IHNlbGYudXJpLmF1dGguc3BsaXQoJzonKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIHNlbGYuX3FzLnVuZXNjYXBlKGl0ZW0pIH0pXG4gICAgc2VsZi5hdXRoKHVyaUF1dGhQaWVjZXNbMF0sIHVyaUF1dGhQaWVjZXMuc2xpY2UoMSkuam9pbignOicpLCB0cnVlKVxuICB9XG5cbiAgaWYgKCFzZWxmLnR1bm5lbCAmJiBzZWxmLnByb3h5ICYmIHNlbGYucHJveHkuYXV0aCAmJiAhc2VsZi5oYXNIZWFkZXIoJ3Byb3h5LWF1dGhvcml6YXRpb24nKSkge1xuICAgIHZhciBwcm94eUF1dGhQaWVjZXMgPSBzZWxmLnByb3h5LmF1dGguc3BsaXQoJzonKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIHNlbGYuX3FzLnVuZXNjYXBlKGl0ZW0pIH0pXG4gICAgdmFyIGF1dGhIZWFkZXIgPSAnQmFzaWMgJyArIHRvQmFzZTY0KHByb3h5QXV0aFBpZWNlcy5qb2luKCc6JykpXG4gICAgc2VsZi5zZXRIZWFkZXIoJ3Byb3h5LWF1dGhvcml6YXRpb24nLCBhdXRoSGVhZGVyKVxuICB9XG5cbiAgaWYgKHNlbGYucHJveHkgJiYgIXNlbGYudHVubmVsKSB7XG4gICAgc2VsZi5wYXRoID0gKHNlbGYudXJpLnByb3RvY29sICsgJy8vJyArIHNlbGYudXJpLmhvc3QgKyBzZWxmLnBhdGgpXG4gIH1cblxuICBpZiAob3B0aW9ucy5qc29uKSB7XG4gICAgc2VsZi5qc29uKG9wdGlvbnMuanNvbilcbiAgfVxuICBpZiAob3B0aW9ucy5tdWx0aXBhcnQpIHtcbiAgICBzZWxmLm11bHRpcGFydChvcHRpb25zLm11bHRpcGFydClcbiAgfVxuXG4gIGlmIChvcHRpb25zLnRpbWUpIHtcbiAgICBzZWxmLnRpbWluZyA9IHRydWVcblxuICAgIC8vIE5PVEU6IGVsYXBzZWRUaW1lIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgLnRpbWluZ3NcbiAgICBzZWxmLmVsYXBzZWRUaW1lID0gc2VsZi5lbGFwc2VkVGltZSB8fCAwXG4gIH1cblxuICBmdW5jdGlvbiBzZXRDb250ZW50TGVuZ3RoICgpIHtcbiAgICBpZiAoaXNUeXBlZEFycmF5KHNlbGYuYm9keSkpIHtcbiAgICAgIHNlbGYuYm9keSA9IEJ1ZmZlci5mcm9tKHNlbGYuYm9keSlcbiAgICB9XG5cbiAgICBpZiAoIXNlbGYuaGFzSGVhZGVyKCdjb250ZW50LWxlbmd0aCcpKSB7XG4gICAgICB2YXIgbGVuZ3RoXG4gICAgICBpZiAodHlwZW9mIHNlbGYuYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgoc2VsZi5ib2R5KVxuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlbGYuYm9keSkpIHtcbiAgICAgICAgbGVuZ3RoID0gc2VsZi5ib2R5LnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSArIGIubGVuZ3RoIH0sIDApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW5ndGggPSBzZWxmLmJvZHkubGVuZ3RoXG4gICAgICB9XG5cbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgc2VsZi5zZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJywgbGVuZ3RoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQXJndW1lbnQgZXJyb3IsIG9wdGlvbnMuYm9keS4nKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHNlbGYuYm9keSAmJiAhaXNzdHJlYW0oc2VsZi5ib2R5KSkge1xuICAgIHNldENvbnRlbnRMZW5ndGgoKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMub2F1dGgpIHtcbiAgICBzZWxmLm9hdXRoKG9wdGlvbnMub2F1dGgpXG4gIH0gZWxzZSBpZiAoc2VsZi5fb2F1dGgucGFyYW1zICYmIHNlbGYuaGFzSGVhZGVyKCdhdXRob3JpemF0aW9uJykpIHtcbiAgICBzZWxmLm9hdXRoKHNlbGYuX29hdXRoLnBhcmFtcylcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHNlbGYucHJveHkgJiYgIXNlbGYudHVubmVsID8gc2VsZi5wcm94eS5wcm90b2NvbCA6IHNlbGYudXJpLnByb3RvY29sXG4gIHZhciBkZWZhdWx0TW9kdWxlcyA9IHsnaHR0cDonOiBodHRwLCAnaHR0cHM6JzogaHR0cHN9XG4gIHZhciBodHRwTW9kdWxlcyA9IHNlbGYuaHR0cE1vZHVsZXMgfHwge31cblxuICBzZWxmLmh0dHBNb2R1bGUgPSBodHRwTW9kdWxlc1twcm90b2NvbF0gfHwgZGVmYXVsdE1vZHVsZXNbcHJvdG9jb2xdXG5cbiAgaWYgKCFzZWxmLmh0dHBNb2R1bGUpIHtcbiAgICByZXR1cm4gc2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignSW52YWxpZCBwcm90b2NvbDogJyArIHByb3RvY29sKSlcbiAgfVxuXG4gIGlmIChvcHRpb25zLmNhKSB7XG4gICAgc2VsZi5jYSA9IG9wdGlvbnMuY2FcbiAgfVxuXG4gIGlmICghc2VsZi5hZ2VudCkge1xuICAgIGlmIChvcHRpb25zLmFnZW50T3B0aW9ucykge1xuICAgICAgc2VsZi5hZ2VudE9wdGlvbnMgPSBvcHRpb25zLmFnZW50T3B0aW9uc1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmFnZW50Q2xhc3MpIHtcbiAgICAgIHNlbGYuYWdlbnRDbGFzcyA9IG9wdGlvbnMuYWdlbnRDbGFzc1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5mb3JldmVyKSB7XG4gICAgICB2YXIgdiA9IHZlcnNpb24oKVxuICAgICAgLy8gdXNlIEZvcmV2ZXJBZ2VudCBpbiBub2RlIDAuMTAtIG9ubHlcbiAgICAgIGlmICh2Lm1ham9yID09PSAwICYmIHYubWlub3IgPD0gMTApIHtcbiAgICAgICAgc2VsZi5hZ2VudENsYXNzID0gcHJvdG9jb2wgPT09ICdodHRwOicgPyBGb3JldmVyQWdlbnQgOiBGb3JldmVyQWdlbnQuU1NMXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmFnZW50Q2xhc3MgPSBzZWxmLmh0dHBNb2R1bGUuQWdlbnRcbiAgICAgICAgc2VsZi5hZ2VudE9wdGlvbnMgPSBzZWxmLmFnZW50T3B0aW9ucyB8fCB7fVxuICAgICAgICBzZWxmLmFnZW50T3B0aW9ucy5rZWVwQWxpdmUgPSB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuYWdlbnRDbGFzcyA9IHNlbGYuaHR0cE1vZHVsZS5BZ2VudFxuICAgIH1cbiAgfVxuXG4gIGlmIChzZWxmLnBvb2wgPT09IGZhbHNlKSB7XG4gICAgc2VsZi5hZ2VudCA9IGZhbHNlXG4gIH0gZWxzZSB7XG4gICAgc2VsZi5hZ2VudCA9IHNlbGYuYWdlbnQgfHwgc2VsZi5nZXROZXdBZ2VudCgpXG4gIH1cblxuICBzZWxmLm9uKCdwaXBlJywgZnVuY3Rpb24gKHNyYykge1xuICAgIGlmIChzZWxmLm50aWNrICYmIHNlbGYuX3N0YXJ0ZWQpIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1lvdSBjYW5ub3QgcGlwZSB0byB0aGlzIHN0cmVhbSBhZnRlciB0aGUgb3V0Ym91bmQgcmVxdWVzdCBoYXMgc3RhcnRlZC4nKSlcbiAgICB9XG4gICAgc2VsZi5zcmMgPSBzcmNcbiAgICBpZiAoaXNSZWFkU3RyZWFtKHNyYykpIHtcbiAgICAgIGlmICghc2VsZi5oYXNIZWFkZXIoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIHNlbGYuc2V0SGVhZGVyKCdjb250ZW50LXR5cGUnLCBtaW1lLmxvb2t1cChzcmMucGF0aCkpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzcmMuaGVhZGVycykge1xuICAgICAgICBmb3IgKHZhciBpIGluIHNyYy5oZWFkZXJzKSB7XG4gICAgICAgICAgaWYgKCFzZWxmLmhhc0hlYWRlcihpKSkge1xuICAgICAgICAgICAgc2VsZi5zZXRIZWFkZXIoaSwgc3JjLmhlYWRlcnNbaV0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VsZi5fanNvbiAmJiAhc2VsZi5oYXNIZWFkZXIoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIHNlbGYuc2V0SGVhZGVyKCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICB9XG4gICAgICBpZiAoc3JjLm1ldGhvZCAmJiAhc2VsZi5leHBsaWNpdE1ldGhvZCkge1xuICAgICAgICBzZWxmLm1ldGhvZCA9IHNyYy5tZXRob2RcbiAgICAgIH1cbiAgICB9XG5cbiAgLy8gc2VsZi5vbigncGlwZScsIGZ1bmN0aW9uICgpIHtcbiAgLy8gICBjb25zb2xlLmVycm9yKCdZb3UgaGF2ZSBhbHJlYWR5IHBpcGVkIHRvIHRoaXMgc3RyZWFtLiBQaXBlaW5nIHR3aWNlIGlzIGxpa2VseSB0byBicmVhayB0aGUgcmVxdWVzdC4nKVxuICAvLyB9KVxuICB9KVxuXG4gIGRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2VsZi5fYWJvcnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLl9mb3JtKSB7XG4gICAgICAgIGlmICghc2VsZi5fYXV0aC5oYXNBdXRoKSB7XG4gICAgICAgICAgc2VsZi5fZm9ybS5waXBlKHNlbGYpXG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5fYXV0aC5oYXNBdXRoICYmIHNlbGYuX2F1dGguc2VudEF1dGgpIHtcbiAgICAgICAgICBzZWxmLl9mb3JtLnBpcGUoc2VsZilcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlbGYuX211bHRpcGFydCAmJiBzZWxmLl9tdWx0aXBhcnQuY2h1bmtlZCkge1xuICAgICAgICBzZWxmLl9tdWx0aXBhcnQuYm9keS5waXBlKHNlbGYpXG4gICAgICB9XG4gICAgICBpZiAoc2VsZi5ib2R5KSB7XG4gICAgICAgIGlmIChpc3N0cmVhbShzZWxmLmJvZHkpKSB7XG4gICAgICAgICAgc2VsZi5ib2R5LnBpcGUoc2VsZilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRDb250ZW50TGVuZ3RoKClcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWxmLmJvZHkpKSB7XG4gICAgICAgICAgICBzZWxmLmJvZHkuZm9yRWFjaChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICAgICAgICBzZWxmLndyaXRlKHBhcnQpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLndyaXRlKHNlbGYuYm9keSlcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi5lbmQoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNlbGYucmVxdWVzdEJvZHlTdHJlYW0pIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdvcHRpb25zLnJlcXVlc3RCb2R5U3RyZWFtIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSBwYXNzIHRoZSByZXF1ZXN0IG9iamVjdCB0byBzdHJlYW0ucGlwZS4nKVxuICAgICAgICBzZWxmLnJlcXVlc3RCb2R5U3RyZWFtLnBpcGUoc2VsZilcbiAgICAgIH0gZWxzZSBpZiAoIXNlbGYuc3JjKSB7XG4gICAgICAgIGlmIChzZWxmLl9hdXRoLmhhc0F1dGggJiYgIXNlbGYuX2F1dGguc2VudEF1dGgpIHtcbiAgICAgICAgICBzZWxmLmVuZCgpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYubWV0aG9kICE9PSAnR0VUJyAmJiB0eXBlb2Ygc2VsZi5tZXRob2QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc2VsZi5zZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJywgMClcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmVuZCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2Zvcm0gJiYgIXNlbGYuaGFzSGVhZGVyKCdjb250ZW50LWxlbmd0aCcpKSB7XG4gICAgICAvLyBCZWZvcmUgZW5kaW5nIHRoZSByZXF1ZXN0LCB3ZSBoYWQgdG8gY29tcHV0ZSB0aGUgbGVuZ3RoIG9mIHRoZSB3aG9sZSBmb3JtLCBhc3luY2x5XG4gICAgICBzZWxmLnNldEhlYWRlcihzZWxmLl9mb3JtLmdldEhlYWRlcnMoKSwgdHJ1ZSlcbiAgICAgIHNlbGYuX2Zvcm0uZ2V0TGVuZ3RoKGZ1bmN0aW9uIChlcnIsIGxlbmd0aCkge1xuICAgICAgICBpZiAoIWVyciAmJiAhaXNOYU4obGVuZ3RoKSkge1xuICAgICAgICAgIHNlbGYuc2V0SGVhZGVyKCdjb250ZW50LWxlbmd0aCcsIGxlbmd0aClcbiAgICAgICAgfVxuICAgICAgICBlbmQoKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kKClcbiAgICB9XG5cbiAgICBzZWxmLm50aWNrID0gdHJ1ZVxuICB9KVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5nZXROZXdBZ2VudCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBBZ2VudCA9IHNlbGYuYWdlbnRDbGFzc1xuICB2YXIgb3B0aW9ucyA9IHt9XG4gIGlmIChzZWxmLmFnZW50T3B0aW9ucykge1xuICAgIGZvciAodmFyIGkgaW4gc2VsZi5hZ2VudE9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnNbaV0gPSBzZWxmLmFnZW50T3B0aW9uc1tpXVxuICAgIH1cbiAgfVxuICBpZiAoc2VsZi5jYSkge1xuICAgIG9wdGlvbnMuY2EgPSBzZWxmLmNhXG4gIH1cbiAgaWYgKHNlbGYuY2lwaGVycykge1xuICAgIG9wdGlvbnMuY2lwaGVycyA9IHNlbGYuY2lwaGVyc1xuICB9XG4gIGlmIChzZWxmLnNlY3VyZVByb3RvY29sKSB7XG4gICAgb3B0aW9ucy5zZWN1cmVQcm90b2NvbCA9IHNlbGYuc2VjdXJlUHJvdG9jb2xcbiAgfVxuICBpZiAoc2VsZi5zZWN1cmVPcHRpb25zKSB7XG4gICAgb3B0aW9ucy5zZWN1cmVPcHRpb25zID0gc2VsZi5zZWN1cmVPcHRpb25zXG4gIH1cbiAgaWYgKHR5cGVvZiBzZWxmLnJlamVjdFVuYXV0aG9yaXplZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCA9IHNlbGYucmVqZWN0VW5hdXRob3JpemVkXG4gIH1cblxuICBpZiAoc2VsZi5jZXJ0ICYmIHNlbGYua2V5KSB7XG4gICAgb3B0aW9ucy5rZXkgPSBzZWxmLmtleVxuICAgIG9wdGlvbnMuY2VydCA9IHNlbGYuY2VydFxuICB9XG5cbiAgaWYgKHNlbGYucGZ4KSB7XG4gICAgb3B0aW9ucy5wZnggPSBzZWxmLnBmeFxuICB9XG5cbiAgaWYgKHNlbGYucGFzc3BocmFzZSkge1xuICAgIG9wdGlvbnMucGFzc3BocmFzZSA9IHNlbGYucGFzc3BocmFzZVxuICB9XG5cbiAgdmFyIHBvb2xLZXkgPSAnJ1xuXG4gIC8vIGRpZmZlcmVudCB0eXBlcyBvZiBhZ2VudHMgYXJlIGluIGRpZmZlcmVudCBwb29sc1xuICBpZiAoQWdlbnQgIT09IHNlbGYuaHR0cE1vZHVsZS5BZ2VudCkge1xuICAgIHBvb2xLZXkgKz0gQWdlbnQubmFtZVxuICB9XG5cbiAgLy8gY2Egb3B0aW9uIGlzIG9ubHkgcmVsZXZhbnQgaWYgcHJveHkgb3IgZGVzdGluYXRpb24gYXJlIGh0dHBzXG4gIHZhciBwcm94eSA9IHNlbGYucHJveHlcbiAgaWYgKHR5cGVvZiBwcm94eSA9PT0gJ3N0cmluZycpIHtcbiAgICBwcm94eSA9IHVybC5wYXJzZShwcm94eSlcbiAgfVxuICB2YXIgaXNIdHRwcyA9IChwcm94eSAmJiBwcm94eS5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHx8IHRoaXMudXJpLnByb3RvY29sID09PSAnaHR0cHM6J1xuXG4gIGlmIChpc0h0dHBzKSB7XG4gICAgaWYgKG9wdGlvbnMuY2EpIHtcbiAgICAgIGlmIChwb29sS2V5KSB7XG4gICAgICAgIHBvb2xLZXkgKz0gJzonXG4gICAgICB9XG4gICAgICBwb29sS2V5ICs9IG9wdGlvbnMuY2FcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHBvb2xLZXkpIHtcbiAgICAgICAgcG9vbEtleSArPSAnOidcbiAgICAgIH1cbiAgICAgIHBvb2xLZXkgKz0gb3B0aW9ucy5yZWplY3RVbmF1dGhvcml6ZWRcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jZXJ0KSB7XG4gICAgICBpZiAocG9vbEtleSkge1xuICAgICAgICBwb29sS2V5ICs9ICc6J1xuICAgICAgfVxuICAgICAgcG9vbEtleSArPSBvcHRpb25zLmNlcnQudG9TdHJpbmcoJ2FzY2lpJykgKyBvcHRpb25zLmtleS50b1N0cmluZygnYXNjaWknKVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnBmeCkge1xuICAgICAgaWYgKHBvb2xLZXkpIHtcbiAgICAgICAgcG9vbEtleSArPSAnOidcbiAgICAgIH1cbiAgICAgIHBvb2xLZXkgKz0gb3B0aW9ucy5wZngudG9TdHJpbmcoJ2FzY2lpJylcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jaXBoZXJzKSB7XG4gICAgICBpZiAocG9vbEtleSkge1xuICAgICAgICBwb29sS2V5ICs9ICc6J1xuICAgICAgfVxuICAgICAgcG9vbEtleSArPSBvcHRpb25zLmNpcGhlcnNcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zZWN1cmVQcm90b2NvbCkge1xuICAgICAgaWYgKHBvb2xLZXkpIHtcbiAgICAgICAgcG9vbEtleSArPSAnOidcbiAgICAgIH1cbiAgICAgIHBvb2xLZXkgKz0gb3B0aW9ucy5zZWN1cmVQcm90b2NvbFxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNlY3VyZU9wdGlvbnMpIHtcbiAgICAgIGlmIChwb29sS2V5KSB7XG4gICAgICAgIHBvb2xLZXkgKz0gJzonXG4gICAgICB9XG4gICAgICBwb29sS2V5ICs9IG9wdGlvbnMuc2VjdXJlT3B0aW9uc1xuICAgIH1cbiAgfVxuXG4gIGlmIChzZWxmLnBvb2wgPT09IGdsb2JhbFBvb2wgJiYgIXBvb2xLZXkgJiYgT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID09PSAwICYmIHNlbGYuaHR0cE1vZHVsZS5nbG9iYWxBZ2VudCkge1xuICAgIC8vIG5vdCBkb2luZyBhbnl0aGluZyBzcGVjaWFsLiAgVXNlIHRoZSBnbG9iYWxBZ2VudFxuICAgIHJldHVybiBzZWxmLmh0dHBNb2R1bGUuZ2xvYmFsQWdlbnRcbiAgfVxuXG4gIC8vIHdlJ3JlIHVzaW5nIGEgc3RvcmVkIGFnZW50LiAgTWFrZSBzdXJlIGl0J3MgcHJvdG9jb2wtc3BlY2lmaWNcbiAgcG9vbEtleSA9IHNlbGYudXJpLnByb3RvY29sICsgcG9vbEtleVxuXG4gIC8vIGdlbmVyYXRlIGEgbmV3IGFnZW50IGZvciB0aGlzIHNldHRpbmcgaWYgbm9uZSB5ZXQgZXhpc3RzXG4gIGlmICghc2VsZi5wb29sW3Bvb2xLZXldKSB7XG4gICAgc2VsZi5wb29sW3Bvb2xLZXldID0gbmV3IEFnZW50KG9wdGlvbnMpXG4gICAgLy8gcHJvcGVybHkgc2V0IG1heFNvY2tldHMgb24gbmV3IGFnZW50c1xuICAgIGlmIChzZWxmLnBvb2wubWF4U29ja2V0cykge1xuICAgICAgc2VsZi5wb29sW3Bvb2xLZXldLm1heFNvY2tldHMgPSBzZWxmLnBvb2wubWF4U29ja2V0c1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZWxmLnBvb2xbcG9vbEtleV1cbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIHN0YXJ0KCkgaXMgY2FsbGVkIG9uY2Ugd2UgYXJlIHJlYWR5IHRvIHNlbmQgdGhlIG91dGdvaW5nIEhUVFAgcmVxdWVzdC5cbiAgLy8gdGhpcyBpcyB1c3VhbGx5IGNhbGxlZCBvbiB0aGUgZmlyc3Qgd3JpdGUoKSwgZW5kKCkgb3Igb24gbmV4dFRpY2soKVxuICB2YXIgc2VsZiA9IHRoaXNcblxuICBpZiAoc2VsZi50aW1pbmcpIHtcbiAgICAvLyBBbGwgdGltaW5ncyB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMgcmVxdWVzdCdzIHN0YXJ0VGltZS4gIEluIG9yZGVyIHRvIGRvIHRoaXMsXG4gICAgLy8gd2UgbmVlZCB0byBjYXB0dXJlIHRoZSB3YWxsLWNsb2NrIHN0YXJ0IHRpbWUgKHZpYSBEYXRlKSwgaW1tZWRpYXRlbHkgZm9sbG93ZWRcbiAgICAvLyBieSB0aGUgaGlnaC1yZXNvbHV0aW9uIHRpbWVyICh2aWEgbm93KCkpLiAgV2hpbGUgdGhlc2UgdHdvIHdvbid0IGJlIHNldFxuICAgIC8vIGF0IHRoZSBfZXhhY3RfIHNhbWUgdGltZSwgdGhleSBzaG91bGQgYmUgY2xvc2UgZW5vdWdoIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlXG4gICAgLy8gaGlnaC1yZXNvbHV0aW9uLCBtb25vdG9uaWNhbGx5IG5vbi1kZWNyZWFzaW5nIHRpbWVzdGFtcHMgcmVsYXRpdmUgdG8gc3RhcnRUaW1lLlxuICAgIHZhciBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIHZhciBzdGFydFRpbWVOb3cgPSBub3coKVxuICB9XG5cbiAgaWYgKHNlbGYuX2Fib3J0ZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHNlbGYuX3N0YXJ0ZWQgPSB0cnVlXG4gIHNlbGYubWV0aG9kID0gc2VsZi5tZXRob2QgfHwgJ0dFVCdcbiAgc2VsZi5ocmVmID0gc2VsZi51cmkuaHJlZlxuXG4gIGlmIChzZWxmLnNyYyAmJiBzZWxmLnNyYy5zdGF0ICYmIHNlbGYuc3JjLnN0YXQuc2l6ZSAmJiAhc2VsZi5oYXNIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJykpIHtcbiAgICBzZWxmLnNldEhlYWRlcignY29udGVudC1sZW5ndGgnLCBzZWxmLnNyYy5zdGF0LnNpemUpXG4gIH1cbiAgaWYgKHNlbGYuX2F3cykge1xuICAgIHNlbGYuYXdzKHNlbGYuX2F3cywgdHJ1ZSlcbiAgfVxuXG4gIC8vIFdlIGhhdmUgYSBtZXRob2QgbmFtZWQgYXV0aCwgd2hpY2ggaXMgY29tcGxldGVseSBkaWZmZXJlbnQgZnJvbSB0aGUgaHR0cC5yZXF1ZXN0XG4gIC8vIGF1dGggb3B0aW9uLiAgSWYgd2UgZG9uJ3QgcmVtb3ZlIGl0LCB3ZSdyZSBnb25uYSBoYXZlIGEgYmFkIHRpbWUuXG4gIHZhciByZXFPcHRpb25zID0gY29weShzZWxmKVxuICBkZWxldGUgcmVxT3B0aW9ucy5hdXRoXG5cbiAgZGVidWcoJ21ha2UgcmVxdWVzdCcsIHNlbGYudXJpLmhyZWYpXG5cbiAgLy8gbm9kZSB2Ni44LjAgbm93IHN1cHBvcnRzIGEgYHRpbWVvdXRgIHZhbHVlIGluIGBodHRwLnJlcXVlc3QoKWAsIGJ1dCB3ZVxuICAvLyBzaG91bGQgZGVsZXRlIGl0IGZvciBub3cgc2luY2Ugd2UgaGFuZGxlIHRpbWVvdXRzIG1hbnVhbGx5IGZvciBiZXR0ZXJcbiAgLy8gY29uc2lzdGVuY3kgd2l0aCBub2RlIHZlcnNpb25zIGJlZm9yZSB2Ni44LjBcbiAgZGVsZXRlIHJlcU9wdGlvbnMudGltZW91dFxuXG4gIHRyeSB7XG4gICAgc2VsZi5yZXEgPSBzZWxmLmh0dHBNb2R1bGUucmVxdWVzdChyZXFPcHRpb25zKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHNlbGYudGltaW5nKSB7XG4gICAgc2VsZi5zdGFydFRpbWUgPSBzdGFydFRpbWVcbiAgICBzZWxmLnN0YXJ0VGltZU5vdyA9IHN0YXJ0VGltZU5vd1xuXG4gICAgLy8gVGltaW5nIHZhbHVlcyB3aWxsIGFsbCBiZSByZWxhdGl2ZSB0byBzdGFydFRpbWUgKGJ5IGNvbXBhcmluZyB0byBzdGFydFRpbWVOb3dcbiAgICAvLyBzbyB3ZSBoYXZlIGFuIGFjY3VyYXRlIGNsb2NrKVxuICAgIHNlbGYudGltaW5ncyA9IHt9XG4gIH1cblxuICB2YXIgdGltZW91dFxuICBpZiAoc2VsZi50aW1lb3V0ICYmICFzZWxmLnRpbWVvdXRUaW1lcikge1xuICAgIGlmIChzZWxmLnRpbWVvdXQgPCAwKSB7XG4gICAgICB0aW1lb3V0ID0gMFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYudGltZW91dCA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUoc2VsZi50aW1lb3V0KSkge1xuICAgICAgdGltZW91dCA9IHNlbGYudGltZW91dFxuICAgIH1cbiAgfVxuXG4gIHNlbGYucmVxLm9uKCdyZXNwb25zZScsIHNlbGYub25SZXF1ZXN0UmVzcG9uc2UuYmluZChzZWxmKSlcbiAgc2VsZi5yZXEub24oJ2Vycm9yJywgc2VsZi5vblJlcXVlc3RFcnJvci5iaW5kKHNlbGYpKVxuICBzZWxmLnJlcS5vbignZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5lbWl0KCdkcmFpbicpXG4gIH0pXG5cbiAgc2VsZi5yZXEub24oJ3NvY2tldCcsIGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgICAvLyBgLl9jb25uZWN0aW5nYCB3YXMgdGhlIG9sZCBwcm9wZXJ0eSB3aGljaCB3YXMgbWFkZSBwdWJsaWMgaW4gbm9kZSB2Ni4xLjBcbiAgICB2YXIgaXNDb25uZWN0aW5nID0gc29ja2V0Ll9jb25uZWN0aW5nIHx8IHNvY2tldC5jb25uZWN0aW5nXG4gICAgaWYgKHNlbGYudGltaW5nKSB7XG4gICAgICBzZWxmLnRpbWluZ3Muc29ja2V0ID0gbm93KCkgLSBzZWxmLnN0YXJ0VGltZU5vd1xuXG4gICAgICBpZiAoaXNDb25uZWN0aW5nKSB7XG4gICAgICAgIHZhciBvbkxvb2t1cFRpbWluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLnRpbWluZ3MubG9va3VwID0gbm93KCkgLSBzZWxmLnN0YXJ0VGltZU5vd1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9uQ29ubmVjdFRpbWluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLnRpbWluZ3MuY29ubmVjdCA9IG5vdygpIC0gc2VsZi5zdGFydFRpbWVOb3dcbiAgICAgICAgfVxuXG4gICAgICAgIHNvY2tldC5vbmNlKCdsb29rdXAnLCBvbkxvb2t1cFRpbWluZylcbiAgICAgICAgc29ja2V0Lm9uY2UoJ2Nvbm5lY3QnLCBvbkNvbm5lY3RUaW1pbmcpXG5cbiAgICAgICAgLy8gY2xlYW4gdXAgdGltaW5nIGV2ZW50IGxpc3RlbmVycyBpZiBuZWVkZWQgb24gZXJyb3JcbiAgICAgICAgc2VsZi5yZXEub25jZSgnZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdsb29rdXAnLCBvbkxvb2t1cFRpbWluZylcbiAgICAgICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Nvbm5lY3QnLCBvbkNvbm5lY3RUaW1pbmcpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNldFJlcVRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBUaGlzIHRpbWVvdXQgc2V0cyB0aGUgYW1vdW50IG9mIHRpbWUgdG8gd2FpdCAqYmV0d2VlbiogYnl0ZXMgc2VudFxuICAgICAgLy8gZnJvbSB0aGUgc2VydmVyIG9uY2UgY29ubmVjdGVkLlxuICAgICAgLy9cbiAgICAgIC8vIEluIHBhcnRpY3VsYXIsIGl0J3MgdXNlZnVsIGZvciBlcnJvcmluZyBpZiB0aGUgc2VydmVyIGZhaWxzIHRvIHNlbmRcbiAgICAgIC8vIGRhdGEgaGFsZndheSB0aHJvdWdoIHN0cmVhbWluZyBhIHJlc3BvbnNlLlxuICAgICAgc2VsZi5yZXEuc2V0VGltZW91dCh0aW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzZWxmLnJlcSkge1xuICAgICAgICAgIHNlbGYuYWJvcnQoKVxuICAgICAgICAgIHZhciBlID0gbmV3IEVycm9yKCdFU09DS0VUVElNRURPVVQnKVxuICAgICAgICAgIGUuY29kZSA9ICdFU09DS0VUVElNRURPVVQnXG4gICAgICAgICAgZS5jb25uZWN0ID0gZmFsc2VcbiAgICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKHRpbWVvdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gT25seSBzdGFydCB0aGUgY29ubmVjdGlvbiB0aW1lciBpZiB3ZSdyZSBhY3R1YWxseSBjb25uZWN0aW5nIGEgbmV3XG4gICAgICAvLyBzb2NrZXQsIG90aGVyd2lzZSBpZiB3ZSdyZSBhbHJlYWR5IGNvbm5lY3RlZCAoYmVjYXVzZSB0aGlzIGlzIGFcbiAgICAgIC8vIGtlZXAtYWxpdmUgY29ubmVjdGlvbikgZG8gbm90IGJvdGhlci4gVGhpcyBpcyBpbXBvcnRhbnQgc2luY2Ugd2Ugd29uJ3RcbiAgICAgIC8vIGdldCBhICdjb25uZWN0JyBldmVudCBmb3IgYW4gYWxyZWFkeSBjb25uZWN0ZWQgc29ja2V0LlxuICAgICAgaWYgKGlzQ29ubmVjdGluZykge1xuICAgICAgICB2YXIgb25SZXFTb2NrQ29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Nvbm5lY3QnLCBvblJlcVNvY2tDb25uZWN0KVxuICAgICAgICAgIGNsZWFyVGltZW91dChzZWxmLnRpbWVvdXRUaW1lcilcbiAgICAgICAgICBzZWxmLnRpbWVvdXRUaW1lciA9IG51bGxcbiAgICAgICAgICBzZXRSZXFUaW1lb3V0KClcbiAgICAgICAgfVxuXG4gICAgICAgIHNvY2tldC5vbignY29ubmVjdCcsIG9uUmVxU29ja0Nvbm5lY3QpXG5cbiAgICAgICAgc2VsZi5yZXEub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGhhbmRsZS1jYWxsYmFjay1lcnJcbiAgICAgICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Nvbm5lY3QnLCBvblJlcVNvY2tDb25uZWN0KVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIFNldCBhIHRpbWVvdXQgaW4gbWVtb3J5IC0gdGhpcyBibG9jayB3aWxsIHRocm93IGlmIHRoZSBzZXJ2ZXIgdGFrZXMgbW9yZVxuICAgICAgICAvLyB0aGFuIGB0aW1lb3V0YCB0byB3cml0ZSB0aGUgSFRUUCBzdGF0dXMgYW5kIGhlYWRlcnMgKGNvcnJlc3BvbmRpbmcgdG9cbiAgICAgICAgLy8gdGhlIG9uKCdyZXNwb25zZScpIGV2ZW50IG9uIHRoZSBjbGllbnQpLiBOQjogdGhpcyBtZWFzdXJlcyB3YWxsLWNsb2NrXG4gICAgICAgIC8vIHRpbWUsIG5vdCB0aGUgdGltZSBiZXR3ZWVuIGJ5dGVzIHNlbnQgYnkgdGhlIHNlcnZlci5cbiAgICAgICAgc2VsZi50aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Nvbm5lY3QnLCBvblJlcVNvY2tDb25uZWN0KVxuICAgICAgICAgIHNlbGYuYWJvcnQoKVxuICAgICAgICAgIHZhciBlID0gbmV3IEVycm9yKCdFVElNRURPVVQnKVxuICAgICAgICAgIGUuY29kZSA9ICdFVElNRURPVVQnXG4gICAgICAgICAgZS5jb25uZWN0ID0gdHJ1ZVxuICAgICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlKVxuICAgICAgICB9LCB0aW1lb3V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2UncmUgYWxyZWFkeSBjb25uZWN0ZWRcbiAgICAgICAgc2V0UmVxVGltZW91dCgpXG4gICAgICB9XG4gICAgfVxuICAgIHNlbGYuZW1pdCgnc29ja2V0Jywgc29ja2V0KVxuICB9KVxuXG4gIHNlbGYuZW1pdCgncmVxdWVzdCcsIHNlbGYucmVxKVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5vblJlcXVlc3RFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKHNlbGYuX2Fib3J0ZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoc2VsZi5yZXEgJiYgc2VsZi5yZXEuX3JldXNlZFNvY2tldCAmJiBlcnJvci5jb2RlID09PSAnRUNPTk5SRVNFVCcgJiZcbiAgICBzZWxmLmFnZW50LmFkZFJlcXVlc3ROb3JldXNlKSB7XG4gICAgc2VsZi5hZ2VudCA9IHsgYWRkUmVxdWVzdDogc2VsZi5hZ2VudC5hZGRSZXF1ZXN0Tm9yZXVzZS5iaW5kKHNlbGYuYWdlbnQpIH1cbiAgICBzZWxmLnN0YXJ0KClcbiAgICBzZWxmLnJlcS5lbmQoKVxuICAgIHJldHVyblxuICB9XG4gIGlmIChzZWxmLnRpbWVvdXQgJiYgc2VsZi50aW1lb3V0VGltZXIpIHtcbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0VGltZXIpXG4gICAgc2VsZi50aW1lb3V0VGltZXIgPSBudWxsXG4gIH1cbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycm9yKVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5vblJlcXVlc3RSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBpZiAoc2VsZi50aW1pbmcpIHtcbiAgICBzZWxmLnRpbWluZ3MucmVzcG9uc2UgPSBub3coKSAtIHNlbGYuc3RhcnRUaW1lTm93XG4gIH1cblxuICBkZWJ1Zygnb25SZXF1ZXN0UmVzcG9uc2UnLCBzZWxmLnVyaS5ocmVmLCByZXNwb25zZS5zdGF0dXNDb2RlLCByZXNwb25zZS5oZWFkZXJzKVxuICByZXNwb25zZS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChzZWxmLnRpbWluZykge1xuICAgICAgc2VsZi50aW1pbmdzLmVuZCA9IG5vdygpIC0gc2VsZi5zdGFydFRpbWVOb3dcbiAgICAgIHJlc3BvbnNlLnRpbWluZ1N0YXJ0ID0gc2VsZi5zdGFydFRpbWVcblxuICAgICAgLy8gZmlsbCBpbiB0aGUgYmxhbmtzIGZvciBhbnkgcGVyaW9kcyB0aGF0IGRpZG4ndCB0cmlnZ2VyLCBzdWNoIGFzXG4gICAgICAvLyBubyBsb29rdXAgb3IgY29ubmVjdCBkdWUgdG8ga2VlcCBhbGl2ZVxuICAgICAgaWYgKCFzZWxmLnRpbWluZ3Muc29ja2V0KSB7XG4gICAgICAgIHNlbGYudGltaW5ncy5zb2NrZXQgPSAwXG4gICAgICB9XG4gICAgICBpZiAoIXNlbGYudGltaW5ncy5sb29rdXApIHtcbiAgICAgICAgc2VsZi50aW1pbmdzLmxvb2t1cCA9IHNlbGYudGltaW5ncy5zb2NrZXRcbiAgICAgIH1cbiAgICAgIGlmICghc2VsZi50aW1pbmdzLmNvbm5lY3QpIHtcbiAgICAgICAgc2VsZi50aW1pbmdzLmNvbm5lY3QgPSBzZWxmLnRpbWluZ3MubG9va3VwXG4gICAgICB9XG4gICAgICBpZiAoIXNlbGYudGltaW5ncy5yZXNwb25zZSkge1xuICAgICAgICBzZWxmLnRpbWluZ3MucmVzcG9uc2UgPSBzZWxmLnRpbWluZ3MuY29ubmVjdFxuICAgICAgfVxuXG4gICAgICBkZWJ1ZygnZWxhcHNlZCB0aW1lJywgc2VsZi50aW1pbmdzLmVuZClcblxuICAgICAgLy8gZWxhcHNlZFRpbWUgaW5jbHVkZXMgYWxsIHJlZGlyZWN0c1xuICAgICAgc2VsZi5lbGFwc2VkVGltZSArPSBNYXRoLnJvdW5kKHNlbGYudGltaW5ncy5lbmQpXG5cbiAgICAgIC8vIE5PVEU6IGVsYXBzZWRUaW1lIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgLnRpbWluZ3NcbiAgICAgIHJlc3BvbnNlLmVsYXBzZWRUaW1lID0gc2VsZi5lbGFwc2VkVGltZVxuXG4gICAgICAvLyB0aW1pbmdzIGlzIGp1c3QgZm9yIHRoZSBmaW5hbCBmZXRjaFxuICAgICAgcmVzcG9uc2UudGltaW5ncyA9IHNlbGYudGltaW5nc1xuXG4gICAgICAvLyBwcmUtY2FsY3VsYXRlIHBoYXNlIHRpbWluZ3MgYXMgd2VsbFxuICAgICAgcmVzcG9uc2UudGltaW5nUGhhc2VzID0ge1xuICAgICAgICB3YWl0OiBzZWxmLnRpbWluZ3Muc29ja2V0LFxuICAgICAgICBkbnM6IHNlbGYudGltaW5ncy5sb29rdXAgLSBzZWxmLnRpbWluZ3Muc29ja2V0LFxuICAgICAgICB0Y3A6IHNlbGYudGltaW5ncy5jb25uZWN0IC0gc2VsZi50aW1pbmdzLmxvb2t1cCxcbiAgICAgICAgZmlyc3RCeXRlOiBzZWxmLnRpbWluZ3MucmVzcG9uc2UgLSBzZWxmLnRpbWluZ3MuY29ubmVjdCxcbiAgICAgICAgZG93bmxvYWQ6IHNlbGYudGltaW5ncy5lbmQgLSBzZWxmLnRpbWluZ3MucmVzcG9uc2UsXG4gICAgICAgIHRvdGFsOiBzZWxmLnRpbWluZ3MuZW5kXG4gICAgICB9XG4gICAgfVxuICAgIGRlYnVnKCdyZXNwb25zZSBlbmQnLCBzZWxmLnVyaS5ocmVmLCByZXNwb25zZS5zdGF0dXNDb2RlLCByZXNwb25zZS5oZWFkZXJzKVxuICB9KVxuXG4gIGlmIChzZWxmLl9hYm9ydGVkKSB7XG4gICAgZGVidWcoJ2Fib3J0ZWQnLCBzZWxmLnVyaS5ocmVmKVxuICAgIHJlc3BvbnNlLnJlc3VtZSgpXG4gICAgcmV0dXJuXG4gIH1cblxuICBzZWxmLnJlc3BvbnNlID0gcmVzcG9uc2VcbiAgcmVzcG9uc2UucmVxdWVzdCA9IHNlbGZcbiAgcmVzcG9uc2UudG9KU09OID0gcmVzcG9uc2VUb0pTT05cblxuICAvLyBYWFggVGhpcyBpcyBkaWZmZXJlbnQgb24gMC4xMCwgYmVjYXVzZSBTU0wgaXMgc3RyaWN0IGJ5IGRlZmF1bHRcbiAgaWYgKHNlbGYuaHR0cE1vZHVsZSA9PT0gaHR0cHMgJiZcbiAgICBzZWxmLnN0cmljdFNTTCAmJiAoIXJlc3BvbnNlLmhhc093blByb3BlcnR5KCdzb2NrZXQnKSB8fFxuICAgICFyZXNwb25zZS5zb2NrZXQuYXV0aG9yaXplZCkpIHtcbiAgICBkZWJ1Zygnc3RyaWN0IHNzbCBlcnJvcicsIHNlbGYudXJpLmhyZWYpXG4gICAgdmFyIHNzbEVyciA9IHJlc3BvbnNlLmhhc093blByb3BlcnR5KCdzb2NrZXQnKSA/IHJlc3BvbnNlLnNvY2tldC5hdXRob3JpemF0aW9uRXJyb3IgOiBzZWxmLnVyaS5ocmVmICsgJyBkb2VzIG5vdCBzdXBwb3J0IFNTTCdcbiAgICBzZWxmLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdTU0wgRXJyb3I6ICcgKyBzc2xFcnIpKVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gU2F2ZSB0aGUgb3JpZ2luYWwgaG9zdCBiZWZvcmUgYW55IHJlZGlyZWN0IChpZiBpdCBjaGFuZ2VzLCB3ZSBuZWVkIHRvXG4gIC8vIHJlbW92ZSBhbnkgYXV0aG9yaXphdGlvbiBoZWFkZXJzKS4gIEFsc28gcmVtZW1iZXIgdGhlIGNhc2Ugb2YgdGhlIGhlYWRlclxuICAvLyBuYW1lIGJlY2F1c2UgbG90cyBvZiBicm9rZW4gc2VydmVycyBleHBlY3QgSG9zdCBpbnN0ZWFkIG9mIGhvc3QgYW5kIHdlXG4gIC8vIHdhbnQgdGhlIGNhbGxlciB0byBiZSBhYmxlIHRvIHNwZWNpZnkgdGhpcy5cbiAgc2VsZi5vcmlnaW5hbEhvc3QgPSBzZWxmLmdldEhlYWRlcignaG9zdCcpXG4gIGlmICghc2VsZi5vcmlnaW5hbEhvc3RIZWFkZXJOYW1lKSB7XG4gICAgc2VsZi5vcmlnaW5hbEhvc3RIZWFkZXJOYW1lID0gc2VsZi5oYXNIZWFkZXIoJ2hvc3QnKVxuICB9XG4gIGlmIChzZWxmLnNldEhvc3QpIHtcbiAgICBzZWxmLnJlbW92ZUhlYWRlcignaG9zdCcpXG4gIH1cbiAgaWYgKHNlbGYudGltZW91dCAmJiBzZWxmLnRpbWVvdXRUaW1lcikge1xuICAgIGNsZWFyVGltZW91dChzZWxmLnRpbWVvdXRUaW1lcilcbiAgICBzZWxmLnRpbWVvdXRUaW1lciA9IG51bGxcbiAgfVxuXG4gIHZhciB0YXJnZXRDb29raWVKYXIgPSAoc2VsZi5famFyICYmIHNlbGYuX2phci5zZXRDb29raWUpID8gc2VsZi5famFyIDogZ2xvYmFsQ29va2llSmFyXG4gIHZhciBhZGRDb29raWUgPSBmdW5jdGlvbiAoY29va2llKSB7XG4gICAgLy8gc2V0IHRoZSBjb29raWUgaWYgaXQncyBkb21haW4gaW4gdGhlIGhyZWYncyBkb21haW4uXG4gICAgdHJ5IHtcbiAgICAgIHRhcmdldENvb2tpZUphci5zZXRDb29raWUoY29va2llLCBzZWxmLnVyaS5ocmVmLCB7aWdub3JlRXJyb3I6IHRydWV9KVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlKVxuICAgIH1cbiAgfVxuXG4gIHJlc3BvbnNlLmNhc2VsZXNzID0gY2FzZWxlc3MocmVzcG9uc2UuaGVhZGVycylcblxuICBpZiAocmVzcG9uc2UuY2FzZWxlc3MuaGFzKCdzZXQtY29va2llJykgJiYgKCFzZWxmLl9kaXNhYmxlQ29va2llcykpIHtcbiAgICB2YXIgaGVhZGVyTmFtZSA9IHJlc3BvbnNlLmNhc2VsZXNzLmhhcygnc2V0LWNvb2tpZScpXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzcG9uc2UuaGVhZGVyc1toZWFkZXJOYW1lXSkpIHtcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnNbaGVhZGVyTmFtZV0uZm9yRWFjaChhZGRDb29raWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZENvb2tpZShyZXNwb25zZS5oZWFkZXJzW2hlYWRlck5hbWVdKVxuICAgIH1cbiAgfVxuXG4gIGlmIChzZWxmLl9yZWRpcmVjdC5vblJlc3BvbnNlKHJlc3BvbnNlKSkge1xuICAgIHJldHVybiAvLyBJZ25vcmUgdGhlIHJlc3Qgb2YgdGhlIHJlc3BvbnNlXG4gIH0gZWxzZSB7XG4gICAgLy8gQmUgYSBnb29kIHN0cmVhbSBhbmQgZW1pdCBlbmQgd2hlbiB0aGUgcmVzcG9uc2UgaXMgZmluaXNoZWQuXG4gICAgLy8gSGFjayB0byBlbWl0IGVuZCBvbiBjbG9zZSBiZWNhdXNlIG9mIGEgY29yZSBidWcgdGhhdCBuZXZlciBmaXJlcyBlbmRcbiAgICByZXNwb25zZS5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXNlbGYuX2VuZGVkKSB7XG4gICAgICAgIHNlbGYucmVzcG9uc2UuZW1pdCgnZW5kJylcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmVzcG9uc2Uub25jZSgnZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5fZW5kZWQgPSB0cnVlXG4gICAgfSlcblxuICAgIHZhciBub0JvZHkgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgc2VsZi5tZXRob2QgPT09ICdIRUFEJyB8fFxuICAgICAgICAvLyBJbmZvcm1hdGlvbmFsXG4gICAgICAgIChjb2RlID49IDEwMCAmJiBjb2RlIDwgMjAwKSB8fFxuICAgICAgICAvLyBObyBDb250ZW50XG4gICAgICAgIGNvZGUgPT09IDIwNCB8fFxuICAgICAgICAvLyBOb3QgTW9kaWZpZWRcbiAgICAgICAgY29kZSA9PT0gMzA0XG4gICAgICApXG4gICAgfVxuXG4gICAgdmFyIHJlc3BvbnNlQ29udGVudFxuICAgIGlmIChzZWxmLmd6aXAgJiYgIW5vQm9keShyZXNwb25zZS5zdGF0dXNDb2RlKSkge1xuICAgICAgdmFyIGNvbnRlbnRFbmNvZGluZyA9IHJlc3BvbnNlLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSB8fCAnaWRlbnRpdHknXG4gICAgICBjb250ZW50RW5jb2RpbmcgPSBjb250ZW50RW5jb2RpbmcudHJpbSgpLnRvTG93ZXJDYXNlKClcblxuICAgICAgLy8gQmUgbW9yZSBsZW5pZW50IHdpdGggZGVjb2RpbmcgY29tcHJlc3NlZCByZXNwb25zZXMsIHNpbmNlICh2ZXJ5IHJhcmVseSlcbiAgICAgIC8vIHNlcnZlcnMgc2VuZCBzbGlnaHRseSBpbnZhbGlkIGd6aXAgcmVzcG9uc2VzIHRoYXQgYXJlIHN0aWxsIGFjY2VwdGVkXG4gICAgICAvLyBieSBjb21tb24gYnJvd3NlcnMuXG4gICAgICAvLyBBbHdheXMgdXNpbmcgWl9TWU5DX0ZMVVNIIGlzIHdoYXQgY1VSTCBkb2VzLlxuICAgICAgdmFyIHpsaWJPcHRpb25zID0ge1xuICAgICAgICBmbHVzaDogemxpYi5aX1NZTkNfRkxVU0gsXG4gICAgICAgIGZpbmlzaEZsdXNoOiB6bGliLlpfU1lOQ19GTFVTSFxuICAgICAgfVxuXG4gICAgICBpZiAoY29udGVudEVuY29kaW5nID09PSAnZ3ppcCcpIHtcbiAgICAgICAgcmVzcG9uc2VDb250ZW50ID0gemxpYi5jcmVhdGVHdW56aXAoemxpYk9wdGlvbnMpXG4gICAgICAgIHJlc3BvbnNlLnBpcGUocmVzcG9uc2VDb250ZW50KVxuICAgICAgfSBlbHNlIGlmIChjb250ZW50RW5jb2RpbmcgPT09ICdkZWZsYXRlJykge1xuICAgICAgICByZXNwb25zZUNvbnRlbnQgPSB6bGliLmNyZWF0ZUluZmxhdGUoemxpYk9wdGlvbnMpXG4gICAgICAgIHJlc3BvbnNlLnBpcGUocmVzcG9uc2VDb250ZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2luY2UgcHJldmlvdXMgdmVyc2lvbnMgZGlkbid0IGNoZWNrIGZvciBDb250ZW50LUVuY29kaW5nIGhlYWRlcixcbiAgICAgICAgLy8gaWdub3JlIGFueSBpbnZhbGlkIHZhbHVlcyB0byBwcmVzZXJ2ZSBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eVxuICAgICAgICBpZiAoY29udGVudEVuY29kaW5nICE9PSAnaWRlbnRpdHknKSB7XG4gICAgICAgICAgZGVidWcoJ2lnbm9yaW5nIHVucmVjb2duaXplZCBDb250ZW50LUVuY29kaW5nICcgKyBjb250ZW50RW5jb2RpbmcpXG4gICAgICAgIH1cbiAgICAgICAgcmVzcG9uc2VDb250ZW50ID0gcmVzcG9uc2VcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2VDb250ZW50ID0gcmVzcG9uc2VcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5lbmNvZGluZykge1xuICAgICAgaWYgKHNlbGYuZGVzdHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0lnbm9yaW5nIGVuY29kaW5nIHBhcmFtZXRlciBhcyB0aGlzIHN0cmVhbSBpcyBiZWluZyBwaXBlZCB0byBhbm90aGVyIHN0cmVhbSB3aGljaCBtYWtlcyB0aGUgZW5jb2Rpbmcgb3B0aW9uIGludmFsaWQuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3BvbnNlQ29udGVudC5zZXRFbmNvZGluZyhzZWxmLmVuY29kaW5nKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzZWxmLl9wYXVzZWQpIHtcbiAgICAgIHJlc3BvbnNlQ29udGVudC5wYXVzZSgpXG4gICAgfVxuXG4gICAgc2VsZi5yZXNwb25zZUNvbnRlbnQgPSByZXNwb25zZUNvbnRlbnRcblxuICAgIHNlbGYuZW1pdCgncmVzcG9uc2UnLCByZXNwb25zZSlcblxuICAgIHNlbGYuZGVzdHMuZm9yRWFjaChmdW5jdGlvbiAoZGVzdCkge1xuICAgICAgc2VsZi5waXBlRGVzdChkZXN0KVxuICAgIH0pXG5cbiAgICByZXNwb25zZUNvbnRlbnQub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgIGlmIChzZWxmLnRpbWluZyAmJiAhc2VsZi5yZXNwb25zZVN0YXJ0ZWQpIHtcbiAgICAgICAgc2VsZi5yZXNwb25zZVN0YXJ0VGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKClcblxuICAgICAgICAvLyBOT1RFOiByZXNwb25zZVN0YXJ0VGltZSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIC50aW1pbmdzXG4gICAgICAgIHJlc3BvbnNlLnJlc3BvbnNlU3RhcnRUaW1lID0gc2VsZi5yZXNwb25zZVN0YXJ0VGltZVxuICAgICAgfVxuICAgICAgc2VsZi5fZGVzdGRhdGEgPSB0cnVlXG4gICAgICBzZWxmLmVtaXQoJ2RhdGEnLCBjaHVuaylcbiAgICB9KVxuICAgIHJlc3BvbnNlQ29udGVudC5vbmNlKCdlbmQnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgIHNlbGYuZW1pdCgnZW5kJywgY2h1bmspXG4gICAgfSlcbiAgICByZXNwb25zZUNvbnRlbnQub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyb3IpXG4gICAgfSlcbiAgICByZXNwb25zZUNvbnRlbnQub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkgeyBzZWxmLmVtaXQoJ2Nsb3NlJykgfSlcblxuICAgIGlmIChzZWxmLmNhbGxiYWNrKSB7XG4gICAgICBzZWxmLnJlYWRSZXNwb25zZUJvZHkocmVzcG9uc2UpXG4gICAgfSBlbHNlIHsgLy8gaWYgbm8gY2FsbGJhY2tcbiAgICAgIHNlbGYub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNlbGYuX2Fib3J0ZWQpIHtcbiAgICAgICAgICBkZWJ1ZygnYWJvcnRlZCcsIHNlbGYudXJpLmhyZWYpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5lbWl0KCdjb21wbGV0ZScsIHJlc3BvbnNlKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbiAgZGVidWcoJ2ZpbmlzaCBpbml0IGZ1bmN0aW9uJywgc2VsZi51cmkuaHJlZilcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUucmVhZFJlc3BvbnNlQm9keSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgZGVidWcoXCJyZWFkaW5nIHJlc3BvbnNlJ3MgYm9keVwiKVxuICB2YXIgYnVmZmVycyA9IFtdXG4gIHZhciBidWZmZXJMZW5ndGggPSAwXG4gIHZhciBzdHJpbmdzID0gW11cblxuICBzZWxmLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgICBzdHJpbmdzLnB1c2goY2h1bmspXG4gICAgfSBlbHNlIGlmIChjaHVuay5sZW5ndGgpIHtcbiAgICAgIGJ1ZmZlckxlbmd0aCArPSBjaHVuay5sZW5ndGhcbiAgICAgIGJ1ZmZlcnMucHVzaChjaHVuaylcbiAgICB9XG4gIH0pXG4gIHNlbGYub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1ZygnZW5kIGV2ZW50Jywgc2VsZi51cmkuaHJlZilcbiAgICBpZiAoc2VsZi5fYWJvcnRlZCkge1xuICAgICAgZGVidWcoJ2Fib3J0ZWQnLCBzZWxmLnVyaS5ocmVmKVxuICAgICAgLy8gYGJ1ZmZlcmAgaXMgZGVmaW5lZCBpbiB0aGUgcGFyZW50IHNjb3BlIGFuZCB1c2VkIGluIGEgY2xvc3VyZSBpdCBleGlzdHMgZm9yIHRoZSBsaWZlIG9mIHRoZSByZXF1ZXN0LlxuICAgICAgLy8gVGhpcyBjYW4gbGVhZCB0byBsZWFreSBiZWhhdmlvciBpZiB0aGUgdXNlciByZXRhaW5zIGEgcmVmZXJlbmNlIHRvIHRoZSByZXF1ZXN0IG9iamVjdC5cbiAgICAgIGJ1ZmZlcnMgPSBbXVxuICAgICAgYnVmZmVyTGVuZ3RoID0gMFxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlckxlbmd0aCkge1xuICAgICAgZGVidWcoJ2hhcyBib2R5Jywgc2VsZi51cmkuaHJlZiwgYnVmZmVyTGVuZ3RoKVxuICAgICAgcmVzcG9uc2UuYm9keSA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycywgYnVmZmVyTGVuZ3RoKVxuICAgICAgaWYgKHNlbGYuZW5jb2RpbmcgIT09IG51bGwpIHtcbiAgICAgICAgcmVzcG9uc2UuYm9keSA9IHJlc3BvbnNlLmJvZHkudG9TdHJpbmcoc2VsZi5lbmNvZGluZylcbiAgICAgIH1cbiAgICAgIC8vIGBidWZmZXJgIGlzIGRlZmluZWQgaW4gdGhlIHBhcmVudCBzY29wZSBhbmQgdXNlZCBpbiBhIGNsb3N1cmUgaXQgZXhpc3RzIGZvciB0aGUgbGlmZSBvZiB0aGUgUmVxdWVzdC5cbiAgICAgIC8vIFRoaXMgY2FuIGxlYWQgdG8gbGVha3kgYmVoYXZpb3IgaWYgdGhlIHVzZXIgcmV0YWlucyBhIHJlZmVyZW5jZSB0byB0aGUgcmVxdWVzdCBvYmplY3QuXG4gICAgICBidWZmZXJzID0gW11cbiAgICAgIGJ1ZmZlckxlbmd0aCA9IDBcbiAgICB9IGVsc2UgaWYgKHN0cmluZ3MubGVuZ3RoKSB7XG4gICAgICAvLyBUaGUgVVRGOCBCT00gWzB4RUYsMHhCQiwweEJGXSBpcyBjb252ZXJ0ZWQgdG8gWzB4RkUsMHhGRl0gaW4gdGhlIEpTIFVUQzE2L1VDUzIgcmVwcmVzZW50YXRpb24uXG4gICAgICAvLyBTdHJpcCB0aGlzIHZhbHVlIG91dCB3aGVuIHRoZSBlbmNvZGluZyBpcyBzZXQgdG8gJ3V0ZjgnLCBhcyB1cHN0cmVhbSBjb25zdW1lcnMgd29uJ3QgZXhwZWN0IGl0IGFuZCBpdCBicmVha3MgSlNPTi5wYXJzZSgpLlxuICAgICAgaWYgKHNlbGYuZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBzdHJpbmdzWzBdLmxlbmd0aCA+IDAgJiYgc3RyaW5nc1swXVswXSA9PT0gJ1xcdUZFRkYnKSB7XG4gICAgICAgIHN0cmluZ3NbMF0gPSBzdHJpbmdzWzBdLnN1YnN0cmluZygxKVxuICAgICAgfVxuICAgICAgcmVzcG9uc2UuYm9keSA9IHN0cmluZ3Muam9pbignJylcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fanNvbikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzcG9uc2UuYm9keSA9IEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSwgc2VsZi5fanNvblJldml2ZXIpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGRlYnVnKCdpbnZhbGlkIEpTT04gcmVjZWl2ZWQnLCBzZWxmLnVyaS5ocmVmKVxuICAgICAgfVxuICAgIH1cbiAgICBkZWJ1ZygnZW1pdHRpbmcgY29tcGxldGUnLCBzZWxmLnVyaS5ocmVmKVxuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuYm9keSA9PT0gJ3VuZGVmaW5lZCcgJiYgIXNlbGYuX2pzb24pIHtcbiAgICAgIHJlc3BvbnNlLmJvZHkgPSBzZWxmLmVuY29kaW5nID09PSBudWxsID8gQnVmZmVyLmFsbG9jKDApIDogJydcbiAgICB9XG4gICAgc2VsZi5lbWl0KCdjb21wbGV0ZScsIHJlc3BvbnNlLCByZXNwb25zZS5ib2R5KVxuICB9KVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHNlbGYuX2Fib3J0ZWQgPSB0cnVlXG5cbiAgaWYgKHNlbGYucmVxKSB7XG4gICAgc2VsZi5yZXEuYWJvcnQoKVxuICB9IGVsc2UgaWYgKHNlbGYucmVzcG9uc2UpIHtcbiAgICBzZWxmLnJlc3BvbnNlLmRlc3Ryb3koKVxuICB9XG5cbiAgc2VsZi5lbWl0KCdhYm9ydCcpXG59XG5cblJlcXVlc3QucHJvdG90eXBlLnBpcGVEZXN0ID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciByZXNwb25zZSA9IHNlbGYucmVzcG9uc2VcbiAgLy8gQ2FsbGVkIGFmdGVyIHRoZSByZXNwb25zZSBpcyByZWNlaXZlZFxuICBpZiAoZGVzdC5oZWFkZXJzICYmICFkZXN0LmhlYWRlcnNTZW50KSB7XG4gICAgaWYgKHJlc3BvbnNlLmNhc2VsZXNzLmhhcygnY29udGVudC10eXBlJykpIHtcbiAgICAgIHZhciBjdG5hbWUgPSByZXNwb25zZS5jYXNlbGVzcy5oYXMoJ2NvbnRlbnQtdHlwZScpXG4gICAgICBpZiAoZGVzdC5zZXRIZWFkZXIpIHtcbiAgICAgICAgZGVzdC5zZXRIZWFkZXIoY3RuYW1lLCByZXNwb25zZS5oZWFkZXJzW2N0bmFtZV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXN0LmhlYWRlcnNbY3RuYW1lXSA9IHJlc3BvbnNlLmhlYWRlcnNbY3RuYW1lXVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXNwb25zZS5jYXNlbGVzcy5oYXMoJ2NvbnRlbnQtbGVuZ3RoJykpIHtcbiAgICAgIHZhciBjbG5hbWUgPSByZXNwb25zZS5jYXNlbGVzcy5oYXMoJ2NvbnRlbnQtbGVuZ3RoJylcbiAgICAgIGlmIChkZXN0LnNldEhlYWRlcikge1xuICAgICAgICBkZXN0LnNldEhlYWRlcihjbG5hbWUsIHJlc3BvbnNlLmhlYWRlcnNbY2xuYW1lXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlc3QuaGVhZGVyc1tjbG5hbWVdID0gcmVzcG9uc2UuaGVhZGVyc1tjbG5hbWVdXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkZXN0LnNldEhlYWRlciAmJiAhZGVzdC5oZWFkZXJzU2VudCkge1xuICAgIGZvciAodmFyIGkgaW4gcmVzcG9uc2UuaGVhZGVycykge1xuICAgICAgLy8gSWYgdGhlIHJlc3BvbnNlIGNvbnRlbnQgaXMgYmVpbmcgZGVjb2RlZCwgdGhlIENvbnRlbnQtRW5jb2RpbmcgaGVhZGVyXG4gICAgICAvLyBvZiB0aGUgcmVzcG9uc2UgZG9lc24ndCByZXByZXNlbnQgdGhlIHBpcGVkIGNvbnRlbnQsIHNvIGRvbid0IHBhc3MgaXQuXG4gICAgICBpZiAoIXNlbGYuZ3ppcCB8fCBpICE9PSAnY29udGVudC1lbmNvZGluZycpIHtcbiAgICAgICAgZGVzdC5zZXRIZWFkZXIoaSwgcmVzcG9uc2UuaGVhZGVyc1tpXSlcbiAgICAgIH1cbiAgICB9XG4gICAgZGVzdC5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZVxuICB9XG4gIGlmIChzZWxmLnBpcGVmaWx0ZXIpIHtcbiAgICBzZWxmLnBpcGVmaWx0ZXIocmVzcG9uc2UsIGRlc3QpXG4gIH1cbn1cblxuUmVxdWVzdC5wcm90b3R5cGUucXMgPSBmdW5jdGlvbiAocSwgY2xvYmJlcikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGJhc2VcbiAgaWYgKCFjbG9iYmVyICYmIHNlbGYudXJpLnF1ZXJ5KSB7XG4gICAgYmFzZSA9IHNlbGYuX3FzLnBhcnNlKHNlbGYudXJpLnF1ZXJ5KVxuICB9IGVsc2Uge1xuICAgIGJhc2UgPSB7fVxuICB9XG5cbiAgZm9yICh2YXIgaSBpbiBxKSB7XG4gICAgYmFzZVtpXSA9IHFbaV1cbiAgfVxuXG4gIHZhciBxcyA9IHNlbGYuX3FzLnN0cmluZ2lmeShiYXNlKVxuXG4gIGlmIChxcyA9PT0gJycpIHtcbiAgICByZXR1cm4gc2VsZlxuICB9XG5cbiAgc2VsZi51cmkgPSB1cmwucGFyc2Uoc2VsZi51cmkuaHJlZi5zcGxpdCgnPycpWzBdICsgJz8nICsgcXMpXG4gIHNlbGYudXJsID0gc2VsZi51cmlcbiAgc2VsZi5wYXRoID0gc2VsZi51cmkucGF0aFxuXG4gIGlmIChzZWxmLnVyaS5ob3N0ID09PSAndW5peCcpIHtcbiAgICBzZWxmLmVuYWJsZVVuaXhTb2NrZXQoKVxuICB9XG5cbiAgcmV0dXJuIHNlbGZcbn1cblJlcXVlc3QucHJvdG90eXBlLmZvcm0gPSBmdW5jdGlvbiAoZm9ybSkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKGZvcm0pIHtcbiAgICBpZiAoIS9eYXBwbGljYXRpb25cXC94LXd3dy1mb3JtLXVybGVuY29kZWRcXGIvLnRlc3Qoc2VsZi5nZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScpKSkge1xuICAgICAgc2VsZi5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKVxuICAgIH1cbiAgICBzZWxmLmJvZHkgPSAodHlwZW9mIGZvcm0gPT09ICdzdHJpbmcnKVxuICAgICAgPyBzZWxmLl9xcy5yZmMzOTg2KGZvcm0udG9TdHJpbmcoJ3V0ZjgnKSlcbiAgICAgIDogc2VsZi5fcXMuc3RyaW5naWZ5KGZvcm0pLnRvU3RyaW5nKCd1dGY4JylcbiAgICByZXR1cm4gc2VsZlxuICB9XG4gIC8vIGNyZWF0ZSBmb3JtLWRhdGEgb2JqZWN0XG4gIHNlbGYuX2Zvcm0gPSBuZXcgRm9ybURhdGEoKVxuICBzZWxmLl9mb3JtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBlcnIubWVzc2FnZSA9ICdmb3JtLWRhdGE6ICcgKyBlcnIubWVzc2FnZVxuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG4gICAgc2VsZi5hYm9ydCgpXG4gIH0pXG4gIHJldHVybiBzZWxmLl9mb3JtXG59XG5SZXF1ZXN0LnByb3RvdHlwZS5tdWx0aXBhcnQgPSBmdW5jdGlvbiAobXVsdGlwYXJ0KSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHNlbGYuX211bHRpcGFydC5vblJlcXVlc3QobXVsdGlwYXJ0KVxuXG4gIGlmICghc2VsZi5fbXVsdGlwYXJ0LmNodW5rZWQpIHtcbiAgICBzZWxmLmJvZHkgPSBzZWxmLl9tdWx0aXBhcnQuYm9keVxuICB9XG5cbiAgcmV0dXJuIHNlbGZcbn1cblJlcXVlc3QucHJvdG90eXBlLmpzb24gPSBmdW5jdGlvbiAodmFsKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGlmICghc2VsZi5oYXNIZWFkZXIoJ2FjY2VwdCcpKSB7XG4gICAgc2VsZi5zZXRIZWFkZXIoJ2FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2VsZi5qc29uUmVwbGFjZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzZWxmLl9qc29uUmVwbGFjZXIgPSBzZWxmLmpzb25SZXBsYWNlclxuICB9XG5cbiAgc2VsZi5fanNvbiA9IHRydWVcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdib29sZWFuJykge1xuICAgIGlmIChzZWxmLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCEvXmFwcGxpY2F0aW9uXFwveC13d3ctZm9ybS11cmxlbmNvZGVkXFxiLy50ZXN0KHNlbGYuZ2V0SGVhZGVyKCdjb250ZW50LXR5cGUnKSkpIHtcbiAgICAgICAgc2VsZi5ib2R5ID0gc2FmZVN0cmluZ2lmeShzZWxmLmJvZHksIHNlbGYuX2pzb25SZXBsYWNlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuYm9keSA9IHNlbGYuX3FzLnJmYzM5ODYoc2VsZi5ib2R5KVxuICAgICAgfVxuICAgICAgaWYgKCFzZWxmLmhhc0hlYWRlcignY29udGVudC10eXBlJykpIHtcbiAgICAgICAgc2VsZi5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5ib2R5ID0gc2FmZVN0cmluZ2lmeSh2YWwsIHNlbGYuX2pzb25SZXBsYWNlcilcbiAgICBpZiAoIXNlbGYuaGFzSGVhZGVyKCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgc2VsZi5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHNlbGYuanNvblJldml2ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzZWxmLl9qc29uUmV2aXZlciA9IHNlbGYuanNvblJldml2ZXJcbiAgfVxuXG4gIHJldHVybiBzZWxmXG59XG5SZXF1ZXN0LnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSwgaGVhZGVycykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHJlc3VsdCwgcmUsIG1hdGNoXG4gIGlmICghaGVhZGVycykge1xuICAgIGhlYWRlcnMgPSBzZWxmLmhlYWRlcnNcbiAgfVxuICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5Lmxlbmd0aCAhPT0gbmFtZS5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICByZSA9IG5ldyBSZWdFeHAobmFtZSwgJ2knKVxuICAgIG1hdGNoID0ga2V5Lm1hdGNoKHJlKVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgcmVzdWx0ID0gaGVhZGVyc1trZXldXG4gICAgfVxuICB9KVxuICByZXR1cm4gcmVzdWx0XG59XG5SZXF1ZXN0LnByb3RvdHlwZS5lbmFibGVVbml4U29ja2V0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBHZXQgdGhlIHNvY2tldCAmIHJlcXVlc3QgcGF0aHMgZnJvbSB0aGUgVVJMXG4gIHZhciB1bml4UGFydHMgPSB0aGlzLnVyaS5wYXRoLnNwbGl0KCc6JylcbiAgdmFyIGhvc3QgPSB1bml4UGFydHNbMF1cbiAgdmFyIHBhdGggPSB1bml4UGFydHNbMV1cbiAgLy8gQXBwbHkgdW5peCBwcm9wZXJ0aWVzIHRvIHJlcXVlc3RcbiAgdGhpcy5zb2NrZXRQYXRoID0gaG9zdFxuICB0aGlzLnVyaS5wYXRobmFtZSA9IHBhdGhcbiAgdGhpcy51cmkucGF0aCA9IHBhdGhcbiAgdGhpcy51cmkuaG9zdCA9IGhvc3RcbiAgdGhpcy51cmkuaG9zdG5hbWUgPSBob3N0XG4gIHRoaXMudXJpLmlzVW5peCA9IHRydWVcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuYXV0aCA9IGZ1bmN0aW9uICh1c2VyLCBwYXNzLCBzZW5kSW1tZWRpYXRlbHksIGJlYXJlcikge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBzZWxmLl9hdXRoLm9uUmVxdWVzdCh1c2VyLCBwYXNzLCBzZW5kSW1tZWRpYXRlbHksIGJlYXJlcilcblxuICByZXR1cm4gc2VsZlxufVxuUmVxdWVzdC5wcm90b3R5cGUuYXdzID0gZnVuY3Rpb24gKG9wdHMsIG5vdykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBpZiAoIW5vdykge1xuICAgIHNlbGYuX2F3cyA9IG9wdHNcbiAgICByZXR1cm4gc2VsZlxuICB9XG5cbiAgaWYgKG9wdHMuc2lnbl92ZXJzaW9uID09PSA0IHx8IG9wdHMuc2lnbl92ZXJzaW9uID09PSAnNCcpIHtcbiAgICAvLyB1c2UgYXdzNFxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgaG9zdDogc2VsZi51cmkuaG9zdCxcbiAgICAgIHBhdGg6IHNlbGYudXJpLnBhdGgsXG4gICAgICBtZXRob2Q6IHNlbGYubWV0aG9kLFxuICAgICAgaGVhZGVyczogc2VsZi5oZWFkZXJzLFxuICAgICAgYm9keTogc2VsZi5ib2R5XG4gICAgfVxuICAgIGlmIChvcHRzLnNlcnZpY2UpIHtcbiAgICAgIG9wdGlvbnMuc2VydmljZSA9IG9wdHMuc2VydmljZVxuICAgIH1cbiAgICB2YXIgc2lnblJlcyA9IGF3czQuc2lnbihvcHRpb25zLCB7XG4gICAgICBhY2Nlc3NLZXlJZDogb3B0cy5rZXksXG4gICAgICBzZWNyZXRBY2Nlc3NLZXk6IG9wdHMuc2VjcmV0LFxuICAgICAgc2Vzc2lvblRva2VuOiBvcHRzLnNlc3Npb25cbiAgICB9KVxuICAgIHNlbGYuc2V0SGVhZGVyKCdhdXRob3JpemF0aW9uJywgc2lnblJlcy5oZWFkZXJzLkF1dGhvcml6YXRpb24pXG4gICAgc2VsZi5zZXRIZWFkZXIoJ3gtYW16LWRhdGUnLCBzaWduUmVzLmhlYWRlcnNbJ1gtQW16LURhdGUnXSlcbiAgICBpZiAoc2lnblJlcy5oZWFkZXJzWydYLUFtei1TZWN1cml0eS1Ub2tlbiddKSB7XG4gICAgICBzZWxmLnNldEhlYWRlcigneC1hbXotc2VjdXJpdHktdG9rZW4nLCBzaWduUmVzLmhlYWRlcnNbJ1gtQW16LVNlY3VyaXR5LVRva2VuJ10pXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRlZmF1bHQ6IHVzZSBhd3Mtc2lnbjJcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKClcbiAgICBzZWxmLnNldEhlYWRlcignZGF0ZScsIGRhdGUudG9VVENTdHJpbmcoKSlcbiAgICB2YXIgYXV0aCA9IHtcbiAgICAgIGtleTogb3B0cy5rZXksXG4gICAgICBzZWNyZXQ6IG9wdHMuc2VjcmV0LFxuICAgICAgdmVyYjogc2VsZi5tZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGRhdGU6IGRhdGUsXG4gICAgICBjb250ZW50VHlwZTogc2VsZi5nZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScpIHx8ICcnLFxuICAgICAgbWQ1OiBzZWxmLmdldEhlYWRlcignY29udGVudC1tZDUnKSB8fCAnJyxcbiAgICAgIGFtYXpvbkhlYWRlcnM6IGF3czIuY2Fub25pY2FsaXplSGVhZGVycyhzZWxmLmhlYWRlcnMpXG4gICAgfVxuICAgIHZhciBwYXRoID0gc2VsZi51cmkucGF0aFxuICAgIGlmIChvcHRzLmJ1Y2tldCAmJiBwYXRoKSB7XG4gICAgICBhdXRoLnJlc291cmNlID0gJy8nICsgb3B0cy5idWNrZXQgKyBwYXRoXG4gICAgfSBlbHNlIGlmIChvcHRzLmJ1Y2tldCAmJiAhcGF0aCkge1xuICAgICAgYXV0aC5yZXNvdXJjZSA9ICcvJyArIG9wdHMuYnVja2V0XG4gICAgfSBlbHNlIGlmICghb3B0cy5idWNrZXQgJiYgcGF0aCkge1xuICAgICAgYXV0aC5yZXNvdXJjZSA9IHBhdGhcbiAgICB9IGVsc2UgaWYgKCFvcHRzLmJ1Y2tldCAmJiAhcGF0aCkge1xuICAgICAgYXV0aC5yZXNvdXJjZSA9ICcvJ1xuICAgIH1cbiAgICBhdXRoLnJlc291cmNlID0gYXdzMi5jYW5vbmljYWxpemVSZXNvdXJjZShhdXRoLnJlc291cmNlKVxuICAgIHNlbGYuc2V0SGVhZGVyKCdhdXRob3JpemF0aW9uJywgYXdzMi5hdXRob3JpemF0aW9uKGF1dGgpKVxuICB9XG5cbiAgcmV0dXJuIHNlbGZcbn1cblJlcXVlc3QucHJvdG90eXBlLmh0dHBTaWduYXR1cmUgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaHR0cFNpZ25hdHVyZS5zaWduUmVxdWVzdCh7XG4gICAgZ2V0SGVhZGVyOiBmdW5jdGlvbiAoaGVhZGVyKSB7XG4gICAgICByZXR1cm4gc2VsZi5nZXRIZWFkZXIoaGVhZGVyLCBzZWxmLmhlYWRlcnMpXG4gICAgfSxcbiAgICBzZXRIZWFkZXI6IGZ1bmN0aW9uIChoZWFkZXIsIHZhbHVlKSB7XG4gICAgICBzZWxmLnNldEhlYWRlcihoZWFkZXIsIHZhbHVlKVxuICAgIH0sXG4gICAgbWV0aG9kOiBzZWxmLm1ldGhvZCxcbiAgICBwYXRoOiBzZWxmLnBhdGhcbiAgfSwgb3B0cylcbiAgZGVidWcoJ2h0dHBTaWduYXR1cmUgYXV0aG9yaXphdGlvbicsIHNlbGYuZ2V0SGVhZGVyKCdhdXRob3JpemF0aW9uJykpXG5cbiAgcmV0dXJuIHNlbGZcbn1cblJlcXVlc3QucHJvdG90eXBlLmhhd2sgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgc2VsZi5zZXRIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCBoYXdrLmhlYWRlcihzZWxmLnVyaSwgc2VsZi5tZXRob2QsIG9wdHMpKVxufVxuUmVxdWVzdC5wcm90b3R5cGUub2F1dGggPSBmdW5jdGlvbiAoX29hdXRoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHNlbGYuX29hdXRoLm9uUmVxdWVzdChfb2F1dGgpXG5cbiAgcmV0dXJuIHNlbGZcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuamFyID0gZnVuY3Rpb24gKGphcikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGNvb2tpZXNcblxuICBpZiAoc2VsZi5fcmVkaXJlY3QucmVkaXJlY3RzRm9sbG93ZWQgPT09IDApIHtcbiAgICBzZWxmLm9yaWdpbmFsQ29va2llSGVhZGVyID0gc2VsZi5nZXRIZWFkZXIoJ2Nvb2tpZScpXG4gIH1cblxuICBpZiAoIWphcikge1xuICAgIC8vIGRpc2FibGUgY29va2llc1xuICAgIGNvb2tpZXMgPSBmYWxzZVxuICAgIHNlbGYuX2Rpc2FibGVDb29raWVzID0gdHJ1ZVxuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXRDb29raWVKYXIgPSAoamFyICYmIGphci5nZXRDb29raWVTdHJpbmcpID8gamFyIDogZ2xvYmFsQ29va2llSmFyXG4gICAgdmFyIHVyaWhyZWYgPSBzZWxmLnVyaS5ocmVmXG4gICAgLy8gZmV0Y2ggY29va2llIGluIHRoZSBTcGVjaWZpZWQgaG9zdFxuICAgIGlmICh0YXJnZXRDb29raWVKYXIpIHtcbiAgICAgIGNvb2tpZXMgPSB0YXJnZXRDb29raWVKYXIuZ2V0Q29va2llU3RyaW5nKHVyaWhyZWYpXG4gICAgfVxuICB9XG5cbiAgLy8gaWYgbmVlZCBjb29raWUgYW5kIGNvb2tpZSBpcyBub3QgZW1wdHlcbiAgaWYgKGNvb2tpZXMgJiYgY29va2llcy5sZW5ndGgpIHtcbiAgICBpZiAoc2VsZi5vcmlnaW5hbENvb2tpZUhlYWRlcikge1xuICAgICAgLy8gRG9uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIENvb2tpZSBoZWFkZXJcbiAgICAgIHNlbGYuc2V0SGVhZGVyKCdjb29raWUnLCBzZWxmLm9yaWdpbmFsQ29va2llSGVhZGVyICsgJzsgJyArIGNvb2tpZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuc2V0SGVhZGVyKCdjb29raWUnLCBjb29raWVzKVxuICAgIH1cbiAgfVxuICBzZWxmLl9qYXIgPSBqYXJcbiAgcmV0dXJuIHNlbGZcbn1cblxuLy8gU3RyZWFtIEFQSVxuUmVxdWVzdC5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBvcHRzKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGlmIChzZWxmLnJlc3BvbnNlKSB7XG4gICAgaWYgKHNlbGYuX2Rlc3RkYXRhKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdZb3UgY2Fubm90IHBpcGUgYWZ0ZXIgZGF0YSBoYXMgYmVlbiBlbWl0dGVkIGZyb20gdGhlIHJlc3BvbnNlLicpKVxuICAgIH0gZWxzZSBpZiAoc2VsZi5fZW5kZWQpIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1lvdSBjYW5ub3QgcGlwZSBhZnRlciB0aGUgcmVzcG9uc2UgaGFzIGJlZW4gZW5kZWQuJykpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbS5TdHJlYW0ucHJvdG90eXBlLnBpcGUuY2FsbChzZWxmLCBkZXN0LCBvcHRzKVxuICAgICAgc2VsZi5waXBlRGVzdChkZXN0KVxuICAgICAgcmV0dXJuIGRlc3RcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5kZXN0cy5wdXNoKGRlc3QpXG4gICAgc3RyZWFtLlN0cmVhbS5wcm90b3R5cGUucGlwZS5jYWxsKHNlbGYsIGRlc3QsIG9wdHMpXG4gICAgcmV0dXJuIGRlc3RcbiAgfVxufVxuUmVxdWVzdC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoc2VsZi5fYWJvcnRlZCkgeyByZXR1cm4gfVxuXG4gIGlmICghc2VsZi5fc3RhcnRlZCkge1xuICAgIHNlbGYuc3RhcnQoKVxuICB9XG4gIGlmIChzZWxmLnJlcSkge1xuICAgIHJldHVybiBzZWxmLnJlcS53cml0ZS5hcHBseShzZWxmLnJlcSwgYXJndW1lbnRzKVxuICB9XG59XG5SZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLl9hYm9ydGVkKSB7IHJldHVybiB9XG5cbiAgaWYgKGNodW5rKSB7XG4gICAgc2VsZi53cml0ZShjaHVuaylcbiAgfVxuICBpZiAoIXNlbGYuX3N0YXJ0ZWQpIHtcbiAgICBzZWxmLnN0YXJ0KClcbiAgfVxuICBpZiAoc2VsZi5yZXEpIHtcbiAgICBzZWxmLnJlcS5lbmQoKVxuICB9XG59XG5SZXF1ZXN0LnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICghc2VsZi5yZXNwb25zZUNvbnRlbnQpIHtcbiAgICBzZWxmLl9wYXVzZWQgPSB0cnVlXG4gIH0gZWxzZSB7XG4gICAgc2VsZi5yZXNwb25zZUNvbnRlbnQucGF1c2UuYXBwbHkoc2VsZi5yZXNwb25zZUNvbnRlbnQsIGFyZ3VtZW50cylcbiAgfVxufVxuUmVxdWVzdC5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKCFzZWxmLnJlc3BvbnNlQ29udGVudCkge1xuICAgIHNlbGYuX3BhdXNlZCA9IGZhbHNlXG4gIH0gZWxzZSB7XG4gICAgc2VsZi5yZXNwb25zZUNvbnRlbnQucmVzdW1lLmFwcGx5KHNlbGYucmVzcG9uc2VDb250ZW50LCBhcmd1bWVudHMpXG4gIH1cbn1cblJlcXVlc3QucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoIXNlbGYuX2VuZGVkKSB7XG4gICAgc2VsZi5lbmQoKVxuICB9IGVsc2UgaWYgKHNlbGYucmVzcG9uc2UpIHtcbiAgICBzZWxmLnJlc3BvbnNlLmRlc3Ryb3koKVxuICB9XG59XG5cblJlcXVlc3QuZGVmYXVsdFByb3h5SGVhZGVyV2hpdGVMaXN0ID1cbiAgVHVubmVsLmRlZmF1bHRQcm94eUhlYWRlcldoaXRlTGlzdC5zbGljZSgpXG5cblJlcXVlc3QuZGVmYXVsdFByb3h5SGVhZGVyRXhjbHVzaXZlTGlzdCA9XG4gIFR1bm5lbC5kZWZhdWx0UHJveHlIZWFkZXJFeGNsdXNpdmVMaXN0LnNsaWNlKClcblxuLy8gRXhwb3J0c1xuXG5SZXF1ZXN0LnByb3RvdHlwZS50b0pTT04gPSByZXF1ZXN0VG9KU09OXG5tb2R1bGUuZXhwb3J0cyA9IFJlcXVlc3RcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInpsaWJcIik7IiwiXG4vKiFcbiAqICBDb3B5cmlnaHQgMjAxMCBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJylcbiAgLCBwYXJzZSA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlXG4gIDtcblxuLyoqXG4gKiBWYWxpZCBrZXlzLlxuICovXG5cbnZhciBrZXlzID0gXG4gIFsgJ2FjbCdcbiAgLCAnbG9jYXRpb24nXG4gICwgJ2xvZ2dpbmcnXG4gICwgJ25vdGlmaWNhdGlvbidcbiAgLCAncGFydE51bWJlcidcbiAgLCAncG9saWN5J1xuICAsICdyZXF1ZXN0UGF5bWVudCdcbiAgLCAndG9ycmVudCdcbiAgLCAndXBsb2FkSWQnXG4gICwgJ3VwbG9hZHMnXG4gICwgJ3ZlcnNpb25JZCdcbiAgLCAndmVyc2lvbmluZydcbiAgLCAndmVyc2lvbnMnXG4gICwgJ3dlYnNpdGUnXG4gIF1cblxuLyoqXG4gKiBSZXR1cm4gYW4gXCJBdXRob3JpemF0aW9uXCIgaGVhZGVyIHZhbHVlIHdpdGggdGhlIGdpdmVuIGBvcHRpb25zYFxuICogaW4gdGhlIGZvcm0gb2YgXCJBV1MgPGtleT46PHNpZ25hdHVyZT5cIlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBhdXRob3JpemF0aW9uIChvcHRpb25zKSB7XG4gIHJldHVybiAnQVdTICcgKyBvcHRpb25zLmtleSArICc6JyArIHNpZ24ob3B0aW9ucylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhdXRob3JpemF0aW9uXG5tb2R1bGUuZXhwb3J0cy5hdXRob3JpemF0aW9uID0gYXV0aG9yaXphdGlvblxuXG4vKipcbiAqIFNpbXBsZSBITUFDLVNIQTEgV3JhcHBlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqLyBcblxuZnVuY3Rpb24gaG1hY1NoYTEgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIbWFjKCdzaGExJywgb3B0aW9ucy5zZWNyZXQpLnVwZGF0ZShvcHRpb25zLm1lc3NhZ2UpLmRpZ2VzdCgnYmFzZTY0Jylcbn1cblxubW9kdWxlLmV4cG9ydHMuaG1hY1NoYTEgPSBobWFjU2hhMVxuXG4vKipcbiAqIENyZWF0ZSBhIGJhc2U2NCBzaGExIEhNQUMgZm9yIGBvcHRpb25zYC4gXG4gKiBcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzaWduIChvcHRpb25zKSB7XG4gIG9wdGlvbnMubWVzc2FnZSA9IHN0cmluZ1RvU2lnbihvcHRpb25zKVxuICByZXR1cm4gaG1hY1NoYTEob3B0aW9ucylcbn1cbm1vZHVsZS5leHBvcnRzLnNpZ24gPSBzaWduXG5cbi8qKlxuICogQ3JlYXRlIGEgYmFzZTY0IHNoYTEgSE1BQyBmb3IgYG9wdGlvbnNgLiBcbiAqXG4gKiBTcGVjaWZpY2FsbHkgdG8gYmUgdXNlZCB3aXRoIFMzIHByZXNpZ25lZCBVUkxzXG4gKiBcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzaWduUXVlcnkgKG9wdGlvbnMpIHtcbiAgb3B0aW9ucy5tZXNzYWdlID0gcXVlcnlTdHJpbmdUb1NpZ24ob3B0aW9ucylcbiAgcmV0dXJuIGhtYWNTaGExKG9wdGlvbnMpXG59XG5tb2R1bGUuZXhwb3J0cy5zaWduUXVlcnk9IHNpZ25RdWVyeVxuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyBmb3Igc2lnbigpIHdpdGggdGhlIGdpdmVuIGBvcHRpb25zYC5cbiAqXG4gKiBTcGVjOlxuICogXG4gKiAgICA8dmVyYj5cXG5cbiAqICAgIDxtZDU+XFxuXG4gKiAgICA8Y29udGVudC10eXBlPlxcblxuICogICAgPGRhdGU+XFxuXG4gKiAgICBbaGVhZGVyc1xcbl1cbiAqICAgIDxyZXNvdXJjZT5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3RyaW5nVG9TaWduIChvcHRpb25zKSB7XG4gIHZhciBoZWFkZXJzID0gb3B0aW9ucy5hbWF6b25IZWFkZXJzIHx8ICcnXG4gIGlmIChoZWFkZXJzKSBoZWFkZXJzICs9ICdcXG4nXG4gIHZhciByID0gXG4gICAgWyBvcHRpb25zLnZlcmJcbiAgICAsIG9wdGlvbnMubWQ1XG4gICAgLCBvcHRpb25zLmNvbnRlbnRUeXBlXG4gICAgLCBvcHRpb25zLmRhdGUgPyBvcHRpb25zLmRhdGUudG9VVENTdHJpbmcoKSA6ICcnXG4gICAgLCBoZWFkZXJzICsgb3B0aW9ucy5yZXNvdXJjZVxuICAgIF1cbiAgcmV0dXJuIHIuam9pbignXFxuJylcbn1cbm1vZHVsZS5leHBvcnRzLnN0cmluZ1RvU2lnbiA9IHN0cmluZ1RvU2lnblxuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyBmb3Igc2lnbigpIHdpdGggdGhlIGdpdmVuIGBvcHRpb25zYCwgYnV0IGlzIG1lYW50IGV4Y2x1c2l2ZWx5XG4gKiBmb3IgUzMgcHJlc2lnbmVkIFVSTHNcbiAqXG4gKiBTcGVjOlxuICogXG4gKiAgICA8ZGF0ZT5cXG5cbiAqICAgIDxyZXNvdXJjZT5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcXVlcnlTdHJpbmdUb1NpZ24gKG9wdGlvbnMpe1xuICByZXR1cm4gJ0dFVFxcblxcblxcbicgKyBvcHRpb25zLmRhdGUgKyAnXFxuJyArIG9wdGlvbnMucmVzb3VyY2Vcbn1cbm1vZHVsZS5leHBvcnRzLnF1ZXJ5U3RyaW5nVG9TaWduID0gcXVlcnlTdHJpbmdUb1NpZ25cblxuLyoqXG4gKiBQZXJmb3JtIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogIC0gaWdub3JlIG5vbi1hbWF6b24gaGVhZGVyc1xuICogIC0gbG93ZXJjYXNlIGZpZWxkc1xuICogIC0gc29ydCBsZXhpY29ncmFwaGljYWxseVxuICogIC0gdHJpbSB3aGl0ZXNwYWNlIGJldHdlZW4gXCI6XCJcbiAqICAtIGpvaW4gd2l0aCBuZXdsaW5lXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNhbm9uaWNhbGl6ZUhlYWRlcnMgKGhlYWRlcnMpIHtcbiAgdmFyIGJ1ZiA9IFtdXG4gICAgLCBmaWVsZHMgPSBPYmplY3Qua2V5cyhoZWFkZXJzKVxuICAgIDtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZpZWxkcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciBmaWVsZCA9IGZpZWxkc1tpXVxuICAgICAgLCB2YWwgPSBoZWFkZXJzW2ZpZWxkXVxuICAgICAgLCBmaWVsZCA9IGZpZWxkLnRvTG93ZXJDYXNlKClcbiAgICAgIDtcbiAgICBpZiAoMCAhPT0gZmllbGQuaW5kZXhPZigneC1hbXonKSkgY29udGludWVcbiAgICBidWYucHVzaChmaWVsZCArICc6JyArIHZhbClcbiAgfVxuICByZXR1cm4gYnVmLnNvcnQoKS5qb2luKCdcXG4nKVxufVxubW9kdWxlLmV4cG9ydHMuY2Fub25pY2FsaXplSGVhZGVycyA9IGNhbm9uaWNhbGl6ZUhlYWRlcnNcblxuLyoqXG4gKiBQZXJmb3JtIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogIC0gaWdub3JlIG5vbiBzdWItcmVzb3VyY2VzXG4gKiAgLSBzb3J0IGxleGljb2dyYXBoaWNhbGx5XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlc291cmNlXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjYW5vbmljYWxpemVSZXNvdXJjZSAocmVzb3VyY2UpIHtcbiAgdmFyIHVybCA9IHBhcnNlKHJlc291cmNlLCB0cnVlKVxuICAgICwgcGF0aCA9IHVybC5wYXRobmFtZVxuICAgICwgYnVmID0gW11cbiAgICA7XG5cbiAgT2JqZWN0LmtleXModXJsLnF1ZXJ5KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7XG4gICAgaWYgKCF+a2V5cy5pbmRleE9mKGtleSkpIHJldHVyblxuICAgIHZhciB2YWwgPSAnJyA9PSB1cmwucXVlcnlba2V5XSA/ICcnIDogJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybC5xdWVyeVtrZXldKVxuICAgIGJ1Zi5wdXNoKGtleSArIHZhbClcbiAgfSlcblxuICByZXR1cm4gcGF0aCArIChidWYubGVuZ3RoID8gJz8nICsgYnVmLnNvcnQoKS5qb2luKCcmJykgOiAnJylcbn1cbm1vZHVsZS5leHBvcnRzLmNhbm9uaWNhbGl6ZVJlc291cmNlID0gY2Fub25pY2FsaXplUmVzb3VyY2VcbiIsInZhciBhd3M0ID0gZXhwb3J0cyxcbiAgICB1cmwgPSByZXF1aXJlKCd1cmwnKSxcbiAgICBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyksXG4gICAgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyksXG4gICAgbHJ1ID0gcmVxdWlyZSgnLi9scnUnKSxcbiAgICBjcmVkZW50aWFsc0NhY2hlID0gbHJ1KDEwMDApXG5cbi8vIGh0dHA6Ly9kb2NzLmFtYXpvbndlYnNlcnZpY2VzLmNvbS9nZW5lcmFsL2xhdGVzdC9nci9zaWduYXR1cmUtdmVyc2lvbi00Lmh0bWxcblxuZnVuY3Rpb24gaG1hYyhrZXksIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIbWFjKCdzaGEyNTYnLCBrZXkpLnVwZGF0ZShzdHJpbmcsICd1dGY4JykuZGlnZXN0KGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBoYXNoKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoc3RyaW5nLCAndXRmOCcpLmRpZ2VzdChlbmNvZGluZylcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoZSBzdHJpbmcgaGFzIGFscmVhZHkgYmVlbiBwZXJjZW50IGVuY29kZWRcbmZ1bmN0aW9uIGVuY29kZVJmYzM5ODYodXJsRW5jb2RlZFN0cmluZykge1xuICByZXR1cm4gdXJsRW5jb2RlZFN0cmluZy5yZXBsYWNlKC9bIScoKSpdL2csIGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8vIHJlcXVlc3Q6IHsgcGF0aCB8IGJvZHksIFtob3N0XSwgW21ldGhvZF0sIFtoZWFkZXJzXSwgW3NlcnZpY2VdLCBbcmVnaW9uXSB9XG4vLyBjcmVkZW50aWFsczogeyBhY2Nlc3NLZXlJZCwgc2VjcmV0QWNjZXNzS2V5LCBbc2Vzc2lvblRva2VuXSB9XG5mdW5jdGlvbiBSZXF1ZXN0U2lnbmVyKHJlcXVlc3QsIGNyZWRlbnRpYWxzKSB7XG5cbiAgaWYgKHR5cGVvZiByZXF1ZXN0ID09PSAnc3RyaW5nJykgcmVxdWVzdCA9IHVybC5wYXJzZShyZXF1ZXN0KVxuXG4gIHZhciBoZWFkZXJzID0gcmVxdWVzdC5oZWFkZXJzID0gKHJlcXVlc3QuaGVhZGVycyB8fCB7fSksXG4gICAgICBob3N0UGFydHMgPSB0aGlzLm1hdGNoSG9zdChyZXF1ZXN0Lmhvc3RuYW1lIHx8IHJlcXVlc3QuaG9zdCB8fCBoZWFkZXJzLkhvc3QgfHwgaGVhZGVycy5ob3N0KVxuXG4gIHRoaXMucmVxdWVzdCA9IHJlcXVlc3RcbiAgdGhpcy5jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzIHx8IHRoaXMuZGVmYXVsdENyZWRlbnRpYWxzKClcblxuICB0aGlzLnNlcnZpY2UgPSByZXF1ZXN0LnNlcnZpY2UgfHwgaG9zdFBhcnRzWzBdIHx8ICcnXG4gIHRoaXMucmVnaW9uID0gcmVxdWVzdC5yZWdpb24gfHwgaG9zdFBhcnRzWzFdIHx8ICd1cy1lYXN0LTEnXG5cbiAgLy8gU0VTIHVzZXMgYSBkaWZmZXJlbnQgZG9tYWluIGZyb20gdGhlIHNlcnZpY2UgbmFtZVxuICBpZiAodGhpcy5zZXJ2aWNlID09PSAnZW1haWwnKSB0aGlzLnNlcnZpY2UgPSAnc2VzJ1xuXG4gIGlmICghcmVxdWVzdC5tZXRob2QgJiYgcmVxdWVzdC5ib2R5KVxuICAgIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnXG5cbiAgaWYgKCFoZWFkZXJzLkhvc3QgJiYgIWhlYWRlcnMuaG9zdCkge1xuICAgIGhlYWRlcnMuSG9zdCA9IHJlcXVlc3QuaG9zdG5hbWUgfHwgcmVxdWVzdC5ob3N0IHx8IHRoaXMuY3JlYXRlSG9zdCgpXG5cbiAgICAvLyBJZiBhIHBvcnQgaXMgc3BlY2lmaWVkIGV4cGxpY2l0bHksIHVzZSBpdCBhcyBpc1xuICAgIGlmIChyZXF1ZXN0LnBvcnQpXG4gICAgICBoZWFkZXJzLkhvc3QgKz0gJzonICsgcmVxdWVzdC5wb3J0XG4gIH1cbiAgaWYgKCFyZXF1ZXN0Lmhvc3RuYW1lICYmICFyZXF1ZXN0Lmhvc3QpXG4gICAgcmVxdWVzdC5ob3N0bmFtZSA9IGhlYWRlcnMuSG9zdCB8fCBoZWFkZXJzLmhvc3RcblxuICB0aGlzLmlzQ29kZUNvbW1pdEdpdCA9IHRoaXMuc2VydmljZSA9PT0gJ2NvZGVjb21taXQnICYmIHJlcXVlc3QubWV0aG9kID09PSAnR0lUJ1xufVxuXG5SZXF1ZXN0U2lnbmVyLnByb3RvdHlwZS5tYXRjaEhvc3QgPSBmdW5jdGlvbihob3N0KSB7XG4gIHZhciBtYXRjaCA9IChob3N0IHx8ICcnKS5tYXRjaCgvKFteXFwuXSspXFwuKD86KFteXFwuXSopXFwuKT9hbWF6b25hd3NcXC5jb20oXFwuY24pPyQvKVxuICB2YXIgaG9zdFBhcnRzID0gKG1hdGNoIHx8IFtdKS5zbGljZSgxLCAzKVxuXG4gIC8vIEVTJ3MgaG9zdFBhcnRzIGFyZSBzb21ldGltZXMgdGhlIG90aGVyIHdheSByb3VuZCwgaWYgdGhlIHZhbHVlIHRoYXQgaXMgZXhwZWN0ZWRcbiAgLy8gdG8gYmUgcmVnaW9uIGVxdWFscyDigJhlc+KAmSBzd2l0Y2ggdGhlbSBiYWNrXG4gIC8vIGUuZy4gc2VhcmNoLWNsdXN0ZXItbmFtZS1hYWFhMDBhYWFhMGFhYTBhYWFhYWFhMGFhYS51cy1lYXN0LTEuZXMuYW1hem9uYXdzLmNvbVxuICBpZiAoaG9zdFBhcnRzWzFdID09PSAnZXMnKVxuICAgIGhvc3RQYXJ0cyA9IGhvc3RQYXJ0cy5yZXZlcnNlKClcblxuICByZXR1cm4gaG9zdFBhcnRzXG59XG5cbi8vIGh0dHA6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dlbmVyYWwvbGF0ZXN0L2dyL3JhbmRlLmh0bWxcblJlcXVlc3RTaWduZXIucHJvdG90eXBlLmlzU2luZ2xlUmVnaW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIFNwZWNpYWwgY2FzZSBmb3IgUzMgYW5kIFNpbXBsZURCIGluIHVzLWVhc3QtMVxuICBpZiAoWydzMycsICdzZGInXS5pbmRleE9mKHRoaXMuc2VydmljZSkgPj0gMCAmJiB0aGlzLnJlZ2lvbiA9PT0gJ3VzLWVhc3QtMScpIHJldHVybiB0cnVlXG5cbiAgcmV0dXJuIFsnY2xvdWRmcm9udCcsICdscycsICdyb3V0ZTUzJywgJ2lhbScsICdpbXBvcnRleHBvcnQnLCAnc3RzJ11cbiAgICAuaW5kZXhPZih0aGlzLnNlcnZpY2UpID49IDBcbn1cblxuUmVxdWVzdFNpZ25lci5wcm90b3R5cGUuY3JlYXRlSG9zdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVnaW9uID0gdGhpcy5pc1NpbmdsZVJlZ2lvbigpID8gJycgOlxuICAgICAgICAodGhpcy5zZXJ2aWNlID09PSAnczMnICYmIHRoaXMucmVnaW9uICE9PSAndXMtZWFzdC0xJyA/ICctJyA6ICcuJykgKyB0aGlzLnJlZ2lvbixcbiAgICAgIHNlcnZpY2UgPSB0aGlzLnNlcnZpY2UgPT09ICdzZXMnID8gJ2VtYWlsJyA6IHRoaXMuc2VydmljZVxuICByZXR1cm4gc2VydmljZSArIHJlZ2lvbiArICcuYW1hem9uYXdzLmNvbSdcbn1cblxuUmVxdWVzdFNpZ25lci5wcm90b3R5cGUucHJlcGFyZVJlcXVlc3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYXJzZVBhdGgoKVxuXG4gIHZhciByZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0LCBoZWFkZXJzID0gcmVxdWVzdC5oZWFkZXJzLCBxdWVyeVxuXG4gIGlmIChyZXF1ZXN0LnNpZ25RdWVyeSkge1xuXG4gICAgdGhpcy5wYXJzZWRQYXRoLnF1ZXJ5ID0gcXVlcnkgPSB0aGlzLnBhcnNlZFBhdGgucXVlcnkgfHwge31cblxuICAgIGlmICh0aGlzLmNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbilcbiAgICAgIHF1ZXJ5WydYLUFtei1TZWN1cml0eS1Ub2tlbiddID0gdGhpcy5jcmVkZW50aWFscy5zZXNzaW9uVG9rZW5cblxuICAgIGlmICh0aGlzLnNlcnZpY2UgPT09ICdzMycgJiYgIXF1ZXJ5WydYLUFtei1FeHBpcmVzJ10pXG4gICAgICBxdWVyeVsnWC1BbXotRXhwaXJlcyddID0gODY0MDBcblxuICAgIGlmIChxdWVyeVsnWC1BbXotRGF0ZSddKVxuICAgICAgdGhpcy5kYXRldGltZSA9IHF1ZXJ5WydYLUFtei1EYXRlJ11cbiAgICBlbHNlXG4gICAgICBxdWVyeVsnWC1BbXotRGF0ZSddID0gdGhpcy5nZXREYXRlVGltZSgpXG5cbiAgICBxdWVyeVsnWC1BbXotQWxnb3JpdGhtJ10gPSAnQVdTNC1ITUFDLVNIQTI1NidcbiAgICBxdWVyeVsnWC1BbXotQ3JlZGVudGlhbCddID0gdGhpcy5jcmVkZW50aWFscy5hY2Nlc3NLZXlJZCArICcvJyArIHRoaXMuY3JlZGVudGlhbFN0cmluZygpXG4gICAgcXVlcnlbJ1gtQW16LVNpZ25lZEhlYWRlcnMnXSA9IHRoaXMuc2lnbmVkSGVhZGVycygpXG5cbiAgfSBlbHNlIHtcblxuICAgIGlmICghcmVxdWVzdC5kb05vdE1vZGlmeUhlYWRlcnMgJiYgIXRoaXMuaXNDb2RlQ29tbWl0R2l0KSB7XG4gICAgICBpZiAocmVxdWVzdC5ib2R5ICYmICFoZWFkZXJzWydDb250ZW50LVR5cGUnXSAmJiAhaGVhZGVyc1snY29udGVudC10eXBlJ10pXG4gICAgICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCdcblxuICAgICAgaWYgKHJlcXVlc3QuYm9keSAmJiAhaGVhZGVyc1snQ29udGVudC1MZW5ndGgnXSAmJiAhaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSlcbiAgICAgICAgaGVhZGVyc1snQ29udGVudC1MZW5ndGgnXSA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHJlcXVlc3QuYm9keSlcblxuICAgICAgaWYgKHRoaXMuY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuICYmICFoZWFkZXJzWydYLUFtei1TZWN1cml0eS1Ub2tlbiddICYmICFoZWFkZXJzWyd4LWFtei1zZWN1cml0eS10b2tlbiddKVxuICAgICAgICBoZWFkZXJzWydYLUFtei1TZWN1cml0eS1Ub2tlbiddID0gdGhpcy5jcmVkZW50aWFscy5zZXNzaW9uVG9rZW5cblxuICAgICAgaWYgKHRoaXMuc2VydmljZSA9PT0gJ3MzJyAmJiAhaGVhZGVyc1snWC1BbXotQ29udGVudC1TaGEyNTYnXSAmJiAhaGVhZGVyc1sneC1hbXotY29udGVudC1zaGEyNTYnXSlcbiAgICAgICAgaGVhZGVyc1snWC1BbXotQ29udGVudC1TaGEyNTYnXSA9IGhhc2godGhpcy5yZXF1ZXN0LmJvZHkgfHwgJycsICdoZXgnKVxuXG4gICAgICBpZiAoaGVhZGVyc1snWC1BbXotRGF0ZSddIHx8IGhlYWRlcnNbJ3gtYW16LWRhdGUnXSlcbiAgICAgICAgdGhpcy5kYXRldGltZSA9IGhlYWRlcnNbJ1gtQW16LURhdGUnXSB8fCBoZWFkZXJzWyd4LWFtei1kYXRlJ11cbiAgICAgIGVsc2VcbiAgICAgICAgaGVhZGVyc1snWC1BbXotRGF0ZSddID0gdGhpcy5nZXREYXRlVGltZSgpXG4gICAgfVxuXG4gICAgZGVsZXRlIGhlYWRlcnMuQXV0aG9yaXphdGlvblxuICAgIGRlbGV0ZSBoZWFkZXJzLmF1dGhvcml6YXRpb25cbiAgfVxufVxuXG5SZXF1ZXN0U2lnbmVyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5wYXJzZWRQYXRoKSB0aGlzLnByZXBhcmVSZXF1ZXN0KClcblxuICBpZiAodGhpcy5yZXF1ZXN0LnNpZ25RdWVyeSkge1xuICAgIHRoaXMucGFyc2VkUGF0aC5xdWVyeVsnWC1BbXotU2lnbmF0dXJlJ10gPSB0aGlzLnNpZ25hdHVyZSgpXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZXF1ZXN0LmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IHRoaXMuYXV0aEhlYWRlcigpXG4gIH1cblxuICB0aGlzLnJlcXVlc3QucGF0aCA9IHRoaXMuZm9ybWF0UGF0aCgpXG5cbiAgcmV0dXJuIHRoaXMucmVxdWVzdFxufVxuXG5SZXF1ZXN0U2lnbmVyLnByb3RvdHlwZS5nZXREYXRlVGltZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuZGF0ZXRpbWUpIHtcbiAgICB2YXIgaGVhZGVycyA9IHRoaXMucmVxdWVzdC5oZWFkZXJzLFxuICAgICAgZGF0ZSA9IG5ldyBEYXRlKGhlYWRlcnMuRGF0ZSB8fCBoZWFkZXJzLmRhdGUgfHwgbmV3IERhdGUpXG5cbiAgICB0aGlzLmRhdGV0aW1lID0gZGF0ZS50b0lTT1N0cmluZygpLnJlcGxhY2UoL1s6XFwtXXxcXC5cXGR7M30vZywgJycpXG5cbiAgICAvLyBSZW1vdmUgdGhlIHRyYWlsaW5nICdaJyBvbiB0aGUgdGltZXN0YW1wIHN0cmluZyBmb3IgQ29kZUNvbW1pdCBnaXQgYWNjZXNzXG4gICAgaWYgKHRoaXMuaXNDb2RlQ29tbWl0R2l0KSB0aGlzLmRhdGV0aW1lID0gdGhpcy5kYXRldGltZS5zbGljZSgwLCAtMSlcbiAgfVxuICByZXR1cm4gdGhpcy5kYXRldGltZVxufVxuXG5SZXF1ZXN0U2lnbmVyLnByb3RvdHlwZS5nZXREYXRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmdldERhdGVUaW1lKCkuc3Vic3RyKDAsIDgpXG59XG5cblJlcXVlc3RTaWduZXIucHJvdG90eXBlLmF1dGhIZWFkZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFtcbiAgICAnQVdTNC1ITUFDLVNIQTI1NiBDcmVkZW50aWFsPScgKyB0aGlzLmNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkICsgJy8nICsgdGhpcy5jcmVkZW50aWFsU3RyaW5nKCksXG4gICAgJ1NpZ25lZEhlYWRlcnM9JyArIHRoaXMuc2lnbmVkSGVhZGVycygpLFxuICAgICdTaWduYXR1cmU9JyArIHRoaXMuc2lnbmF0dXJlKCksXG4gIF0uam9pbignLCAnKVxufVxuXG5SZXF1ZXN0U2lnbmVyLnByb3RvdHlwZS5zaWduYXR1cmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGRhdGUgPSB0aGlzLmdldERhdGUoKSxcbiAgICAgIGNhY2hlS2V5ID0gW3RoaXMuY3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5LCBkYXRlLCB0aGlzLnJlZ2lvbiwgdGhpcy5zZXJ2aWNlXS5qb2luKCksXG4gICAgICBrRGF0ZSwga1JlZ2lvbiwga1NlcnZpY2UsIGtDcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzQ2FjaGUuZ2V0KGNhY2hlS2V5KVxuICBpZiAoIWtDcmVkZW50aWFscykge1xuICAgIGtEYXRlID0gaG1hYygnQVdTNCcgKyB0aGlzLmNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSwgZGF0ZSlcbiAgICBrUmVnaW9uID0gaG1hYyhrRGF0ZSwgdGhpcy5yZWdpb24pXG4gICAga1NlcnZpY2UgPSBobWFjKGtSZWdpb24sIHRoaXMuc2VydmljZSlcbiAgICBrQ3JlZGVudGlhbHMgPSBobWFjKGtTZXJ2aWNlLCAnYXdzNF9yZXF1ZXN0JylcbiAgICBjcmVkZW50aWFsc0NhY2hlLnNldChjYWNoZUtleSwga0NyZWRlbnRpYWxzKVxuICB9XG4gIHJldHVybiBobWFjKGtDcmVkZW50aWFscywgdGhpcy5zdHJpbmdUb1NpZ24oKSwgJ2hleCcpXG59XG5cblJlcXVlc3RTaWduZXIucHJvdG90eXBlLnN0cmluZ1RvU2lnbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gW1xuICAgICdBV1M0LUhNQUMtU0hBMjU2JyxcbiAgICB0aGlzLmdldERhdGVUaW1lKCksXG4gICAgdGhpcy5jcmVkZW50aWFsU3RyaW5nKCksXG4gICAgaGFzaCh0aGlzLmNhbm9uaWNhbFN0cmluZygpLCAnaGV4JyksXG4gIF0uam9pbignXFxuJylcbn1cblxuUmVxdWVzdFNpZ25lci5wcm90b3R5cGUuY2Fub25pY2FsU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5wYXJzZWRQYXRoKSB0aGlzLnByZXBhcmVSZXF1ZXN0KClcblxuICB2YXIgcGF0aFN0ciA9IHRoaXMucGFyc2VkUGF0aC5wYXRoLFxuICAgICAgcXVlcnkgPSB0aGlzLnBhcnNlZFBhdGgucXVlcnksXG4gICAgICBoZWFkZXJzID0gdGhpcy5yZXF1ZXN0LmhlYWRlcnMsXG4gICAgICBxdWVyeVN0ciA9ICcnLFxuICAgICAgbm9ybWFsaXplUGF0aCA9IHRoaXMuc2VydmljZSAhPT0gJ3MzJyxcbiAgICAgIGRlY29kZVBhdGggPSB0aGlzLnNlcnZpY2UgPT09ICdzMycgfHwgdGhpcy5yZXF1ZXN0LmRvTm90RW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVNsYXNoZXNJblBhdGggPSB0aGlzLnNlcnZpY2UgPT09ICdzMycsXG4gICAgICBmaXJzdFZhbE9ubHkgPSB0aGlzLnNlcnZpY2UgPT09ICdzMycsXG4gICAgICBib2R5SGFzaFxuXG4gIGlmICh0aGlzLnNlcnZpY2UgPT09ICdzMycgJiYgdGhpcy5yZXF1ZXN0LnNpZ25RdWVyeSkge1xuICAgIGJvZHlIYXNoID0gJ1VOU0lHTkVELVBBWUxPQUQnXG4gIH0gZWxzZSBpZiAodGhpcy5pc0NvZGVDb21taXRHaXQpIHtcbiAgICBib2R5SGFzaCA9ICcnXG4gIH0gZWxzZSB7XG4gICAgYm9keUhhc2ggPSBoZWFkZXJzWydYLUFtei1Db250ZW50LVNoYTI1NiddIHx8IGhlYWRlcnNbJ3gtYW16LWNvbnRlbnQtc2hhMjU2J10gfHxcbiAgICAgIGhhc2godGhpcy5yZXF1ZXN0LmJvZHkgfHwgJycsICdoZXgnKVxuICB9XG5cbiAgaWYgKHF1ZXJ5KSB7XG4gICAgcXVlcnlTdHIgPSBlbmNvZGVSZmMzOTg2KHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShPYmplY3Qua2V5cyhxdWVyeSkuc29ydCgpLnJlZHVjZShmdW5jdGlvbihvYmosIGtleSkge1xuICAgICAgaWYgKCFrZXkpIHJldHVybiBvYmpcbiAgICAgIG9ialtrZXldID0gIUFycmF5LmlzQXJyYXkocXVlcnlba2V5XSkgPyBxdWVyeVtrZXldIDpcbiAgICAgICAgKGZpcnN0VmFsT25seSA/IHF1ZXJ5W2tleV1bMF0gOiBxdWVyeVtrZXldLnNsaWNlKCkuc29ydCgpKVxuICAgICAgcmV0dXJuIG9ialxuICAgIH0sIHt9KSkpXG4gIH1cbiAgaWYgKHBhdGhTdHIgIT09ICcvJykge1xuICAgIGlmIChub3JtYWxpemVQYXRoKSBwYXRoU3RyID0gcGF0aFN0ci5yZXBsYWNlKC9cXC97Mix9L2csICcvJylcbiAgICBwYXRoU3RyID0gcGF0aFN0ci5zcGxpdCgnLycpLnJlZHVjZShmdW5jdGlvbihwYXRoLCBwaWVjZSkge1xuICAgICAgaWYgKG5vcm1hbGl6ZVBhdGggJiYgcGllY2UgPT09ICcuLicpIHtcbiAgICAgICAgcGF0aC5wb3AoKVxuICAgICAgfSBlbHNlIGlmICghbm9ybWFsaXplUGF0aCB8fCBwaWVjZSAhPT0gJy4nKSB7XG4gICAgICAgIGlmIChkZWNvZGVQYXRoKSBwaWVjZSA9IGRlY29kZVVSSUNvbXBvbmVudChwaWVjZSlcbiAgICAgICAgcGF0aC5wdXNoKGVuY29kZVJmYzM5ODYoZW5jb2RlVVJJQ29tcG9uZW50KHBpZWNlKSkpXG4gICAgICB9XG4gICAgICByZXR1cm4gcGF0aFxuICAgIH0sIFtdKS5qb2luKCcvJylcbiAgICBpZiAocGF0aFN0clswXSAhPT0gJy8nKSBwYXRoU3RyID0gJy8nICsgcGF0aFN0clxuICAgIGlmIChkZWNvZGVTbGFzaGVzSW5QYXRoKSBwYXRoU3RyID0gcGF0aFN0ci5yZXBsYWNlKC8lMkYvZywgJy8nKVxuICB9XG5cbiAgcmV0dXJuIFtcbiAgICB0aGlzLnJlcXVlc3QubWV0aG9kIHx8ICdHRVQnLFxuICAgIHBhdGhTdHIsXG4gICAgcXVlcnlTdHIsXG4gICAgdGhpcy5jYW5vbmljYWxIZWFkZXJzKCkgKyAnXFxuJyxcbiAgICB0aGlzLnNpZ25lZEhlYWRlcnMoKSxcbiAgICBib2R5SGFzaCxcbiAgXS5qb2luKCdcXG4nKVxufVxuXG5SZXF1ZXN0U2lnbmVyLnByb3RvdHlwZS5jYW5vbmljYWxIZWFkZXJzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBoZWFkZXJzID0gdGhpcy5yZXF1ZXN0LmhlYWRlcnNcbiAgZnVuY3Rpb24gdHJpbUFsbChoZWFkZXIpIHtcbiAgICByZXR1cm4gaGVhZGVyLnRvU3RyaW5nKCkudHJpbSgpLnJlcGxhY2UoL1xccysvZywgJyAnKVxuICB9XG4gIHJldHVybiBPYmplY3Qua2V5cyhoZWFkZXJzKVxuICAgIC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEudG9Mb3dlckNhc2UoKSA8IGIudG9Mb3dlckNhc2UoKSA/IC0xIDogMSB9KVxuICAgIC5tYXAoZnVuY3Rpb24oa2V5KSB7IHJldHVybiBrZXkudG9Mb3dlckNhc2UoKSArICc6JyArIHRyaW1BbGwoaGVhZGVyc1trZXldKSB9KVxuICAgIC5qb2luKCdcXG4nKVxufVxuXG5SZXF1ZXN0U2lnbmVyLnByb3RvdHlwZS5zaWduZWRIZWFkZXJzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnJlcXVlc3QuaGVhZGVycylcbiAgICAubWFwKGZ1bmN0aW9uKGtleSkgeyByZXR1cm4ga2V5LnRvTG93ZXJDYXNlKCkgfSlcbiAgICAuc29ydCgpXG4gICAgLmpvaW4oJzsnKVxufVxuXG5SZXF1ZXN0U2lnbmVyLnByb3RvdHlwZS5jcmVkZW50aWFsU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBbXG4gICAgdGhpcy5nZXREYXRlKCksXG4gICAgdGhpcy5yZWdpb24sXG4gICAgdGhpcy5zZXJ2aWNlLFxuICAgICdhd3M0X3JlcXVlc3QnLFxuICBdLmpvaW4oJy8nKVxufVxuXG5SZXF1ZXN0U2lnbmVyLnByb3RvdHlwZS5kZWZhdWx0Q3JlZGVudGlhbHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGVudiA9IHByb2Nlc3MuZW52XG4gIHJldHVybiB7XG4gICAgYWNjZXNzS2V5SWQ6IGVudi5BV1NfQUNDRVNTX0tFWV9JRCB8fCBlbnYuQVdTX0FDQ0VTU19LRVksXG4gICAgc2VjcmV0QWNjZXNzS2V5OiBlbnYuQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZIHx8IGVudi5BV1NfU0VDUkVUX0tFWSxcbiAgICBzZXNzaW9uVG9rZW46IGVudi5BV1NfU0VTU0lPTl9UT0tFTixcbiAgfVxufVxuXG5SZXF1ZXN0U2lnbmVyLnByb3RvdHlwZS5wYXJzZVBhdGggPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGggPSB0aGlzLnJlcXVlc3QucGF0aCB8fCAnLycsXG4gICAgICBxdWVyeUl4ID0gcGF0aC5pbmRleE9mKCc/JyksXG4gICAgICBxdWVyeSA9IG51bGxcblxuICBpZiAocXVlcnlJeCA+PSAwKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZShwYXRoLnNsaWNlKHF1ZXJ5SXggKyAxKSlcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBxdWVyeUl4KVxuICB9XG5cbiAgLy8gUzMgZG9lc24ndCBhbHdheXMgZW5jb2RlIGNoYXJhY3RlcnMgPiAxMjcgY29ycmVjdGx5IGFuZFxuICAvLyBhbGwgc2VydmljZXMgZG9uJ3QgZW5jb2RlIGNoYXJhY3RlcnMgPiAyNTUgY29ycmVjdGx5XG4gIC8vIFNvIGlmIHRoZXJlIGFyZSBub24tcmVzZXJ2ZWQgY2hhcnMgKGFuZCBpdCdzIG5vdCBhbHJlYWR5IGFsbCAlIGVuY29kZWQpLCBqdXN0IGVuY29kZSB0aGVtIGFsbFxuICBpZiAoL1teMC05QS1aYS16IScoKSpcXC0uX34lL10vLnRlc3QocGF0aCkpIHtcbiAgICBwYXRoID0gcGF0aC5zcGxpdCgnLycpLm1hcChmdW5jdGlvbihwaWVjZSkge1xuICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQocGllY2UpKVxuICAgIH0pLmpvaW4oJy8nKVxuICB9XG5cbiAgdGhpcy5wYXJzZWRQYXRoID0ge1xuICAgIHBhdGg6IHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICB9XG59XG5cblJlcXVlc3RTaWduZXIucHJvdG90eXBlLmZvcm1hdFBhdGggPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGggPSB0aGlzLnBhcnNlZFBhdGgucGF0aCxcbiAgICAgIHF1ZXJ5ID0gdGhpcy5wYXJzZWRQYXRoLnF1ZXJ5XG5cbiAgaWYgKCFxdWVyeSkgcmV0dXJuIHBhdGhcblxuICAvLyBTZXJ2aWNlcyBkb24ndCBzdXBwb3J0IGVtcHR5IHF1ZXJ5IHN0cmluZyBrZXlzXG4gIGlmIChxdWVyeVsnJ10gIT0gbnVsbCkgZGVsZXRlIHF1ZXJ5WycnXVxuXG4gIHJldHVybiBwYXRoICsgJz8nICsgZW5jb2RlUmZjMzk4NihxdWVyeXN0cmluZy5zdHJpbmdpZnkocXVlcnkpKVxufVxuXG5hd3M0LlJlcXVlc3RTaWduZXIgPSBSZXF1ZXN0U2lnbmVyXG5cbmF3czQuc2lnbiA9IGZ1bmN0aW9uKHJlcXVlc3QsIGNyZWRlbnRpYWxzKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdFNpZ25lcihyZXF1ZXN0LCBjcmVkZW50aWFscykuc2lnbigpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgcmV0dXJuIG5ldyBMcnVDYWNoZShzaXplKVxufVxuXG5mdW5jdGlvbiBMcnVDYWNoZShzaXplKSB7XG4gIHRoaXMuY2FwYWNpdHkgPSBzaXplIHwgMFxuICB0aGlzLm1hcCA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgdGhpcy5saXN0ID0gbmV3IERvdWJseUxpbmtlZExpc3QoKVxufVxuXG5McnVDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5KSB7XG4gIHZhciBub2RlID0gdGhpcy5tYXBba2V5XVxuICBpZiAobm9kZSA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkXG4gIHRoaXMudXNlZChub2RlKVxuICByZXR1cm4gbm9kZS52YWxcbn1cblxuTHJ1Q2FjaGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGtleSwgdmFsKSB7XG4gIHZhciBub2RlID0gdGhpcy5tYXBba2V5XVxuICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgbm9kZS52YWwgPSB2YWxcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXRoaXMuY2FwYWNpdHkpIHRoaXMucHJ1bmUoKVxuICAgIGlmICghdGhpcy5jYXBhY2l0eSkgcmV0dXJuIGZhbHNlXG4gICAgbm9kZSA9IG5ldyBEb3VibHlMaW5rZWROb2RlKGtleSwgdmFsKVxuICAgIHRoaXMubWFwW2tleV0gPSBub2RlXG4gICAgdGhpcy5jYXBhY2l0eS0tXG4gIH1cbiAgdGhpcy51c2VkKG5vZGUpXG4gIHJldHVybiB0cnVlXG59XG5cbkxydUNhY2hlLnByb3RvdHlwZS51c2VkID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLmxpc3QubW92ZVRvRnJvbnQobm9kZSlcbn1cblxuTHJ1Q2FjaGUucHJvdG90eXBlLnBydW5lID0gZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlID0gdGhpcy5saXN0LnBvcCgpXG4gIGlmIChub2RlICE9IG51bGwpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbbm9kZS5rZXldXG4gICAgdGhpcy5jYXBhY2l0eSsrXG4gIH1cbn1cblxuXG5mdW5jdGlvbiBEb3VibHlMaW5rZWRMaXN0KCkge1xuICB0aGlzLmZpcnN0Tm9kZSA9IG51bGxcbiAgdGhpcy5sYXN0Tm9kZSA9IG51bGxcbn1cblxuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUubW92ZVRvRnJvbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICh0aGlzLmZpcnN0Tm9kZSA9PSBub2RlKSByZXR1cm5cblxuICB0aGlzLnJlbW92ZShub2RlKVxuXG4gIGlmICh0aGlzLmZpcnN0Tm9kZSA9PSBudWxsKSB7XG4gICAgdGhpcy5maXJzdE5vZGUgPSBub2RlXG4gICAgdGhpcy5sYXN0Tm9kZSA9IG5vZGVcbiAgICBub2RlLnByZXYgPSBudWxsXG4gICAgbm9kZS5uZXh0ID0gbnVsbFxuICB9IGVsc2Uge1xuICAgIG5vZGUucHJldiA9IG51bGxcbiAgICBub2RlLm5leHQgPSB0aGlzLmZpcnN0Tm9kZVxuICAgIG5vZGUubmV4dC5wcmV2ID0gbm9kZVxuICAgIHRoaXMuZmlyc3ROb2RlID0gbm9kZVxuICB9XG59XG5cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbGFzdE5vZGUgPSB0aGlzLmxhc3ROb2RlXG4gIGlmIChsYXN0Tm9kZSAhPSBudWxsKSB7XG4gICAgdGhpcy5yZW1vdmUobGFzdE5vZGUpXG4gIH1cbiAgcmV0dXJuIGxhc3ROb2RlXG59XG5cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKHRoaXMuZmlyc3ROb2RlID09IG5vZGUpIHtcbiAgICB0aGlzLmZpcnN0Tm9kZSA9IG5vZGUubmV4dFxuICB9IGVsc2UgaWYgKG5vZGUucHJldiAhPSBudWxsKSB7XG4gICAgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHRcbiAgfVxuICBpZiAodGhpcy5sYXN0Tm9kZSA9PSBub2RlKSB7XG4gICAgdGhpcy5sYXN0Tm9kZSA9IG5vZGUucHJldlxuICB9IGVsc2UgaWYgKG5vZGUubmV4dCAhPSBudWxsKSB7XG4gICAgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXZcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIERvdWJseUxpbmtlZE5vZGUoa2V5LCB2YWwpIHtcbiAgdGhpcy5rZXkgPSBrZXlcbiAgdGhpcy52YWwgPSB2YWxcbiAgdGhpcy5wcmV2ID0gbnVsbFxuICB0aGlzLm5leHQgPSBudWxsXG59XG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJyk7XG52YXIgc2lnbmVyID0gcmVxdWlyZSgnLi9zaWduZXInKTtcbnZhciB2ZXJpZnkgPSByZXF1aXJlKCcuL3ZlcmlmeScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5cblxuLy8vLS0tIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBwYXJzZTogcGFyc2VyLnBhcnNlUmVxdWVzdCxcbiAgcGFyc2VSZXF1ZXN0OiBwYXJzZXIucGFyc2VSZXF1ZXN0LFxuXG4gIHNpZ246IHNpZ25lci5zaWduUmVxdWVzdCxcbiAgc2lnblJlcXVlc3Q6IHNpZ25lci5zaWduUmVxdWVzdCxcbiAgY3JlYXRlU2lnbmVyOiBzaWduZXIuY3JlYXRlU2lnbmVyLFxuICBpc1NpZ25lcjogc2lnbmVyLmlzU2lnbmVyLFxuXG4gIHNzaEtleVRvUEVNOiB1dGlscy5zc2hLZXlUb1BFTSxcbiAgc3NoS2V5RmluZ2VycHJpbnQ6IHV0aWxzLmZpbmdlcnByaW50LFxuICBwZW1Ub1JzYVNTSEtleTogdXRpbHMucGVtVG9Sc2FTU0hLZXksXG5cbiAgdmVyaWZ5OiB2ZXJpZnkudmVyaWZ5U2lnbmF0dXJlLFxuICB2ZXJpZnlTaWduYXR1cmU6IHZlcmlmeS52ZXJpZnlTaWduYXR1cmUsXG4gIHZlcmlmeUhNQUM6IHZlcmlmeS52ZXJpZnlITUFDXG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTIgSm95ZW50LCBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5cblxuLy8vLS0tIEdsb2JhbHNcblxudmFyIEhBU0hfQUxHT1MgPSB1dGlscy5IQVNIX0FMR09TO1xudmFyIFBLX0FMR09TID0gdXRpbHMuUEtfQUxHT1M7XG52YXIgSHR0cFNpZ25hdHVyZUVycm9yID0gdXRpbHMuSHR0cFNpZ25hdHVyZUVycm9yO1xudmFyIEludmFsaWRBbGdvcml0aG1FcnJvciA9IHV0aWxzLkludmFsaWRBbGdvcml0aG1FcnJvcjtcbnZhciB2YWxpZGF0ZUFsZ29yaXRobSA9IHV0aWxzLnZhbGlkYXRlQWxnb3JpdGhtO1xuXG52YXIgU3RhdGUgPSB7XG4gIE5ldzogMCxcbiAgUGFyYW1zOiAxXG59O1xuXG52YXIgUGFyYW1zU3RhdGUgPSB7XG4gIE5hbWU6IDAsXG4gIFF1b3RlOiAxLFxuICBWYWx1ZTogMixcbiAgQ29tbWE6IDNcbn07XG5cblxuLy8vLS0tIFNwZWNpZmljIEVycm9yc1xuXG5cbmZ1bmN0aW9uIEV4cGlyZWRSZXF1ZXN0RXJyb3IobWVzc2FnZSkge1xuICBIdHRwU2lnbmF0dXJlRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlLCBFeHBpcmVkUmVxdWVzdEVycm9yKTtcbn1cbnV0aWwuaW5oZXJpdHMoRXhwaXJlZFJlcXVlc3RFcnJvciwgSHR0cFNpZ25hdHVyZUVycm9yKTtcblxuXG5mdW5jdGlvbiBJbnZhbGlkSGVhZGVyRXJyb3IobWVzc2FnZSkge1xuICBIdHRwU2lnbmF0dXJlRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlLCBJbnZhbGlkSGVhZGVyRXJyb3IpO1xufVxudXRpbC5pbmhlcml0cyhJbnZhbGlkSGVhZGVyRXJyb3IsIEh0dHBTaWduYXR1cmVFcnJvcik7XG5cblxuZnVuY3Rpb24gSW52YWxpZFBhcmFtc0Vycm9yKG1lc3NhZ2UpIHtcbiAgSHR0cFNpZ25hdHVyZUVycm9yLmNhbGwodGhpcywgbWVzc2FnZSwgSW52YWxpZFBhcmFtc0Vycm9yKTtcbn1cbnV0aWwuaW5oZXJpdHMoSW52YWxpZFBhcmFtc0Vycm9yLCBIdHRwU2lnbmF0dXJlRXJyb3IpO1xuXG5cbmZ1bmN0aW9uIE1pc3NpbmdIZWFkZXJFcnJvcihtZXNzYWdlKSB7XG4gIEh0dHBTaWduYXR1cmVFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UsIE1pc3NpbmdIZWFkZXJFcnJvcik7XG59XG51dGlsLmluaGVyaXRzKE1pc3NpbmdIZWFkZXJFcnJvciwgSHR0cFNpZ25hdHVyZUVycm9yKTtcblxuZnVuY3Rpb24gU3RyaWN0UGFyc2luZ0Vycm9yKG1lc3NhZ2UpIHtcbiAgSHR0cFNpZ25hdHVyZUVycm9yLmNhbGwodGhpcywgbWVzc2FnZSwgU3RyaWN0UGFyc2luZ0Vycm9yKTtcbn1cbnV0aWwuaW5oZXJpdHMoU3RyaWN0UGFyc2luZ0Vycm9yLCBIdHRwU2lnbmF0dXJlRXJyb3IpO1xuXG4vLy8tLS0gRXhwb3J0ZWQgQVBJXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlICdBdXRob3JpemF0aW9uJyBoZWFkZXIgb3V0IG9mIGFuIGh0dHAuU2VydmVyUmVxdWVzdCBvYmplY3QuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIEFQSSB3aWxsIGZ1bGx5IHZhbGlkYXRlIHRoZSBBdXRob3JpemF0aW9uIGhlYWRlciwgYW5kIHRocm93XG4gICAqIG9uIGFueSBlcnJvci4gIEl0IHdpbGwgbm90IGhvd2V2ZXIgY2hlY2sgdGhlIHNpZ25hdHVyZSwgb3IgdGhlIGtleUlkIGZvcm1hdFxuICAgKiBhcyB0aG9zZSBhcmUgc3BlY2lmaWMgdG8geW91ciBlbnZpcm9ubWVudC4gIFlvdSBjYW4gdXNlIHRoZSBvcHRpb25zIG9iamVjdFxuICAgKiB0byBwYXNzIGluIGV4dHJhIGNvbnN0cmFpbnRzLlxuICAgKlxuICAgKiBBcyBhIHJlc3BvbnNlIG9iamVjdCB5b3UgY2FuIGV4cGVjdCB0aGlzOlxuICAgKlxuICAgKiAgICAge1xuICAgKiAgICAgICBcInNjaGVtZVwiOiBcIlNpZ25hdHVyZVwiLFxuICAgKiAgICAgICBcInBhcmFtc1wiOiB7XG4gICAqICAgICAgICAgXCJrZXlJZFwiOiBcImZvb1wiLFxuICAgKiAgICAgICAgIFwiYWxnb3JpdGhtXCI6IFwicnNhLXNoYTI1NlwiLFxuICAgKiAgICAgICAgIFwiaGVhZGVyc1wiOiBbXG4gICAqICAgICAgICAgICBcImRhdGVcIiBvciBcIngtZGF0ZVwiLFxuICAgKiAgICAgICAgICAgXCJkaWdlc3RcIlxuICAgKiAgICAgICAgIF0sXG4gICAqICAgICAgICAgXCJzaWduYXR1cmVcIjogXCJiYXNlNjRcIlxuICAgKiAgICAgICB9LFxuICAgKiAgICAgICBcInNpZ25pbmdTdHJpbmdcIjogXCJyZWFkeSB0byBiZSBwYXNzZWQgdG8gY3J5cHRvLnZlcmlmeSgpXCJcbiAgICogICAgIH1cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlcXVlc3QgYW4gaHR0cC5TZXJ2ZXJSZXF1ZXN0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBhbiBvcHRpb25hbCBvcHRpb25zIG9iamVjdCB3aXRoOlxuICAgKiAgICAgICAgICAgICAgICAgICAtIGNsb2NrU2tldzogYWxsb3dlZCBjbG9jayBza2V3IGluIHNlY29uZHMgKGRlZmF1bHQgMzAwKS5cbiAgICogICAgICAgICAgICAgICAgICAgLSBoZWFkZXJzOiByZXF1aXJlZCBoZWFkZXIgbmFtZXMgKGRlZjogZGF0ZSBvciB4LWRhdGUpXG4gICAqICAgICAgICAgICAgICAgICAgIC0gYWxnb3JpdGhtczogYWxnb3JpdGhtcyB0byBzdXBwb3J0IChkZWZhdWx0OiBhbGwpLlxuICAgKiAgICAgICAgICAgICAgICAgICAtIHN0cmljdDogc2hvdWxkIGVuZm9yY2UgbGF0ZXN0IHNwZWMgcGFyc2luZ1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlZmF1bHQ6IGZhbHNlKS5cbiAgICogQHJldHVybiB7T2JqZWN0fSBwYXJzZWQgb3V0IG9iamVjdCAoc2VlIGFib3ZlKS5cbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBvbiBpbnZhbGlkIGlucHV0LlxuICAgKiBAdGhyb3dzIHtJbnZhbGlkSGVhZGVyRXJyb3J9IG9uIGFuIGludmFsaWQgQXV0aG9yaXphdGlvbiBoZWFkZXIgZXJyb3IuXG4gICAqIEB0aHJvd3Mge0ludmFsaWRQYXJhbXNFcnJvcn0gaWYgdGhlIHBhcmFtcyBpbiB0aGUgc2NoZW1lIGFyZSBpbnZhbGlkLlxuICAgKiBAdGhyb3dzIHtNaXNzaW5nSGVhZGVyRXJyb3J9IGlmIHRoZSBwYXJhbXMgaW5kaWNhdGUgYSBoZWFkZXIgbm90IHByZXNlbnQsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWl0aGVyIGluIHRoZSByZXF1ZXN0IGhlYWRlcnMgZnJvbSB0aGUgcGFyYW1zLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIG5vdCBpbiB0aGUgcGFyYW1zIGZyb20gYSByZXF1aXJlZCBoZWFkZXJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiBvcHRpb25zLlxuICAgKiBAdGhyb3dzIHtTdHJpY3RQYXJzaW5nRXJyb3J9IGlmIG9sZCBhdHRyaWJ1dGVzIGFyZSB1c2VkIGluIHN0cmljdCBwYXJzaW5nXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZS5cbiAgICogQHRocm93cyB7RXhwaXJlZFJlcXVlc3RFcnJvcn0gaWYgdGhlIHZhbHVlIG9mIGRhdGUgb3IgeC1kYXRlIGV4Y2VlZHMgc2tldy5cbiAgICovXG4gIHBhcnNlUmVxdWVzdDogZnVuY3Rpb24gcGFyc2VSZXF1ZXN0KHJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICBhc3NlcnQub2JqZWN0KHJlcXVlc3QsICdyZXF1ZXN0Jyk7XG4gICAgYXNzZXJ0Lm9iamVjdChyZXF1ZXN0LmhlYWRlcnMsICdyZXF1ZXN0LmhlYWRlcnMnKTtcbiAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmhlYWRlcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0aW9ucy5oZWFkZXJzID0gW3JlcXVlc3QuaGVhZGVyc1sneC1kYXRlJ10gPyAneC1kYXRlJyA6ICdkYXRlJ107XG4gICAgfVxuICAgIGFzc2VydC5vYmplY3Qob3B0aW9ucywgJ29wdGlvbnMnKTtcbiAgICBhc3NlcnQuYXJyYXlPZlN0cmluZyhvcHRpb25zLmhlYWRlcnMsICdvcHRpb25zLmhlYWRlcnMnKTtcbiAgICBhc3NlcnQub3B0aW9uYWxGaW5pdGUob3B0aW9ucy5jbG9ja1NrZXcsICdvcHRpb25zLmNsb2NrU2tldycpO1xuXG4gICAgdmFyIGF1dGh6SGVhZGVyTmFtZSA9IG9wdGlvbnMuYXV0aG9yaXphdGlvbkhlYWRlck5hbWUgfHwgJ2F1dGhvcml6YXRpb24nO1xuXG4gICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnNbYXV0aHpIZWFkZXJOYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IE1pc3NpbmdIZWFkZXJFcnJvcignbm8gJyArIGF1dGh6SGVhZGVyTmFtZSArICcgaGVhZGVyICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHJlc2VudCBpbiB0aGUgcmVxdWVzdCcpO1xuICAgIH1cblxuICAgIG9wdGlvbnMuY2xvY2tTa2V3ID0gb3B0aW9ucy5jbG9ja1NrZXcgfHwgMzAwO1xuXG5cbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHN0YXRlID0gU3RhdGUuTmV3O1xuICAgIHZhciBzdWJzdGF0ZSA9IFBhcmFtc1N0YXRlLk5hbWU7XG4gICAgdmFyIHRtcE5hbWUgPSAnJztcbiAgICB2YXIgdG1wVmFsdWUgPSAnJztcblxuICAgIHZhciBwYXJzZWQgPSB7XG4gICAgICBzY2hlbWU6ICcnLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIHNpZ25pbmdTdHJpbmc6ICcnXG4gICAgfTtcblxuICAgIHZhciBhdXRoeiA9IHJlcXVlc3QuaGVhZGVyc1thdXRoekhlYWRlck5hbWVdO1xuICAgIGZvciAoaSA9IDA7IGkgPCBhdXRoei5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBhdXRoei5jaGFyQXQoaSk7XG5cbiAgICAgIHN3aXRjaCAoTnVtYmVyKHN0YXRlKSkge1xuXG4gICAgICBjYXNlIFN0YXRlLk5ldzpcbiAgICAgICAgaWYgKGMgIT09ICcgJykgcGFyc2VkLnNjaGVtZSArPSBjO1xuICAgICAgICBlbHNlIHN0YXRlID0gU3RhdGUuUGFyYW1zO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTdGF0ZS5QYXJhbXM6XG4gICAgICAgIHN3aXRjaCAoTnVtYmVyKHN1YnN0YXRlKSkge1xuXG4gICAgICAgIGNhc2UgUGFyYW1zU3RhdGUuTmFtZTpcbiAgICAgICAgICB2YXIgY29kZSA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAvLyByZXN0cmljdGVkIG5hbWUgb2YgQS1aIC8gYS16XG4gICAgICAgICAgaWYgKChjb2RlID49IDB4NDEgJiYgY29kZSA8PSAweDVhKSB8fCAvLyBBLVpcbiAgICAgICAgICAgICAgKGNvZGUgPj0gMHg2MSAmJiBjb2RlIDw9IDB4N2EpKSB7IC8vIGEtelxuICAgICAgICAgICAgdG1wTmFtZSArPSBjO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz0nKSB7XG4gICAgICAgICAgICBpZiAodG1wTmFtZS5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSGVhZGVyRXJyb3IoJ2JhZCBwYXJhbSBmb3JtYXQnKTtcbiAgICAgICAgICAgIHN1YnN0YXRlID0gUGFyYW1zU3RhdGUuUXVvdGU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSGVhZGVyRXJyb3IoJ2JhZCBwYXJhbSBmb3JtYXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXJhbXNTdGF0ZS5RdW90ZTpcbiAgICAgICAgICBpZiAoYyA9PT0gJ1wiJykge1xuICAgICAgICAgICAgdG1wVmFsdWUgPSAnJztcbiAgICAgICAgICAgIHN1YnN0YXRlID0gUGFyYW1zU3RhdGUuVmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSGVhZGVyRXJyb3IoJ2JhZCBwYXJhbSBmb3JtYXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXJhbXNTdGF0ZS5WYWx1ZTpcbiAgICAgICAgICBpZiAoYyA9PT0gJ1wiJykge1xuICAgICAgICAgICAgcGFyc2VkLnBhcmFtc1t0bXBOYW1lXSA9IHRtcFZhbHVlO1xuICAgICAgICAgICAgc3Vic3RhdGUgPSBQYXJhbXNTdGF0ZS5Db21tYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG1wVmFsdWUgKz0gYztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXJhbXNTdGF0ZS5Db21tYTpcbiAgICAgICAgICBpZiAoYyA9PT0gJywnKSB7XG4gICAgICAgICAgICB0bXBOYW1lID0gJyc7XG4gICAgICAgICAgICBzdWJzdGF0ZSA9IFBhcmFtc1N0YXRlLk5hbWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSGVhZGVyRXJyb3IoJ2JhZCBwYXJhbSBmb3JtYXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3Vic3RhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN1YnN0YXRlJyk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAoIXBhcnNlZC5wYXJhbXMuaGVhZGVycyB8fCBwYXJzZWQucGFyYW1zLmhlYWRlcnMgPT09ICcnKSB7XG4gICAgICBpZiAocmVxdWVzdC5oZWFkZXJzWyd4LWRhdGUnXSkge1xuICAgICAgICBwYXJzZWQucGFyYW1zLmhlYWRlcnMgPSBbJ3gtZGF0ZSddO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkLnBhcmFtcy5oZWFkZXJzID0gWydkYXRlJ107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZC5wYXJhbXMuaGVhZGVycyA9IHBhcnNlZC5wYXJhbXMuaGVhZGVycy5zcGxpdCgnICcpO1xuICAgIH1cblxuICAgIC8vIE1pbmltYWxseSB2YWxpZGF0ZSB0aGUgcGFyc2VkIG9iamVjdFxuICAgIGlmICghcGFyc2VkLnNjaGVtZSB8fCBwYXJzZWQuc2NoZW1lICE9PSAnU2lnbmF0dXJlJylcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkSGVhZGVyRXJyb3IoJ3NjaGVtZSB3YXMgbm90IFwiU2lnbmF0dXJlXCInKTtcblxuICAgIGlmICghcGFyc2VkLnBhcmFtcy5rZXlJZClcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkSGVhZGVyRXJyb3IoJ2tleUlkIHdhcyBub3Qgc3BlY2lmaWVkJyk7XG5cbiAgICBpZiAoIXBhcnNlZC5wYXJhbXMuYWxnb3JpdGhtKVxuICAgICAgdGhyb3cgbmV3IEludmFsaWRIZWFkZXJFcnJvcignYWxnb3JpdGhtIHdhcyBub3Qgc3BlY2lmaWVkJyk7XG5cbiAgICBpZiAoIXBhcnNlZC5wYXJhbXMuc2lnbmF0dXJlKVxuICAgICAgdGhyb3cgbmV3IEludmFsaWRIZWFkZXJFcnJvcignc2lnbmF0dXJlIHdhcyBub3Qgc3BlY2lmaWVkJyk7XG5cbiAgICAvLyBDaGVjayB0aGUgYWxnb3JpdGhtIGFnYWluc3QgdGhlIG9mZmljaWFsIGxpc3RcbiAgICBwYXJzZWQucGFyYW1zLmFsZ29yaXRobSA9IHBhcnNlZC5wYXJhbXMuYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCk7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQWxnb3JpdGhtKHBhcnNlZC5wYXJhbXMuYWxnb3JpdGhtKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIEludmFsaWRBbGdvcml0aG1FcnJvcilcbiAgICAgICAgdGhyb3cgKG5ldyBJbnZhbGlkUGFyYW1zRXJyb3IocGFyc2VkLnBhcmFtcy5hbGdvcml0aG0gKyAnIGlzIG5vdCAnICtcbiAgICAgICAgICAnc3VwcG9ydGVkJykpO1xuICAgICAgZWxzZVxuICAgICAgICB0aHJvdyAoZSk7XG4gICAgfVxuXG4gICAgLy8gQnVpbGQgdGhlIHNpZ25pbmdTdHJpbmdcbiAgICBmb3IgKGkgPSAwOyBpIDwgcGFyc2VkLnBhcmFtcy5oZWFkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaCA9IHBhcnNlZC5wYXJhbXMuaGVhZGVyc1tpXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgcGFyc2VkLnBhcmFtcy5oZWFkZXJzW2ldID0gaDtcblxuICAgICAgaWYgKGggPT09ICdyZXF1ZXN0LWxpbmUnKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgICAgICAvKlxuICAgICAgICAgICAqIFdlIGFsbG93IGhlYWRlcnMgZnJvbSB0aGUgb2xkZXIgc3BlYyBkcmFmdHMgaWYgc3RyaWN0IHBhcnNpbmcgaXNuJ3RcbiAgICAgICAgICAgKiBzcGVjaWZpZWQgaW4gb3B0aW9ucy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBwYXJzZWQuc2lnbmluZ1N0cmluZyArPVxuICAgICAgICAgICAgcmVxdWVzdC5tZXRob2QgKyAnICcgKyByZXF1ZXN0LnVybCArICcgSFRUUC8nICsgcmVxdWVzdC5odHRwVmVyc2lvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKiBTdHJpY3QgcGFyc2luZyBkb2Vzbid0IGFsbG93IG9sZGVyIGRyYWZ0IGhlYWRlcnMuICovXG4gICAgICAgICAgdGhyb3cgKG5ldyBTdHJpY3RQYXJzaW5nRXJyb3IoJ3JlcXVlc3QtbGluZSBpcyBub3QgYSB2YWxpZCBoZWFkZXIgJyArXG4gICAgICAgICAgICAnd2l0aCBzdHJpY3QgcGFyc2luZyBlbmFibGVkLicpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChoID09PSAnKHJlcXVlc3QtdGFyZ2V0KScpIHtcbiAgICAgICAgcGFyc2VkLnNpZ25pbmdTdHJpbmcgKz1cbiAgICAgICAgICAnKHJlcXVlc3QtdGFyZ2V0KTogJyArIHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCkgKyAnICcgK1xuICAgICAgICAgIHJlcXVlc3QudXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcmVxdWVzdC5oZWFkZXJzW2hdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0hlYWRlckVycm9yKGggKyAnIHdhcyBub3QgaW4gdGhlIHJlcXVlc3QnKTtcbiAgICAgICAgcGFyc2VkLnNpZ25pbmdTdHJpbmcgKz0gaCArICc6ICcgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpICsgMSkgPCBwYXJzZWQucGFyYW1zLmhlYWRlcnMubGVuZ3RoKVxuICAgICAgICBwYXJzZWQuc2lnbmluZ1N0cmluZyArPSAnXFxuJztcbiAgICB9XG5cbiAgICAvLyBDaGVjayBhZ2FpbnN0IHRoZSBjb25zdHJhaW50c1xuICAgIHZhciBkYXRlO1xuICAgIGlmIChyZXF1ZXN0LmhlYWRlcnMuZGF0ZSB8fCByZXF1ZXN0LmhlYWRlcnNbJ3gtZGF0ZSddKSB7XG4gICAgICAgIGlmIChyZXF1ZXN0LmhlYWRlcnNbJ3gtZGF0ZSddKSB7XG4gICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHJlcXVlc3QuaGVhZGVyc1sneC1kYXRlJ10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShyZXF1ZXN0LmhlYWRlcnMuZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgdmFyIHNrZXcgPSBNYXRoLmFicyhub3cuZ2V0VGltZSgpIC0gZGF0ZS5nZXRUaW1lKCkpO1xuXG4gICAgICBpZiAoc2tldyA+IG9wdGlvbnMuY2xvY2tTa2V3ICogMTAwMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXhwaXJlZFJlcXVlc3RFcnJvcignY2xvY2sgc2tldyBvZiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNrZXcgLyAxMDAwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzIHdhcyBncmVhdGVyIHRoYW4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuY2xvY2tTa2V3ICsgJ3MnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvcHRpb25zLmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGRyKSB7XG4gICAgICAvLyBSZW1lbWJlciB0aGF0IHdlIGFscmVhZHkgY2hlY2tlZCBhbnkgaGVhZGVycyBpbiB0aGUgcGFyYW1zXG4gICAgICAvLyB3ZXJlIGluIHRoZSByZXF1ZXN0LCBzbyBpZiB0aGlzIHBhc3NlcyB3ZSdyZSBnb29kLlxuICAgICAgaWYgKHBhcnNlZC5wYXJhbXMuaGVhZGVycy5pbmRleE9mKGhkci50b0xvd2VyQ2FzZSgpKSA8IDApXG4gICAgICAgIHRocm93IG5ldyBNaXNzaW5nSGVhZGVyRXJyb3IoaGRyICsgJyB3YXMgbm90IGEgc2lnbmVkIGhlYWRlcicpO1xuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuYWxnb3JpdGhtcykge1xuICAgICAgaWYgKG9wdGlvbnMuYWxnb3JpdGhtcy5pbmRleE9mKHBhcnNlZC5wYXJhbXMuYWxnb3JpdGhtKSA9PT0gLTEpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkUGFyYW1zRXJyb3IocGFyc2VkLnBhcmFtcy5hbGdvcml0aG0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgaXMgbm90IGEgc3VwcG9ydGVkIGFsZ29yaXRobScpO1xuICAgIH1cblxuICAgIHBhcnNlZC5hbGdvcml0aG0gPSBwYXJzZWQucGFyYW1zLmFsZ29yaXRobS50b1VwcGVyQ2FzZSgpO1xuICAgIHBhcnNlZC5rZXlJZCA9IHBhcnNlZC5wYXJhbXMua2V5SWQ7XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuXG59O1xuIiwiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG52YXIgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcblxudmFyIFJlYWRlciA9IHJlcXVpcmUoJy4vcmVhZGVyJyk7XG52YXIgV3JpdGVyID0gcmVxdWlyZSgnLi93cml0ZXInKTtcblxuXG4vLyAtLS0gRXhwb3J0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBSZWFkZXI6IFJlYWRlcixcblxuICBXcml0ZXI6IFdyaXRlclxuXG59O1xuXG5mb3IgKHZhciB0IGluIHR5cGVzKSB7XG4gIGlmICh0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSlcbiAgICBtb2R1bGUuZXhwb3J0c1t0XSA9IHR5cGVzW3RdO1xufVxuZm9yICh2YXIgZSBpbiBlcnJvcnMpIHtcbiAgaWYgKGVycm9ycy5oYXNPd25Qcm9wZXJ0eShlKSlcbiAgICBtb2R1bGUuZXhwb3J0c1tlXSA9IGVycm9yc1tlXTtcbn1cbiIsIi8vIENvcHlyaWdodCAyMDExIE1hcmsgQ2F2YWdlIDxtY2F2YWdlQGdtYWlsLmNvbT4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIEFTTjEgPSByZXF1aXJlKCcuL3R5cGVzJyk7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcblxuXG4vLyAtLS0gR2xvYmFsc1xuXG52YXIgbmV3SW52YWxpZEFzbjFFcnJvciA9IGVycm9ycy5uZXdJbnZhbGlkQXNuMUVycm9yO1xuXG5cblxuLy8gLS0tIEFQSVxuXG5mdW5jdGlvbiBSZWFkZXIoZGF0YSkge1xuICBpZiAoIWRhdGEgfHwgIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIG11c3QgYmUgYSBub2RlIEJ1ZmZlcicpO1xuXG4gIHRoaXMuX2J1ZiA9IGRhdGE7XG4gIHRoaXMuX3NpemUgPSBkYXRhLmxlbmd0aDtcblxuICAvLyBUaGVzZSBob2xkIHRoZSBcImN1cnJlbnRcIiBzdGF0ZVxuICB0aGlzLl9sZW4gPSAwO1xuICB0aGlzLl9vZmZzZXQgPSAwO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGVyLnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5fbGVuKTsgfVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkZXIucHJvdG90eXBlLCAnb2Zmc2V0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLl9vZmZzZXQpOyB9XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRlci5wcm90b3R5cGUsICdyZW1haW4nLCB7XG4gIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuX3NpemUgLSB0aGlzLl9vZmZzZXQpOyB9XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRlci5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuX2J1Zi5zbGljZSh0aGlzLl9vZmZzZXQpKTsgfVxufSk7XG5cblxuLyoqXG4gKiBSZWFkcyBhIHNpbmdsZSBieXRlIGFuZCBhZHZhbmNlcyBvZmZzZXQ7IHlvdSBjYW4gcGFzcyBpbiBgdHJ1ZWAgdG8gbWFrZSB0aGlzXG4gKiBhIFwicGVla1wiIG9wZXJhdGlvbiAoaS5lLiwgZ2V0IHRoZSBieXRlLCBidXQgZG9uJ3QgYWR2YW5jZSB0aGUgb2Zmc2V0KS5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHBlZWsgdHJ1ZSBtZWFucyBkb24ndCBtb3ZlIG9mZnNldC5cbiAqIEByZXR1cm4ge051bWJlcn0gdGhlIG5leHQgYnl0ZSwgbnVsbCBpZiBub3QgZW5vdWdoIGRhdGEuXG4gKi9cblJlYWRlci5wcm90b3R5cGUucmVhZEJ5dGUgPSBmdW5jdGlvbiAocGVlaykge1xuICBpZiAodGhpcy5fc2l6ZSAtIHRoaXMuX29mZnNldCA8IDEpXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgdmFyIGIgPSB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0XSAmIDB4ZmY7XG5cbiAgaWYgKCFwZWVrKVxuICAgIHRoaXMuX29mZnNldCArPSAxO1xuXG4gIHJldHVybiBiO1xufTtcblxuXG5SZWFkZXIucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJlYWRCeXRlKHRydWUpO1xufTtcblxuXG4vKipcbiAqIFJlYWRzIGEgKHBvdGVudGlhbGx5KSB2YXJpYWJsZSBsZW5ndGggb2ZmIHRoZSBCRVIgYnVmZmVyLiAgVGhpcyBjYWxsIGlzXG4gKiBub3QgcmVhbGx5IG1lYW50IHRvIGJlIGNhbGxlZCBkaXJlY3RseSwgYXMgY2FsbGVycyBoYXZlIHRvIG1hbmlwdWxhdGVcbiAqIHRoZSBpbnRlcm5hbCBidWZmZXIgYWZ0ZXJ3YXJkcy5cbiAqXG4gKiBBcyBhIHJlc3VsdCBvZiB0aGlzIGNhbGwsIHlvdSBjYW4gY2FsbCBgUmVhZGVyLmxlbmd0aGAsIHVudGlsIHRoZVxuICogbmV4dCB0aGluZyBjYWxsZWQgdGhhdCBkb2VzIGEgcmVhZExlbmd0aC5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBhbW91bnQgb2Ygb2Zmc2V0IHRvIGFkdmFuY2UgdGhlIGJ1ZmZlci5cbiAqIEB0aHJvd3Mge0ludmFsaWRBc24xRXJyb3J9IG9uIGJhZCBBU04uMVxuICovXG5SZWFkZXIucHJvdG90eXBlLnJlYWRMZW5ndGggPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZClcbiAgICBvZmZzZXQgPSB0aGlzLl9vZmZzZXQ7XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLl9zaXplKVxuICAgIHJldHVybiBudWxsO1xuXG4gIHZhciBsZW5CID0gdGhpcy5fYnVmW29mZnNldCsrXSAmIDB4ZmY7XG4gIGlmIChsZW5CID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIGlmICgobGVuQiAmIDB4ODApID09PSAweDgwKSB7XG4gICAgbGVuQiAmPSAweDdmO1xuXG4gICAgaWYgKGxlbkIgPT09IDApXG4gICAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdJbmRlZmluaXRlIGxlbmd0aCBub3Qgc3VwcG9ydGVkJyk7XG5cbiAgICBpZiAobGVuQiA+IDQpXG4gICAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdlbmNvZGluZyB0b28gbG9uZycpO1xuXG4gICAgaWYgKHRoaXMuX3NpemUgLSBvZmZzZXQgPCBsZW5CKVxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICB0aGlzLl9sZW4gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuQjsgaSsrKVxuICAgICAgdGhpcy5fbGVuID0gKHRoaXMuX2xlbiA8PCA4KSArICh0aGlzLl9idWZbb2Zmc2V0KytdICYgMHhmZik7XG5cbiAgfSBlbHNlIHtcbiAgICAvLyBXYXNuJ3QgYSB2YXJpYWJsZSBsZW5ndGhcbiAgICB0aGlzLl9sZW4gPSBsZW5CO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn07XG5cblxuLyoqXG4gKiBQYXJzZXMgdGhlIG5leHQgc2VxdWVuY2UgaW4gdGhpcyBCRVIgYnVmZmVyLlxuICpcbiAqIFRvIGdldCB0aGUgbGVuZ3RoIG9mIHRoZSBzZXF1ZW5jZSwgY2FsbCBgUmVhZGVyLmxlbmd0aGAuXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSB0aGUgc2VxdWVuY2UncyB0YWcuXG4gKi9cblJlYWRlci5wcm90b3R5cGUucmVhZFNlcXVlbmNlID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc2VxID0gdGhpcy5wZWVrKCk7XG4gIGlmIChzZXEgPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICh0YWcgIT09IHVuZGVmaW5lZCAmJiB0YWcgIT09IHNlcSlcbiAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdFeHBlY3RlZCAweCcgKyB0YWcudG9TdHJpbmcoMTYpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6IGdvdCAweCcgKyBzZXEudG9TdHJpbmcoMTYpKTtcblxuICB2YXIgbyA9IHRoaXMucmVhZExlbmd0aCh0aGlzLl9vZmZzZXQgKyAxKTsgLy8gc3RvcmVkIGluIGBsZW5ndGhgXG4gIGlmIChvID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIHRoaXMuX29mZnNldCA9IG87XG4gIHJldHVybiBzZXE7XG59O1xuXG5cblJlYWRlci5wcm90b3R5cGUucmVhZEludCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRUYWcoQVNOMS5JbnRlZ2VyKTtcbn07XG5cblxuUmVhZGVyLnByb3RvdHlwZS5yZWFkQm9vbGVhbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICh0aGlzLl9yZWFkVGFnKEFTTjEuQm9vbGVhbikgPT09IDAgPyBmYWxzZSA6IHRydWUpO1xufTtcblxuXG5SZWFkZXIucHJvdG90eXBlLnJlYWRFbnVtZXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRUYWcoQVNOMS5FbnVtZXJhdGlvbik7XG59O1xuXG5cblJlYWRlci5wcm90b3R5cGUucmVhZFN0cmluZyA9IGZ1bmN0aW9uICh0YWcsIHJldGJ1Zikge1xuICBpZiAoIXRhZylcbiAgICB0YWcgPSBBU04xLk9jdGV0U3RyaW5nO1xuXG4gIHZhciBiID0gdGhpcy5wZWVrKCk7XG4gIGlmIChiID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIGlmIChiICE9PSB0YWcpXG4gICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignRXhwZWN0ZWQgMHgnICsgdGFnLnRvU3RyaW5nKDE2KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOiBnb3QgMHgnICsgYi50b1N0cmluZygxNikpO1xuXG4gIHZhciBvID0gdGhpcy5yZWFkTGVuZ3RoKHRoaXMuX29mZnNldCArIDEpOyAvLyBzdG9yZWQgaW4gYGxlbmd0aGBcblxuICBpZiAobyA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICBpZiAodGhpcy5sZW5ndGggPiB0aGlzLl9zaXplIC0gbylcbiAgICByZXR1cm4gbnVsbDtcblxuICB0aGlzLl9vZmZzZXQgPSBvO1xuXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gcmV0YnVmID8gQnVmZmVyLmFsbG9jKDApIDogJyc7XG5cbiAgdmFyIHN0ciA9IHRoaXMuX2J1Zi5zbGljZSh0aGlzLl9vZmZzZXQsIHRoaXMuX29mZnNldCArIHRoaXMubGVuZ3RoKTtcbiAgdGhpcy5fb2Zmc2V0ICs9IHRoaXMubGVuZ3RoO1xuXG4gIHJldHVybiByZXRidWYgPyBzdHIgOiBzdHIudG9TdHJpbmcoJ3V0ZjgnKTtcbn07XG5cblJlYWRlci5wcm90b3R5cGUucmVhZE9JRCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgaWYgKCF0YWcpXG4gICAgdGFnID0gQVNOMS5PSUQ7XG5cbiAgdmFyIGIgPSB0aGlzLnJlYWRTdHJpbmcodGFnLCB0cnVlKTtcbiAgaWYgKGIgPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHZhbHVlcyA9IFtdO1xuICB2YXIgdmFsdWUgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBieXRlID0gYltpXSAmIDB4ZmY7XG5cbiAgICB2YWx1ZSA8PD0gNztcbiAgICB2YWx1ZSArPSBieXRlICYgMHg3ZjtcbiAgICBpZiAoKGJ5dGUgJiAweDgwKSA9PT0gMCkge1xuICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgdmFsdWUgPSAwO1xuICAgIH1cbiAgfVxuXG4gIHZhbHVlID0gdmFsdWVzLnNoaWZ0KCk7XG4gIHZhbHVlcy51bnNoaWZ0KHZhbHVlICUgNDApO1xuICB2YWx1ZXMudW5zaGlmdCgodmFsdWUgLyA0MCkgPj4gMCk7XG5cbiAgcmV0dXJuIHZhbHVlcy5qb2luKCcuJyk7XG59O1xuXG5cblJlYWRlci5wcm90b3R5cGUuX3JlYWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIGFzc2VydC5vayh0YWcgIT09IHVuZGVmaW5lZCk7XG5cbiAgdmFyIGIgPSB0aGlzLnBlZWsoKTtcblxuICBpZiAoYiA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICBpZiAoYiAhPT0gdGFnKVxuICAgIHRocm93IG5ld0ludmFsaWRBc24xRXJyb3IoJ0V4cGVjdGVkIDB4JyArIHRhZy50b1N0cmluZygxNikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzogZ290IDB4JyArIGIudG9TdHJpbmcoMTYpKTtcblxuICB2YXIgbyA9IHRoaXMucmVhZExlbmd0aCh0aGlzLl9vZmZzZXQgKyAxKTsgLy8gc3RvcmVkIGluIGBsZW5ndGhgXG4gIGlmIChvID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIGlmICh0aGlzLmxlbmd0aCA+IDQpXG4gICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignSW50ZWdlciB0b28gbG9uZzogJyArIHRoaXMubGVuZ3RoKTtcblxuICBpZiAodGhpcy5sZW5ndGggPiB0aGlzLl9zaXplIC0gbylcbiAgICByZXR1cm4gbnVsbDtcbiAgdGhpcy5fb2Zmc2V0ID0gbztcblxuICB2YXIgZmIgPSB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0XTtcbiAgdmFyIHZhbHVlID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YWx1ZSA8PD0gODtcbiAgICB2YWx1ZSB8PSAodGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSAmIDB4ZmYpO1xuICB9XG5cbiAgaWYgKChmYiAmIDB4ODApID09PSAweDgwICYmIGkgIT09IDQpXG4gICAgdmFsdWUgLT0gKDEgPDwgKGkgKiA4KSk7XG5cbiAgcmV0dXJuIHZhbHVlID4+IDA7XG59O1xuXG5cblxuLy8gLS0tIEV4cG9ydGVkIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRlcjtcbiIsIi8vIENvcHlyaWdodCAyMDExIE1hcmsgQ2F2YWdlIDxtY2F2YWdlQGdtYWlsLmNvbT4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBBU04xID0gcmVxdWlyZSgnLi90eXBlcycpO1xudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5cblxuLy8gLS0tIEdsb2JhbHNcblxudmFyIG5ld0ludmFsaWRBc24xRXJyb3IgPSBlcnJvcnMubmV3SW52YWxpZEFzbjFFcnJvcjtcblxudmFyIERFRkFVTFRfT1BUUyA9IHtcbiAgc2l6ZTogMTAyNCxcbiAgZ3Jvd3RoRmFjdG9yOiA4XG59O1xuXG5cbi8vIC0tLSBIZWxwZXJzXG5cbmZ1bmN0aW9uIG1lcmdlKGZyb20sIHRvKSB7XG4gIGFzc2VydC5vayhmcm9tKTtcbiAgYXNzZXJ0LmVxdWFsKHR5cGVvZiAoZnJvbSksICdvYmplY3QnKTtcbiAgYXNzZXJ0Lm9rKHRvKTtcbiAgYXNzZXJ0LmVxdWFsKHR5cGVvZiAodG8pLCAnb2JqZWN0Jyk7XG5cbiAgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhmcm9tKTtcbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAodG9ba2V5XSlcbiAgICAgIHJldHVybjtcblxuICAgIHZhciB2YWx1ZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZnJvbSwga2V5KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodG8sIGtleSwgdmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gdG87XG59XG5cblxuXG4vLyAtLS0gQVBJXG5cbmZ1bmN0aW9uIFdyaXRlcihvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBtZXJnZShERUZBVUxUX09QVFMsIG9wdGlvbnMgfHwge30pO1xuXG4gIHRoaXMuX2J1ZiA9IEJ1ZmZlci5hbGxvYyhvcHRpb25zLnNpemUgfHwgMTAyNCk7XG4gIHRoaXMuX3NpemUgPSB0aGlzLl9idWYubGVuZ3RoO1xuICB0aGlzLl9vZmZzZXQgPSAwO1xuICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcblxuICAvLyBBIGxpc3Qgb2Ygb2Zmc2V0cyBpbiB0aGUgYnVmZmVyIHdoZXJlIHdlIG5lZWQgdG8gaW5zZXJ0XG4gIC8vIHNlcXVlbmNlIHRhZy9sZW4gcGFpcnMuXG4gIHRoaXMuX3NlcSA9IFtdO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGVyLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3NlcS5sZW5ndGgpXG4gICAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKHRoaXMuX3NlcS5sZW5ndGggKyAnIHVuZW5kZWQgc2VxdWVuY2UocyknKTtcblxuICAgIHJldHVybiAodGhpcy5fYnVmLnNsaWNlKDAsIHRoaXMuX29mZnNldCkpO1xuICB9XG59KTtcblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZUJ5dGUgPSBmdW5jdGlvbiAoYikge1xuICBpZiAodHlwZW9mIChiKSAhPT0gJ251bWJlcicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIE51bWJlcicpO1xuXG4gIHRoaXMuX2Vuc3VyZSgxKTtcbiAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGI7XG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVJbnQgPSBmdW5jdGlvbiAoaSwgdGFnKSB7XG4gIGlmICh0eXBlb2YgKGkpICE9PSAnbnVtYmVyJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gIGlmICh0eXBlb2YgKHRhZykgIT09ICdudW1iZXInKVxuICAgIHRhZyA9IEFTTjEuSW50ZWdlcjtcblxuICB2YXIgc3ogPSA0O1xuXG4gIHdoaWxlICgoKChpICYgMHhmZjgwMDAwMCkgPT09IDApIHx8ICgoaSAmIDB4ZmY4MDAwMDApID09PSAweGZmODAwMDAwID4+IDApKSAmJlxuICAgICAgICAoc3ogPiAxKSkge1xuICAgIHN6LS07XG4gICAgaSA8PD0gODtcbiAgfVxuXG4gIGlmIChzeiA+IDQpXG4gICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignQkVSIGludHMgY2Fubm90IGJlID4gMHhmZmZmZmZmZicpO1xuXG4gIHRoaXMuX2Vuc3VyZSgyICsgc3opO1xuICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gdGFnO1xuICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gc3o7XG5cbiAgd2hpbGUgKHN6LS0gPiAwKSB7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9ICgoaSAmIDB4ZmYwMDAwMDApID4+PiAyNCk7XG4gICAgaSA8PD0gODtcbiAgfVxuXG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVOdWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLndyaXRlQnl0ZShBU04xLk51bGwpO1xuICB0aGlzLndyaXRlQnl0ZSgweDAwKTtcbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZUVudW1lcmF0aW9uID0gZnVuY3Rpb24gKGksIHRhZykge1xuICBpZiAodHlwZW9mIChpKSAhPT0gJ251bWJlcicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIE51bWJlcicpO1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0YWcgPSBBU04xLkVudW1lcmF0aW9uO1xuXG4gIHJldHVybiB0aGlzLndyaXRlSW50KGksIHRhZyk7XG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVCb29sZWFuID0gZnVuY3Rpb24gKGIsIHRhZykge1xuICBpZiAodHlwZW9mIChiKSAhPT0gJ2Jvb2xlYW4nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBCb29sZWFuJyk7XG4gIGlmICh0eXBlb2YgKHRhZykgIT09ICdudW1iZXInKVxuICAgIHRhZyA9IEFTTjEuQm9vbGVhbjtcblxuICB0aGlzLl9lbnN1cmUoMyk7XG4gIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSB0YWc7XG4gIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSAweDAxO1xuICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gYiA/IDB4ZmYgOiAweDAwO1xufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlU3RyaW5nID0gZnVuY3Rpb24gKHMsIHRhZykge1xuICBpZiAodHlwZW9mIChzKSAhPT0gJ3N0cmluZycpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZyAod2FzOiAnICsgdHlwZW9mIChzKSArICcpJyk7XG4gIGlmICh0eXBlb2YgKHRhZykgIT09ICdudW1iZXInKVxuICAgIHRhZyA9IEFTTjEuT2N0ZXRTdHJpbmc7XG5cbiAgdmFyIGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHMpO1xuICB0aGlzLndyaXRlQnl0ZSh0YWcpO1xuICB0aGlzLndyaXRlTGVuZ3RoKGxlbik7XG4gIGlmIChsZW4pIHtcbiAgICB0aGlzLl9lbnN1cmUobGVuKTtcbiAgICB0aGlzLl9idWYud3JpdGUocywgdGhpcy5fb2Zmc2V0KTtcbiAgICB0aGlzLl9vZmZzZXQgKz0gbGVuO1xuICB9XG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVCdWZmZXIgPSBmdW5jdGlvbiAoYnVmLCB0YWcpIHtcbiAgaWYgKHR5cGVvZiAodGFnKSAhPT0gJ251bWJlcicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFnIG11c3QgYmUgYSBudW1iZXInKTtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgYnVmZmVyJyk7XG5cbiAgdGhpcy53cml0ZUJ5dGUodGFnKTtcbiAgdGhpcy53cml0ZUxlbmd0aChidWYubGVuZ3RoKTtcbiAgdGhpcy5fZW5zdXJlKGJ1Zi5sZW5ndGgpO1xuICBidWYuY29weSh0aGlzLl9idWYsIHRoaXMuX29mZnNldCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMuX29mZnNldCArPSBidWYubGVuZ3RoO1xufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlU3RyaW5nQXJyYXkgPSBmdW5jdGlvbiAoc3RyaW5ncykge1xuICBpZiAoKCFzdHJpbmdzIGluc3RhbmNlb2YgQXJyYXkpKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXlbU3RyaW5nXScpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgc3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XG4gICAgc2VsZi53cml0ZVN0cmluZyhzKTtcbiAgfSk7XG59O1xuXG4vLyBUaGlzIGlzIHJlYWxseSB0byBzb2x2ZSBERVIgY2FzZXMsIGJ1dCB3aGF0ZXZlciBmb3Igbm93XG5Xcml0ZXIucHJvdG90eXBlLndyaXRlT0lEID0gZnVuY3Rpb24gKHMsIHRhZykge1xuICBpZiAodHlwZW9mIChzKSAhPT0gJ3N0cmluZycpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZycpO1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0YWcgPSBBU04xLk9JRDtcblxuICBpZiAoIS9eKFswLTldK1xcLil7Myx9WzAtOV0rJC8udGVzdChzKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2FyZ3VtZW50IGlzIG5vdCBhIHZhbGlkIE9JRCBzdHJpbmcnKTtcblxuICBmdW5jdGlvbiBlbmNvZGVPY3RldChieXRlcywgb2N0ZXQpIHtcbiAgICBpZiAob2N0ZXQgPCAxMjgpIHtcbiAgICAgICAgYnl0ZXMucHVzaChvY3RldCk7XG4gICAgfSBlbHNlIGlmIChvY3RldCA8IDE2Mzg0KSB7XG4gICAgICAgIGJ5dGVzLnB1c2goKG9jdGV0ID4+PiA3KSB8IDB4ODApO1xuICAgICAgICBieXRlcy5wdXNoKG9jdGV0ICYgMHg3Rik7XG4gICAgfSBlbHNlIGlmIChvY3RldCA8IDIwOTcxNTIpIHtcbiAgICAgIGJ5dGVzLnB1c2goKG9jdGV0ID4+PiAxNCkgfCAweDgwKTtcbiAgICAgIGJ5dGVzLnB1c2goKChvY3RldCA+Pj4gNykgfCAweDgwKSAmIDB4RkYpO1xuICAgICAgYnl0ZXMucHVzaChvY3RldCAmIDB4N0YpO1xuICAgIH0gZWxzZSBpZiAob2N0ZXQgPCAyNjg0MzU0NTYpIHtcbiAgICAgIGJ5dGVzLnB1c2goKG9jdGV0ID4+PiAyMSkgfCAweDgwKTtcbiAgICAgIGJ5dGVzLnB1c2goKChvY3RldCA+Pj4gMTQpIHwgMHg4MCkgJiAweEZGKTtcbiAgICAgIGJ5dGVzLnB1c2goKChvY3RldCA+Pj4gNykgfCAweDgwKSAmIDB4RkYpO1xuICAgICAgYnl0ZXMucHVzaChvY3RldCAmIDB4N0YpO1xuICAgIH0gZWxzZSB7XG4gICAgICBieXRlcy5wdXNoKCgob2N0ZXQgPj4+IDI4KSB8IDB4ODApICYgMHhGRik7XG4gICAgICBieXRlcy5wdXNoKCgob2N0ZXQgPj4+IDIxKSB8IDB4ODApICYgMHhGRik7XG4gICAgICBieXRlcy5wdXNoKCgob2N0ZXQgPj4+IDE0KSB8IDB4ODApICYgMHhGRik7XG4gICAgICBieXRlcy5wdXNoKCgob2N0ZXQgPj4+IDcpIHwgMHg4MCkgJiAweEZGKTtcbiAgICAgIGJ5dGVzLnB1c2gob2N0ZXQgJiAweDdGKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdG1wID0gcy5zcGxpdCgnLicpO1xuICB2YXIgYnl0ZXMgPSBbXTtcbiAgYnl0ZXMucHVzaChwYXJzZUludCh0bXBbMF0sIDEwKSAqIDQwICsgcGFyc2VJbnQodG1wWzFdLCAxMCkpO1xuICB0bXAuc2xpY2UoMikuZm9yRWFjaChmdW5jdGlvbiAoYikge1xuICAgIGVuY29kZU9jdGV0KGJ5dGVzLCBwYXJzZUludChiLCAxMCkpO1xuICB9KTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX2Vuc3VyZSgyICsgYnl0ZXMubGVuZ3RoKTtcbiAgdGhpcy53cml0ZUJ5dGUodGFnKTtcbiAgdGhpcy53cml0ZUxlbmd0aChieXRlcy5sZW5ndGgpO1xuICBieXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XG4gICAgc2VsZi53cml0ZUJ5dGUoYik7XG4gIH0pO1xufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlTGVuZ3RoID0gZnVuY3Rpb24gKGxlbikge1xuICBpZiAodHlwZW9mIChsZW4pICE9PSAnbnVtYmVyJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgTnVtYmVyJyk7XG5cbiAgdGhpcy5fZW5zdXJlKDQpO1xuXG4gIGlmIChsZW4gPD0gMHg3Zikge1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBsZW47XG4gIH0gZWxzZSBpZiAobGVuIDw9IDB4ZmYpIHtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gMHg4MTtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gbGVuO1xuICB9IGVsc2UgaWYgKGxlbiA8PSAweGZmZmYpIHtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gMHg4MjtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gbGVuID4+IDg7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbjtcbiAgfSBlbHNlIGlmIChsZW4gPD0gMHhmZmZmZmYpIHtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gMHg4MztcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gbGVuID4+IDE2O1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBsZW4gPj4gODtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gbGVuO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ld0ludmFsaWRBc24xRXJyb3IoJ0xlbmd0aCB0b28gbG9uZyAoPiA0IGJ5dGVzKScpO1xuICB9XG59O1xuXG5Xcml0ZXIucHJvdG90eXBlLnN0YXJ0U2VxdWVuY2UgPSBmdW5jdGlvbiAodGFnKSB7XG4gIGlmICh0eXBlb2YgKHRhZykgIT09ICdudW1iZXInKVxuICAgIHRhZyA9IEFTTjEuU2VxdWVuY2UgfCBBU04xLkNvbnN0cnVjdG9yO1xuXG4gIHRoaXMud3JpdGVCeXRlKHRhZyk7XG4gIHRoaXMuX3NlcS5wdXNoKHRoaXMuX29mZnNldCk7XG4gIHRoaXMuX2Vuc3VyZSgzKTtcbiAgdGhpcy5fb2Zmc2V0ICs9IDM7XG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUuZW5kU2VxdWVuY2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZXEgPSB0aGlzLl9zZXEucG9wKCk7XG4gIHZhciBzdGFydCA9IHNlcSArIDM7XG4gIHZhciBsZW4gPSB0aGlzLl9vZmZzZXQgLSBzdGFydDtcblxuICBpZiAobGVuIDw9IDB4N2YpIHtcbiAgICB0aGlzLl9zaGlmdChzdGFydCwgbGVuLCAtMik7XG4gICAgdGhpcy5fYnVmW3NlcV0gPSBsZW47XG4gIH0gZWxzZSBpZiAobGVuIDw9IDB4ZmYpIHtcbiAgICB0aGlzLl9zaGlmdChzdGFydCwgbGVuLCAtMSk7XG4gICAgdGhpcy5fYnVmW3NlcV0gPSAweDgxO1xuICAgIHRoaXMuX2J1ZltzZXEgKyAxXSA9IGxlbjtcbiAgfSBlbHNlIGlmIChsZW4gPD0gMHhmZmZmKSB7XG4gICAgdGhpcy5fYnVmW3NlcV0gPSAweDgyO1xuICAgIHRoaXMuX2J1ZltzZXEgKyAxXSA9IGxlbiA+PiA4O1xuICAgIHRoaXMuX2J1ZltzZXEgKyAyXSA9IGxlbjtcbiAgfSBlbHNlIGlmIChsZW4gPD0gMHhmZmZmZmYpIHtcbiAgICB0aGlzLl9zaGlmdChzdGFydCwgbGVuLCAxKTtcbiAgICB0aGlzLl9idWZbc2VxXSA9IDB4ODM7XG4gICAgdGhpcy5fYnVmW3NlcSArIDFdID0gbGVuID4+IDE2O1xuICAgIHRoaXMuX2J1ZltzZXEgKyAyXSA9IGxlbiA+PiA4O1xuICAgIHRoaXMuX2J1ZltzZXEgKyAzXSA9IGxlbjtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdTZXF1ZW5jZSB0b28gbG9uZycpO1xuICB9XG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUuX3NoaWZ0ID0gZnVuY3Rpb24gKHN0YXJ0LCBsZW4sIHNoaWZ0KSB7XG4gIGFzc2VydC5vayhzdGFydCAhPT0gdW5kZWZpbmVkKTtcbiAgYXNzZXJ0Lm9rKGxlbiAhPT0gdW5kZWZpbmVkKTtcbiAgYXNzZXJ0Lm9rKHNoaWZ0KTtcblxuICB0aGlzLl9idWYuY29weSh0aGlzLl9idWYsIHN0YXJ0ICsgc2hpZnQsIHN0YXJ0LCBzdGFydCArIGxlbik7XG4gIHRoaXMuX29mZnNldCArPSBzaGlmdDtcbn07XG5cbldyaXRlci5wcm90b3R5cGUuX2Vuc3VyZSA9IGZ1bmN0aW9uIChsZW4pIHtcbiAgYXNzZXJ0Lm9rKGxlbik7XG5cbiAgaWYgKHRoaXMuX3NpemUgLSB0aGlzLl9vZmZzZXQgPCBsZW4pIHtcbiAgICB2YXIgc3ogPSB0aGlzLl9zaXplICogdGhpcy5fb3B0aW9ucy5ncm93dGhGYWN0b3I7XG4gICAgaWYgKHN6IC0gdGhpcy5fb2Zmc2V0IDwgbGVuKVxuICAgICAgc3ogKz0gbGVuO1xuXG4gICAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYyhzeik7XG5cbiAgICB0aGlzLl9idWYuY29weShidWYsIDAsIDAsIHRoaXMuX29mZnNldCk7XG4gICAgdGhpcy5fYnVmID0gYnVmO1xuICAgIHRoaXMuX3NpemUgPSBzejtcbiAgfVxufTtcblxuXG5cbi8vIC0tLSBFeHBvcnRlZCBBUElcblxubW9kdWxlLmV4cG9ydHMgPSBXcml0ZXI7XG4iLCJ2YXIgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZShcImpzYm5cIikuQmlnSW50ZWdlcjtcbnZhciBFQ1BvaW50RnAgPSByZXF1aXJlKFwiLi9saWIvZWMuanNcIikuRUNQb2ludEZwO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoXCJzYWZlci1idWZmZXJcIikuQnVmZmVyO1xuZXhwb3J0cy5FQ0N1cnZlcyA9IHJlcXVpcmUoXCIuL2xpYi9zZWMuanNcIik7XG5cbi8vIHplcm8gcHJlcGFkXG5mdW5jdGlvbiB1bnN0dXBpZChoZXgsbGVuKVxue1xuXHRyZXR1cm4gKGhleC5sZW5ndGggPj0gbGVuKSA/IGhleCA6IHVuc3R1cGlkKFwiMFwiK2hleCxsZW4pO1xufVxuXG5leHBvcnRzLkVDS2V5ID0gZnVuY3Rpb24oY3VydmUsIGtleSwgaXNQdWJsaWMpXG57XG4gIHZhciBwcml2O1xuXHR2YXIgYyA9IGN1cnZlKCk7XG5cdHZhciBuID0gYy5nZXROKCk7XG4gIHZhciBieXRlcyA9IE1hdGguZmxvb3Iobi5iaXRMZW5ndGgoKS84KTtcblxuICBpZihrZXkpXG4gIHtcbiAgICBpZihpc1B1YmxpYylcbiAgICB7XG4gICAgICB2YXIgY3VydmUgPSBjLmdldEN1cnZlKCk7XG4vLyAgICAgIHZhciB4ID0ga2V5LnNsaWNlKDEsYnl0ZXMrMSk7IC8vIHNraXAgdGhlIDA0IGZvciB1bmNvbXByZXNzZWQgZm9ybWF0XG4vLyAgICAgIHZhciB5ID0ga2V5LnNsaWNlKGJ5dGVzKzEpO1xuLy8gICAgICB0aGlzLlAgPSBuZXcgRUNQb2ludEZwKGN1cnZlLFxuLy8gICAgICAgIGN1cnZlLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHgudG9TdHJpbmcoXCJoZXhcIiksIDE2KSksXG4vLyAgICAgICAgY3VydmUuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoeS50b1N0cmluZyhcImhleFwiKSwgMTYpKSk7ICAgICAgXG4gICAgICB0aGlzLlAgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChrZXkudG9TdHJpbmcoXCJoZXhcIikpO1xuICAgIH1lbHNle1xuICAgICAgaWYoa2V5Lmxlbmd0aCAhPSBieXRlcykgcmV0dXJuIGZhbHNlO1xuICAgICAgcHJpdiA9IG5ldyBCaWdJbnRlZ2VyKGtleS50b1N0cmluZyhcImhleFwiKSwgMTYpOyAgICAgIFxuICAgIH1cbiAgfWVsc2V7XG4gICAgdmFyIG4xID0gbi5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7XG4gICAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcihjcnlwdG8ucmFuZG9tQnl0ZXMobi5iaXRMZW5ndGgoKSkpO1xuICAgIHByaXYgPSByLm1vZChuMSkuYWRkKEJpZ0ludGVnZXIuT05FKTtcbiAgICB0aGlzLlAgPSBjLmdldEcoKS5tdWx0aXBseShwcml2KTtcbiAgfVxuICBpZih0aGlzLlApXG4gIHtcbi8vICB2YXIgcHViaGV4ID0gdW5zdHVwaWQodGhpcy5QLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMikrdW5zdHVwaWQodGhpcy5QLmdldFkoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMik7XG4vLyAgdGhpcy5QdWJsaWNLZXkgPSBCdWZmZXIuZnJvbShcIjA0XCIrcHViaGV4LFwiaGV4XCIpO1xuICAgIHRoaXMuUHVibGljS2V5ID0gQnVmZmVyLmZyb20oYy5nZXRDdXJ2ZSgpLmVuY29kZUNvbXByZXNzZWRQb2ludEhleCh0aGlzLlApLFwiaGV4XCIpO1xuICB9XG4gIGlmKHByaXYpXG4gIHtcbiAgICB0aGlzLlByaXZhdGVLZXkgPSBCdWZmZXIuZnJvbSh1bnN0dXBpZChwcml2LnRvU3RyaW5nKDE2KSxieXRlcyoyKSxcImhleFwiKTtcbiAgICB0aGlzLmRlcml2ZVNoYXJlZFNlY3JldCA9IGZ1bmN0aW9uKGtleSlcbiAgICB7XG4gICAgICBpZigha2V5IHx8ICFrZXkuUCkgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIFMgPSBrZXkuUC5tdWx0aXBseShwcml2KTtcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh1bnN0dXBpZChTLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMiksXCJoZXhcIik7XG4gICB9ICAgICBcbiAgfVxufVxuXG4iLCIvLyBOYW1lZCBFQyBjdXJ2ZXNcblxuLy8gUmVxdWlyZXMgZWMuanMsIGpzYm4uanMsIGFuZCBqc2JuMi5qc1xudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdqc2JuJykuQmlnSW50ZWdlclxudmFyIEVDQ3VydmVGcCA9IHJlcXVpcmUoJy4vZWMuanMnKS5FQ0N1cnZlRnBcblxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tXG4vLyBYOUVDUGFyYW1ldGVyc1xuXG4vLyBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gWDlFQ1BhcmFtZXRlcnMoY3VydmUsZyxuLGgpIHtcbiAgICB0aGlzLmN1cnZlID0gY3VydmU7XG4gICAgdGhpcy5nID0gZztcbiAgICB0aGlzLm4gPSBuO1xuICAgIHRoaXMuaCA9IGg7XG59XG5cbmZ1bmN0aW9uIHg5Z2V0Q3VydmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VydmU7XG59XG5cbmZ1bmN0aW9uIHg5Z2V0RygpIHtcbiAgICByZXR1cm4gdGhpcy5nO1xufVxuXG5mdW5jdGlvbiB4OWdldE4oKSB7XG4gICAgcmV0dXJuIHRoaXMubjtcbn1cblxuZnVuY3Rpb24geDlnZXRIKCkge1xuICAgIHJldHVybiB0aGlzLmg7XG59XG5cblg5RUNQYXJhbWV0ZXJzLnByb3RvdHlwZS5nZXRDdXJ2ZSA9IHg5Z2V0Q3VydmU7XG5YOUVDUGFyYW1ldGVycy5wcm90b3R5cGUuZ2V0RyA9IHg5Z2V0Rztcblg5RUNQYXJhbWV0ZXJzLnByb3RvdHlwZS5nZXROID0geDlnZXROO1xuWDlFQ1BhcmFtZXRlcnMucHJvdG90eXBlLmdldEggPSB4OWdldEg7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS1cbi8vIFNFQ05hbWVkQ3VydmVzXG5cbmZ1bmN0aW9uIGZyb21IZXgocykgeyByZXR1cm4gbmV3IEJpZ0ludGVnZXIocywgMTYpOyB9XG5cbmZ1bmN0aW9uIHNlY3AxMjhyMSgpIHtcbiAgICAvLyBwID0gMl4xMjggLSAyXjk3IC0gMVxuICAgIHZhciBwID0gZnJvbUhleChcIkZGRkZGRkZERkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGXCIpO1xuICAgIHZhciBhID0gZnJvbUhleChcIkZGRkZGRkZERkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIpO1xuICAgIHZhciBiID0gZnJvbUhleChcIkU4NzU3OUMxMTA3OUY0M0REODI0OTkzQzJDRUU1RUQzXCIpO1xuICAgIC8vYnl0ZVtdIFMgPSBIZXguZGVjb2RlKFwiMDAwRTBENEQ2OTZFNjc2ODc1NjE1MTc1MENDMDNBNDQ3M0QwMzY3OVwiKTtcbiAgICB2YXIgbiA9IGZyb21IZXgoXCJGRkZGRkZGRTAwMDAwMDAwNzVBMzBEMUI5MDM4QTExNVwiKTtcbiAgICB2YXIgaCA9IEJpZ0ludGVnZXIuT05FO1xuICAgIHZhciBjdXJ2ZSA9IG5ldyBFQ0N1cnZlRnAocCwgYSwgYik7XG4gICAgdmFyIEcgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChcIjA0XCJcbiAgICAgICAgICAgICAgICArIFwiMTYxRkY3NTI4Qjg5OUIyRDBDMjg2MDdDQTUyQzVCODZcIlxuXHRcdCsgXCJDRjVBQzgzOTVCQUZFQjEzQzAyREEyOTJEREVEN0E4M1wiKTtcbiAgICByZXR1cm4gbmV3IFg5RUNQYXJhbWV0ZXJzKGN1cnZlLCBHLCBuLCBoKTtcbn1cblxuZnVuY3Rpb24gc2VjcDE2MGsxKCkge1xuICAgIC8vIHAgPSAyXjE2MCAtIDJeMzIgLSAyXjE0IC0gMl4xMiAtIDJeOSAtIDJeOCAtIDJeNyAtIDJeMyAtIDJeMiAtIDFcbiAgICB2YXIgcCA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZBQzczXCIpO1xuICAgIHZhciBhID0gQmlnSW50ZWdlci5aRVJPO1xuICAgIHZhciBiID0gZnJvbUhleChcIjdcIik7XG4gICAgLy9ieXRlW10gUyA9IG51bGw7XG4gICAgdmFyIG4gPSBmcm9tSGV4KFwiMDEwMDAwMDAwMDAwMDAwMDAwMDAwMUI4RkExNkRGQUI5QUNBMTZCNkIzXCIpO1xuICAgIHZhciBoID0gQmlnSW50ZWdlci5PTkU7XG4gICAgdmFyIGN1cnZlID0gbmV3IEVDQ3VydmVGcChwLCBhLCBiKTtcbiAgICB2YXIgRyA9IGN1cnZlLmRlY29kZVBvaW50SGV4KFwiMDRcIlxuICAgICAgICAgICAgICAgICsgXCIzQjRDMzgyQ0UzN0FBMTkyQTQwMTlFNzYzMDM2RjRGNURENEQ3RUJCXCJcbiAgICAgICAgICAgICAgICArIFwiOTM4Q0Y5MzUzMThGRENFRDZCQzI4Mjg2NTMxNzMzQzNGMDNDNEZFRVwiKTtcbiAgICByZXR1cm4gbmV3IFg5RUNQYXJhbWV0ZXJzKGN1cnZlLCBHLCBuLCBoKTtcbn1cblxuZnVuY3Rpb24gc2VjcDE2MHIxKCkge1xuICAgIC8vIHAgPSAyXjE2MCAtIDJeMzEgLSAxXG4gICAgdmFyIHAgPSBmcm9tSGV4KFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY3RkZGRkZGRlwiKTtcbiAgICB2YXIgYSA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjdGRkZGRkZDXCIpO1xuICAgIHZhciBiID0gZnJvbUhleChcIjFDOTdCRUZDNTRCRDdBOEI2NUFDRjg5RjgxRDRENEFEQzU2NUZBNDVcIik7XG4gICAgLy9ieXRlW10gUyA9IEhleC5kZWNvZGUoXCIxMDUzQ0RFNDJDMTRENjk2RTY3Njg3NTYxNTE3NTMzQkYzRjgzMzQ1XCIpO1xuICAgIHZhciBuID0gZnJvbUhleChcIjAxMDAwMDAwMDAwMDAwMDAwMDAwMDFGNEM4RjkyN0FFRDNDQTc1MjI1N1wiKTtcbiAgICB2YXIgaCA9IEJpZ0ludGVnZXIuT05FO1xuICAgIHZhciBjdXJ2ZSA9IG5ldyBFQ0N1cnZlRnAocCwgYSwgYik7XG4gICAgdmFyIEcgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChcIjA0XCJcblx0XHQrIFwiNEE5NkI1Njg4RUY1NzMyODQ2NjQ2OTg5NjhDMzhCQjkxM0NCRkM4MlwiXG5cdFx0KyBcIjIzQTYyODU1MzE2ODk0N0Q1OURDQzkxMjA0MjM1MTM3N0FDNUZCMzJcIik7XG4gICAgcmV0dXJuIG5ldyBYOUVDUGFyYW1ldGVycyhjdXJ2ZSwgRywgbiwgaCk7XG59XG5cbmZ1bmN0aW9uIHNlY3AxOTJrMSgpIHtcbiAgICAvLyBwID0gMl4xOTIgLSAyXjMyIC0gMl4xMiAtIDJeOCAtIDJeNyAtIDJeNiAtIDJeMyAtIDFcbiAgICB2YXIgcCA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkVFMzdcIik7XG4gICAgdmFyIGEgPSBCaWdJbnRlZ2VyLlpFUk87XG4gICAgdmFyIGIgPSBmcm9tSGV4KFwiM1wiKTtcbiAgICAvL2J5dGVbXSBTID0gbnVsbDtcbiAgICB2YXIgbiA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkUyNkYyRkMxNzBGNjk0NjZBNzRERUZEOERcIik7XG4gICAgdmFyIGggPSBCaWdJbnRlZ2VyLk9ORTtcbiAgICB2YXIgY3VydmUgPSBuZXcgRUNDdXJ2ZUZwKHAsIGEsIGIpO1xuICAgIHZhciBHID0gY3VydmUuZGVjb2RlUG9pbnRIZXgoXCIwNFwiXG4gICAgICAgICAgICAgICAgKyBcIkRCNEZGMTBFQzA1N0U5QUUyNkIwN0QwMjgwQjdGNDM0MURBNUQxQjFFQUUwNkM3RFwiXG4gICAgICAgICAgICAgICAgKyBcIjlCMkYyRjZEOUM1NjI4QTc4NDQxNjNEMDE1QkU4NjM0NDA4MkFBODhEOTVFMkY5RFwiKTtcbiAgICByZXR1cm4gbmV3IFg5RUNQYXJhbWV0ZXJzKGN1cnZlLCBHLCBuLCBoKTtcbn1cblxuZnVuY3Rpb24gc2VjcDE5MnIxKCkge1xuICAgIC8vIHAgPSAyXjE5MiAtIDJeNjQgLSAxXG4gICAgdmFyIHAgPSBmcm9tSGV4KFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZGXCIpO1xuICAgIHZhciBhID0gZnJvbUhleChcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkZGRkZGRkZGQ1wiKTtcbiAgICB2YXIgYiA9IGZyb21IZXgoXCI2NDIxMDUxOUU1OUM4MEU3MEZBN0U5QUI3MjI0MzA0OUZFQjhERUVDQzE0NkI5QjFcIik7XG4gICAgLy9ieXRlW10gUyA9IEhleC5kZWNvZGUoXCIzMDQ1QUU2RkM4NDIyRjY0RUQ1Nzk1MjhEMzgxMjBFQUUxMjE5NkQ1XCIpO1xuICAgIHZhciBuID0gZnJvbUhleChcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjk5REVGODM2MTQ2QkM5QjFCNEQyMjgzMVwiKTtcbiAgICB2YXIgaCA9IEJpZ0ludGVnZXIuT05FO1xuICAgIHZhciBjdXJ2ZSA9IG5ldyBFQ0N1cnZlRnAocCwgYSwgYik7XG4gICAgdmFyIEcgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChcIjA0XCJcbiAgICAgICAgICAgICAgICArIFwiMTg4REE4MEVCMDMwOTBGNjdDQkYyMEVCNDNBMTg4MDBGNEZGMEFGRDgyRkYxMDEyXCJcbiAgICAgICAgICAgICAgICArIFwiMDcxOTJCOTVGRkM4REE3ODYzMTAxMUVENkIyNENERDU3M0Y5NzdBMTFFNzk0ODExXCIpO1xuICAgIHJldHVybiBuZXcgWDlFQ1BhcmFtZXRlcnMoY3VydmUsIEcsIG4sIGgpO1xufVxuXG5mdW5jdGlvbiBzZWNwMjI0cjEoKSB7XG4gICAgLy8gcCA9IDJeMjI0IC0gMl45NiArIDFcbiAgICB2YXIgcCA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMVwiKTtcbiAgICB2YXIgYSA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRVwiKTtcbiAgICB2YXIgYiA9IGZyb21IZXgoXCJCNDA1MEE4NTBDMDRCM0FCRjU0MTMyNTY1MDQ0QjBCN0Q3QkZEOEJBMjcwQjM5NDMyMzU1RkZCNFwiKTtcbiAgICAvL2J5dGVbXSBTID0gSGV4LmRlY29kZShcIkJENzEzNDQ3OTlENUM3RkNEQzQ1QjU5RkEzQjlBQjhGNkE5NDhCQzVcIik7XG4gICAgdmFyIG4gPSBmcm9tSGV4KFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjE2QTJFMEI4RjAzRTEzREQyOTQ1NUM1QzJBM0RcIik7XG4gICAgdmFyIGggPSBCaWdJbnRlZ2VyLk9ORTtcbiAgICB2YXIgY3VydmUgPSBuZXcgRUNDdXJ2ZUZwKHAsIGEsIGIpO1xuICAgIHZhciBHID0gY3VydmUuZGVjb2RlUG9pbnRIZXgoXCIwNFwiXG4gICAgICAgICAgICAgICAgKyBcIkI3MEUwQ0JENkJCNEJGN0YzMjEzOTBCOTRBMDNDMUQzNTZDMjExMjIzNDMyODBENjExNUMxRDIxXCJcbiAgICAgICAgICAgICAgICArIFwiQkQzNzYzODhCNUY3MjNGQjRDMjJERkU2Q0Q0Mzc1QTA1QTA3NDc2NDQ0RDU4MTk5ODUwMDdFMzRcIik7XG4gICAgcmV0dXJuIG5ldyBYOUVDUGFyYW1ldGVycyhjdXJ2ZSwgRywgbiwgaCk7XG59XG5cbmZ1bmN0aW9uIHNlY3AyNTZyMSgpIHtcbiAgICAvLyBwID0gMl4yMjQgKDJeMzIgLSAxKSArIDJeMTkyICsgMl45NiAtIDFcbiAgICB2YXIgcCA9IGZyb21IZXgoXCJGRkZGRkZGRjAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGXCIpO1xuICAgIHZhciBhID0gZnJvbUhleChcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIik7XG4gICAgdmFyIGIgPSBmcm9tSGV4KFwiNUFDNjM1RDhBQTNBOTNFN0IzRUJCRDU1NzY5ODg2QkM2NTFEMDZCMENDNTNCMEY2M0JDRTNDM0UyN0QyNjA0QlwiKTtcbiAgICAvL2J5dGVbXSBTID0gSGV4LmRlY29kZShcIkM0OUQzNjA4ODZFNzA0OTM2QTY2NzhFMTEzOUQyNkI3ODE5RjdFOTBcIik7XG4gICAgdmFyIG4gPSBmcm9tSGV4KFwiRkZGRkZGRkYwMDAwMDAwMEZGRkZGRkZGRkZGRkZGRkZCQ0U2RkFBREE3MTc5RTg0RjNCOUNBQzJGQzYzMjU1MVwiKTtcbiAgICB2YXIgaCA9IEJpZ0ludGVnZXIuT05FO1xuICAgIHZhciBjdXJ2ZSA9IG5ldyBFQ0N1cnZlRnAocCwgYSwgYik7XG4gICAgdmFyIEcgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChcIjA0XCJcbiAgICAgICAgICAgICAgICArIFwiNkIxN0QxRjJFMTJDNDI0N0Y4QkNFNkU1NjNBNDQwRjI3NzAzN0Q4MTJERUIzM0EwRjRBMTM5NDVEODk4QzI5NlwiXG5cdFx0KyBcIjRGRTM0MkUyRkUxQTdGOUI4RUU3RUI0QTdDMEY5RTE2MkJDRTMzNTc2QjMxNUVDRUNCQjY0MDY4MzdCRjUxRjVcIik7XG4gICAgcmV0dXJuIG5ldyBYOUVDUGFyYW1ldGVycyhjdXJ2ZSwgRywgbiwgaCk7XG59XG5cbi8vIFRPRE86IG1ha2UgdGhpcyBpbnRvIGEgcHJvcGVyIGhhc2h0YWJsZVxuZnVuY3Rpb24gZ2V0U0VDQ3VydmVCeU5hbWUobmFtZSkge1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMTI4cjFcIikgcmV0dXJuIHNlY3AxMjhyMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMTYwazFcIikgcmV0dXJuIHNlY3AxNjBrMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMTYwcjFcIikgcmV0dXJuIHNlY3AxNjByMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMTkyazFcIikgcmV0dXJuIHNlY3AxOTJrMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMTkycjFcIikgcmV0dXJuIHNlY3AxOTJyMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMjI0cjFcIikgcmV0dXJuIHNlY3AyMjRyMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMjU2cjFcIikgcmV0dXJuIHNlY3AyNTZyMSgpO1xuICAgIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJzZWNwMTI4cjFcIjpzZWNwMTI4cjEsXG4gIFwic2VjcDE2MGsxXCI6c2VjcDE2MGsxLFxuICBcInNlY3AxNjByMVwiOnNlY3AxNjByMSxcbiAgXCJzZWNwMTkyazFcIjpzZWNwMTkyazEsXG4gIFwic2VjcDE5MnIxXCI6c2VjcDE5MnIxLFxuICBcInNlY3AyMjRyMVwiOnNlY3AyMjRyMSxcbiAgXCJzZWNwMjU2cjFcIjpzZWNwMjU2cjFcbn1cbiIsIi8vIENvcHlyaWdodCAyMDE3IEpveWVudCwgSW5jLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0cmVhZDogcmVhZCxcblx0dmVyaWZ5OiB2ZXJpZnksXG5cdHNpZ246IHNpZ24sXG5cdHNpZ25Bc3luYzogc2lnbkFzeW5jLFxuXHR3cml0ZTogd3JpdGUsXG5cblx0LyogSW50ZXJuYWwgcHJpdmF0ZSBBUEkgKi9cblx0ZnJvbUJ1ZmZlcjogZnJvbUJ1ZmZlcixcblx0dG9CdWZmZXI6IHRvQnVmZmVyXG59O1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBTU0hCdWZmZXIgPSByZXF1aXJlKCcuLi9zc2gtYnVmZmVyJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuLi9hbGdzJyk7XG52YXIgS2V5ID0gcmVxdWlyZSgnLi4va2V5Jyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4uL3ByaXZhdGUta2V5Jyk7XG52YXIgSWRlbnRpdHkgPSByZXF1aXJlKCcuLi9pZGVudGl0eScpO1xudmFyIHJmYzQyNTMgPSByZXF1aXJlKCcuL3JmYzQyNTMnKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuLi9zaWduYXR1cmUnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgQ2VydGlmaWNhdGUgPSByZXF1aXJlKCcuLi9jZXJ0aWZpY2F0ZScpO1xuXG5mdW5jdGlvbiB2ZXJpZnkoY2VydCwga2V5KSB7XG5cdC8qXG5cdCAqIFdlIGFsd2F5cyBnaXZlIGFuIGlzc3VlcktleSwgc28gaWYgb3VyIHZlcmlmeSgpIGlzIGJlaW5nIGNhbGxlZCB0aGVuXG5cdCAqIHRoZXJlIHdhcyBubyBzaWduYXR1cmUuIFJldHVybiBmYWxzZS5cblx0ICovXG5cdHJldHVybiAoZmFsc2UpO1xufVxuXG52YXIgVFlQRVMgPSB7XG5cdCd1c2VyJzogMSxcblx0J2hvc3QnOiAyXG59O1xuT2JqZWN0LmtleXMoVFlQRVMpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgVFlQRVNbVFlQRVNba11dID0gazsgfSk7XG5cbnZhciBFQ0RTQV9BTEdPID0gL15lY2RzYS1zaGEyLShbXkAtXSspLWNlcnQtdjAxQG9wZW5zc2guY29tJC87XG5cbmZ1bmN0aW9uIHJlYWQoYnVmLCBvcHRpb25zKSB7XG5cdGlmIChCdWZmZXIuaXNCdWZmZXIoYnVmKSlcblx0XHRidWYgPSBidWYudG9TdHJpbmcoJ2FzY2lpJyk7XG5cdHZhciBwYXJ0cyA9IGJ1Zi50cmltKCkuc3BsaXQoL1sgXFx0XFxuXSsvZyk7XG5cdGlmIChwYXJ0cy5sZW5ndGggPCAyIHx8IHBhcnRzLmxlbmd0aCA+IDMpXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignTm90IGEgdmFsaWQgU1NIIGNlcnRpZmljYXRlIGxpbmUnKSk7XG5cblx0dmFyIGFsZ28gPSBwYXJ0c1swXTtcblx0dmFyIGRhdGEgPSBwYXJ0c1sxXTtcblxuXHRkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgJ2Jhc2U2NCcpO1xuXHRyZXR1cm4gKGZyb21CdWZmZXIoZGF0YSwgYWxnbykpO1xufVxuXG5mdW5jdGlvbiBmcm9tQnVmZmVyKGRhdGEsIGFsZ28sIHBhcnRpYWwpIHtcblx0dmFyIHNzaGJ1ZiA9IG5ldyBTU0hCdWZmZXIoeyBidWZmZXI6IGRhdGEgfSk7XG5cdHZhciBpbm5lckFsZ28gPSBzc2hidWYucmVhZFN0cmluZygpO1xuXHRpZiAoYWxnbyAhPT0gdW5kZWZpbmVkICYmIGlubmVyQWxnbyAhPT0gYWxnbylcblx0XHR0aHJvdyAobmV3IEVycm9yKCdTU0ggY2VydGlmaWNhdGUgYWxnb3JpdGhtIG1pc21hdGNoJykpO1xuXHRpZiAoYWxnbyA9PT0gdW5kZWZpbmVkKVxuXHRcdGFsZ28gPSBpbm5lckFsZ287XG5cblx0dmFyIGNlcnQgPSB7fTtcblx0Y2VydC5zaWduYXR1cmVzID0ge307XG5cdGNlcnQuc2lnbmF0dXJlcy5vcGVuc3NoID0ge307XG5cblx0Y2VydC5zaWduYXR1cmVzLm9wZW5zc2gubm9uY2UgPSBzc2hidWYucmVhZEJ1ZmZlcigpO1xuXG5cdHZhciBrZXkgPSB7fTtcblx0dmFyIHBhcnRzID0gKGtleS5wYXJ0cyA9IFtdKTtcblx0a2V5LnR5cGUgPSBnZXRBbGcoYWxnbyk7XG5cblx0dmFyIHBhcnRDb3VudCA9IGFsZ3MuaW5mb1trZXkudHlwZV0ucGFydHMubGVuZ3RoO1xuXHR3aGlsZSAocGFydHMubGVuZ3RoIDwgcGFydENvdW50KVxuXHRcdHBhcnRzLnB1c2goc3NoYnVmLnJlYWRQYXJ0KCkpO1xuXHRhc3NlcnQub2socGFydHMubGVuZ3RoID49IDEsICdrZXkgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBwYXJ0Jyk7XG5cblx0dmFyIGFsZ0luZm8gPSBhbGdzLmluZm9ba2V5LnR5cGVdO1xuXHRpZiAoa2V5LnR5cGUgPT09ICdlY2RzYScpIHtcblx0XHR2YXIgcmVzID0gRUNEU0FfQUxHTy5leGVjKGFsZ28pO1xuXHRcdGFzc2VydC5vayhyZXMgIT09IG51bGwpO1xuXHRcdGFzc2VydC5zdHJpY3RFcXVhbChyZXNbMV0sIHBhcnRzWzBdLmRhdGEudG9TdHJpbmcoKSk7XG5cdH1cblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGFsZ0luZm8ucGFydHMubGVuZ3RoOyArK2kpIHtcblx0XHRwYXJ0c1tpXS5uYW1lID0gYWxnSW5mby5wYXJ0c1tpXTtcblx0XHRpZiAocGFydHNbaV0ubmFtZSAhPT0gJ2N1cnZlJyAmJlxuXHRcdCAgICBhbGdJbmZvLm5vcm1hbGl6ZSAhPT0gZmFsc2UpIHtcblx0XHRcdHZhciBwID0gcGFydHNbaV07XG5cdFx0XHRwLmRhdGEgPSB1dGlscy5tcE5vcm1hbGl6ZShwLmRhdGEpO1xuXHRcdH1cblx0fVxuXG5cdGNlcnQuc3ViamVjdEtleSA9IG5ldyBLZXkoa2V5KTtcblxuXHRjZXJ0LnNlcmlhbCA9IHNzaGJ1Zi5yZWFkSW50NjQoKTtcblxuXHR2YXIgdHlwZSA9IFRZUEVTW3NzaGJ1Zi5yZWFkSW50KCldO1xuXHRhc3NlcnQuc3RyaW5nKHR5cGUsICd2YWxpZCBjZXJ0IHR5cGUnKTtcblxuXHRjZXJ0LnNpZ25hdHVyZXMub3BlbnNzaC5rZXlJZCA9IHNzaGJ1Zi5yZWFkU3RyaW5nKCk7XG5cblx0dmFyIHByaW5jaXBhbHMgPSBbXTtcblx0dmFyIHBidWYgPSBzc2hidWYucmVhZEJ1ZmZlcigpO1xuXHR2YXIgcHNzaGJ1ZiA9IG5ldyBTU0hCdWZmZXIoeyBidWZmZXI6IHBidWYgfSk7XG5cdHdoaWxlICghcHNzaGJ1Zi5hdEVuZCgpKVxuXHRcdHByaW5jaXBhbHMucHVzaChwc3NoYnVmLnJlYWRTdHJpbmcoKSk7XG5cdGlmIChwcmluY2lwYWxzLmxlbmd0aCA9PT0gMClcblx0XHRwcmluY2lwYWxzID0gWycqJ107XG5cblx0Y2VydC5zdWJqZWN0cyA9IHByaW5jaXBhbHMubWFwKGZ1bmN0aW9uIChwcikge1xuXHRcdGlmICh0eXBlID09PSAndXNlcicpXG5cdFx0XHRyZXR1cm4gKElkZW50aXR5LmZvclVzZXIocHIpKTtcblx0XHRlbHNlIGlmICh0eXBlID09PSAnaG9zdCcpXG5cdFx0XHRyZXR1cm4gKElkZW50aXR5LmZvckhvc3QocHIpKTtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdVbmtub3duIGlkZW50aXR5IHR5cGUgJyArIHR5cGUpKTtcblx0fSk7XG5cblx0Y2VydC52YWxpZEZyb20gPSBpbnQ2NFRvRGF0ZShzc2hidWYucmVhZEludDY0KCkpO1xuXHRjZXJ0LnZhbGlkVW50aWwgPSBpbnQ2NFRvRGF0ZShzc2hidWYucmVhZEludDY0KCkpO1xuXG5cdHZhciBleHRzID0gW107XG5cdHZhciBleHRidWYgPSBuZXcgU1NIQnVmZmVyKHsgYnVmZmVyOiBzc2hidWYucmVhZEJ1ZmZlcigpIH0pO1xuXHR2YXIgZXh0O1xuXHR3aGlsZSAoIWV4dGJ1Zi5hdEVuZCgpKSB7XG5cdFx0ZXh0ID0geyBjcml0aWNhbDogdHJ1ZSB9O1xuXHRcdGV4dC5uYW1lID0gZXh0YnVmLnJlYWRTdHJpbmcoKTtcblx0XHRleHQuZGF0YSA9IGV4dGJ1Zi5yZWFkQnVmZmVyKCk7XG5cdFx0ZXh0cy5wdXNoKGV4dCk7XG5cdH1cblx0ZXh0YnVmID0gbmV3IFNTSEJ1ZmZlcih7IGJ1ZmZlcjogc3NoYnVmLnJlYWRCdWZmZXIoKSB9KTtcblx0d2hpbGUgKCFleHRidWYuYXRFbmQoKSkge1xuXHRcdGV4dCA9IHsgY3JpdGljYWw6IGZhbHNlIH07XG5cdFx0ZXh0Lm5hbWUgPSBleHRidWYucmVhZFN0cmluZygpO1xuXHRcdGV4dC5kYXRhID0gZXh0YnVmLnJlYWRCdWZmZXIoKTtcblx0XHRleHRzLnB1c2goZXh0KTtcblx0fVxuXHRjZXJ0LnNpZ25hdHVyZXMub3BlbnNzaC5leHRzID0gZXh0cztcblxuXHQvKiByZXNlcnZlZCAqL1xuXHRzc2hidWYucmVhZEJ1ZmZlcigpO1xuXG5cdHZhciBzaWduaW5nS2V5QnVmID0gc3NoYnVmLnJlYWRCdWZmZXIoKTtcblx0Y2VydC5pc3N1ZXJLZXkgPSByZmM0MjUzLnJlYWQoc2lnbmluZ0tleUJ1Zik7XG5cblx0Lypcblx0ICogT3BlblNTSCBjZXJ0cyBkb24ndCBnaXZlIHRoZSBpZGVudGl0eSBvZiB0aGUgaXNzdWVyLCBqdXN0IHRoZWlyXG5cdCAqIHB1YmxpYyBrZXkuIFNvLCB3ZSB1c2UgYW4gSWRlbnRpdHkgdGhhdCBtYXRjaGVzIGFueXRoaW5nLiBUaGVcblx0ICogaXNTaWduZWRCeSgpIGZ1bmN0aW9uIHdpbGwgbGF0ZXIgdGVsbCB5b3UgaWYgdGhlIGtleSBtYXRjaGVzLlxuXHQgKi9cblx0Y2VydC5pc3N1ZXIgPSBJZGVudGl0eS5mb3JIb3N0KCcqKicpO1xuXG5cdHZhciBzaWdCdWYgPSBzc2hidWYucmVhZEJ1ZmZlcigpO1xuXHRjZXJ0LnNpZ25hdHVyZXMub3BlbnNzaC5zaWduYXR1cmUgPVxuXHQgICAgU2lnbmF0dXJlLnBhcnNlKHNpZ0J1ZiwgY2VydC5pc3N1ZXJLZXkudHlwZSwgJ3NzaCcpO1xuXG5cdGlmIChwYXJ0aWFsICE9PSB1bmRlZmluZWQpIHtcblx0XHRwYXJ0aWFsLnJlbWFpbmRlciA9IHNzaGJ1Zi5yZW1haW5kZXIoKTtcblx0XHRwYXJ0aWFsLmNvbnN1bWVkID0gc3NoYnVmLl9vZmZzZXQ7XG5cdH1cblxuXHRyZXR1cm4gKG5ldyBDZXJ0aWZpY2F0ZShjZXJ0KSk7XG59XG5cbmZ1bmN0aW9uIGludDY0VG9EYXRlKGJ1Zikge1xuXHR2YXIgaSA9IGJ1Zi5yZWFkVUludDMyQkUoMCkgKiA0Mjk0OTY3Mjk2O1xuXHRpICs9IGJ1Zi5yZWFkVUludDMyQkUoNCk7XG5cdHZhciBkID0gbmV3IERhdGUoKTtcblx0ZC5zZXRUaW1lKGkgKiAxMDAwKTtcblx0ZC5zb3VyY2VJbnQ2NCA9IGJ1Zjtcblx0cmV0dXJuIChkKTtcbn1cblxuZnVuY3Rpb24gZGF0ZVRvSW50NjQoZGF0ZSkge1xuXHRpZiAoZGF0ZS5zb3VyY2VJbnQ2NCAhPT0gdW5kZWZpbmVkKVxuXHRcdHJldHVybiAoZGF0ZS5zb3VyY2VJbnQ2NCk7XG5cdHZhciBpID0gTWF0aC5yb3VuZChkYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuXHR2YXIgdXBwZXIgPSBNYXRoLmZsb29yKGkgLyA0Mjk0OTY3Mjk2KTtcblx0dmFyIGxvd2VyID0gTWF0aC5mbG9vcihpICUgNDI5NDk2NzI5Nik7XG5cdHZhciBidWYgPSBCdWZmZXIuYWxsb2MoOCk7XG5cdGJ1Zi53cml0ZVVJbnQzMkJFKHVwcGVyLCAwKTtcblx0YnVmLndyaXRlVUludDMyQkUobG93ZXIsIDQpO1xuXHRyZXR1cm4gKGJ1Zik7XG59XG5cbmZ1bmN0aW9uIHNpZ24oY2VydCwga2V5KSB7XG5cdGlmIChjZXJ0LnNpZ25hdHVyZXMub3BlbnNzaCA9PT0gdW5kZWZpbmVkKVxuXHRcdGNlcnQuc2lnbmF0dXJlcy5vcGVuc3NoID0ge307XG5cdHRyeSB7XG5cdFx0dmFyIGJsb2IgPSB0b0J1ZmZlcihjZXJ0LCB0cnVlKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGRlbGV0ZSAoY2VydC5zaWduYXR1cmVzLm9wZW5zc2gpO1xuXHRcdHJldHVybiAoZmFsc2UpO1xuXHR9XG5cdHZhciBzaWcgPSBjZXJ0LnNpZ25hdHVyZXMub3BlbnNzaDtcblx0dmFyIGhhc2hBbGdvID0gdW5kZWZpbmVkO1xuXHRpZiAoa2V5LnR5cGUgPT09ICdyc2EnIHx8IGtleS50eXBlID09PSAnZHNhJylcblx0XHRoYXNoQWxnbyA9ICdzaGExJztcblx0dmFyIHNpZ25lciA9IGtleS5jcmVhdGVTaWduKGhhc2hBbGdvKTtcblx0c2lnbmVyLndyaXRlKGJsb2IpO1xuXHRzaWcuc2lnbmF0dXJlID0gc2lnbmVyLnNpZ24oKTtcblx0cmV0dXJuICh0cnVlKTtcbn1cblxuZnVuY3Rpb24gc2lnbkFzeW5jKGNlcnQsIHNpZ25lciwgZG9uZSkge1xuXHRpZiAoY2VydC5zaWduYXR1cmVzLm9wZW5zc2ggPT09IHVuZGVmaW5lZClcblx0XHRjZXJ0LnNpZ25hdHVyZXMub3BlbnNzaCA9IHt9O1xuXHR0cnkge1xuXHRcdHZhciBibG9iID0gdG9CdWZmZXIoY2VydCwgdHJ1ZSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRkZWxldGUgKGNlcnQuc2lnbmF0dXJlcy5vcGVuc3NoKTtcblx0XHRkb25lKGUpO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgc2lnID0gY2VydC5zaWduYXR1cmVzLm9wZW5zc2g7XG5cblx0c2lnbmVyKGJsb2IsIGZ1bmN0aW9uIChlcnIsIHNpZ25hdHVyZSkge1xuXHRcdGlmIChlcnIpIHtcblx0XHRcdGRvbmUoZXJyKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdC8qXG5cdFx0XHQgKiBUaGlzIHdpbGwgdGhyb3cgaWYgdGhlIHNpZ25hdHVyZSBpc24ndCBvZiBhXG5cdFx0XHQgKiB0eXBlL2FsZ28gdGhhdCBjYW4gYmUgdXNlZCBmb3IgU1NILlxuXHRcdFx0ICovXG5cdFx0XHRzaWduYXR1cmUudG9CdWZmZXIoJ3NzaCcpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGRvbmUoZSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHNpZy5zaWduYXR1cmUgPSBzaWduYXR1cmU7XG5cdFx0ZG9uZSgpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gd3JpdGUoY2VydCwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKVxuXHRcdG9wdGlvbnMgPSB7fTtcblxuXHR2YXIgYmxvYiA9IHRvQnVmZmVyKGNlcnQpO1xuXHR2YXIgb3V0ID0gZ2V0Q2VydFR5cGUoY2VydC5zdWJqZWN0S2V5KSArICcgJyArIGJsb2IudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXHRpZiAob3B0aW9ucy5jb21tZW50KVxuXHRcdG91dCA9IG91dCArICcgJyArIG9wdGlvbnMuY29tbWVudDtcblx0cmV0dXJuIChvdXQpO1xufVxuXG5cbmZ1bmN0aW9uIHRvQnVmZmVyKGNlcnQsIG5vU2lnKSB7XG5cdGFzc2VydC5vYmplY3QoY2VydC5zaWduYXR1cmVzLm9wZW5zc2gsICdzaWduYXR1cmUgZm9yIG9wZW5zc2ggZm9ybWF0Jyk7XG5cdHZhciBzaWcgPSBjZXJ0LnNpZ25hdHVyZXMub3BlbnNzaDtcblxuXHRpZiAoc2lnLm5vbmNlID09PSB1bmRlZmluZWQpXG5cdFx0c2lnLm5vbmNlID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KTtcblx0dmFyIGJ1ZiA9IG5ldyBTU0hCdWZmZXIoe30pO1xuXHRidWYud3JpdGVTdHJpbmcoZ2V0Q2VydFR5cGUoY2VydC5zdWJqZWN0S2V5KSk7XG5cdGJ1Zi53cml0ZUJ1ZmZlcihzaWcubm9uY2UpO1xuXG5cdHZhciBrZXkgPSBjZXJ0LnN1YmplY3RLZXk7XG5cdHZhciBhbGdJbmZvID0gYWxncy5pbmZvW2tleS50eXBlXTtcblx0YWxnSW5mby5wYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0KSB7XG5cdFx0YnVmLndyaXRlUGFydChrZXkucGFydFtwYXJ0XSk7XG5cdH0pO1xuXG5cdGJ1Zi53cml0ZUludDY0KGNlcnQuc2VyaWFsKTtcblxuXHR2YXIgdHlwZSA9IGNlcnQuc3ViamVjdHNbMF0udHlwZTtcblx0YXNzZXJ0Lm5vdFN0cmljdEVxdWFsKHR5cGUsICd1bmtub3duJyk7XG5cdGNlcnQuc3ViamVjdHMuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcblx0XHRhc3NlcnQuc3RyaWN0RXF1YWwoaWQudHlwZSwgdHlwZSk7XG5cdH0pO1xuXHR0eXBlID0gVFlQRVNbdHlwZV07XG5cdGJ1Zi53cml0ZUludCh0eXBlKTtcblxuXHRpZiAoc2lnLmtleUlkID09PSB1bmRlZmluZWQpIHtcblx0XHRzaWcua2V5SWQgPSBjZXJ0LnN1YmplY3RzWzBdLnR5cGUgKyAnXycgK1xuXHRcdCAgICAoY2VydC5zdWJqZWN0c1swXS51aWQgfHwgY2VydC5zdWJqZWN0c1swXS5ob3N0bmFtZSk7XG5cdH1cblx0YnVmLndyaXRlU3RyaW5nKHNpZy5rZXlJZCk7XG5cblx0dmFyIHN1YiA9IG5ldyBTU0hCdWZmZXIoe30pO1xuXHRjZXJ0LnN1YmplY3RzLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG5cdFx0aWYgKHR5cGUgPT09IFRZUEVTLmhvc3QpXG5cdFx0XHRzdWIud3JpdGVTdHJpbmcoaWQuaG9zdG5hbWUpO1xuXHRcdGVsc2UgaWYgKHR5cGUgPT09IFRZUEVTLnVzZXIpXG5cdFx0XHRzdWIud3JpdGVTdHJpbmcoaWQudWlkKTtcblx0fSk7XG5cdGJ1Zi53cml0ZUJ1ZmZlcihzdWIudG9CdWZmZXIoKSk7XG5cblx0YnVmLndyaXRlSW50NjQoZGF0ZVRvSW50NjQoY2VydC52YWxpZEZyb20pKTtcblx0YnVmLndyaXRlSW50NjQoZGF0ZVRvSW50NjQoY2VydC52YWxpZFVudGlsKSk7XG5cblx0dmFyIGV4dHMgPSBzaWcuZXh0cztcblx0aWYgKGV4dHMgPT09IHVuZGVmaW5lZClcblx0XHRleHRzID0gW107XG5cblx0dmFyIGV4dGJ1ZiA9IG5ldyBTU0hCdWZmZXIoe30pO1xuXHRleHRzLmZvckVhY2goZnVuY3Rpb24gKGV4dCkge1xuXHRcdGlmIChleHQuY3JpdGljYWwgIT09IHRydWUpXG5cdFx0XHRyZXR1cm47XG5cdFx0ZXh0YnVmLndyaXRlU3RyaW5nKGV4dC5uYW1lKTtcblx0XHRleHRidWYud3JpdGVCdWZmZXIoZXh0LmRhdGEpO1xuXHR9KTtcblx0YnVmLndyaXRlQnVmZmVyKGV4dGJ1Zi50b0J1ZmZlcigpKTtcblxuXHRleHRidWYgPSBuZXcgU1NIQnVmZmVyKHt9KTtcblx0ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChleHQpIHtcblx0XHRpZiAoZXh0LmNyaXRpY2FsID09PSB0cnVlKVxuXHRcdFx0cmV0dXJuO1xuXHRcdGV4dGJ1Zi53cml0ZVN0cmluZyhleHQubmFtZSk7XG5cdFx0ZXh0YnVmLndyaXRlQnVmZmVyKGV4dC5kYXRhKTtcblx0fSk7XG5cdGJ1Zi53cml0ZUJ1ZmZlcihleHRidWYudG9CdWZmZXIoKSk7XG5cblx0LyogcmVzZXJ2ZWQgKi9cblx0YnVmLndyaXRlQnVmZmVyKEJ1ZmZlci5hbGxvYygwKSk7XG5cblx0c3ViID0gcmZjNDI1My53cml0ZShjZXJ0Lmlzc3VlcktleSk7XG5cdGJ1Zi53cml0ZUJ1ZmZlcihzdWIpO1xuXG5cdGlmICghbm9TaWcpXG5cdFx0YnVmLndyaXRlQnVmZmVyKHNpZy5zaWduYXR1cmUudG9CdWZmZXIoJ3NzaCcpKTtcblxuXHRyZXR1cm4gKGJ1Zi50b0J1ZmZlcigpKTtcbn1cblxuZnVuY3Rpb24gZ2V0QWxnKGNlcnRUeXBlKSB7XG5cdGlmIChjZXJ0VHlwZSA9PT0gJ3NzaC1yc2EtY2VydC12MDFAb3BlbnNzaC5jb20nKVxuXHRcdHJldHVybiAoJ3JzYScpO1xuXHRpZiAoY2VydFR5cGUgPT09ICdzc2gtZHNzLWNlcnQtdjAxQG9wZW5zc2guY29tJylcblx0XHRyZXR1cm4gKCdkc2EnKTtcblx0aWYgKGNlcnRUeXBlLm1hdGNoKEVDRFNBX0FMR08pKVxuXHRcdHJldHVybiAoJ2VjZHNhJyk7XG5cdGlmIChjZXJ0VHlwZSA9PT0gJ3NzaC1lZDI1NTE5LWNlcnQtdjAxQG9wZW5zc2guY29tJylcblx0XHRyZXR1cm4gKCdlZDI1NTE5Jyk7XG5cdHRocm93IChuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGNlcnQgdHlwZSAnICsgY2VydFR5cGUpKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2VydFR5cGUoa2V5KSB7XG5cdGlmIChrZXkudHlwZSA9PT0gJ3JzYScpXG5cdFx0cmV0dXJuICgnc3NoLXJzYS1jZXJ0LXYwMUBvcGVuc3NoLmNvbScpO1xuXHRpZiAoa2V5LnR5cGUgPT09ICdkc2EnKVxuXHRcdHJldHVybiAoJ3NzaC1kc3MtY2VydC12MDFAb3BlbnNzaC5jb20nKTtcblx0aWYgKGtleS50eXBlID09PSAnZWNkc2EnKVxuXHRcdHJldHVybiAoJ2VjZHNhLXNoYTItJyArIGtleS5jdXJ2ZSArICctY2VydC12MDFAb3BlbnNzaC5jb20nKTtcblx0aWYgKGtleS50eXBlID09PSAnZWQyNTUxOScpXG5cdFx0cmV0dXJuICgnc3NoLWVkMjU1MTktY2VydC12MDFAb3BlbnNzaC5jb20nKTtcblx0dGhyb3cgKG5ldyBFcnJvcignVW5zdXBwb3J0ZWQga2V5IHR5cGUgJyArIGtleS50eXBlKSk7XG59XG4iLCIvLyBDb3B5cmlnaHQgMjAxNiBKb3llbnQsIEluYy5cblxudmFyIHg1MDkgPSByZXF1aXJlKCcuL3g1MDknKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHJlYWQ6IHJlYWQsXG5cdHZlcmlmeTogeDUwOS52ZXJpZnksXG5cdHNpZ246IHg1MDkuc2lnbixcblx0d3JpdGU6IHdyaXRlXG59O1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBhc24xID0gcmVxdWlyZSgnYXNuMScpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBhbGdzID0gcmVxdWlyZSgnLi4vYWxncycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBLZXkgPSByZXF1aXJlKCcuLi9rZXknKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi4vcHJpdmF0ZS1rZXknKTtcbnZhciBwZW0gPSByZXF1aXJlKCcuL3BlbScpO1xudmFyIElkZW50aXR5ID0gcmVxdWlyZSgnLi4vaWRlbnRpdHknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuLi9zaWduYXR1cmUnKTtcbnZhciBDZXJ0aWZpY2F0ZSA9IHJlcXVpcmUoJy4uL2NlcnRpZmljYXRlJyk7XG5cbmZ1bmN0aW9uIHJlYWQoYnVmLCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgKGJ1ZikgIT09ICdzdHJpbmcnKSB7XG5cdFx0YXNzZXJ0LmJ1ZmZlcihidWYsICdidWYnKTtcblx0XHRidWYgPSBidWYudG9TdHJpbmcoJ2FzY2lpJyk7XG5cdH1cblxuXHR2YXIgbGluZXMgPSBidWYudHJpbSgpLnNwbGl0KC9bXFxyXFxuXSsvZyk7XG5cblx0dmFyIG07XG5cdHZhciBzaSA9IC0xO1xuXHR3aGlsZSAoIW0gJiYgc2kgPCBsaW5lcy5sZW5ndGgpIHtcblx0XHRtID0gbGluZXNbKytzaV0ubWF0Y2goLypKU1NUWUxFRCovXG5cdFx0ICAgIC9bLV0rWyBdKkJFR0lOIENFUlRJRklDQVRFWyBdKlstXSsvKTtcblx0fVxuXHRhc3NlcnQub2sobSwgJ2ludmFsaWQgUEVNIGhlYWRlcicpO1xuXG5cdHZhciBtMjtcblx0dmFyIGVpID0gbGluZXMubGVuZ3RoO1xuXHR3aGlsZSAoIW0yICYmIGVpID4gMCkge1xuXHRcdG0yID0gbGluZXNbLS1laV0ubWF0Y2goLypKU1NUWUxFRCovXG5cdFx0ICAgIC9bLV0rWyBdKkVORCBDRVJUSUZJQ0FURVsgXSpbLV0rLyk7XG5cdH1cblx0YXNzZXJ0Lm9rKG0yLCAnaW52YWxpZCBQRU0gZm9vdGVyJyk7XG5cblx0bGluZXMgPSBsaW5lcy5zbGljZShzaSwgZWkgKyAxKTtcblxuXHR2YXIgaGVhZGVycyA9IHt9O1xuXHR3aGlsZSAodHJ1ZSkge1xuXHRcdGxpbmVzID0gbGluZXMuc2xpY2UoMSk7XG5cdFx0bSA9IGxpbmVzWzBdLm1hdGNoKC8qSlNTVFlMRUQqL1xuXHRcdCAgICAvXihbQS1aYS16MC05LV0rKTogKC4rKSQvKTtcblx0XHRpZiAoIW0pXG5cdFx0XHRicmVhaztcblx0XHRoZWFkZXJzW21bMV0udG9Mb3dlckNhc2UoKV0gPSBtWzJdO1xuXHR9XG5cblx0LyogQ2hvcCBvZmYgdGhlIGZpcnN0IGFuZCBsYXN0IGxpbmVzICovXG5cdGxpbmVzID0gbGluZXMuc2xpY2UoMCwgLTEpLmpvaW4oJycpO1xuXHRidWYgPSBCdWZmZXIuZnJvbShsaW5lcywgJ2Jhc2U2NCcpO1xuXG5cdHJldHVybiAoeDUwOS5yZWFkKGJ1Ziwgb3B0aW9ucykpO1xufVxuXG5mdW5jdGlvbiB3cml0ZShjZXJ0LCBvcHRpb25zKSB7XG5cdHZhciBkYnVmID0geDUwOS53cml0ZShjZXJ0LCBvcHRpb25zKTtcblxuXHR2YXIgaGVhZGVyID0gJ0NFUlRJRklDQVRFJztcblx0dmFyIHRtcCA9IGRidWYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXHR2YXIgbGVuID0gdG1wLmxlbmd0aCArICh0bXAubGVuZ3RoIC8gNjQpICtcblx0ICAgIDE4ICsgMTYgKyBoZWFkZXIubGVuZ3RoKjIgKyAxMDtcblx0dmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYyhsZW4pO1xuXHR2YXIgbyA9IDA7XG5cdG8gKz0gYnVmLndyaXRlKCctLS0tLUJFR0lOICcgKyBoZWFkZXIgKyAnLS0tLS1cXG4nLCBvKTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0bXAubGVuZ3RoOyApIHtcblx0XHR2YXIgbGltaXQgPSBpICsgNjQ7XG5cdFx0aWYgKGxpbWl0ID4gdG1wLmxlbmd0aClcblx0XHRcdGxpbWl0ID0gdG1wLmxlbmd0aDtcblx0XHRvICs9IGJ1Zi53cml0ZSh0bXAuc2xpY2UoaSwgbGltaXQpLCBvKTtcblx0XHRidWZbbysrXSA9IDEwO1xuXHRcdGkgPSBsaW1pdDtcblx0fVxuXHRvICs9IGJ1Zi53cml0ZSgnLS0tLS1FTkQgJyArIGhlYWRlciArICctLS0tLVxcbicsIG8pO1xuXG5cdHJldHVybiAoYnVmLnNsaWNlKDAsIG8pKTtcbn1cbiIsIi8vIENvcHlyaWdodCAyMDEyIEpveWVudCwgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIHNzaHBrID0gcmVxdWlyZSgnc3NocGsnKTtcbnZhciBqc3ByaW0gPSByZXF1aXJlKCdqc3ByaW0nKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIHNwcmludGYgPSByZXF1aXJlKCd1dGlsJykuZm9ybWF0O1xuXG52YXIgSEFTSF9BTEdPUyA9IHV0aWxzLkhBU0hfQUxHT1M7XG52YXIgUEtfQUxHT1MgPSB1dGlscy5QS19BTEdPUztcbnZhciBJbnZhbGlkQWxnb3JpdGhtRXJyb3IgPSB1dGlscy5JbnZhbGlkQWxnb3JpdGhtRXJyb3I7XG52YXIgSHR0cFNpZ25hdHVyZUVycm9yID0gdXRpbHMuSHR0cFNpZ25hdHVyZUVycm9yO1xudmFyIHZhbGlkYXRlQWxnb3JpdGhtID0gdXRpbHMudmFsaWRhdGVBbGdvcml0aG07XG5cbi8vLy0tLSBHbG9iYWxzXG5cbnZhciBBVVRIWl9GTVQgPVxuICAnU2lnbmF0dXJlIGtleUlkPVwiJXNcIixhbGdvcml0aG09XCIlc1wiLGhlYWRlcnM9XCIlc1wiLHNpZ25hdHVyZT1cIiVzXCInO1xuXG4vLy8tLS0gU3BlY2lmaWMgRXJyb3JzXG5cbmZ1bmN0aW9uIE1pc3NpbmdIZWFkZXJFcnJvcihtZXNzYWdlKSB7XG4gIEh0dHBTaWduYXR1cmVFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UsIE1pc3NpbmdIZWFkZXJFcnJvcik7XG59XG51dGlsLmluaGVyaXRzKE1pc3NpbmdIZWFkZXJFcnJvciwgSHR0cFNpZ25hdHVyZUVycm9yKTtcblxuZnVuY3Rpb24gU3RyaWN0UGFyc2luZ0Vycm9yKG1lc3NhZ2UpIHtcbiAgSHR0cFNpZ25hdHVyZUVycm9yLmNhbGwodGhpcywgbWVzc2FnZSwgU3RyaWN0UGFyc2luZ0Vycm9yKTtcbn1cbnV0aWwuaW5oZXJpdHMoU3RyaWN0UGFyc2luZ0Vycm9yLCBIdHRwU2lnbmF0dXJlRXJyb3IpO1xuXG4vKiBTZWUgY3JlYXRlU2lnbmVyKCkgKi9cbmZ1bmN0aW9uIFJlcXVlc3RTaWduZXIob3B0aW9ucykge1xuICBhc3NlcnQub2JqZWN0KG9wdGlvbnMsICdvcHRpb25zJyk7XG5cbiAgdmFyIGFsZyA9IFtdO1xuICBpZiAob3B0aW9ucy5hbGdvcml0aG0gIT09IHVuZGVmaW5lZCkge1xuICAgIGFzc2VydC5zdHJpbmcob3B0aW9ucy5hbGdvcml0aG0sICdvcHRpb25zLmFsZ29yaXRobScpO1xuICAgIGFsZyA9IHZhbGlkYXRlQWxnb3JpdGhtKG9wdGlvbnMuYWxnb3JpdGhtKTtcbiAgfVxuICB0aGlzLnJzX2FsZyA9IGFsZztcblxuICAvKlxuICAgKiBSZXF1ZXN0U2lnbmVycyBjb21lIGluIHR3byB2YXJpZXRpZXM6IG9uZXMgd2l0aCBhbiByc19zaWduRnVuYywgYW5kIG9uZXNcbiAgICogd2l0aCBhbiByc19zaWduZXIuXG4gICAqXG4gICAqIHJzX3NpZ25GdW5jLWJhc2VkIFJlcXVlc3RTaWduZXJzIGhhdmUgdG8gYnVpbGQgdXAgdGhlaXIgZW50aXJlIHNpZ25pbmdcbiAgICogc3RyaW5nIHdpdGhpbiB0aGUgcnNfbGluZXMgYXJyYXkgYW5kIGdpdmUgaXQgdG8gcnNfc2lnbkZ1bmMgYXMgYSBzaW5nbGVcbiAgICogY29uY2F0J2QgYmxvYi4gcnNfc2lnbmVyLWJhc2VkIFJlcXVlc3RTaWduZXJzIGNhbiBhZGQgYSBsaW5lIGF0IGEgdGltZSB0b1xuICAgKiB0aGVpciBzaWduaW5nIHN0YXRlIGJ5IHVzaW5nIHJzX3NpZ25lci51cGRhdGUoKSwgdGh1cyBvbmx5IG5lZWRpbmcgdG9cbiAgICogYnVmZmVyIHRoZSBoYXNoIGZ1bmN0aW9uIHN0YXRlIGFuZCBvbmUgbGluZSBhdCBhIHRpbWUuXG4gICAqL1xuICBpZiAob3B0aW9ucy5zaWduICE9PSB1bmRlZmluZWQpIHtcbiAgICBhc3NlcnQuZnVuYyhvcHRpb25zLnNpZ24sICdvcHRpb25zLnNpZ24nKTtcbiAgICB0aGlzLnJzX3NpZ25GdW5jID0gb3B0aW9ucy5zaWduO1xuXG4gIH0gZWxzZSBpZiAoYWxnWzBdID09PSAnaG1hYycgJiYgb3B0aW9ucy5rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgIGFzc2VydC5zdHJpbmcob3B0aW9ucy5rZXlJZCwgJ29wdGlvbnMua2V5SWQnKTtcbiAgICB0aGlzLnJzX2tleUlkID0gb3B0aW9ucy5rZXlJZDtcblxuICAgIGlmICh0eXBlb2YgKG9wdGlvbnMua2V5KSAhPT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0J1ZmZlcihvcHRpb25zLmtleSkpXG4gICAgICB0aHJvdyAobmV3IFR5cGVFcnJvcignb3B0aW9ucy5rZXkgZm9yIEhNQUMgbXVzdCBiZSBhIHN0cmluZyBvciBCdWZmZXInKSk7XG5cbiAgICAvKlxuICAgICAqIE1ha2UgYW4gcnNfc2lnbmVyIGZvciBITUFDcywgbm90IGEgcnNfc2lnbkZ1bmMgLS0gSE1BQ3MgZGlnZXN0IHRoZWlyXG4gICAgICogZGF0YSBpbiBjaHVua3MgcmF0aGVyIHRoYW4gcmVxdWlyaW5nIGl0IGFsbCB0byBiZSBnaXZlbiBpbiBvbmUgZ29cbiAgICAgKiBhdCB0aGUgZW5kLCBzbyB0aGV5IGFyZSBtb3JlIHNpbWlsYXIgdG8gc2lnbmVycyB0aGFuIHNpZ25GdW5jcy5cbiAgICAgKi9cbiAgICB0aGlzLnJzX3NpZ25lciA9IGNyeXB0by5jcmVhdGVIbWFjKGFsZ1sxXS50b1VwcGVyQ2FzZSgpLCBvcHRpb25zLmtleSk7XG4gICAgdGhpcy5yc19zaWduZXIuc2lnbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkaWdlc3QgPSB0aGlzLmRpZ2VzdCgnYmFzZTY0Jyk7XG4gICAgICByZXR1cm4gKHtcbiAgICAgICAgaGFzaEFsZ29yaXRobTogYWxnWzFdLFxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gKGRpZ2VzdCk7IH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgfSBlbHNlIGlmIChvcHRpb25zLmtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGtleSA9IG9wdGlvbnMua2V5O1xuICAgIGlmICh0eXBlb2YgKGtleSkgPT09ICdzdHJpbmcnIHx8IEJ1ZmZlci5pc0J1ZmZlcihrZXkpKVxuICAgICAga2V5ID0gc3NocGsucGFyc2VQcml2YXRlS2V5KGtleSk7XG5cbiAgICBhc3NlcnQub2soc3NocGsuUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5LCBbMSwgMl0pLFxuICAgICAgJ29wdGlvbnMua2V5IG11c3QgYmUgYSBzc2hway5Qcml2YXRlS2V5Jyk7XG4gICAgdGhpcy5yc19rZXkgPSBrZXk7XG5cbiAgICBhc3NlcnQuc3RyaW5nKG9wdGlvbnMua2V5SWQsICdvcHRpb25zLmtleUlkJyk7XG4gICAgdGhpcy5yc19rZXlJZCA9IG9wdGlvbnMua2V5SWQ7XG5cbiAgICBpZiAoIVBLX0FMR09TW2tleS50eXBlXSkge1xuICAgICAgdGhyb3cgKG5ldyBJbnZhbGlkQWxnb3JpdGhtRXJyb3Ioa2V5LnR5cGUudG9VcHBlckNhc2UoKSArICcgdHlwZSAnICtcbiAgICAgICAgJ2tleXMgYXJlIG5vdCBzdXBwb3J0ZWQnKSk7XG4gICAgfVxuXG4gICAgaWYgKGFsZ1swXSAhPT0gdW5kZWZpbmVkICYmIGtleS50eXBlICE9PSBhbGdbMF0pIHtcbiAgICAgIHRocm93IChuZXcgSW52YWxpZEFsZ29yaXRobUVycm9yKCdvcHRpb25zLmtleSBtdXN0IGJlIGEgJyArXG4gICAgICAgIGFsZ1swXS50b1VwcGVyQ2FzZSgpICsgJyBrZXksIHdhcyBnaXZlbiBhICcgK1xuICAgICAgICBrZXkudHlwZS50b1VwcGVyQ2FzZSgpICsgJyBrZXkgaW5zdGVhZCcpKTtcbiAgICB9XG5cbiAgICB0aGlzLnJzX3NpZ25lciA9IGtleS5jcmVhdGVTaWduKGFsZ1sxXSk7XG5cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyAobmV3IFR5cGVFcnJvcignb3B0aW9ucy5zaWduIChmdW5jKSBvciBvcHRpb25zLmtleSBpcyByZXF1aXJlZCcpKTtcbiAgfVxuXG4gIHRoaXMucnNfaGVhZGVycyA9IFtdO1xuICB0aGlzLnJzX2xpbmVzID0gW107XG59XG5cbi8qKlxuICogQWRkcyBhIGhlYWRlciB0byBiZSBzaWduZWQsIHdpdGggaXRzIHZhbHVlLCBpbnRvIHRoaXMgc2lnbmVyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfSB2YWx1ZSB3cml0dGVuXG4gKi9cblJlcXVlc3RTaWduZXIucHJvdG90eXBlLndyaXRlSGVhZGVyID0gZnVuY3Rpb24gKGhlYWRlciwgdmFsdWUpIHtcbiAgYXNzZXJ0LnN0cmluZyhoZWFkZXIsICdoZWFkZXInKTtcbiAgaGVhZGVyID0gaGVhZGVyLnRvTG93ZXJDYXNlKCk7XG4gIGFzc2VydC5zdHJpbmcodmFsdWUsICd2YWx1ZScpO1xuXG4gIHRoaXMucnNfaGVhZGVycy5wdXNoKGhlYWRlcik7XG5cbiAgaWYgKHRoaXMucnNfc2lnbkZ1bmMpIHtcbiAgICB0aGlzLnJzX2xpbmVzLnB1c2goaGVhZGVyICsgJzogJyArIHZhbHVlKTtcblxuICB9IGVsc2Uge1xuICAgIHZhciBsaW5lID0gaGVhZGVyICsgJzogJyArIHZhbHVlO1xuICAgIGlmICh0aGlzLnJzX2hlYWRlcnMubGVuZ3RoID4gMClcbiAgICAgIGxpbmUgPSAnXFxuJyArIGxpbmU7XG4gICAgdGhpcy5yc19zaWduZXIudXBkYXRlKGxpbmUpO1xuICB9XG5cbiAgcmV0dXJuICh2YWx1ZSk7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBkZWZhdWx0IERhdGUgaGVhZGVyLCByZXR1cm5pbmcgaXRzIHZhbHVlLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuUmVxdWVzdFNpZ25lci5wcm90b3R5cGUud3JpdGVEYXRlSGVhZGVyID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKHRoaXMud3JpdGVIZWFkZXIoJ2RhdGUnLCBqc3ByaW0ucmZjMTEyMyhuZXcgRGF0ZSgpKSkpO1xufTtcblxuLyoqXG4gKiBBZGRzIHRoZSByZXF1ZXN0IHRhcmdldCBsaW5lIHRvIGJlIHNpZ25lZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kLCBIVFRQIG1ldGhvZCAoZS5nLiAnZ2V0JywgJ3Bvc3QnLCAncHV0JylcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKi9cblJlcXVlc3RTaWduZXIucHJvdG90eXBlLndyaXRlVGFyZ2V0ID0gZnVuY3Rpb24gKG1ldGhvZCwgcGF0aCkge1xuICBhc3NlcnQuc3RyaW5nKG1ldGhvZCwgJ21ldGhvZCcpO1xuICBhc3NlcnQuc3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gIG1ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB0aGlzLndyaXRlSGVhZGVyKCcocmVxdWVzdC10YXJnZXQpJywgbWV0aG9kICsgJyAnICsgcGF0aCk7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgdmFsdWUgZm9yIHRoZSBBdXRob3JpemF0aW9uIGhlYWRlciBvbiB0aGlzIHJlcXVlc3RcbiAqIGFzeW5jaHJvbm91c2x5LlxuICpcbiAqIEBwYXJhbSB7RnVuY30gY2FsbGJhY2sgKGVyciwgYXV0aHopXG4gKi9cblJlcXVlc3RTaWduZXIucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiAoY2IpIHtcbiAgYXNzZXJ0LmZ1bmMoY2IsICdjYWxsYmFjaycpO1xuXG4gIGlmICh0aGlzLnJzX2hlYWRlcnMubGVuZ3RoIDwgMSlcbiAgICB0aHJvdyAobmV3IEVycm9yKCdBdCBsZWFzdCBvbmUgaGVhZGVyIG11c3QgYmUgc2lnbmVkJykpO1xuXG4gIHZhciBhbGcsIGF1dGh6O1xuICBpZiAodGhpcy5yc19zaWduRnVuYykge1xuICAgIHZhciBkYXRhID0gdGhpcy5yc19saW5lcy5qb2luKCdcXG4nKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5yc19zaWduRnVuYyhkYXRhLCBmdW5jdGlvbiAoZXJyLCBzaWcpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgYXNzZXJ0Lm9iamVjdChzaWcsICdzaWduYXR1cmUnKTtcbiAgICAgICAgYXNzZXJ0LnN0cmluZyhzaWcua2V5SWQsICdzaWduYXR1cmUua2V5SWQnKTtcbiAgICAgICAgYXNzZXJ0LnN0cmluZyhzaWcuYWxnb3JpdGhtLCAnc2lnbmF0dXJlLmFsZ29yaXRobScpO1xuICAgICAgICBhc3NlcnQuc3RyaW5nKHNpZy5zaWduYXR1cmUsICdzaWduYXR1cmUuc2lnbmF0dXJlJyk7XG4gICAgICAgIGFsZyA9IHZhbGlkYXRlQWxnb3JpdGhtKHNpZy5hbGdvcml0aG0pO1xuXG4gICAgICAgIGF1dGh6ID0gc3ByaW50ZihBVVRIWl9GTVQsXG4gICAgICAgICAgc2lnLmtleUlkLFxuICAgICAgICAgIHNpZy5hbGdvcml0aG0sXG4gICAgICAgICAgc2VsZi5yc19oZWFkZXJzLmpvaW4oJyAnKSxcbiAgICAgICAgICBzaWcuc2lnbmF0dXJlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2IoZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNiKG51bGwsIGF1dGh6KTtcbiAgICB9KTtcblxuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICB2YXIgc2lnT2JqID0gdGhpcy5yc19zaWduZXIuc2lnbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNiKGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbGcgPSAodGhpcy5yc19hbGdbMF0gfHwgdGhpcy5yc19rZXkudHlwZSkgKyAnLScgKyBzaWdPYmouaGFzaEFsZ29yaXRobTtcbiAgICB2YXIgc2lnbmF0dXJlID0gc2lnT2JqLnRvU3RyaW5nKCk7XG4gICAgYXV0aHogPSBzcHJpbnRmKEFVVEhaX0ZNVCxcbiAgICAgIHRoaXMucnNfa2V5SWQsXG4gICAgICBhbGcsXG4gICAgICB0aGlzLnJzX2hlYWRlcnMuam9pbignICcpLFxuICAgICAgc2lnbmF0dXJlKTtcbiAgICBjYihudWxsLCBhdXRoeik7XG4gIH1cbn07XG5cbi8vLy0tLSBFeHBvcnRlZCBBUElcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBJZGVudGlmaWVzIHdoZXRoZXIgYSBnaXZlbiBvYmplY3QgaXMgYSByZXF1ZXN0IHNpZ25lciBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QsIHRoZSBvYmplY3QgdG8gaWRlbnRpZnlcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBpc1NpZ25lcjogZnVuY3Rpb24gKG9iaikge1xuICAgIGlmICh0eXBlb2YgKG9iaikgPT09ICdvYmplY3QnICYmIG9iaiBpbnN0YW5jZW9mIFJlcXVlc3RTaWduZXIpXG4gICAgICByZXR1cm4gKHRydWUpO1xuICAgIHJldHVybiAoZmFsc2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcmVxdWVzdCBzaWduZXIsIHVzZWQgdG8gYXN5bmNocm9ub3VzbHkgYnVpbGQgYSBzaWduYXR1cmVcbiAgICogZm9yIGEgcmVxdWVzdCAoZG9lcyBub3QgaGF2ZSB0byBiZSBhbiBodHRwLkNsaWVudFJlcXVlc3QpLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucywgZWl0aGVyOlxuICAgKiAgICAgICAgICAgICAgICAgICAtIHtTdHJpbmd9IGtleUlkXG4gICAqICAgICAgICAgICAgICAgICAgIC0ge1N0cmluZ3xCdWZmZXJ9IGtleVxuICAgKiAgICAgICAgICAgICAgICAgICAtIHtTdHJpbmd9IGFsZ29yaXRobSAob3B0aW9uYWwsIHJlcXVpcmVkIGZvciBITUFDKVxuICAgKiAgICAgICAgICAgICAgICAgb3I6XG4gICAqICAgICAgICAgICAgICAgICAgIC0ge0Z1bmN9IHNpZ24gKGRhdGEsIGNiKVxuICAgKiBAcmV0dXJuIHtSZXF1ZXN0U2lnbmVyfVxuICAgKi9cbiAgY3JlYXRlU2lnbmVyOiBmdW5jdGlvbiBjcmVhdGVTaWduZXIob3B0aW9ucykge1xuICAgIHJldHVybiAobmV3IFJlcXVlc3RTaWduZXIob3B0aW9ucykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGFuICdBdXRob3JpemF0aW9uJyBoZWFkZXIgdG8gYW4gaHR0cC5DbGllbnRSZXF1ZXN0IG9iamVjdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgQVBJIHdpbGwgYWRkIGEgRGF0ZSBoZWFkZXIgaWYgaXQncyBub3QgYWxyZWFkeSBzZXQuIEFueVxuICAgKiBvdGhlciBoZWFkZXJzIGluIHRoZSBvcHRpb25zLmhlYWRlcnMgYXJyYXkgTVVTVCBiZSBwcmVzZW50LCBvciB0aGlzXG4gICAqIHdpbGwgdGhyb3cuXG4gICAqXG4gICAqIFlvdSBzaG91bGRuJ3QgbmVlZCB0byBjaGVjayB0aGUgcmV0dXJuIHR5cGU7IGl0J3MganVzdCB0aGVyZSBpZiB5b3Ugd2FudFxuICAgKiB0byBiZSBwZWRhbnRpYy5cbiAgICpcbiAgICogVGhlIG9wdGlvbmFsIGZsYWcgaW5kaWNhdGVzIHdoZXRoZXIgcGFyc2luZyBzaG91bGQgdXNlIHN0cmljdCBlbmZvcmNlbWVudFxuICAgKiBvZiB0aGUgdmVyc2lvbiBkcmFmdC1jYXZhZ2UtaHR0cC1zaWduYXR1cmVzLTA0IG9mIHRoZSBzcGVjIG9yIGJleW9uZC5cbiAgICogVGhlIGRlZmF1bHQgaXMgdG8gYmUgbG9vc2UgYW5kIHN1cHBvcnRcbiAgICogb2xkZXIgdmVyc2lvbnMgZm9yIGNvbXBhdGliaWxpdHkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXF1ZXN0IGFuIGluc3RhbmNlIG9mIGh0dHAuQ2xpZW50UmVxdWVzdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgc2lnbmluZyBwYXJhbWV0ZXJzIG9iamVjdDpcbiAgICogICAgICAgICAgICAgICAgICAgLSB7U3RyaW5nfSBrZXlJZCByZXF1aXJlZC5cbiAgICogICAgICAgICAgICAgICAgICAgLSB7U3RyaW5nfSBrZXkgcmVxdWlyZWQgKGVpdGhlciBhIFBFTSBvciBITUFDIGtleSkuXG4gICAqICAgICAgICAgICAgICAgICAgIC0ge0FycmF5fSBoZWFkZXJzIG9wdGlvbmFsOyBkZWZhdWx0cyB0byBbJ2RhdGUnXS5cbiAgICogICAgICAgICAgICAgICAgICAgLSB7U3RyaW5nfSBhbGdvcml0aG0gb3B0aW9uYWwgKHVubGVzcyBrZXkgaXMgSE1BQyk7XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCBpcyB0aGUgc2FtZSBhcyB0aGUgc3NocGsgZGVmYXVsdFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25pbmcgYWxnb3JpdGhtIGZvciB0aGUgdHlwZSBvZiBrZXkgZ2l2ZW5cbiAgICogICAgICAgICAgICAgICAgICAgLSB7U3RyaW5nfSBodHRwVmVyc2lvbiBvcHRpb25hbDsgZGVmYXVsdHMgdG8gJzEuMScuXG4gICAqICAgICAgICAgICAgICAgICAgIC0ge0Jvb2xlYW59IHN0cmljdCBvcHRpb25hbDsgZGVmYXVsdHMgdG8gJ2ZhbHNlJy5cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBBdXRob3JpemF0aW9uIChhbmQgb3B0aW9uYWxseSBEYXRlKSB3ZXJlIGFkZGVkLlxuICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IG9uIGJhZCBwYXJhbWV0ZXIgdHlwZXMgKGlucHV0KS5cbiAgICogQHRocm93cyB7SW52YWxpZEFsZ29yaXRobUVycm9yfSBpZiBhbGdvcml0aG0gd2FzIGJhZCBvciBpbmNvbXBhdGlibGUgd2l0aFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBnaXZlbiBrZXkuXG4gICAqIEB0aHJvd3Mge3NzaHBrLktleVBhcnNlRXJyb3J9IGlmIGtleSB3YXMgYmFkLlxuICAgKiBAdGhyb3dzIHtNaXNzaW5nSGVhZGVyRXJyb3J9IGlmIGEgaGVhZGVyIHRvIGJlIHNpZ25lZCB3YXMgc3BlY2lmaWVkIGJ1dFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBub3QgcHJlc2VudC5cbiAgICovXG4gIHNpZ25SZXF1ZXN0OiBmdW5jdGlvbiBzaWduUmVxdWVzdChyZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgYXNzZXJ0Lm9iamVjdChyZXF1ZXN0LCAncmVxdWVzdCcpO1xuICAgIGFzc2VydC5vYmplY3Qob3B0aW9ucywgJ29wdGlvbnMnKTtcbiAgICBhc3NlcnQub3B0aW9uYWxTdHJpbmcob3B0aW9ucy5hbGdvcml0aG0sICdvcHRpb25zLmFsZ29yaXRobScpO1xuICAgIGFzc2VydC5zdHJpbmcob3B0aW9ucy5rZXlJZCwgJ29wdGlvbnMua2V5SWQnKTtcbiAgICBhc3NlcnQub3B0aW9uYWxBcnJheU9mU3RyaW5nKG9wdGlvbnMuaGVhZGVycywgJ29wdGlvbnMuaGVhZGVycycpO1xuICAgIGFzc2VydC5vcHRpb25hbFN0cmluZyhvcHRpb25zLmh0dHBWZXJzaW9uLCAnb3B0aW9ucy5odHRwVmVyc2lvbicpO1xuXG4gICAgaWYgKCFyZXF1ZXN0LmdldEhlYWRlcignRGF0ZScpKVxuICAgICAgcmVxdWVzdC5zZXRIZWFkZXIoJ0RhdGUnLCBqc3ByaW0ucmZjMTEyMyhuZXcgRGF0ZSgpKSk7XG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpXG4gICAgICBvcHRpb25zLmhlYWRlcnMgPSBbJ2RhdGUnXTtcbiAgICBpZiAoIW9wdGlvbnMuaHR0cFZlcnNpb24pXG4gICAgICBvcHRpb25zLmh0dHBWZXJzaW9uID0gJzEuMSc7XG5cbiAgICB2YXIgYWxnID0gW107XG4gICAgaWYgKG9wdGlvbnMuYWxnb3JpdGhtKSB7XG4gICAgICBvcHRpb25zLmFsZ29yaXRobSA9IG9wdGlvbnMuYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCk7XG4gICAgICBhbGcgPSB2YWxpZGF0ZUFsZ29yaXRobShvcHRpb25zLmFsZ29yaXRobSk7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIHN0cmluZ1RvU2lnbiA9ICcnO1xuICAgIGZvciAoaSA9IDA7IGkgPCBvcHRpb25zLmhlYWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0eXBlb2YgKG9wdGlvbnMuaGVhZGVyc1tpXSkgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zLmhlYWRlcnMgbXVzdCBiZSBhbiBhcnJheSBvZiBTdHJpbmdzJyk7XG5cbiAgICAgIHZhciBoID0gb3B0aW9ucy5oZWFkZXJzW2ldLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmIChoID09PSAncmVxdWVzdC1saW5lJykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogV2UgYWxsb3cgaGVhZGVycyBmcm9tIHRoZSBvbGRlciBzcGVjIGRyYWZ0cyBpZiBzdHJpY3QgcGFyc2luZyBpc24ndFxuICAgICAgICAgICAqIHNwZWNpZmllZCBpbiBvcHRpb25zLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHN0cmluZ1RvU2lnbiArPVxuICAgICAgICAgICAgcmVxdWVzdC5tZXRob2QgKyAnICcgKyByZXF1ZXN0LnBhdGggKyAnIEhUVFAvJyArXG4gICAgICAgICAgICBvcHRpb25zLmh0dHBWZXJzaW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8qIFN0cmljdCBwYXJzaW5nIGRvZXNuJ3QgYWxsb3cgb2xkZXIgZHJhZnQgaGVhZGVycy4gKi9cbiAgICAgICAgICB0aHJvdyAobmV3IFN0cmljdFBhcnNpbmdFcnJvcigncmVxdWVzdC1saW5lIGlzIG5vdCBhIHZhbGlkIGhlYWRlciAnICtcbiAgICAgICAgICAgICd3aXRoIHN0cmljdCBwYXJzaW5nIGVuYWJsZWQuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGggPT09ICcocmVxdWVzdC10YXJnZXQpJykge1xuICAgICAgICBzdHJpbmdUb1NpZ24gKz1cbiAgICAgICAgICAnKHJlcXVlc3QtdGFyZ2V0KTogJyArIHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCkgKyAnICcgK1xuICAgICAgICAgIHJlcXVlc3QucGF0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlcXVlc3QuZ2V0SGVhZGVyKGgpO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0hlYWRlckVycm9yKGggKyAnIHdhcyBub3QgaW4gdGhlIHJlcXVlc3QnKTtcbiAgICAgICAgfVxuICAgICAgICBzdHJpbmdUb1NpZ24gKz0gaCArICc6ICcgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpICsgMSkgPCBvcHRpb25zLmhlYWRlcnMubGVuZ3RoKVxuICAgICAgICBzdHJpbmdUb1NpZ24gKz0gJ1xcbic7XG4gICAgfVxuXG4gICAgLyogVGhpcyBpcyBqdXN0IGZvciB1bml0IHRlc3RzLiAqL1xuICAgIGlmIChyZXF1ZXN0Lmhhc093blByb3BlcnR5KCdfc3RyaW5nVG9TaWduJykpIHtcbiAgICAgIHJlcXVlc3QuX3N0cmluZ1RvU2lnbiA9IHN0cmluZ1RvU2lnbjtcbiAgICB9XG5cbiAgICB2YXIgc2lnbmF0dXJlO1xuICAgIGlmIChhbGdbMF0gPT09ICdobWFjJykge1xuICAgICAgaWYgKHR5cGVvZiAob3B0aW9ucy5rZXkpICE9PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzQnVmZmVyKG9wdGlvbnMua2V5KSlcbiAgICAgICAgdGhyb3cgKG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMua2V5IG11c3QgYmUgYSBzdHJpbmcgb3IgQnVmZmVyJykpO1xuXG4gICAgICB2YXIgaG1hYyA9IGNyeXB0by5jcmVhdGVIbWFjKGFsZ1sxXS50b1VwcGVyQ2FzZSgpLCBvcHRpb25zLmtleSk7XG4gICAgICBobWFjLnVwZGF0ZShzdHJpbmdUb1NpZ24pO1xuICAgICAgc2lnbmF0dXJlID0gaG1hYy5kaWdlc3QoJ2Jhc2U2NCcpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXkgPSBvcHRpb25zLmtleTtcbiAgICAgIGlmICh0eXBlb2YgKGtleSkgPT09ICdzdHJpbmcnIHx8IEJ1ZmZlci5pc0J1ZmZlcihrZXkpKVxuICAgICAgICBrZXkgPSBzc2hway5wYXJzZVByaXZhdGVLZXkob3B0aW9ucy5rZXkpO1xuXG4gICAgICBhc3NlcnQub2soc3NocGsuUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5LCBbMSwgMl0pLFxuICAgICAgICAnb3B0aW9ucy5rZXkgbXVzdCBiZSBhIHNzaHBrLlByaXZhdGVLZXknKTtcblxuICAgICAgaWYgKCFQS19BTEdPU1trZXkudHlwZV0pIHtcbiAgICAgICAgdGhyb3cgKG5ldyBJbnZhbGlkQWxnb3JpdGhtRXJyb3Ioa2V5LnR5cGUudG9VcHBlckNhc2UoKSArICcgdHlwZSAnICtcbiAgICAgICAgICAna2V5cyBhcmUgbm90IHN1cHBvcnRlZCcpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFsZ1swXSAhPT0gdW5kZWZpbmVkICYmIGtleS50eXBlICE9PSBhbGdbMF0pIHtcbiAgICAgICAgdGhyb3cgKG5ldyBJbnZhbGlkQWxnb3JpdGhtRXJyb3IoJ29wdGlvbnMua2V5IG11c3QgYmUgYSAnICtcbiAgICAgICAgICBhbGdbMF0udG9VcHBlckNhc2UoKSArICcga2V5LCB3YXMgZ2l2ZW4gYSAnICtcbiAgICAgICAgICBrZXkudHlwZS50b1VwcGVyQ2FzZSgpICsgJyBrZXkgaW5zdGVhZCcpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpZ25lciA9IGtleS5jcmVhdGVTaWduKGFsZ1sxXSk7XG4gICAgICBzaWduZXIudXBkYXRlKHN0cmluZ1RvU2lnbik7XG4gICAgICB2YXIgc2lnT2JqID0gc2lnbmVyLnNpZ24oKTtcbiAgICAgIGlmICghSEFTSF9BTEdPU1tzaWdPYmouaGFzaEFsZ29yaXRobV0pIHtcbiAgICAgICAgdGhyb3cgKG5ldyBJbnZhbGlkQWxnb3JpdGhtRXJyb3Ioc2lnT2JqLmhhc2hBbGdvcml0aG0udG9VcHBlckNhc2UoKSArXG4gICAgICAgICAgJyBpcyBub3QgYSBzdXBwb3J0ZWQgaGFzaCBhbGdvcml0aG0nKSk7XG4gICAgICB9XG4gICAgICBvcHRpb25zLmFsZ29yaXRobSA9IGtleS50eXBlICsgJy0nICsgc2lnT2JqLmhhc2hBbGdvcml0aG07XG4gICAgICBzaWduYXR1cmUgPSBzaWdPYmoudG9TdHJpbmcoKTtcbiAgICAgIGFzc2VydC5ub3RTdHJpY3RFcXVhbChzaWduYXR1cmUsICcnLCAnZW1wdHkgc2lnbmF0dXJlIHByb2R1Y2VkJyk7XG4gICAgfVxuXG4gICAgdmFyIGF1dGh6SGVhZGVyTmFtZSA9IG9wdGlvbnMuYXV0aG9yaXphdGlvbkhlYWRlck5hbWUgfHwgJ0F1dGhvcml6YXRpb24nO1xuXG4gICAgcmVxdWVzdC5zZXRIZWFkZXIoYXV0aHpIZWFkZXJOYW1lLCBzcHJpbnRmKEFVVEhaX0ZNVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5rZXlJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5hbGdvcml0aG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVycy5qb2luKCcgJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZSkpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxufTtcbiIsIi8qXG4gKiBsaWIvanNwcmltLmpzOiB1dGlsaXRpZXMgZm9yIHByaW1pdGl2ZSBKYXZhU2NyaXB0IHR5cGVzXG4gKi9cblxudmFyIG1vZF9hc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIG1vZF91dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgbW9kX2V4dHNwcmludGYgPSByZXF1aXJlKCdleHRzcHJpbnRmJyk7XG52YXIgbW9kX3ZlcnJvciA9IHJlcXVpcmUoJ3ZlcnJvcicpO1xudmFyIG1vZF9qc29uc2NoZW1hID0gcmVxdWlyZSgnanNvbi1zY2hlbWEnKTtcblxuLypcbiAqIFB1YmxpYyBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0cy5kZWVwQ29weSA9IGRlZXBDb3B5O1xuZXhwb3J0cy5kZWVwRXF1YWwgPSBkZWVwRXF1YWw7XG5leHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xuZXhwb3J0cy5oYXNLZXkgPSBoYXNLZXk7XG5leHBvcnRzLmZvckVhY2hLZXkgPSBmb3JFYWNoS2V5O1xuZXhwb3J0cy5wbHVjayA9IHBsdWNrO1xuZXhwb3J0cy5mbGF0dGVuT2JqZWN0ID0gZmxhdHRlbk9iamVjdDtcbmV4cG9ydHMuZmxhdHRlbkl0ZXIgPSBmbGF0dGVuSXRlcjtcbmV4cG9ydHMudmFsaWRhdGVKc29uT2JqZWN0ID0gdmFsaWRhdGVKc29uT2JqZWN0SlM7XG5leHBvcnRzLnZhbGlkYXRlSnNvbk9iamVjdEpTID0gdmFsaWRhdGVKc29uT2JqZWN0SlM7XG5leHBvcnRzLnJhbmRFbHQgPSByYW5kRWx0O1xuZXhwb3J0cy5leHRyYVByb3BlcnRpZXMgPSBleHRyYVByb3BlcnRpZXM7XG5leHBvcnRzLm1lcmdlT2JqZWN0cyA9IG1lcmdlT2JqZWN0cztcblxuZXhwb3J0cy5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbmV4cG9ydHMuZW5kc1dpdGggPSBlbmRzV2l0aDtcblxuZXhwb3J0cy5wYXJzZUludGVnZXIgPSBwYXJzZUludGVnZXI7XG5cbmV4cG9ydHMuaXNvODYwMSA9IGlzbzg2MDE7XG5leHBvcnRzLnJmYzExMjMgPSByZmMxMTIzO1xuZXhwb3J0cy5wYXJzZURhdGVUaW1lID0gcGFyc2VEYXRlVGltZTtcblxuZXhwb3J0cy5ocnRpbWVkaWZmID0gaHJ0aW1lRGlmZjtcbmV4cG9ydHMuaHJ0aW1lRGlmZiA9IGhydGltZURpZmY7XG5leHBvcnRzLmhydGltZUFjY3VtID0gaHJ0aW1lQWNjdW07XG5leHBvcnRzLmhydGltZUFkZCA9IGhydGltZUFkZDtcbmV4cG9ydHMuaHJ0aW1lTmFub3NlYyA9IGhydGltZU5hbm9zZWM7XG5leHBvcnRzLmhydGltZU1pY3Jvc2VjID0gaHJ0aW1lTWljcm9zZWM7XG5leHBvcnRzLmhydGltZU1pbGxpc2VjID0gaHJ0aW1lTWlsbGlzZWM7XG5cblxuLypcbiAqIERlZXAgY29weSBhbiBhY3ljbGljICpiYXNpYyogSmF2YXNjcmlwdCBvYmplY3QuICBUaGlzIG9ubHkgaGFuZGxlcyBiYXNpY1xuICogc2NhbGFycyAoc3RyaW5ncywgbnVtYmVycywgYm9vbGVhbnMpIGFuZCBhcmJpdHJhcmlseSBkZWVwIGFycmF5cyBhbmQgb2JqZWN0c1xuICogY29udGFpbmluZyB0aGVzZS4gIFRoaXMgZG9lcyAqbm90KiBoYW5kbGUgaW5zdGFuY2VzIG9mIG90aGVyIGNsYXNzZXMuXG4gKi9cbmZ1bmN0aW9uIGRlZXBDb3B5KG9iailcbntcblx0dmFyIHJldCwga2V5O1xuXHR2YXIgbWFya2VyID0gJ19fZGVlcENvcHknO1xuXG5cdGlmIChvYmogJiYgb2JqW21hcmtlcl0pXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignYXR0ZW1wdGVkIGRlZXAgY29weSBvZiBjeWNsaWMgb2JqZWN0JykpO1xuXG5cdGlmIChvYmogJiYgb2JqLmNvbnN0cnVjdG9yID09IE9iamVjdCkge1xuXHRcdHJldCA9IHt9O1xuXHRcdG9ialttYXJrZXJdID0gdHJ1ZTtcblxuXHRcdGZvciAoa2V5IGluIG9iaikge1xuXHRcdFx0aWYgKGtleSA9PSBtYXJrZXIpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRyZXRba2V5XSA9IGRlZXBDb3B5KG9ialtrZXldKTtcblx0XHR9XG5cblx0XHRkZWxldGUgKG9ialttYXJrZXJdKTtcblx0XHRyZXR1cm4gKHJldCk7XG5cdH1cblxuXHRpZiAob2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PSBBcnJheSkge1xuXHRcdHJldCA9IFtdO1xuXHRcdG9ialttYXJrZXJdID0gdHJ1ZTtcblxuXHRcdGZvciAoa2V5ID0gMDsga2V5IDwgb2JqLmxlbmd0aDsga2V5KyspXG5cdFx0XHRyZXQucHVzaChkZWVwQ29weShvYmpba2V5XSkpO1xuXG5cdFx0ZGVsZXRlIChvYmpbbWFya2VyXSk7XG5cdFx0cmV0dXJuIChyZXQpO1xuXHR9XG5cblx0Lypcblx0ICogSXQgbXVzdCBiZSBhIHByaW1pdGl2ZSB0eXBlIC0tIGp1c3QgcmV0dXJuIGl0LlxuXHQgKi9cblx0cmV0dXJuIChvYmopO1xufVxuXG5mdW5jdGlvbiBkZWVwRXF1YWwob2JqMSwgb2JqMilcbntcblx0aWYgKHR5cGVvZiAob2JqMSkgIT0gdHlwZW9mIChvYmoyKSlcblx0XHRyZXR1cm4gKGZhbHNlKTtcblxuXHRpZiAob2JqMSA9PT0gbnVsbCB8fCBvYmoyID09PSBudWxsIHx8IHR5cGVvZiAob2JqMSkgIT0gJ29iamVjdCcpXG5cdFx0cmV0dXJuIChvYmoxID09PSBvYmoyKTtcblxuXHRpZiAob2JqMS5jb25zdHJ1Y3RvciAhPSBvYmoyLmNvbnN0cnVjdG9yKVxuXHRcdHJldHVybiAoZmFsc2UpO1xuXG5cdHZhciBrO1xuXHRmb3IgKGsgaW4gb2JqMSkge1xuXHRcdGlmICghb2JqMi5oYXNPd25Qcm9wZXJ0eShrKSlcblx0XHRcdHJldHVybiAoZmFsc2UpO1xuXG5cdFx0aWYgKCFkZWVwRXF1YWwob2JqMVtrXSwgb2JqMltrXSkpXG5cdFx0XHRyZXR1cm4gKGZhbHNlKTtcblx0fVxuXG5cdGZvciAoayBpbiBvYmoyKSB7XG5cdFx0aWYgKCFvYmoxLmhhc093blByb3BlcnR5KGspKVxuXHRcdFx0cmV0dXJuIChmYWxzZSk7XG5cdH1cblxuXHRyZXR1cm4gKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5KG9iailcbntcblx0dmFyIGtleTtcblx0Zm9yIChrZXkgaW4gb2JqKVxuXHRcdHJldHVybiAoZmFsc2UpO1xuXHRyZXR1cm4gKHRydWUpO1xufVxuXG5mdW5jdGlvbiBoYXNLZXkob2JqLCBrZXkpXG57XG5cdG1vZF9hc3NlcnQuZXF1YWwodHlwZW9mIChrZXkpLCAnc3RyaW5nJyk7XG5cdHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hLZXkob2JqLCBjYWxsYmFjaylcbntcblx0Zm9yICh2YXIga2V5IGluIG9iaikge1xuXHRcdGlmIChoYXNLZXkob2JqLCBrZXkpKSB7XG5cdFx0XHRjYWxsYmFjayhrZXksIG9ialtrZXldKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcGx1Y2sob2JqLCBrZXkpXG57XG5cdG1vZF9hc3NlcnQuZXF1YWwodHlwZW9mIChrZXkpLCAnc3RyaW5nJyk7XG5cdHJldHVybiAocGx1Y2t2KG9iaiwga2V5KSk7XG59XG5cbmZ1bmN0aW9uIHBsdWNrdihvYmosIGtleSlcbntcblx0aWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2YgKG9iaikgIT09ICdvYmplY3QnKVxuXHRcdHJldHVybiAodW5kZWZpbmVkKTtcblxuXHRpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpXG5cdFx0cmV0dXJuIChvYmpba2V5XSk7XG5cblx0dmFyIGkgPSBrZXkuaW5kZXhPZignLicpO1xuXHRpZiAoaSA9PSAtMSlcblx0XHRyZXR1cm4gKHVuZGVmaW5lZCk7XG5cblx0dmFyIGtleTEgPSBrZXkuc3Vic3RyKDAsIGkpO1xuXHRpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkxKSlcblx0XHRyZXR1cm4gKHVuZGVmaW5lZCk7XG5cblx0cmV0dXJuIChwbHVja3Yob2JqW2tleTFdLCBrZXkuc3Vic3RyKGkgKyAxKSkpO1xufVxuXG4vKlxuICogSW52b2tlIGNhbGxiYWNrKHJvdykgZm9yIGVhY2ggZW50cnkgaW4gdGhlIGFycmF5IHRoYXQgd291bGQgYmUgcmV0dXJuZWQgYnlcbiAqIGZsYXR0ZW5PYmplY3QoZGF0YSwgZGVwdGgpLiAgVGhpcyBpcyBqdXN0IGxpa2UgZmxhdHRlbk9iamVjdChkYXRhLFxuICogZGVwdGgpLmZvckVhY2goY2FsbGJhY2spLCBleGNlcHQgdGhhdCB0aGUgaW50ZXJtZWRpYXRlIGFycmF5IGlzIG5ldmVyXG4gKiBjcmVhdGVkLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuSXRlcihkYXRhLCBkZXB0aCwgY2FsbGJhY2spXG57XG5cdGRvRmxhdHRlbkl0ZXIoZGF0YSwgZGVwdGgsIFtdLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGRvRmxhdHRlbkl0ZXIoZGF0YSwgZGVwdGgsIGFjY3VtLCBjYWxsYmFjaylcbntcblx0dmFyIGVhY2g7XG5cdHZhciBrZXk7XG5cblx0aWYgKGRlcHRoID09PSAwKSB7XG5cdFx0ZWFjaCA9IGFjY3VtLnNsaWNlKDApO1xuXHRcdGVhY2gucHVzaChkYXRhKTtcblx0XHRjYWxsYmFjayhlYWNoKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRtb2RfYXNzZXJ0Lm9rKGRhdGEgIT09IG51bGwpO1xuXHRtb2RfYXNzZXJ0LmVxdWFsKHR5cGVvZiAoZGF0YSksICdvYmplY3QnKTtcblx0bW9kX2Fzc2VydC5lcXVhbCh0eXBlb2YgKGRlcHRoKSwgJ251bWJlcicpO1xuXHRtb2RfYXNzZXJ0Lm9rKGRlcHRoID49IDApO1xuXG5cdGZvciAoa2V5IGluIGRhdGEpIHtcblx0XHRlYWNoID0gYWNjdW0uc2xpY2UoMCk7XG5cdFx0ZWFjaC5wdXNoKGtleSk7XG5cdFx0ZG9GbGF0dGVuSXRlcihkYXRhW2tleV0sIGRlcHRoIC0gMSwgZWFjaCwgY2FsbGJhY2spO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5PYmplY3QoZGF0YSwgZGVwdGgpXG57XG5cdGlmIChkZXB0aCA9PT0gMClcblx0XHRyZXR1cm4gKFsgZGF0YSBdKTtcblxuXHRtb2RfYXNzZXJ0Lm9rKGRhdGEgIT09IG51bGwpO1xuXHRtb2RfYXNzZXJ0LmVxdWFsKHR5cGVvZiAoZGF0YSksICdvYmplY3QnKTtcblx0bW9kX2Fzc2VydC5lcXVhbCh0eXBlb2YgKGRlcHRoKSwgJ251bWJlcicpO1xuXHRtb2RfYXNzZXJ0Lm9rKGRlcHRoID49IDApO1xuXG5cdHZhciBydiA9IFtdO1xuXHR2YXIga2V5O1xuXG5cdGZvciAoa2V5IGluIGRhdGEpIHtcblx0XHRmbGF0dGVuT2JqZWN0KGRhdGFba2V5XSwgZGVwdGggLSAxKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG5cdFx0XHRydi5wdXNoKFsga2V5IF0uY29uY2F0KHApKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiAocnYpO1xufVxuXG5mdW5jdGlvbiBzdGFydHNXaXRoKHN0ciwgcHJlZml4KVxue1xuXHRyZXR1cm4gKHN0ci5zdWJzdHIoMCwgcHJlZml4Lmxlbmd0aCkgPT0gcHJlZml4KTtcbn1cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzdWZmaXgpXG57XG5cdHJldHVybiAoc3RyLnN1YnN0cihcblx0ICAgIHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoLCBzdWZmaXgubGVuZ3RoKSA9PSBzdWZmaXgpO1xufVxuXG5mdW5jdGlvbiBpc284NjAxKGQpXG57XG5cdGlmICh0eXBlb2YgKGQpID09ICdudW1iZXInKVxuXHRcdGQgPSBuZXcgRGF0ZShkKTtcblx0bW9kX2Fzc2VydC5vayhkLmNvbnN0cnVjdG9yID09PSBEYXRlKTtcblx0cmV0dXJuIChtb2RfZXh0c3ByaW50Zi5zcHJpbnRmKCclNGQtJTAyZC0lMDJkVCUwMmQ6JTAyZDolMDJkLiUwM2RaJyxcblx0ICAgIGQuZ2V0VVRDRnVsbFllYXIoKSwgZC5nZXRVVENNb250aCgpICsgMSwgZC5nZXRVVENEYXRlKCksXG5cdCAgICBkLmdldFVUQ0hvdXJzKCksIGQuZ2V0VVRDTWludXRlcygpLCBkLmdldFVUQ1NlY29uZHMoKSxcblx0ICAgIGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCkpKTtcbn1cblxudmFyIFJGQzExMjNfTU9OVEhTID0gW1xuICAgICdKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsXG4gICAgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ107XG52YXIgUkZDMTEyM19EQVlTID0gW1xuICAgICdTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXTtcblxuZnVuY3Rpb24gcmZjMTEyMyhkYXRlKSB7XG5cdHJldHVybiAobW9kX2V4dHNwcmludGYuc3ByaW50ZignJXMsICUwMmQgJXMgJTA0ZCAlMDJkOiUwMmQ6JTAyZCBHTVQnLFxuXHQgICAgUkZDMTEyM19EQVlTW2RhdGUuZ2V0VVRDRGF5KCldLCBkYXRlLmdldFVUQ0RhdGUoKSxcblx0ICAgIFJGQzExMjNfTU9OVEhTW2RhdGUuZ2V0VVRDTW9udGgoKV0sIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcblx0ICAgIGRhdGUuZ2V0VVRDSG91cnMoKSwgZGF0ZS5nZXRVVENNaW51dGVzKCksXG5cdCAgICBkYXRlLmdldFVUQ1NlY29uZHMoKSkpO1xufVxuXG4vKlxuICogUGFyc2VzIGEgZGF0ZSBleHByZXNzZWQgYXMgYSBzdHJpbmcsIGFzIGVpdGhlciBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2VcbiAqIHRoZSBlcG9jaCBvciBhbnkgc3RyaW5nIGZvcm1hdCB0aGF0IERhdGUgYWNjZXB0cywgZ2l2aW5nIHByZWZlcmVuY2UgdG8gdGhlXG4gKiBmb3JtZXIgd2hlcmUgdGhlc2UgdHdvIHNldHMgb3ZlcmxhcCAoZS5nLiwgc21hbGwgbnVtYmVycykuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRGF0ZVRpbWUoc3RyKVxue1xuXHQvKlxuXHQgKiBUaGlzIGlzIGlycml0YXRpbmdseSBpbXBsaWNpdCwgYnV0IHNpZ25pZmljYW50bHkgbW9yZSBjb25jaXNlIHRoYW5cblx0ICogYWx0ZXJuYXRpdmVzLiAgVGhlIFwiK3N0clwiIHdpbGwgY29udmVydCBhIHN0cmluZyBjb250YWluaW5nIG9ubHkgYVxuXHQgKiBudW1iZXIgZGlyZWN0bHkgdG8gYSBOdW1iZXIsIG9yIE5hTiBmb3Igb3RoZXIgc3RyaW5ncy4gIFRodXMsIGlmIHRoZVxuXHQgKiBjb252ZXJzaW9uIHN1Y2NlZWRzLCB3ZSB1c2UgaXQgKHRoaXMgaXMgdGhlIG1pbGxpc2Vjb25kcy1zaW5jZS1lcG9jaFxuXHQgKiBjYXNlKS4gIE90aGVyd2lzZSwgd2UgcGFzcyB0aGUgc3RyaW5nIGRpcmVjdGx5IHRvIHRoZSBEYXRlXG5cdCAqIGNvbnN0cnVjdG9yIHRvIHBhcnNlLlxuXHQgKi9cblx0dmFyIG51bWVyaWMgPSArc3RyO1xuXHRpZiAoIWlzTmFOKG51bWVyaWMpKSB7XG5cdFx0cmV0dXJuIChuZXcgRGF0ZShudW1lcmljKSk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIChuZXcgRGF0ZShzdHIpKTtcblx0fVxufVxuXG5cbi8qXG4gKiBOdW1iZXIuKl9TQUZFX0lOVEVHRVIgaXNuJ3QgcHJlc2VudCBiZWZvcmUgbm9kZSB2MC4xMiwgc28gd2UgaGFyZGNvZGVcbiAqIHRoZSBFUzYgZGVmaW5pdGlvbnMgaGVyZSwgd2hpbGUgYWxsb3dpbmcgZm9yIHRoZW0gdG8gc29tZWRheSBiZSBoaWdoZXIuXG4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgOTAwNzE5OTI1NDc0MDk5MTtcbnZhciBNSU5fU0FGRV9JTlRFR0VSID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIgfHwgLTkwMDcxOTkyNTQ3NDA5OTE7XG5cblxuLypcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgcGFyc2VJbnRlZ2VyKCkuXG4gKi9cbnZhciBQSV9ERUZBVUxUUyA9IHtcblx0YmFzZTogMTAsXG5cdGFsbG93U2lnbjogdHJ1ZSxcblx0YWxsb3dQcmVmaXg6IGZhbHNlLFxuXHRhbGxvd1RyYWlsaW5nOiBmYWxzZSxcblx0YWxsb3dJbXByZWNpc2U6IGZhbHNlLFxuXHR0cmltV2hpdGVzcGFjZTogZmFsc2UsXG5cdGxlYWRpbmdaZXJvSXNPY3RhbDogZmFsc2Vcbn07XG5cbnZhciBDUF8wID0gMHgzMDtcbnZhciBDUF85ID0gMHgzOTtcblxudmFyIENQX0EgPSAweDQxO1xudmFyIENQX0IgPSAweDQyO1xudmFyIENQX08gPSAweDRmO1xudmFyIENQX1QgPSAweDU0O1xudmFyIENQX1ggPSAweDU4O1xudmFyIENQX1ogPSAweDVhO1xuXG52YXIgQ1BfYSA9IDB4NjE7XG52YXIgQ1BfYiA9IDB4NjI7XG52YXIgQ1BfbyA9IDB4NmY7XG52YXIgQ1BfdCA9IDB4NzQ7XG52YXIgQ1BfeCA9IDB4Nzg7XG52YXIgQ1BfeiA9IDB4N2E7XG5cbnZhciBQSV9DT05WX0RFQyA9IDB4MzA7XG52YXIgUElfQ09OVl9VQyA9IDB4Mzc7XG52YXIgUElfQ09OVl9MQyA9IDB4NTc7XG5cblxuLypcbiAqIEEgc3RyaWN0ZXIgdmVyc2lvbiBvZiBwYXJzZUludCgpIHRoYXQgcHJvdmlkZXMgb3B0aW9ucyBmb3IgY2hhbmdpbmcgd2hhdFxuICogaXMgYW4gYWNjZXB0YWJsZSBzdHJpbmcgKGZvciBleGFtcGxlLCBkaXNhbGxvd2luZyB0cmFpbGluZyBjaGFyYWN0ZXJzKS5cbiAqL1xuZnVuY3Rpb24gcGFyc2VJbnRlZ2VyKHN0ciwgdW9wdHMpXG57XG5cdG1vZF9hc3NlcnQuc3RyaW5nKHN0ciwgJ3N0cicpO1xuXHRtb2RfYXNzZXJ0Lm9wdGlvbmFsT2JqZWN0KHVvcHRzLCAnb3B0aW9ucycpO1xuXG5cdHZhciBiYXNlT3ZlcnJpZGUgPSBmYWxzZTtcblx0dmFyIG9wdGlvbnMgPSBQSV9ERUZBVUxUUztcblxuXHRpZiAodW9wdHMpIHtcblx0XHRiYXNlT3ZlcnJpZGUgPSBoYXNLZXkodW9wdHMsICdiYXNlJyk7XG5cdFx0b3B0aW9ucyA9IG1lcmdlT2JqZWN0cyhvcHRpb25zLCB1b3B0cyk7XG5cdFx0bW9kX2Fzc2VydC5udW1iZXIob3B0aW9ucy5iYXNlLCAnb3B0aW9ucy5iYXNlJyk7XG5cdFx0bW9kX2Fzc2VydC5vayhvcHRpb25zLmJhc2UgPj0gMiwgJ29wdGlvbnMuYmFzZSA+PSAyJyk7XG5cdFx0bW9kX2Fzc2VydC5vayhvcHRpb25zLmJhc2UgPD0gMzYsICdvcHRpb25zLmJhc2UgPD0gMzYnKTtcblx0XHRtb2RfYXNzZXJ0LmJvb2wob3B0aW9ucy5hbGxvd1NpZ24sICdvcHRpb25zLmFsbG93U2lnbicpO1xuXHRcdG1vZF9hc3NlcnQuYm9vbChvcHRpb25zLmFsbG93UHJlZml4LCAnb3B0aW9ucy5hbGxvd1ByZWZpeCcpO1xuXHRcdG1vZF9hc3NlcnQuYm9vbChvcHRpb25zLmFsbG93VHJhaWxpbmcsXG5cdFx0ICAgICdvcHRpb25zLmFsbG93VHJhaWxpbmcnKTtcblx0XHRtb2RfYXNzZXJ0LmJvb2wob3B0aW9ucy5hbGxvd0ltcHJlY2lzZSxcblx0XHQgICAgJ29wdGlvbnMuYWxsb3dJbXByZWNpc2UnKTtcblx0XHRtb2RfYXNzZXJ0LmJvb2wob3B0aW9ucy50cmltV2hpdGVzcGFjZSxcblx0XHQgICAgJ29wdGlvbnMudHJpbVdoaXRlc3BhY2UnKTtcblx0XHRtb2RfYXNzZXJ0LmJvb2wob3B0aW9ucy5sZWFkaW5nWmVyb0lzT2N0YWwsXG5cdFx0ICAgICdvcHRpb25zLmxlYWRpbmdaZXJvSXNPY3RhbCcpO1xuXG5cdFx0aWYgKG9wdGlvbnMubGVhZGluZ1plcm9Jc09jdGFsKSB7XG5cdFx0XHRtb2RfYXNzZXJ0Lm9rKCFiYXNlT3ZlcnJpZGUsXG5cdFx0XHQgICAgJ1wiYmFzZVwiIGFuZCBcImxlYWRpbmdaZXJvSXNPY3RhbFwiIGFyZSAnICtcblx0XHRcdCAgICAnbXV0dWFsbHkgZXhjbHVzaXZlJyk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGM7XG5cdHZhciBwYmFzZSA9IC0xO1xuXHR2YXIgYmFzZSA9IG9wdGlvbnMuYmFzZTtcblx0dmFyIHN0YXJ0O1xuXHR2YXIgbXVsdCA9IDE7XG5cdHZhciB2YWx1ZSA9IDA7XG5cdHZhciBpZHggPSAwO1xuXHR2YXIgbGVuID0gc3RyLmxlbmd0aDtcblxuXHQvKiBUcmltIGFueSB3aGl0ZXNwYWNlIG9uIHRoZSBsZWZ0IHNpZGUuICovXG5cdGlmIChvcHRpb25zLnRyaW1XaGl0ZXNwYWNlKSB7XG5cdFx0d2hpbGUgKGlkeCA8IGxlbiAmJiBpc1NwYWNlKHN0ci5jaGFyQ29kZUF0KGlkeCkpKSB7XG5cdFx0XHQrK2lkeDtcblx0XHR9XG5cdH1cblxuXHQvKiBDaGVjayB0aGUgbnVtYmVyIGZvciBhIGxlYWRpbmcgc2lnbi4gKi9cblx0aWYgKG9wdGlvbnMuYWxsb3dTaWduKSB7XG5cdFx0aWYgKHN0cltpZHhdID09PSAnLScpIHtcblx0XHRcdGlkeCArPSAxO1xuXHRcdFx0bXVsdCA9IC0xO1xuXHRcdH0gZWxzZSBpZiAoc3RyW2lkeF0gPT09ICcrJykge1xuXHRcdFx0aWR4ICs9IDE7XG5cdFx0fVxuXHR9XG5cblx0LyogUGFyc2UgdGhlIGJhc2UtaW5kaWNhdGluZyBwcmVmaXggaWYgdGhlcmUgaXMgb25lLiAqL1xuXHRpZiAoc3RyW2lkeF0gPT09ICcwJykge1xuXHRcdGlmIChvcHRpb25zLmFsbG93UHJlZml4KSB7XG5cdFx0XHRwYmFzZSA9IHByZWZpeFRvQmFzZShzdHIuY2hhckNvZGVBdChpZHggKyAxKSk7XG5cdFx0XHRpZiAocGJhc2UgIT09IC0xICYmICghYmFzZU92ZXJyaWRlIHx8IHBiYXNlID09PSBiYXNlKSkge1xuXHRcdFx0XHRiYXNlID0gcGJhc2U7XG5cdFx0XHRcdGlkeCArPSAyO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChwYmFzZSA9PT0gLTEgJiYgb3B0aW9ucy5sZWFkaW5nWmVyb0lzT2N0YWwpIHtcblx0XHRcdGJhc2UgPSA4O1xuXHRcdH1cblx0fVxuXG5cdC8qIFBhcnNlIHRoZSBhY3R1YWwgZGlnaXRzLiAqL1xuXHRmb3IgKHN0YXJ0ID0gaWR4OyBpZHggPCBsZW47ICsraWR4KSB7XG5cdFx0YyA9IHRyYW5zbGF0ZURpZ2l0KHN0ci5jaGFyQ29kZUF0KGlkeCkpO1xuXHRcdGlmIChjICE9PSAtMSAmJiBjIDwgYmFzZSkge1xuXHRcdFx0dmFsdWUgKj0gYmFzZTtcblx0XHRcdHZhbHVlICs9IGM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8qIElmIHdlIGRpZG4ndCBwYXJzZSBhbnkgZGlnaXRzLCB3ZSBoYXZlIGFuIGludmFsaWQgbnVtYmVyLiAqL1xuXHRpZiAoc3RhcnQgPT09IGlkeCkge1xuXHRcdHJldHVybiAobmV3IEVycm9yKCdpbnZhbGlkIG51bWJlcjogJyArIEpTT04uc3RyaW5naWZ5KHN0cikpKTtcblx0fVxuXG5cdC8qIFRyaW0gYW55IHdoaXRlc3BhY2Ugb24gdGhlIHJpZ2h0IHNpZGUuICovXG5cdGlmIChvcHRpb25zLnRyaW1XaGl0ZXNwYWNlKSB7XG5cdFx0d2hpbGUgKGlkeCA8IGxlbiAmJiBpc1NwYWNlKHN0ci5jaGFyQ29kZUF0KGlkeCkpKSB7XG5cdFx0XHQrK2lkeDtcblx0XHR9XG5cdH1cblxuXHQvKiBDaGVjayBmb3IgdHJhaWxpbmcgY2hhcmFjdGVycy4gKi9cblx0aWYgKGlkeCA8IGxlbiAmJiAhb3B0aW9ucy5hbGxvd1RyYWlsaW5nKSB7XG5cdFx0cmV0dXJuIChuZXcgRXJyb3IoJ3RyYWlsaW5nIGNoYXJhY3RlcnMgYWZ0ZXIgbnVtYmVyOiAnICtcblx0XHQgICAgSlNPTi5zdHJpbmdpZnkoc3RyLnNsaWNlKGlkeCkpKSk7XG5cdH1cblxuXHQvKiBJZiBvdXIgdmFsdWUgaXMgMCwgd2UgcmV0dXJuIG5vdywgdG8gYXZvaWQgcmV0dXJuaW5nIC0wLiAqL1xuXHRpZiAodmFsdWUgPT09IDApIHtcblx0XHRyZXR1cm4gKDApO1xuXHR9XG5cblx0LyogQ2FsY3VsYXRlIG91ciBmaW5hbCB2YWx1ZS4gKi9cblx0dmFyIHJlc3VsdCA9IHZhbHVlICogbXVsdDtcblxuXHQvKlxuXHQgKiBJZiB0aGUgc3RyaW5nIHJlcHJlc2VudHMgYSB2YWx1ZSB0aGF0IGNhbm5vdCBiZSBwcmVjaXNlbHkgcmVwcmVzZW50ZWRcblx0ICogYnkgSmF2YVNjcmlwdCwgdGhlbiB3ZSB3YW50IHRvIGNoZWNrIHRoYXQ6XG5cdCAqXG5cdCAqIC0gV2UgbmV2ZXIgaW5jcmVhc2VkIHRoZSB2YWx1ZSBwYXN0IE1BWF9TQUZFX0lOVEVHRVJcblx0ICogLSBXZSBkb24ndCBtYWtlIHRoZSByZXN1bHQgbmVnYXRpdmUgYW5kIGJlbG93IE1JTl9TQUZFX0lOVEVHRVJcblx0ICpcblx0ICogQmVjYXVzZSB3ZSBvbmx5IGV2ZXIgaW5jcmVtZW50IHRoZSB2YWx1ZSBkdXJpbmcgcGFyc2luZywgdGhlcmUncyBub1xuXHQgKiBjaGFuY2Ugb2YgbW92aW5nIHBhc3QgTUFYX1NBRkVfSU5URUdFUiBhbmQgdGhlbiBkcm9wcGluZyBiZWxvdyBpdFxuXHQgKiBhZ2FpbiwgbG9zaW5nIHByZWNpc2lvbiBpbiB0aGUgcHJvY2Vzcy4gVGhpcyBtZWFucyB0aGF0IHdlIG9ubHkgbmVlZFxuXHQgKiB0byBkbyBvdXIgY2hlY2tzIGhlcmUsIGF0IHRoZSBlbmQuXG5cdCAqL1xuXHRpZiAoIW9wdGlvbnMuYWxsb3dJbXByZWNpc2UgJiZcblx0ICAgICh2YWx1ZSA+IE1BWF9TQUZFX0lOVEVHRVIgfHwgcmVzdWx0IDwgTUlOX1NBRkVfSU5URUdFUikpIHtcblx0XHRyZXR1cm4gKG5ldyBFcnJvcignbnVtYmVyIGlzIG91dHNpZGUgb2YgdGhlIHN1cHBvcnRlZCByYW5nZTogJyArXG5cdFx0ICAgIEpTT04uc3RyaW5naWZ5KHN0ci5zbGljZShzdGFydCwgaWR4KSkpKTtcblx0fVxuXG5cdHJldHVybiAocmVzdWx0KTtcbn1cblxuXG4vKlxuICogSW50ZXJwcmV0IGEgY2hhcmFjdGVyIGNvZGUgYXMgYSBiYXNlLTM2IGRpZ2l0LlxuICovXG5mdW5jdGlvbiB0cmFuc2xhdGVEaWdpdChkKVxue1xuXHRpZiAoZCA+PSBDUF8wICYmIGQgPD0gQ1BfOSkge1xuXHRcdC8qICcwJyB0byAnOScgLT4gMCB0byA5ICovXG5cdFx0cmV0dXJuIChkIC0gUElfQ09OVl9ERUMpO1xuXHR9IGVsc2UgaWYgKGQgPj0gQ1BfQSAmJiBkIDw9IENQX1opIHtcblx0XHQvKiAnQScgLSAnWicgLT4gMTAgdG8gMzUgKi9cblx0XHRyZXR1cm4gKGQgLSBQSV9DT05WX1VDKTtcblx0fSBlbHNlIGlmIChkID49IENQX2EgJiYgZCA8PSBDUF96KSB7XG5cdFx0LyogJ2EnIC0gJ3onIC0+IDEwIHRvIDM1ICovXG5cdFx0cmV0dXJuIChkIC0gUElfQ09OVl9MQyk7XG5cdH0gZWxzZSB7XG5cdFx0LyogSW52YWxpZCBjaGFyYWN0ZXIgY29kZSAqL1xuXHRcdHJldHVybiAoLTEpO1xuXHR9XG59XG5cblxuLypcbiAqIFRlc3QgaWYgYSB2YWx1ZSBtYXRjaGVzIHRoZSBFQ01BU2NyaXB0IGRlZmluaXRpb24gb2YgdHJpbW1hYmxlIHdoaXRlc3BhY2UuXG4gKi9cbmZ1bmN0aW9uIGlzU3BhY2UoYylcbntcblx0cmV0dXJuIChjID09PSAweDIwKSB8fFxuXHQgICAgKGMgPj0gMHgwMDA5ICYmIGMgPD0gMHgwMDBkKSB8fFxuXHQgICAgKGMgPT09IDB4MDBhMCkgfHxcblx0ICAgIChjID09PSAweDE2ODApIHx8XG5cdCAgICAoYyA9PT0gMHgxODBlKSB8fFxuXHQgICAgKGMgPj0gMHgyMDAwICYmIGMgPD0gMHgyMDBhKSB8fFxuXHQgICAgKGMgPT09IDB4MjAyOCkgfHxcblx0ICAgIChjID09PSAweDIwMjkpIHx8XG5cdCAgICAoYyA9PT0gMHgyMDJmKSB8fFxuXHQgICAgKGMgPT09IDB4MjA1ZikgfHxcblx0ICAgIChjID09PSAweDMwMDApIHx8XG5cdCAgICAoYyA9PT0gMHhmZWZmKTtcbn1cblxuXG4vKlxuICogRGV0ZXJtaW5lIHdoaWNoIGJhc2UgYSBjaGFyYWN0ZXIgaW5kaWNhdGVzIChlLmcuLCAneCcgaW5kaWNhdGVzIGhleCkuXG4gKi9cbmZ1bmN0aW9uIHByZWZpeFRvQmFzZShjKVxue1xuXHRpZiAoYyA9PT0gQ1BfYiB8fCBjID09PSBDUF9CKSB7XG5cdFx0LyogMGIvMEIgKGJpbmFyeSkgKi9cblx0XHRyZXR1cm4gKDIpO1xuXHR9IGVsc2UgaWYgKGMgPT09IENQX28gfHwgYyA9PT0gQ1BfTykge1xuXHRcdC8qIDBvLzBPIChvY3RhbCkgKi9cblx0XHRyZXR1cm4gKDgpO1xuXHR9IGVsc2UgaWYgKGMgPT09IENQX3QgfHwgYyA9PT0gQ1BfVCkge1xuXHRcdC8qIDB0LzBUIChkZWNpbWFsKSAqL1xuXHRcdHJldHVybiAoMTApO1xuXHR9IGVsc2UgaWYgKGMgPT09IENQX3ggfHwgYyA9PT0gQ1BfWCkge1xuXHRcdC8qIDB4LzBYIChoZXhhZGVjaW1hbCkgKi9cblx0XHRyZXR1cm4gKDE2KTtcblx0fSBlbHNlIHtcblx0XHQvKiBOb3QgYSBtZWFuaW5nZnVsIGNoYXJhY3RlciAqL1xuXHRcdHJldHVybiAoLTEpO1xuXHR9XG59XG5cblxuZnVuY3Rpb24gdmFsaWRhdGVKc29uT2JqZWN0SlMoc2NoZW1hLCBpbnB1dClcbntcblx0dmFyIHJlcG9ydCA9IG1vZF9qc29uc2NoZW1hLnZhbGlkYXRlKGlucHV0LCBzY2hlbWEpO1xuXG5cdGlmIChyZXBvcnQuZXJyb3JzLmxlbmd0aCA9PT0gMClcblx0XHRyZXR1cm4gKG51bGwpO1xuXG5cdC8qIEN1cnJlbnRseSwgd2Ugb25seSBkbyBhbnl0aGluZyB1c2VmdWwgd2l0aCB0aGUgZmlyc3QgZXJyb3IuICovXG5cdHZhciBlcnJvciA9IHJlcG9ydC5lcnJvcnNbMF07XG5cblx0LyogVGhlIGZhaWxlZCBwcm9wZXJ0eSBpcyBnaXZlbiBieSBhIFVSSSB3aXRoIGFuIGlycmVsZXZhbnQgcHJlZml4LiAqL1xuXHR2YXIgcHJvcG5hbWUgPSBlcnJvclsncHJvcGVydHknXTtcblx0dmFyIHJlYXNvbiA9IGVycm9yWydtZXNzYWdlJ10udG9Mb3dlckNhc2UoKTtcblx0dmFyIGksIGo7XG5cblx0Lypcblx0ICogVGhlcmUncyBhdCBsZWFzdCBvbmUgY2FzZSB3aGVyZSB0aGUgcHJvcGVydHkgZXJyb3IgbWVzc2FnZSBpc1xuXHQgKiBjb25mdXNpbmcgYXQgYmVzdC4gIFdlIHdvcmsgYXJvdW5kIHRoaXMgaGVyZS5cblx0ICovXG5cdGlmICgoaSA9IHJlYXNvbi5pbmRleE9mKCd0aGUgcHJvcGVydHkgJykpICE9IC0xICYmXG5cdCAgICAoaiA9IHJlYXNvbi5pbmRleE9mKCcgaXMgbm90IGRlZmluZWQgaW4gdGhlIHNjaGVtYSBhbmQgdGhlICcgK1xuXHQgICAgJ3NjaGVtYSBkb2VzIG5vdCBhbGxvdyBhZGRpdGlvbmFsIHByb3BlcnRpZXMnKSkgIT0gLTEpIHtcblx0XHRpICs9ICd0aGUgcHJvcGVydHkgJy5sZW5ndGg7XG5cdFx0aWYgKHByb3BuYW1lID09PSAnJylcblx0XHRcdHByb3BuYW1lID0gcmVhc29uLnN1YnN0cihpLCBqIC0gaSk7XG5cdFx0ZWxzZVxuXHRcdFx0cHJvcG5hbWUgPSBwcm9wbmFtZSArICcuJyArIHJlYXNvbi5zdWJzdHIoaSwgaiAtIGkpO1xuXG5cdFx0cmVhc29uID0gJ3Vuc3VwcG9ydGVkIHByb3BlcnR5Jztcblx0fVxuXG5cdHZhciBydiA9IG5ldyBtb2RfdmVycm9yLlZFcnJvcigncHJvcGVydHkgXCIlc1wiOiAlcycsIHByb3BuYW1lLCByZWFzb24pO1xuXHRydi5qc3ZfZGV0YWlscyA9IGVycm9yO1xuXHRyZXR1cm4gKHJ2KTtcbn1cblxuZnVuY3Rpb24gcmFuZEVsdChhcnIpXG57XG5cdG1vZF9hc3NlcnQub2soQXJyYXkuaXNBcnJheShhcnIpICYmIGFyci5sZW5ndGggPiAwLFxuXHQgICAgJ3JhbmRFbHQgYXJndW1lbnQgbXVzdCBiZSBhIG5vbi1lbXB0eSBhcnJheScpO1xuXG5cdHJldHVybiAoYXJyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFyci5sZW5ndGgpXSk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEhydGltZShhKVxue1xuXHRtb2RfYXNzZXJ0Lm9rKGFbMF0gPj0gMCAmJiBhWzFdID49IDAsXG5cdCAgICAnbmVnYXRpdmUgbnVtYmVycyBub3QgYWxsb3dlZCBpbiBocnRpbWVzJyk7XG5cdG1vZF9hc3NlcnQub2soYVsxXSA8IDFlOSwgJ25hbm9zZWNvbmRzIGNvbHVtbiBvdmVyZmxvdycpO1xufVxuXG4vKlxuICogQ29tcHV0ZSB0aGUgdGltZSBlbGFwc2VkIGJldHdlZW4gaHJ0aW1lIHJlYWRpbmdzIEEgYW5kIEIsIHdoZXJlIEEgaXMgbGF0ZXJcbiAqIHRoYW4gQi4gIGhydGltZSByZWFkaW5ncyBjb21lIGZyb20gTm9kZSdzIHByb2Nlc3MuaHJ0aW1lKCkuICBUaGVyZSBpcyBub1xuICogZGVmaW5lZCB3YXkgdG8gcmVwcmVzZW50IG5lZ2F0aXZlIGRlbHRhcywgc28gaXQncyBpbGxlZ2FsIHRvIGRpZmYgQiBmcm9tIEFcbiAqIHdoZXJlIHRoZSB0aW1lIGRlbm90ZWQgYnkgQiBpcyBsYXRlciB0aGFuIHRoZSB0aW1lIGRlbm90ZWQgYnkgQS4gIElmIHRoaXNcbiAqIGJlY29tZXMgdmFsdWFibGUsIHdlIGNhbiBkZWZpbmUgYSByZXByZXNlbnRhdGlvbiBhbmQgZXh0ZW5kIHRoZVxuICogaW1wbGVtZW50YXRpb24gdG8gc3VwcG9ydCBpdC5cbiAqL1xuZnVuY3Rpb24gaHJ0aW1lRGlmZihhLCBiKVxue1xuXHRhc3NlcnRIcnRpbWUoYSk7XG5cdGFzc2VydEhydGltZShiKTtcblx0bW9kX2Fzc2VydC5vayhhWzBdID4gYlswXSB8fCAoYVswXSA9PSBiWzBdICYmIGFbMV0gPj0gYlsxXSksXG5cdCAgICAnbmVnYXRpdmUgZGlmZmVyZW5jZXMgbm90IGFsbG93ZWQnKTtcblxuXHR2YXIgcnYgPSBbIGFbMF0gLSBiWzBdLCAwIF07XG5cblx0aWYgKGFbMV0gPj0gYlsxXSkge1xuXHRcdHJ2WzFdID0gYVsxXSAtIGJbMV07XG5cdH0gZWxzZSB7XG5cdFx0cnZbMF0tLTtcblx0XHRydlsxXSA9IDFlOSAtIChiWzFdIC0gYVsxXSk7XG5cdH1cblxuXHRyZXR1cm4gKHJ2KTtcbn1cblxuLypcbiAqIENvbnZlcnQgYSBocnRpbWUgcmVhZGluZyBmcm9tIHRoZSBhcnJheSBmb3JtYXQgcmV0dXJuZWQgYnkgTm9kZSdzXG4gKiBwcm9jZXNzLmhydGltZSgpIGludG8gYSBzY2FsYXIgbnVtYmVyIG9mIG5hbm9zZWNvbmRzLlxuICovXG5mdW5jdGlvbiBocnRpbWVOYW5vc2VjKGEpXG57XG5cdGFzc2VydEhydGltZShhKTtcblxuXHRyZXR1cm4gKE1hdGguZmxvb3IoYVswXSAqIDFlOSArIGFbMV0pKTtcbn1cblxuLypcbiAqIENvbnZlcnQgYSBocnRpbWUgcmVhZGluZyBmcm9tIHRoZSBhcnJheSBmb3JtYXQgcmV0dXJuZWQgYnkgTm9kZSdzXG4gKiBwcm9jZXNzLmhydGltZSgpIGludG8gYSBzY2FsYXIgbnVtYmVyIG9mIG1pY3Jvc2Vjb25kcy5cbiAqL1xuZnVuY3Rpb24gaHJ0aW1lTWljcm9zZWMoYSlcbntcblx0YXNzZXJ0SHJ0aW1lKGEpO1xuXG5cdHJldHVybiAoTWF0aC5mbG9vcihhWzBdICogMWU2ICsgYVsxXSAvIDFlMykpO1xufVxuXG4vKlxuICogQ29udmVydCBhIGhydGltZSByZWFkaW5nIGZyb20gdGhlIGFycmF5IGZvcm1hdCByZXR1cm5lZCBieSBOb2RlJ3NcbiAqIHByb2Nlc3MuaHJ0aW1lKCkgaW50byBhIHNjYWxhciBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLlxuICovXG5mdW5jdGlvbiBocnRpbWVNaWxsaXNlYyhhKVxue1xuXHRhc3NlcnRIcnRpbWUoYSk7XG5cblx0cmV0dXJuIChNYXRoLmZsb29yKGFbMF0gKiAxZTMgKyBhWzFdIC8gMWU2KSk7XG59XG5cbi8qXG4gKiBBZGQgdHdvIGhydGltZSByZWFkaW5ncyBBIGFuZCBCLCBvdmVyd3JpdGluZyBBIHdpdGggdGhlIHJlc3VsdCBvZiB0aGVcbiAqIGFkZGl0aW9uLiAgVGhpcyBmdW5jdGlvbiBpcyB1c2VmdWwgZm9yIGFjY3VtdWxhdGluZyBzZXZlcmFsIGhydGltZSBpbnRlcnZhbHNcbiAqIGludG8gYSBjb3VudGVyLiAgUmV0dXJucyBBLlxuICovXG5mdW5jdGlvbiBocnRpbWVBY2N1bShhLCBiKVxue1xuXHRhc3NlcnRIcnRpbWUoYSk7XG5cdGFzc2VydEhydGltZShiKTtcblxuXHQvKlxuXHQgKiBBY2N1bXVsYXRlIHRoZSBuYW5vc2Vjb25kIGNvbXBvbmVudC5cblx0ICovXG5cdGFbMV0gKz0gYlsxXTtcblx0aWYgKGFbMV0gPj0gMWU5KSB7XG5cdFx0Lypcblx0XHQgKiBUaGUgbmFub3NlY29uZCBjb21wb25lbnQgb3ZlcmZsb3dlZCwgc28gY2FycnkgdG8gdGhlIHNlY29uZHNcblx0XHQgKiBmaWVsZC5cblx0XHQgKi9cblx0XHRhWzBdKys7XG5cdFx0YVsxXSAtPSAxZTk7XG5cdH1cblxuXHQvKlxuXHQgKiBBY2N1bXVsYXRlIHRoZSBzZWNvbmRzIGNvbXBvbmVudC5cblx0ICovXG5cdGFbMF0gKz0gYlswXTtcblxuXHRyZXR1cm4gKGEpO1xufVxuXG4vKlxuICogQWRkIHR3byBocnRpbWUgcmVhZGluZ3MgQSBhbmQgQiwgcmV0dXJuaW5nIHRoZSByZXN1bHQgYXMgYSBuZXcgaHJ0aW1lIGFycmF5LlxuICogRG9lcyBub3QgbW9kaWZ5IGVpdGhlciBpbnB1dCBhcmd1bWVudC5cbiAqL1xuZnVuY3Rpb24gaHJ0aW1lQWRkKGEsIGIpXG57XG5cdGFzc2VydEhydGltZShhKTtcblxuXHR2YXIgcnYgPSBbIGFbMF0sIGFbMV0gXTtcblxuXHRyZXR1cm4gKGhydGltZUFjY3VtKHJ2LCBiKSk7XG59XG5cblxuLypcbiAqIENoZWNrIGFuIG9iamVjdCBmb3IgdW5leHBlY3RlZCBwcm9wZXJ0aWVzLiAgQWNjZXB0cyB0aGUgb2JqZWN0IHRvIGNoZWNrLCBhbmRcbiAqIGFuIGFycmF5IG9mIGFsbG93ZWQgcHJvcGVydHkgbmFtZXMgKHN0cmluZ3MpLiAgUmV0dXJucyBhbiBhcnJheSBvZiBrZXkgbmFtZXNcbiAqIHRoYXQgd2VyZSBmb3VuZCBvbiB0aGUgb2JqZWN0LCBidXQgZGlkIG5vdCBhcHBlYXIgaW4gdGhlIGxpc3Qgb2YgYWxsb3dlZFxuICogcHJvcGVydGllcy4gIElmIG5vIHByb3BlcnRpZXMgd2VyZSBmb3VuZCwgdGhlIHJldHVybmVkIGFycmF5IHdpbGwgYmUgb2ZcbiAqIHplcm8gbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBleHRyYVByb3BlcnRpZXMob2JqLCBhbGxvd2VkKVxue1xuXHRtb2RfYXNzZXJ0Lm9rKHR5cGVvZiAob2JqKSA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsLFxuXHQgICAgJ29iaiBhcmd1bWVudCBtdXN0IGJlIGEgbm9uLW51bGwgb2JqZWN0Jyk7XG5cdG1vZF9hc3NlcnQub2soQXJyYXkuaXNBcnJheShhbGxvd2VkKSxcblx0ICAgICdhbGxvd2VkIGFyZ3VtZW50IG11c3QgYmUgYW4gYXJyYXkgb2Ygc3RyaW5ncycpO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGFsbG93ZWQubGVuZ3RoOyBpKyspIHtcblx0XHRtb2RfYXNzZXJ0Lm9rKHR5cGVvZiAoYWxsb3dlZFtpXSkgPT09ICdzdHJpbmcnLFxuXHRcdCAgICAnYWxsb3dlZCBhcmd1bWVudCBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3MnKTtcblx0fVxuXG5cdHJldHVybiAoT2JqZWN0LmtleXMob2JqKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuXHRcdHJldHVybiAoYWxsb3dlZC5pbmRleE9mKGtleSkgPT09IC0xKTtcblx0fSkpO1xufVxuXG4vKlxuICogR2l2ZW4gdGhyZWUgc2V0cyBvZiBwcm9wZXJ0aWVzIFwicHJvdmlkZWRcIiAobWF5IGJlIHVuZGVmaW5lZCksIFwib3ZlcnJpZGVzXCJcbiAqIChyZXF1aXJlZCksIGFuZCBcImRlZmF1bHRzXCIgKG1heSBiZSB1bmRlZmluZWQpLCBjb25zdHJ1Y3QgYW4gb2JqZWN0IGNvbnRhaW5pbmdcbiAqIHRoZSB1bmlvbiBvZiB0aGVzZSBzZXRzIHdpdGggXCJvdmVycmlkZXNcIiBvdmVycmlkaW5nIFwicHJvdmlkZWRcIiwgYW5kXG4gKiBcInByb3ZpZGVkXCIgb3ZlcnJpZGluZyBcImRlZmF1bHRzXCIuICBOb25lIG9mIHRoZSBpbnB1dCBvYmplY3RzIGFyZSBtb2RpZmllZC5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPYmplY3RzKHByb3ZpZGVkLCBvdmVycmlkZXMsIGRlZmF1bHRzKVxue1xuXHR2YXIgcnYsIGs7XG5cblx0cnYgPSB7fTtcblx0aWYgKGRlZmF1bHRzKSB7XG5cdFx0Zm9yIChrIGluIGRlZmF1bHRzKVxuXHRcdFx0cnZba10gPSBkZWZhdWx0c1trXTtcblx0fVxuXG5cdGlmIChwcm92aWRlZCkge1xuXHRcdGZvciAoayBpbiBwcm92aWRlZClcblx0XHRcdHJ2W2tdID0gcHJvdmlkZWRba107XG5cdH1cblxuXHRpZiAob3ZlcnJpZGVzKSB7XG5cdFx0Zm9yIChrIGluIG92ZXJyaWRlcylcblx0XHRcdHJ2W2tdID0gb3ZlcnJpZGVzW2tdO1xuXHR9XG5cblx0cmV0dXJuIChydik7XG59XG4iLCIvKlxuICogZXh0c3ByaW50Zi5qczogZXh0ZW5kZWQgUE9TSVgtc3R5bGUgc3ByaW50ZlxuICovXG5cbnZhciBtb2RfYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgbW9kX3V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbi8qXG4gKiBQdWJsaWMgaW50ZXJmYWNlXG4gKi9cbmV4cG9ydHMuc3ByaW50ZiA9IGpzU3ByaW50ZjtcbmV4cG9ydHMucHJpbnRmID0ganNQcmludGY7XG5leHBvcnRzLmZwcmludGYgPSBqc0ZwcmludGY7XG5cbi8qXG4gKiBTdHJpcHBlZCBkb3duIHZlcnNpb24gb2Ygc1tuXXByaW50ZigzYykuICBXZSBtYWtlIGEgYmVzdCBlZmZvcnQgdG8gdGhyb3cgYW5cbiAqIGV4Y2VwdGlvbiB3aGVuIGdpdmVuIGEgZm9ybWF0IHN0cmluZyB3ZSBkb24ndCB1bmRlcnN0YW5kLCByYXRoZXIgdGhhblxuICogaWdub3JpbmcgaXQsIHNvIHRoYXQgd2Ugd29uJ3QgYnJlYWsgZXhpc3RpbmcgcHJvZ3JhbXMgaWYvd2hlbiB3ZSBnbyBpbXBsZW1lbnRcbiAqIHRoZSByZXN0IG9mIHRoaXMuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBjdXJyZW50bHkgc3VwcG9ydHMgc3BlY2lmeWluZ1xuICpcdC0gZmllbGQgYWxpZ25tZW50ICgnLScgZmxhZyksXG4gKiBcdC0gemVyby1wYWQgKCcwJyBmbGFnKVxuICpcdC0gYWx3YXlzIHNob3cgbnVtZXJpYyBzaWduICgnKycgZmxhZyksXG4gKlx0LSBmaWVsZCB3aWR0aFxuICpcdC0gY29udmVyc2lvbnMgZm9yIHN0cmluZ3MsIGRlY2ltYWwgaW50ZWdlcnMsIGFuZCBmbG9hdHMgKG51bWJlcnMpLlxuICpcdC0gYXJndW1lbnQgc2l6ZSBzcGVjaWZpZXJzLiAgVGhlc2UgYXJlIGFsbCBhY2NlcHRlZCBidXQgaWdub3JlZCwgc2luY2VcbiAqXHQgIEphdmFzY3JpcHQgaGFzIG5vIG5vdGlvbiBvZiB0aGUgcGh5c2ljYWwgc2l6ZSBvZiBhbiBhcmd1bWVudC5cbiAqXG4gKiBFdmVyeXRoaW5nIGVsc2UgaXMgY3VycmVudGx5IHVuc3VwcG9ydGVkLCBtb3N0IG5vdGFibHkgcHJlY2lzaW9uLCB1bnNpZ25lZFxuICogbnVtYmVycywgbm9uLWRlY2ltYWwgbnVtYmVycywgYW5kIGNoYXJhY3RlcnMuXG4gKi9cbmZ1bmN0aW9uIGpzU3ByaW50ZihmbXQpXG57XG5cdHZhciByZWdleCA9IFtcblx0ICAgICcoW14lXSopJyxcdFx0XHRcdC8qIG5vcm1hbCB0ZXh0ICovXG5cdCAgICAnJScsXHRcdFx0XHQvKiBzdGFydCBvZiBmb3JtYXQgKi9cblx0ICAgICcoW1xcJ1xcXFwtKyAjMF0qPyknLFx0XHRcdC8qIGZsYWdzIChvcHRpb25hbCkgKi9cblx0ICAgICcoWzEtOV1cXFxcZCopPycsXHRcdFx0Lyogd2lkdGggKG9wdGlvbmFsKSAqL1xuXHQgICAgJyhcXFxcLihbMS05XVxcXFxkKikpPycsXHRcdC8qIHByZWNpc2lvbiAob3B0aW9uYWwpICovXG5cdCAgICAnW2xoanp0TF0qPycsXHRcdFx0LyogbGVuZ3RoIG1vZHMgKGlnbm9yZWQpICovXG5cdCAgICAnKFtkaW91eFhmRmVFZ0dhQWNDc1NwJWpyXSknXHQvKiBjb252ZXJzaW9uICovXG5cdF0uam9pbignJyk7XG5cblx0dmFyIHJlID0gbmV3IFJlZ0V4cChyZWdleCk7XG5cdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblx0dmFyIGZsYWdzLCB3aWR0aCwgcHJlY2lzaW9uLCBjb252ZXJzaW9uO1xuXHR2YXIgbGVmdCwgcGFkLCBzaWduLCBhcmcsIG1hdGNoO1xuXHR2YXIgcmV0ID0gJyc7XG5cdHZhciBhcmduID0gMTtcblxuXHRtb2RfYXNzZXJ0LmVxdWFsKCdzdHJpbmcnLCB0eXBlb2YgKGZtdCkpO1xuXG5cdHdoaWxlICgobWF0Y2ggPSByZS5leGVjKGZtdCkpICE9PSBudWxsKSB7XG5cdFx0cmV0ICs9IG1hdGNoWzFdO1xuXHRcdGZtdCA9IGZtdC5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKTtcblxuXHRcdGZsYWdzID0gbWF0Y2hbMl0gfHwgJyc7XG5cdFx0d2lkdGggPSBtYXRjaFszXSB8fCAwO1xuXHRcdHByZWNpc2lvbiA9IG1hdGNoWzRdIHx8ICcnO1xuXHRcdGNvbnZlcnNpb24gPSBtYXRjaFs2XTtcblx0XHRsZWZ0ID0gZmFsc2U7XG5cdFx0c2lnbiA9IGZhbHNlO1xuXHRcdHBhZCA9ICcgJztcblxuXHRcdGlmIChjb252ZXJzaW9uID09ICclJykge1xuXHRcdFx0cmV0ICs9ICclJztcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGlmIChhcmdzLmxlbmd0aCA9PT0gMClcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ3RvbyBmZXcgYXJncyB0byBzcHJpbnRmJykpO1xuXG5cdFx0YXJnID0gYXJncy5zaGlmdCgpO1xuXHRcdGFyZ24rKztcblxuXHRcdGlmIChmbGFncy5tYXRjaCgvW1xcJyAjXS8pKVxuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcihcblx0XHRcdCAgICAndW5zdXBwb3J0ZWQgZmxhZ3M6ICcgKyBmbGFncykpO1xuXG5cdFx0aWYgKHByZWNpc2lvbi5sZW5ndGggPiAwKVxuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcihcblx0XHRcdCAgICAnbm9uLXplcm8gcHJlY2lzaW9uIG5vdCBzdXBwb3J0ZWQnKSk7XG5cblx0XHRpZiAoZmxhZ3MubWF0Y2goLy0vKSlcblx0XHRcdGxlZnQgPSB0cnVlO1xuXG5cdFx0aWYgKGZsYWdzLm1hdGNoKC8wLykpXG5cdFx0XHRwYWQgPSAnMCc7XG5cblx0XHRpZiAoZmxhZ3MubWF0Y2goL1xcKy8pKVxuXHRcdFx0c2lnbiA9IHRydWU7XG5cblx0XHRzd2l0Y2ggKGNvbnZlcnNpb24pIHtcblx0XHRjYXNlICdzJzpcblx0XHRcdGlmIChhcmcgPT09IHVuZGVmaW5lZCB8fCBhcmcgPT09IG51bGwpXG5cdFx0XHRcdHRocm93IChuZXcgRXJyb3IoJ2FyZ3VtZW50ICcgKyBhcmduICtcblx0XHRcdFx0ICAgICc6IGF0dGVtcHRlZCB0byBwcmludCB1bmRlZmluZWQgb3IgbnVsbCAnICtcblx0XHRcdFx0ICAgICdhcyBhIHN0cmluZycpKTtcblx0XHRcdHJldCArPSBkb1BhZChwYWQsIHdpZHRoLCBsZWZ0LCBhcmcudG9TdHJpbmcoKSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ2QnOlxuXHRcdFx0YXJnID0gTWF0aC5mbG9vcihhcmcpO1xuXHRcdFx0Lypqc2w6ZmFsbHRocnUqL1xuXHRcdGNhc2UgJ2YnOlxuXHRcdFx0c2lnbiA9IHNpZ24gJiYgYXJnID4gMCA/ICcrJyA6ICcnO1xuXHRcdFx0cmV0ICs9IHNpZ24gKyBkb1BhZChwYWQsIHdpZHRoLCBsZWZ0LFxuXHRcdFx0ICAgIGFyZy50b1N0cmluZygpKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAneCc6XG5cdFx0XHRyZXQgKz0gZG9QYWQocGFkLCB3aWR0aCwgbGVmdCwgYXJnLnRvU3RyaW5nKDE2KSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ2onOiAvKiBub24tc3RhbmRhcmQgKi9cblx0XHRcdGlmICh3aWR0aCA9PT0gMClcblx0XHRcdFx0d2lkdGggPSAxMDtcblx0XHRcdHJldCArPSBtb2RfdXRpbC5pbnNwZWN0KGFyZywgZmFsc2UsIHdpZHRoKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAncic6IC8qIG5vbi1zdGFuZGFyZCAqL1xuXHRcdFx0cmV0ICs9IGR1bXBFeGNlcHRpb24oYXJnKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIGNvbnZlcnNpb246ICcgK1xuXHRcdFx0ICAgIGNvbnZlcnNpb24pKTtcblx0XHR9XG5cdH1cblxuXHRyZXQgKz0gZm10O1xuXHRyZXR1cm4gKHJldCk7XG59XG5cbmZ1bmN0aW9uIGpzUHJpbnRmKCkge1xuXHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdGFyZ3MudW5zaGlmdChwcm9jZXNzLnN0ZG91dCk7XG5cdGpzRnByaW50Zi5hcHBseShudWxsLCBhcmdzKTtcbn1cblxuZnVuY3Rpb24ganNGcHJpbnRmKHN0cmVhbSkge1xuXHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdHJldHVybiAoc3RyZWFtLndyaXRlKGpzU3ByaW50Zi5hcHBseSh0aGlzLCBhcmdzKSkpO1xufVxuXG5mdW5jdGlvbiBkb1BhZChjaHIsIHdpZHRoLCBsZWZ0LCBzdHIpXG57XG5cdHZhciByZXQgPSBzdHI7XG5cblx0d2hpbGUgKHJldC5sZW5ndGggPCB3aWR0aCkge1xuXHRcdGlmIChsZWZ0KVxuXHRcdFx0cmV0ICs9IGNocjtcblx0XHRlbHNlXG5cdFx0XHRyZXQgPSBjaHIgKyByZXQ7XG5cdH1cblxuXHRyZXR1cm4gKHJldCk7XG59XG5cbi8qXG4gKiBUaGlzIGZ1bmN0aW9uIGR1bXBzIGxvbmcgc3RhY2sgdHJhY2VzIGZvciBleGNlcHRpb25zIGhhdmluZyBhIGNhdXNlKCkgbWV0aG9kLlxuICogU2VlIG5vZGUtdmVycm9yIGZvciBhbiBleGFtcGxlLlxuICovXG5mdW5jdGlvbiBkdW1wRXhjZXB0aW9uKGV4KVxue1xuXHR2YXIgcmV0O1xuXG5cdGlmICghKGV4IGluc3RhbmNlb2YgRXJyb3IpKVxuXHRcdHRocm93IChuZXcgRXJyb3IoanNTcHJpbnRmKCdpbnZhbGlkIHR5cGUgZm9yICUlcjogJWonLCBleCkpKTtcblxuXHQvKiBOb3RlIHRoYXQgVjggcHJlcGVuZHMgXCJleC5zdGFja1wiIHdpdGggZXgudG9TdHJpbmcoKS4gKi9cblx0cmV0ID0gJ0VYQ0VQVElPTjogJyArIGV4LmNvbnN0cnVjdG9yLm5hbWUgKyAnOiAnICsgZXguc3RhY2s7XG5cblx0aWYgKGV4LmNhdXNlICYmIHR5cGVvZiAoZXguY2F1c2UpID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGNleCA9IGV4LmNhdXNlKCk7XG5cdFx0aWYgKGNleCkge1xuXHRcdFx0cmV0ICs9ICdcXG5DYXVzZWQgYnk6ICcgKyBkdW1wRXhjZXB0aW9uKGNleCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIChyZXQpO1xufVxuIiwiLypcbiAqIHZlcnJvci5qczogcmljaGVyIEphdmFTY3JpcHQgZXJyb3JzXG4gKi9cblxudmFyIG1vZF9hc3NlcnRwbHVzID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBtb2RfdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIG1vZF9leHRzcHJpbnRmID0gcmVxdWlyZSgnZXh0c3ByaW50ZicpO1xudmFyIG1vZF9pc0Vycm9yID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJykuaXNFcnJvcjtcbnZhciBzcHJpbnRmID0gbW9kX2V4dHNwcmludGYuc3ByaW50ZjtcblxuLypcbiAqIFB1YmxpYyBpbnRlcmZhY2VcbiAqL1xuXG4vKiBTbyB5b3UgY2FuICd2YXIgVkVycm9yID0gcmVxdWlyZSgndmVycm9yJyknICovXG5tb2R1bGUuZXhwb3J0cyA9IFZFcnJvcjtcbi8qIEZvciBjb21wYXRpYmlsaXR5ICovXG5WRXJyb3IuVkVycm9yID0gVkVycm9yO1xuLyogT3RoZXIgZXhwb3J0ZWQgY2xhc3NlcyAqL1xuVkVycm9yLlNFcnJvciA9IFNFcnJvcjtcblZFcnJvci5XRXJyb3IgPSBXRXJyb3I7XG5WRXJyb3IuTXVsdGlFcnJvciA9IE11bHRpRXJyb3I7XG5cbi8qXG4gKiBDb21tb24gZnVuY3Rpb24gdXNlZCB0byBwYXJzZSBjb25zdHJ1Y3RvciBhcmd1bWVudHMgZm9yIFZFcnJvciwgV0Vycm9yLCBhbmRcbiAqIFNFcnJvci4gIE5hbWVkIGFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uOlxuICpcbiAqICAgICBzdHJpY3RcdFx0Zm9yY2Ugc3RyaWN0IGludGVycHJldGF0aW9uIG9mIHNwcmludGYgYXJndW1lbnRzLCBldmVuXG4gKiAgICAgXHRcdFx0aWYgdGhlIG9wdGlvbnMgaW4gXCJhcmd2XCIgZG9uJ3Qgc2F5IHNvXG4gKlxuICogICAgIGFyZ3ZcdFx0ZXJyb3IncyBjb25zdHJ1Y3RvciBhcmd1bWVudHMsIHdoaWNoIGFyZSB0byBiZVxuICogICAgIFx0XHRcdGludGVycHJldGVkIGFzIGRlc2NyaWJlZCBpbiBSRUFETUUubWQuICBGb3IgcXVpY2tcbiAqICAgICBcdFx0XHRyZWZlcmVuY2UsIFwiYXJndlwiIGhhcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBmb3JtczpcbiAqXG4gKiAgICAgICAgICBbIHNwcmludGZfYXJncy4uLiBdICAgICAgICAgICAoYXJndlswXSBpcyBhIHN0cmluZylcbiAqICAgICAgICAgIFsgY2F1c2UsIHNwcmludGZfYXJncy4uLiBdICAgIChhcmd2WzBdIGlzIGFuIEVycm9yKVxuICogICAgICAgICAgWyBvcHRpb25zLCBzcHJpbnRmX2FyZ3MuLi4gXSAgKGFyZ3ZbMF0gaXMgYW4gb2JqZWN0KVxuICpcbiAqIFRoaXMgZnVuY3Rpb24gbm9ybWFsaXplcyB0aGVzZSBmb3JtcywgcHJvZHVjaW5nIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAqIHByb3BlcnRpZXM6XG4gKlxuICogICAgb3B0aW9ucyAgICAgICAgICAgZXF1aXZhbGVudCB0byBcIm9wdGlvbnNcIiBpbiB0aGlyZCBmb3JtLiAgVGhpcyB3aWxsIG5ldmVyXG4gKiAgICBcdFx0XHRiZSBhIGRpcmVjdCByZWZlcmVuY2UgdG8gd2hhdCB0aGUgY2FsbGVyIHBhc3NlZCBpblxuICogICAgXHRcdFx0KGkuZS4sIGl0IG1heSBiZSBhIHNoYWxsb3cgY29weSksIHNvIGl0IGNhbiBiZSBmcmVlbHlcbiAqICAgIFx0XHRcdG1vZGlmaWVkLlxuICpcbiAqICAgIHNob3J0bWVzc2FnZSAgICAgIHJlc3VsdCBvZiBzcHJpbnRmKHNwcmludGZfYXJncyksIHRha2luZyBvcHRpb25zLnN0cmljdFxuICogICAgXHRcdFx0aW50byBhY2NvdW50IGFzIGRlc2NyaWJlZCBpbiBSRUFETUUubWQuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ29uc3RydWN0b3JBcmd1bWVudHMoYXJncylcbntcblx0dmFyIGFyZ3YsIG9wdGlvbnMsIHNwcmludGZfYXJncywgc2hvcnRtZXNzYWdlLCBrO1xuXG5cdG1vZF9hc3NlcnRwbHVzLm9iamVjdChhcmdzLCAnYXJncycpO1xuXHRtb2RfYXNzZXJ0cGx1cy5ib29sKGFyZ3Muc3RyaWN0LCAnYXJncy5zdHJpY3QnKTtcblx0bW9kX2Fzc2VydHBsdXMuYXJyYXkoYXJncy5hcmd2LCAnYXJncy5hcmd2Jyk7XG5cdGFyZ3YgPSBhcmdzLmFyZ3Y7XG5cblx0Lypcblx0ICogRmlyc3QsIGZpZ3VyZSBvdXQgd2hpY2ggZm9ybSBvZiBpbnZvY2F0aW9uIHdlJ3ZlIGJlZW4gZ2l2ZW4uXG5cdCAqL1xuXHRpZiAoYXJndi5sZW5ndGggPT09IDApIHtcblx0XHRvcHRpb25zID0ge307XG5cdFx0c3ByaW50Zl9hcmdzID0gW107XG5cdH0gZWxzZSBpZiAobW9kX2lzRXJyb3IoYXJndlswXSkpIHtcblx0XHRvcHRpb25zID0geyAnY2F1c2UnOiBhcmd2WzBdIH07XG5cdFx0c3ByaW50Zl9hcmdzID0gYXJndi5zbGljZSgxKTtcblx0fSBlbHNlIGlmICh0eXBlb2YgKGFyZ3ZbMF0pID09PSAnb2JqZWN0Jykge1xuXHRcdG9wdGlvbnMgPSB7fTtcblx0XHRmb3IgKGsgaW4gYXJndlswXSkge1xuXHRcdFx0b3B0aW9uc1trXSA9IGFyZ3ZbMF1ba107XG5cdFx0fVxuXHRcdHNwcmludGZfYXJncyA9IGFyZ3Yuc2xpY2UoMSk7XG5cdH0gZWxzZSB7XG5cdFx0bW9kX2Fzc2VydHBsdXMuc3RyaW5nKGFyZ3ZbMF0sXG5cdFx0ICAgICdmaXJzdCBhcmd1bWVudCB0byBWRXJyb3IsIFNFcnJvciwgb3IgV0Vycm9yICcgK1xuXHRcdCAgICAnY29uc3RydWN0b3IgbXVzdCBiZSBhIHN0cmluZywgb2JqZWN0LCBvciBFcnJvcicpO1xuXHRcdG9wdGlvbnMgPSB7fTtcblx0XHRzcHJpbnRmX2FyZ3MgPSBhcmd2O1xuXHR9XG5cblx0Lypcblx0ICogTm93IGNvbnN0cnVjdCB0aGUgZXJyb3IncyBtZXNzYWdlLlxuXHQgKlxuXHQgKiBleHRzcHJpbnRmICh3aGljaCB3ZSBpbnZva2UgaGVyZSB3aXRoIG91ciBjYWxsZXIncyBhcmd1bWVudHMgaW4gb3JkZXJcblx0ICogdG8gY29uc3RydWN0IHRoaXMgRXJyb3IncyBtZXNzYWdlKSBpcyBzdHJpY3QgaW4gaXRzIGludGVycHJldGF0aW9uIG9mXG5cdCAqIHZhbHVlcyB0byBiZSBwcm9jZXNzZWQgYnkgdGhlIFwiJXNcIiBzcGVjaWZpZXIuICBUaGUgdmFsdWUgcGFzc2VkIHRvXG5cdCAqIGV4dHNwcmludGYgbXVzdCBhY3R1YWxseSBiZSBhIHN0cmluZyBvciBzb21ldGhpbmcgY29udmVydGlibGUgdG8gYVxuXHQgKiBTdHJpbmcgdXNpbmcgLnRvU3RyaW5nKCkuICBQYXNzaW5nIG90aGVyIHZhbHVlcyAobm90YWJseSBcIm51bGxcIiBhbmRcblx0ICogXCJ1bmRlZmluZWRcIikgaXMgY29uc2lkZXJlZCBhIHByb2dyYW1tZXIgZXJyb3IuICBUaGUgYXNzdW1wdGlvbiBpc1xuXHQgKiB0aGF0IGlmIHlvdSBhY3R1YWxseSB3YW50IHRvIHByaW50IHRoZSBzdHJpbmcgXCJudWxsXCIgb3IgXCJ1bmRlZmluZWRcIixcblx0ICogdGhlbiB0aGF0J3MgZWFzeSB0byBkbyB0aGF0IHdoZW4geW91J3JlIGNhbGxpbmcgZXh0c3ByaW50Zjsgb24gdGhlXG5cdCAqIG90aGVyIGhhbmQsIGlmIHlvdSBkaWQgTk9UIHdhbnQgdGhhdCAoaS5lLiwgdGhlcmUncyBhY3R1YWxseSBhIGJ1Z1xuXHQgKiB3aGVyZSB0aGUgcHJvZ3JhbSBhc3N1bWVzIHNvbWUgdmFyaWFibGUgaXMgbm9uLW51bGwgYW5kIHRyaWVzIHRvXG5cdCAqIHByaW50IGl0LCB3aGljaCBtaWdodCBoYXBwZW4gd2hlbiBjb25zdHJ1Y3RpbmcgYSBwYWNrZXQgb3IgZmlsZSBpblxuXHQgKiBzb21lIHNwZWNpZmljIGZvcm1hdCksIHRoZW4gaXQncyBiZXR0ZXIgdG8gc3RvcCBpbW1lZGlhdGVseSB0aGFuXG5cdCAqIHByb2R1Y2UgYm9ndXMgb3V0cHV0LlxuXHQgKlxuXHQgKiBIb3dldmVyLCBzb21ldGltZXMgdGhlIGJ1ZyBpcyBvbmx5IGluIHRoZSBjb2RlIGNhbGxpbmcgVkVycm9yLCBhbmQgYVxuXHQgKiBwcm9ncmFtbWVyIG1pZ2h0IHByZWZlciB0byBoYXZlIHRoZSBlcnJvciBtZXNzYWdlIGNvbnRhaW4gXCJudWxsXCIgb3Jcblx0ICogXCJ1bmRlZmluZWRcIiByYXRoZXIgdGhhbiBoYXZlIHRoZSBidWcgaW4gdGhlIGVycm9yIHBhdGggY3Jhc2ggdGhlXG5cdCAqIHByb2dyYW0gKG1ha2luZyB0aGUgZmlyc3QgYnVnIGhhcmRlciB0byBpZGVudGlmeSkuICBGb3IgdGhhdCByZWFzb24sXG5cdCAqIGJ5IGRlZmF1bHQgVkVycm9yIGNvbnZlcnRzIFwibnVsbFwiIG9yIFwidW5kZWZpbmVkXCIgYXJndW1lbnRzIHRvIHRoZWlyXG5cdCAqIHN0cmluZyByZXByZXNlbnRhdGlvbnMgYW5kIHBhc3NlcyB0aG9zZSB0byBleHRzcHJpbnRmLiAgUHJvZ3JhbW1lcnNcblx0ICogZGVzaXJpbmcgdGhlIHN0cmljdCBiZWhhdmlvciBjYW4gdXNlIHRoZSBTRXJyb3IgY2xhc3Mgb3IgcGFzcyB0aGVcblx0ICogXCJzdHJpY3RcIiBvcHRpb24gdG8gdGhlIFZFcnJvciBjb25zdHJ1Y3Rvci5cblx0ICovXG5cdG1vZF9hc3NlcnRwbHVzLm9iamVjdChvcHRpb25zKTtcblx0aWYgKCFvcHRpb25zLnN0cmljdCAmJiAhYXJncy5zdHJpY3QpIHtcblx0XHRzcHJpbnRmX2FyZ3MgPSBzcHJpbnRmX2FyZ3MubWFwKGZ1bmN0aW9uIChhKSB7XG5cdFx0XHRyZXR1cm4gKGEgPT09IG51bGwgPyAnbnVsbCcgOlxuXHRcdFx0ICAgIGEgPT09IHVuZGVmaW5lZCA/ICd1bmRlZmluZWQnIDogYSk7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoc3ByaW50Zl9hcmdzLmxlbmd0aCA9PT0gMCkge1xuXHRcdHNob3J0bWVzc2FnZSA9ICcnO1xuXHR9IGVsc2Uge1xuXHRcdHNob3J0bWVzc2FnZSA9IHNwcmludGYuYXBwbHkobnVsbCwgc3ByaW50Zl9hcmdzKTtcblx0fVxuXG5cdHJldHVybiAoe1xuXHQgICAgJ29wdGlvbnMnOiBvcHRpb25zLFxuXHQgICAgJ3Nob3J0bWVzc2FnZSc6IHNob3J0bWVzc2FnZVxuXHR9KTtcbn1cblxuLypcbiAqIFNlZSBSRUFETUUubWQgZm9yIHJlZmVyZW5jZSBkb2N1bWVudGF0aW9uLlxuICovXG5mdW5jdGlvbiBWRXJyb3IoKVxue1xuXHR2YXIgYXJncywgb2JqLCBwYXJzZWQsIGNhdXNlLCBjdG9yLCBtZXNzYWdlLCBrO1xuXG5cdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG5cdC8qXG5cdCAqIFRoaXMgaXMgYSByZWdyZXR0YWJsZSBwYXR0ZXJuLCBidXQgSmF2YVNjcmlwdCdzIGJ1aWx0LWluIEVycm9yIGNsYXNzXG5cdCAqIGlzIGRlZmluZWQgdG8gd29yayB0aGlzIHdheSwgc28gd2UgYWxsb3cgdGhlIGNvbnN0cnVjdG9yIHRvIGJlIGNhbGxlZFxuXHQgKiB3aXRob3V0IFwibmV3XCIuXG5cdCAqL1xuXHRpZiAoISh0aGlzIGluc3RhbmNlb2YgVkVycm9yKSkge1xuXHRcdG9iaiA9IE9iamVjdC5jcmVhdGUoVkVycm9yLnByb3RvdHlwZSk7XG5cdFx0VkVycm9yLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gKG9iaik7XG5cdH1cblxuXHQvKlxuXHQgKiBGb3IgY29udmVuaWVuY2UgYW5kIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBzdXBwb3J0IHNldmVyYWxcblx0ICogZGlmZmVyZW50IGNhbGxpbmcgZm9ybXMuICBOb3JtYWxpemUgdGhlbSBoZXJlLlxuXHQgKi9cblx0cGFyc2VkID0gcGFyc2VDb25zdHJ1Y3RvckFyZ3VtZW50cyh7XG5cdCAgICAnYXJndic6IGFyZ3MsXG5cdCAgICAnc3RyaWN0JzogZmFsc2Vcblx0fSk7XG5cblx0Lypcblx0ICogSWYgd2UndmUgYmVlbiBnaXZlbiBhIG5hbWUsIGFwcGx5IGl0IG5vdy5cblx0ICovXG5cdGlmIChwYXJzZWQub3B0aW9ucy5uYW1lKSB7XG5cdFx0bW9kX2Fzc2VydHBsdXMuc3RyaW5nKHBhcnNlZC5vcHRpb25zLm5hbWUsXG5cdFx0ICAgICdlcnJvclxcJ3MgXCJuYW1lXCIgbXVzdCBiZSBhIHN0cmluZycpO1xuXHRcdHRoaXMubmFtZSA9IHBhcnNlZC5vcHRpb25zLm5hbWU7XG5cdH1cblxuXHQvKlxuXHQgKiBGb3IgZGVidWdnaW5nLCB3ZSBrZWVwIHRyYWNrIG9mIHRoZSBvcmlnaW5hbCBzaG9ydCBtZXNzYWdlIChhdHRhY2hlZFxuXHQgKiB0aGlzIEVycm9yIHBhcnRpY3VsYXJseSkgc2VwYXJhdGVseSBmcm9tIHRoZSBjb21wbGV0ZSBtZXNzYWdlICh3aGljaFxuXHQgKiBpbmNsdWRlcyB0aGUgbWVzc2FnZXMgb2Ygb3VyIGNhdXNlIGNoYWluKS5cblx0ICovXG5cdHRoaXMuanNlX3Nob3J0bXNnID0gcGFyc2VkLnNob3J0bWVzc2FnZTtcblx0bWVzc2FnZSA9IHBhcnNlZC5zaG9ydG1lc3NhZ2U7XG5cblx0Lypcblx0ICogSWYgd2UndmUgYmVlbiBnaXZlbiBhIGNhdXNlLCByZWNvcmQgYSByZWZlcmVuY2UgdG8gaXQgYW5kIHVwZGF0ZSBvdXJcblx0ICogbWVzc2FnZSBhcHByb3ByaWF0ZWx5LlxuXHQgKi9cblx0Y2F1c2UgPSBwYXJzZWQub3B0aW9ucy5jYXVzZTtcblx0aWYgKGNhdXNlKSB7XG5cdFx0bW9kX2Fzc2VydHBsdXMub2sobW9kX2lzRXJyb3IoY2F1c2UpLCAnY2F1c2UgaXMgbm90IGFuIEVycm9yJyk7XG5cdFx0dGhpcy5qc2VfY2F1c2UgPSBjYXVzZTtcblxuXHRcdGlmICghcGFyc2VkLm9wdGlvbnMuc2tpcENhdXNlTWVzc2FnZSkge1xuXHRcdFx0bWVzc2FnZSArPSAnOiAnICsgY2F1c2UubWVzc2FnZTtcblx0XHR9XG5cdH1cblxuXHQvKlxuXHQgKiBJZiB3ZSd2ZSBiZWVuIGdpdmVuIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXMsIHNoYWxsb3ctY29weSB0aGF0XG5cdCAqIGhlcmUuICBXZSBkb24ndCB3YW50IHRvIHVzZSBhIGRlZXAgY29weSBpbiBjYXNlIHRoZXJlIGFyZSBub24tcGxhaW5cblx0ICogb2JqZWN0cyBoZXJlLCBidXQgd2UgZG9uJ3Qgd2FudCB0byB1c2UgdGhlIG9yaWdpbmFsIG9iamVjdCBpbiBjYXNlXG5cdCAqIHRoZSBjYWxsZXIgbW9kaWZpZXMgaXQgbGF0ZXIuXG5cdCAqL1xuXHR0aGlzLmpzZV9pbmZvID0ge307XG5cdGlmIChwYXJzZWQub3B0aW9ucy5pbmZvKSB7XG5cdFx0Zm9yIChrIGluIHBhcnNlZC5vcHRpb25zLmluZm8pIHtcblx0XHRcdHRoaXMuanNlX2luZm9ba10gPSBwYXJzZWQub3B0aW9ucy5pbmZvW2tdO1xuXHRcdH1cblx0fVxuXG5cdHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cblx0aWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG5cdFx0Y3RvciA9IHBhcnNlZC5vcHRpb25zLmNvbnN0cnVjdG9yT3B0IHx8IHRoaXMuY29uc3RydWN0b3I7XG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgY3Rvcik7XG5cdH1cblxuXHRyZXR1cm4gKHRoaXMpO1xufVxuXG5tb2RfdXRpbC5pbmhlcml0cyhWRXJyb3IsIEVycm9yKTtcblZFcnJvci5wcm90b3R5cGUubmFtZSA9ICdWRXJyb3InO1xuXG5WRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdmVfdG9TdHJpbmcoKVxue1xuXHR2YXIgc3RyID0gKHRoaXMuaGFzT3duUHJvcGVydHkoJ25hbWUnKSAmJiB0aGlzLm5hbWUgfHxcblx0XHR0aGlzLmNvbnN0cnVjdG9yLm5hbWUgfHwgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUubmFtZSk7XG5cdGlmICh0aGlzLm1lc3NhZ2UpXG5cdFx0c3RyICs9ICc6ICcgKyB0aGlzLm1lc3NhZ2U7XG5cblx0cmV0dXJuIChzdHIpO1xufTtcblxuLypcbiAqIFRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGZvciBjb21wYXRpYmlsaXR5LiAgTmV3IGNhbGxlcnMgc2hvdWxkIHVzZVxuICogVkVycm9yLmNhdXNlKCkgaW5zdGVhZC4gIFRoYXQgbWV0aG9kIGFsc28gdXNlcyB0aGUgc2FuZXIgYG51bGxgIHJldHVybiB2YWx1ZVxuICogd2hlbiB0aGVyZSBpcyBubyBjYXVzZS5cbiAqL1xuVkVycm9yLnByb3RvdHlwZS5jYXVzZSA9IGZ1bmN0aW9uIHZlX2NhdXNlKClcbntcblx0dmFyIGNhdXNlID0gVkVycm9yLmNhdXNlKHRoaXMpO1xuXHRyZXR1cm4gKGNhdXNlID09PSBudWxsID8gdW5kZWZpbmVkIDogY2F1c2UpO1xufTtcblxuLypcbiAqIFN0YXRpYyBtZXRob2RzXG4gKlxuICogVGhlc2UgY2xhc3MtbGV2ZWwgbWV0aG9kcyBhcmUgcHJvdmlkZWQgc28gdGhhdCBjYWxsZXJzIGNhbiB1c2UgdGhlbSBvblxuICogaW5zdGFuY2VzIG9mIEVycm9ycyB0aGF0IGFyZSBub3QgVkVycm9ycy4gIE5ldyBpbnRlcmZhY2VzIHNob3VsZCBiZSBwcm92aWRlZFxuICogb25seSB1c2luZyBzdGF0aWMgbWV0aG9kcyB0byBlbGltaW5hdGUgdGhlIGNsYXNzIG9mIHByb2dyYW1taW5nIG1pc3Rha2Ugd2hlcmVcbiAqIHBlb3BsZSBmYWlsIHRvIGNoZWNrIHdoZXRoZXIgdGhlIEVycm9yIG9iamVjdCBoYXMgdGhlIGNvcnJlc3BvbmRpbmcgbWV0aG9kcy5cbiAqL1xuXG5WRXJyb3IuY2F1c2UgPSBmdW5jdGlvbiAoZXJyKVxue1xuXHRtb2RfYXNzZXJ0cGx1cy5vayhtb2RfaXNFcnJvcihlcnIpLCAnZXJyIG11c3QgYmUgYW4gRXJyb3InKTtcblx0cmV0dXJuIChtb2RfaXNFcnJvcihlcnIuanNlX2NhdXNlKSA/IGVyci5qc2VfY2F1c2UgOiBudWxsKTtcbn07XG5cblZFcnJvci5pbmZvID0gZnVuY3Rpb24gKGVycilcbntcblx0dmFyIHJ2LCBjYXVzZSwgaztcblxuXHRtb2RfYXNzZXJ0cGx1cy5vayhtb2RfaXNFcnJvcihlcnIpLCAnZXJyIG11c3QgYmUgYW4gRXJyb3InKTtcblx0Y2F1c2UgPSBWRXJyb3IuY2F1c2UoZXJyKTtcblx0aWYgKGNhdXNlICE9PSBudWxsKSB7XG5cdFx0cnYgPSBWRXJyb3IuaW5mbyhjYXVzZSk7XG5cdH0gZWxzZSB7XG5cdFx0cnYgPSB7fTtcblx0fVxuXG5cdGlmICh0eXBlb2YgKGVyci5qc2VfaW5mbykgPT0gJ29iamVjdCcgJiYgZXJyLmpzZV9pbmZvICE9PSBudWxsKSB7XG5cdFx0Zm9yIChrIGluIGVyci5qc2VfaW5mbykge1xuXHRcdFx0cnZba10gPSBlcnIuanNlX2luZm9ba107XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIChydik7XG59O1xuXG5WRXJyb3IuZmluZENhdXNlQnlOYW1lID0gZnVuY3Rpb24gKGVyciwgbmFtZSlcbntcblx0dmFyIGNhdXNlO1xuXG5cdG1vZF9hc3NlcnRwbHVzLm9rKG1vZF9pc0Vycm9yKGVyciksICdlcnIgbXVzdCBiZSBhbiBFcnJvcicpO1xuXHRtb2RfYXNzZXJ0cGx1cy5zdHJpbmcobmFtZSwgJ25hbWUnKTtcblx0bW9kX2Fzc2VydHBsdXMub2sobmFtZS5sZW5ndGggPiAwLCAnbmFtZSBjYW5ub3QgYmUgZW1wdHknKTtcblxuXHRmb3IgKGNhdXNlID0gZXJyOyBjYXVzZSAhPT0gbnVsbDsgY2F1c2UgPSBWRXJyb3IuY2F1c2UoY2F1c2UpKSB7XG5cdFx0bW9kX2Fzc2VydHBsdXMub2sobW9kX2lzRXJyb3IoY2F1c2UpKTtcblx0XHRpZiAoY2F1c2UubmFtZSA9PSBuYW1lKSB7XG5cdFx0XHRyZXR1cm4gKGNhdXNlKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gKG51bGwpO1xufTtcblxuVkVycm9yLmhhc0NhdXNlV2l0aE5hbWUgPSBmdW5jdGlvbiAoZXJyLCBuYW1lKVxue1xuXHRyZXR1cm4gKFZFcnJvci5maW5kQ2F1c2VCeU5hbWUoZXJyLCBuYW1lKSAhPT0gbnVsbCk7XG59O1xuXG5WRXJyb3IuZnVsbFN0YWNrID0gZnVuY3Rpb24gKGVycilcbntcblx0bW9kX2Fzc2VydHBsdXMub2sobW9kX2lzRXJyb3IoZXJyKSwgJ2VyciBtdXN0IGJlIGFuIEVycm9yJyk7XG5cblx0dmFyIGNhdXNlID0gVkVycm9yLmNhdXNlKGVycik7XG5cblx0aWYgKGNhdXNlKSB7XG5cdFx0cmV0dXJuIChlcnIuc3RhY2sgKyAnXFxuY2F1c2VkIGJ5OiAnICsgVkVycm9yLmZ1bGxTdGFjayhjYXVzZSkpO1xuXHR9XG5cblx0cmV0dXJuIChlcnIuc3RhY2spO1xufTtcblxuVkVycm9yLmVycm9yRnJvbUxpc3QgPSBmdW5jdGlvbiAoZXJyb3JzKVxue1xuXHRtb2RfYXNzZXJ0cGx1cy5hcnJheU9mT2JqZWN0KGVycm9ycywgJ2Vycm9ycycpO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIChudWxsKTtcblx0fVxuXG5cdGVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG5cdFx0bW9kX2Fzc2VydHBsdXMub2sobW9kX2lzRXJyb3IoZSkpO1xuXHR9KTtcblxuXHRpZiAoZXJyb3JzLmxlbmd0aCA9PSAxKSB7XG5cdFx0cmV0dXJuIChlcnJvcnNbMF0pO1xuXHR9XG5cblx0cmV0dXJuIChuZXcgTXVsdGlFcnJvcihlcnJvcnMpKTtcbn07XG5cblZFcnJvci5lcnJvckZvckVhY2ggPSBmdW5jdGlvbiAoZXJyLCBmdW5jKVxue1xuXHRtb2RfYXNzZXJ0cGx1cy5vayhtb2RfaXNFcnJvcihlcnIpLCAnZXJyIG11c3QgYmUgYW4gRXJyb3InKTtcblx0bW9kX2Fzc2VydHBsdXMuZnVuYyhmdW5jLCAnZnVuYycpO1xuXG5cdGlmIChlcnIgaW5zdGFuY2VvZiBNdWx0aUVycm9yKSB7XG5cdFx0ZXJyLmVycm9ycygpLmZvckVhY2goZnVuY3Rpb24gaXRlckVycm9yKGUpIHsgZnVuYyhlKTsgfSk7XG5cdH0gZWxzZSB7XG5cdFx0ZnVuYyhlcnIpO1xuXHR9XG59O1xuXG5cbi8qXG4gKiBTRXJyb3IgaXMgbGlrZSBWRXJyb3IsIGJ1dCBzdHJpY3RlciBhYm91dCB0eXBlcy4gIFlvdSBjYW5ub3QgcGFzcyBcIm51bGxcIiBvclxuICogXCJ1bmRlZmluZWRcIiBhcyBzdHJpbmcgYXJndW1lbnRzIHRvIHRoZSBmb3JtYXR0ZXIuXG4gKi9cbmZ1bmN0aW9uIFNFcnJvcigpXG57XG5cdHZhciBhcmdzLCBvYmosIHBhcnNlZCwgb3B0aW9ucztcblxuXHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIFNFcnJvcikpIHtcblx0XHRvYmogPSBPYmplY3QuY3JlYXRlKFNFcnJvci5wcm90b3R5cGUpO1xuXHRcdFNFcnJvci5hcHBseShvYmosIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIChvYmopO1xuXHR9XG5cblx0cGFyc2VkID0gcGFyc2VDb25zdHJ1Y3RvckFyZ3VtZW50cyh7XG5cdCAgICAnYXJndic6IGFyZ3MsXG5cdCAgICAnc3RyaWN0JzogdHJ1ZVxuXHR9KTtcblxuXHRvcHRpb25zID0gcGFyc2VkLm9wdGlvbnM7XG5cdFZFcnJvci5jYWxsKHRoaXMsIG9wdGlvbnMsICclcycsIHBhcnNlZC5zaG9ydG1lc3NhZ2UpO1xuXG5cdHJldHVybiAodGhpcyk7XG59XG5cbi8qXG4gKiBXZSBkb24ndCBib3RoZXIgc2V0dGluZyBTRXJyb3IucHJvdG90eXBlLm5hbWUgYmVjYXVzZSBvbmNlIGNvbnN0cnVjdGVkLFxuICogU0Vycm9ycyBhcmUganVzdCBsaWtlIFZFcnJvcnMuXG4gKi9cbm1vZF91dGlsLmluaGVyaXRzKFNFcnJvciwgVkVycm9yKTtcblxuXG4vKlxuICogUmVwcmVzZW50cyBhIGNvbGxlY3Rpb24gb2YgZXJyb3JzIGZvciB0aGUgcHVycG9zZSBvZiBjb25zdW1lcnMgdGhhdCBnZW5lcmFsbHlcbiAqIG9ubHkgZGVhbCB3aXRoIG9uZSBlcnJvci4gIENhbGxlcnMgY2FuIGV4dHJhY3QgdGhlIGluZGl2aWR1YWwgZXJyb3JzXG4gKiBjb250YWluZWQgaW4gdGhpcyBvYmplY3QsIGJ1dCBtYXkgYWxzbyBqdXN0IHRyZWF0IGl0IGFzIGEgbm9ybWFsIHNpbmdsZVxuICogZXJyb3IsIGluIHdoaWNoIGNhc2UgYSBzdW1tYXJ5IG1lc3NhZ2Ugd2lsbCBiZSBwcmludGVkLlxuICovXG5mdW5jdGlvbiBNdWx0aUVycm9yKGVycm9ycylcbntcblx0bW9kX2Fzc2VydHBsdXMuYXJyYXkoZXJyb3JzLCAnbGlzdCBvZiBlcnJvcnMnKTtcblx0bW9kX2Fzc2VydHBsdXMub2soZXJyb3JzLmxlbmd0aCA+IDAsICdtdXN0IGJlIGF0IGxlYXN0IG9uZSBlcnJvcicpO1xuXHR0aGlzLmFzZV9lcnJvcnMgPSBlcnJvcnM7XG5cblx0VkVycm9yLmNhbGwodGhpcywge1xuXHQgICAgJ2NhdXNlJzogZXJyb3JzWzBdXG5cdH0sICdmaXJzdCBvZiAlZCBlcnJvciVzJywgZXJyb3JzLmxlbmd0aCwgZXJyb3JzLmxlbmd0aCA9PSAxID8gJycgOiAncycpO1xufVxuXG5tb2RfdXRpbC5pbmhlcml0cyhNdWx0aUVycm9yLCBWRXJyb3IpO1xuTXVsdGlFcnJvci5wcm90b3R5cGUubmFtZSA9ICdNdWx0aUVycm9yJztcblxuTXVsdGlFcnJvci5wcm90b3R5cGUuZXJyb3JzID0gZnVuY3Rpb24gbWVfZXJyb3JzKClcbntcblx0cmV0dXJuICh0aGlzLmFzZV9lcnJvcnMuc2xpY2UoMCkpO1xufTtcblxuXG4vKlxuICogU2VlIFJFQURNRS5tZCBmb3IgcmVmZXJlbmNlIGRldGFpbHMuXG4gKi9cbmZ1bmN0aW9uIFdFcnJvcigpXG57XG5cdHZhciBhcmdzLCBvYmosIHBhcnNlZCwgb3B0aW9ucztcblxuXHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIFdFcnJvcikpIHtcblx0XHRvYmogPSBPYmplY3QuY3JlYXRlKFdFcnJvci5wcm90b3R5cGUpO1xuXHRcdFdFcnJvci5hcHBseShvYmosIGFyZ3MpO1xuXHRcdHJldHVybiAob2JqKTtcblx0fVxuXG5cdHBhcnNlZCA9IHBhcnNlQ29uc3RydWN0b3JBcmd1bWVudHMoe1xuXHQgICAgJ2FyZ3YnOiBhcmdzLFxuXHQgICAgJ3N0cmljdCc6IGZhbHNlXG5cdH0pO1xuXG5cdG9wdGlvbnMgPSBwYXJzZWQub3B0aW9ucztcblx0b3B0aW9uc1snc2tpcENhdXNlTWVzc2FnZSddID0gdHJ1ZTtcblx0VkVycm9yLmNhbGwodGhpcywgb3B0aW9ucywgJyVzJywgcGFyc2VkLnNob3J0bWVzc2FnZSk7XG5cblx0cmV0dXJuICh0aGlzKTtcbn1cblxubW9kX3V0aWwuaW5oZXJpdHMoV0Vycm9yLCBWRXJyb3IpO1xuV0Vycm9yLnByb3RvdHlwZS5uYW1lID0gJ1dFcnJvcic7XG5cbldFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB3ZV90b1N0cmluZygpXG57XG5cdHZhciBzdHIgPSAodGhpcy5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpICYmIHRoaXMubmFtZSB8fFxuXHRcdHRoaXMuY29uc3RydWN0b3IubmFtZSB8fCB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5uYW1lKTtcblx0aWYgKHRoaXMubWVzc2FnZSlcblx0XHRzdHIgKz0gJzogJyArIHRoaXMubWVzc2FnZTtcblx0aWYgKHRoaXMuanNlX2NhdXNlICYmIHRoaXMuanNlX2NhdXNlLm1lc3NhZ2UpXG5cdFx0c3RyICs9ICc7IGNhdXNlZCBieSAnICsgdGhpcy5qc2VfY2F1c2UudG9TdHJpbmcoKTtcblxuXHRyZXR1cm4gKHN0cik7XG59O1xuXG4vKlxuICogRm9yIHB1cmVseSBoaXN0b3JpY2FsIHJlYXNvbnMsIFdFcnJvcidzIGNhdXNlKCkgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXRcbiAqIHRoZSBjYXVzZS5cbiAqL1xuV0Vycm9yLnByb3RvdHlwZS5jYXVzZSA9IGZ1bmN0aW9uIHdlX2NhdXNlKGMpXG57XG5cdGlmIChtb2RfaXNFcnJvcihjKSlcblx0XHR0aGlzLmpzZV9jYXVzZSA9IGM7XG5cblx0cmV0dXJuICh0aGlzLmpzZV9jYXVzZSk7XG59O1xuIiwiLypcbiAqIGV4dHNwcmludGYuanM6IGV4dGVuZGVkIFBPU0lYLXN0eWxlIHNwcmludGZcbiAqL1xuXG52YXIgbW9kX2Fzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIG1vZF91dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG4vKlxuICogUHVibGljIGludGVyZmFjZVxuICovXG5leHBvcnRzLnNwcmludGYgPSBqc1NwcmludGY7XG5leHBvcnRzLnByaW50ZiA9IGpzUHJpbnRmO1xuZXhwb3J0cy5mcHJpbnRmID0ganNGcHJpbnRmO1xuXG4vKlxuICogU3RyaXBwZWQgZG93biB2ZXJzaW9uIG9mIHNbbl1wcmludGYoM2MpLiAgV2UgbWFrZSBhIGJlc3QgZWZmb3J0IHRvIHRocm93IGFuXG4gKiBleGNlcHRpb24gd2hlbiBnaXZlbiBhIGZvcm1hdCBzdHJpbmcgd2UgZG9uJ3QgdW5kZXJzdGFuZCwgcmF0aGVyIHRoYW5cbiAqIGlnbm9yaW5nIGl0LCBzbyB0aGF0IHdlIHdvbid0IGJyZWFrIGV4aXN0aW5nIHByb2dyYW1zIGlmL3doZW4gd2UgZ28gaW1wbGVtZW50XG4gKiB0aGUgcmVzdCBvZiB0aGlzLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gY3VycmVudGx5IHN1cHBvcnRzIHNwZWNpZnlpbmdcbiAqXHQtIGZpZWxkIGFsaWdubWVudCAoJy0nIGZsYWcpLFxuICogXHQtIHplcm8tcGFkICgnMCcgZmxhZylcbiAqXHQtIGFsd2F5cyBzaG93IG51bWVyaWMgc2lnbiAoJysnIGZsYWcpLFxuICpcdC0gZmllbGQgd2lkdGhcbiAqXHQtIGNvbnZlcnNpb25zIGZvciBzdHJpbmdzLCBkZWNpbWFsIGludGVnZXJzLCBhbmQgZmxvYXRzIChudW1iZXJzKS5cbiAqXHQtIGFyZ3VtZW50IHNpemUgc3BlY2lmaWVycy4gIFRoZXNlIGFyZSBhbGwgYWNjZXB0ZWQgYnV0IGlnbm9yZWQsIHNpbmNlXG4gKlx0ICBKYXZhc2NyaXB0IGhhcyBubyBub3Rpb24gb2YgdGhlIHBoeXNpY2FsIHNpemUgb2YgYW4gYXJndW1lbnQuXG4gKlxuICogRXZlcnl0aGluZyBlbHNlIGlzIGN1cnJlbnRseSB1bnN1cHBvcnRlZCwgbW9zdCBub3RhYmx5IHByZWNpc2lvbiwgdW5zaWduZWRcbiAqIG51bWJlcnMsIG5vbi1kZWNpbWFsIG51bWJlcnMsIGFuZCBjaGFyYWN0ZXJzLlxuICovXG5mdW5jdGlvbiBqc1NwcmludGYob2ZtdClcbntcblx0dmFyIHJlZ2V4ID0gW1xuXHQgICAgJyhbXiVdKiknLFx0XHRcdFx0Lyogbm9ybWFsIHRleHQgKi9cblx0ICAgICclJyxcdFx0XHRcdC8qIHN0YXJ0IG9mIGZvcm1hdCAqL1xuXHQgICAgJyhbXFwnXFxcXC0rICMwXSo/KScsXHRcdFx0LyogZmxhZ3MgKG9wdGlvbmFsKSAqL1xuXHQgICAgJyhbMS05XVxcXFxkKik/JyxcdFx0XHQvKiB3aWR0aCAob3B0aW9uYWwpICovXG5cdCAgICAnKFxcXFwuKFsxLTldXFxcXGQqKSk/JyxcdFx0LyogcHJlY2lzaW9uIChvcHRpb25hbCkgKi9cblx0ICAgICdbbGhqenRMXSo/JyxcdFx0XHQvKiBsZW5ndGggbW9kcyAoaWdub3JlZCkgKi9cblx0ICAgICcoW2Rpb3V4WGZGZUVnR2FBY0NzU3AlanJdKSdcdC8qIGNvbnZlcnNpb24gKi9cblx0XS5qb2luKCcnKTtcblxuXHR2YXIgcmUgPSBuZXcgUmVnRXhwKHJlZ2V4KTtcblxuXHQvKiB2YXJpYWRpYyBhcmd1bWVudHMgdXNlZCB0byBmaWxsIGluIGNvbnZlcnNpb24gc3BlY2lmaWVycyAqL1xuXHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdC8qIHJlbWFpbmluZyBmb3JtYXQgc3RyaW5nICovXG5cdHZhciBmbXQgPSBvZm10O1xuXG5cdC8qIGNvbXBvbmVudHMgb2YgdGhlIGN1cnJlbnQgY29udmVyc2lvbiBzcGVjaWZpZXIgKi9cblx0dmFyIGZsYWdzLCB3aWR0aCwgcHJlY2lzaW9uLCBjb252ZXJzaW9uO1xuXHR2YXIgbGVmdCwgcGFkLCBzaWduLCBhcmcsIG1hdGNoO1xuXG5cdC8qIHJldHVybiB2YWx1ZSAqL1xuXHR2YXIgcmV0ID0gJyc7XG5cblx0LyogY3VycmVudCB2YXJpYWRpYyBhcmd1bWVudCAoMS1iYXNlZCkgKi9cblx0dmFyIGFyZ24gPSAxO1xuXHQvKiAwLWJhc2VkIHBvc2l0aW9uIGluIHRoZSBmb3JtYXQgc3RyaW5nIHRoYXQgd2UndmUgcmVhZCAqL1xuXHR2YXIgcG9zbiA9IDA7XG5cdC8qIDEtYmFzZWQgcG9zaXRpb24gaW4gdGhlIGZvcm1hdCBzdHJpbmcgb2YgdGhlIGN1cnJlbnQgY29udmVyc2lvbiAqL1xuXHR2YXIgY29udnBvc247XG5cdC8qIGN1cnJlbnQgY29udmVyc2lvbiBzcGVjaWZpZXIgKi9cblx0dmFyIGN1cmNvbnY7XG5cblx0bW9kX2Fzc2VydC5lcXVhbCgnc3RyaW5nJywgdHlwZW9mIChmbXQpLFxuXHQgICAgJ2ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBmb3JtYXQgc3RyaW5nJyk7XG5cblx0d2hpbGUgKChtYXRjaCA9IHJlLmV4ZWMoZm10KSkgIT09IG51bGwpIHtcblx0XHRyZXQgKz0gbWF0Y2hbMV07XG5cdFx0Zm10ID0gZm10LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xuXG5cdFx0Lypcblx0XHQgKiBVcGRhdGUgZmxhZ3MgcmVsYXRlZCB0byB0aGUgY3VycmVudCBjb252ZXJzaW9uIHNwZWNpZmllcidzXG5cdFx0ICogcG9zaXRpb24gc28gdGhhdCB3ZSBjYW4gcmVwb3J0IGNsZWFyIGVycm9yIG1lc3NhZ2VzLlxuXHRcdCAqL1xuXHRcdGN1cmNvbnYgPSBtYXRjaFswXS5zdWJzdHJpbmcobWF0Y2hbMV0ubGVuZ3RoKTtcblx0XHRjb252cG9zbiA9IHBvc24gKyBtYXRjaFsxXS5sZW5ndGggKyAxO1xuXHRcdHBvc24gKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuXG5cdFx0ZmxhZ3MgPSBtYXRjaFsyXSB8fCAnJztcblx0XHR3aWR0aCA9IG1hdGNoWzNdIHx8IDA7XG5cdFx0cHJlY2lzaW9uID0gbWF0Y2hbNF0gfHwgJyc7XG5cdFx0Y29udmVyc2lvbiA9IG1hdGNoWzZdO1xuXHRcdGxlZnQgPSBmYWxzZTtcblx0XHRzaWduID0gZmFsc2U7XG5cdFx0cGFkID0gJyAnO1xuXG5cdFx0aWYgKGNvbnZlcnNpb24gPT0gJyUnKSB7XG5cdFx0XHRyZXQgKz0gJyUnO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aHJvdyAoanNFcnJvcihvZm10LCBjb252cG9zbiwgY3VyY29udixcblx0XHRcdCAgICAnaGFzIG5vIG1hdGNoaW5nIGFyZ3VtZW50ICcgK1xuXHRcdFx0ICAgICcodG9vIGZldyBhcmd1bWVudHMgcGFzc2VkKScpKTtcblx0XHR9XG5cblx0XHRhcmcgPSBhcmdzLnNoaWZ0KCk7XG5cdFx0YXJnbisrO1xuXG5cdFx0aWYgKGZsYWdzLm1hdGNoKC9bXFwnICNdLykpIHtcblx0XHRcdHRocm93IChqc0Vycm9yKG9mbXQsIGNvbnZwb3NuLCBjdXJjb252LFxuXHRcdFx0ICAgICd1c2VzIHVuc3VwcG9ydGVkIGZsYWdzJykpO1xuXHRcdH1cblxuXHRcdGlmIChwcmVjaXNpb24ubGVuZ3RoID4gMCkge1xuXHRcdFx0dGhyb3cgKGpzRXJyb3Iob2ZtdCwgY29udnBvc24sIGN1cmNvbnYsXG5cdFx0XHQgICAgJ3VzZXMgbm9uLXplcm8gcHJlY2lzaW9uIChub3Qgc3VwcG9ydGVkKScpKTtcblx0XHR9XG5cblx0XHRpZiAoZmxhZ3MubWF0Y2goLy0vKSlcblx0XHRcdGxlZnQgPSB0cnVlO1xuXG5cdFx0aWYgKGZsYWdzLm1hdGNoKC8wLykpXG5cdFx0XHRwYWQgPSAnMCc7XG5cblx0XHRpZiAoZmxhZ3MubWF0Y2goL1xcKy8pKVxuXHRcdFx0c2lnbiA9IHRydWU7XG5cblx0XHRzd2l0Y2ggKGNvbnZlcnNpb24pIHtcblx0XHRjYXNlICdzJzpcblx0XHRcdGlmIChhcmcgPT09IHVuZGVmaW5lZCB8fCBhcmcgPT09IG51bGwpIHtcblx0XHRcdFx0dGhyb3cgKGpzRXJyb3Iob2ZtdCwgY29udnBvc24sIGN1cmNvbnYsXG5cdFx0XHRcdCAgICAnYXR0ZW1wdGVkIHRvIHByaW50IHVuZGVmaW5lZCBvciBudWxsICcgK1xuXHRcdFx0XHQgICAgJ2FzIGEgc3RyaW5nIChhcmd1bWVudCAnICsgYXJnbiArICcgdG8gJyArXG5cdFx0XHRcdCAgICAnc3ByaW50ZiknKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXQgKz0gZG9QYWQocGFkLCB3aWR0aCwgbGVmdCwgYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdkJzpcblx0XHRcdGFyZyA9IE1hdGguZmxvb3IoYXJnKTtcblx0XHRcdC8qanNsOmZhbGx0aHJ1Ki9cblx0XHRjYXNlICdmJzpcblx0XHRcdHNpZ24gPSBzaWduICYmIGFyZyA+IDAgPyAnKycgOiAnJztcblx0XHRcdHJldCArPSBzaWduICsgZG9QYWQocGFkLCB3aWR0aCwgbGVmdCxcblx0XHRcdCAgICBhcmcudG9TdHJpbmcoKSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ3gnOlxuXHRcdFx0cmV0ICs9IGRvUGFkKHBhZCwgd2lkdGgsIGxlZnQsIGFyZy50b1N0cmluZygxNikpO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdqJzogLyogbm9uLXN0YW5kYXJkICovXG5cdFx0XHRpZiAod2lkdGggPT09IDApXG5cdFx0XHRcdHdpZHRoID0gMTA7XG5cdFx0XHRyZXQgKz0gbW9kX3V0aWwuaW5zcGVjdChhcmcsIGZhbHNlLCB3aWR0aCk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ3InOiAvKiBub24tc3RhbmRhcmQgKi9cblx0XHRcdHJldCArPSBkdW1wRXhjZXB0aW9uKGFyZyk7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyAoanNFcnJvcihvZm10LCBjb252cG9zbiwgY3VyY29udixcblx0XHRcdCAgICAnaXMgbm90IHN1cHBvcnRlZCcpKTtcblx0XHR9XG5cdH1cblxuXHRyZXQgKz0gZm10O1xuXHRyZXR1cm4gKHJldCk7XG59XG5cbmZ1bmN0aW9uIGpzRXJyb3IoZm10c3RyLCBjb252cG9zbiwgY3VyY29udiwgcmVhc29uKSB7XG5cdG1vZF9hc3NlcnQuZXF1YWwodHlwZW9mIChmbXRzdHIpLCAnc3RyaW5nJyk7XG5cdG1vZF9hc3NlcnQuZXF1YWwodHlwZW9mIChjdXJjb252KSwgJ3N0cmluZycpO1xuXHRtb2RfYXNzZXJ0LmVxdWFsKHR5cGVvZiAoY29udnBvc24pLCAnbnVtYmVyJyk7XG5cdG1vZF9hc3NlcnQuZXF1YWwodHlwZW9mIChyZWFzb24pLCAnc3RyaW5nJyk7XG5cdHJldHVybiAobmV3IEVycm9yKCdmb3JtYXQgc3RyaW5nIFwiJyArIGZtdHN0ciArXG5cdCAgICAnXCI6IGNvbnZlcnNpb24gc3BlY2lmaWVyIFwiJyArIGN1cmNvbnYgKyAnXCIgYXQgY2hhcmFjdGVyICcgK1xuXHQgICAgY29udnBvc24gKyAnICcgKyByZWFzb24pKTtcbn1cblxuZnVuY3Rpb24ganNQcmludGYoKSB7XG5cdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0YXJncy51bnNoaWZ0KHByb2Nlc3Muc3Rkb3V0KTtcblx0anNGcHJpbnRmLmFwcGx5KG51bGwsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBqc0ZwcmludGYoc3RyZWFtKSB7XG5cdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblx0cmV0dXJuIChzdHJlYW0ud3JpdGUoanNTcHJpbnRmLmFwcGx5KHRoaXMsIGFyZ3MpKSk7XG59XG5cbmZ1bmN0aW9uIGRvUGFkKGNociwgd2lkdGgsIGxlZnQsIHN0cilcbntcblx0dmFyIHJldCA9IHN0cjtcblxuXHR3aGlsZSAocmV0Lmxlbmd0aCA8IHdpZHRoKSB7XG5cdFx0aWYgKGxlZnQpXG5cdFx0XHRyZXQgKz0gY2hyO1xuXHRcdGVsc2Vcblx0XHRcdHJldCA9IGNociArIHJldDtcblx0fVxuXG5cdHJldHVybiAocmV0KTtcbn1cblxuLypcbiAqIFRoaXMgZnVuY3Rpb24gZHVtcHMgbG9uZyBzdGFjayB0cmFjZXMgZm9yIGV4Y2VwdGlvbnMgaGF2aW5nIGEgY2F1c2UoKSBtZXRob2QuXG4gKiBTZWUgbm9kZS12ZXJyb3IgZm9yIGFuIGV4YW1wbGUuXG4gKi9cbmZ1bmN0aW9uIGR1bXBFeGNlcHRpb24oZXgpXG57XG5cdHZhciByZXQ7XG5cblx0aWYgKCEoZXggaW5zdGFuY2VvZiBFcnJvcikpXG5cdFx0dGhyb3cgKG5ldyBFcnJvcihqc1NwcmludGYoJ2ludmFsaWQgdHlwZSBmb3IgJSVyOiAlaicsIGV4KSkpO1xuXG5cdC8qIE5vdGUgdGhhdCBWOCBwcmVwZW5kcyBcImV4LnN0YWNrXCIgd2l0aCBleC50b1N0cmluZygpLiAqL1xuXHRyZXQgPSAnRVhDRVBUSU9OOiAnICsgZXguY29uc3RydWN0b3IubmFtZSArICc6ICcgKyBleC5zdGFjaztcblxuXHRpZiAoZXguY2F1c2UgJiYgdHlwZW9mIChleC5jYXVzZSkgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgY2V4ID0gZXguY2F1c2UoKTtcblx0XHRpZiAoY2V4KSB7XG5cdFx0XHRyZXQgKz0gJ1xcbkNhdXNlZCBieTogJyArIGR1bXBFeGNlcHRpb24oY2V4KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gKHJldCk7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCIvKipcclxuICogSlNPTlNjaGVtYSBWYWxpZGF0b3IgLSBWYWxpZGF0ZXMgSmF2YVNjcmlwdCBvYmplY3RzIHVzaW5nIEpTT04gU2NoZW1hc1xyXG4gKlx0KGh0dHA6Ly93d3cuanNvbi5jb20vanNvbi1zY2hlbWEtcHJvcG9zYWwvKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMDcgS3JpcyBaeXAgU2l0ZVBlbiAod3d3LnNpdGVwZW4uY29tKVxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIChNSVQtTElDRU5TRS50eHQpIGxpY2Vuc2UuXHJcblRvIHVzZSB0aGUgdmFsaWRhdG9yIGNhbGwgdGhlIHZhbGlkYXRlIGZ1bmN0aW9uIHdpdGggYW4gaW5zdGFuY2Ugb2JqZWN0IGFuZCBhbiBvcHRpb25hbCBzY2hlbWEgb2JqZWN0LlxyXG5JZiBhIHNjaGVtYSBpcyBwcm92aWRlZCwgaXQgd2lsbCBiZSB1c2VkIHRvIHZhbGlkYXRlLiBJZiB0aGUgaW5zdGFuY2Ugb2JqZWN0IHJlZmVycyB0byBhIHNjaGVtYSAoc2VsZi12YWxpZGF0aW5nKSxcclxudGhhdCBzY2hlbWEgd2lsbCBiZSB1c2VkIHRvIHZhbGlkYXRlIGFuZCB0aGUgc2NoZW1hIHBhcmFtZXRlciBpcyBub3QgbmVjZXNzYXJ5IChpZiBib3RoIGV4aXN0LFxyXG5ib3RoIHZhbGlkYXRpb25zIHdpbGwgb2NjdXIpLlxyXG5UaGUgdmFsaWRhdGUgbWV0aG9kIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIHZhbGlkYXRpb24gZXJyb3JzLiBJZiB0aGVyZSBhcmUgbm8gZXJyb3JzLCB0aGVuIGFuXHJcbmVtcHR5IGxpc3Qgd2lsbCBiZSByZXR1cm5lZC4gQSB2YWxpZGF0aW9uIGVycm9yIHdpbGwgaGF2ZSB0d28gcHJvcGVydGllczpcclxuXCJwcm9wZXJ0eVwiIHdoaWNoIGluZGljYXRlcyB3aGljaCBwcm9wZXJ0eSBoYWQgdGhlIGVycm9yXHJcblwibWVzc2FnZVwiIHdoaWNoIGluZGljYXRlcyB3aGF0IHRoZSBlcnJvciB3YXNcclxuICovXHJcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuICAgICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhY3RvcnkoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuICAgICAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcclxuICAgICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcclxuICAgICAgICAvLyBsaWtlIE5vZGUuXHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xyXG4gICAgICAgIHJvb3QuanNvblNjaGVtYSA9IGZhY3RvcnkoKTtcclxuICAgIH1cclxufSh0aGlzLCBmdW5jdGlvbiAoKSB7Ly8gc2V0dXAgcHJpbWl0aXZlIGNsYXNzZXMgdG8gYmUgSlNPTiBTY2hlbWEgdHlwZXNcclxudmFyIGV4cG9ydHMgPSB2YWxpZGF0ZVxyXG5leHBvcnRzLkludGVnZXIgPSB7dHlwZTpcImludGVnZXJcIn07XHJcbnZhciBwcmltaXRpdmVDb25zdHJ1Y3RvcnMgPSB7XHJcblx0U3RyaW5nOiBTdHJpbmcsXHJcblx0Qm9vbGVhbjogQm9vbGVhbixcclxuXHROdW1iZXI6IE51bWJlcixcclxuXHRPYmplY3Q6IE9iamVjdCxcclxuXHRBcnJheTogQXJyYXksXHJcblx0RGF0ZTogRGF0ZVxyXG59XHJcbmV4cG9ydHMudmFsaWRhdGUgPSB2YWxpZGF0ZTtcclxuZnVuY3Rpb24gdmFsaWRhdGUoLypBbnkqL2luc3RhbmNlLC8qT2JqZWN0Ki9zY2hlbWEpIHtcclxuXHRcdC8vIFN1bW1hcnk6XHJcblx0XHQvLyAgXHRUbyB1c2UgdGhlIHZhbGlkYXRvciBjYWxsIEpTT05TY2hlbWEudmFsaWRhdGUgd2l0aCBhbiBpbnN0YW5jZSBvYmplY3QgYW5kIGFuIG9wdGlvbmFsIHNjaGVtYSBvYmplY3QuXHJcblx0XHQvLyBcdFx0SWYgYSBzY2hlbWEgaXMgcHJvdmlkZWQsIGl0IHdpbGwgYmUgdXNlZCB0byB2YWxpZGF0ZS4gSWYgdGhlIGluc3RhbmNlIG9iamVjdCByZWZlcnMgdG8gYSBzY2hlbWEgKHNlbGYtdmFsaWRhdGluZyksXHJcblx0XHQvLyBcdFx0dGhhdCBzY2hlbWEgd2lsbCBiZSB1c2VkIHRvIHZhbGlkYXRlIGFuZCB0aGUgc2NoZW1hIHBhcmFtZXRlciBpcyBub3QgbmVjZXNzYXJ5IChpZiBib3RoIGV4aXN0LFxyXG5cdFx0Ly8gXHRcdGJvdGggdmFsaWRhdGlvbnMgd2lsbCBvY2N1cikuXHJcblx0XHQvLyBcdFx0VGhlIHZhbGlkYXRlIG1ldGhvZCB3aWxsIHJldHVybiBhbiBvYmplY3Qgd2l0aCB0d28gcHJvcGVydGllczpcclxuXHRcdC8vIFx0XHRcdHZhbGlkOiBBIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgaW5zdGFuY2UgaXMgdmFsaWQgYnkgdGhlIHNjaGVtYVxyXG5cdFx0Ly8gXHRcdFx0ZXJyb3JzOiBBbiBhcnJheSBvZiB2YWxpZGF0aW9uIGVycm9ycy4gSWYgdGhlcmUgYXJlIG5vIGVycm9ycywgdGhlbiBhblxyXG5cdFx0Ly8gXHRcdFx0XHRcdGVtcHR5IGxpc3Qgd2lsbCBiZSByZXR1cm5lZC4gQSB2YWxpZGF0aW9uIGVycm9yIHdpbGwgaGF2ZSB0d28gcHJvcGVydGllczpcclxuXHRcdC8vIFx0XHRcdFx0XHRcdHByb3BlcnR5OiB3aGljaCBpbmRpY2F0ZXMgd2hpY2ggcHJvcGVydHkgaGFkIHRoZSBlcnJvclxyXG5cdFx0Ly8gXHRcdFx0XHRcdFx0bWVzc2FnZTogd2hpY2ggaW5kaWNhdGVzIHdoYXQgdGhlIGVycm9yIHdhc1xyXG5cdFx0Ly9cclxuXHRcdHJldHVybiB2YWxpZGF0ZShpbnN0YW5jZSwgc2NoZW1hLCB7Y2hhbmdpbmc6IGZhbHNlfSk7Ly8sIGNvZXJjZTogZmFsc2UsIGV4aXN0aW5nT25seTogZmFsc2V9KTtcclxuXHR9O1xyXG5leHBvcnRzLmNoZWNrUHJvcGVydHlDaGFuZ2UgPSBmdW5jdGlvbigvKkFueSovdmFsdWUsLypPYmplY3QqL3NjaGVtYSwgLypTdHJpbmcqL3Byb3BlcnR5KSB7XHJcblx0XHQvLyBTdW1tYXJ5OlxyXG5cdFx0Ly8gXHRcdFRoZSBjaGVja1Byb3BlcnR5Q2hhbmdlIG1ldGhvZCB3aWxsIGNoZWNrIHRvIHNlZSBpZiBhbiB2YWx1ZSBjYW4gbGVnYWxseSBiZSBpbiBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBzY2hlbWFcclxuXHRcdC8vIFx0XHRUaGlzIGlzIHNsaWdodGx5IGRpZmZlcmVudCB0aGFuIHRoZSB2YWxpZGF0ZSBtZXRob2QgaW4gdGhhdCBpdCB3aWxsIGZhaWwgaWYgdGhlIHNjaGVtYSBpcyByZWFkb25seSBhbmQgaXQgd2lsbFxyXG5cdFx0Ly8gXHRcdG5vdCBjaGVjayBmb3Igc2VsZi12YWxpZGF0aW9uLCBpdCBpcyBhc3N1bWVkIHRoYXQgdGhlIHBhc3NlZCBpbiB2YWx1ZSBpcyBhbHJlYWR5IGludGVybmFsbHkgdmFsaWQuXHJcblx0XHQvLyBcdFx0VGhlIGNoZWNrUHJvcGVydHlDaGFuZ2UgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCB0eXBlIGFzIHZhbGlkYXRlLCBzZWUgSlNPTlNjaGVtYS52YWxpZGF0ZSBmb3JcclxuXHRcdC8vIFx0XHRpbmZvcm1hdGlvbi5cclxuXHRcdC8vXHJcblx0XHRyZXR1cm4gdmFsaWRhdGUodmFsdWUsIHNjaGVtYSwge2NoYW5naW5nOiBwcm9wZXJ0eSB8fCBcInByb3BlcnR5XCJ9KTtcclxuXHR9O1xyXG52YXIgdmFsaWRhdGUgPSBleHBvcnRzLl92YWxpZGF0ZSA9IGZ1bmN0aW9uKC8qQW55Ki9pbnN0YW5jZSwvKk9iamVjdCovc2NoZW1hLC8qT2JqZWN0Ki9vcHRpb25zKSB7XHJcblxyXG5cdGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xyXG5cdHZhciBfY2hhbmdpbmcgPSBvcHRpb25zLmNoYW5naW5nO1xyXG5cclxuXHRmdW5jdGlvbiBnZXRUeXBlKHNjaGVtYSl7XHJcblx0XHRyZXR1cm4gc2NoZW1hLnR5cGUgfHwgKHByaW1pdGl2ZUNvbnN0cnVjdG9yc1tzY2hlbWEubmFtZV0gPT0gc2NoZW1hICYmIHNjaGVtYS5uYW1lLnRvTG93ZXJDYXNlKCkpO1xyXG5cdH1cclxuXHR2YXIgZXJyb3JzID0gW107XHJcblx0Ly8gdmFsaWRhdGUgYSB2YWx1ZSBhZ2FpbnN0IGEgcHJvcGVydHkgZGVmaW5pdGlvblxyXG5cdGZ1bmN0aW9uIGNoZWNrUHJvcCh2YWx1ZSwgc2NoZW1hLCBwYXRoLGkpe1xyXG5cclxuXHRcdHZhciBsO1xyXG5cdFx0cGF0aCArPSBwYXRoID8gdHlwZW9mIGkgPT0gJ251bWJlcicgPyAnWycgKyBpICsgJ10nIDogdHlwZW9mIGkgPT0gJ3VuZGVmaW5lZCcgPyAnJyA6ICcuJyArIGkgOiBpO1xyXG5cdFx0ZnVuY3Rpb24gYWRkRXJyb3IobWVzc2FnZSl7XHJcblx0XHRcdGVycm9ycy5wdXNoKHtwcm9wZXJ0eTpwYXRoLG1lc3NhZ2U6bWVzc2FnZX0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKCh0eXBlb2Ygc2NoZW1hICE9ICdvYmplY3QnIHx8IHNjaGVtYSBpbnN0YW5jZW9mIEFycmF5KSAmJiAocGF0aCB8fCB0eXBlb2Ygc2NoZW1hICE9ICdmdW5jdGlvbicpICYmICEoc2NoZW1hICYmIGdldFR5cGUoc2NoZW1hKSkpe1xyXG5cdFx0XHRpZih0eXBlb2Ygc2NoZW1hID09ICdmdW5jdGlvbicpe1xyXG5cdFx0XHRcdGlmKCEodmFsdWUgaW5zdGFuY2VvZiBzY2hlbWEpKXtcclxuXHRcdFx0XHRcdGFkZEVycm9yKFwiaXMgbm90IGFuIGluc3RhbmNlIG9mIHRoZSBjbGFzcy9jb25zdHJ1Y3RvciBcIiArIHNjaGVtYS5uYW1lKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1lbHNlIGlmKHNjaGVtYSl7XHJcblx0XHRcdFx0YWRkRXJyb3IoXCJJbnZhbGlkIHNjaGVtYS9wcm9wZXJ0eSBkZWZpbml0aW9uIFwiICsgc2NoZW1hKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHRcdGlmKF9jaGFuZ2luZyAmJiBzY2hlbWEucmVhZG9ubHkpe1xyXG5cdFx0XHRhZGRFcnJvcihcImlzIGEgcmVhZG9ubHkgZmllbGQsIGl0IGNhbiBub3QgYmUgY2hhbmdlZFwiKTtcclxuXHRcdH1cclxuXHRcdGlmKHNjaGVtYVsnZXh0ZW5kcyddKXsgLy8gaWYgaXQgZXh0ZW5kcyBhbm90aGVyIHNjaGVtYSwgaXQgbXVzdCBwYXNzIHRoYXQgc2NoZW1hIGFzIHdlbGxcclxuXHRcdFx0Y2hlY2tQcm9wKHZhbHVlLHNjaGVtYVsnZXh0ZW5kcyddLHBhdGgsaSk7XHJcblx0XHR9XHJcblx0XHQvLyB2YWxpZGF0ZSBhIHZhbHVlIGFnYWluc3QgYSB0eXBlIGRlZmluaXRpb25cclxuXHRcdGZ1bmN0aW9uIGNoZWNrVHlwZSh0eXBlLHZhbHVlKXtcclxuXHRcdFx0aWYodHlwZSl7XHJcblx0XHRcdFx0aWYodHlwZW9mIHR5cGUgPT0gJ3N0cmluZycgJiYgdHlwZSAhPSAnYW55JyAmJlxyXG5cdFx0XHRcdFx0XHQodHlwZSA9PSAnbnVsbCcgPyB2YWx1ZSAhPT0gbnVsbCA6IHR5cGVvZiB2YWx1ZSAhPSB0eXBlKSAmJlxyXG5cdFx0XHRcdFx0XHQhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgJiYgdHlwZSA9PSAnYXJyYXknKSAmJlxyXG5cdFx0XHRcdFx0XHQhKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiB0eXBlID09ICdkYXRlJykgJiZcclxuXHRcdFx0XHRcdFx0ISh0eXBlID09ICdpbnRlZ2VyJyAmJiB2YWx1ZSUxPT09MCkpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIFt7cHJvcGVydHk6cGF0aCxtZXNzYWdlOih0eXBlb2YgdmFsdWUpICsgXCIgdmFsdWUgZm91bmQsIGJ1dCBhIFwiICsgdHlwZSArIFwiIGlzIHJlcXVpcmVkXCJ9XTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYodHlwZSBpbnN0YW5jZW9mIEFycmF5KXtcclxuXHRcdFx0XHRcdHZhciB1bmlvbkVycm9ycz1bXTtcclxuXHRcdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCB0eXBlLmxlbmd0aDsgaisrKXsgLy8gYSB1bmlvbiB0eXBlXHJcblx0XHRcdFx0XHRcdGlmKCEodW5pb25FcnJvcnM9Y2hlY2tUeXBlKHR5cGVbal0sdmFsdWUpKS5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZih1bmlvbkVycm9ycy5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdW5pb25FcnJvcnM7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fWVsc2UgaWYodHlwZW9mIHR5cGUgPT0gJ29iamVjdCcpe1xyXG5cdFx0XHRcdFx0dmFyIHByaW9yRXJyb3JzID0gZXJyb3JzO1xyXG5cdFx0XHRcdFx0ZXJyb3JzID0gW107XHJcblx0XHRcdFx0XHRjaGVja1Byb3AodmFsdWUsdHlwZSxwYXRoKTtcclxuXHRcdFx0XHRcdHZhciB0aGVzZUVycm9ycyA9IGVycm9ycztcclxuXHRcdFx0XHRcdGVycm9ycyA9IHByaW9yRXJyb3JzO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoZXNlRXJyb3JzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gW107XHJcblx0XHR9XHJcblx0XHRpZih2YWx1ZSA9PT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0aWYoc2NoZW1hLnJlcXVpcmVkKXtcclxuXHRcdFx0XHRhZGRFcnJvcihcImlzIG1pc3NpbmcgYW5kIGl0IGlzIHJlcXVpcmVkXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0ZXJyb3JzID0gZXJyb3JzLmNvbmNhdChjaGVja1R5cGUoZ2V0VHlwZShzY2hlbWEpLHZhbHVlKSk7XHJcblx0XHRcdGlmKHNjaGVtYS5kaXNhbGxvdyAmJiAhY2hlY2tUeXBlKHNjaGVtYS5kaXNhbGxvdyx2YWx1ZSkubGVuZ3RoKXtcclxuXHRcdFx0XHRhZGRFcnJvcihcIiBkaXNhbGxvd2VkIHZhbHVlIHdhcyBtYXRjaGVkXCIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKHZhbHVlICE9PSBudWxsKXtcclxuXHRcdFx0XHRpZih2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KXtcclxuXHRcdFx0XHRcdGlmKHNjaGVtYS5pdGVtcyl7XHJcblx0XHRcdFx0XHRcdHZhciBpdGVtc0lzQXJyYXkgPSBzY2hlbWEuaXRlbXMgaW5zdGFuY2VvZiBBcnJheTtcclxuXHRcdFx0XHRcdFx0dmFyIHByb3BEZWYgPSBzY2hlbWEuaXRlbXM7XHJcblx0XHRcdFx0XHRcdGZvciAoaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpICs9IDEpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoaXRlbXNJc0FycmF5KVxyXG5cdFx0XHRcdFx0XHRcdFx0cHJvcERlZiA9IHNjaGVtYS5pdGVtc1tpXTtcclxuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5jb2VyY2UpXHJcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZVtpXSA9IG9wdGlvbnMuY29lcmNlKHZhbHVlW2ldLCBwcm9wRGVmKTtcclxuXHRcdFx0XHRcdFx0XHRlcnJvcnMuY29uY2F0KGNoZWNrUHJvcCh2YWx1ZVtpXSxwcm9wRGVmLHBhdGgsaSkpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZihzY2hlbWEubWluSXRlbXMgJiYgdmFsdWUubGVuZ3RoIDwgc2NoZW1hLm1pbkl0ZW1zKXtcclxuXHRcdFx0XHRcdFx0YWRkRXJyb3IoXCJUaGVyZSBtdXN0IGJlIGEgbWluaW11bSBvZiBcIiArIHNjaGVtYS5taW5JdGVtcyArIFwiIGluIHRoZSBhcnJheVwiKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKHNjaGVtYS5tYXhJdGVtcyAmJiB2YWx1ZS5sZW5ndGggPiBzY2hlbWEubWF4SXRlbXMpe1xyXG5cdFx0XHRcdFx0XHRhZGRFcnJvcihcIlRoZXJlIG11c3QgYmUgYSBtYXhpbXVtIG9mIFwiICsgc2NoZW1hLm1heEl0ZW1zICsgXCIgaW4gdGhlIGFycmF5XCIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1lbHNlIGlmKHNjaGVtYS5wcm9wZXJ0aWVzIHx8IHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyl7XHJcblx0XHRcdFx0XHRlcnJvcnMuY29uY2F0KGNoZWNrT2JqKHZhbHVlLCBzY2hlbWEucHJvcGVydGllcywgcGF0aCwgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKHNjaGVtYS5wYXR0ZXJuICYmIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiAhdmFsdWUubWF0Y2goc2NoZW1hLnBhdHRlcm4pKXtcclxuXHRcdFx0XHRcdGFkZEVycm9yKFwiZG9lcyBub3QgbWF0Y2ggdGhlIHJlZ2V4IHBhdHRlcm4gXCIgKyBzY2hlbWEucGF0dGVybik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKHNjaGVtYS5tYXhMZW5ndGggJiYgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCA+IHNjaGVtYS5tYXhMZW5ndGgpe1xyXG5cdFx0XHRcdFx0YWRkRXJyb3IoXCJtYXkgb25seSBiZSBcIiArIHNjaGVtYS5tYXhMZW5ndGggKyBcIiBjaGFyYWN0ZXJzIGxvbmdcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKHNjaGVtYS5taW5MZW5ndGggJiYgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCA8IHNjaGVtYS5taW5MZW5ndGgpe1xyXG5cdFx0XHRcdFx0YWRkRXJyb3IoXCJtdXN0IGJlIGF0IGxlYXN0IFwiICsgc2NoZW1hLm1pbkxlbmd0aCArIFwiIGNoYXJhY3RlcnMgbG9uZ1wiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYodHlwZW9mIHNjaGVtYS5taW5pbXVtICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlID09IHR5cGVvZiBzY2hlbWEubWluaW11bSAmJlxyXG5cdFx0XHRcdFx0XHRzY2hlbWEubWluaW11bSA+IHZhbHVlKXtcclxuXHRcdFx0XHRcdGFkZEVycm9yKFwibXVzdCBoYXZlIGEgbWluaW11bSB2YWx1ZSBvZiBcIiArIHNjaGVtYS5taW5pbXVtKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYodHlwZW9mIHNjaGVtYS5tYXhpbXVtICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlID09IHR5cGVvZiBzY2hlbWEubWF4aW11bSAmJlxyXG5cdFx0XHRcdFx0XHRzY2hlbWEubWF4aW11bSA8IHZhbHVlKXtcclxuXHRcdFx0XHRcdGFkZEVycm9yKFwibXVzdCBoYXZlIGEgbWF4aW11bSB2YWx1ZSBvZiBcIiArIHNjaGVtYS5tYXhpbXVtKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYoc2NoZW1hWydlbnVtJ10pe1xyXG5cdFx0XHRcdFx0dmFyIGVudW1lciA9IHNjaGVtYVsnZW51bSddO1xyXG5cdFx0XHRcdFx0bCA9IGVudW1lci5sZW5ndGg7XHJcblx0XHRcdFx0XHR2YXIgZm91bmQ7XHJcblx0XHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgbDsgaisrKXtcclxuXHRcdFx0XHRcdFx0aWYoZW51bWVyW2pdPT09dmFsdWUpe1xyXG5cdFx0XHRcdFx0XHRcdGZvdW5kPTE7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKCFmb3VuZCl7XHJcblx0XHRcdFx0XHRcdGFkZEVycm9yKFwiZG9lcyBub3QgaGF2ZSBhIHZhbHVlIGluIHRoZSBlbnVtZXJhdGlvbiBcIiArIGVudW1lci5qb2luKFwiLCBcIikpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZih0eXBlb2Ygc2NoZW1hLm1heERlY2ltYWwgPT0gJ251bWJlcicgJiZcclxuXHRcdFx0XHRcdCh2YWx1ZS50b1N0cmluZygpLm1hdGNoKG5ldyBSZWdFeHAoXCJcXFxcLlswLTlde1wiICsgKHNjaGVtYS5tYXhEZWNpbWFsICsgMSkgKyBcIix9XCIpKSkpe1xyXG5cdFx0XHRcdFx0YWRkRXJyb3IoXCJtYXkgb25seSBoYXZlIFwiICsgc2NoZW1hLm1heERlY2ltYWwgKyBcIiBkaWdpdHMgb2YgZGVjaW1hbCBwbGFjZXNcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblx0Ly8gdmFsaWRhdGUgYW4gb2JqZWN0IGFnYWluc3QgYSBzY2hlbWFcclxuXHRmdW5jdGlvbiBjaGVja09iaihpbnN0YW5jZSxvYmpUeXBlRGVmLHBhdGgsYWRkaXRpb25hbFByb3Ape1xyXG5cclxuXHRcdGlmKHR5cGVvZiBvYmpUeXBlRGVmID09J29iamVjdCcpe1xyXG5cdFx0XHRpZih0eXBlb2YgaW5zdGFuY2UgIT0gJ29iamVjdCcgfHwgaW5zdGFuY2UgaW5zdGFuY2VvZiBBcnJheSl7XHJcblx0XHRcdFx0ZXJyb3JzLnB1c2goe3Byb3BlcnR5OnBhdGgsbWVzc2FnZTpcImFuIG9iamVjdCBpcyByZXF1aXJlZFwifSk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGZvcih2YXIgaSBpbiBvYmpUeXBlRGVmKXsgXHJcblx0XHRcdFx0aWYob2JqVHlwZURlZi5oYXNPd25Qcm9wZXJ0eShpKSl7XHJcblx0XHRcdFx0XHR2YXIgdmFsdWUgPSBpbnN0YW5jZVtpXTtcclxuXHRcdFx0XHRcdC8vIHNraXAgX25vdF8gc3BlY2lmaWVkIHByb3BlcnRpZXNcclxuXHRcdFx0XHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuZXhpc3RpbmdPbmx5KSBjb250aW51ZTtcclxuXHRcdFx0XHRcdHZhciBwcm9wRGVmID0gb2JqVHlwZURlZltpXTtcclxuXHRcdFx0XHRcdC8vIHNldCBkZWZhdWx0XHJcblx0XHRcdFx0XHRpZih2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIHByb3BEZWZbXCJkZWZhdWx0XCJdKXtcclxuXHRcdFx0XHRcdFx0dmFsdWUgPSBpbnN0YW5jZVtpXSA9IHByb3BEZWZbXCJkZWZhdWx0XCJdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYob3B0aW9ucy5jb2VyY2UgJiYgaSBpbiBpbnN0YW5jZSl7XHJcblx0XHRcdFx0XHRcdHZhbHVlID0gaW5zdGFuY2VbaV0gPSBvcHRpb25zLmNvZXJjZSh2YWx1ZSwgcHJvcERlZik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRjaGVja1Byb3AodmFsdWUscHJvcERlZixwYXRoLGkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Zm9yKGkgaW4gaW5zdGFuY2Upe1xyXG5cdFx0XHRpZihpbnN0YW5jZS5oYXNPd25Qcm9wZXJ0eShpKSAmJiAhKGkuY2hhckF0KDApID09ICdfJyAmJiBpLmNoYXJBdCgxKSA9PSAnXycpICYmIG9ialR5cGVEZWYgJiYgIW9ialR5cGVEZWZbaV0gJiYgYWRkaXRpb25hbFByb3A9PT1mYWxzZSl7XHJcblx0XHRcdFx0aWYgKG9wdGlvbnMuZmlsdGVyKSB7XHJcblx0XHRcdFx0XHRkZWxldGUgaW5zdGFuY2VbaV07XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZXJyb3JzLnB1c2goe3Byb3BlcnR5OnBhdGgsbWVzc2FnZToodHlwZW9mIHZhbHVlKSArIFwiVGhlIHByb3BlcnR5IFwiICsgaSArXHJcblx0XHRcdFx0XHRcdFwiIGlzIG5vdCBkZWZpbmVkIGluIHRoZSBzY2hlbWEgYW5kIHRoZSBzY2hlbWEgZG9lcyBub3QgYWxsb3cgYWRkaXRpb25hbCBwcm9wZXJ0aWVzXCJ9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHJlcXVpcmVzID0gb2JqVHlwZURlZiAmJiBvYmpUeXBlRGVmW2ldICYmIG9ialR5cGVEZWZbaV0ucmVxdWlyZXM7XHJcblx0XHRcdGlmKHJlcXVpcmVzICYmICEocmVxdWlyZXMgaW4gaW5zdGFuY2UpKXtcclxuXHRcdFx0XHRlcnJvcnMucHVzaCh7cHJvcGVydHk6cGF0aCxtZXNzYWdlOlwidGhlIHByZXNlbmNlIG9mIHRoZSBwcm9wZXJ0eSBcIiArIGkgKyBcIiByZXF1aXJlcyB0aGF0IFwiICsgcmVxdWlyZXMgKyBcIiBhbHNvIGJlIHByZXNlbnRcIn0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhbHVlID0gaW5zdGFuY2VbaV07XHJcblx0XHRcdGlmKGFkZGl0aW9uYWxQcm9wICYmICghKG9ialR5cGVEZWYgJiYgdHlwZW9mIG9ialR5cGVEZWYgPT0gJ29iamVjdCcpIHx8ICEoaSBpbiBvYmpUeXBlRGVmKSkpe1xyXG5cdFx0XHRcdGlmKG9wdGlvbnMuY29lcmNlKXtcclxuXHRcdFx0XHRcdHZhbHVlID0gaW5zdGFuY2VbaV0gPSBvcHRpb25zLmNvZXJjZSh2YWx1ZSwgYWRkaXRpb25hbFByb3ApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjaGVja1Byb3AodmFsdWUsYWRkaXRpb25hbFByb3AscGF0aCxpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZighX2NoYW5naW5nICYmIHZhbHVlICYmIHZhbHVlLiRzY2hlbWEpe1xyXG5cdFx0XHRcdGVycm9ycyA9IGVycm9ycy5jb25jYXQoY2hlY2tQcm9wKHZhbHVlLHZhbHVlLiRzY2hlbWEscGF0aCxpKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBlcnJvcnM7XHJcblx0fVxyXG5cdGlmKHNjaGVtYSl7XHJcblx0XHRjaGVja1Byb3AoaW5zdGFuY2Usc2NoZW1hLCcnLF9jaGFuZ2luZyB8fCAnJyk7XHJcblx0fVxyXG5cdGlmKCFfY2hhbmdpbmcgJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UuJHNjaGVtYSl7XHJcblx0XHRjaGVja1Byb3AoaW5zdGFuY2UsaW5zdGFuY2UuJHNjaGVtYSwnJywnJyk7XHJcblx0fVxyXG5cdHJldHVybiB7dmFsaWQ6IWVycm9ycy5sZW5ndGgsZXJyb3JzOmVycm9yc307XHJcbn07XHJcbmV4cG9ydHMubXVzdEJlVmFsaWQgPSBmdW5jdGlvbihyZXN1bHQpe1xyXG5cdC8vXHRzdW1tYXJ5OlxyXG5cdC8vXHRcdFRoaXMgY2hlY2tzIHRvIGVuc3VyZSB0aGF0IHRoZSByZXN1bHQgaXMgdmFsaWQgYW5kIHdpbGwgdGhyb3cgYW4gYXBwcm9wcmlhdGUgZXJyb3IgbWVzc2FnZSBpZiBpdCBpcyBub3RcclxuXHQvLyByZXN1bHQ6IHRoZSByZXN1bHQgcmV0dXJuZWQgZnJvbSBjaGVja1Byb3BlcnR5Q2hhbmdlIG9yIHZhbGlkYXRlXHJcblx0aWYoIXJlc3VsdC52YWxpZCl7XHJcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKHJlc3VsdC5lcnJvcnMubWFwKGZ1bmN0aW9uKGVycm9yKXtyZXR1cm4gXCJmb3IgcHJvcGVydHkgXCIgKyBlcnJvci5wcm9wZXJ0eSArICc6ICcgKyBlcnJvci5tZXNzYWdlO30pLmpvaW4oXCIsIFxcblwiKSk7XHJcblx0fVxyXG59XHJcblxyXG5yZXR1cm4gZXhwb3J0cztcclxufSkpO1xyXG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgc3NocGsgPSByZXF1aXJlKCdzc2hwaycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgSEFTSF9BTEdPUyA9IHV0aWxzLkhBU0hfQUxHT1M7XG52YXIgUEtfQUxHT1MgPSB1dGlscy5QS19BTEdPUztcbnZhciBJbnZhbGlkQWxnb3JpdGhtRXJyb3IgPSB1dGlscy5JbnZhbGlkQWxnb3JpdGhtRXJyb3I7XG52YXIgSHR0cFNpZ25hdHVyZUVycm9yID0gdXRpbHMuSHR0cFNpZ25hdHVyZUVycm9yO1xudmFyIHZhbGlkYXRlQWxnb3JpdGhtID0gdXRpbHMudmFsaWRhdGVBbGdvcml0aG07XG5cbi8vLy0tLSBFeHBvcnRlZCBBUElcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBWZXJpZnkgUlNBL0RTQSBzaWduYXR1cmUgYWdhaW5zdCBwdWJsaWMga2V5LiAgWW91IGFyZSBleHBlY3RlZCB0byBwYXNzIGluXG4gICAqIGFuIG9iamVjdCB0aGF0IHdhcyByZXR1cm5lZCBmcm9tIGBwYXJzZSgpYC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcnNlZFNpZ25hdHVyZSB0aGUgb2JqZWN0IHlvdSBnb3QgZnJvbSBgcGFyc2VgLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHVia2V5IFJTQS9EU0EgcHJpdmF0ZSBrZXkgUEVNLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHZhbGlkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgeW91IHBhc3MgaW4gYmFkIGFyZ3VtZW50cy5cbiAgICogQHRocm93cyB7SW52YWxpZEFsZ29yaXRobUVycm9yfVxuICAgKi9cbiAgdmVyaWZ5U2lnbmF0dXJlOiBmdW5jdGlvbiB2ZXJpZnlTaWduYXR1cmUocGFyc2VkU2lnbmF0dXJlLCBwdWJrZXkpIHtcbiAgICBhc3NlcnQub2JqZWN0KHBhcnNlZFNpZ25hdHVyZSwgJ3BhcnNlZFNpZ25hdHVyZScpO1xuICAgIGlmICh0eXBlb2YgKHB1YmtleSkgPT09ICdzdHJpbmcnIHx8IEJ1ZmZlci5pc0J1ZmZlcihwdWJrZXkpKVxuICAgICAgcHVia2V5ID0gc3NocGsucGFyc2VLZXkocHVia2V5KTtcbiAgICBhc3NlcnQub2soc3NocGsuS2V5LmlzS2V5KHB1YmtleSwgWzEsIDFdKSwgJ3B1YmtleSBtdXN0IGJlIGEgc3NocGsuS2V5Jyk7XG5cbiAgICB2YXIgYWxnID0gdmFsaWRhdGVBbGdvcml0aG0ocGFyc2VkU2lnbmF0dXJlLmFsZ29yaXRobSk7XG4gICAgaWYgKGFsZ1swXSA9PT0gJ2htYWMnIHx8IGFsZ1swXSAhPT0gcHVia2V5LnR5cGUpXG4gICAgICByZXR1cm4gKGZhbHNlKTtcblxuICAgIHZhciB2ID0gcHVia2V5LmNyZWF0ZVZlcmlmeShhbGdbMV0pO1xuICAgIHYudXBkYXRlKHBhcnNlZFNpZ25hdHVyZS5zaWduaW5nU3RyaW5nKTtcbiAgICByZXR1cm4gKHYudmVyaWZ5KHBhcnNlZFNpZ25hdHVyZS5wYXJhbXMuc2lnbmF0dXJlLCAnYmFzZTY0JykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBWZXJpZnkgSE1BQyBhZ2FpbnN0IHNoYXJlZCBzZWNyZXQuICBZb3UgYXJlIGV4cGVjdGVkIHRvIHBhc3MgaW4gYW4gb2JqZWN0XG4gICAqIHRoYXQgd2FzIHJldHVybmVkIGZyb20gYHBhcnNlKClgLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyc2VkU2lnbmF0dXJlIHRoZSBvYmplY3QgeW91IGdvdCBmcm9tIGBwYXJzZWAuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzZWNyZXQgSE1BQyBzaGFyZWQgc2VjcmV0LlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHZhbGlkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgeW91IHBhc3MgaW4gYmFkIGFyZ3VtZW50cy5cbiAgICogQHRocm93cyB7SW52YWxpZEFsZ29yaXRobUVycm9yfVxuICAgKi9cbiAgdmVyaWZ5SE1BQzogZnVuY3Rpb24gdmVyaWZ5SE1BQyhwYXJzZWRTaWduYXR1cmUsIHNlY3JldCkge1xuICAgIGFzc2VydC5vYmplY3QocGFyc2VkU2lnbmF0dXJlLCAncGFyc2VkSE1BQycpO1xuICAgIGFzc2VydC5zdHJpbmcoc2VjcmV0LCAnc2VjcmV0Jyk7XG5cbiAgICB2YXIgYWxnID0gdmFsaWRhdGVBbGdvcml0aG0ocGFyc2VkU2lnbmF0dXJlLmFsZ29yaXRobSk7XG4gICAgaWYgKGFsZ1swXSAhPT0gJ2htYWMnKVxuICAgICAgcmV0dXJuIChmYWxzZSk7XG5cbiAgICB2YXIgaGFzaEFsZyA9IGFsZ1sxXS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgdmFyIGhtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYyhoYXNoQWxnLCBzZWNyZXQpO1xuICAgIGhtYWMudXBkYXRlKHBhcnNlZFNpZ25hdHVyZS5zaWduaW5nU3RyaW5nKTtcblxuICAgIC8qXG4gICAgICogTm93IGRvdWJsZS1oYXNoIHRvIGF2b2lkIGxlYWtpbmcgdGltaW5nIGluZm9ybWF0aW9uIC0gdGhlcmUnc1xuICAgICAqIG5vIGVhc3kgY29uc3RhbnQtdGltZSBjb21wYXJlIGluIEpTLCBzbyB3ZSB1c2UgdGhpcyBhcHByb2FjaFxuICAgICAqIGluc3RlYWQuIFNlZSBmb3IgbW9yZSBpbmZvOlxuICAgICAqIGh0dHBzOi8vd3d3LmlzZWNwYXJ0bmVycy5jb20vYmxvZy8yMDExL2ZlYnJ1YXJ5L2RvdWJsZS1obWFjLVxuICAgICAqIHZlcmlmaWNhdGlvbi5hc3B4XG4gICAgICovXG4gICAgdmFyIGgxID0gY3J5cHRvLmNyZWF0ZUhtYWMoaGFzaEFsZywgc2VjcmV0KTtcbiAgICBoMS51cGRhdGUoaG1hYy5kaWdlc3QoKSk7XG4gICAgaDEgPSBoMS5kaWdlc3QoKTtcbiAgICB2YXIgaDIgPSBjcnlwdG8uY3JlYXRlSG1hYyhoYXNoQWxnLCBzZWNyZXQpO1xuICAgIGgyLnVwZGF0ZShuZXcgQnVmZmVyKHBhcnNlZFNpZ25hdHVyZS5wYXJhbXMuc2lnbmF0dXJlLCAnYmFzZTY0JykpO1xuICAgIGgyID0gaDIuZGlnZXN0KCk7XG5cbiAgICAvKiBOb2RlIDAuOCByZXR1cm5zIHN0cmluZ3MgZnJvbSAuZGlnZXN0KCkuICovXG4gICAgaWYgKHR5cGVvZiAoaDEpID09PSAnc3RyaW5nJylcbiAgICAgIHJldHVybiAoaDEgPT09IGgyKTtcbiAgICAvKiBBbmQgbm9kZSAwLjEwIGxhY2tzIHRoZSAuZXF1YWxzKCkgbWV0aG9kIG9uIEJ1ZmZlcnMuICovXG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihoMSkgJiYgIWgxLmVxdWFscylcbiAgICAgIHJldHVybiAoaDEudG9TdHJpbmcoJ2JpbmFyeScpID09PSBoMi50b1N0cmluZygnYmluYXJ5JykpO1xuXG4gICAgcmV0dXJuIChoMS5lcXVhbHMoaDIpKTtcbiAgfVxufTtcbiIsIi8qIVxuICogbWltZS1kYlxuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kYi5qc29uJylcbiIsIm1vZHVsZS5leHBvcnRzID0gRm9yZXZlckFnZW50XG5Gb3JldmVyQWdlbnQuU1NMID0gRm9yZXZlckFnZW50U1NMXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpXG4gICwgQWdlbnQgPSByZXF1aXJlKCdodHRwJykuQWdlbnRcbiAgLCBuZXQgPSByZXF1aXJlKCduZXQnKVxuICAsIHRscyA9IHJlcXVpcmUoJ3RscycpXG4gICwgQWdlbnRTU0wgPSByZXF1aXJlKCdodHRwcycpLkFnZW50XG4gIFxuZnVuY3Rpb24gZ2V0Q29ubmVjdGlvbk5hbWUoaG9zdCwgcG9ydCkgeyAgXG4gIHZhciBuYW1lID0gJydcbiAgaWYgKHR5cGVvZiBob3N0ID09PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBob3N0ICsgJzonICsgcG9ydFxuICB9IGVsc2Uge1xuICAgIC8vIEZvciBub2RlLmpzIHYwMTIuMCBhbmQgaW9qcy12MS41LjEsIGhvc3QgaXMgYW4gb2JqZWN0LiBBbmQgYW55IGV4aXN0aW5nIGxvY2FsQWRkcmVzcyBpcyBwYXJ0IG9mIHRoZSBjb25uZWN0aW9uIG5hbWUuXG4gICAgbmFtZSA9IGhvc3QuaG9zdCArICc6JyArIGhvc3QucG9ydCArICc6JyArIChob3N0LmxvY2FsQWRkcmVzcyA/IChob3N0LmxvY2FsQWRkcmVzcyArICc6JykgOiAnOicpXG4gIH1cbiAgcmV0dXJuIG5hbWVcbn0gICAgXG5cbmZ1bmN0aW9uIEZvcmV2ZXJBZ2VudChvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBzZWxmLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHNlbGYucmVxdWVzdHMgPSB7fVxuICBzZWxmLnNvY2tldHMgPSB7fVxuICBzZWxmLmZyZWVTb2NrZXRzID0ge31cbiAgc2VsZi5tYXhTb2NrZXRzID0gc2VsZi5vcHRpb25zLm1heFNvY2tldHMgfHwgQWdlbnQuZGVmYXVsdE1heFNvY2tldHNcbiAgc2VsZi5taW5Tb2NrZXRzID0gc2VsZi5vcHRpb25zLm1pblNvY2tldHMgfHwgRm9yZXZlckFnZW50LmRlZmF1bHRNaW5Tb2NrZXRzXG4gIHNlbGYub24oJ2ZyZWUnLCBmdW5jdGlvbihzb2NrZXQsIGhvc3QsIHBvcnQpIHtcbiAgICB2YXIgbmFtZSA9IGdldENvbm5lY3Rpb25OYW1lKGhvc3QsIHBvcnQpXG5cbiAgICBpZiAoc2VsZi5yZXF1ZXN0c1tuYW1lXSAmJiBzZWxmLnJlcXVlc3RzW25hbWVdLmxlbmd0aCkge1xuICAgICAgc2VsZi5yZXF1ZXN0c1tuYW1lXS5zaGlmdCgpLm9uU29ja2V0KHNvY2tldClcbiAgICB9IGVsc2UgaWYgKHNlbGYuc29ja2V0c1tuYW1lXS5sZW5ndGggPCBzZWxmLm1pblNvY2tldHMpIHtcbiAgICAgIGlmICghc2VsZi5mcmVlU29ja2V0c1tuYW1lXSkgc2VsZi5mcmVlU29ja2V0c1tuYW1lXSA9IFtdXG4gICAgICBzZWxmLmZyZWVTb2NrZXRzW25hbWVdLnB1c2goc29ja2V0KVxuICAgICAgXG4gICAgICAvLyBpZiBhbiBlcnJvciBoYXBwZW5zIHdoaWxlIHdlIGRvbid0IHVzZSB0aGUgc29ja2V0IGFueXdheSwgbWVoLCB0aHJvdyB0aGUgc29ja2V0IGF3YXlcbiAgICAgIHZhciBvbklkbGVFcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzb2NrZXQuZGVzdHJveSgpXG4gICAgICB9XG4gICAgICBzb2NrZXQuX29uSWRsZUVycm9yID0gb25JZGxlRXJyb3JcbiAgICAgIHNvY2tldC5vbignZXJyb3InLCBvbklkbGVFcnJvcilcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHBlbmRpbmcgcmVxdWVzdHMganVzdCBkZXN0cm95IHRoZVxuICAgICAgLy8gc29ja2V0IGFuZCBpdCB3aWxsIGdldCByZW1vdmVkIGZyb20gdGhlIHBvb2wuIFRoaXNcbiAgICAgIC8vIGdldHMgdXMgb3V0IG9mIHRpbWVvdXQgaXNzdWVzIGFuZCBhbGxvd3MgdXMgdG9cbiAgICAgIC8vIGRlZmF1bHQgdG8gQ29ubmVjdGlvbjprZWVwLWFsaXZlLlxuICAgICAgc29ja2V0LmRlc3Ryb3koKVxuICAgIH1cbiAgfSlcblxufVxudXRpbC5pbmhlcml0cyhGb3JldmVyQWdlbnQsIEFnZW50KVxuXG5Gb3JldmVyQWdlbnQuZGVmYXVsdE1pblNvY2tldHMgPSA1XG5cblxuRm9yZXZlckFnZW50LnByb3RvdHlwZS5jcmVhdGVDb25uZWN0aW9uID0gbmV0LmNyZWF0ZUNvbm5lY3Rpb25cbkZvcmV2ZXJBZ2VudC5wcm90b3R5cGUuYWRkUmVxdWVzdE5vcmV1c2UgPSBBZ2VudC5wcm90b3R5cGUuYWRkUmVxdWVzdFxuRm9yZXZlckFnZW50LnByb3RvdHlwZS5hZGRSZXF1ZXN0ID0gZnVuY3Rpb24ocmVxLCBob3N0LCBwb3J0KSB7XG4gIHZhciBuYW1lID0gZ2V0Q29ubmVjdGlvbk5hbWUoaG9zdCwgcG9ydClcbiAgXG4gIGlmICh0eXBlb2YgaG9zdCAhPT0gJ3N0cmluZycpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGhvc3RcbiAgICBwb3J0ID0gb3B0aW9ucy5wb3J0XG4gICAgaG9zdCA9IG9wdGlvbnMuaG9zdFxuICB9XG5cbiAgaWYgKHRoaXMuZnJlZVNvY2tldHNbbmFtZV0gJiYgdGhpcy5mcmVlU29ja2V0c1tuYW1lXS5sZW5ndGggPiAwICYmICFyZXEudXNlQ2h1bmtlZEVuY29kaW5nQnlEZWZhdWx0KSB7XG4gICAgdmFyIGlkbGVTb2NrZXQgPSB0aGlzLmZyZWVTb2NrZXRzW25hbWVdLnBvcCgpXG4gICAgaWRsZVNvY2tldC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBpZGxlU29ja2V0Ll9vbklkbGVFcnJvcilcbiAgICBkZWxldGUgaWRsZVNvY2tldC5fb25JZGxlRXJyb3JcbiAgICByZXEuX3JldXNlZFNvY2tldCA9IHRydWVcbiAgICByZXEub25Tb2NrZXQoaWRsZVNvY2tldClcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFkZFJlcXVlc3ROb3JldXNlKHJlcSwgaG9zdCwgcG9ydClcbiAgfVxufVxuXG5Gb3JldmVyQWdlbnQucHJvdG90eXBlLnJlbW92ZVNvY2tldCA9IGZ1bmN0aW9uKHMsIG5hbWUsIGhvc3QsIHBvcnQpIHtcbiAgaWYgKHRoaXMuc29ja2V0c1tuYW1lXSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuc29ja2V0c1tuYW1lXS5pbmRleE9mKHMpXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5zb2NrZXRzW25hbWVdLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH0gZWxzZSBpZiAodGhpcy5zb2NrZXRzW25hbWVdICYmIHRoaXMuc29ja2V0c1tuYW1lXS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBkb24ndCBsZWFrXG4gICAgZGVsZXRlIHRoaXMuc29ja2V0c1tuYW1lXVxuICAgIGRlbGV0ZSB0aGlzLnJlcXVlc3RzW25hbWVdXG4gIH1cbiAgXG4gIGlmICh0aGlzLmZyZWVTb2NrZXRzW25hbWVdKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5mcmVlU29ja2V0c1tuYW1lXS5pbmRleE9mKHMpXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5mcmVlU29ja2V0c1tuYW1lXS5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICBpZiAodGhpcy5mcmVlU29ja2V0c1tuYW1lXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuZnJlZVNvY2tldHNbbmFtZV1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5yZXF1ZXN0c1tuYW1lXSAmJiB0aGlzLnJlcXVlc3RzW25hbWVdLmxlbmd0aCkge1xuICAgIC8vIElmIHdlIGhhdmUgcGVuZGluZyByZXF1ZXN0cyBhbmQgYSBzb2NrZXQgZ2V0cyBjbG9zZWQgYSBuZXcgb25lXG4gICAgLy8gbmVlZHMgdG8gYmUgY3JlYXRlZCB0byB0YWtlIG92ZXIgaW4gdGhlIHBvb2wgZm9yIHRoZSBvbmUgdGhhdCBjbG9zZWQuXG4gICAgdGhpcy5jcmVhdGVTb2NrZXQobmFtZSwgaG9zdCwgcG9ydCkuZW1pdCgnZnJlZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gRm9yZXZlckFnZW50U1NMIChvcHRpb25zKSB7XG4gIEZvcmV2ZXJBZ2VudC5jYWxsKHRoaXMsIG9wdGlvbnMpXG59XG51dGlsLmluaGVyaXRzKEZvcmV2ZXJBZ2VudFNTTCwgRm9yZXZlckFnZW50KVxuXG5Gb3JldmVyQWdlbnRTU0wucHJvdG90eXBlLmNyZWF0ZUNvbm5lY3Rpb24gPSBjcmVhdGVDb25uZWN0aW9uU1NMXG5Gb3JldmVyQWdlbnRTU0wucHJvdG90eXBlLmFkZFJlcXVlc3ROb3JldXNlID0gQWdlbnRTU0wucHJvdG90eXBlLmFkZFJlcXVlc3RcblxuZnVuY3Rpb24gY3JlYXRlQ29ubmVjdGlvblNTTCAocG9ydCwgaG9zdCwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHBvcnQgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IHBvcnQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGhvc3QgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IGhvc3Q7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnM7XG4gIH0gZWxzZSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwb3J0ID09PSAnbnVtYmVyJykge1xuICAgIG9wdGlvbnMucG9ydCA9IHBvcnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGhvc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgb3B0aW9ucy5ob3N0ID0gaG9zdDtcbiAgfVxuXG4gIHJldHVybiB0bHMuY29ubmVjdChvcHRpb25zKTtcbn1cbiIsInZhciBDb21iaW5lZFN0cmVhbSA9IHJlcXVpcmUoJ2NvbWJpbmVkLXN0cmVhbScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xudmFyIGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbnZhciBwYXJzZVVybCA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBtaW1lID0gcmVxdWlyZSgnbWltZS10eXBlcycpO1xudmFyIGFzeW5ja2l0ID0gcmVxdWlyZSgnYXN5bmNraXQnKTtcbnZhciBwb3B1bGF0ZSA9IHJlcXVpcmUoJy4vcG9wdWxhdGUuanMnKTtcblxuLy8gUHVibGljIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBGb3JtRGF0YTtcblxuLy8gbWFrZSBpdCBhIFN0cmVhbVxudXRpbC5pbmhlcml0cyhGb3JtRGF0YSwgQ29tYmluZWRTdHJlYW0pO1xuXG4vKipcbiAqIENyZWF0ZSByZWFkYWJsZSBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiBzdHJlYW1zLlxuICogQ2FuIGJlIHVzZWQgdG8gc3VibWl0IGZvcm1zXG4gKiBhbmQgZmlsZSB1cGxvYWRzIHRvIG90aGVyIHdlYiBhcHBsaWNhdGlvbnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFByb3BlcnRpZXMgdG8gYmUgYWRkZWQvb3ZlcnJpZGVuIGZvciBGb3JtRGF0YSBhbmQgQ29tYmluZWRTdHJlYW1cbiAqL1xuZnVuY3Rpb24gRm9ybURhdGEob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRm9ybURhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBGb3JtRGF0YSgpO1xuICB9XG5cbiAgdGhpcy5fb3ZlcmhlYWRMZW5ndGggPSAwO1xuICB0aGlzLl92YWx1ZUxlbmd0aCA9IDA7XG4gIHRoaXMuX3ZhbHVlc1RvTWVhc3VyZSA9IFtdO1xuXG4gIENvbWJpbmVkU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgdGhpc1tvcHRpb25dID0gb3B0aW9uc1tvcHRpb25dO1xuICB9XG59XG5cbkZvcm1EYXRhLkxJTkVfQlJFQUsgPSAnXFxyXFxuJztcbkZvcm1EYXRhLkRFRkFVTFRfQ09OVEVOVF9UWVBFID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihmaWVsZCwgdmFsdWUsIG9wdGlvbnMpIHtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBhbGxvdyBmaWxlbmFtZSBhcyBzaW5nbGUgb3B0aW9uXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PSAnc3RyaW5nJykge1xuICAgIG9wdGlvbnMgPSB7ZmlsZW5hbWU6IG9wdGlvbnN9O1xuICB9XG5cbiAgdmFyIGFwcGVuZCA9IENvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5hcHBlbmQuYmluZCh0aGlzKTtcblxuICAvLyBhbGwgdGhhdCBzdHJlYW15IGJ1c2luZXNzIGNhbid0IGhhbmRsZSBudW1iZXJzXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmVsaXhnZS9ub2RlLWZvcm0tZGF0YS9pc3N1ZXMvMzhcbiAgaWYgKHV0aWwuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBQbGVhc2UgY29udmVydCB5b3VyIGFycmF5IGludG8gc3RyaW5nXG4gICAgLy8gdGhlIHdheSB3ZWIgc2VydmVyIGV4cGVjdHMgaXRcbiAgICB0aGlzLl9lcnJvcihuZXcgRXJyb3IoJ0FycmF5cyBhcmUgbm90IHN1cHBvcnRlZC4nKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGhlYWRlciA9IHRoaXMuX211bHRpUGFydEhlYWRlcihmaWVsZCwgdmFsdWUsIG9wdGlvbnMpO1xuICB2YXIgZm9vdGVyID0gdGhpcy5fbXVsdGlQYXJ0Rm9vdGVyKCk7XG5cbiAgYXBwZW5kKGhlYWRlcik7XG4gIGFwcGVuZCh2YWx1ZSk7XG4gIGFwcGVuZChmb290ZXIpO1xuXG4gIC8vIHBhc3MgYWxvbmcgb3B0aW9ucy5rbm93bkxlbmd0aFxuICB0aGlzLl90cmFja0xlbmd0aChoZWFkZXIsIHZhbHVlLCBvcHRpb25zKTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fdHJhY2tMZW5ndGggPSBmdW5jdGlvbihoZWFkZXIsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB2YWx1ZUxlbmd0aCA9IDA7XG5cbiAgLy8gdXNlZCB3LyBnZXRMZW5ndGhTeW5jKCksIHdoZW4gbGVuZ3RoIGlzIGtub3duLlxuICAvLyBlLmcuIGZvciBzdHJlYW1pbmcgZGlyZWN0bHkgZnJvbSBhIHJlbW90ZSBzZXJ2ZXIsXG4gIC8vIHcvIGEga25vd24gZmlsZSBhIHNpemUsIGFuZCBub3Qgd2FudGluZyB0byB3YWl0IGZvclxuICAvLyBpbmNvbWluZyBmaWxlIHRvIGZpbmlzaCB0byBnZXQgaXRzIHNpemUuXG4gIGlmIChvcHRpb25zLmtub3duTGVuZ3RoICE9IG51bGwpIHtcbiAgICB2YWx1ZUxlbmd0aCArPSArb3B0aW9ucy5rbm93bkxlbmd0aDtcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlTGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICB9XG5cbiAgdGhpcy5fdmFsdWVMZW5ndGggKz0gdmFsdWVMZW5ndGg7XG5cbiAgLy8gQGNoZWNrIHdoeSBhZGQgQ1JMRj8gZG9lcyB0aGlzIGFjY291bnQgZm9yIGN1c3RvbS9tdWx0aXBsZSBDUkxGcz9cbiAgdGhpcy5fb3ZlcmhlYWRMZW5ndGggKz1cbiAgICBCdWZmZXIuYnl0ZUxlbmd0aChoZWFkZXIpICtcbiAgICBGb3JtRGF0YS5MSU5FX0JSRUFLLmxlbmd0aDtcblxuICAvLyBlbXB0eSBvciBlaXRoZXIgZG9lc24ndCBoYXZlIHBhdGggb3Igbm90IGFuIGh0dHAgcmVzcG9uc2VcbiAgaWYgKCF2YWx1ZSB8fCAoICF2YWx1ZS5wYXRoICYmICEodmFsdWUucmVhZGFibGUgJiYgdmFsdWUuaGFzT3duUHJvcGVydHkoJ2h0dHBWZXJzaW9uJykpICkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBubyBuZWVkIHRvIGJvdGhlciB3aXRoIHRoZSBsZW5ndGhcbiAgaWYgKCFvcHRpb25zLmtub3duTGVuZ3RoKSB7XG4gICAgdGhpcy5fdmFsdWVzVG9NZWFzdXJlLnB1c2godmFsdWUpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2xlbmd0aFJldHJpZXZlciA9IGZ1bmN0aW9uKHZhbHVlLCBjYWxsYmFjaykge1xuXG4gIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnZmQnKSkge1xuXG4gICAgLy8gdGFrZSByZWFkIHJhbmdlIGludG8gYSBhY2NvdW50XG4gICAgLy8gYGVuZGAgPSBJbmZpbml0eSDigJM+IHJlYWQgZmlsZSB0aWxsIHRoZSBlbmRcbiAgICAvL1xuICAgIC8vIFRPRE86IExvb2tzIGxpa2UgdGhlcmUgaXMgYnVnIGluIE5vZGUgZnMuY3JlYXRlUmVhZFN0cmVhbVxuICAgIC8vIGl0IGRvZXNuJ3QgcmVzcGVjdCBgZW5kYCBvcHRpb25zIHdpdGhvdXQgYHN0YXJ0YCBvcHRpb25zXG4gICAgLy8gRml4IGl0IHdoZW4gbm9kZSBmaXhlcyBpdC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzc4MTlcbiAgICBpZiAodmFsdWUuZW5kICE9IHVuZGVmaW5lZCAmJiB2YWx1ZS5lbmQgIT0gSW5maW5pdHkgJiYgdmFsdWUuc3RhcnQgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgIC8vIHdoZW4gZW5kIHNwZWNpZmllZFxuICAgICAgLy8gbm8gbmVlZCB0byBjYWxjdWxhdGUgcmFuZ2VcbiAgICAgIC8vIGluY2x1c2l2ZSwgc3RhcnRzIHdpdGggMFxuICAgICAgY2FsbGJhY2sobnVsbCwgdmFsdWUuZW5kICsgMSAtICh2YWx1ZS5zdGFydCA/IHZhbHVlLnN0YXJ0IDogMCkpO1xuXG4gICAgLy8gbm90IHRoYXQgZmFzdCBzbm9vcHlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3RpbGwgbmVlZCB0byBmZXRjaCBmaWxlIHNpemUgZnJvbSBmc1xuICAgICAgZnMuc3RhdCh2YWx1ZS5wYXRoLCBmdW5jdGlvbihlcnIsIHN0YXQpIHtcblxuICAgICAgICB2YXIgZmlsZVNpemU7XG5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGZpbmFsIHNpemUgYmFzZWQgb24gdGhlIHJhbmdlIG9wdGlvbnNcbiAgICAgICAgZmlsZVNpemUgPSBzdGF0LnNpemUgLSAodmFsdWUuc3RhcnQgPyB2YWx1ZS5zdGFydCA6IDApO1xuICAgICAgICBjYWxsYmFjayhudWxsLCBmaWxlU2l6ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgLy8gb3IgaHR0cCByZXNwb25zZVxuICB9IGVsc2UgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgK3ZhbHVlLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pO1xuXG4gIC8vIG9yIHJlcXVlc3Qgc3RyZWFtIGh0dHA6Ly9naXRodWIuY29tL21pa2VhbC9yZXF1ZXN0XG4gIH0gZWxzZSBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2h0dHBNb2R1bGUnKSkge1xuICAgIC8vIHdhaXQgdGlsbCByZXNwb25zZSBjb21lIGJhY2tcbiAgICB2YWx1ZS5vbigncmVzcG9uc2UnLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgdmFsdWUucGF1c2UoKTtcbiAgICAgIGNhbGxiYWNrKG51bGwsICtyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddKTtcbiAgICB9KTtcbiAgICB2YWx1ZS5yZXN1bWUoKTtcblxuICAvLyBzb21ldGhpbmcgZWxzZVxuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKCdVbmtub3duIHN0cmVhbScpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX211bHRpUGFydEhlYWRlciA9IGZ1bmN0aW9uKGZpZWxkLCB2YWx1ZSwgb3B0aW9ucykge1xuICAvLyBjdXN0b20gaGVhZGVyIHNwZWNpZmllZCAoYXMgc3RyaW5nKT9cbiAgLy8gaXQgYmVjb21lcyByZXNwb25zaWJsZSBmb3IgYm91bmRhcnlcbiAgLy8gKGUuZy4gdG8gaGFuZGxlIGV4dHJhIENSTEZzIG9uIC5ORVQgc2VydmVycylcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmhlYWRlciA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBvcHRpb25zLmhlYWRlcjtcbiAgfVxuXG4gIHZhciBjb250ZW50RGlzcG9zaXRpb24gPSB0aGlzLl9nZXRDb250ZW50RGlzcG9zaXRpb24odmFsdWUsIG9wdGlvbnMpO1xuICB2YXIgY29udGVudFR5cGUgPSB0aGlzLl9nZXRDb250ZW50VHlwZSh2YWx1ZSwgb3B0aW9ucyk7XG5cbiAgdmFyIGNvbnRlbnRzID0gJyc7XG4gIHZhciBoZWFkZXJzICA9IHtcbiAgICAvLyBhZGQgY3VzdG9tIGRpc3Bvc2l0aW9uIGFzIHRoaXJkIGVsZW1lbnQgb3Iga2VlcCBpdCB0d28gZWxlbWVudHMgaWYgbm90XG4gICAgJ0NvbnRlbnQtRGlzcG9zaXRpb24nOiBbJ2Zvcm0tZGF0YScsICduYW1lPVwiJyArIGZpZWxkICsgJ1wiJ10uY29uY2F0KGNvbnRlbnREaXNwb3NpdGlvbiB8fCBbXSksXG4gICAgLy8gaWYgbm8gY29udGVudCB0eXBlLiBhbGxvdyBpdCB0byBiZSBlbXB0eSBhcnJheVxuICAgICdDb250ZW50LVR5cGUnOiBbXS5jb25jYXQoY29udGVudFR5cGUgfHwgW10pXG4gIH07XG5cbiAgLy8gYWxsb3cgY3VzdG9tIGhlYWRlcnMuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWFkZXIgPT0gJ29iamVjdCcpIHtcbiAgICBwb3B1bGF0ZShoZWFkZXJzLCBvcHRpb25zLmhlYWRlcik7XG4gIH1cblxuICB2YXIgaGVhZGVyO1xuICBmb3IgKHZhciBwcm9wIGluIGhlYWRlcnMpIHtcbiAgICBpZiAoIWhlYWRlcnMuaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xuICAgIGhlYWRlciA9IGhlYWRlcnNbcHJvcF07XG5cbiAgICAvLyBza2lwIG51bGxpc2ggaGVhZGVycy5cbiAgICBpZiAoaGVhZGVyID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYWxsIGhlYWRlcnMgdG8gYXJyYXlzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIgPSBbaGVhZGVyXTtcbiAgICB9XG5cbiAgICAvLyBhZGQgbm9uLWVtcHR5IGhlYWRlcnMuXG4gICAgaWYgKGhlYWRlci5sZW5ndGgpIHtcbiAgICAgIGNvbnRlbnRzICs9IHByb3AgKyAnOiAnICsgaGVhZGVyLmpvaW4oJzsgJykgKyBGb3JtRGF0YS5MSU5FX0JSRUFLO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnLS0nICsgdGhpcy5nZXRCb3VuZGFyeSgpICsgRm9ybURhdGEuTElORV9CUkVBSyArIGNvbnRlbnRzICsgRm9ybURhdGEuTElORV9CUkVBSztcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fZ2V0Q29udGVudERpc3Bvc2l0aW9uID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcblxuICB2YXIgZmlsZW5hbWVcbiAgICAsIGNvbnRlbnREaXNwb3NpdGlvblxuICAgIDtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsZXBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gY3VzdG9tIGZpbGVwYXRoIGZvciByZWxhdGl2ZSBwYXRoc1xuICAgIGZpbGVuYW1lID0gcGF0aC5ub3JtYWxpemUob3B0aW9ucy5maWxlcGF0aCkucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMuZmlsZW5hbWUgfHwgdmFsdWUubmFtZSB8fCB2YWx1ZS5wYXRoKSB7XG4gICAgLy8gY3VzdG9tIGZpbGVuYW1lIHRha2UgcHJlY2VkZW5jZVxuICAgIC8vIGZvcm1pZGFibGUgYW5kIHRoZSBicm93c2VyIGFkZCBhIG5hbWUgcHJvcGVydHlcbiAgICAvLyBmcy0gYW5kIHJlcXVlc3QtIHN0cmVhbXMgaGF2ZSBwYXRoIHByb3BlcnR5XG4gICAgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKG9wdGlvbnMuZmlsZW5hbWUgfHwgdmFsdWUubmFtZSB8fCB2YWx1ZS5wYXRoKTtcbiAgfSBlbHNlIGlmICh2YWx1ZS5yZWFkYWJsZSAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cFZlcnNpb24nKSkge1xuICAgIC8vIG9yIHRyeSBodHRwIHJlc3BvbnNlXG4gICAgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKHZhbHVlLmNsaWVudC5faHR0cE1lc3NhZ2UucGF0aCk7XG4gIH1cblxuICBpZiAoZmlsZW5hbWUpIHtcbiAgICBjb250ZW50RGlzcG9zaXRpb24gPSAnZmlsZW5hbWU9XCInICsgZmlsZW5hbWUgKyAnXCInO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnREaXNwb3NpdGlvbjtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fZ2V0Q29udGVudFR5cGUgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuXG4gIC8vIHVzZSBjdXN0b20gY29udGVudC10eXBlIGFib3ZlIGFsbFxuICB2YXIgY29udGVudFR5cGUgPSBvcHRpb25zLmNvbnRlbnRUeXBlO1xuXG4gIC8vIG9yIHRyeSBgbmFtZWAgZnJvbSBmb3JtaWRhYmxlLCBicm93c2VyXG4gIGlmICghY29udGVudFR5cGUgJiYgdmFsdWUubmFtZSkge1xuICAgIGNvbnRlbnRUeXBlID0gbWltZS5sb29rdXAodmFsdWUubmFtZSk7XG4gIH1cblxuICAvLyBvciB0cnkgYHBhdGhgIGZyb20gZnMtLCByZXF1ZXN0LSBzdHJlYW1zXG4gIGlmICghY29udGVudFR5cGUgJiYgdmFsdWUucGF0aCkge1xuICAgIGNvbnRlbnRUeXBlID0gbWltZS5sb29rdXAodmFsdWUucGF0aCk7XG4gIH1cblxuICAvLyBvciBpZiBpdCdzIGh0dHAtcmVwb25zZVxuICBpZiAoIWNvbnRlbnRUeXBlICYmIHZhbHVlLnJlYWRhYmxlICYmIHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSB7XG4gICAgY29udGVudFR5cGUgPSB2YWx1ZS5oZWFkZXJzWydjb250ZW50LXR5cGUnXTtcbiAgfVxuXG4gIC8vIG9yIGd1ZXNzIGl0IGZyb20gdGhlIGZpbGVwYXRoIG9yIGZpbGVuYW1lXG4gIGlmICghY29udGVudFR5cGUgJiYgKG9wdGlvbnMuZmlsZXBhdGggfHwgb3B0aW9ucy5maWxlbmFtZSkpIHtcbiAgICBjb250ZW50VHlwZSA9IG1pbWUubG9va3VwKG9wdGlvbnMuZmlsZXBhdGggfHwgb3B0aW9ucy5maWxlbmFtZSk7XG4gIH1cblxuICAvLyBmYWxsYmFjayB0byB0aGUgZGVmYXVsdCBjb250ZW50IHR5cGUgaWYgYHZhbHVlYCBpcyBub3Qgc2ltcGxlIHZhbHVlXG4gIGlmICghY29udGVudFR5cGUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgY29udGVudFR5cGUgPSBGb3JtRGF0YS5ERUZBVUxUX0NPTlRFTlRfVFlQRTtcbiAgfVxuXG4gIHJldHVybiBjb250ZW50VHlwZTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fbXVsdGlQYXJ0Rm9vdGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmdW5jdGlvbihuZXh0KSB7XG4gICAgdmFyIGZvb3RlciA9IEZvcm1EYXRhLkxJTkVfQlJFQUs7XG5cbiAgICB2YXIgbGFzdFBhcnQgPSAodGhpcy5fc3RyZWFtcy5sZW5ndGggPT09IDApO1xuICAgIGlmIChsYXN0UGFydCkge1xuICAgICAgZm9vdGVyICs9IHRoaXMuX2xhc3RCb3VuZGFyeSgpO1xuICAgIH1cblxuICAgIG5leHQoZm9vdGVyKTtcbiAgfS5iaW5kKHRoaXMpO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9sYXN0Qm91bmRhcnkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICctLScgKyB0aGlzLmdldEJvdW5kYXJ5KCkgKyAnLS0nICsgRm9ybURhdGEuTElORV9CUkVBSztcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRIZWFkZXJzID0gZnVuY3Rpb24odXNlckhlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcjtcbiAgdmFyIGZvcm1IZWFkZXJzID0ge1xuICAgICdjb250ZW50LXR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9JyArIHRoaXMuZ2V0Qm91bmRhcnkoKVxuICB9O1xuXG4gIGZvciAoaGVhZGVyIGluIHVzZXJIZWFkZXJzKSB7XG4gICAgaWYgKHVzZXJIZWFkZXJzLmhhc093blByb3BlcnR5KGhlYWRlcikpIHtcbiAgICAgIGZvcm1IZWFkZXJzW2hlYWRlci50b0xvd2VyQ2FzZSgpXSA9IHVzZXJIZWFkZXJzW2hlYWRlcl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcm1IZWFkZXJzO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLmdldEJvdW5kYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5fYm91bmRhcnkpIHtcbiAgICB0aGlzLl9nZW5lcmF0ZUJvdW5kYXJ5KCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fYm91bmRhcnk7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2dlbmVyYXRlQm91bmRhcnkgPSBmdW5jdGlvbigpIHtcbiAgLy8gVGhpcyBnZW5lcmF0ZXMgYSA1MCBjaGFyYWN0ZXIgYm91bmRhcnkgc2ltaWxhciB0byB0aG9zZSB1c2VkIGJ5IEZpcmVmb3guXG4gIC8vIFRoZXkgYXJlIG9wdGltaXplZCBmb3IgYm95ZXItbW9vcmUgcGFyc2luZy5cbiAgdmFyIGJvdW5kYXJ5ID0gJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgYm91bmRhcnkgKz0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApLnRvU3RyaW5nKDE2KTtcbiAgfVxuXG4gIHRoaXMuX2JvdW5kYXJ5ID0gYm91bmRhcnk7XG59O1xuXG4vLyBOb3RlOiBnZXRMZW5ndGhTeW5jIERPRVNOJ1QgY2FsY3VsYXRlIHN0cmVhbXMgbGVuZ3RoXG4vLyBBcyB3b3JrYXJvdW5kIG9uZSBjYW4gY2FsY3VsYXRlIGZpbGUgc2l6ZSBtYW51YWxseVxuLy8gYW5kIGFkZCBpdCBhcyBrbm93bkxlbmd0aCBvcHRpb25cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRMZW5ndGhTeW5jID0gZnVuY3Rpb24oKSB7XG4gIHZhciBrbm93bkxlbmd0aCA9IHRoaXMuX292ZXJoZWFkTGVuZ3RoICsgdGhpcy5fdmFsdWVMZW5ndGg7XG5cbiAgLy8gRG9uJ3QgZ2V0IGNvbmZ1c2VkLCB0aGVyZSBhcmUgMyBcImludGVybmFsXCIgc3RyZWFtcyBmb3IgZWFjaCBrZXl2YWwgcGFpclxuICAvLyBzbyBpdCBiYXNpY2FsbHkgY2hlY2tzIGlmIHRoZXJlIGlzIGFueSB2YWx1ZSBhZGRlZCB0byB0aGUgZm9ybVxuICBpZiAodGhpcy5fc3RyZWFtcy5sZW5ndGgpIHtcbiAgICBrbm93bkxlbmd0aCArPSB0aGlzLl9sYXN0Qm91bmRhcnkoKS5sZW5ndGg7XG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZm9ybS1kYXRhL2Zvcm0tZGF0YS9pc3N1ZXMvNDBcbiAgaWYgKCF0aGlzLmhhc0tub3duTGVuZ3RoKCkpIHtcbiAgICAvLyBTb21lIGFzeW5jIGxlbmd0aCByZXRyaWV2ZXJzIGFyZSBwcmVzZW50XG4gICAgLy8gdGhlcmVmb3JlIHN5bmNocm9ub3VzIGxlbmd0aCBjYWxjdWxhdGlvbiBpcyBmYWxzZS5cbiAgICAvLyBQbGVhc2UgdXNlIGdldExlbmd0aChjYWxsYmFjaykgdG8gZ2V0IHByb3BlciBsZW5ndGhcbiAgICB0aGlzLl9lcnJvcihuZXcgRXJyb3IoJ0Nhbm5vdCBjYWxjdWxhdGUgcHJvcGVyIGxlbmd0aCBpbiBzeW5jaHJvbm91cyB3YXkuJykpO1xuICB9XG5cbiAgcmV0dXJuIGtub3duTGVuZ3RoO1xufTtcblxuLy8gUHVibGljIEFQSSB0byBjaGVjayBpZiBsZW5ndGggb2YgYWRkZWQgdmFsdWVzIGlzIGtub3duXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZm9ybS1kYXRhL2Zvcm0tZGF0YS9pc3N1ZXMvMTk2XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZm9ybS1kYXRhL2Zvcm0tZGF0YS9pc3N1ZXMvMjYyXG5Gb3JtRGF0YS5wcm90b3R5cGUuaGFzS25vd25MZW5ndGggPSBmdW5jdGlvbigpIHtcbiAgdmFyIGhhc0tub3duTGVuZ3RoID0gdHJ1ZTtcblxuICBpZiAodGhpcy5fdmFsdWVzVG9NZWFzdXJlLmxlbmd0aCkge1xuICAgIGhhc0tub3duTGVuZ3RoID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaGFzS25vd25MZW5ndGg7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24oY2IpIHtcbiAgdmFyIGtub3duTGVuZ3RoID0gdGhpcy5fb3ZlcmhlYWRMZW5ndGggKyB0aGlzLl92YWx1ZUxlbmd0aDtcblxuICBpZiAodGhpcy5fc3RyZWFtcy5sZW5ndGgpIHtcbiAgICBrbm93bkxlbmd0aCArPSB0aGlzLl9sYXN0Qm91bmRhcnkoKS5sZW5ndGg7XG4gIH1cblxuICBpZiAoIXRoaXMuX3ZhbHVlc1RvTWVhc3VyZS5sZW5ndGgpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNiLmJpbmQodGhpcywgbnVsbCwga25vd25MZW5ndGgpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBhc3luY2tpdC5wYXJhbGxlbCh0aGlzLl92YWx1ZXNUb01lYXN1cmUsIHRoaXMuX2xlbmd0aFJldHJpZXZlciwgZnVuY3Rpb24oZXJyLCB2YWx1ZXMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjYihlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgICAga25vd25MZW5ndGggKz0gbGVuZ3RoO1xuICAgIH0pO1xuXG4gICAgY2IobnVsbCwga25vd25MZW5ndGgpO1xuICB9KTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5zdWJtaXQgPSBmdW5jdGlvbihwYXJhbXMsIGNiKSB7XG4gIHZhciByZXF1ZXN0XG4gICAgLCBvcHRpb25zXG4gICAgLCBkZWZhdWx0cyA9IHttZXRob2Q6ICdwb3N0J31cbiAgICA7XG5cbiAgLy8gcGFyc2UgcHJvdmlkZWQgdXJsIGlmIGl0J3Mgc3RyaW5nXG4gIC8vIG9yIHRyZWF0IGl0IGFzIG9wdGlvbnMgb2JqZWN0XG4gIGlmICh0eXBlb2YgcGFyYW1zID09ICdzdHJpbmcnKSB7XG5cbiAgICBwYXJhbXMgPSBwYXJzZVVybChwYXJhbXMpO1xuICAgIG9wdGlvbnMgPSBwb3B1bGF0ZSh7XG4gICAgICBwb3J0OiBwYXJhbXMucG9ydCxcbiAgICAgIHBhdGg6IHBhcmFtcy5wYXRobmFtZSxcbiAgICAgIGhvc3Q6IHBhcmFtcy5ob3N0bmFtZSxcbiAgICAgIHByb3RvY29sOiBwYXJhbXMucHJvdG9jb2xcbiAgICB9LCBkZWZhdWx0cyk7XG5cbiAgLy8gdXNlIGN1c3RvbSBwYXJhbXNcbiAgfSBlbHNlIHtcblxuICAgIG9wdGlvbnMgPSBwb3B1bGF0ZShwYXJhbXMsIGRlZmF1bHRzKTtcbiAgICAvLyBpZiBubyBwb3J0IHByb3ZpZGVkIHVzZSBkZWZhdWx0IG9uZVxuICAgIGlmICghb3B0aW9ucy5wb3J0KSB7XG4gICAgICBvcHRpb25zLnBvcnQgPSBvcHRpb25zLnByb3RvY29sID09ICdodHRwczonID8gNDQzIDogODA7XG4gICAgfVxuICB9XG5cbiAgLy8gcHV0IHRoYXQgZ29vZCBjb2RlIGluIGdldEhlYWRlcnMgdG8gc29tZSB1c2VcbiAgb3B0aW9ucy5oZWFkZXJzID0gdGhpcy5nZXRIZWFkZXJzKHBhcmFtcy5oZWFkZXJzKTtcblxuICAvLyBodHRwcyBpZiBzcGVjaWZpZWQsIGZhbGxiYWNrIHRvIGh0dHAgaW4gYW55IG90aGVyIGNhc2VcbiAgaWYgKG9wdGlvbnMucHJvdG9jb2wgPT0gJ2h0dHBzOicpIHtcbiAgICByZXF1ZXN0ID0gaHR0cHMucmVxdWVzdChvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXF1ZXN0ID0gaHR0cC5yZXF1ZXN0KG9wdGlvbnMpO1xuICB9XG5cbiAgLy8gZ2V0IGNvbnRlbnQgbGVuZ3RoIGFuZCBmaXJlIGF3YXlcbiAgdGhpcy5nZXRMZW5ndGgoZnVuY3Rpb24oZXJyLCBsZW5ndGgpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFkZCBjb250ZW50IGxlbmd0aFxuICAgIHJlcXVlc3Quc2V0SGVhZGVyKCdDb250ZW50LUxlbmd0aCcsIGxlbmd0aCk7XG5cbiAgICB0aGlzLnBpcGUocmVxdWVzdCk7XG4gICAgaWYgKGNiKSB7XG4gICAgICByZXF1ZXN0Lm9uKCdlcnJvcicsIGNiKTtcbiAgICAgIHJlcXVlc3Qub24oJ3Jlc3BvbnNlJywgY2IuYmluZCh0aGlzLCBudWxsKSk7XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xuXG4gIHJldHVybiByZXF1ZXN0O1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICBpZiAoIXRoaXMuZXJyb3IpIHtcbiAgICB0aGlzLmVycm9yID0gZXJyO1xuICAgIHRoaXMucGF1c2UoKTtcbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxufTtcblxuRm9ybURhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ1tvYmplY3QgRm9ybURhdGFdJztcbn07XG4iLCJ2YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsYXllZFN0cmVhbTtcbmZ1bmN0aW9uIERlbGF5ZWRTdHJlYW0oKSB7XG4gIHRoaXMuc291cmNlID0gbnVsbDtcbiAgdGhpcy5kYXRhU2l6ZSA9IDA7XG4gIHRoaXMubWF4RGF0YVNpemUgPSAxMDI0ICogMTAyNDtcbiAgdGhpcy5wYXVzZVN0cmVhbSA9IHRydWU7XG5cbiAgdGhpcy5fbWF4RGF0YVNpemVFeGNlZWRlZCA9IGZhbHNlO1xuICB0aGlzLl9yZWxlYXNlZCA9IGZhbHNlO1xuICB0aGlzLl9idWZmZXJlZEV2ZW50cyA9IFtdO1xufVxudXRpbC5pbmhlcml0cyhEZWxheWVkU3RyZWFtLCBTdHJlYW0pO1xuXG5EZWxheWVkU3RyZWFtLmNyZWF0ZSA9IGZ1bmN0aW9uKHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZGVsYXllZFN0cmVhbSA9IG5ldyB0aGlzKCk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgZGVsYXllZFN0cmVhbVtvcHRpb25dID0gb3B0aW9uc1tvcHRpb25dO1xuICB9XG5cbiAgZGVsYXllZFN0cmVhbS5zb3VyY2UgPSBzb3VyY2U7XG5cbiAgdmFyIHJlYWxFbWl0ID0gc291cmNlLmVtaXQ7XG4gIHNvdXJjZS5lbWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgZGVsYXllZFN0cmVhbS5faGFuZGxlRW1pdChhcmd1bWVudHMpO1xuICAgIHJldHVybiByZWFsRW1pdC5hcHBseShzb3VyY2UsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIGZ1bmN0aW9uKCkge30pO1xuICBpZiAoZGVsYXllZFN0cmVhbS5wYXVzZVN0cmVhbSkge1xuICAgIHNvdXJjZS5wYXVzZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlbGF5ZWRTdHJlYW07XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRGVsYXllZFN0cmVhbS5wcm90b3R5cGUsICdyZWFkYWJsZScsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5yZWFkYWJsZTtcbiAgfVxufSk7XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNvdXJjZS5zZXRFbmNvZGluZy5hcHBseSh0aGlzLnNvdXJjZSwgYXJndW1lbnRzKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX3JlbGVhc2VkKSB7XG4gICAgdGhpcy5yZWxlYXNlKCk7XG4gIH1cblxuICB0aGlzLnNvdXJjZS5yZXN1bWUoKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc291cmNlLnBhdXNlKCk7XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5yZWxlYXNlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3JlbGVhc2VkID0gdHJ1ZTtcblxuICB0aGlzLl9idWZmZXJlZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIH0uYmluZCh0aGlzKSk7XG4gIHRoaXMuX2J1ZmZlcmVkRXZlbnRzID0gW107XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByID0gU3RyZWFtLnByb3RvdHlwZS5waXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHRoaXMucmVzdW1lKCk7XG4gIHJldHVybiByO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUuX2hhbmRsZUVtaXQgPSBmdW5jdGlvbihhcmdzKSB7XG4gIGlmICh0aGlzLl9yZWxlYXNlZCkge1xuICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoYXJnc1swXSA9PT0gJ2RhdGEnKSB7XG4gICAgdGhpcy5kYXRhU2l6ZSArPSBhcmdzWzFdLmxlbmd0aDtcbiAgICB0aGlzLl9jaGVja0lmTWF4RGF0YVNpemVFeGNlZWRlZCgpO1xuICB9XG5cbiAgdGhpcy5fYnVmZmVyZWRFdmVudHMucHVzaChhcmdzKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLl9jaGVja0lmTWF4RGF0YVNpemVFeGNlZWRlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fbWF4RGF0YVNpemVFeGNlZWRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLmRhdGFTaXplIDw9IHRoaXMubWF4RGF0YVNpemUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9tYXhEYXRhU2l6ZUV4Y2VlZGVkID0gdHJ1ZTtcbiAgdmFyIG1lc3NhZ2UgPVxuICAgICdEZWxheWVkU3RyZWFtI21heERhdGFTaXplIG9mICcgKyB0aGlzLm1heERhdGFTaXplICsgJyBieXRlcyBleGNlZWRlZC4nXG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IobWVzc2FnZSkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZGVmZXI7XG5cbi8qKlxuICogUnVucyBwcm92aWRlZCBmdW5jdGlvbiBvbiBuZXh0IGl0ZXJhdGlvbiBvZiB0aGUgZXZlbnQgbG9vcFxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gZnVuY3Rpb24gdG8gcnVuXG4gKi9cbmZ1bmN0aW9uIGRlZmVyKGZuKVxue1xuICB2YXIgbmV4dFRpY2sgPSB0eXBlb2Ygc2V0SW1tZWRpYXRlID09ICdmdW5jdGlvbidcbiAgICA/IHNldEltbWVkaWF0ZVxuICAgIDogKFxuICAgICAgdHlwZW9mIHByb2Nlc3MgPT0gJ29iamVjdCcgJiYgdHlwZW9mIHByb2Nlc3MubmV4dFRpY2sgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm9jZXNzLm5leHRUaWNrXG4gICAgICA6IG51bGxcbiAgICApO1xuXG4gIGlmIChuZXh0VGljaylcbiAge1xuICAgIG5leHRUaWNrKGZuKTtcbiAgfVxuICBlbHNlXG4gIHtcbiAgICBzZXRUaW1lb3V0KGZuLCAwKTtcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPVxue1xuICBwYXJhbGxlbCAgICAgIDogcmVxdWlyZSgnLi9wYXJhbGxlbC5qcycpLFxuICBzZXJpYWwgICAgICAgIDogcmVxdWlyZSgnLi9zZXJpYWwuanMnKSxcbiAgc2VyaWFsT3JkZXJlZCA6IHJlcXVpcmUoJy4vc2VyaWFsT3JkZXJlZC5qcycpXG59O1xuIiwidmFyIGl0ZXJhdGUgICAgPSByZXF1aXJlKCcuL2xpYi9pdGVyYXRlLmpzJylcbiAgLCBpbml0U3RhdGUgID0gcmVxdWlyZSgnLi9saWIvc3RhdGUuanMnKVxuICAsIHRlcm1pbmF0b3IgPSByZXF1aXJlKCcuL2xpYi90ZXJtaW5hdG9yLmpzJylcbiAgO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmFsbGVsO1xuXG4vKipcbiAqIFJ1bnMgaXRlcmF0b3Igb3ZlciBwcm92aWRlZCBhcnJheSBlbGVtZW50cyBpbiBwYXJhbGxlbFxuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIHJ1blxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgd2hlbiBhbGwgZWxlbWVudHMgcHJvY2Vzc2VkXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gam9icyB0ZXJtaW5hdG9yXG4gKi9cbmZ1bmN0aW9uIHBhcmFsbGVsKGxpc3QsIGl0ZXJhdG9yLCBjYWxsYmFjaylcbntcbiAgdmFyIHN0YXRlID0gaW5pdFN0YXRlKGxpc3QpO1xuXG4gIHdoaWxlIChzdGF0ZS5pbmRleCA8IChzdGF0ZVsna2V5ZWRMaXN0J10gfHwgbGlzdCkubGVuZ3RoKVxuICB7XG4gICAgaXRlcmF0ZShsaXN0LCBpdGVyYXRvciwgc3RhdGUsIGZ1bmN0aW9uKGVycm9yLCByZXN1bHQpXG4gICAge1xuICAgICAgaWYgKGVycm9yKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBsb29rcyBsaWtlIGl0J3MgdGhlIGxhc3Qgb25lXG4gICAgICBpZiAoT2JqZWN0LmtleXMoc3RhdGUuam9icykubGVuZ3RoID09PSAwKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBzdGF0ZS5yZXN1bHRzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhdGUuaW5kZXgrKztcbiAgfVxuXG4gIHJldHVybiB0ZXJtaW5hdG9yLmJpbmQoc3RhdGUsIGNhbGxiYWNrKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZGVmZXI7XG5cbi8qKlxuICogUnVucyBwcm92aWRlZCBmdW5jdGlvbiBvbiBuZXh0IGl0ZXJhdGlvbiBvZiB0aGUgZXZlbnQgbG9vcFxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gZnVuY3Rpb24gdG8gcnVuXG4gKi9cbmZ1bmN0aW9uIGRlZmVyKGZuKVxue1xuICB2YXIgbmV4dFRpY2sgPSB0eXBlb2Ygc2V0SW1tZWRpYXRlID09ICdmdW5jdGlvbidcbiAgICA/IHNldEltbWVkaWF0ZVxuICAgIDogKFxuICAgICAgdHlwZW9mIHByb2Nlc3MgPT0gJ29iamVjdCcgJiYgdHlwZW9mIHByb2Nlc3MubmV4dFRpY2sgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm9jZXNzLm5leHRUaWNrXG4gICAgICA6IG51bGxcbiAgICApO1xuXG4gIGlmIChuZXh0VGljaylcbiAge1xuICAgIG5leHRUaWNrKGZuKTtcbiAgfVxuICBlbHNlXG4gIHtcbiAgICBzZXRUaW1lb3V0KGZuLCAwKTtcbiAgfVxufVxuIiwidmFyIHNlcmlhbE9yZGVyZWQgPSByZXF1aXJlKCcuL3NlcmlhbE9yZGVyZWQuanMnKTtcblxuLy8gUHVibGljIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBzZXJpYWw7XG5cbi8qKlxuICogUnVucyBpdGVyYXRvciBvdmVyIHByb3ZpZGVkIGFycmF5IGVsZW1lbnRzIGluIHNlcmllc1xuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIHJ1blxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgd2hlbiBhbGwgZWxlbWVudHMgcHJvY2Vzc2VkXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gam9icyB0ZXJtaW5hdG9yXG4gKi9cbmZ1bmN0aW9uIHNlcmlhbChsaXN0LCBpdGVyYXRvciwgY2FsbGJhY2spXG57XG4gIHJldHVybiBzZXJpYWxPcmRlcmVkKGxpc3QsIGl0ZXJhdG9yLCBudWxsLCBjYWxsYmFjayk7XG59XG4iLCIvLyBwb3B1bGF0ZXMgbWlzc2luZyB2YWx1ZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZHN0LCBzcmMpIHtcblxuICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goZnVuY3Rpb24ocHJvcClcbiAge1xuICAgIGRzdFtwcm9wXSA9IGRzdFtwcm9wXSB8fCBzcmNbcHJvcF07XG4gIH0pO1xuXG4gIHJldHVybiBkc3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgICAgICA9IGlzVHlwZWRBcnJheVxuaXNUeXBlZEFycmF5LnN0cmljdCA9IGlzU3RyaWN0VHlwZWRBcnJheVxuaXNUeXBlZEFycmF5Lmxvb3NlICA9IGlzTG9vc2VUeXBlZEFycmF5XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcbnZhciBuYW1lcyA9IHtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IEludDE2QXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IEludDMyQXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IFVpbnQ4QXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBVaW50MTZBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgVWludDMyQXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSc6IHRydWVcbn1cblxuZnVuY3Rpb24gaXNUeXBlZEFycmF5KGFycikge1xuICByZXR1cm4gKFxuICAgICAgIGlzU3RyaWN0VHlwZWRBcnJheShhcnIpXG4gICAgfHwgaXNMb29zZVR5cGVkQXJyYXkoYXJyKVxuICApXG59XG5cbmZ1bmN0aW9uIGlzU3RyaWN0VHlwZWRBcnJheShhcnIpIHtcbiAgcmV0dXJuIChcbiAgICAgICBhcnIgaW5zdGFuY2VvZiBJbnQ4QXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBJbnQxNkFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgSW50MzJBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIFVpbnQxNkFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgVWludDMyQXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXlcbiAgKVxufVxuXG5mdW5jdGlvbiBpc0xvb3NlVHlwZWRBcnJheShhcnIpIHtcbiAgcmV0dXJuIG5hbWVzW3RvU3RyaW5nLmNhbGwoYXJyKV1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5mdW5jdGlvbiBmb3JtYXRIb3N0bmFtZSAoaG9zdG5hbWUpIHtcbiAgLy8gY2Fub25pY2FsaXplIHRoZSBob3N0bmFtZSwgc28gdGhhdCAnb29nbGUuY29tJyB3b24ndCBtYXRjaCAnZ29vZ2xlLmNvbSdcbiAgcmV0dXJuIGhvc3RuYW1lLnJlcGxhY2UoL15cXC4qLywgJy4nKS50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIHBhcnNlTm9Qcm94eVpvbmUgKHpvbmUpIHtcbiAgem9uZSA9IHpvbmUudHJpbSgpLnRvTG93ZXJDYXNlKClcblxuICB2YXIgem9uZVBhcnRzID0gem9uZS5zcGxpdCgnOicsIDIpXG4gIHZhciB6b25lSG9zdCA9IGZvcm1hdEhvc3RuYW1lKHpvbmVQYXJ0c1swXSlcbiAgdmFyIHpvbmVQb3J0ID0gem9uZVBhcnRzWzFdXG4gIHZhciBoYXNQb3J0ID0gem9uZS5pbmRleE9mKCc6JykgPiAtMVxuXG4gIHJldHVybiB7aG9zdG5hbWU6IHpvbmVIb3N0LCBwb3J0OiB6b25lUG9ydCwgaGFzUG9ydDogaGFzUG9ydH1cbn1cblxuZnVuY3Rpb24gdXJpSW5Ob1Byb3h5ICh1cmksIG5vUHJveHkpIHtcbiAgdmFyIHBvcnQgPSB1cmkucG9ydCB8fCAodXJpLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICc0NDMnIDogJzgwJylcbiAgdmFyIGhvc3RuYW1lID0gZm9ybWF0SG9zdG5hbWUodXJpLmhvc3RuYW1lKVxuICB2YXIgbm9Qcm94eUxpc3QgPSBub1Byb3h5LnNwbGl0KCcsJylcblxuICAvLyBpdGVyYXRlIHRocm91Z2ggdGhlIG5vUHJveHlMaXN0IHVudGlsIGl0IGZpbmRzIGEgbWF0Y2guXG4gIHJldHVybiBub1Byb3h5TGlzdC5tYXAocGFyc2VOb1Byb3h5Wm9uZSkuc29tZShmdW5jdGlvbiAobm9Qcm94eVpvbmUpIHtcbiAgICB2YXIgaXNNYXRjaGVkQXQgPSBob3N0bmFtZS5pbmRleE9mKG5vUHJveHlab25lLmhvc3RuYW1lKVxuICAgIHZhciBob3N0bmFtZU1hdGNoZWQgPSAoXG4gICAgICBpc01hdGNoZWRBdCA+IC0xICYmXG4gICAgICAgIChpc01hdGNoZWRBdCA9PT0gaG9zdG5hbWUubGVuZ3RoIC0gbm9Qcm94eVpvbmUuaG9zdG5hbWUubGVuZ3RoKVxuICAgIClcblxuICAgIGlmIChub1Byb3h5Wm9uZS5oYXNQb3J0KSB7XG4gICAgICByZXR1cm4gKHBvcnQgPT09IG5vUHJveHlab25lLnBvcnQpICYmIGhvc3RuYW1lTWF0Y2hlZFxuICAgIH1cblxuICAgIHJldHVybiBob3N0bmFtZU1hdGNoZWRcbiAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0UHJveHlGcm9tVVJJICh1cmkpIHtcbiAgLy8gRGVjaWRlIHRoZSBwcm9wZXIgcmVxdWVzdCBwcm94eSB0byB1c2UgYmFzZWQgb24gdGhlIHJlcXVlc3QgVVJJIG9iamVjdCBhbmQgdGhlXG4gIC8vIGVudmlyb25tZW50YWwgdmFyaWFibGVzIChOT19QUk9YWSwgSFRUUF9QUk9YWSwgZXRjLilcbiAgLy8gcmVzcGVjdCBOT19QUk9YWSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgKHNlZTogaHR0cDovL2x5bnguaXNjLm9yZy9jdXJyZW50L2JyZWFrb3V0L2x5bnhfaGVscC9rZXlzdHJva2VzL2Vudmlyb25tZW50cy5odG1sKVxuXG4gIHZhciBub1Byb3h5ID0gcHJvY2Vzcy5lbnYuTk9fUFJPWFkgfHwgcHJvY2Vzcy5lbnYubm9fcHJveHkgfHwgJydcblxuICAvLyBpZiB0aGUgbm9Qcm94eSBpcyBhIHdpbGRjYXJkIHRoZW4gcmV0dXJuIG51bGxcblxuICBpZiAobm9Qcm94eSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8vIGlmIHRoZSBub1Byb3h5IGlzIG5vdCBlbXB0eSBhbmQgdGhlIHVyaSBpcyBmb3VuZCByZXR1cm4gbnVsbFxuXG4gIGlmIChub1Byb3h5ICE9PSAnJyAmJiB1cmlJbk5vUHJveHkodXJpLCBub1Byb3h5KSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyBDaGVjayBmb3IgSFRUUCBvciBIVFRQUyBQcm94eSBpbiBlbnZpcm9ubWVudCBFbHNlIGRlZmF1bHQgdG8gbnVsbFxuXG4gIGlmICh1cmkucHJvdG9jb2wgPT09ICdodHRwOicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuSFRUUF9QUk9YWSB8fFxuICAgICAgcHJvY2Vzcy5lbnYuaHR0cF9wcm94eSB8fCBudWxsXG4gIH1cblxuICBpZiAodXJpLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5IVFRQU19QUk9YWSB8fFxuICAgICAgcHJvY2Vzcy5lbnYuaHR0cHNfcHJveHkgfHxcbiAgICAgIHByb2Nlc3MuZW52LkhUVFBfUFJPWFkgfHxcbiAgICAgIHByb2Nlc3MuZW52Lmh0dHBfcHJveHkgfHwgbnVsbFxuICB9XG5cbiAgLy8gaWYgbm9uZSBvZiB0aGF0IHdvcmtzLCByZXR1cm4gbnVsbFxuICAvLyAoV2hhdCB1cmkgcHJvdG9jb2wgYXJlIHlvdSB1c2luZyB0aGVuPylcblxuICByZXR1cm4gbnVsbFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3h5RnJvbVVSSVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBxcyA9IHJlcXVpcmUoJ3FzJylcbnZhciBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJylcblxuZnVuY3Rpb24gUXVlcnlzdHJpbmcgKHJlcXVlc3QpIHtcbiAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdFxuICB0aGlzLmxpYiA9IG51bGxcbiAgdGhpcy51c2VRdWVyeXN0cmluZyA9IG51bGxcbiAgdGhpcy5wYXJzZU9wdGlvbnMgPSBudWxsXG4gIHRoaXMuc3RyaW5naWZ5T3B0aW9ucyA9IG51bGxcbn1cblxuUXVlcnlzdHJpbmcucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAodGhpcy5saWIpIHsgcmV0dXJuIH1cblxuICB0aGlzLnVzZVF1ZXJ5c3RyaW5nID0gb3B0aW9ucy51c2VRdWVyeXN0cmluZ1xuICB0aGlzLmxpYiA9ICh0aGlzLnVzZVF1ZXJ5c3RyaW5nID8gcXVlcnlzdHJpbmcgOiBxcylcblxuICB0aGlzLnBhcnNlT3B0aW9ucyA9IG9wdGlvbnMucXNQYXJzZU9wdGlvbnMgfHwge31cbiAgdGhpcy5zdHJpbmdpZnlPcHRpb25zID0gb3B0aW9ucy5xc1N0cmluZ2lmeU9wdGlvbnMgfHwge31cbn1cblxuUXVlcnlzdHJpbmcucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuICh0aGlzLnVzZVF1ZXJ5c3RyaW5nKVxuICAgID8gdGhpcy5yZmMzOTg2KHRoaXMubGliLnN0cmluZ2lmeShvYmosXG4gICAgICB0aGlzLnN0cmluZ2lmeU9wdGlvbnMuc2VwIHx8IG51bGwsXG4gICAgICB0aGlzLnN0cmluZ2lmeU9wdGlvbnMuZXEgfHwgbnVsbCxcbiAgICAgIHRoaXMuc3RyaW5naWZ5T3B0aW9ucykpXG4gICAgOiB0aGlzLmxpYi5zdHJpbmdpZnkob2JqLCB0aGlzLnN0cmluZ2lmeU9wdGlvbnMpXG59XG5cblF1ZXJ5c3RyaW5nLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuICh0aGlzLnVzZVF1ZXJ5c3RyaW5nKVxuICAgID8gdGhpcy5saWIucGFyc2Uoc3RyLFxuICAgICAgdGhpcy5wYXJzZU9wdGlvbnMuc2VwIHx8IG51bGwsXG4gICAgICB0aGlzLnBhcnNlT3B0aW9ucy5lcSB8fCBudWxsLFxuICAgICAgdGhpcy5wYXJzZU9wdGlvbnMpXG4gICAgOiB0aGlzLmxpYi5wYXJzZShzdHIsIHRoaXMucGFyc2VPcHRpb25zKVxufVxuXG5RdWVyeXN0cmluZy5wcm90b3R5cGUucmZjMzk4NiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bIScoKSpdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG5RdWVyeXN0cmluZy5wcm90b3R5cGUudW5lc2NhcGUgPSBxdWVyeXN0cmluZy51bmVzY2FwZVxuXG5leHBvcnRzLlF1ZXJ5c3RyaW5nID0gUXVlcnlzdHJpbmdcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcblxudmFyIGFycmF5UHJlZml4R2VuZXJhdG9ycyA9IHtcbiAgICBicmFja2V0czogZnVuY3Rpb24gYnJhY2tldHMocHJlZml4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnW10nO1xuICAgIH0sXG4gICAgaW5kaWNlczogZnVuY3Rpb24gaW5kaWNlcyhwcmVmaXgsIGtleSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1snICsga2V5ICsgJ10nO1xuICAgIH0sXG4gICAgcmVwZWF0OiBmdW5jdGlvbiByZXBlYXQocHJlZml4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG4gICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgfVxufTtcblxudmFyIHRvSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgICBkZWxpbWl0ZXI6ICcmJyxcbiAgICBlbmNvZGU6IHRydWUsXG4gICAgZW5jb2RlcjogdXRpbHMuZW5jb2RlLFxuICAgIGVuY29kZVZhbHVlc09ubHk6IGZhbHNlLFxuICAgIHNlcmlhbGl6ZURhdGU6IGZ1bmN0aW9uIHNlcmlhbGl6ZURhdGUoZGF0ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuICAgICAgICByZXR1cm4gdG9JU08uY2FsbChkYXRlKTtcbiAgICB9LFxuICAgIHNraXBOdWxsczogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSggLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcbiAgICBvYmplY3QsXG4gICAgcHJlZml4LFxuICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgIHNraXBOdWxscyxcbiAgICBlbmNvZGVyLFxuICAgIGZpbHRlcixcbiAgICBzb3J0LFxuICAgIGFsbG93RG90cyxcbiAgICBzZXJpYWxpemVEYXRlLFxuICAgIGZvcm1hdHRlcixcbiAgICBlbmNvZGVWYWx1ZXNPbmx5XG4pIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9iaiA9IGZpbHRlcihwcmVmaXgsIG9iaik7XG4gICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIG9iaiA9IHNlcmlhbGl6ZURhdGUob2JqKTtcbiAgICB9IGVsc2UgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoc3RyaWN0TnVsbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlciAmJiAhZW5jb2RlVmFsdWVzT25seSA/IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyKSA6IHByZWZpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iaiA9ICcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb2JqID09PSAnbnVtYmVyJyB8fCB0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicgfHwgdXRpbHMuaXNCdWZmZXIob2JqKSkge1xuICAgICAgICBpZiAoZW5jb2Rlcikge1xuICAgICAgICAgICAgdmFyIGtleVZhbHVlID0gZW5jb2RlVmFsdWVzT25seSA/IHByZWZpeCA6IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyKTtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKGtleVZhbHVlKSArICc9JyArIGZvcm1hdHRlcihlbmNvZGVyKG9iaiwgZGVmYXVsdHMuZW5jb2RlcikpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihwcmVmaXgpICsgJz0nICsgZm9ybWF0dGVyKFN0cmluZyhvYmopKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIG9iaktleXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcblxuICAgICAgICBpZiAoc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQoc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIG9ialtrZXldLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgocHJlZml4LCBrZXkpLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgICAgIHNraXBOdWxscyxcbiAgICAgICAgICAgICAgICBlbmNvZGVyLFxuICAgICAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgICAgICBzb3J0LFxuICAgICAgICAgICAgICAgIGFsbG93RG90cyxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgICAgIGZvcm1hdHRlcixcbiAgICAgICAgICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5XG4gICAgICAgICAgICApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQoc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIG9ialtrZXldLFxuICAgICAgICAgICAgICAgIHByZWZpeCArIChhbGxvd0RvdHMgPyAnLicgKyBrZXkgOiAnWycgKyBrZXkgKyAnXScpLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgICAgIHNraXBOdWxscyxcbiAgICAgICAgICAgICAgICBlbmNvZGVyLFxuICAgICAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgICAgICBzb3J0LFxuICAgICAgICAgICAgICAgIGFsbG93RG90cyxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgICAgIGZvcm1hdHRlcixcbiAgICAgICAgICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5XG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG9wdHMpIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuICAgIHZhciBvcHRpb25zID0gb3B0cyA/IHV0aWxzLmFzc2lnbih7fSwgb3B0cykgOiB7fTtcblxuICAgIGlmIChvcHRpb25zLmVuY29kZXIgIT09IG51bGwgJiYgb3B0aW9ucy5lbmNvZGVyICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdGlvbnMuZW5jb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFbmNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBkZWxpbWl0ZXIgPSB0eXBlb2Ygb3B0aW9ucy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuZGVsaW1pdGVyIDogb3B0aW9ucy5kZWxpbWl0ZXI7XG4gICAgdmFyIHN0cmljdE51bGxIYW5kbGluZyA9IHR5cGVvZiBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBkZWZhdWx0cy5zdHJpY3ROdWxsSGFuZGxpbmc7XG4gICAgdmFyIHNraXBOdWxscyA9IHR5cGVvZiBvcHRpb25zLnNraXBOdWxscyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5za2lwTnVsbHMgOiBkZWZhdWx0cy5za2lwTnVsbHM7XG4gICAgdmFyIGVuY29kZSA9IHR5cGVvZiBvcHRpb25zLmVuY29kZSA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5lbmNvZGUgOiBkZWZhdWx0cy5lbmNvZGU7XG4gICAgdmFyIGVuY29kZXIgPSB0eXBlb2Ygb3B0aW9ucy5lbmNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5lbmNvZGVyIDogZGVmYXVsdHMuZW5jb2RlcjtcbiAgICB2YXIgc29ydCA9IHR5cGVvZiBvcHRpb25zLnNvcnQgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnNvcnQgOiBudWxsO1xuICAgIHZhciBhbGxvd0RvdHMgPSB0eXBlb2Ygb3B0aW9ucy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gZmFsc2UgOiBvcHRpb25zLmFsbG93RG90cztcbiAgICB2YXIgc2VyaWFsaXplRGF0ZSA9IHR5cGVvZiBvcHRpb25zLnNlcmlhbGl6ZURhdGUgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnNlcmlhbGl6ZURhdGUgOiBkZWZhdWx0cy5zZXJpYWxpemVEYXRlO1xuICAgIHZhciBlbmNvZGVWYWx1ZXNPbmx5ID0gdHlwZW9mIG9wdGlvbnMuZW5jb2RlVmFsdWVzT25seSA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5lbmNvZGVWYWx1ZXNPbmx5IDogZGVmYXVsdHMuZW5jb2RlVmFsdWVzT25seTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZm9ybWF0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvcHRpb25zLmZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbiAgICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZm9ybWF0cy5mb3JtYXR0ZXJzLCBvcHRpb25zLmZvcm1hdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBmb3JtYXQgb3B0aW9uIHByb3ZpZGVkLicpO1xuICAgIH1cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0cy5mb3JtYXR0ZXJzW29wdGlvbnMuZm9ybWF0XTtcbiAgICB2YXIgb2JqS2V5cztcbiAgICB2YXIgZmlsdGVyO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqID0gZmlsdGVyKCcnLCBvYmopO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHZhciBhcnJheUZvcm1hdDtcbiAgICBpZiAob3B0aW9ucy5hcnJheUZvcm1hdCBpbiBhcnJheVByZWZpeEdlbmVyYXRvcnMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRpb25zLmFycmF5Rm9ybWF0O1xuICAgIH0gZWxzZSBpZiAoJ2luZGljZXMnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRpb25zLmluZGljZXMgPyAnaW5kaWNlcycgOiAncmVwZWF0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBhcnJheUZvcm1hdCA9ICdpbmRpY2VzJztcbiAgICB9XG5cbiAgICB2YXIgZ2VuZXJhdGVBcnJheVByZWZpeCA9IGFycmF5UHJlZml4R2VuZXJhdG9yc1thcnJheUZvcm1hdF07XG5cbiAgICBpZiAoIW9iaktleXMpIHtcbiAgICAgICAgb2JqS2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgfVxuXG4gICAgaWYgKHNvcnQpIHtcbiAgICAgICAgb2JqS2V5cy5zb3J0KHNvcnQpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcblxuICAgICAgICBpZiAoc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChzdHJpbmdpZnkoXG4gICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICBlbmNvZGUgPyBlbmNvZGVyIDogbnVsbCxcbiAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seVxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICB2YXIgam9pbmVkID0ga2V5cy5qb2luKGRlbGltaXRlcik7XG4gICAgdmFyIHByZWZpeCA9IG9wdGlvbnMuYWRkUXVlcnlQcmVmaXggPT09IHRydWUgPyAnPycgOiAnJztcblxuICAgIHJldHVybiBqb2luZWQubGVuZ3RoID4gMCA/IHByZWZpeCArIGpvaW5lZCA6ICcnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGRlZmF1bHRzID0ge1xuICAgIGFsbG93RG90czogZmFsc2UsXG4gICAgYWxsb3dQcm90b3R5cGVzOiBmYWxzZSxcbiAgICBhcnJheUxpbWl0OiAyMCxcbiAgICBkZWNvZGVyOiB1dGlscy5kZWNvZGUsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZGVwdGg6IDUsXG4gICAgcGFyYW1ldGVyTGltaXQ6IDEwMDAsXG4gICAgcGxhaW5PYmplY3RzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgcGFyc2VWYWx1ZXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nVmFsdWVzKHN0ciwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICB2YXIgY2xlYW5TdHIgPSBvcHRpb25zLmlnbm9yZVF1ZXJ5UHJlZml4ID8gc3RyLnJlcGxhY2UoL15cXD8vLCAnJykgOiBzdHI7XG4gICAgdmFyIGxpbWl0ID0gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gSW5maW5pdHkgPyB1bmRlZmluZWQgOiBvcHRpb25zLnBhcmFtZXRlckxpbWl0O1xuICAgIHZhciBwYXJ0cyA9IGNsZWFuU3RyLnNwbGl0KG9wdGlvbnMuZGVsaW1pdGVyLCBsaW1pdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG5cbiAgICAgICAgdmFyIGJyYWNrZXRFcXVhbHNQb3MgPSBwYXJ0LmluZGV4T2YoJ109Jyk7XG4gICAgICAgIHZhciBwb3MgPSBicmFja2V0RXF1YWxzUG9zID09PSAtMSA/IHBhcnQuaW5kZXhPZignPScpIDogYnJhY2tldEVxdWFsc1BvcyArIDE7XG5cbiAgICAgICAgdmFyIGtleSwgdmFsO1xuICAgICAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQsIGRlZmF1bHRzLmRlY29kZXIpO1xuICAgICAgICAgICAgdmFsID0gb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPyBudWxsIDogJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydC5zbGljZSgwLCBwb3MpLCBkZWZhdWx0cy5kZWNvZGVyKTtcbiAgICAgICAgICAgIHZhbCA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LnNsaWNlKHBvcyArIDEpLCBkZWZhdWx0cy5kZWNvZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IFtdLmNvbmNhdChvYmpba2V5XSkuY29uY2F0KHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgcGFyc2VPYmplY3QgPSBmdW5jdGlvbiAoY2hhaW4sIHZhbCwgb3B0aW9ucykge1xuICAgIHZhciBsZWFmID0gdmFsO1xuXG4gICAgZm9yICh2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBvYmo7XG4gICAgICAgIHZhciByb290ID0gY2hhaW5baV07XG5cbiAgICAgICAgaWYgKHJvb3QgPT09ICdbXScpIHtcbiAgICAgICAgICAgIG9iaiA9IFtdO1xuICAgICAgICAgICAgb2JqID0gb2JqLmNvbmNhdChsZWFmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iaiA9IG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgICAgICAgdmFyIGNsZWFuUm9vdCA9IHJvb3QuY2hhckF0KDApID09PSAnWycgJiYgcm9vdC5jaGFyQXQocm9vdC5sZW5ndGggLSAxKSA9PT0gJ10nID8gcm9vdC5zbGljZSgxLCAtMSkgOiByb290O1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoY2xlYW5Sb290LCAxMCk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIWlzTmFOKGluZGV4KVxuICAgICAgICAgICAgICAgICYmIHJvb3QgIT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIFN0cmluZyhpbmRleCkgPT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIGluZGV4ID49IDBcbiAgICAgICAgICAgICAgICAmJiAob3B0aW9ucy5wYXJzZUFycmF5cyAmJiBpbmRleCA8PSBvcHRpb25zLmFycmF5TGltaXQpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvYmogPSBbXTtcbiAgICAgICAgICAgICAgICBvYmpbaW5kZXhdID0gbGVhZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqW2NsZWFuUm9vdF0gPSBsZWFmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGVhZiA9IG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZjtcbn07XG5cbnZhciBwYXJzZUtleXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nS2V5cyhnaXZlbktleSwgdmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKCFnaXZlbktleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIGRvdCBub3RhdGlvbiB0byBicmFja2V0IG5vdGF0aW9uXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuYWxsb3dEb3RzID8gZ2l2ZW5LZXkucmVwbGFjZSgvXFwuKFteLltdKykvZywgJ1skMV0nKSA6IGdpdmVuS2V5O1xuXG4gICAgLy8gVGhlIHJlZ2V4IGNodW5rc1xuXG4gICAgdmFyIGJyYWNrZXRzID0gLyhcXFtbXltcXF1dKl0pLztcbiAgICB2YXIgY2hpbGQgPSAvKFxcW1teW1xcXV0qXSkvZztcblxuICAgIC8vIEdldCB0aGUgcGFyZW50XG5cbiAgICB2YXIgc2VnbWVudCA9IGJyYWNrZXRzLmV4ZWMoa2V5KTtcbiAgICB2YXIgcGFyZW50ID0gc2VnbWVudCA/IGtleS5zbGljZSgwLCBzZWdtZW50LmluZGV4KSA6IGtleTtcblxuICAgIC8vIFN0YXNoIHRoZSBwYXJlbnQgaWYgaXQgZXhpc3RzXG5cbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlbid0IHVzaW5nIHBsYWluIG9iamVjdHMsIG9wdGlvbmFsbHkgcHJlZml4IGtleXNcbiAgICAgICAgLy8gdGhhdCB3b3VsZCBvdmVyd3JpdGUgb2JqZWN0IHByb3RvdHlwZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgcGFyZW50KSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMucHVzaChwYXJlbnQpO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlICgoc2VnbWVudCA9IGNoaWxkLmV4ZWMoa2V5KSkgIT09IG51bGwgJiYgaSA8IG9wdGlvbnMuZGVwdGgpIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNlZ21lbnRbMV0uc2xpY2UoMSwgLTEpKSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlbWFpbmRlciwganVzdCBhZGQgd2hhdGV2ZXIgaXMgbGVmdFxuXG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAga2V5cy5wdXNoKCdbJyArIGtleS5zbGljZShzZWdtZW50LmluZGV4KSArICddJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlT2JqZWN0KGtleXMsIHZhbCwgb3B0aW9ucyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIG9wdHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgPyB1dGlscy5hc3NpZ24oe30sIG9wdHMpIDoge307XG5cbiAgICBpZiAob3B0aW9ucy5kZWNvZGVyICE9PSBudWxsICYmIG9wdGlvbnMuZGVjb2RlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmRlY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRGVjb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBvcHRpb25zLmlnbm9yZVF1ZXJ5UHJlZml4ID0gb3B0aW9ucy5pZ25vcmVRdWVyeVByZWZpeCA9PT0gdHJ1ZTtcbiAgICBvcHRpb25zLmRlbGltaXRlciA9IHR5cGVvZiBvcHRpb25zLmRlbGltaXRlciA9PT0gJ3N0cmluZycgfHwgdXRpbHMuaXNSZWdFeHAob3B0aW9ucy5kZWxpbWl0ZXIpID8gb3B0aW9ucy5kZWxpbWl0ZXIgOiBkZWZhdWx0cy5kZWxpbWl0ZXI7XG4gICAgb3B0aW9ucy5kZXB0aCA9IHR5cGVvZiBvcHRpb25zLmRlcHRoID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuZGVwdGggOiBkZWZhdWx0cy5kZXB0aDtcbiAgICBvcHRpb25zLmFycmF5TGltaXQgPSB0eXBlb2Ygb3B0aW9ucy5hcnJheUxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuYXJyYXlMaW1pdCA6IGRlZmF1bHRzLmFycmF5TGltaXQ7XG4gICAgb3B0aW9ucy5wYXJzZUFycmF5cyA9IG9wdGlvbnMucGFyc2VBcnJheXMgIT09IGZhbHNlO1xuICAgIG9wdGlvbnMuZGVjb2RlciA9IHR5cGVvZiBvcHRpb25zLmRlY29kZXIgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmRlY29kZXIgOiBkZWZhdWx0cy5kZWNvZGVyO1xuICAgIG9wdGlvbnMuYWxsb3dEb3RzID0gdHlwZW9mIG9wdGlvbnMuYWxsb3dEb3RzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmFsbG93RG90cyA6IGRlZmF1bHRzLmFsbG93RG90cztcbiAgICBvcHRpb25zLnBsYWluT2JqZWN0cyA9IHR5cGVvZiBvcHRpb25zLnBsYWluT2JqZWN0cyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5wbGFpbk9iamVjdHMgOiBkZWZhdWx0cy5wbGFpbk9iamVjdHM7XG4gICAgb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMgPSB0eXBlb2Ygb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzIDogZGVmYXVsdHMuYWxsb3dQcm90b3R5cGVzO1xuICAgIG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPSB0eXBlb2Ygb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRpb25zLnBhcmFtZXRlckxpbWl0IDogZGVmYXVsdHMucGFyYW1ldGVyTGltaXQ7XG4gICAgb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPSB0eXBlb2Ygb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nO1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHwgc3RyID09PSBudWxsIHx8IHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcE9iaiA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gcGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IHBhcnNlS2V5cyhrZXksIHRlbXBPYmpba2V5XSwgb3B0aW9ucyk7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1lcmdlKG9iaiwgbmV3T2JqLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuY29tcGFjdChvYmopO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpXG52YXIgcXMgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpXG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCdoYXItdmFsaWRhdG9yJylcbnZhciBleHRlbmQgPSByZXF1aXJlKCdleHRlbmQnKVxuXG5mdW5jdGlvbiBIYXIgKHJlcXVlc3QpIHtcbiAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdFxufVxuXG5IYXIucHJvdG90eXBlLnJlZHVjZXIgPSBmdW5jdGlvbiAob2JqLCBwYWlyKSB7XG4gIC8vIG5ldyBwcm9wZXJ0eSA/XG4gIGlmIChvYmpbcGFpci5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgb2JqW3BhaXIubmFtZV0gPSBwYWlyLnZhbHVlXG4gICAgcmV0dXJuIG9ialxuICB9XG5cbiAgLy8gZXhpc3Rpbmc/IGNvbnZlcnQgdG8gYXJyYXlcbiAgdmFyIGFyciA9IFtcbiAgICBvYmpbcGFpci5uYW1lXSxcbiAgICBwYWlyLnZhbHVlXG4gIF1cblxuICBvYmpbcGFpci5uYW1lXSA9IGFyclxuXG4gIHJldHVybiBvYmpcbn1cblxuSGFyLnByb3RvdHlwZS5wcmVwID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgLy8gY29uc3RydWN0IHV0aWxpdHkgcHJvcGVydGllc1xuICBkYXRhLnF1ZXJ5T2JqID0ge31cbiAgZGF0YS5oZWFkZXJzT2JqID0ge31cbiAgZGF0YS5wb3N0RGF0YS5qc29uT2JqID0gZmFsc2VcbiAgZGF0YS5wb3N0RGF0YS5wYXJhbXNPYmogPSBmYWxzZVxuXG4gIC8vIGNvbnN0cnVjdCBxdWVyeSBvYmplY3RzXG4gIGlmIChkYXRhLnF1ZXJ5U3RyaW5nICYmIGRhdGEucXVlcnlTdHJpbmcubGVuZ3RoKSB7XG4gICAgZGF0YS5xdWVyeU9iaiA9IGRhdGEucXVlcnlTdHJpbmcucmVkdWNlKHRoaXMucmVkdWNlciwge30pXG4gIH1cblxuICAvLyBjb25zdHJ1Y3QgaGVhZGVycyBvYmplY3RzXG4gIGlmIChkYXRhLmhlYWRlcnMgJiYgZGF0YS5oZWFkZXJzLmxlbmd0aCkge1xuICAgIC8vIGxvd2VDYXNlIGhlYWRlciBrZXlzXG4gICAgZGF0YS5oZWFkZXJzT2JqID0gZGF0YS5oZWFkZXJzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChoZWFkZXJzLCBoZWFkZXIpIHtcbiAgICAgIGhlYWRlcnNbaGVhZGVyLm5hbWVdID0gaGVhZGVyLnZhbHVlXG4gICAgICByZXR1cm4gaGVhZGVyc1xuICAgIH0sIHt9KVxuICB9XG5cbiAgLy8gY29uc3RydWN0IENvb2tpZSBoZWFkZXJcbiAgaWYgKGRhdGEuY29va2llcyAmJiBkYXRhLmNvb2tpZXMubGVuZ3RoKSB7XG4gICAgdmFyIGNvb2tpZXMgPSBkYXRhLmNvb2tpZXMubWFwKGZ1bmN0aW9uIChjb29raWUpIHtcbiAgICAgIHJldHVybiBjb29raWUubmFtZSArICc9JyArIGNvb2tpZS52YWx1ZVxuICAgIH0pXG5cbiAgICBpZiAoY29va2llcy5sZW5ndGgpIHtcbiAgICAgIGRhdGEuaGVhZGVyc09iai5jb29raWUgPSBjb29raWVzLmpvaW4oJzsgJylcbiAgICB9XG4gIH1cblxuICAvLyBwcmVwIGJvZHlcbiAgZnVuY3Rpb24gc29tZSAoYXJyKSB7XG4gICAgcmV0dXJuIGFyci5zb21lKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gZGF0YS5wb3N0RGF0YS5taW1lVHlwZS5pbmRleE9mKHR5cGUpID09PSAwXG4gICAgfSlcbiAgfVxuXG4gIGlmIChzb21lKFtcbiAgICAnbXVsdGlwYXJ0L21peGVkJyxcbiAgICAnbXVsdGlwYXJ0L3JlbGF0ZWQnLFxuICAgICdtdWx0aXBhcnQvZm9ybS1kYXRhJyxcbiAgICAnbXVsdGlwYXJ0L2FsdGVybmF0aXZlJ10pKSB7XG4gICAgLy8gcmVzZXQgdmFsdWVzXG4gICAgZGF0YS5wb3N0RGF0YS5taW1lVHlwZSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICB9IGVsc2UgaWYgKHNvbWUoW1xuICAgICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXSkpIHtcbiAgICBpZiAoIWRhdGEucG9zdERhdGEucGFyYW1zKSB7XG4gICAgICBkYXRhLnBvc3REYXRhLnRleHQgPSAnJ1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLnBvc3REYXRhLnBhcmFtc09iaiA9IGRhdGEucG9zdERhdGEucGFyYW1zLnJlZHVjZSh0aGlzLnJlZHVjZXIsIHt9KVxuXG4gICAgICAvLyBhbHdheXMgb3ZlcndyaXRlXG4gICAgICBkYXRhLnBvc3REYXRhLnRleHQgPSBxcy5zdHJpbmdpZnkoZGF0YS5wb3N0RGF0YS5wYXJhbXNPYmopXG4gICAgfVxuICB9IGVsc2UgaWYgKHNvbWUoW1xuICAgICd0ZXh0L2pzb24nLFxuICAgICd0ZXh0L3gtanNvbicsXG4gICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICdhcHBsaWNhdGlvbi94LWpzb24nXSkpIHtcbiAgICBkYXRhLnBvc3REYXRhLm1pbWVUeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nXG5cbiAgICBpZiAoZGF0YS5wb3N0RGF0YS50ZXh0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhLnBvc3REYXRhLmpzb25PYmogPSBKU09OLnBhcnNlKGRhdGEucG9zdERhdGEudGV4dClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0LmRlYnVnKGUpXG5cbiAgICAgICAgLy8gZm9yY2UgYmFjayB0byB0ZXh0L3BsYWluXG4gICAgICAgIGRhdGEucG9zdERhdGEubWltZVR5cGUgPSAndGV4dC9wbGFpbidcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YVxufVxuXG5IYXIucHJvdG90eXBlLm9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAvLyBza2lwIGlmIG5vIGhhciBwcm9wZXJ0eSBkZWZpbmVkXG4gIGlmICghb3B0aW9ucy5oYXIpIHtcbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgdmFyIGhhciA9IHt9XG4gIGV4dGVuZChoYXIsIG9wdGlvbnMuaGFyKVxuXG4gIC8vIG9ubHkgcHJvY2VzcyB0aGUgZmlyc3QgZW50cnlcbiAgaWYgKGhhci5sb2cgJiYgaGFyLmxvZy5lbnRyaWVzKSB7XG4gICAgaGFyID0gaGFyLmxvZy5lbnRyaWVzWzBdXG4gIH1cblxuICAvLyBhZGQgb3B0aW9uYWwgcHJvcGVydGllcyB0byBtYWtlIHZhbGlkYXRpb24gc3VjY2Vzc2Z1bFxuICBoYXIudXJsID0gaGFyLnVybCB8fCBvcHRpb25zLnVybCB8fCBvcHRpb25zLnVyaSB8fCBvcHRpb25zLmJhc2VVcmwgfHwgJy8nXG4gIGhhci5odHRwVmVyc2lvbiA9IGhhci5odHRwVmVyc2lvbiB8fCAnSFRUUC8xLjEnXG4gIGhhci5xdWVyeVN0cmluZyA9IGhhci5xdWVyeVN0cmluZyB8fCBbXVxuICBoYXIuaGVhZGVycyA9IGhhci5oZWFkZXJzIHx8IFtdXG4gIGhhci5jb29raWVzID0gaGFyLmNvb2tpZXMgfHwgW11cbiAgaGFyLnBvc3REYXRhID0gaGFyLnBvc3REYXRhIHx8IHt9XG4gIGhhci5wb3N0RGF0YS5taW1lVHlwZSA9IGhhci5wb3N0RGF0YS5taW1lVHlwZSB8fCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ1xuXG4gIGhhci5ib2R5U2l6ZSA9IDBcbiAgaGFyLmhlYWRlcnNTaXplID0gMFxuICBoYXIucG9zdERhdGEuc2l6ZSA9IDBcblxuICBpZiAoIXZhbGlkYXRlLnJlcXVlc3QoaGFyKSkge1xuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICAvLyBjbGVhbiB1cCBhbmQgZ2V0IHNvbWUgdXRpbGl0eSBwcm9wZXJ0aWVzXG4gIHZhciByZXEgPSB0aGlzLnByZXAoaGFyKVxuXG4gIC8vIGNvbnN0cnVjdCBuZXcgb3B0aW9uc1xuICBpZiAocmVxLnVybCkge1xuICAgIG9wdGlvbnMudXJsID0gcmVxLnVybFxuICB9XG5cbiAgaWYgKHJlcS5tZXRob2QpIHtcbiAgICBvcHRpb25zLm1ldGhvZCA9IHJlcS5tZXRob2RcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhyZXEucXVlcnlPYmopLmxlbmd0aCkge1xuICAgIG9wdGlvbnMucXMgPSByZXEucXVlcnlPYmpcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhyZXEuaGVhZGVyc09iaikubGVuZ3RoKSB7XG4gICAgb3B0aW9ucy5oZWFkZXJzID0gcmVxLmhlYWRlcnNPYmpcbiAgfVxuXG4gIGZ1bmN0aW9uIHRlc3QgKHR5cGUpIHtcbiAgICByZXR1cm4gcmVxLnBvc3REYXRhLm1pbWVUeXBlLmluZGV4T2YodHlwZSkgPT09IDBcbiAgfVxuICBpZiAodGVzdCgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykpIHtcbiAgICBvcHRpb25zLmZvcm0gPSByZXEucG9zdERhdGEucGFyYW1zT2JqXG4gIH0gZWxzZSBpZiAodGVzdCgnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgaWYgKHJlcS5wb3N0RGF0YS5qc29uT2JqKSB7XG4gICAgICBvcHRpb25zLmJvZHkgPSByZXEucG9zdERhdGEuanNvbk9ialxuICAgICAgb3B0aW9ucy5qc29uID0gdHJ1ZVxuICAgIH1cbiAgfSBlbHNlIGlmICh0ZXN0KCdtdWx0aXBhcnQvZm9ybS1kYXRhJykpIHtcbiAgICBvcHRpb25zLmZvcm1EYXRhID0ge31cblxuICAgIHJlcS5wb3N0RGF0YS5wYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBhdHRhY2htZW50ID0ge31cblxuICAgICAgaWYgKCFwYXJhbS5maWxlTmFtZSAmJiAhcGFyYW0uZmlsZU5hbWUgJiYgIXBhcmFtLmNvbnRlbnRUeXBlKSB7XG4gICAgICAgIG9wdGlvbnMuZm9ybURhdGFbcGFyYW0ubmFtZV0gPSBwYXJhbS52YWx1ZVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gYXR0ZW1wdCB0byByZWFkIGZyb20gZGlzayFcbiAgICAgIGlmIChwYXJhbS5maWxlTmFtZSAmJiAhcGFyYW0udmFsdWUpIHtcbiAgICAgICAgYXR0YWNobWVudC52YWx1ZSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGFyYW0uZmlsZU5hbWUpXG4gICAgICB9IGVsc2UgaWYgKHBhcmFtLnZhbHVlKSB7XG4gICAgICAgIGF0dGFjaG1lbnQudmFsdWUgPSBwYXJhbS52YWx1ZVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW0uZmlsZU5hbWUpIHtcbiAgICAgICAgYXR0YWNobWVudC5vcHRpb25zID0ge1xuICAgICAgICAgIGZpbGVuYW1lOiBwYXJhbS5maWxlTmFtZSxcbiAgICAgICAgICBjb250ZW50VHlwZTogcGFyYW0uY29udGVudFR5cGUgPyBwYXJhbS5jb250ZW50VHlwZSA6IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvcHRpb25zLmZvcm1EYXRhW3BhcmFtLm5hbWVdID0gYXR0YWNobWVudFxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgaWYgKHJlcS5wb3N0RGF0YS50ZXh0KSB7XG4gICAgICBvcHRpb25zLmJvZHkgPSByZXEucG9zdERhdGEudGV4dFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvcHRpb25zXG59XG5cbmV4cG9ydHMuSGFyID0gSGFyXG4iLCJ2YXIgQWp2ID0gcmVxdWlyZSgnYWp2JylcbnZhciBIQVJFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3InKVxudmFyIHNjaGVtYXMgPSByZXF1aXJlKCdoYXItc2NoZW1hJylcblxudmFyIGFqdlxuXG5mdW5jdGlvbiBjcmVhdGVBanZJbnN0YW5jZSAoKSB7XG4gIHZhciBhanYgPSBuZXcgQWp2KHtcbiAgICBhbGxFcnJvcnM6IHRydWVcbiAgfSlcbiAgYWp2LmFkZE1ldGFTY2hlbWEocmVxdWlyZSgnYWp2L2xpYi9yZWZzL2pzb24tc2NoZW1hLWRyYWZ0LTA2Lmpzb24nKSlcbiAgYWp2LmFkZFNjaGVtYShzY2hlbWFzKVxuXG4gIHJldHVybiBhanZcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGUgKG5hbWUsIGRhdGEpIHtcbiAgZGF0YSA9IGRhdGEgfHwge31cblxuICAvLyB2YWxpZGF0b3IgY29uZmlnXG4gIGFqdiA9IGFqdiB8fCBjcmVhdGVBanZJbnN0YW5jZSgpXG5cbiAgdmFyIHZhbGlkYXRlID0gYWp2LmdldFNjaGVtYShuYW1lICsgJy5qc29uJylcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciB2YWxpZCA9IHZhbGlkYXRlKGRhdGEpXG5cbiAgICAhdmFsaWQgPyByZWplY3QobmV3IEhBUkVycm9yKHZhbGlkYXRlLmVycm9ycykpIDogcmVzb2x2ZShkYXRhKVxuICB9KVxufVxuXG5leHBvcnRzLmFmdGVyUmVxdWVzdCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiB2YWxpZGF0ZSgnYWZ0ZXJSZXF1ZXN0JywgZGF0YSlcbn1cblxuZXhwb3J0cy5iZWZvcmVSZXF1ZXN0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIHZhbGlkYXRlKCdiZWZvcmVSZXF1ZXN0JywgZGF0YSlcbn1cblxuZXhwb3J0cy5icm93c2VyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIHZhbGlkYXRlKCdicm93c2VyJywgZGF0YSlcbn1cblxuZXhwb3J0cy5jYWNoZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiB2YWxpZGF0ZSgnY2FjaGUnLCBkYXRhKVxufVxuXG5leHBvcnRzLmNvbnRlbnQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gdmFsaWRhdGUoJ2NvbnRlbnQnLCBkYXRhKVxufVxuXG5leHBvcnRzLmNvb2tpZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiB2YWxpZGF0ZSgnY29va2llJywgZGF0YSlcbn1cblxuZXhwb3J0cy5jcmVhdG9yID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIHZhbGlkYXRlKCdjcmVhdG9yJywgZGF0YSlcbn1cblxuZXhwb3J0cy5lbnRyeSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiB2YWxpZGF0ZSgnZW50cnknLCBkYXRhKVxufVxuXG5leHBvcnRzLmhhciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiB2YWxpZGF0ZSgnaGFyJywgZGF0YSlcbn1cblxuZXhwb3J0cy5oZWFkZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gdmFsaWRhdGUoJ2hlYWRlcicsIGRhdGEpXG59XG5cbmV4cG9ydHMubG9nID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIHZhbGlkYXRlKCdsb2cnLCBkYXRhKVxufVxuXG5leHBvcnRzLnBhZ2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gdmFsaWRhdGUoJ3BhZ2UnLCBkYXRhKVxufVxuXG5leHBvcnRzLnBhZ2VUaW1pbmdzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIHZhbGlkYXRlKCdwYWdlVGltaW5ncycsIGRhdGEpXG59XG5cbmV4cG9ydHMucG9zdERhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gdmFsaWRhdGUoJ3Bvc3REYXRhJywgZGF0YSlcbn1cblxuZXhwb3J0cy5xdWVyeSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiB2YWxpZGF0ZSgncXVlcnknLCBkYXRhKVxufVxuXG5leHBvcnRzLnJlcXVlc3QgPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gdmFsaWRhdGUoJ3JlcXVlc3QnLCBkYXRhKVxufVxuXG5leHBvcnRzLnJlc3BvbnNlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIHZhbGlkYXRlKCdyZXNwb25zZScsIGRhdGEpXG59XG5cbmV4cG9ydHMudGltaW5ncyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiB2YWxpZGF0ZSgndGltaW5ncycsIGRhdGEpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb21waWxlU2NoZW1hID0gcmVxdWlyZSgnLi9jb21waWxlJylcbiAgLCByZXNvbHZlID0gcmVxdWlyZSgnLi9jb21waWxlL3Jlc29sdmUnKVxuICAsIENhY2hlID0gcmVxdWlyZSgnLi9jYWNoZScpXG4gICwgU2NoZW1hT2JqZWN0ID0gcmVxdWlyZSgnLi9jb21waWxlL3NjaGVtYV9vYmonKVxuICAsIHN0YWJsZVN0cmluZ2lmeSA9IHJlcXVpcmUoJ2Zhc3QtanNvbi1zdGFibGUtc3RyaW5naWZ5JylcbiAgLCBmb3JtYXRzID0gcmVxdWlyZSgnLi9jb21waWxlL2Zvcm1hdHMnKVxuICAsIHJ1bGVzID0gcmVxdWlyZSgnLi9jb21waWxlL3J1bGVzJylcbiAgLCAkZGF0YU1ldGFTY2hlbWEgPSByZXF1aXJlKCcuL2RhdGEnKVxuICAsIHV0aWwgPSByZXF1aXJlKCcuL2NvbXBpbGUvdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFqdjtcblxuQWp2LnByb3RvdHlwZS52YWxpZGF0ZSA9IHZhbGlkYXRlO1xuQWp2LnByb3RvdHlwZS5jb21waWxlID0gY29tcGlsZTtcbkFqdi5wcm90b3R5cGUuYWRkU2NoZW1hID0gYWRkU2NoZW1hO1xuQWp2LnByb3RvdHlwZS5hZGRNZXRhU2NoZW1hID0gYWRkTWV0YVNjaGVtYTtcbkFqdi5wcm90b3R5cGUudmFsaWRhdGVTY2hlbWEgPSB2YWxpZGF0ZVNjaGVtYTtcbkFqdi5wcm90b3R5cGUuZ2V0U2NoZW1hID0gZ2V0U2NoZW1hO1xuQWp2LnByb3RvdHlwZS5yZW1vdmVTY2hlbWEgPSByZW1vdmVTY2hlbWE7XG5BanYucHJvdG90eXBlLmFkZEZvcm1hdCA9IGFkZEZvcm1hdDtcbkFqdi5wcm90b3R5cGUuZXJyb3JzVGV4dCA9IGVycm9yc1RleHQ7XG5cbkFqdi5wcm90b3R5cGUuX2FkZFNjaGVtYSA9IF9hZGRTY2hlbWE7XG5BanYucHJvdG90eXBlLl9jb21waWxlID0gX2NvbXBpbGU7XG5cbkFqdi5wcm90b3R5cGUuY29tcGlsZUFzeW5jID0gcmVxdWlyZSgnLi9jb21waWxlL2FzeW5jJyk7XG52YXIgY3VzdG9tS2V5d29yZCA9IHJlcXVpcmUoJy4va2V5d29yZCcpO1xuQWp2LnByb3RvdHlwZS5hZGRLZXl3b3JkID0gY3VzdG9tS2V5d29yZC5hZGQ7XG5BanYucHJvdG90eXBlLmdldEtleXdvcmQgPSBjdXN0b21LZXl3b3JkLmdldDtcbkFqdi5wcm90b3R5cGUucmVtb3ZlS2V5d29yZCA9IGN1c3RvbUtleXdvcmQucmVtb3ZlO1xuXG52YXIgZXJyb3JDbGFzc2VzID0gcmVxdWlyZSgnLi9jb21waWxlL2Vycm9yX2NsYXNzZXMnKTtcbkFqdi5WYWxpZGF0aW9uRXJyb3IgPSBlcnJvckNsYXNzZXMuVmFsaWRhdGlvbjtcbkFqdi5NaXNzaW5nUmVmRXJyb3IgPSBlcnJvckNsYXNzZXMuTWlzc2luZ1JlZjtcbkFqdi4kZGF0YU1ldGFTY2hlbWEgPSAkZGF0YU1ldGFTY2hlbWE7XG5cbnZhciBNRVRBX1NDSEVNQV9JRCA9ICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSc7XG5cbnZhciBNRVRBX0lHTk9SRV9PUFRJT05TID0gWyAncmVtb3ZlQWRkaXRpb25hbCcsICd1c2VEZWZhdWx0cycsICdjb2VyY2VUeXBlcycgXTtcbnZhciBNRVRBX1NVUFBPUlRfREFUQSA9IFsnL3Byb3BlcnRpZXMnXTtcblxuLyoqXG4gKiBDcmVhdGVzIHZhbGlkYXRvciBpbnN0YW5jZS5cbiAqIFVzYWdlOiBgQWp2KG9wdHMpYFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgb3B0aW9uYWwgb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSBhanYgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQWp2KG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFqdikpIHJldHVybiBuZXcgQWp2KG9wdHMpO1xuICBvcHRzID0gdGhpcy5fb3B0cyA9IHV0aWwuY29weShvcHRzKSB8fCB7fTtcbiAgc2V0TG9nZ2VyKHRoaXMpO1xuICB0aGlzLl9zY2hlbWFzID0ge307XG4gIHRoaXMuX3JlZnMgPSB7fTtcbiAgdGhpcy5fZnJhZ21lbnRzID0ge307XG4gIHRoaXMuX2Zvcm1hdHMgPSBmb3JtYXRzKG9wdHMuZm9ybWF0KTtcblxuICB0aGlzLl9jYWNoZSA9IG9wdHMuY2FjaGUgfHwgbmV3IENhY2hlO1xuICB0aGlzLl9sb2FkaW5nU2NoZW1hcyA9IHt9O1xuICB0aGlzLl9jb21waWxhdGlvbnMgPSBbXTtcbiAgdGhpcy5SVUxFUyA9IHJ1bGVzKCk7XG4gIHRoaXMuX2dldElkID0gY2hvb3NlR2V0SWQob3B0cyk7XG5cbiAgb3B0cy5sb29wUmVxdWlyZWQgPSBvcHRzLmxvb3BSZXF1aXJlZCB8fCBJbmZpbml0eTtcbiAgaWYgKG9wdHMuZXJyb3JEYXRhUGF0aCA9PSAncHJvcGVydHknKSBvcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkgPSB0cnVlO1xuICBpZiAob3B0cy5zZXJpYWxpemUgPT09IHVuZGVmaW5lZCkgb3B0cy5zZXJpYWxpemUgPSBzdGFibGVTdHJpbmdpZnk7XG4gIHRoaXMuX21ldGFPcHRzID0gZ2V0TWV0YVNjaGVtYU9wdGlvbnModGhpcyk7XG5cbiAgaWYgKG9wdHMuZm9ybWF0cykgYWRkSW5pdGlhbEZvcm1hdHModGhpcyk7XG4gIGFkZERlZmF1bHRNZXRhU2NoZW1hKHRoaXMpO1xuICBpZiAodHlwZW9mIG9wdHMubWV0YSA9PSAnb2JqZWN0JykgdGhpcy5hZGRNZXRhU2NoZW1hKG9wdHMubWV0YSk7XG4gIGlmIChvcHRzLm51bGxhYmxlKSB0aGlzLmFkZEtleXdvcmQoJ251bGxhYmxlJywge21ldGFTY2hlbWE6IHtjb25zdDogdHJ1ZX19KTtcbiAgYWRkSW5pdGlhbFNjaGVtYXModGhpcyk7XG59XG5cblxuXG4vKipcbiAqIFZhbGlkYXRlIGRhdGEgdXNpbmcgc2NoZW1hXG4gKiBTY2hlbWEgd2lsbCBiZSBjb21waWxlZCBhbmQgY2FjaGVkICh1c2luZyBzZXJpYWxpemVkIEpTT04gYXMga2V5LiBbZmFzdC1qc29uLXN0YWJsZS1zdHJpbmdpZnldKGh0dHBzOi8vZ2l0aHViLmNvbS9lcG9iZXJlemtpbi9mYXN0LWpzb24tc3RhYmxlLXN0cmluZ2lmeSkgaXMgdXNlZCB0byBzZXJpYWxpemUuXG4gKiBAdGhpcyAgIEFqdlxuICogQHBhcmFtICB7U3RyaW5nfE9iamVjdH0gc2NoZW1hS2V5UmVmIGtleSwgcmVmIG9yIHNjaGVtYSBvYmplY3RcbiAqIEBwYXJhbSAge0FueX0gZGF0YSB0byBiZSB2YWxpZGF0ZWRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHZhbGlkYXRpb24gcmVzdWx0LiBFcnJvcnMgZnJvbSB0aGUgbGFzdCB2YWxpZGF0aW9uIHdpbGwgYmUgYXZhaWxhYmxlIGluIGBhanYuZXJyb3JzYCAoYW5kIGFsc28gaW4gY29tcGlsZWQgc2NoZW1hOiBgc2NoZW1hLmVycm9yc2ApLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZShzY2hlbWFLZXlSZWYsIGRhdGEpIHtcbiAgdmFyIHY7XG4gIGlmICh0eXBlb2Ygc2NoZW1hS2V5UmVmID09ICdzdHJpbmcnKSB7XG4gICAgdiA9IHRoaXMuZ2V0U2NoZW1hKHNjaGVtYUtleVJlZik7XG4gICAgaWYgKCF2KSB0aHJvdyBuZXcgRXJyb3IoJ25vIHNjaGVtYSB3aXRoIGtleSBvciByZWYgXCInICsgc2NoZW1hS2V5UmVmICsgJ1wiJyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNjaGVtYU9iaiA9IHRoaXMuX2FkZFNjaGVtYShzY2hlbWFLZXlSZWYpO1xuICAgIHYgPSBzY2hlbWFPYmoudmFsaWRhdGUgfHwgdGhpcy5fY29tcGlsZShzY2hlbWFPYmopO1xuICB9XG5cbiAgdmFyIHZhbGlkID0gdihkYXRhKTtcbiAgaWYgKHYuJGFzeW5jICE9PSB0cnVlKSB0aGlzLmVycm9ycyA9IHYuZXJyb3JzO1xuICByZXR1cm4gdmFsaWQ7XG59XG5cblxuLyoqXG4gKiBDcmVhdGUgdmFsaWRhdGluZyBmdW5jdGlvbiBmb3IgcGFzc2VkIHNjaGVtYS5cbiAqIEB0aGlzICAgQWp2XG4gKiBAcGFyYW0gIHtPYmplY3R9IHNjaGVtYSBzY2hlbWEgb2JqZWN0XG4gKiBAcGFyYW0gIHtCb29sZWFufSBfbWV0YSB0cnVlIGlmIHNjaGVtYSBpcyBhIG1ldGEtc2NoZW1hLiBVc2VkIGludGVybmFsbHkgdG8gY29tcGlsZSBtZXRhIHNjaGVtYXMgb2YgY3VzdG9tIGtleXdvcmRzLlxuICogQHJldHVybiB7RnVuY3Rpb259IHZhbGlkYXRpbmcgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gY29tcGlsZShzY2hlbWEsIF9tZXRhKSB7XG4gIHZhciBzY2hlbWFPYmogPSB0aGlzLl9hZGRTY2hlbWEoc2NoZW1hLCB1bmRlZmluZWQsIF9tZXRhKTtcbiAgcmV0dXJuIHNjaGVtYU9iai52YWxpZGF0ZSB8fCB0aGlzLl9jb21waWxlKHNjaGVtYU9iaik7XG59XG5cblxuLyoqXG4gKiBBZGRzIHNjaGVtYSB0byB0aGUgaW5zdGFuY2UuXG4gKiBAdGhpcyAgIEFqdlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IHNjaGVtYSBzY2hlbWEgb3IgYXJyYXkgb2Ygc2NoZW1hcy4gSWYgYXJyYXkgaXMgcGFzc2VkLCBga2V5YCBhbmQgb3RoZXIgcGFyYW1ldGVycyB3aWxsIGJlIGlnbm9yZWQuXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IE9wdGlvbmFsIHNjaGVtYSBrZXkuIENhbiBiZSBwYXNzZWQgdG8gYHZhbGlkYXRlYCBtZXRob2QgaW5zdGVhZCBvZiBzY2hlbWEgb2JqZWN0IG9yIGlkL3JlZi4gT25lIHNjaGVtYSBwZXIgaW5zdGFuY2UgY2FuIGhhdmUgZW1wdHkgYGlkYCBhbmQgYGtleWAuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IF9za2lwVmFsaWRhdGlvbiB0cnVlIHRvIHNraXAgc2NoZW1hIHZhbGlkYXRpb24uIFVzZWQgaW50ZXJuYWxseSwgb3B0aW9uIHZhbGlkYXRlU2NoZW1hIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IF9tZXRhIHRydWUgaWYgc2NoZW1hIGlzIGEgbWV0YS1zY2hlbWEuIFVzZWQgaW50ZXJuYWxseSwgYWRkTWV0YVNjaGVtYSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICogQHJldHVybiB7QWp2fSB0aGlzIGZvciBtZXRob2QgY2hhaW5pbmdcbiAqL1xuZnVuY3Rpb24gYWRkU2NoZW1hKHNjaGVtYSwga2V5LCBfc2tpcFZhbGlkYXRpb24sIF9tZXRhKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpe1xuICAgIGZvciAodmFyIGk9MDsgaTxzY2hlbWEubGVuZ3RoOyBpKyspIHRoaXMuYWRkU2NoZW1hKHNjaGVtYVtpXSwgdW5kZWZpbmVkLCBfc2tpcFZhbGlkYXRpb24sIF9tZXRhKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB2YXIgaWQgPSB0aGlzLl9nZXRJZChzY2hlbWEpO1xuICBpZiAoaWQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgaWQgIT0gJ3N0cmluZycpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdzY2hlbWEgaWQgbXVzdCBiZSBzdHJpbmcnKTtcbiAga2V5ID0gcmVzb2x2ZS5ub3JtYWxpemVJZChrZXkgfHwgaWQpO1xuICBjaGVja1VuaXF1ZSh0aGlzLCBrZXkpO1xuICB0aGlzLl9zY2hlbWFzW2tleV0gPSB0aGlzLl9hZGRTY2hlbWEoc2NoZW1hLCBfc2tpcFZhbGlkYXRpb24sIF9tZXRhLCB0cnVlKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cblxuLyoqXG4gKiBBZGQgc2NoZW1hIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHZhbGlkYXRlIG90aGVyIHNjaGVtYXNcbiAqIG9wdGlvbnMgaW4gTUVUQV9JR05PUkVfT1BUSU9OUyBhcmUgYWx3YXkgc2V0IHRvIGZhbHNlXG4gKiBAdGhpcyAgIEFqdlxuICogQHBhcmFtIHtPYmplY3R9IHNjaGVtYSBzY2hlbWEgb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IG9wdGlvbmFsIHNjaGVtYSBrZXlcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc2tpcFZhbGlkYXRpb24gdHJ1ZSB0byBza2lwIHNjaGVtYSB2YWxpZGF0aW9uLCBjYW4gYmUgdXNlZCB0byBvdmVycmlkZSB2YWxpZGF0ZVNjaGVtYSBvcHRpb24gZm9yIG1ldGEtc2NoZW1hXG4gKiBAcmV0dXJuIHtBanZ9IHRoaXMgZm9yIG1ldGhvZCBjaGFpbmluZ1xuICovXG5mdW5jdGlvbiBhZGRNZXRhU2NoZW1hKHNjaGVtYSwga2V5LCBza2lwVmFsaWRhdGlvbikge1xuICB0aGlzLmFkZFNjaGVtYShzY2hlbWEsIGtleSwgc2tpcFZhbGlkYXRpb24sIHRydWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxuXG4vKipcbiAqIFZhbGlkYXRlIHNjaGVtYVxuICogQHRoaXMgICBBanZcbiAqIEBwYXJhbSB7T2JqZWN0fSBzY2hlbWEgc2NoZW1hIHRvIHZhbGlkYXRlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRocm93T3JMb2dFcnJvciBwYXNzIHRydWUgdG8gdGhyb3cgKG9yIGxvZykgYW4gZXJyb3IgaWYgaW52YWxpZFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBzY2hlbWEgaXMgdmFsaWRcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVTY2hlbWEoc2NoZW1hLCB0aHJvd09yTG9nRXJyb3IpIHtcbiAgdmFyICRzY2hlbWEgPSBzY2hlbWEuJHNjaGVtYTtcbiAgaWYgKCRzY2hlbWEgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgJHNjaGVtYSAhPSAnc3RyaW5nJylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJyRzY2hlbWEgbXVzdCBiZSBhIHN0cmluZycpO1xuICAkc2NoZW1hID0gJHNjaGVtYSB8fCB0aGlzLl9vcHRzLmRlZmF1bHRNZXRhIHx8IGRlZmF1bHRNZXRhKHRoaXMpO1xuICBpZiAoISRzY2hlbWEpIHtcbiAgICB0aGlzLmxvZ2dlci53YXJuKCdtZXRhLXNjaGVtYSBub3QgYXZhaWxhYmxlJyk7XG4gICAgdGhpcy5lcnJvcnMgPSBudWxsO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciB2YWxpZCA9IHRoaXMudmFsaWRhdGUoJHNjaGVtYSwgc2NoZW1hKTtcbiAgaWYgKCF2YWxpZCAmJiB0aHJvd09yTG9nRXJyb3IpIHtcbiAgICB2YXIgbWVzc2FnZSA9ICdzY2hlbWEgaXMgaW52YWxpZDogJyArIHRoaXMuZXJyb3JzVGV4dCgpO1xuICAgIGlmICh0aGlzLl9vcHRzLnZhbGlkYXRlU2NoZW1hID09ICdsb2cnKSB0aGlzLmxvZ2dlci5lcnJvcihtZXNzYWdlKTtcbiAgICBlbHNlIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cblxuZnVuY3Rpb24gZGVmYXVsdE1ldGEoc2VsZikge1xuICB2YXIgbWV0YSA9IHNlbGYuX29wdHMubWV0YTtcbiAgc2VsZi5fb3B0cy5kZWZhdWx0TWV0YSA9IHR5cGVvZiBtZXRhID09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLl9nZXRJZChtZXRhKSB8fCBtZXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmdldFNjaGVtYShNRVRBX1NDSEVNQV9JRClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gTUVUQV9TQ0hFTUFfSURcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICByZXR1cm4gc2VsZi5fb3B0cy5kZWZhdWx0TWV0YTtcbn1cblxuXG4vKipcbiAqIEdldCBjb21waWxlZCBzY2hlbWEgZnJvbSB0aGUgaW5zdGFuY2UgYnkgYGtleWAgb3IgYHJlZmAuXG4gKiBAdGhpcyAgIEFqdlxuICogQHBhcmFtICB7U3RyaW5nfSBrZXlSZWYgYGtleWAgdGhhdCB3YXMgcGFzc2VkIHRvIGBhZGRTY2hlbWFgIG9yIGZ1bGwgc2NoZW1hIHJlZmVyZW5jZSAoYHNjaGVtYS5pZGAgb3IgcmVzb2x2ZWQgaWQpLlxuICogQHJldHVybiB7RnVuY3Rpb259IHNjaGVtYSB2YWxpZGF0aW5nIGZ1bmN0aW9uICh3aXRoIHByb3BlcnR5IGBzY2hlbWFgKS5cbiAqL1xuZnVuY3Rpb24gZ2V0U2NoZW1hKGtleVJlZikge1xuICB2YXIgc2NoZW1hT2JqID0gX2dldFNjaGVtYU9iaih0aGlzLCBrZXlSZWYpO1xuICBzd2l0Y2ggKHR5cGVvZiBzY2hlbWFPYmopIHtcbiAgICBjYXNlICdvYmplY3QnOiByZXR1cm4gc2NoZW1hT2JqLnZhbGlkYXRlIHx8IHRoaXMuX2NvbXBpbGUoc2NoZW1hT2JqKTtcbiAgICBjYXNlICdzdHJpbmcnOiByZXR1cm4gdGhpcy5nZXRTY2hlbWEoc2NoZW1hT2JqKTtcbiAgICBjYXNlICd1bmRlZmluZWQnOiByZXR1cm4gX2dldFNjaGVtYUZyYWdtZW50KHRoaXMsIGtleVJlZik7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBfZ2V0U2NoZW1hRnJhZ21lbnQoc2VsZiwgcmVmKSB7XG4gIHZhciByZXMgPSByZXNvbHZlLnNjaGVtYS5jYWxsKHNlbGYsIHsgc2NoZW1hOiB7fSB9LCByZWYpO1xuICBpZiAocmVzKSB7XG4gICAgdmFyIHNjaGVtYSA9IHJlcy5zY2hlbWFcbiAgICAgICwgcm9vdCA9IHJlcy5yb290XG4gICAgICAsIGJhc2VJZCA9IHJlcy5iYXNlSWQ7XG4gICAgdmFyIHYgPSBjb21waWxlU2NoZW1hLmNhbGwoc2VsZiwgc2NoZW1hLCByb290LCB1bmRlZmluZWQsIGJhc2VJZCk7XG4gICAgc2VsZi5fZnJhZ21lbnRzW3JlZl0gPSBuZXcgU2NoZW1hT2JqZWN0KHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgZnJhZ21lbnQ6IHRydWUsXG4gICAgICBzY2hlbWE6IHNjaGVtYSxcbiAgICAgIHJvb3Q6IHJvb3QsXG4gICAgICBiYXNlSWQ6IGJhc2VJZCxcbiAgICAgIHZhbGlkYXRlOiB2XG4gICAgfSk7XG4gICAgcmV0dXJuIHY7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBfZ2V0U2NoZW1hT2JqKHNlbGYsIGtleVJlZikge1xuICBrZXlSZWYgPSByZXNvbHZlLm5vcm1hbGl6ZUlkKGtleVJlZik7XG4gIHJldHVybiBzZWxmLl9zY2hlbWFzW2tleVJlZl0gfHwgc2VsZi5fcmVmc1trZXlSZWZdIHx8IHNlbGYuX2ZyYWdtZW50c1trZXlSZWZdO1xufVxuXG5cbi8qKlxuICogUmVtb3ZlIGNhY2hlZCBzY2hlbWEocykuXG4gKiBJZiBubyBwYXJhbWV0ZXIgaXMgcGFzc2VkIGFsbCBzY2hlbWFzIGJ1dCBtZXRhLXNjaGVtYXMgYXJlIHJlbW92ZWQuXG4gKiBJZiBSZWdFeHAgaXMgcGFzc2VkIGFsbCBzY2hlbWFzIHdpdGgga2V5L2lkIG1hdGNoaW5nIHBhdHRlcm4gYnV0IG1ldGEtc2NoZW1hcyBhcmUgcmVtb3ZlZC5cbiAqIEV2ZW4gaWYgc2NoZW1hIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgc2NoZW1hcyBpdCBzdGlsbCBjYW4gYmUgcmVtb3ZlZCBhcyBvdGhlciBzY2hlbWFzIGhhdmUgbG9jYWwgcmVmZXJlbmNlcy5cbiAqIEB0aGlzICAgQWp2XG4gKiBAcGFyYW0gIHtTdHJpbmd8T2JqZWN0fFJlZ0V4cH0gc2NoZW1hS2V5UmVmIGtleSwgcmVmLCBwYXR0ZXJuIHRvIG1hdGNoIGtleS9yZWYgb3Igc2NoZW1hIG9iamVjdFxuICogQHJldHVybiB7QWp2fSB0aGlzIGZvciBtZXRob2QgY2hhaW5pbmdcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlU2NoZW1hKHNjaGVtYUtleVJlZikge1xuICBpZiAoc2NoZW1hS2V5UmVmIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgX3JlbW92ZUFsbFNjaGVtYXModGhpcywgdGhpcy5fc2NoZW1hcywgc2NoZW1hS2V5UmVmKTtcbiAgICBfcmVtb3ZlQWxsU2NoZW1hcyh0aGlzLCB0aGlzLl9yZWZzLCBzY2hlbWFLZXlSZWYpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHN3aXRjaCAodHlwZW9mIHNjaGVtYUtleVJlZikge1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICBfcmVtb3ZlQWxsU2NoZW1hcyh0aGlzLCB0aGlzLl9zY2hlbWFzKTtcbiAgICAgIF9yZW1vdmVBbGxTY2hlbWFzKHRoaXMsIHRoaXMuX3JlZnMpO1xuICAgICAgdGhpcy5fY2FjaGUuY2xlYXIoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICB2YXIgc2NoZW1hT2JqID0gX2dldFNjaGVtYU9iaih0aGlzLCBzY2hlbWFLZXlSZWYpO1xuICAgICAgaWYgKHNjaGVtYU9iaikgdGhpcy5fY2FjaGUuZGVsKHNjaGVtYU9iai5jYWNoZUtleSk7XG4gICAgICBkZWxldGUgdGhpcy5fc2NoZW1hc1tzY2hlbWFLZXlSZWZdO1xuICAgICAgZGVsZXRlIHRoaXMuX3JlZnNbc2NoZW1hS2V5UmVmXTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB2YXIgc2VyaWFsaXplID0gdGhpcy5fb3B0cy5zZXJpYWxpemU7XG4gICAgICB2YXIgY2FjaGVLZXkgPSBzZXJpYWxpemUgPyBzZXJpYWxpemUoc2NoZW1hS2V5UmVmKSA6IHNjaGVtYUtleVJlZjtcbiAgICAgIHRoaXMuX2NhY2hlLmRlbChjYWNoZUtleSk7XG4gICAgICB2YXIgaWQgPSB0aGlzLl9nZXRJZChzY2hlbWFLZXlSZWYpO1xuICAgICAgaWYgKGlkKSB7XG4gICAgICAgIGlkID0gcmVzb2x2ZS5ub3JtYWxpemVJZChpZCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zY2hlbWFzW2lkXTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3JlZnNbaWRdO1xuICAgICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5cbmZ1bmN0aW9uIF9yZW1vdmVBbGxTY2hlbWFzKHNlbGYsIHNjaGVtYXMsIHJlZ2V4KSB7XG4gIGZvciAodmFyIGtleVJlZiBpbiBzY2hlbWFzKSB7XG4gICAgdmFyIHNjaGVtYU9iaiA9IHNjaGVtYXNba2V5UmVmXTtcbiAgICBpZiAoIXNjaGVtYU9iai5tZXRhICYmICghcmVnZXggfHwgcmVnZXgudGVzdChrZXlSZWYpKSkge1xuICAgICAgc2VsZi5fY2FjaGUuZGVsKHNjaGVtYU9iai5jYWNoZUtleSk7XG4gICAgICBkZWxldGUgc2NoZW1hc1trZXlSZWZdO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qIEB0aGlzICAgQWp2ICovXG5mdW5jdGlvbiBfYWRkU2NoZW1hKHNjaGVtYSwgc2tpcFZhbGlkYXRpb24sIG1ldGEsIHNob3VsZEFkZFNjaGVtYSkge1xuICBpZiAodHlwZW9mIHNjaGVtYSAhPSAnb2JqZWN0JyAmJiB0eXBlb2Ygc2NoZW1hICE9ICdib29sZWFuJylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NjaGVtYSBzaG91bGQgYmUgb2JqZWN0IG9yIGJvb2xlYW4nKTtcbiAgdmFyIHNlcmlhbGl6ZSA9IHRoaXMuX29wdHMuc2VyaWFsaXplO1xuICB2YXIgY2FjaGVLZXkgPSBzZXJpYWxpemUgPyBzZXJpYWxpemUoc2NoZW1hKSA6IHNjaGVtYTtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX2NhY2hlLmdldChjYWNoZUtleSk7XG4gIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQ7XG5cbiAgc2hvdWxkQWRkU2NoZW1hID0gc2hvdWxkQWRkU2NoZW1hIHx8IHRoaXMuX29wdHMuYWRkVXNlZFNjaGVtYSAhPT0gZmFsc2U7XG5cbiAgdmFyIGlkID0gcmVzb2x2ZS5ub3JtYWxpemVJZCh0aGlzLl9nZXRJZChzY2hlbWEpKTtcbiAgaWYgKGlkICYmIHNob3VsZEFkZFNjaGVtYSkgY2hlY2tVbmlxdWUodGhpcywgaWQpO1xuXG4gIHZhciB3aWxsVmFsaWRhdGUgPSB0aGlzLl9vcHRzLnZhbGlkYXRlU2NoZW1hICE9PSBmYWxzZSAmJiAhc2tpcFZhbGlkYXRpb247XG4gIHZhciByZWN1cnNpdmVNZXRhO1xuICBpZiAod2lsbFZhbGlkYXRlICYmICEocmVjdXJzaXZlTWV0YSA9IGlkICYmIGlkID09IHJlc29sdmUubm9ybWFsaXplSWQoc2NoZW1hLiRzY2hlbWEpKSlcbiAgICB0aGlzLnZhbGlkYXRlU2NoZW1hKHNjaGVtYSwgdHJ1ZSk7XG5cbiAgdmFyIGxvY2FsUmVmcyA9IHJlc29sdmUuaWRzLmNhbGwodGhpcywgc2NoZW1hKTtcblxuICB2YXIgc2NoZW1hT2JqID0gbmV3IFNjaGVtYU9iamVjdCh7XG4gICAgaWQ6IGlkLFxuICAgIHNjaGVtYTogc2NoZW1hLFxuICAgIGxvY2FsUmVmczogbG9jYWxSZWZzLFxuICAgIGNhY2hlS2V5OiBjYWNoZUtleSxcbiAgICBtZXRhOiBtZXRhXG4gIH0pO1xuXG4gIGlmIChpZFswXSAhPSAnIycgJiYgc2hvdWxkQWRkU2NoZW1hKSB0aGlzLl9yZWZzW2lkXSA9IHNjaGVtYU9iajtcbiAgdGhpcy5fY2FjaGUucHV0KGNhY2hlS2V5LCBzY2hlbWFPYmopO1xuXG4gIGlmICh3aWxsVmFsaWRhdGUgJiYgcmVjdXJzaXZlTWV0YSkgdGhpcy52YWxpZGF0ZVNjaGVtYShzY2hlbWEsIHRydWUpO1xuXG4gIHJldHVybiBzY2hlbWFPYmo7XG59XG5cblxuLyogQHRoaXMgICBBanYgKi9cbmZ1bmN0aW9uIF9jb21waWxlKHNjaGVtYU9iaiwgcm9vdCkge1xuICBpZiAoc2NoZW1hT2JqLmNvbXBpbGluZykge1xuICAgIHNjaGVtYU9iai52YWxpZGF0ZSA9IGNhbGxWYWxpZGF0ZTtcbiAgICBjYWxsVmFsaWRhdGUuc2NoZW1hID0gc2NoZW1hT2JqLnNjaGVtYTtcbiAgICBjYWxsVmFsaWRhdGUuZXJyb3JzID0gbnVsbDtcbiAgICBjYWxsVmFsaWRhdGUucm9vdCA9IHJvb3QgPyByb290IDogY2FsbFZhbGlkYXRlO1xuICAgIGlmIChzY2hlbWFPYmouc2NoZW1hLiRhc3luYyA9PT0gdHJ1ZSlcbiAgICAgIGNhbGxWYWxpZGF0ZS4kYXN5bmMgPSB0cnVlO1xuICAgIHJldHVybiBjYWxsVmFsaWRhdGU7XG4gIH1cbiAgc2NoZW1hT2JqLmNvbXBpbGluZyA9IHRydWU7XG5cbiAgdmFyIGN1cnJlbnRPcHRzO1xuICBpZiAoc2NoZW1hT2JqLm1ldGEpIHtcbiAgICBjdXJyZW50T3B0cyA9IHRoaXMuX29wdHM7XG4gICAgdGhpcy5fb3B0cyA9IHRoaXMuX21ldGFPcHRzO1xuICB9XG5cbiAgdmFyIHY7XG4gIHRyeSB7IHYgPSBjb21waWxlU2NoZW1hLmNhbGwodGhpcywgc2NoZW1hT2JqLnNjaGVtYSwgcm9vdCwgc2NoZW1hT2JqLmxvY2FsUmVmcyk7IH1cbiAgY2F0Y2goZSkge1xuICAgIGRlbGV0ZSBzY2hlbWFPYmoudmFsaWRhdGU7XG4gICAgdGhyb3cgZTtcbiAgfVxuICBmaW5hbGx5IHtcbiAgICBzY2hlbWFPYmouY29tcGlsaW5nID0gZmFsc2U7XG4gICAgaWYgKHNjaGVtYU9iai5tZXRhKSB0aGlzLl9vcHRzID0gY3VycmVudE9wdHM7XG4gIH1cblxuICBzY2hlbWFPYmoudmFsaWRhdGUgPSB2O1xuICBzY2hlbWFPYmoucmVmcyA9IHYucmVmcztcbiAgc2NoZW1hT2JqLnJlZlZhbCA9IHYucmVmVmFsO1xuICBzY2hlbWFPYmoucm9vdCA9IHYucm9vdDtcbiAgcmV0dXJuIHY7XG5cblxuICAvKiBAdGhpcyAgIHsqfSAtIGN1c3RvbSBjb250ZXh0LCBzZWUgcGFzc0NvbnRleHQgb3B0aW9uICovXG4gIGZ1bmN0aW9uIGNhbGxWYWxpZGF0ZSgpIHtcbiAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgdmFyIF92YWxpZGF0ZSA9IHNjaGVtYU9iai52YWxpZGF0ZTtcbiAgICB2YXIgcmVzdWx0ID0gX3ZhbGlkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgY2FsbFZhbGlkYXRlLmVycm9ycyA9IF92YWxpZGF0ZS5lcnJvcnM7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGNob29zZUdldElkKG9wdHMpIHtcbiAgc3dpdGNoIChvcHRzLnNjaGVtYUlkKSB7XG4gICAgY2FzZSAnYXV0byc6IHJldHVybiBfZ2V0JElkT3JJZDtcbiAgICBjYXNlICdpZCc6IHJldHVybiBfZ2V0SWQ7XG4gICAgZGVmYXVsdDogcmV0dXJuIF9nZXQkSWQ7XG4gIH1cbn1cblxuLyogQHRoaXMgICBBanYgKi9cbmZ1bmN0aW9uIF9nZXRJZChzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYS4kaWQpIHRoaXMubG9nZ2VyLndhcm4oJ3NjaGVtYSAkaWQgaWdub3JlZCcsIHNjaGVtYS4kaWQpO1xuICByZXR1cm4gc2NoZW1hLmlkO1xufVxuXG4vKiBAdGhpcyAgIEFqdiAqL1xuZnVuY3Rpb24gX2dldCRJZChzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYS5pZCkgdGhpcy5sb2dnZXIud2Fybignc2NoZW1hIGlkIGlnbm9yZWQnLCBzY2hlbWEuaWQpO1xuICByZXR1cm4gc2NoZW1hLiRpZDtcbn1cblxuXG5mdW5jdGlvbiBfZ2V0JElkT3JJZChzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYS4kaWQgJiYgc2NoZW1hLmlkICYmIHNjaGVtYS4kaWQgIT0gc2NoZW1hLmlkKVxuICAgIHRocm93IG5ldyBFcnJvcignc2NoZW1hICRpZCBpcyBkaWZmZXJlbnQgZnJvbSBpZCcpO1xuICByZXR1cm4gc2NoZW1hLiRpZCB8fCBzY2hlbWEuaWQ7XG59XG5cblxuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIGVycm9yIG1lc3NhZ2Ugb2JqZWN0cyB0byBzdHJpbmdcbiAqIEB0aGlzICAgQWp2XG4gKiBAcGFyYW0gIHtBcnJheTxPYmplY3Q+fSBlcnJvcnMgb3B0aW9uYWwgYXJyYXkgb2YgdmFsaWRhdGlvbiBlcnJvcnMsIGlmIG5vdCBwYXNzZWQgZXJyb3JzIGZyb20gdGhlIGluc3RhbmNlIGFyZSB1c2VkLlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIG9wdGlvbmFsIG9wdGlvbnMgd2l0aCBwcm9wZXJ0aWVzIGBzZXBhcmF0b3JgIGFuZCBgZGF0YVZhcmAuXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGh1bWFuIHJlYWRhYmxlIHN0cmluZyB3aXRoIGFsbCBlcnJvcnMgZGVzY3JpcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGVycm9yc1RleHQoZXJyb3JzLCBvcHRpb25zKSB7XG4gIGVycm9ycyA9IGVycm9ycyB8fCB0aGlzLmVycm9ycztcbiAgaWYgKCFlcnJvcnMpIHJldHVybiAnTm8gZXJyb3JzJztcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBzZXBhcmF0b3IgPSBvcHRpb25zLnNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywgJyA6IG9wdGlvbnMuc2VwYXJhdG9yO1xuICB2YXIgZGF0YVZhciA9IG9wdGlvbnMuZGF0YVZhciA9PT0gdW5kZWZpbmVkID8gJ2RhdGEnIDogb3B0aW9ucy5kYXRhVmFyO1xuXG4gIHZhciB0ZXh0ID0gJyc7XG4gIGZvciAodmFyIGk9MDsgaTxlcnJvcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZSA9IGVycm9yc1tpXTtcbiAgICBpZiAoZSkgdGV4dCArPSBkYXRhVmFyICsgZS5kYXRhUGF0aCArICcgJyArIGUubWVzc2FnZSArIHNlcGFyYXRvcjtcbiAgfVxuICByZXR1cm4gdGV4dC5zbGljZSgwLCAtc2VwYXJhdG9yLmxlbmd0aCk7XG59XG5cblxuLyoqXG4gKiBBZGQgY3VzdG9tIGZvcm1hdFxuICogQHRoaXMgICBBanZcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIGZvcm1hdCBuYW1lXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB8RnVuY3Rpb259IGZvcm1hdCBzdHJpbmcgaXMgY29udmVydGVkIHRvIFJlZ0V4cDsgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBib29sZWFuICh0cnVlIHdoZW4gdmFsaWQpXG4gKiBAcmV0dXJuIHtBanZ9IHRoaXMgZm9yIG1ldGhvZCBjaGFpbmluZ1xuICovXG5mdW5jdGlvbiBhZGRGb3JtYXQobmFtZSwgZm9ybWF0KSB7XG4gIGlmICh0eXBlb2YgZm9ybWF0ID09ICdzdHJpbmcnKSBmb3JtYXQgPSBuZXcgUmVnRXhwKGZvcm1hdCk7XG4gIHRoaXMuX2Zvcm1hdHNbbmFtZV0gPSBmb3JtYXQ7XG4gIHJldHVybiB0aGlzO1xufVxuXG5cbmZ1bmN0aW9uIGFkZERlZmF1bHRNZXRhU2NoZW1hKHNlbGYpIHtcbiAgdmFyICRkYXRhU2NoZW1hO1xuICBpZiAoc2VsZi5fb3B0cy4kZGF0YSkge1xuICAgICRkYXRhU2NoZW1hID0gcmVxdWlyZSgnLi9yZWZzL2RhdGEuanNvbicpO1xuICAgIHNlbGYuYWRkTWV0YVNjaGVtYSgkZGF0YVNjaGVtYSwgJGRhdGFTY2hlbWEuJGlkLCB0cnVlKTtcbiAgfVxuICBpZiAoc2VsZi5fb3B0cy5tZXRhID09PSBmYWxzZSkgcmV0dXJuO1xuICB2YXIgbWV0YVNjaGVtYSA9IHJlcXVpcmUoJy4vcmVmcy9qc29uLXNjaGVtYS1kcmFmdC0wNy5qc29uJyk7XG4gIGlmIChzZWxmLl9vcHRzLiRkYXRhKSBtZXRhU2NoZW1hID0gJGRhdGFNZXRhU2NoZW1hKG1ldGFTY2hlbWEsIE1FVEFfU1VQUE9SVF9EQVRBKTtcbiAgc2VsZi5hZGRNZXRhU2NoZW1hKG1ldGFTY2hlbWEsIE1FVEFfU0NIRU1BX0lELCB0cnVlKTtcbiAgc2VsZi5fcmVmc1snaHR0cDovL2pzb24tc2NoZW1hLm9yZy9zY2hlbWEnXSA9IE1FVEFfU0NIRU1BX0lEO1xufVxuXG5cbmZ1bmN0aW9uIGFkZEluaXRpYWxTY2hlbWFzKHNlbGYpIHtcbiAgdmFyIG9wdHNTY2hlbWFzID0gc2VsZi5fb3B0cy5zY2hlbWFzO1xuICBpZiAoIW9wdHNTY2hlbWFzKSByZXR1cm47XG4gIGlmIChBcnJheS5pc0FycmF5KG9wdHNTY2hlbWFzKSkgc2VsZi5hZGRTY2hlbWEob3B0c1NjaGVtYXMpO1xuICBlbHNlIGZvciAodmFyIGtleSBpbiBvcHRzU2NoZW1hcykgc2VsZi5hZGRTY2hlbWEob3B0c1NjaGVtYXNba2V5XSwga2V5KTtcbn1cblxuXG5mdW5jdGlvbiBhZGRJbml0aWFsRm9ybWF0cyhzZWxmKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gc2VsZi5fb3B0cy5mb3JtYXRzKSB7XG4gICAgdmFyIGZvcm1hdCA9IHNlbGYuX29wdHMuZm9ybWF0c1tuYW1lXTtcbiAgICBzZWxmLmFkZEZvcm1hdChuYW1lLCBmb3JtYXQpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gY2hlY2tVbmlxdWUoc2VsZiwgaWQpIHtcbiAgaWYgKHNlbGYuX3NjaGVtYXNbaWRdIHx8IHNlbGYuX3JlZnNbaWRdKVxuICAgIHRocm93IG5ldyBFcnJvcignc2NoZW1hIHdpdGgga2V5IG9yIGlkIFwiJyArIGlkICsgJ1wiIGFscmVhZHkgZXhpc3RzJyk7XG59XG5cblxuZnVuY3Rpb24gZ2V0TWV0YVNjaGVtYU9wdGlvbnMoc2VsZikge1xuICB2YXIgbWV0YU9wdHMgPSB1dGlsLmNvcHkoc2VsZi5fb3B0cyk7XG4gIGZvciAodmFyIGk9MDsgaTxNRVRBX0lHTk9SRV9PUFRJT05TLmxlbmd0aDsgaSsrKVxuICAgIGRlbGV0ZSBtZXRhT3B0c1tNRVRBX0lHTk9SRV9PUFRJT05TW2ldXTtcbiAgcmV0dXJuIG1ldGFPcHRzO1xufVxuXG5cbmZ1bmN0aW9uIHNldExvZ2dlcihzZWxmKSB7XG4gIHZhciBsb2dnZXIgPSBzZWxmLl9vcHRzLmxvZ2dlcjtcbiAgaWYgKGxvZ2dlciA9PT0gZmFsc2UpIHtcbiAgICBzZWxmLmxvZ2dlciA9IHtsb2c6IG5vb3AsIHdhcm46IG5vb3AsIGVycm9yOiBub29wfTtcbiAgfSBlbHNlIHtcbiAgICBpZiAobG9nZ2VyID09PSB1bmRlZmluZWQpIGxvZ2dlciA9IGNvbnNvbGU7XG4gICAgaWYgKCEodHlwZW9mIGxvZ2dlciA9PSAnb2JqZWN0JyAmJiBsb2dnZXIubG9nICYmIGxvZ2dlci53YXJuICYmIGxvZ2dlci5lcnJvcikpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xvZ2dlciBtdXN0IGltcGxlbWVudCBsb2csIHdhcm4gYW5kIGVycm9yIG1ldGhvZHMnKTtcbiAgICBzZWxmLmxvZ2dlciA9IGxvZ2dlcjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVzb2x2ZSA9IHJlcXVpcmUoJy4vcmVzb2x2ZScpXG4gICwgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpXG4gICwgZXJyb3JDbGFzc2VzID0gcmVxdWlyZSgnLi9lcnJvcl9jbGFzc2VzJylcbiAgLCBzdGFibGVTdHJpbmdpZnkgPSByZXF1aXJlKCdmYXN0LWpzb24tc3RhYmxlLXN0cmluZ2lmeScpO1xuXG52YXIgdmFsaWRhdGVHZW5lcmF0b3IgPSByZXF1aXJlKCcuLi9kb3Rqcy92YWxpZGF0ZScpO1xuXG4vKipcbiAqIEZ1bmN0aW9ucyBiZWxvdyBhcmUgdXNlZCBpbnNpZGUgY29tcGlsZWQgdmFsaWRhdGlvbnMgZnVuY3Rpb25cbiAqL1xuXG52YXIgdWNzMmxlbmd0aCA9IHV0aWwudWNzMmxlbmd0aDtcbnZhciBlcXVhbCA9IHJlcXVpcmUoJ2Zhc3QtZGVlcC1lcXVhbCcpO1xuXG4vLyB0aGlzIGVycm9yIGlzIHRocm93biBieSBhc3luYyBzY2hlbWFzIHRvIHJldHVybiB2YWxpZGF0aW9uIGVycm9ycyB2aWEgZXhjZXB0aW9uXG52YXIgVmFsaWRhdGlvbkVycm9yID0gZXJyb3JDbGFzc2VzLlZhbGlkYXRpb247XG5cbm1vZHVsZS5leHBvcnRzID0gY29tcGlsZTtcblxuXG4vKipcbiAqIENvbXBpbGVzIHNjaGVtYSB0byB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiBAdGhpcyAgIEFqdlxuICogQHBhcmFtICB7T2JqZWN0fSBzY2hlbWEgc2NoZW1hIG9iamVjdFxuICogQHBhcmFtICB7T2JqZWN0fSByb290IG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSByb290IHNjaGVtYSBmb3IgdGhpcyBzY2hlbWFcbiAqIEBwYXJhbSAge09iamVjdH0gbG9jYWxSZWZzIHRoZSBoYXNoIG9mIGxvY2FsIHJlZmVyZW5jZXMgaW5zaWRlIHRoZSBzY2hlbWEgKGNyZWF0ZWQgYnkgcmVzb2x2ZS5pZCksIHVzZWQgZm9yIGlubGluZSByZXNvbHV0aW9uXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGJhc2VJZCBiYXNlIElEIGZvciBJRHMgaW4gdGhlIHNjaGVtYVxuICogQHJldHVybiB7RnVuY3Rpb259IHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gY29tcGlsZShzY2hlbWEsIHJvb3QsIGxvY2FsUmVmcywgYmFzZUlkKSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUsIGV2aWw6IHRydWUgKi9cbiAgLyogZXNsaW50IG5vLXNoYWRvdzogMCAqL1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgICAsIG9wdHMgPSB0aGlzLl9vcHRzXG4gICAgLCByZWZWYWwgPSBbIHVuZGVmaW5lZCBdXG4gICAgLCByZWZzID0ge31cbiAgICAsIHBhdHRlcm5zID0gW11cbiAgICAsIHBhdHRlcm5zSGFzaCA9IHt9XG4gICAgLCBkZWZhdWx0cyA9IFtdXG4gICAgLCBkZWZhdWx0c0hhc2ggPSB7fVxuICAgICwgY3VzdG9tUnVsZXMgPSBbXTtcblxuICByb290ID0gcm9vdCB8fCB7IHNjaGVtYTogc2NoZW1hLCByZWZWYWw6IHJlZlZhbCwgcmVmczogcmVmcyB9O1xuXG4gIHZhciBjID0gY2hlY2tDb21waWxpbmcuY2FsbCh0aGlzLCBzY2hlbWEsIHJvb3QsIGJhc2VJZCk7XG4gIHZhciBjb21waWxhdGlvbiA9IHRoaXMuX2NvbXBpbGF0aW9uc1tjLmluZGV4XTtcbiAgaWYgKGMuY29tcGlsaW5nKSByZXR1cm4gKGNvbXBpbGF0aW9uLmNhbGxWYWxpZGF0ZSA9IGNhbGxWYWxpZGF0ZSk7XG5cbiAgdmFyIGZvcm1hdHMgPSB0aGlzLl9mb3JtYXRzO1xuICB2YXIgUlVMRVMgPSB0aGlzLlJVTEVTO1xuXG4gIHRyeSB7XG4gICAgdmFyIHYgPSBsb2NhbENvbXBpbGUoc2NoZW1hLCByb290LCBsb2NhbFJlZnMsIGJhc2VJZCk7XG4gICAgY29tcGlsYXRpb24udmFsaWRhdGUgPSB2O1xuICAgIHZhciBjdiA9IGNvbXBpbGF0aW9uLmNhbGxWYWxpZGF0ZTtcbiAgICBpZiAoY3YpIHtcbiAgICAgIGN2LnNjaGVtYSA9IHYuc2NoZW1hO1xuICAgICAgY3YuZXJyb3JzID0gbnVsbDtcbiAgICAgIGN2LnJlZnMgPSB2LnJlZnM7XG4gICAgICBjdi5yZWZWYWwgPSB2LnJlZlZhbDtcbiAgICAgIGN2LnJvb3QgPSB2LnJvb3Q7XG4gICAgICBjdi4kYXN5bmMgPSB2LiRhc3luYztcbiAgICAgIGlmIChvcHRzLnNvdXJjZUNvZGUpIGN2LnNvdXJjZSA9IHYuc291cmNlO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfSBmaW5hbGx5IHtcbiAgICBlbmRDb21waWxpbmcuY2FsbCh0aGlzLCBzY2hlbWEsIHJvb3QsIGJhc2VJZCk7XG4gIH1cblxuICAvKiBAdGhpcyAgIHsqfSAtIGN1c3RvbSBjb250ZXh0LCBzZWUgcGFzc0NvbnRleHQgb3B0aW9uICovXG4gIGZ1bmN0aW9uIGNhbGxWYWxpZGF0ZSgpIHtcbiAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgdmFyIHZhbGlkYXRlID0gY29tcGlsYXRpb24udmFsaWRhdGU7XG4gICAgdmFyIHJlc3VsdCA9IHZhbGlkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgY2FsbFZhbGlkYXRlLmVycm9ycyA9IHZhbGlkYXRlLmVycm9ycztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbG9jYWxDb21waWxlKF9zY2hlbWEsIF9yb290LCBsb2NhbFJlZnMsIGJhc2VJZCkge1xuICAgIHZhciBpc1Jvb3QgPSAhX3Jvb3QgfHwgKF9yb290ICYmIF9yb290LnNjaGVtYSA9PSBfc2NoZW1hKTtcbiAgICBpZiAoX3Jvb3Quc2NoZW1hICE9IHJvb3Quc2NoZW1hKVxuICAgICAgcmV0dXJuIGNvbXBpbGUuY2FsbChzZWxmLCBfc2NoZW1hLCBfcm9vdCwgbG9jYWxSZWZzLCBiYXNlSWQpO1xuXG4gICAgdmFyICRhc3luYyA9IF9zY2hlbWEuJGFzeW5jID09PSB0cnVlO1xuXG4gICAgdmFyIHNvdXJjZUNvZGUgPSB2YWxpZGF0ZUdlbmVyYXRvcih7XG4gICAgICBpc1RvcDogdHJ1ZSxcbiAgICAgIHNjaGVtYTogX3NjaGVtYSxcbiAgICAgIGlzUm9vdDogaXNSb290LFxuICAgICAgYmFzZUlkOiBiYXNlSWQsXG4gICAgICByb290OiBfcm9vdCxcbiAgICAgIHNjaGVtYVBhdGg6ICcnLFxuICAgICAgZXJyU2NoZW1hUGF0aDogJyMnLFxuICAgICAgZXJyb3JQYXRoOiAnXCJcIicsXG4gICAgICBNaXNzaW5nUmVmRXJyb3I6IGVycm9yQ2xhc3Nlcy5NaXNzaW5nUmVmLFxuICAgICAgUlVMRVM6IFJVTEVTLFxuICAgICAgdmFsaWRhdGU6IHZhbGlkYXRlR2VuZXJhdG9yLFxuICAgICAgdXRpbDogdXRpbCxcbiAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICByZXNvbHZlUmVmOiByZXNvbHZlUmVmLFxuICAgICAgdXNlUGF0dGVybjogdXNlUGF0dGVybixcbiAgICAgIHVzZURlZmF1bHQ6IHVzZURlZmF1bHQsXG4gICAgICB1c2VDdXN0b21SdWxlOiB1c2VDdXN0b21SdWxlLFxuICAgICAgb3B0czogb3B0cyxcbiAgICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgICBsb2dnZXI6IHNlbGYubG9nZ2VyLFxuICAgICAgc2VsZjogc2VsZlxuICAgIH0pO1xuXG4gICAgc291cmNlQ29kZSA9IHZhcnMocmVmVmFsLCByZWZWYWxDb2RlKSArIHZhcnMocGF0dGVybnMsIHBhdHRlcm5Db2RlKVxuICAgICAgICAgICAgICAgICAgICsgdmFycyhkZWZhdWx0cywgZGVmYXVsdENvZGUpICsgdmFycyhjdXN0b21SdWxlcywgY3VzdG9tUnVsZUNvZGUpXG4gICAgICAgICAgICAgICAgICAgKyBzb3VyY2VDb2RlO1xuXG4gICAgaWYgKG9wdHMucHJvY2Vzc0NvZGUpIHNvdXJjZUNvZGUgPSBvcHRzLnByb2Nlc3NDb2RlKHNvdXJjZUNvZGUpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdcXG5cXG5cXG4gKioqIFxcbicsIEpTT04uc3RyaW5naWZ5KHNvdXJjZUNvZGUpKTtcbiAgICB2YXIgdmFsaWRhdGU7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtYWtlVmFsaWRhdGUgPSBuZXcgRnVuY3Rpb24oXG4gICAgICAgICdzZWxmJyxcbiAgICAgICAgJ1JVTEVTJyxcbiAgICAgICAgJ2Zvcm1hdHMnLFxuICAgICAgICAncm9vdCcsXG4gICAgICAgICdyZWZWYWwnLFxuICAgICAgICAnZGVmYXVsdHMnLFxuICAgICAgICAnY3VzdG9tUnVsZXMnLFxuICAgICAgICAnZXF1YWwnLFxuICAgICAgICAndWNzMmxlbmd0aCcsXG4gICAgICAgICdWYWxpZGF0aW9uRXJyb3InLFxuICAgICAgICBzb3VyY2VDb2RlXG4gICAgICApO1xuXG4gICAgICB2YWxpZGF0ZSA9IG1ha2VWYWxpZGF0ZShcbiAgICAgICAgc2VsZixcbiAgICAgICAgUlVMRVMsXG4gICAgICAgIGZvcm1hdHMsXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHJlZlZhbCxcbiAgICAgICAgZGVmYXVsdHMsXG4gICAgICAgIGN1c3RvbVJ1bGVzLFxuICAgICAgICBlcXVhbCxcbiAgICAgICAgdWNzMmxlbmd0aCxcbiAgICAgICAgVmFsaWRhdGlvbkVycm9yXG4gICAgICApO1xuXG4gICAgICByZWZWYWxbMF0gPSB2YWxpZGF0ZTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCdFcnJvciBjb21waWxpbmcgc2NoZW1hLCBmdW5jdGlvbiBjb2RlOicsIHNvdXJjZUNvZGUpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZS5zY2hlbWEgPSBfc2NoZW1hO1xuICAgIHZhbGlkYXRlLmVycm9ycyA9IG51bGw7XG4gICAgdmFsaWRhdGUucmVmcyA9IHJlZnM7XG4gICAgdmFsaWRhdGUucmVmVmFsID0gcmVmVmFsO1xuICAgIHZhbGlkYXRlLnJvb3QgPSBpc1Jvb3QgPyB2YWxpZGF0ZSA6IF9yb290O1xuICAgIGlmICgkYXN5bmMpIHZhbGlkYXRlLiRhc3luYyA9IHRydWU7XG4gICAgaWYgKG9wdHMuc291cmNlQ29kZSA9PT0gdHJ1ZSkge1xuICAgICAgdmFsaWRhdGUuc291cmNlID0ge1xuICAgICAgICBjb2RlOiBzb3VyY2VDb2RlLFxuICAgICAgICBwYXR0ZXJuczogcGF0dGVybnMsXG4gICAgICAgIGRlZmF1bHRzOiBkZWZhdWx0c1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdGU7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlUmVmKGJhc2VJZCwgcmVmLCBpc1Jvb3QpIHtcbiAgICByZWYgPSByZXNvbHZlLnVybChiYXNlSWQsIHJlZik7XG4gICAgdmFyIHJlZkluZGV4ID0gcmVmc1tyZWZdO1xuICAgIHZhciBfcmVmVmFsLCByZWZDb2RlO1xuICAgIGlmIChyZWZJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBfcmVmVmFsID0gcmVmVmFsW3JlZkluZGV4XTtcbiAgICAgIHJlZkNvZGUgPSAncmVmVmFsWycgKyByZWZJbmRleCArICddJztcbiAgICAgIHJldHVybiByZXNvbHZlZFJlZihfcmVmVmFsLCByZWZDb2RlKTtcbiAgICB9XG4gICAgaWYgKCFpc1Jvb3QgJiYgcm9vdC5yZWZzKSB7XG4gICAgICB2YXIgcm9vdFJlZklkID0gcm9vdC5yZWZzW3JlZl07XG4gICAgICBpZiAocm9vdFJlZklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgX3JlZlZhbCA9IHJvb3QucmVmVmFsW3Jvb3RSZWZJZF07XG4gICAgICAgIHJlZkNvZGUgPSBhZGRMb2NhbFJlZihyZWYsIF9yZWZWYWwpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZWRSZWYoX3JlZlZhbCwgcmVmQ29kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVmQ29kZSA9IGFkZExvY2FsUmVmKHJlZik7XG4gICAgdmFyIHYgPSByZXNvbHZlLmNhbGwoc2VsZiwgbG9jYWxDb21waWxlLCByb290LCByZWYpO1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBsb2NhbFNjaGVtYSA9IGxvY2FsUmVmcyAmJiBsb2NhbFJlZnNbcmVmXTtcbiAgICAgIGlmIChsb2NhbFNjaGVtYSkge1xuICAgICAgICB2ID0gcmVzb2x2ZS5pbmxpbmVSZWYobG9jYWxTY2hlbWEsIG9wdHMuaW5saW5lUmVmcylcbiAgICAgICAgICAgID8gbG9jYWxTY2hlbWFcbiAgICAgICAgICAgIDogY29tcGlsZS5jYWxsKHNlbGYsIGxvY2FsU2NoZW1hLCByb290LCBsb2NhbFJlZnMsIGJhc2VJZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVtb3ZlTG9jYWxSZWYocmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVwbGFjZUxvY2FsUmVmKHJlZiwgdik7XG4gICAgICByZXR1cm4gcmVzb2x2ZWRSZWYodiwgcmVmQ29kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkTG9jYWxSZWYocmVmLCB2KSB7XG4gICAgdmFyIHJlZklkID0gcmVmVmFsLmxlbmd0aDtcbiAgICByZWZWYWxbcmVmSWRdID0gdjtcbiAgICByZWZzW3JlZl0gPSByZWZJZDtcbiAgICByZXR1cm4gJ3JlZlZhbCcgKyByZWZJZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUxvY2FsUmVmKHJlZikge1xuICAgIGRlbGV0ZSByZWZzW3JlZl07XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlTG9jYWxSZWYocmVmLCB2KSB7XG4gICAgdmFyIHJlZklkID0gcmVmc1tyZWZdO1xuICAgIHJlZlZhbFtyZWZJZF0gPSB2O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZWRSZWYocmVmVmFsLCBjb2RlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiByZWZWYWwgPT0gJ29iamVjdCcgfHwgdHlwZW9mIHJlZlZhbCA9PSAnYm9vbGVhbidcbiAgICAgICAgICAgID8geyBjb2RlOiBjb2RlLCBzY2hlbWE6IHJlZlZhbCwgaW5saW5lOiB0cnVlIH1cbiAgICAgICAgICAgIDogeyBjb2RlOiBjb2RlLCAkYXN5bmM6IHJlZlZhbCAmJiAhIXJlZlZhbC4kYXN5bmMgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVzZVBhdHRlcm4ocmVnZXhTdHIpIHtcbiAgICB2YXIgaW5kZXggPSBwYXR0ZXJuc0hhc2hbcmVnZXhTdHJdO1xuICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpbmRleCA9IHBhdHRlcm5zSGFzaFtyZWdleFN0cl0gPSBwYXR0ZXJucy5sZW5ndGg7XG4gICAgICBwYXR0ZXJuc1tpbmRleF0gPSByZWdleFN0cjtcbiAgICB9XG4gICAgcmV0dXJuICdwYXR0ZXJuJyArIGluZGV4O1xuICB9XG5cbiAgZnVuY3Rpb24gdXNlRGVmYXVsdCh2YWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIHJldHVybiAnJyArIHZhbHVlO1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHV0aWwudG9RdW90ZWRTdHJpbmcodmFsdWUpO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICAgICAgICB2YXIgdmFsdWVTdHIgPSBzdGFibGVTdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICB2YXIgaW5kZXggPSBkZWZhdWx0c0hhc2hbdmFsdWVTdHJdO1xuICAgICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gZGVmYXVsdHNIYXNoW3ZhbHVlU3RyXSA9IGRlZmF1bHRzLmxlbmd0aDtcbiAgICAgICAgICBkZWZhdWx0c1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2RlZmF1bHQnICsgaW5kZXg7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXNlQ3VzdG9tUnVsZShydWxlLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQpIHtcbiAgICB2YXIgdmFsaWRhdGVTY2hlbWEgPSBydWxlLmRlZmluaXRpb24udmFsaWRhdGVTY2hlbWE7XG4gICAgaWYgKHZhbGlkYXRlU2NoZW1hICYmIHNlbGYuX29wdHMudmFsaWRhdGVTY2hlbWEgIT09IGZhbHNlKSB7XG4gICAgICB2YXIgdmFsaWQgPSB2YWxpZGF0ZVNjaGVtYShzY2hlbWEpO1xuICAgICAgaWYgKCF2YWxpZCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICdrZXl3b3JkIHNjaGVtYSBpcyBpbnZhbGlkOiAnICsgc2VsZi5lcnJvcnNUZXh0KHZhbGlkYXRlU2NoZW1hLmVycm9ycyk7XG4gICAgICAgIGlmIChzZWxmLl9vcHRzLnZhbGlkYXRlU2NoZW1hID09ICdsb2cnKSBzZWxmLmxvZ2dlci5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNvbXBpbGUgPSBydWxlLmRlZmluaXRpb24uY29tcGlsZVxuICAgICAgLCBpbmxpbmUgPSBydWxlLmRlZmluaXRpb24uaW5saW5lXG4gICAgICAsIG1hY3JvID0gcnVsZS5kZWZpbml0aW9uLm1hY3JvO1xuXG4gICAgdmFyIHZhbGlkYXRlO1xuICAgIGlmIChjb21waWxlKSB7XG4gICAgICB2YWxpZGF0ZSA9IGNvbXBpbGUuY2FsbChzZWxmLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQpO1xuICAgIH0gZWxzZSBpZiAobWFjcm8pIHtcbiAgICAgIHZhbGlkYXRlID0gbWFjcm8uY2FsbChzZWxmLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQpO1xuICAgICAgaWYgKG9wdHMudmFsaWRhdGVTY2hlbWEgIT09IGZhbHNlKSBzZWxmLnZhbGlkYXRlU2NoZW1hKHZhbGlkYXRlLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKGlubGluZSkge1xuICAgICAgdmFsaWRhdGUgPSBpbmxpbmUuY2FsbChzZWxmLCBpdCwgcnVsZS5rZXl3b3JkLCBzY2hlbWEsIHBhcmVudFNjaGVtYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbGlkYXRlID0gcnVsZS5kZWZpbml0aW9uLnZhbGlkYXRlO1xuICAgICAgaWYgKCF2YWxpZGF0ZSkgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh2YWxpZGF0ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjdXN0b20ga2V5d29yZCBcIicgKyBydWxlLmtleXdvcmQgKyAnXCJmYWlsZWQgdG8gY29tcGlsZScpO1xuXG4gICAgdmFyIGluZGV4ID0gY3VzdG9tUnVsZXMubGVuZ3RoO1xuICAgIGN1c3RvbVJ1bGVzW2luZGV4XSA9IHZhbGlkYXRlO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvZGU6ICdjdXN0b21SdWxlJyArIGluZGV4LFxuICAgICAgdmFsaWRhdGU6IHZhbGlkYXRlXG4gICAgfTtcbiAgfVxufVxuXG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBzY2hlbWEgaXMgY3VycmVudGx5IGNvbXBpbGVkXG4gKiBAdGhpcyAgIEFqdlxuICogQHBhcmFtICB7T2JqZWN0fSBzY2hlbWEgc2NoZW1hIHRvIGNvbXBpbGVcbiAqIEBwYXJhbSAge09iamVjdH0gcm9vdCByb290IG9iamVjdFxuICogQHBhcmFtICB7U3RyaW5nfSBiYXNlSWQgYmFzZSBzY2hlbWEgSURcbiAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHdpdGggcHJvcGVydGllcyBcImluZGV4XCIgKGNvbXBpbGF0aW9uIGluZGV4KSBhbmQgXCJjb21waWxpbmdcIiAoYm9vbGVhbilcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21waWxpbmcoc2NoZW1hLCByb290LCBiYXNlSWQpIHtcbiAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICB2YXIgaW5kZXggPSBjb21wSW5kZXguY2FsbCh0aGlzLCBzY2hlbWEsIHJvb3QsIGJhc2VJZCk7XG4gIGlmIChpbmRleCA+PSAwKSByZXR1cm4geyBpbmRleDogaW5kZXgsIGNvbXBpbGluZzogdHJ1ZSB9O1xuICBpbmRleCA9IHRoaXMuX2NvbXBpbGF0aW9ucy5sZW5ndGg7XG4gIHRoaXMuX2NvbXBpbGF0aW9uc1tpbmRleF0gPSB7XG4gICAgc2NoZW1hOiBzY2hlbWEsXG4gICAgcm9vdDogcm9vdCxcbiAgICBiYXNlSWQ6IGJhc2VJZFxuICB9O1xuICByZXR1cm4geyBpbmRleDogaW5kZXgsIGNvbXBpbGluZzogZmFsc2UgfTtcbn1cblxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIHNjaGVtYSBmcm9tIHRoZSBjdXJyZW50bHkgY29tcGlsZWQgbGlzdFxuICogQHRoaXMgICBBanZcbiAqIEBwYXJhbSAge09iamVjdH0gc2NoZW1hIHNjaGVtYSB0byBjb21waWxlXG4gKiBAcGFyYW0gIHtPYmplY3R9IHJvb3Qgcm9vdCBvYmplY3RcbiAqIEBwYXJhbSAge1N0cmluZ30gYmFzZUlkIGJhc2Ugc2NoZW1hIElEXG4gKi9cbmZ1bmN0aW9uIGVuZENvbXBpbGluZyhzY2hlbWEsIHJvb3QsIGJhc2VJZCkge1xuICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gIHZhciBpID0gY29tcEluZGV4LmNhbGwodGhpcywgc2NoZW1hLCByb290LCBiYXNlSWQpO1xuICBpZiAoaSA+PSAwKSB0aGlzLl9jb21waWxhdGlvbnMuc3BsaWNlKGksIDEpO1xufVxuXG5cbi8qKlxuICogSW5kZXggb2Ygc2NoZW1hIGNvbXBpbGF0aW9uIGluIHRoZSBjdXJyZW50bHkgY29tcGlsZWQgbGlzdFxuICogQHRoaXMgICBBanZcbiAqIEBwYXJhbSAge09iamVjdH0gc2NoZW1hIHNjaGVtYSB0byBjb21waWxlXG4gKiBAcGFyYW0gIHtPYmplY3R9IHJvb3Qgcm9vdCBvYmplY3RcbiAqIEBwYXJhbSAge1N0cmluZ30gYmFzZUlkIGJhc2Ugc2NoZW1hIElEXG4gKiBAcmV0dXJuIHtJbnRlZ2VyfSBjb21waWxhdGlvbiBpbmRleFxuICovXG5mdW5jdGlvbiBjb21wSW5kZXgoc2NoZW1hLCByb290LCBiYXNlSWQpIHtcbiAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICBmb3IgKHZhciBpPTA7IGk8dGhpcy5fY29tcGlsYXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGMgPSB0aGlzLl9jb21waWxhdGlvbnNbaV07XG4gICAgaWYgKGMuc2NoZW1hID09IHNjaGVtYSAmJiBjLnJvb3QgPT0gcm9vdCAmJiBjLmJhc2VJZCA9PSBiYXNlSWQpIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn1cblxuXG5mdW5jdGlvbiBwYXR0ZXJuQ29kZShpLCBwYXR0ZXJucykge1xuICByZXR1cm4gJ3ZhciBwYXR0ZXJuJyArIGkgKyAnID0gbmV3IFJlZ0V4cCgnICsgdXRpbC50b1F1b3RlZFN0cmluZyhwYXR0ZXJuc1tpXSkgKyAnKTsnO1xufVxuXG5cbmZ1bmN0aW9uIGRlZmF1bHRDb2RlKGkpIHtcbiAgcmV0dXJuICd2YXIgZGVmYXVsdCcgKyBpICsgJyA9IGRlZmF1bHRzWycgKyBpICsgJ107Jztcbn1cblxuXG5mdW5jdGlvbiByZWZWYWxDb2RlKGksIHJlZlZhbCkge1xuICByZXR1cm4gcmVmVmFsW2ldID09PSB1bmRlZmluZWQgPyAnJyA6ICd2YXIgcmVmVmFsJyArIGkgKyAnID0gcmVmVmFsWycgKyBpICsgJ107Jztcbn1cblxuXG5mdW5jdGlvbiBjdXN0b21SdWxlQ29kZShpKSB7XG4gIHJldHVybiAndmFyIGN1c3RvbVJ1bGUnICsgaSArICcgPSBjdXN0b21SdWxlc1snICsgaSArICddOyc7XG59XG5cblxuZnVuY3Rpb24gdmFycyhhcnIsIHN0YXRlbWVudCkge1xuICBpZiAoIWFyci5sZW5ndGgpIHJldHVybiAnJztcbiAgdmFyIGNvZGUgPSAnJztcbiAgZm9yICh2YXIgaT0wOyBpPGFyci5sZW5ndGg7IGkrKylcbiAgICBjb2RlICs9IHN0YXRlbWVudChpLCBhcnIpO1xuICByZXR1cm4gY29kZTtcbn1cbiIsIi8qKiBAbGljZW5zZSBVUkkuanMgdjQuMi4xIChjKSAyMDExIEdhcnkgQ291cnQuIExpY2Vuc2U6IGh0dHA6Ly9naXRodWIuY29tL2dhcnljb3VydC91cmktanMgKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcblx0KGZhY3RvcnkoKGdsb2JhbC5VUkkgPSBnbG9iYWwuVVJJIHx8IHt9KSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBtZXJnZSgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc2V0cyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBzZXRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChzZXRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgc2V0c1swXSA9IHNldHNbMF0uc2xpY2UoMCwgLTEpO1xuICAgICAgICB2YXIgeGwgPSBzZXRzLmxlbmd0aCAtIDE7XG4gICAgICAgIGZvciAodmFyIHggPSAxOyB4IDwgeGw7ICsreCkge1xuICAgICAgICAgICAgc2V0c1t4XSA9IHNldHNbeF0uc2xpY2UoMSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIHNldHNbeGxdID0gc2V0c1t4bF0uc2xpY2UoMSk7XG4gICAgICAgIHJldHVybiBzZXRzLmpvaW4oJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzZXRzWzBdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN1YmV4cChzdHIpIHtcbiAgICByZXR1cm4gXCIoPzpcIiArIHN0ciArIFwiKVwiO1xufVxuZnVuY3Rpb24gdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gbyA9PT0gdW5kZWZpbmVkID8gXCJ1bmRlZmluZWRcIiA6IG8gPT09IG51bGwgPyBcIm51bGxcIiA6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zcGxpdChcIiBcIikucG9wKCkuc3BsaXQoXCJdXCIpLnNoaWZ0KCkudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIHRvVXBwZXJDYXNlKHN0cikge1xuICAgIHJldHVybiBzdHIudG9VcHBlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gdW5kZWZpbmVkICYmIG9iaiAhPT0gbnVsbCA/IG9iaiBpbnN0YW5jZW9mIEFycmF5ID8gb2JqIDogdHlwZW9mIG9iai5sZW5ndGggIT09IFwibnVtYmVyXCIgfHwgb2JqLnNwbGl0IHx8IG9iai5zZXRJbnRlcnZhbCB8fCBvYmouY2FsbCA/IFtvYmpdIDogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqKSA6IFtdO1xufVxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG4gICAgdmFyIG9iaiA9IHRhcmdldDtcbiAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gYnVpbGRFeHBzKGlzSVJJKSB7XG4gICAgdmFyIEFMUEhBJCQgPSBcIltBLVphLXpdXCIsXG4gICAgICAgIENSJCA9IFwiW1xcXFx4MERdXCIsXG4gICAgICAgIERJR0lUJCQgPSBcIlswLTldXCIsXG4gICAgICAgIERRVU9URSQkID0gXCJbXFxcXHgyMl1cIixcbiAgICAgICAgSEVYRElHJCQgPSBtZXJnZShESUdJVCQkLCBcIltBLUZhLWZdXCIpLFxuICAgICAgICAvL2Nhc2UtaW5zZW5zaXRpdmVcbiAgICBMRiQkID0gXCJbXFxcXHgwQV1cIixcbiAgICAgICAgU1AkJCA9IFwiW1xcXFx4MjBdXCIsXG4gICAgICAgIFBDVF9FTkNPREVEJCA9IHN1YmV4cChzdWJleHAoXCIlW0VGZWZdXCIgKyBIRVhESUckJCArIFwiJVwiICsgSEVYRElHJCQgKyBIRVhESUckJCArIFwiJVwiICsgSEVYRElHJCQgKyBIRVhESUckJCkgKyBcInxcIiArIHN1YmV4cChcIiVbODlBLUZhLWZdXCIgKyBIRVhESUckJCArIFwiJVwiICsgSEVYRElHJCQgKyBIRVhESUckJCkgKyBcInxcIiArIHN1YmV4cChcIiVcIiArIEhFWERJRyQkICsgSEVYRElHJCQpKSxcbiAgICAgICAgLy9leHBhbmRlZFxuICAgIEdFTl9ERUxJTVMkJCA9IFwiW1xcXFw6XFxcXC9cXFxcP1xcXFwjXFxcXFtcXFxcXVxcXFxAXVwiLFxuICAgICAgICBTVUJfREVMSU1TJCQgPSBcIltcXFxcIVxcXFwkXFxcXCZcXFxcJ1xcXFwoXFxcXClcXFxcKlxcXFwrXFxcXCxcXFxcO1xcXFw9XVwiLFxuICAgICAgICBSRVNFUlZFRCQkID0gbWVyZ2UoR0VOX0RFTElNUyQkLCBTVUJfREVMSU1TJCQpLFxuICAgICAgICBVQ1NDSEFSJCQgPSBpc0lSSSA/IFwiW1xcXFx4QTAtXFxcXHUyMDBEXFxcXHUyMDEwLVxcXFx1MjAyOVxcXFx1MjAyRi1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZFRl1cIiA6IFwiW11cIixcbiAgICAgICAgLy9zdWJzZXQsIGV4Y2x1ZGVzIGJpZGkgY29udHJvbCBjaGFyYWN0ZXJzXG4gICAgSVBSSVZBVEUkJCA9IGlzSVJJID8gXCJbXFxcXHVFMDAwLVxcXFx1RjhGRl1cIiA6IFwiW11cIixcbiAgICAgICAgLy9zdWJzZXRcbiAgICBVTlJFU0VSVkVEJCQgPSBtZXJnZShBTFBIQSQkLCBESUdJVCQkLCBcIltcXFxcLVxcXFwuXFxcXF9cXFxcfl1cIiwgVUNTQ0hBUiQkKSxcbiAgICAgICAgU0NIRU1FJCA9IHN1YmV4cChBTFBIQSQkICsgbWVyZ2UoQUxQSEEkJCwgRElHSVQkJCwgXCJbXFxcXCtcXFxcLVxcXFwuXVwiKSArIFwiKlwiKSxcbiAgICAgICAgVVNFUklORk8kID0gc3ViZXhwKHN1YmV4cChQQ1RfRU5DT0RFRCQgKyBcInxcIiArIG1lcmdlKFVOUkVTRVJWRUQkJCwgU1VCX0RFTElNUyQkLCBcIltcXFxcOl1cIikpICsgXCIqXCIpLFxuICAgICAgICBERUNfT0NURVQkID0gc3ViZXhwKHN1YmV4cChcIjI1WzAtNV1cIikgKyBcInxcIiArIHN1YmV4cChcIjJbMC00XVwiICsgRElHSVQkJCkgKyBcInxcIiArIHN1YmV4cChcIjFcIiArIERJR0lUJCQgKyBESUdJVCQkKSArIFwifFwiICsgc3ViZXhwKFwiWzEtOV1cIiArIERJR0lUJCQpICsgXCJ8XCIgKyBESUdJVCQkKSxcbiAgICAgICAgREVDX09DVEVUX1JFTEFYRUQkID0gc3ViZXhwKHN1YmV4cChcIjI1WzAtNV1cIikgKyBcInxcIiArIHN1YmV4cChcIjJbMC00XVwiICsgRElHSVQkJCkgKyBcInxcIiArIHN1YmV4cChcIjFcIiArIERJR0lUJCQgKyBESUdJVCQkKSArIFwifFwiICsgc3ViZXhwKFwiMD9bMS05XVwiICsgRElHSVQkJCkgKyBcInwwPzA/XCIgKyBESUdJVCQkKSxcbiAgICAgICAgLy9yZWxheGVkIHBhcnNpbmcgcnVsZXNcbiAgICBJUFY0QUREUkVTUyQgPSBzdWJleHAoREVDX09DVEVUX1JFTEFYRUQkICsgXCJcXFxcLlwiICsgREVDX09DVEVUX1JFTEFYRUQkICsgXCJcXFxcLlwiICsgREVDX09DVEVUX1JFTEFYRUQkICsgXCJcXFxcLlwiICsgREVDX09DVEVUX1JFTEFYRUQkKSxcbiAgICAgICAgSDE2JCA9IHN1YmV4cChIRVhESUckJCArIFwiezEsNH1cIiksXG4gICAgICAgIExTMzIkID0gc3ViZXhwKHN1YmV4cChIMTYkICsgXCJcXFxcOlwiICsgSDE2JCkgKyBcInxcIiArIElQVjRBRERSRVNTJCksXG4gICAgICAgIElQVjZBRERSRVNTMSQgPSBzdWJleHAoc3ViZXhwKEgxNiQgKyBcIlxcXFw6XCIpICsgXCJ7Nn1cIiArIExTMzIkKSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICA2KCBoMTYgXCI6XCIgKSBsczMyXG4gICAgSVBWNkFERFJFU1MyJCA9IHN1YmV4cChcIlxcXFw6XFxcXDpcIiArIHN1YmV4cChIMTYkICsgXCJcXFxcOlwiKSArIFwiezV9XCIgKyBMUzMyJCksXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIFwiOjpcIiA1KCBoMTYgXCI6XCIgKSBsczMyXG4gICAgSVBWNkFERFJFU1MzJCA9IHN1YmV4cChzdWJleHAoSDE2JCkgKyBcIj9cXFxcOlxcXFw6XCIgKyBzdWJleHAoSDE2JCArIFwiXFxcXDpcIikgKyBcIns0fVwiICsgTFMzMiQpLFxuICAgICAgICAvL1sgICAgICAgICAgICAgICBoMTYgXSBcIjo6XCIgNCggaDE2IFwiOlwiICkgbHMzMlxuICAgIElQVjZBRERSRVNTNCQgPSBzdWJleHAoc3ViZXhwKHN1YmV4cChIMTYkICsgXCJcXFxcOlwiKSArIFwiezAsMX1cIiArIEgxNiQpICsgXCI/XFxcXDpcXFxcOlwiICsgc3ViZXhwKEgxNiQgKyBcIlxcXFw6XCIpICsgXCJ7M31cIiArIExTMzIkKSxcbiAgICAgICAgLy9bICoxKCBoMTYgXCI6XCIgKSBoMTYgXSBcIjo6XCIgMyggaDE2IFwiOlwiICkgbHMzMlxuICAgIElQVjZBRERSRVNTNSQgPSBzdWJleHAoc3ViZXhwKHN1YmV4cChIMTYkICsgXCJcXFxcOlwiKSArIFwiezAsMn1cIiArIEgxNiQpICsgXCI/XFxcXDpcXFxcOlwiICsgc3ViZXhwKEgxNiQgKyBcIlxcXFw6XCIpICsgXCJ7Mn1cIiArIExTMzIkKSxcbiAgICAgICAgLy9bICoyKCBoMTYgXCI6XCIgKSBoMTYgXSBcIjo6XCIgMiggaDE2IFwiOlwiICkgbHMzMlxuICAgIElQVjZBRERSRVNTNiQgPSBzdWJleHAoc3ViZXhwKHN1YmV4cChIMTYkICsgXCJcXFxcOlwiKSArIFwiezAsM31cIiArIEgxNiQpICsgXCI/XFxcXDpcXFxcOlwiICsgSDE2JCArIFwiXFxcXDpcIiArIExTMzIkKSxcbiAgICAgICAgLy9bICozKCBoMTYgXCI6XCIgKSBoMTYgXSBcIjo6XCIgICAgaDE2IFwiOlwiICAgbHMzMlxuICAgIElQVjZBRERSRVNTNyQgPSBzdWJleHAoc3ViZXhwKHN1YmV4cChIMTYkICsgXCJcXFxcOlwiKSArIFwiezAsNH1cIiArIEgxNiQpICsgXCI/XFxcXDpcXFxcOlwiICsgTFMzMiQpLFxuICAgICAgICAvL1sgKjQoIGgxNiBcIjpcIiApIGgxNiBdIFwiOjpcIiAgICAgICAgICAgICAgbHMzMlxuICAgIElQVjZBRERSRVNTOCQgPSBzdWJleHAoc3ViZXhwKHN1YmV4cChIMTYkICsgXCJcXFxcOlwiKSArIFwiezAsNX1cIiArIEgxNiQpICsgXCI/XFxcXDpcXFxcOlwiICsgSDE2JCksXG4gICAgICAgIC8vWyAqNSggaDE2IFwiOlwiICkgaDE2IF0gXCI6OlwiICAgICAgICAgICAgICBoMTZcbiAgICBJUFY2QUREUkVTUzkkID0gc3ViZXhwKHN1YmV4cChzdWJleHAoSDE2JCArIFwiXFxcXDpcIikgKyBcInswLDZ9XCIgKyBIMTYkKSArIFwiP1xcXFw6XFxcXDpcIiksXG4gICAgICAgIC8vWyAqNiggaDE2IFwiOlwiICkgaDE2IF0gXCI6OlwiXG4gICAgSVBWNkFERFJFU1MkID0gc3ViZXhwKFtJUFY2QUREUkVTUzEkLCBJUFY2QUREUkVTUzIkLCBJUFY2QUREUkVTUzMkLCBJUFY2QUREUkVTUzQkLCBJUFY2QUREUkVTUzUkLCBJUFY2QUREUkVTUzYkLCBJUFY2QUREUkVTUzckLCBJUFY2QUREUkVTUzgkLCBJUFY2QUREUkVTUzkkXS5qb2luKFwifFwiKSksXG4gICAgICAgIFpPTkVJRCQgPSBzdWJleHAoc3ViZXhwKFVOUkVTRVJWRUQkJCArIFwifFwiICsgUENUX0VOQ09ERUQkKSArIFwiK1wiKSxcbiAgICAgICAgLy9SRkMgNjg3NFxuICAgIElQVjZBRERSWiQgPSBzdWJleHAoSVBWNkFERFJFU1MkICsgXCJcXFxcJTI1XCIgKyBaT05FSUQkKSxcbiAgICAgICAgLy9SRkMgNjg3NFxuICAgIElQVjZBRERSWl9SRUxBWEVEJCA9IHN1YmV4cChJUFY2QUREUkVTUyQgKyBzdWJleHAoXCJcXFxcJTI1fFxcXFwlKD8hXCIgKyBIRVhESUckJCArIFwiezJ9KVwiKSArIFpPTkVJRCQpLFxuICAgICAgICAvL1JGQyA2ODc0LCB3aXRoIHJlbGF4ZWQgcGFyc2luZyBydWxlc1xuICAgIElQVkZVVFVSRSQgPSBzdWJleHAoXCJbdlZdXCIgKyBIRVhESUckJCArIFwiK1xcXFwuXCIgKyBtZXJnZShVTlJFU0VSVkVEJCQsIFNVQl9ERUxJTVMkJCwgXCJbXFxcXDpdXCIpICsgXCIrXCIpLFxuICAgICAgICBJUF9MSVRFUkFMJCA9IHN1YmV4cChcIlxcXFxbXCIgKyBzdWJleHAoSVBWNkFERFJaX1JFTEFYRUQkICsgXCJ8XCIgKyBJUFY2QUREUkVTUyQgKyBcInxcIiArIElQVkZVVFVSRSQpICsgXCJcXFxcXVwiKSxcbiAgICAgICAgLy9SRkMgNjg3NFxuICAgIFJFR19OQU1FJCA9IHN1YmV4cChzdWJleHAoUENUX0VOQ09ERUQkICsgXCJ8XCIgKyBtZXJnZShVTlJFU0VSVkVEJCQsIFNVQl9ERUxJTVMkJCkpICsgXCIqXCIpLFxuICAgICAgICBIT1NUJCA9IHN1YmV4cChJUF9MSVRFUkFMJCArIFwifFwiICsgSVBWNEFERFJFU1MkICsgXCIoPyFcIiArIFJFR19OQU1FJCArIFwiKVwiICsgXCJ8XCIgKyBSRUdfTkFNRSQpLFxuICAgICAgICBQT1JUJCA9IHN1YmV4cChESUdJVCQkICsgXCIqXCIpLFxuICAgICAgICBBVVRIT1JJVFkkID0gc3ViZXhwKHN1YmV4cChVU0VSSU5GTyQgKyBcIkBcIikgKyBcIj9cIiArIEhPU1QkICsgc3ViZXhwKFwiXFxcXDpcIiArIFBPUlQkKSArIFwiP1wiKSxcbiAgICAgICAgUENIQVIkID0gc3ViZXhwKFBDVF9FTkNPREVEJCArIFwifFwiICsgbWVyZ2UoVU5SRVNFUlZFRCQkLCBTVUJfREVMSU1TJCQsIFwiW1xcXFw6XFxcXEBdXCIpKSxcbiAgICAgICAgU0VHTUVOVCQgPSBzdWJleHAoUENIQVIkICsgXCIqXCIpLFxuICAgICAgICBTRUdNRU5UX05aJCA9IHN1YmV4cChQQ0hBUiQgKyBcIitcIiksXG4gICAgICAgIFNFR01FTlRfTlpfTkMkID0gc3ViZXhwKHN1YmV4cChQQ1RfRU5DT0RFRCQgKyBcInxcIiArIG1lcmdlKFVOUkVTRVJWRUQkJCwgU1VCX0RFTElNUyQkLCBcIltcXFxcQF1cIikpICsgXCIrXCIpLFxuICAgICAgICBQQVRIX0FCRU1QVFkkID0gc3ViZXhwKHN1YmV4cChcIlxcXFwvXCIgKyBTRUdNRU5UJCkgKyBcIipcIiksXG4gICAgICAgIFBBVEhfQUJTT0xVVEUkID0gc3ViZXhwKFwiXFxcXC9cIiArIHN1YmV4cChTRUdNRU5UX05aJCArIFBBVEhfQUJFTVBUWSQpICsgXCI/XCIpLFxuICAgICAgICAvL3NpbXBsaWZpZWRcbiAgICBQQVRIX05PU0NIRU1FJCA9IHN1YmV4cChTRUdNRU5UX05aX05DJCArIFBBVEhfQUJFTVBUWSQpLFxuICAgICAgICAvL3NpbXBsaWZpZWRcbiAgICBQQVRIX1JPT1RMRVNTJCA9IHN1YmV4cChTRUdNRU5UX05aJCArIFBBVEhfQUJFTVBUWSQpLFxuICAgICAgICAvL3NpbXBsaWZpZWRcbiAgICBQQVRIX0VNUFRZJCA9IFwiKD8hXCIgKyBQQ0hBUiQgKyBcIilcIixcbiAgICAgICAgUEFUSCQgPSBzdWJleHAoUEFUSF9BQkVNUFRZJCArIFwifFwiICsgUEFUSF9BQlNPTFVURSQgKyBcInxcIiArIFBBVEhfTk9TQ0hFTUUkICsgXCJ8XCIgKyBQQVRIX1JPT1RMRVNTJCArIFwifFwiICsgUEFUSF9FTVBUWSQpLFxuICAgICAgICBRVUVSWSQgPSBzdWJleHAoc3ViZXhwKFBDSEFSJCArIFwifFwiICsgbWVyZ2UoXCJbXFxcXC9cXFxcP11cIiwgSVBSSVZBVEUkJCkpICsgXCIqXCIpLFxuICAgICAgICBGUkFHTUVOVCQgPSBzdWJleHAoc3ViZXhwKFBDSEFSJCArIFwifFtcXFxcL1xcXFw/XVwiKSArIFwiKlwiKSxcbiAgICAgICAgSElFUl9QQVJUJCA9IHN1YmV4cChzdWJleHAoXCJcXFxcL1xcXFwvXCIgKyBBVVRIT1JJVFkkICsgUEFUSF9BQkVNUFRZJCkgKyBcInxcIiArIFBBVEhfQUJTT0xVVEUkICsgXCJ8XCIgKyBQQVRIX1JPT1RMRVNTJCArIFwifFwiICsgUEFUSF9FTVBUWSQpLFxuICAgICAgICBVUkkkID0gc3ViZXhwKFNDSEVNRSQgKyBcIlxcXFw6XCIgKyBISUVSX1BBUlQkICsgc3ViZXhwKFwiXFxcXD9cIiArIFFVRVJZJCkgKyBcIj9cIiArIHN1YmV4cChcIlxcXFwjXCIgKyBGUkFHTUVOVCQpICsgXCI/XCIpLFxuICAgICAgICBSRUxBVElWRV9QQVJUJCA9IHN1YmV4cChzdWJleHAoXCJcXFxcL1xcXFwvXCIgKyBBVVRIT1JJVFkkICsgUEFUSF9BQkVNUFRZJCkgKyBcInxcIiArIFBBVEhfQUJTT0xVVEUkICsgXCJ8XCIgKyBQQVRIX05PU0NIRU1FJCArIFwifFwiICsgUEFUSF9FTVBUWSQpLFxuICAgICAgICBSRUxBVElWRSQgPSBzdWJleHAoUkVMQVRJVkVfUEFSVCQgKyBzdWJleHAoXCJcXFxcP1wiICsgUVVFUlkkKSArIFwiP1wiICsgc3ViZXhwKFwiXFxcXCNcIiArIEZSQUdNRU5UJCkgKyBcIj9cIiksXG4gICAgICAgIFVSSV9SRUZFUkVOQ0UkID0gc3ViZXhwKFVSSSQgKyBcInxcIiArIFJFTEFUSVZFJCksXG4gICAgICAgIEFCU09MVVRFX1VSSSQgPSBzdWJleHAoU0NIRU1FJCArIFwiXFxcXDpcIiArIEhJRVJfUEFSVCQgKyBzdWJleHAoXCJcXFxcP1wiICsgUVVFUlkkKSArIFwiP1wiKSxcbiAgICAgICAgR0VORVJJQ19SRUYkID0gXCJeKFwiICsgU0NIRU1FJCArIFwiKVxcXFw6XCIgKyBzdWJleHAoc3ViZXhwKFwiXFxcXC9cXFxcLyhcIiArIHN1YmV4cChcIihcIiArIFVTRVJJTkZPJCArIFwiKUBcIikgKyBcIj8oXCIgKyBIT1NUJCArIFwiKVwiICsgc3ViZXhwKFwiXFxcXDooXCIgKyBQT1JUJCArIFwiKVwiKSArIFwiPylcIikgKyBcIj8oXCIgKyBQQVRIX0FCRU1QVFkkICsgXCJ8XCIgKyBQQVRIX0FCU09MVVRFJCArIFwifFwiICsgUEFUSF9ST09UTEVTUyQgKyBcInxcIiArIFBBVEhfRU1QVFkkICsgXCIpXCIpICsgc3ViZXhwKFwiXFxcXD8oXCIgKyBRVUVSWSQgKyBcIilcIikgKyBcIj9cIiArIHN1YmV4cChcIlxcXFwjKFwiICsgRlJBR01FTlQkICsgXCIpXCIpICsgXCI/JFwiLFxuICAgICAgICBSRUxBVElWRV9SRUYkID0gXCJeKCl7MH1cIiArIHN1YmV4cChzdWJleHAoXCJcXFxcL1xcXFwvKFwiICsgc3ViZXhwKFwiKFwiICsgVVNFUklORk8kICsgXCIpQFwiKSArIFwiPyhcIiArIEhPU1QkICsgXCIpXCIgKyBzdWJleHAoXCJcXFxcOihcIiArIFBPUlQkICsgXCIpXCIpICsgXCI/KVwiKSArIFwiPyhcIiArIFBBVEhfQUJFTVBUWSQgKyBcInxcIiArIFBBVEhfQUJTT0xVVEUkICsgXCJ8XCIgKyBQQVRIX05PU0NIRU1FJCArIFwifFwiICsgUEFUSF9FTVBUWSQgKyBcIilcIikgKyBzdWJleHAoXCJcXFxcPyhcIiArIFFVRVJZJCArIFwiKVwiKSArIFwiP1wiICsgc3ViZXhwKFwiXFxcXCMoXCIgKyBGUkFHTUVOVCQgKyBcIilcIikgKyBcIj8kXCIsXG4gICAgICAgIEFCU09MVVRFX1JFRiQgPSBcIl4oXCIgKyBTQ0hFTUUkICsgXCIpXFxcXDpcIiArIHN1YmV4cChzdWJleHAoXCJcXFxcL1xcXFwvKFwiICsgc3ViZXhwKFwiKFwiICsgVVNFUklORk8kICsgXCIpQFwiKSArIFwiPyhcIiArIEhPU1QkICsgXCIpXCIgKyBzdWJleHAoXCJcXFxcOihcIiArIFBPUlQkICsgXCIpXCIpICsgXCI/KVwiKSArIFwiPyhcIiArIFBBVEhfQUJFTVBUWSQgKyBcInxcIiArIFBBVEhfQUJTT0xVVEUkICsgXCJ8XCIgKyBQQVRIX1JPT1RMRVNTJCArIFwifFwiICsgUEFUSF9FTVBUWSQgKyBcIilcIikgKyBzdWJleHAoXCJcXFxcPyhcIiArIFFVRVJZJCArIFwiKVwiKSArIFwiPyRcIixcbiAgICAgICAgU0FNRURPQ19SRUYkID0gXCJeXCIgKyBzdWJleHAoXCJcXFxcIyhcIiArIEZSQUdNRU5UJCArIFwiKVwiKSArIFwiPyRcIixcbiAgICAgICAgQVVUSE9SSVRZX1JFRiQgPSBcIl5cIiArIHN1YmV4cChcIihcIiArIFVTRVJJTkZPJCArIFwiKUBcIikgKyBcIj8oXCIgKyBIT1NUJCArIFwiKVwiICsgc3ViZXhwKFwiXFxcXDooXCIgKyBQT1JUJCArIFwiKVwiKSArIFwiPyRcIjtcbiAgICByZXR1cm4ge1xuICAgICAgICBOT1RfU0NIRU1FOiBuZXcgUmVnRXhwKG1lcmdlKFwiW15dXCIsIEFMUEhBJCQsIERJR0lUJCQsIFwiW1xcXFwrXFxcXC1cXFxcLl1cIiksIFwiZ1wiKSxcbiAgICAgICAgTk9UX1VTRVJJTkZPOiBuZXcgUmVnRXhwKG1lcmdlKFwiW15cXFxcJVxcXFw6XVwiLCBVTlJFU0VSVkVEJCQsIFNVQl9ERUxJTVMkJCksIFwiZ1wiKSxcbiAgICAgICAgTk9UX0hPU1Q6IG5ldyBSZWdFeHAobWVyZ2UoXCJbXlxcXFwlXFxcXFtcXFxcXVxcXFw6XVwiLCBVTlJFU0VSVkVEJCQsIFNVQl9ERUxJTVMkJCksIFwiZ1wiKSxcbiAgICAgICAgTk9UX1BBVEg6IG5ldyBSZWdFeHAobWVyZ2UoXCJbXlxcXFwlXFxcXC9cXFxcOlxcXFxAXVwiLCBVTlJFU0VSVkVEJCQsIFNVQl9ERUxJTVMkJCksIFwiZ1wiKSxcbiAgICAgICAgTk9UX1BBVEhfTk9TQ0hFTUU6IG5ldyBSZWdFeHAobWVyZ2UoXCJbXlxcXFwlXFxcXC9cXFxcQF1cIiwgVU5SRVNFUlZFRCQkLCBTVUJfREVMSU1TJCQpLCBcImdcIiksXG4gICAgICAgIE5PVF9RVUVSWTogbmV3IFJlZ0V4cChtZXJnZShcIlteXFxcXCVdXCIsIFVOUkVTRVJWRUQkJCwgU1VCX0RFTElNUyQkLCBcIltcXFxcOlxcXFxAXFxcXC9cXFxcP11cIiwgSVBSSVZBVEUkJCksIFwiZ1wiKSxcbiAgICAgICAgTk9UX0ZSQUdNRU5UOiBuZXcgUmVnRXhwKG1lcmdlKFwiW15cXFxcJV1cIiwgVU5SRVNFUlZFRCQkLCBTVUJfREVMSU1TJCQsIFwiW1xcXFw6XFxcXEBcXFxcL1xcXFw/XVwiKSwgXCJnXCIpLFxuICAgICAgICBFU0NBUEU6IG5ldyBSZWdFeHAobWVyZ2UoXCJbXl1cIiwgVU5SRVNFUlZFRCQkLCBTVUJfREVMSU1TJCQpLCBcImdcIiksXG4gICAgICAgIFVOUkVTRVJWRUQ6IG5ldyBSZWdFeHAoVU5SRVNFUlZFRCQkLCBcImdcIiksXG4gICAgICAgIE9USEVSX0NIQVJTOiBuZXcgUmVnRXhwKG1lcmdlKFwiW15cXFxcJV1cIiwgVU5SRVNFUlZFRCQkLCBSRVNFUlZFRCQkKSwgXCJnXCIpLFxuICAgICAgICBQQ1RfRU5DT0RFRDogbmV3IFJlZ0V4cChQQ1RfRU5DT0RFRCQsIFwiZ1wiKSxcbiAgICAgICAgSVBWNEFERFJFU1M6IG5ldyBSZWdFeHAoXCJeKFwiICsgSVBWNEFERFJFU1MkICsgXCIpJFwiKSxcbiAgICAgICAgSVBWNkFERFJFU1M6IG5ldyBSZWdFeHAoXCJeXFxcXFs/KFwiICsgSVBWNkFERFJFU1MkICsgXCIpXCIgKyBzdWJleHAoc3ViZXhwKFwiXFxcXCUyNXxcXFxcJSg/IVwiICsgSEVYRElHJCQgKyBcInsyfSlcIikgKyBcIihcIiArIFpPTkVJRCQgKyBcIilcIikgKyBcIj9cXFxcXT8kXCIpIC8vUkZDIDY4NzQsIHdpdGggcmVsYXhlZCBwYXJzaW5nIHJ1bGVzXG4gICAgfTtcbn1cbnZhciBVUklfUFJPVE9DT0wgPSBidWlsZEV4cHMoZmFsc2UpO1xuXG52YXIgSVJJX1BST1RPQ09MID0gYnVpbGRFeHBzKHRydWUpO1xuXG52YXIgc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHtcbiAgICB2YXIgX2FyciA9IFtdO1xuICAgIHZhciBfbiA9IHRydWU7XG4gICAgdmFyIF9kID0gZmFsc2U7XG4gICAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZCA9IHRydWU7XG4gICAgICBfZSA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hcnI7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHtcbiAgICAgIHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xuICAgIH1cbiAgfTtcbn0oKTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxudmFyIHRvQ29uc3VtYWJsZUFycmF5ID0gZnVuY3Rpb24gKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICAgIHJldHVybiBhcnIyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGFycik7XG4gIH1cbn07XG5cbi8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblxudmFyIG1heEludCA9IDIxNDc0ODM2NDc7IC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuLyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xudmFyIGJhc2UgPSAzNjtcbnZhciB0TWluID0gMTtcbnZhciB0TWF4ID0gMjY7XG52YXIgc2tldyA9IDM4O1xudmFyIGRhbXAgPSA3MDA7XG52YXIgaW5pdGlhbEJpYXMgPSA3MjtcbnZhciBpbml0aWFsTiA9IDEyODsgLy8gMHg4MFxudmFyIGRlbGltaXRlciA9ICctJzsgLy8gJ1xceDJEJ1xuXG4vKiogUmVndWxhciBleHByZXNzaW9ucyAqL1xudmFyIHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vO1xudmFyIHJlZ2V4Tm9uQVNDSUkgPSAvW15cXDAtXFx4N0VdLzsgLy8gbm9uLUFTQ0lJIGNoYXJzXG52YXIgcmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZzsgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG4vKiogRXJyb3IgbWVzc2FnZXMgKi9cbnZhciBlcnJvcnMgPSB7XG5cdCdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG5cdCdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG5cdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG59O1xuXG4vKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG52YXIgYmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuLyoqXG4gKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gZXJyb3IkMSh0eXBlKSB7XG5cdHRocm93IG5ldyBSYW5nZUVycm9yKGVycm9yc1t0eXBlXSk7XG59XG5cbi8qKlxuICogQSBnZW5lcmljIGBBcnJheSNtYXBgIHV0aWxpdHkgZnVuY3Rpb24uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeSBhcnJheVxuICogaXRlbS5cbiAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHR2YXIgcmVzdWx0ID0gW107XG5cdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcbiAqIGFkZHJlc3Nlcy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG4gKiBjaGFyYWN0ZXIuXG4gKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuICogZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHR2YXIgcmVzdWx0ID0gJyc7XG5cdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdC8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuXG5cdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdH1cblx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHR2YXIgbGFiZWxzID0gc3RyaW5nLnNwbGl0KCcuJyk7XG5cdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcbiAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuICogbWF0Y2hpbmcgVVRGLTE2LlxuICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG4gKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG4gKiBAbmFtZSBkZWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuXG4gKi9cbmZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdHZhciBvdXRwdXQgPSBbXTtcblx0dmFyIGNvdW50ZXIgPSAwO1xuXHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHR2YXIgdmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdC8vIEl0J3MgYSBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIuXG5cdFx0XHR2YXIgZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7XG5cdFx0XHRcdC8vIExvdyBzdXJyb2dhdGUuXG5cdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJdCdzIGFuIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZVxuXHRcdFx0XHQvLyBuZXh0IGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci5cblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG4gKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcbiAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG4gKiBAbmFtZSBlbmNvZGVcbiAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG4gKi9cbnZhciB1Y3MyZW5jb2RlID0gZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRyZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQuYXBwbHkoU3RyaW5nLCB0b0NvbnN1bWFibGVBcnJheShhcnJheSkpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG4gKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cbiAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcbiAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuICovXG52YXIgYmFzaWNUb0RpZ2l0ID0gZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRpZiAoY29kZVBvaW50IC0gMHgzMCA8IDB4MEEpIHtcblx0XHRyZXR1cm4gY29kZVBvaW50IC0gMHgxNjtcblx0fVxuXHRpZiAoY29kZVBvaW50IC0gMHg0MSA8IDB4MUEpIHtcblx0XHRyZXR1cm4gY29kZVBvaW50IC0gMHg0MTtcblx0fVxuXHRpZiAoY29kZVBvaW50IC0gMHg2MSA8IDB4MUEpIHtcblx0XHRyZXR1cm4gY29kZVBvaW50IC0gMHg2MTtcblx0fVxuXHRyZXR1cm4gYmFzZTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG4gKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZVxuICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG4gKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS5cbiAqL1xudmFyIGRpZ2l0VG9CYXNpYyA9IGZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuXHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0cmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcbn07XG5cbi8qKlxuICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgYWRhcHQgPSBmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0dmFyIGsgPSAwO1xuXHRkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuXHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdGZvciAoOyAvKiBubyBpbml0aWFsaXphdGlvbiAqL2RlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG5cdFx0ZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuXHR9XG5cdHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuICogc3ltYm9scy5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuICovXG52YXIgZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdC8vIERvbid0IHVzZSBVQ1MtMi5cblx0dmFyIG91dHB1dCA9IFtdO1xuXHR2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cdHZhciBpID0gMDtcblx0dmFyIG4gPSBpbml0aWFsTjtcblx0dmFyIGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0Ly8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cblx0dmFyIGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0aWYgKGJhc2ljIDwgMCkge1xuXHRcdGJhc2ljID0gMDtcblx0fVxuXG5cdGZvciAodmFyIGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdGlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHtcblx0XHRcdGVycm9yJDEoJ25vdC1iYXNpYycpO1xuXHRcdH1cblx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0fVxuXG5cdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRmb3IgKHZhciBpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7KSAvKiBubyBmaW5hbCBleHByZXNzaW9uICove1xuXG5cdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHQvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuXHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHR2YXIgb2xkaSA9IGk7XG5cdFx0Zm9yICh2YXIgdyA9IDEsIGsgPSBiYXNlOzsgLyogbm8gY29uZGl0aW9uICovayArPSBiYXNlKSB7XG5cblx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRlcnJvciQxKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRlcnJvciQxKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdHZhciB0ID0gayA8PSBiaWFzID8gdE1pbiA6IGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXM7XG5cblx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdGVycm9yJDEoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblx0XHR9XG5cblx0XHR2YXIgb3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHQvLyBgaWAgd2FzIHN1cHBvc2VkIHRvIHdyYXAgYXJvdW5kIGZyb20gYG91dGAgdG8gYDBgLFxuXHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0ZXJyb3IkMSgnb3ZlcmZsb3cnKTtcblx0XHR9XG5cblx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdGkgJT0gb3V0O1xuXG5cdFx0Ly8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dC5cblx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cdH1cblxuXHRyZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQuYXBwbHkoU3RyaW5nLCBvdXRwdXQpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICovXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdHZhciBvdXRwdXQgPSBbXTtcblxuXHQvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBhbiBhcnJheSBvZiBVbmljb2RlIGNvZGUgcG9pbnRzLlxuXHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdC8vIENhY2hlIHRoZSBsZW5ndGguXG5cdHZhciBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuXHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZS5cblx0dmFyIG4gPSBpbml0aWFsTjtcblx0dmFyIGRlbHRhID0gMDtcblx0dmFyIGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzLlxuXHR2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG5cdHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuXHR2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cblx0dHJ5IHtcblx0XHRmb3IgKHZhciBfaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcblx0XHRcdHZhciBfY3VycmVudFZhbHVlMiA9IF9zdGVwLnZhbHVlO1xuXG5cdFx0XHRpZiAoX2N1cnJlbnRWYWx1ZTIgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShfY3VycmVudFZhbHVlMikpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0X2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHRcdF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHR9IGZpbmFsbHkge1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHRcdFx0XHRfaXRlcmF0b3IucmV0dXJuKCk7XG5cdFx0XHR9XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuXHRcdFx0XHR0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR2YXIgYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXHR2YXIgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDtcblxuXHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0Ly8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG5cdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIHdpdGggYSBkZWxpbWl0ZXIgdW5sZXNzIGl0J3MgZW1wdHkuXG5cdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdH1cblxuXHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHQvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG5cdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHR2YXIgbSA9IG1heEludDtcblx0XHR2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuXHRcdHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcblx0XHR2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG5cdFx0dHJ5IHtcblx0XHRcdGZvciAodmFyIF9pdGVyYXRvcjIgPSBpbnB1dFtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuXHRcdFx0XHR2YXIgY3VycmVudFZhbHVlID0gX3N0ZXAyLnZhbHVlO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG5cdFx0XHRcdFx0bSA9IGN1cnJlbnRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG5cdFx0XHQvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvdy5cblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG5cdFx0XHRfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcblx0XHRcdFx0XHRfaXRlcmF0b3IyLnJldHVybigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG5cdFx0XHRcdFx0dGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0ZXJyb3IkMSgnb3ZlcmZsb3cnKTtcblx0XHR9XG5cblx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdG4gPSBtO1xuXG5cdFx0dmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcblx0XHR2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG5cdFx0dmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuXHRcdHRyeSB7XG5cdFx0XHRmb3IgKHZhciBfaXRlcmF0b3IzID0gaW5wdXRbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcblx0XHRcdFx0dmFyIF9jdXJyZW50VmFsdWUgPSBfc3RlcDMudmFsdWU7XG5cblx0XHRcdFx0aWYgKF9jdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvciQxKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChfY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cblx0XHRcdFx0XHR2YXIgcSA9IGRlbHRhO1xuXHRcdFx0XHRcdGZvciAodmFyIGsgPSBiYXNlOzsgLyogbm8gY29uZGl0aW9uICovayArPSBiYXNlKSB7XG5cdFx0XHRcdFx0XHR2YXIgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiBrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dmFyIHFNaW51c1QgPSBxIC0gdDtcblx0XHRcdFx0XHRcdHZhciBiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpKTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG5cdFx0XHRfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcblx0XHRcdFx0XHRfaXRlcmF0b3IzLnJldHVybigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG5cdFx0XHRcdFx0dGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0KytkZWx0YTtcblx0XHQrK247XG5cdH1cblx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzc1xuICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG4gKiBjb252ZXJ0ZWQgdG8gVW5pY29kZS5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuICogY29udmVydCB0byBVbmljb2RlLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG4gKiBzdHJpbmcuXG4gKi9cbnZhciB0b1VuaWNvZGUgPSBmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcblx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24gKHN0cmluZykge1xuXHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKSA/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSkgOiBzdHJpbmc7XG5cdH0pO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cbiAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluXG4gKiBBU0NJSS5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGFcbiAqIFVuaWNvZGUgc3RyaW5nLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuICogZW1haWwgYWRkcmVzcy5cbiAqL1xudmFyIHRvQVNDSUkgPSBmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG5cdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uIChzdHJpbmcpIHtcblx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZykgPyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKSA6IHN0cmluZztcblx0fSk7XG59O1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuLyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xudmFyIHB1bnljb2RlID0ge1xuXHQvKipcbiAgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG4gICogQG1lbWJlck9mIHB1bnljb2RlXG4gICogQHR5cGUgU3RyaW5nXG4gICovXG5cdCd2ZXJzaW9uJzogJzIuMS4wJyxcblx0LyoqXG4gICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcbiAgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuICAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuICAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICAqIEB0eXBlIE9iamVjdFxuICAqL1xuXHQndWNzMic6IHtcblx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHR9LFxuXHQnZGVjb2RlJzogZGVjb2RlLFxuXHQnZW5jb2RlJzogZW5jb2RlLFxuXHQndG9BU0NJSSc6IHRvQVNDSUksXG5cdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcbn07XG5cbi8qKlxuICogVVJJLmpzXG4gKlxuICogQGZpbGVvdmVydmlldyBBbiBSRkMgMzk4NiBjb21wbGlhbnQsIHNjaGVtZSBleHRlbmRhYmxlIFVSSSBwYXJzaW5nL3ZhbGlkYXRpbmcvcmVzb2x2aW5nIGxpYnJhcnkgZm9yIEphdmFTY3JpcHQuXG4gKiBAYXV0aG9yIDxhIGhyZWY9XCJtYWlsdG86Z2FyeS5jb3VydEBnbWFpbC5jb21cIj5HYXJ5IENvdXJ0PC9hPlxuICogQHNlZSBodHRwOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvdXJpLWpzXG4gKi9cbi8qKlxuICogQ29weXJpZ2h0IDIwMTEgR2FyeSBDb3VydC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmVcbiAqIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqICAgIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mXG4gKiAgICAgICBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogICAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3RcbiAqICAgICAgIG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzXG4gKiAgICAgICBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBHQVJZIENPVVJUIGBgQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRFxuICogV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEdBUlkgQ09VUlQgT1JcbiAqIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SXG4gKiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OXG4gKiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUZcbiAqIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqIFRoZSB2aWV3cyBhbmQgY29uY2x1c2lvbnMgY29udGFpbmVkIGluIHRoZSBzb2Z0d2FyZSBhbmQgZG9jdW1lbnRhdGlvbiBhcmUgdGhvc2Ugb2YgdGhlXG4gKiBhdXRob3JzIGFuZCBzaG91bGQgbm90IGJlIGludGVycHJldGVkIGFzIHJlcHJlc2VudGluZyBvZmZpY2lhbCBwb2xpY2llcywgZWl0aGVyIGV4cHJlc3NlZFxuICogb3IgaW1wbGllZCwgb2YgR2FyeSBDb3VydC5cbiAqL1xudmFyIFNDSEVNRVMgPSB7fTtcbmZ1bmN0aW9uIHBjdEVuY0NoYXIoY2hyKSB7XG4gICAgdmFyIGMgPSBjaHIuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgZSA9IHZvaWQgMDtcbiAgICBpZiAoYyA8IDE2KSBlID0gXCIlMFwiICsgYy50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtlbHNlIGlmIChjIDwgMTI4KSBlID0gXCIlXCIgKyBjLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO2Vsc2UgaWYgKGMgPCAyMDQ4KSBlID0gXCIlXCIgKyAoYyA+PiA2IHwgMTkyKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArIFwiJVwiICsgKGMgJiA2MyB8IDEyOCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7ZWxzZSBlID0gXCIlXCIgKyAoYyA+PiAxMiB8IDIyNCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgKyBcIiVcIiArIChjID4+IDYgJiA2MyB8IDEyOCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgKyBcIiVcIiArIChjICYgNjMgfCAxMjgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gcGN0RGVjQ2hhcnMoc3RyKSB7XG4gICAgdmFyIG5ld1N0ciA9IFwiXCI7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBpbCA9IHN0ci5sZW5ndGg7XG4gICAgd2hpbGUgKGkgPCBpbCkge1xuICAgICAgICB2YXIgYyA9IHBhcnNlSW50KHN0ci5zdWJzdHIoaSArIDEsIDIpLCAxNik7XG4gICAgICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICAgICAgICBuZXdTdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgfSBlbHNlIGlmIChjID49IDE5NCAmJiBjIDwgMjI0KSB7XG4gICAgICAgICAgICBpZiAoaWwgLSBpID49IDYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYzIgPSBwYXJzZUludChzdHIuc3Vic3RyKGkgKyA0LCAyKSwgMTYpO1xuICAgICAgICAgICAgICAgIG5ld1N0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjICYgMzEpIDw8IDYgfCBjMiAmIDYzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3U3RyICs9IHN0ci5zdWJzdHIoaSwgNik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpICs9IDY7XG4gICAgICAgIH0gZWxzZSBpZiAoYyA+PSAyMjQpIHtcbiAgICAgICAgICAgIGlmIChpbCAtIGkgPj0gOSkge1xuICAgICAgICAgICAgICAgIHZhciBfYyA9IHBhcnNlSW50KHN0ci5zdWJzdHIoaSArIDQsIDIpLCAxNik7XG4gICAgICAgICAgICAgICAgdmFyIGMzID0gcGFyc2VJbnQoc3RyLnN1YnN0cihpICsgNywgMiksIDE2KTtcbiAgICAgICAgICAgICAgICBuZXdTdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyAmIDE1KSA8PCAxMiB8IChfYyAmIDYzKSA8PCA2IHwgYzMgJiA2Myk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1N0ciArPSBzdHIuc3Vic3RyKGksIDkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSArPSA5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3U3RyICs9IHN0ci5zdWJzdHIoaSwgMyk7XG4gICAgICAgICAgICBpICs9IDM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1N0cjtcbn1cbmZ1bmN0aW9uIF9ub3JtYWxpemVDb21wb25lbnRFbmNvZGluZyhjb21wb25lbnRzLCBwcm90b2NvbCkge1xuICAgIGZ1bmN0aW9uIGRlY29kZVVucmVzZXJ2ZWQoc3RyKSB7XG4gICAgICAgIHZhciBkZWNTdHIgPSBwY3REZWNDaGFycyhzdHIpO1xuICAgICAgICByZXR1cm4gIWRlY1N0ci5tYXRjaChwcm90b2NvbC5VTlJFU0VSVkVEKSA/IHN0ciA6IGRlY1N0cjtcbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudHMuc2NoZW1lKSBjb21wb25lbnRzLnNjaGVtZSA9IFN0cmluZyhjb21wb25lbnRzLnNjaGVtZSkucmVwbGFjZShwcm90b2NvbC5QQ1RfRU5DT0RFRCwgZGVjb2RlVW5yZXNlcnZlZCkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKHByb3RvY29sLk5PVF9TQ0hFTUUsIFwiXCIpO1xuICAgIGlmIChjb21wb25lbnRzLnVzZXJpbmZvICE9PSB1bmRlZmluZWQpIGNvbXBvbmVudHMudXNlcmluZm8gPSBTdHJpbmcoY29tcG9uZW50cy51c2VyaW5mbykucmVwbGFjZShwcm90b2NvbC5QQ1RfRU5DT0RFRCwgZGVjb2RlVW5yZXNlcnZlZCkucmVwbGFjZShwcm90b2NvbC5OT1RfVVNFUklORk8sIHBjdEVuY0NoYXIpLnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIHRvVXBwZXJDYXNlKTtcbiAgICBpZiAoY29tcG9uZW50cy5ob3N0ICE9PSB1bmRlZmluZWQpIGNvbXBvbmVudHMuaG9zdCA9IFN0cmluZyhjb21wb25lbnRzLmhvc3QpLnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIGRlY29kZVVucmVzZXJ2ZWQpLnRvTG93ZXJDYXNlKCkucmVwbGFjZShwcm90b2NvbC5OT1RfSE9TVCwgcGN0RW5jQ2hhcikucmVwbGFjZShwcm90b2NvbC5QQ1RfRU5DT0RFRCwgdG9VcHBlckNhc2UpO1xuICAgIGlmIChjb21wb25lbnRzLnBhdGggIT09IHVuZGVmaW5lZCkgY29tcG9uZW50cy5wYXRoID0gU3RyaW5nKGNvbXBvbmVudHMucGF0aCkucmVwbGFjZShwcm90b2NvbC5QQ1RfRU5DT0RFRCwgZGVjb2RlVW5yZXNlcnZlZCkucmVwbGFjZShjb21wb25lbnRzLnNjaGVtZSA/IHByb3RvY29sLk5PVF9QQVRIIDogcHJvdG9jb2wuTk9UX1BBVEhfTk9TQ0hFTUUsIHBjdEVuY0NoYXIpLnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIHRvVXBwZXJDYXNlKTtcbiAgICBpZiAoY29tcG9uZW50cy5xdWVyeSAhPT0gdW5kZWZpbmVkKSBjb21wb25lbnRzLnF1ZXJ5ID0gU3RyaW5nKGNvbXBvbmVudHMucXVlcnkpLnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIGRlY29kZVVucmVzZXJ2ZWQpLnJlcGxhY2UocHJvdG9jb2wuTk9UX1FVRVJZLCBwY3RFbmNDaGFyKS5yZXBsYWNlKHByb3RvY29sLlBDVF9FTkNPREVELCB0b1VwcGVyQ2FzZSk7XG4gICAgaWYgKGNvbXBvbmVudHMuZnJhZ21lbnQgIT09IHVuZGVmaW5lZCkgY29tcG9uZW50cy5mcmFnbWVudCA9IFN0cmluZyhjb21wb25lbnRzLmZyYWdtZW50KS5yZXBsYWNlKHByb3RvY29sLlBDVF9FTkNPREVELCBkZWNvZGVVbnJlc2VydmVkKS5yZXBsYWNlKHByb3RvY29sLk5PVF9GUkFHTUVOVCwgcGN0RW5jQ2hhcikucmVwbGFjZShwcm90b2NvbC5QQ1RfRU5DT0RFRCwgdG9VcHBlckNhc2UpO1xuICAgIHJldHVybiBjb21wb25lbnRzO1xufVxuXG5mdW5jdGlvbiBfc3RyaXBMZWFkaW5nWmVyb3Moc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eMCooLiopLywgXCIkMVwiKSB8fCBcIjBcIjtcbn1cbmZ1bmN0aW9uIF9ub3JtYWxpemVJUHY0KGhvc3QsIHByb3RvY29sKSB7XG4gICAgdmFyIG1hdGNoZXMgPSBob3N0Lm1hdGNoKHByb3RvY29sLklQVjRBRERSRVNTKSB8fCBbXTtcblxuICAgIHZhciBfbWF0Y2hlcyA9IHNsaWNlZFRvQXJyYXkobWF0Y2hlcywgMiksXG4gICAgICAgIGFkZHJlc3MgPSBfbWF0Y2hlc1sxXTtcblxuICAgIGlmIChhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBhZGRyZXNzLnNwbGl0KFwiLlwiKS5tYXAoX3N0cmlwTGVhZGluZ1plcm9zKS5qb2luKFwiLlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaG9zdDtcbiAgICB9XG59XG5mdW5jdGlvbiBfbm9ybWFsaXplSVB2Nihob3N0LCBwcm90b2NvbCkge1xuICAgIHZhciBtYXRjaGVzID0gaG9zdC5tYXRjaChwcm90b2NvbC5JUFY2QUREUkVTUykgfHwgW107XG5cbiAgICB2YXIgX21hdGNoZXMyID0gc2xpY2VkVG9BcnJheShtYXRjaGVzLCAzKSxcbiAgICAgICAgYWRkcmVzcyA9IF9tYXRjaGVzMlsxXSxcbiAgICAgICAgem9uZSA9IF9tYXRjaGVzMlsyXTtcblxuICAgIGlmIChhZGRyZXNzKSB7XG4gICAgICAgIHZhciBfYWRkcmVzcyR0b0xvd2VyQ2FzZSQgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCkuc3BsaXQoJzo6JykucmV2ZXJzZSgpLFxuICAgICAgICAgICAgX2FkZHJlc3MkdG9Mb3dlckNhc2UkMiA9IHNsaWNlZFRvQXJyYXkoX2FkZHJlc3MkdG9Mb3dlckNhc2UkLCAyKSxcbiAgICAgICAgICAgIGxhc3QgPSBfYWRkcmVzcyR0b0xvd2VyQ2FzZSQyWzBdLFxuICAgICAgICAgICAgZmlyc3QgPSBfYWRkcmVzcyR0b0xvd2VyQ2FzZSQyWzFdO1xuXG4gICAgICAgIHZhciBmaXJzdEZpZWxkcyA9IGZpcnN0ID8gZmlyc3Quc3BsaXQoXCI6XCIpLm1hcChfc3RyaXBMZWFkaW5nWmVyb3MpIDogW107XG4gICAgICAgIHZhciBsYXN0RmllbGRzID0gbGFzdC5zcGxpdChcIjpcIikubWFwKF9zdHJpcExlYWRpbmdaZXJvcyk7XG4gICAgICAgIHZhciBpc0xhc3RGaWVsZElQdjRBZGRyZXNzID0gcHJvdG9jb2wuSVBWNEFERFJFU1MudGVzdChsYXN0RmllbGRzW2xhc3RGaWVsZHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICB2YXIgZmllbGRDb3VudCA9IGlzTGFzdEZpZWxkSVB2NEFkZHJlc3MgPyA3IDogODtcbiAgICAgICAgdmFyIGxhc3RGaWVsZHNTdGFydCA9IGxhc3RGaWVsZHMubGVuZ3RoIC0gZmllbGRDb3VudDtcbiAgICAgICAgdmFyIGZpZWxkcyA9IEFycmF5KGZpZWxkQ291bnQpO1xuICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGZpZWxkQ291bnQ7ICsreCkge1xuICAgICAgICAgICAgZmllbGRzW3hdID0gZmlyc3RGaWVsZHNbeF0gfHwgbGFzdEZpZWxkc1tsYXN0RmllbGRzU3RhcnQgKyB4XSB8fCAnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNMYXN0RmllbGRJUHY0QWRkcmVzcykge1xuICAgICAgICAgICAgZmllbGRzW2ZpZWxkQ291bnQgLSAxXSA9IF9ub3JtYWxpemVJUHY0KGZpZWxkc1tmaWVsZENvdW50IC0gMV0sIHByb3RvY29sKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWxsWmVyb0ZpZWxkcyA9IGZpZWxkcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZmllbGQsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWZpZWxkIHx8IGZpZWxkID09PSBcIjBcIikge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0TG9uZ2VzdCA9IGFjY1thY2MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RMb25nZXN0ICYmIGxhc3RMb25nZXN0LmluZGV4ICsgbGFzdExvbmdlc3QubGVuZ3RoID09PSBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBsYXN0TG9uZ2VzdC5sZW5ndGgrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY2MucHVzaCh7IGluZGV4OiBpbmRleCwgbGVuZ3RoOiAxIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgdmFyIGxvbmdlc3RaZXJvRmllbGRzID0gYWxsWmVyb0ZpZWxkcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfSlbMF07XG4gICAgICAgIHZhciBuZXdIb3N0ID0gdm9pZCAwO1xuICAgICAgICBpZiAobG9uZ2VzdFplcm9GaWVsZHMgJiYgbG9uZ2VzdFplcm9GaWVsZHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmFyIG5ld0ZpcnN0ID0gZmllbGRzLnNsaWNlKDAsIGxvbmdlc3RaZXJvRmllbGRzLmluZGV4KTtcbiAgICAgICAgICAgIHZhciBuZXdMYXN0ID0gZmllbGRzLnNsaWNlKGxvbmdlc3RaZXJvRmllbGRzLmluZGV4ICsgbG9uZ2VzdFplcm9GaWVsZHMubGVuZ3RoKTtcbiAgICAgICAgICAgIG5ld0hvc3QgPSBuZXdGaXJzdC5qb2luKFwiOlwiKSArIFwiOjpcIiArIG5ld0xhc3Quam9pbihcIjpcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdIb3N0ID0gZmllbGRzLmpvaW4oXCI6XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh6b25lKSB7XG4gICAgICAgICAgICBuZXdIb3N0ICs9IFwiJVwiICsgem9uZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3SG9zdDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaG9zdDtcbiAgICB9XG59XG52YXIgVVJJX1BBUlNFID0gL14oPzooW146XFwvPyNdKyk6KT8oPzpcXC9cXC8oKD86KFteXFwvPyNAXSopQCk/KFxcW1teXFwvPyNcXF1dK1xcXXxbXlxcLz8jOl0qKSg/OlxcOihcXGQqKSk/KSk/KFtePyNdKikoPzpcXD8oW14jXSopKT8oPzojKCg/Oi58XFxufFxccikqKSk/L2k7XG52YXIgTk9fTUFUQ0hfSVNfVU5ERUZJTkVEID0gXCJcIi5tYXRjaCgvKCl7MH0vKVsxXSA9PT0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gcGFyc2UodXJpU3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIGNvbXBvbmVudHMgPSB7fTtcbiAgICB2YXIgcHJvdG9jb2wgPSBvcHRpb25zLmlyaSAhPT0gZmFsc2UgPyBJUklfUFJPVE9DT0wgOiBVUklfUFJPVE9DT0w7XG4gICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlID09PSBcInN1ZmZpeFwiKSB1cmlTdHJpbmcgPSAob3B0aW9ucy5zY2hlbWUgPyBvcHRpb25zLnNjaGVtZSArIFwiOlwiIDogXCJcIikgKyBcIi8vXCIgKyB1cmlTdHJpbmc7XG4gICAgdmFyIG1hdGNoZXMgPSB1cmlTdHJpbmcubWF0Y2goVVJJX1BBUlNFKTtcbiAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICBpZiAoTk9fTUFUQ0hfSVNfVU5ERUZJTkVEKSB7XG4gICAgICAgICAgICAvL3N0b3JlIGVhY2ggY29tcG9uZW50XG4gICAgICAgICAgICBjb21wb25lbnRzLnNjaGVtZSA9IG1hdGNoZXNbMV07XG4gICAgICAgICAgICBjb21wb25lbnRzLnVzZXJpbmZvID0gbWF0Y2hlc1szXTtcbiAgICAgICAgICAgIGNvbXBvbmVudHMuaG9zdCA9IG1hdGNoZXNbNF07XG4gICAgICAgICAgICBjb21wb25lbnRzLnBvcnQgPSBwYXJzZUludChtYXRjaGVzWzVdLCAxMCk7XG4gICAgICAgICAgICBjb21wb25lbnRzLnBhdGggPSBtYXRjaGVzWzZdIHx8IFwiXCI7XG4gICAgICAgICAgICBjb21wb25lbnRzLnF1ZXJ5ID0gbWF0Y2hlc1s3XTtcbiAgICAgICAgICAgIGNvbXBvbmVudHMuZnJhZ21lbnQgPSBtYXRjaGVzWzhdO1xuICAgICAgICAgICAgLy9maXggcG9ydCBudW1iZXJcbiAgICAgICAgICAgIGlmIChpc05hTihjb21wb25lbnRzLnBvcnQpKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50cy5wb3J0ID0gbWF0Y2hlc1s1XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vSUUgRklYIGZvciBpbXByb3BlciBSZWdFeHAgbWF0Y2hpbmdcbiAgICAgICAgICAgIC8vc3RvcmUgZWFjaCBjb21wb25lbnRcbiAgICAgICAgICAgIGNvbXBvbmVudHMuc2NoZW1lID0gbWF0Y2hlc1sxXSB8fCB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb21wb25lbnRzLnVzZXJpbmZvID0gdXJpU3RyaW5nLmluZGV4T2YoXCJAXCIpICE9PSAtMSA/IG1hdGNoZXNbM10gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb21wb25lbnRzLmhvc3QgPSB1cmlTdHJpbmcuaW5kZXhPZihcIi8vXCIpICE9PSAtMSA/IG1hdGNoZXNbNF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb21wb25lbnRzLnBvcnQgPSBwYXJzZUludChtYXRjaGVzWzVdLCAxMCk7XG4gICAgICAgICAgICBjb21wb25lbnRzLnBhdGggPSBtYXRjaGVzWzZdIHx8IFwiXCI7XG4gICAgICAgICAgICBjb21wb25lbnRzLnF1ZXJ5ID0gdXJpU3RyaW5nLmluZGV4T2YoXCI/XCIpICE9PSAtMSA/IG1hdGNoZXNbN10gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb21wb25lbnRzLmZyYWdtZW50ID0gdXJpU3RyaW5nLmluZGV4T2YoXCIjXCIpICE9PSAtMSA/IG1hdGNoZXNbOF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAvL2ZpeCBwb3J0IG51bWJlclxuICAgICAgICAgICAgaWYgKGlzTmFOKGNvbXBvbmVudHMucG9ydCkpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzLnBvcnQgPSB1cmlTdHJpbmcubWF0Y2goL1xcL1xcLyg/Oi58XFxuKSpcXDooPzpcXC98XFw/fFxcI3wkKS8pID8gbWF0Y2hlc1s0XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcG9uZW50cy5ob3N0KSB7XG4gICAgICAgICAgICAvL25vcm1hbGl6ZSBJUCBob3N0c1xuICAgICAgICAgICAgY29tcG9uZW50cy5ob3N0ID0gX25vcm1hbGl6ZUlQdjYoX25vcm1hbGl6ZUlQdjQoY29tcG9uZW50cy5ob3N0LCBwcm90b2NvbCksIHByb3RvY29sKTtcbiAgICAgICAgfVxuICAgICAgICAvL2RldGVybWluZSByZWZlcmVuY2UgdHlwZVxuICAgICAgICBpZiAoY29tcG9uZW50cy5zY2hlbWUgPT09IHVuZGVmaW5lZCAmJiBjb21wb25lbnRzLnVzZXJpbmZvID09PSB1bmRlZmluZWQgJiYgY29tcG9uZW50cy5ob3N0ID09PSB1bmRlZmluZWQgJiYgY29tcG9uZW50cy5wb3J0ID09PSB1bmRlZmluZWQgJiYgIWNvbXBvbmVudHMucGF0aCAmJiBjb21wb25lbnRzLnF1ZXJ5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHMucmVmZXJlbmNlID0gXCJzYW1lLWRvY3VtZW50XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoY29tcG9uZW50cy5zY2hlbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tcG9uZW50cy5yZWZlcmVuY2UgPSBcInJlbGF0aXZlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoY29tcG9uZW50cy5mcmFnbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21wb25lbnRzLnJlZmVyZW5jZSA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHMucmVmZXJlbmNlID0gXCJ1cmlcIjtcbiAgICAgICAgfVxuICAgICAgICAvL2NoZWNrIGZvciByZWZlcmVuY2UgZXJyb3JzXG4gICAgICAgIGlmIChvcHRpb25zLnJlZmVyZW5jZSAmJiBvcHRpb25zLnJlZmVyZW5jZSAhPT0gXCJzdWZmaXhcIiAmJiBvcHRpb25zLnJlZmVyZW5jZSAhPT0gY29tcG9uZW50cy5yZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHMuZXJyb3IgPSBjb21wb25lbnRzLmVycm9yIHx8IFwiVVJJIGlzIG5vdCBhIFwiICsgb3B0aW9ucy5yZWZlcmVuY2UgKyBcIiByZWZlcmVuY2UuXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy9maW5kIHNjaGVtZSBoYW5kbGVyXG4gICAgICAgIHZhciBzY2hlbWVIYW5kbGVyID0gU0NIRU1FU1sob3B0aW9ucy5zY2hlbWUgfHwgY29tcG9uZW50cy5zY2hlbWUgfHwgXCJcIikudG9Mb3dlckNhc2UoKV07XG4gICAgICAgIC8vY2hlY2sgaWYgc2NoZW1lIGNhbid0IGhhbmRsZSBJUklzXG4gICAgICAgIGlmICghb3B0aW9ucy51bmljb2RlU3VwcG9ydCAmJiAoIXNjaGVtZUhhbmRsZXIgfHwgIXNjaGVtZUhhbmRsZXIudW5pY29kZVN1cHBvcnQpKSB7XG4gICAgICAgICAgICAvL2lmIGhvc3QgY29tcG9uZW50IGlzIGEgZG9tYWluIG5hbWVcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRzLmhvc3QgJiYgKG9wdGlvbnMuZG9tYWluSG9zdCB8fCBzY2hlbWVIYW5kbGVyICYmIHNjaGVtZUhhbmRsZXIuZG9tYWluSG9zdCkpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnZlcnQgVW5pY29kZSBJRE4gLT4gQVNDSUkgSUROXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cy5ob3N0ID0gcHVueWNvZGUudG9BU0NJSShjb21wb25lbnRzLmhvc3QucmVwbGFjZShwcm90b2NvbC5QQ1RfRU5DT0RFRCwgcGN0RGVjQ2hhcnMpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cy5lcnJvciA9IGNvbXBvbmVudHMuZXJyb3IgfHwgXCJIb3N0J3MgZG9tYWluIG5hbWUgY2FuIG5vdCBiZSBjb252ZXJ0ZWQgdG8gQVNDSUkgdmlhIHB1bnljb2RlOiBcIiArIGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9jb252ZXJ0IElSSSAtPiBVUklcbiAgICAgICAgICAgIF9ub3JtYWxpemVDb21wb25lbnRFbmNvZGluZyhjb21wb25lbnRzLCBVUklfUFJPVE9DT0wpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9ub3JtYWxpemUgZW5jb2RpbmdzXG4gICAgICAgICAgICBfbm9ybWFsaXplQ29tcG9uZW50RW5jb2RpbmcoY29tcG9uZW50cywgcHJvdG9jb2wpO1xuICAgICAgICB9XG4gICAgICAgIC8vcGVyZm9ybSBzY2hlbWUgc3BlY2lmaWMgcGFyc2luZ1xuICAgICAgICBpZiAoc2NoZW1lSGFuZGxlciAmJiBzY2hlbWVIYW5kbGVyLnBhcnNlKSB7XG4gICAgICAgICAgICBzY2hlbWVIYW5kbGVyLnBhcnNlKGNvbXBvbmVudHMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29tcG9uZW50cy5lcnJvciA9IGNvbXBvbmVudHMuZXJyb3IgfHwgXCJVUkkgY2FuIG5vdCBiZSBwYXJzZWQuXCI7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnRzO1xufVxuXG5mdW5jdGlvbiBfcmVjb21wb3NlQXV0aG9yaXR5KGNvbXBvbmVudHMsIG9wdGlvbnMpIHtcbiAgICB2YXIgcHJvdG9jb2wgPSBvcHRpb25zLmlyaSAhPT0gZmFsc2UgPyBJUklfUFJPVE9DT0wgOiBVUklfUFJPVE9DT0w7XG4gICAgdmFyIHVyaVRva2VucyA9IFtdO1xuICAgIGlmIChjb21wb25lbnRzLnVzZXJpbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXJpVG9rZW5zLnB1c2goY29tcG9uZW50cy51c2VyaW5mbyk7XG4gICAgICAgIHVyaVRva2Vucy5wdXNoKFwiQFwiKTtcbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudHMuaG9zdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vbm9ybWFsaXplIElQIGhvc3RzLCBhZGQgYnJhY2tldHMgYW5kIGVzY2FwZSB6b25lIHNlcGFyYXRvciBmb3IgSVB2NlxuICAgICAgICB1cmlUb2tlbnMucHVzaChfbm9ybWFsaXplSVB2Nihfbm9ybWFsaXplSVB2NChTdHJpbmcoY29tcG9uZW50cy5ob3N0KSwgcHJvdG9jb2wpLCBwcm90b2NvbCkucmVwbGFjZShwcm90b2NvbC5JUFY2QUREUkVTUywgZnVuY3Rpb24gKF8sICQxLCAkMikge1xuICAgICAgICAgICAgcmV0dXJuIFwiW1wiICsgJDEgKyAoJDIgPyBcIiUyNVwiICsgJDIgOiBcIlwiKSArIFwiXVwiO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29tcG9uZW50cy5wb3J0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHVyaVRva2Vucy5wdXNoKFwiOlwiKTtcbiAgICAgICAgdXJpVG9rZW5zLnB1c2goY29tcG9uZW50cy5wb3J0LnRvU3RyaW5nKDEwKSk7XG4gICAgfVxuICAgIHJldHVybiB1cmlUb2tlbnMubGVuZ3RoID8gdXJpVG9rZW5zLmpvaW4oXCJcIikgOiB1bmRlZmluZWQ7XG59XG5cbnZhciBSRFMxID0gL15cXC5cXC4/XFwvLztcbnZhciBSRFMyID0gL15cXC9cXC4oXFwvfCQpLztcbnZhciBSRFMzID0gL15cXC9cXC5cXC4oXFwvfCQpLztcbnZhciBSRFM1ID0gL15cXC8/KD86LnxcXG4pKj8oPz1cXC98JCkvO1xuZnVuY3Rpb24gcmVtb3ZlRG90U2VnbWVudHMoaW5wdXQpIHtcbiAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgd2hpbGUgKGlucHV0Lmxlbmd0aCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goUkRTMSkpIHtcbiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShSRFMxLCBcIlwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5tYXRjaChSRFMyKSkge1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKFJEUzIsIFwiL1wiKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5tYXRjaChSRFMzKSkge1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKFJEUzMsIFwiL1wiKTtcbiAgICAgICAgICAgIG91dHB1dC5wb3AoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PT0gXCIuXCIgfHwgaW5wdXQgPT09IFwiLi5cIikge1xuICAgICAgICAgICAgaW5wdXQgPSBcIlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGltID0gaW5wdXQubWF0Y2goUkRTNSk7XG4gICAgICAgICAgICBpZiAoaW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGltWzBdO1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuc2xpY2Uocy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGRvdCBzZWdtZW50IGNvbmRpdGlvblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oXCJcIik7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZShjb21wb25lbnRzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIHByb3RvY29sID0gb3B0aW9ucy5pcmkgPyBJUklfUFJPVE9DT0wgOiBVUklfUFJPVE9DT0w7XG4gICAgdmFyIHVyaVRva2VucyA9IFtdO1xuICAgIC8vZmluZCBzY2hlbWUgaGFuZGxlclxuICAgIHZhciBzY2hlbWVIYW5kbGVyID0gU0NIRU1FU1sob3B0aW9ucy5zY2hlbWUgfHwgY29tcG9uZW50cy5zY2hlbWUgfHwgXCJcIikudG9Mb3dlckNhc2UoKV07XG4gICAgLy9wZXJmb3JtIHNjaGVtZSBzcGVjaWZpYyBzZXJpYWxpemF0aW9uXG4gICAgaWYgKHNjaGVtZUhhbmRsZXIgJiYgc2NoZW1lSGFuZGxlci5zZXJpYWxpemUpIHNjaGVtZUhhbmRsZXIuc2VyaWFsaXplKGNvbXBvbmVudHMsIG9wdGlvbnMpO1xuICAgIGlmIChjb21wb25lbnRzLmhvc3QpIHtcbiAgICAgICAgLy9pZiBob3N0IGNvbXBvbmVudCBpcyBhbiBJUHY2IGFkZHJlc3NcbiAgICAgICAgaWYgKHByb3RvY29sLklQVjZBRERSRVNTLnRlc3QoY29tcG9uZW50cy5ob3N0KSkge31cbiAgICAgICAgLy9UT0RPOiBub3JtYWxpemUgSVB2NiBhZGRyZXNzIGFzIHBlciBSRkMgNTk1MlxuXG4gICAgICAgIC8vaWYgaG9zdCBjb21wb25lbnQgaXMgYSBkb21haW4gbmFtZVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLmRvbWFpbkhvc3QgfHwgc2NoZW1lSGFuZGxlciAmJiBzY2hlbWVIYW5kbGVyLmRvbWFpbkhvc3QpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnZlcnQgSUROIHZpYSBwdW55Y29kZVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuaG9zdCA9ICFvcHRpb25zLmlyaSA/IHB1bnljb2RlLnRvQVNDSUkoY29tcG9uZW50cy5ob3N0LnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIHBjdERlY0NoYXJzKS50b0xvd2VyQ2FzZSgpKSA6IHB1bnljb2RlLnRvVW5pY29kZShjb21wb25lbnRzLmhvc3QpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cy5lcnJvciA9IGNvbXBvbmVudHMuZXJyb3IgfHwgXCJIb3N0J3MgZG9tYWluIG5hbWUgY2FuIG5vdCBiZSBjb252ZXJ0ZWQgdG8gXCIgKyAoIW9wdGlvbnMuaXJpID8gXCJBU0NJSVwiIDogXCJVbmljb2RlXCIpICsgXCIgdmlhIHB1bnljb2RlOiBcIiArIGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgIH1cbiAgICAvL25vcm1hbGl6ZSBlbmNvZGluZ1xuICAgIF9ub3JtYWxpemVDb21wb25lbnRFbmNvZGluZyhjb21wb25lbnRzLCBwcm90b2NvbCk7XG4gICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlICE9PSBcInN1ZmZpeFwiICYmIGNvbXBvbmVudHMuc2NoZW1lKSB7XG4gICAgICAgIHVyaVRva2Vucy5wdXNoKGNvbXBvbmVudHMuc2NoZW1lKTtcbiAgICAgICAgdXJpVG9rZW5zLnB1c2goXCI6XCIpO1xuICAgIH1cbiAgICB2YXIgYXV0aG9yaXR5ID0gX3JlY29tcG9zZUF1dGhvcml0eShjb21wb25lbnRzLCBvcHRpb25zKTtcbiAgICBpZiAoYXV0aG9yaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlICE9PSBcInN1ZmZpeFwiKSB7XG4gICAgICAgICAgICB1cmlUb2tlbnMucHVzaChcIi8vXCIpO1xuICAgICAgICB9XG4gICAgICAgIHVyaVRva2Vucy5wdXNoKGF1dGhvcml0eSk7XG4gICAgICAgIGlmIChjb21wb25lbnRzLnBhdGggJiYgY29tcG9uZW50cy5wYXRoLmNoYXJBdCgwKSAhPT0gXCIvXCIpIHtcbiAgICAgICAgICAgIHVyaVRva2Vucy5wdXNoKFwiL1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29tcG9uZW50cy5wYXRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHMgPSBjb21wb25lbnRzLnBhdGg7XG4gICAgICAgIGlmICghb3B0aW9ucy5hYnNvbHV0ZVBhdGggJiYgKCFzY2hlbWVIYW5kbGVyIHx8ICFzY2hlbWVIYW5kbGVyLmFic29sdXRlUGF0aCkpIHtcbiAgICAgICAgICAgIHMgPSByZW1vdmVEb3RTZWdtZW50cyhzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXV0aG9yaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoL15cXC9cXC8vLCBcIi8lMkZcIik7IC8vZG9uJ3QgYWxsb3cgdGhlIHBhdGggdG8gc3RhcnQgd2l0aCBcIi8vXCJcbiAgICAgICAgfVxuICAgICAgICB1cmlUb2tlbnMucHVzaChzKTtcbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudHMucXVlcnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cmlUb2tlbnMucHVzaChcIj9cIik7XG4gICAgICAgIHVyaVRva2Vucy5wdXNoKGNvbXBvbmVudHMucXVlcnkpO1xuICAgIH1cbiAgICBpZiAoY29tcG9uZW50cy5mcmFnbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVyaVRva2Vucy5wdXNoKFwiI1wiKTtcbiAgICAgICAgdXJpVG9rZW5zLnB1c2goY29tcG9uZW50cy5mcmFnbWVudCk7XG4gICAgfVxuICAgIHJldHVybiB1cmlUb2tlbnMuam9pbihcIlwiKTsgLy9tZXJnZSB0b2tlbnMgaW50byBhIHN0cmluZ1xufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50cyhiYXNlLCByZWxhdGl2ZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICB2YXIgc2tpcE5vcm1hbGl6YXRpb24gPSBhcmd1bWVudHNbM107XG5cbiAgICB2YXIgdGFyZ2V0ID0ge307XG4gICAgaWYgKCFza2lwTm9ybWFsaXphdGlvbikge1xuICAgICAgICBiYXNlID0gcGFyc2Uoc2VyaWFsaXplKGJhc2UsIG9wdGlvbnMpLCBvcHRpb25zKTsgLy9ub3JtYWxpemUgYmFzZSBjb21wb25lbnRzXG4gICAgICAgIHJlbGF0aXZlID0gcGFyc2Uoc2VyaWFsaXplKHJlbGF0aXZlLCBvcHRpb25zKSwgb3B0aW9ucyk7IC8vbm9ybWFsaXplIHJlbGF0aXZlIGNvbXBvbmVudHNcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKCFvcHRpb25zLnRvbGVyYW50ICYmIHJlbGF0aXZlLnNjaGVtZSkge1xuICAgICAgICB0YXJnZXQuc2NoZW1lID0gcmVsYXRpdmUuc2NoZW1lO1xuICAgICAgICAvL3RhcmdldC5hdXRob3JpdHkgPSByZWxhdGl2ZS5hdXRob3JpdHk7XG4gICAgICAgIHRhcmdldC51c2VyaW5mbyA9IHJlbGF0aXZlLnVzZXJpbmZvO1xuICAgICAgICB0YXJnZXQuaG9zdCA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIHRhcmdldC5wb3J0ID0gcmVsYXRpdmUucG9ydDtcbiAgICAgICAgdGFyZ2V0LnBhdGggPSByZW1vdmVEb3RTZWdtZW50cyhyZWxhdGl2ZS5wYXRoIHx8IFwiXCIpO1xuICAgICAgICB0YXJnZXQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVsYXRpdmUudXNlcmluZm8gIT09IHVuZGVmaW5lZCB8fCByZWxhdGl2ZS5ob3N0ICE9PSB1bmRlZmluZWQgfHwgcmVsYXRpdmUucG9ydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvL3RhcmdldC5hdXRob3JpdHkgPSByZWxhdGl2ZS5hdXRob3JpdHk7XG4gICAgICAgICAgICB0YXJnZXQudXNlcmluZm8gPSByZWxhdGl2ZS51c2VyaW5mbztcbiAgICAgICAgICAgIHRhcmdldC5ob3N0ID0gcmVsYXRpdmUuaG9zdDtcbiAgICAgICAgICAgIHRhcmdldC5wb3J0ID0gcmVsYXRpdmUucG9ydDtcbiAgICAgICAgICAgIHRhcmdldC5wYXRoID0gcmVtb3ZlRG90U2VnbWVudHMocmVsYXRpdmUucGF0aCB8fCBcIlwiKTtcbiAgICAgICAgICAgIHRhcmdldC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFyZWxhdGl2ZS5wYXRoKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSBiYXNlLnBhdGg7XG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aXZlLnF1ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZS5wYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSByZW1vdmVEb3RTZWdtZW50cyhyZWxhdGl2ZS5wYXRoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGJhc2UudXNlcmluZm8gIT09IHVuZGVmaW5lZCB8fCBiYXNlLmhvc3QgIT09IHVuZGVmaW5lZCB8fCBiYXNlLnBvcnQgIT09IHVuZGVmaW5lZCkgJiYgIWJhc2UucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSBcIi9cIiArIHJlbGF0aXZlLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWJhc2UucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSByZWxhdGl2ZS5wYXRoO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSBiYXNlLnBhdGguc2xpY2UoMCwgYmFzZS5wYXRoLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpICsgcmVsYXRpdmUucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucGF0aCA9IHJlbW92ZURvdFNlZ21lbnRzKHRhcmdldC5wYXRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3RhcmdldC5hdXRob3JpdHkgPSBiYXNlLmF1dGhvcml0eTtcbiAgICAgICAgICAgIHRhcmdldC51c2VyaW5mbyA9IGJhc2UudXNlcmluZm87XG4gICAgICAgICAgICB0YXJnZXQuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHRhcmdldC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICB9XG4gICAgdGFyZ2V0LmZyYWdtZW50ID0gcmVsYXRpdmUuZnJhZ21lbnQ7XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZShiYXNlVVJJLCByZWxhdGl2ZVVSSSwgb3B0aW9ucykge1xuICAgIHZhciBzY2hlbWVsZXNzT3B0aW9ucyA9IGFzc2lnbih7IHNjaGVtZTogJ251bGwnIH0sIG9wdGlvbnMpO1xuICAgIHJldHVybiBzZXJpYWxpemUocmVzb2x2ZUNvbXBvbmVudHMocGFyc2UoYmFzZVVSSSwgc2NoZW1lbGVzc09wdGlvbnMpLCBwYXJzZShyZWxhdGl2ZVVSSSwgc2NoZW1lbGVzc09wdGlvbnMpLCBzY2hlbWVsZXNzT3B0aW9ucywgdHJ1ZSksIHNjaGVtZWxlc3NPcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKHVyaSwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgdXJpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHVyaSA9IHNlcmlhbGl6ZShwYXJzZSh1cmksIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVPZih1cmkpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHVyaSA9IHBhcnNlKHNlcmlhbGl6ZSh1cmksIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHVyaTtcbn1cblxuZnVuY3Rpb24gZXF1YWwodXJpQSwgdXJpQiwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgdXJpQSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB1cmlBID0gc2VyaWFsaXplKHBhcnNlKHVyaUEsIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVPZih1cmlBKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICB1cmlBID0gc2VyaWFsaXplKHVyaUEsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHVyaUIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdXJpQiA9IHNlcmlhbGl6ZShwYXJzZSh1cmlCLCBvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmICh0eXBlT2YodXJpQikgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdXJpQiA9IHNlcmlhbGl6ZSh1cmlCLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHVyaUEgPT09IHVyaUI7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUNvbXBvbmVudChzdHIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gc3RyICYmIHN0ci50b1N0cmluZygpLnJlcGxhY2UoIW9wdGlvbnMgfHwgIW9wdGlvbnMuaXJpID8gVVJJX1BST1RPQ09MLkVTQ0FQRSA6IElSSV9QUk9UT0NPTC5FU0NBUEUsIHBjdEVuY0NoYXIpO1xufVxuXG5mdW5jdGlvbiB1bmVzY2FwZUNvbXBvbmVudChzdHIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gc3RyICYmIHN0ci50b1N0cmluZygpLnJlcGxhY2UoIW9wdGlvbnMgfHwgIW9wdGlvbnMuaXJpID8gVVJJX1BST1RPQ09MLlBDVF9FTkNPREVEIDogSVJJX1BST1RPQ09MLlBDVF9FTkNPREVELCBwY3REZWNDaGFycyk7XG59XG5cbnZhciBoYW5kbGVyID0ge1xuICAgIHNjaGVtZTogXCJodHRwXCIsXG4gICAgZG9tYWluSG9zdDogdHJ1ZSxcbiAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UoY29tcG9uZW50cywgb3B0aW9ucykge1xuICAgICAgICAvL3JlcG9ydCBtaXNzaW5nIGhvc3RcbiAgICAgICAgaWYgKCFjb21wb25lbnRzLmhvc3QpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHMuZXJyb3IgPSBjb21wb25lbnRzLmVycm9yIHx8IFwiSFRUUCBVUklzIG11c3QgaGF2ZSBhIGhvc3QuXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHM7XG4gICAgfSxcbiAgICBzZXJpYWxpemU6IGZ1bmN0aW9uIHNlcmlhbGl6ZShjb21wb25lbnRzLCBvcHRpb25zKSB7XG4gICAgICAgIC8vbm9ybWFsaXplIHRoZSBkZWZhdWx0IHBvcnRcbiAgICAgICAgaWYgKGNvbXBvbmVudHMucG9ydCA9PT0gKFN0cmluZyhjb21wb25lbnRzLnNjaGVtZSkudG9Mb3dlckNhc2UoKSAhPT0gXCJodHRwc1wiID8gODAgOiA0NDMpIHx8IGNvbXBvbmVudHMucG9ydCA9PT0gXCJcIikge1xuICAgICAgICAgICAgY29tcG9uZW50cy5wb3J0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vbm9ybWFsaXplIHRoZSBlbXB0eSBwYXRoXG4gICAgICAgIGlmICghY29tcG9uZW50cy5wYXRoKSB7XG4gICAgICAgICAgICBjb21wb25lbnRzLnBhdGggPSBcIi9cIjtcbiAgICAgICAgfVxuICAgICAgICAvL05PVEU6IFdlIGRvIG5vdCBwYXJzZSBxdWVyeSBzdHJpbmdzIGZvciBIVFRQIFVSSXNcbiAgICAgICAgLy9hcyBXV1cgRm9ybSBVcmwgRW5jb2RlZCBxdWVyeSBzdHJpbmdzIGFyZSBwYXJ0IG9mIHRoZSBIVE1MNCsgc3BlYyxcbiAgICAgICAgLy9hbmQgbm90IHRoZSBIVFRQIHNwZWMuXG4gICAgICAgIHJldHVybiBjb21wb25lbnRzO1xuICAgIH1cbn07XG5cbnZhciBoYW5kbGVyJDEgPSB7XG4gICAgc2NoZW1lOiBcImh0dHBzXCIsXG4gICAgZG9tYWluSG9zdDogaGFuZGxlci5kb21haW5Ib3N0LFxuICAgIHBhcnNlOiBoYW5kbGVyLnBhcnNlLFxuICAgIHNlcmlhbGl6ZTogaGFuZGxlci5zZXJpYWxpemVcbn07XG5cbnZhciBPID0ge307XG52YXIgaXNJUkkgPSB0cnVlO1xuLy9SRkMgMzk4NlxudmFyIFVOUkVTRVJWRUQkJCA9IFwiW0EtWmEtejAtOVxcXFwtXFxcXC5cXFxcX1xcXFx+XCIgKyAoaXNJUkkgPyBcIlxcXFx4QTAtXFxcXHUyMDBEXFxcXHUyMDEwLVxcXFx1MjAyOVxcXFx1MjAyRi1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZFRlwiIDogXCJcIikgKyBcIl1cIjtcbnZhciBIRVhESUckJCA9IFwiWzAtOUEtRmEtZl1cIjsgLy9jYXNlLWluc2Vuc2l0aXZlXG52YXIgUENUX0VOQ09ERUQkID0gc3ViZXhwKHN1YmV4cChcIiVbRUZlZl1cIiArIEhFWERJRyQkICsgXCIlXCIgKyBIRVhESUckJCArIEhFWERJRyQkICsgXCIlXCIgKyBIRVhESUckJCArIEhFWERJRyQkKSArIFwifFwiICsgc3ViZXhwKFwiJVs4OUEtRmEtZl1cIiArIEhFWERJRyQkICsgXCIlXCIgKyBIRVhESUckJCArIEhFWERJRyQkKSArIFwifFwiICsgc3ViZXhwKFwiJVwiICsgSEVYRElHJCQgKyBIRVhESUckJCkpOyAvL2V4cGFuZGVkXG4vL1JGQyA1MzIyLCBleGNlcHQgdGhlc2Ugc3ltYm9scyBhcyBwZXIgUkZDIDYwNjg6IEAgOiAvID8gIyBbIF0gJiA7ID1cbi8vY29uc3QgQVRFWFQkJCA9IFwiW0EtWmEtejAtOVxcXFwhXFxcXCNcXFxcJFxcXFwlXFxcXCZcXFxcJ1xcXFwqXFxcXCtcXFxcLVxcXFwvXFxcXD1cXFxcP1xcXFxeXFxcXF9cXFxcYFxcXFx7XFxcXHxcXFxcfVxcXFx+XVwiO1xuLy9jb25zdCBXU1AkJCA9IFwiW1xcXFx4MjBcXFxceDA5XVwiO1xuLy9jb25zdCBPQlNfUVRFWFQkJCA9IFwiW1xcXFx4MDEtXFxcXHgwOFxcXFx4MEJcXFxceDBDXFxcXHgwRS1cXFxceDFGXFxcXHg3Rl1cIjsgIC8vKCVkMS04IC8gJWQxMS0xMiAvICVkMTQtMzEgLyAlZDEyNylcbi8vY29uc3QgUVRFWFQkJCA9IG1lcmdlKFwiW1xcXFx4MjFcXFxceDIzLVxcXFx4NUJcXFxceDVELVxcXFx4N0VdXCIsIE9CU19RVEVYVCQkKTsgIC8vJWQzMyAvICVkMzUtOTEgLyAlZDkzLTEyNiAvIG9icy1xdGV4dFxuLy9jb25zdCBWQ0hBUiQkID0gXCJbXFxcXHgyMS1cXFxceDdFXVwiO1xuLy9jb25zdCBXU1AkJCA9IFwiW1xcXFx4MjBcXFxceDA5XVwiO1xuLy9jb25zdCBPQlNfUVAkID0gc3ViZXhwKFwiXFxcXFxcXFxcIiArIG1lcmdlKFwiW1xcXFx4MDBcXFxceDBEXFxcXHgwQV1cIiwgT0JTX1FURVhUJCQpKTsgIC8vJWQwIC8gQ1IgLyBMRiAvIG9icy1xdGV4dFxuLy9jb25zdCBGV1MkID0gc3ViZXhwKHN1YmV4cChXU1AkJCArIFwiKlwiICsgXCJcXFxceDBEXFxcXHgwQVwiKSArIFwiP1wiICsgV1NQJCQgKyBcIitcIik7XG4vL2NvbnN0IFFVT1RFRF9QQUlSJCA9IHN1YmV4cChzdWJleHAoXCJcXFxcXFxcXFwiICsgc3ViZXhwKFZDSEFSJCQgKyBcInxcIiArIFdTUCQkKSkgKyBcInxcIiArIE9CU19RUCQpO1xuLy9jb25zdCBRVU9URURfU1RSSU5HJCA9IHN1YmV4cCgnXFxcXFwiJyArIHN1YmV4cChGV1MkICsgXCI/XCIgKyBRQ09OVEVOVCQpICsgXCIqXCIgKyBGV1MkICsgXCI/XCIgKyAnXFxcXFwiJyk7XG52YXIgQVRFWFQkJCA9IFwiW0EtWmEtejAtOVxcXFwhXFxcXCRcXFxcJVxcXFwnXFxcXCpcXFxcK1xcXFwtXFxcXF5cXFxcX1xcXFxgXFxcXHtcXFxcfFxcXFx9XFxcXH5dXCI7XG52YXIgUVRFWFQkJCA9IFwiW1xcXFwhXFxcXCRcXFxcJVxcXFwnXFxcXChcXFxcKVxcXFwqXFxcXCtcXFxcLFxcXFwtXFxcXC4wLTlcXFxcPFxcXFw+QS1aXFxcXHg1RS1cXFxceDdFXVwiO1xudmFyIFZDSEFSJCQgPSBtZXJnZShRVEVYVCQkLCBcIltcXFxcXFxcIlxcXFxcXFxcXVwiKTtcbnZhciBTT01FX0RFTElNUyQkID0gXCJbXFxcXCFcXFxcJFxcXFwnXFxcXChcXFxcKVxcXFwqXFxcXCtcXFxcLFxcXFw7XFxcXDpcXFxcQF1cIjtcbnZhciBVTlJFU0VSVkVEID0gbmV3IFJlZ0V4cChVTlJFU0VSVkVEJCQsIFwiZ1wiKTtcbnZhciBQQ1RfRU5DT0RFRCA9IG5ldyBSZWdFeHAoUENUX0VOQ09ERUQkLCBcImdcIik7XG52YXIgTk9UX0xPQ0FMX1BBUlQgPSBuZXcgUmVnRXhwKG1lcmdlKFwiW15dXCIsIEFURVhUJCQsIFwiW1xcXFwuXVwiLCAnW1xcXFxcIl0nLCBWQ0hBUiQkKSwgXCJnXCIpO1xudmFyIE5PVF9IRk5BTUUgPSBuZXcgUmVnRXhwKG1lcmdlKFwiW15dXCIsIFVOUkVTRVJWRUQkJCwgU09NRV9ERUxJTVMkJCksIFwiZ1wiKTtcbnZhciBOT1RfSEZWQUxVRSA9IE5PVF9IRk5BTUU7XG5mdW5jdGlvbiBkZWNvZGVVbnJlc2VydmVkKHN0cikge1xuICAgIHZhciBkZWNTdHIgPSBwY3REZWNDaGFycyhzdHIpO1xuICAgIHJldHVybiAhZGVjU3RyLm1hdGNoKFVOUkVTRVJWRUQpID8gc3RyIDogZGVjU3RyO1xufVxudmFyIGhhbmRsZXIkMiA9IHtcbiAgICBzY2hlbWU6IFwibWFpbHRvXCIsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlJCQxKGNvbXBvbmVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG1haWx0b0NvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICAgICAgICB2YXIgdG8gPSBtYWlsdG9Db21wb25lbnRzLnRvID0gbWFpbHRvQ29tcG9uZW50cy5wYXRoID8gbWFpbHRvQ29tcG9uZW50cy5wYXRoLnNwbGl0KFwiLFwiKSA6IFtdO1xuICAgICAgICBtYWlsdG9Db21wb25lbnRzLnBhdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChtYWlsdG9Db21wb25lbnRzLnF1ZXJ5KSB7XG4gICAgICAgICAgICB2YXIgdW5rbm93bkhlYWRlcnMgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBoZWFkZXJzID0ge307XG4gICAgICAgICAgICB2YXIgaGZpZWxkcyA9IG1haWx0b0NvbXBvbmVudHMucXVlcnkuc3BsaXQoXCImXCIpO1xuICAgICAgICAgICAgZm9yICh2YXIgeCA9IDAsIHhsID0gaGZpZWxkcy5sZW5ndGg7IHggPCB4bDsgKyt4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGhmaWVsZCA9IGhmaWVsZHNbeF0uc3BsaXQoXCI9XCIpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoaGZpZWxkWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0b1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvQWRkcnMgPSBoZmllbGRbMV0uc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3ggPSAwLCBfeGwgPSB0b0FkZHJzLmxlbmd0aDsgX3ggPCBfeGw7ICsrX3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0by5wdXNoKHRvQWRkcnNbX3hdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic3ViamVjdFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbHRvQ29tcG9uZW50cy5zdWJqZWN0ID0gdW5lc2NhcGVDb21wb25lbnQoaGZpZWxkWzFdLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYm9keVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbHRvQ29tcG9uZW50cy5ib2R5ID0gdW5lc2NhcGVDb21wb25lbnQoaGZpZWxkWzFdLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdW5rbm93bkhlYWRlcnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1t1bmVzY2FwZUNvbXBvbmVudChoZmllbGRbMF0sIG9wdGlvbnMpXSA9IHVuZXNjYXBlQ29tcG9uZW50KGhmaWVsZFsxXSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodW5rbm93bkhlYWRlcnMpIG1haWx0b0NvbXBvbmVudHMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIH1cbiAgICAgICAgbWFpbHRvQ29tcG9uZW50cy5xdWVyeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yICh2YXIgX3gyID0gMCwgX3hsMiA9IHRvLmxlbmd0aDsgX3gyIDwgX3hsMjsgKytfeDIpIHtcbiAgICAgICAgICAgIHZhciBhZGRyID0gdG9bX3gyXS5zcGxpdChcIkBcIik7XG4gICAgICAgICAgICBhZGRyWzBdID0gdW5lc2NhcGVDb21wb25lbnQoYWRkclswXSk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMudW5pY29kZVN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnZlcnQgVW5pY29kZSBJRE4gLT4gQVNDSUkgSUROXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkclsxXSA9IHB1bnljb2RlLnRvQVNDSUkodW5lc2NhcGVDb21wb25lbnQoYWRkclsxXSwgb3B0aW9ucykudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBtYWlsdG9Db21wb25lbnRzLmVycm9yID0gbWFpbHRvQ29tcG9uZW50cy5lcnJvciB8fCBcIkVtYWlsIGFkZHJlc3MncyBkb21haW4gbmFtZSBjYW4gbm90IGJlIGNvbnZlcnRlZCB0byBBU0NJSSB2aWEgcHVueWNvZGU6IFwiICsgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZHJbMV0gPSB1bmVzY2FwZUNvbXBvbmVudChhZGRyWzFdLCBvcHRpb25zKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9bX3gyXSA9IGFkZHIuam9pbihcIkBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1haWx0b0NvbXBvbmVudHM7XG4gICAgfSxcbiAgICBzZXJpYWxpemU6IGZ1bmN0aW9uIHNlcmlhbGl6ZSQkMShtYWlsdG9Db21wb25lbnRzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBjb21wb25lbnRzID0gbWFpbHRvQ29tcG9uZW50cztcbiAgICAgICAgdmFyIHRvID0gdG9BcnJheShtYWlsdG9Db21wb25lbnRzLnRvKTtcbiAgICAgICAgaWYgKHRvKSB7XG4gICAgICAgICAgICBmb3IgKHZhciB4ID0gMCwgeGwgPSB0by5sZW5ndGg7IHggPCB4bDsgKyt4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvQWRkciA9IFN0cmluZyh0b1t4XSk7XG4gICAgICAgICAgICAgICAgdmFyIGF0SWR4ID0gdG9BZGRyLmxhc3RJbmRleE9mKFwiQFwiKTtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYWxQYXJ0ID0gdG9BZGRyLnNsaWNlKDAsIGF0SWR4KS5yZXBsYWNlKFBDVF9FTkNPREVELCBkZWNvZGVVbnJlc2VydmVkKS5yZXBsYWNlKFBDVF9FTkNPREVELCB0b1VwcGVyQ2FzZSkucmVwbGFjZShOT1RfTE9DQUxfUEFSVCwgcGN0RW5jQ2hhcik7XG4gICAgICAgICAgICAgICAgdmFyIGRvbWFpbiA9IHRvQWRkci5zbGljZShhdElkeCArIDEpO1xuICAgICAgICAgICAgICAgIC8vY29udmVydCBJRE4gdmlhIHB1bnljb2RlXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZG9tYWluID0gIW9wdGlvbnMuaXJpID8gcHVueWNvZGUudG9BU0NJSSh1bmVzY2FwZUNvbXBvbmVudChkb21haW4sIG9wdGlvbnMpLnRvTG93ZXJDYXNlKCkpIDogcHVueWNvZGUudG9Vbmljb2RlKGRvbWFpbik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzLmVycm9yID0gY29tcG9uZW50cy5lcnJvciB8fCBcIkVtYWlsIGFkZHJlc3MncyBkb21haW4gbmFtZSBjYW4gbm90IGJlIGNvbnZlcnRlZCB0byBcIiArICghb3B0aW9ucy5pcmkgPyBcIkFTQ0lJXCIgOiBcIlVuaWNvZGVcIikgKyBcIiB2aWEgcHVueWNvZGU6IFwiICsgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9beF0gPSBsb2NhbFBhcnQgKyBcIkBcIiArIGRvbWFpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBvbmVudHMucGF0aCA9IHRvLmpvaW4oXCIsXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoZWFkZXJzID0gbWFpbHRvQ29tcG9uZW50cy5oZWFkZXJzID0gbWFpbHRvQ29tcG9uZW50cy5oZWFkZXJzIHx8IHt9O1xuICAgICAgICBpZiAobWFpbHRvQ29tcG9uZW50cy5zdWJqZWN0KSBoZWFkZXJzW1wic3ViamVjdFwiXSA9IG1haWx0b0NvbXBvbmVudHMuc3ViamVjdDtcbiAgICAgICAgaWYgKG1haWx0b0NvbXBvbmVudHMuYm9keSkgaGVhZGVyc1tcImJvZHlcIl0gPSBtYWlsdG9Db21wb25lbnRzLmJvZHk7XG4gICAgICAgIHZhciBmaWVsZHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBoZWFkZXJzKSB7XG4gICAgICAgICAgICBpZiAoaGVhZGVyc1tuYW1lXSAhPT0gT1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKG5hbWUucmVwbGFjZShQQ1RfRU5DT0RFRCwgZGVjb2RlVW5yZXNlcnZlZCkucmVwbGFjZShQQ1RfRU5DT0RFRCwgdG9VcHBlckNhc2UpLnJlcGxhY2UoTk9UX0hGTkFNRSwgcGN0RW5jQ2hhcikgKyBcIj1cIiArIGhlYWRlcnNbbmFtZV0ucmVwbGFjZShQQ1RfRU5DT0RFRCwgZGVjb2RlVW5yZXNlcnZlZCkucmVwbGFjZShQQ1RfRU5DT0RFRCwgdG9VcHBlckNhc2UpLnJlcGxhY2UoTk9UX0hGVkFMVUUsIHBjdEVuY0NoYXIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmllbGRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29tcG9uZW50cy5xdWVyeSA9IGZpZWxkcy5qb2luKFwiJlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcG9uZW50cztcbiAgICB9XG59O1xuXG52YXIgVVJOX1BBUlNFID0gL14oW15cXDpdKylcXDooLiopLztcbi8vUkZDIDIxNDFcbnZhciBoYW5kbGVyJDMgPSB7XG4gICAgc2NoZW1lOiBcInVyblwiLFxuICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZSQkMShjb21wb25lbnRzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gY29tcG9uZW50cy5wYXRoICYmIGNvbXBvbmVudHMucGF0aC5tYXRjaChVUk5fUEFSU0UpO1xuICAgICAgICB2YXIgdXJuQ29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICB2YXIgc2NoZW1lID0gb3B0aW9ucy5zY2hlbWUgfHwgdXJuQ29tcG9uZW50cy5zY2hlbWUgfHwgXCJ1cm5cIjtcbiAgICAgICAgICAgIHZhciBuaWQgPSBtYXRjaGVzWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgbnNzID0gbWF0Y2hlc1syXTtcbiAgICAgICAgICAgIHZhciB1cm5TY2hlbWUgPSBzY2hlbWUgKyBcIjpcIiArIChvcHRpb25zLm5pZCB8fCBuaWQpO1xuICAgICAgICAgICAgdmFyIHNjaGVtZUhhbmRsZXIgPSBTQ0hFTUVTW3VyblNjaGVtZV07XG4gICAgICAgICAgICB1cm5Db21wb25lbnRzLm5pZCA9IG5pZDtcbiAgICAgICAgICAgIHVybkNvbXBvbmVudHMubnNzID0gbnNzO1xuICAgICAgICAgICAgdXJuQ29tcG9uZW50cy5wYXRoID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHNjaGVtZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICB1cm5Db21wb25lbnRzID0gc2NoZW1lSGFuZGxlci5wYXJzZSh1cm5Db21wb25lbnRzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybkNvbXBvbmVudHMuZXJyb3IgPSB1cm5Db21wb25lbnRzLmVycm9yIHx8IFwiVVJOIGNhbiBub3QgYmUgcGFyc2VkLlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cm5Db21wb25lbnRzO1xuICAgIH0sXG4gICAgc2VyaWFsaXplOiBmdW5jdGlvbiBzZXJpYWxpemUkJDEodXJuQ29tcG9uZW50cywgb3B0aW9ucykge1xuICAgICAgICB2YXIgc2NoZW1lID0gb3B0aW9ucy5zY2hlbWUgfHwgdXJuQ29tcG9uZW50cy5zY2hlbWUgfHwgXCJ1cm5cIjtcbiAgICAgICAgdmFyIG5pZCA9IHVybkNvbXBvbmVudHMubmlkO1xuICAgICAgICB2YXIgdXJuU2NoZW1lID0gc2NoZW1lICsgXCI6XCIgKyAob3B0aW9ucy5uaWQgfHwgbmlkKTtcbiAgICAgICAgdmFyIHNjaGVtZUhhbmRsZXIgPSBTQ0hFTUVTW3VyblNjaGVtZV07XG4gICAgICAgIGlmIChzY2hlbWVIYW5kbGVyKSB7XG4gICAgICAgICAgICB1cm5Db21wb25lbnRzID0gc2NoZW1lSGFuZGxlci5zZXJpYWxpemUodXJuQ29tcG9uZW50cywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVyaUNvbXBvbmVudHMgPSB1cm5Db21wb25lbnRzO1xuICAgICAgICB2YXIgbnNzID0gdXJuQ29tcG9uZW50cy5uc3M7XG4gICAgICAgIHVyaUNvbXBvbmVudHMucGF0aCA9IChuaWQgfHwgb3B0aW9ucy5uaWQpICsgXCI6XCIgKyBuc3M7XG4gICAgICAgIHJldHVybiB1cmlDb21wb25lbnRzO1xuICAgIH1cbn07XG5cbnZhciBVVUlEID0gL15bMC05QS1GYS1mXXs4fSg/OlxcLVswLTlBLUZhLWZdezR9KXszfVxcLVswLTlBLUZhLWZdezEyfSQvO1xuLy9SRkMgNDEyMlxudmFyIGhhbmRsZXIkNCA9IHtcbiAgICBzY2hlbWU6IFwidXJuOnV1aWRcIixcbiAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UodXJuQ29tcG9uZW50cywgb3B0aW9ucykge1xuICAgICAgICB2YXIgdXVpZENvbXBvbmVudHMgPSB1cm5Db21wb25lbnRzO1xuICAgICAgICB1dWlkQ29tcG9uZW50cy51dWlkID0gdXVpZENvbXBvbmVudHMubnNzO1xuICAgICAgICB1dWlkQ29tcG9uZW50cy5uc3MgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghb3B0aW9ucy50b2xlcmFudCAmJiAoIXV1aWRDb21wb25lbnRzLnV1aWQgfHwgIXV1aWRDb21wb25lbnRzLnV1aWQubWF0Y2goVVVJRCkpKSB7XG4gICAgICAgICAgICB1dWlkQ29tcG9uZW50cy5lcnJvciA9IHV1aWRDb21wb25lbnRzLmVycm9yIHx8IFwiVVVJRCBpcyBub3QgdmFsaWQuXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHV1aWRDb21wb25lbnRzO1xuICAgIH0sXG4gICAgc2VyaWFsaXplOiBmdW5jdGlvbiBzZXJpYWxpemUodXVpZENvbXBvbmVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHVybkNvbXBvbmVudHMgPSB1dWlkQ29tcG9uZW50cztcbiAgICAgICAgLy9ub3JtYWxpemUgVVVJRFxuICAgICAgICB1cm5Db21wb25lbnRzLm5zcyA9ICh1dWlkQ29tcG9uZW50cy51dWlkIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiB1cm5Db21wb25lbnRzO1xuICAgIH1cbn07XG5cblNDSEVNRVNbaGFuZGxlci5zY2hlbWVdID0gaGFuZGxlcjtcblNDSEVNRVNbaGFuZGxlciQxLnNjaGVtZV0gPSBoYW5kbGVyJDE7XG5TQ0hFTUVTW2hhbmRsZXIkMi5zY2hlbWVdID0gaGFuZGxlciQyO1xuU0NIRU1FU1toYW5kbGVyJDMuc2NoZW1lXSA9IGhhbmRsZXIkMztcblNDSEVNRVNbaGFuZGxlciQ0LnNjaGVtZV0gPSBoYW5kbGVyJDQ7XG5cbmV4cG9ydHMuU0NIRU1FUyA9IFNDSEVNRVM7XG5leHBvcnRzLnBjdEVuY0NoYXIgPSBwY3RFbmNDaGFyO1xuZXhwb3J0cy5wY3REZWNDaGFycyA9IHBjdERlY0NoYXJzO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5yZW1vdmVEb3RTZWdtZW50cyA9IHJlbW92ZURvdFNlZ21lbnRzO1xuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5leHBvcnRzLnJlc29sdmVDb21wb25lbnRzID0gcmVzb2x2ZUNvbXBvbmVudHM7XG5leHBvcnRzLnJlc29sdmUgPSByZXNvbHZlO1xuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG5leHBvcnRzLmVxdWFsID0gZXF1YWw7XG5leHBvcnRzLmVzY2FwZUNvbXBvbmVudCA9IGVzY2FwZUNvbXBvbmVudDtcbmV4cG9ydHMudW5lc2NhcGVDb21wb25lbnQgPSB1bmVzY2FwZUNvbXBvbmVudDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVyaS5hbGwuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvcHVueWNvZGUuanMgLSBwdW55Y29kZS51Y3MyLmRlY29kZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB1Y3MybGVuZ3RoKHN0cikge1xuICB2YXIgbGVuZ3RoID0gMFxuICAgICwgbGVuID0gc3RyLmxlbmd0aFxuICAgICwgcG9zID0gMFxuICAgICwgdmFsdWU7XG4gIHdoaWxlIChwb3MgPCBsZW4pIHtcbiAgICBsZW5ndGgrKztcbiAgICB2YWx1ZSA9IHN0ci5jaGFyQ29kZUF0KHBvcysrKTtcbiAgICBpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBwb3MgPCBsZW4pIHtcbiAgICAgIC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuICAgICAgdmFsdWUgPSBzdHIuY2hhckNvZGVBdChwb3MpO1xuICAgICAgaWYgKCh2YWx1ZSAmIDB4RkMwMCkgPT0gMHhEQzAwKSBwb3MrKzsgLy8gbG93IHN1cnJvZ2F0ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRyYXZlcnNlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2NoZW1hLCBvcHRzLCBjYikge1xuICAvLyBMZWdhY3kgc3VwcG9ydCBmb3IgdjAuMy4xIGFuZCBlYXJsaWVyLlxuICBpZiAodHlwZW9mIG9wdHMgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cblxuICBjYiA9IG9wdHMuY2IgfHwgY2I7XG4gIHZhciBwcmUgPSAodHlwZW9mIGNiID09ICdmdW5jdGlvbicpID8gY2IgOiBjYi5wcmUgfHwgZnVuY3Rpb24oKSB7fTtcbiAgdmFyIHBvc3QgPSBjYi5wb3N0IHx8IGZ1bmN0aW9uKCkge307XG5cbiAgX3RyYXZlcnNlKG9wdHMsIHByZSwgcG9zdCwgc2NoZW1hLCAnJywgc2NoZW1hKTtcbn07XG5cblxudHJhdmVyc2Uua2V5d29yZHMgPSB7XG4gIGFkZGl0aW9uYWxJdGVtczogdHJ1ZSxcbiAgaXRlbXM6IHRydWUsXG4gIGNvbnRhaW5zOiB0cnVlLFxuICBhZGRpdGlvbmFsUHJvcGVydGllczogdHJ1ZSxcbiAgcHJvcGVydHlOYW1lczogdHJ1ZSxcbiAgbm90OiB0cnVlXG59O1xuXG50cmF2ZXJzZS5hcnJheUtleXdvcmRzID0ge1xuICBpdGVtczogdHJ1ZSxcbiAgYWxsT2Y6IHRydWUsXG4gIGFueU9mOiB0cnVlLFxuICBvbmVPZjogdHJ1ZVxufTtcblxudHJhdmVyc2UucHJvcHNLZXl3b3JkcyA9IHtcbiAgZGVmaW5pdGlvbnM6IHRydWUsXG4gIHByb3BlcnRpZXM6IHRydWUsXG4gIHBhdHRlcm5Qcm9wZXJ0aWVzOiB0cnVlLFxuICBkZXBlbmRlbmNpZXM6IHRydWVcbn07XG5cbnRyYXZlcnNlLnNraXBLZXl3b3JkcyA9IHtcbiAgZGVmYXVsdDogdHJ1ZSxcbiAgZW51bTogdHJ1ZSxcbiAgY29uc3Q6IHRydWUsXG4gIHJlcXVpcmVkOiB0cnVlLFxuICBtYXhpbXVtOiB0cnVlLFxuICBtaW5pbXVtOiB0cnVlLFxuICBleGNsdXNpdmVNYXhpbXVtOiB0cnVlLFxuICBleGNsdXNpdmVNaW5pbXVtOiB0cnVlLFxuICBtdWx0aXBsZU9mOiB0cnVlLFxuICBtYXhMZW5ndGg6IHRydWUsXG4gIG1pbkxlbmd0aDogdHJ1ZSxcbiAgcGF0dGVybjogdHJ1ZSxcbiAgZm9ybWF0OiB0cnVlLFxuICBtYXhJdGVtczogdHJ1ZSxcbiAgbWluSXRlbXM6IHRydWUsXG4gIHVuaXF1ZUl0ZW1zOiB0cnVlLFxuICBtYXhQcm9wZXJ0aWVzOiB0cnVlLFxuICBtaW5Qcm9wZXJ0aWVzOiB0cnVlXG59O1xuXG5cbmZ1bmN0aW9uIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaGVtYSwganNvblB0ciwgcm9vdFNjaGVtYSwgcGFyZW50SnNvblB0ciwgcGFyZW50S2V5d29yZCwgcGFyZW50U2NoZW1hLCBrZXlJbmRleCkge1xuICBpZiAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc2NoZW1hKSkge1xuICAgIHByZShzY2hlbWEsIGpzb25QdHIsIHJvb3RTY2hlbWEsIHBhcmVudEpzb25QdHIsIHBhcmVudEtleXdvcmQsIHBhcmVudFNjaGVtYSwga2V5SW5kZXgpO1xuICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHtcbiAgICAgIHZhciBzY2ggPSBzY2hlbWFba2V5XTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0cmF2ZXJzZS5hcnJheUtleXdvcmRzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaT0wOyBpPHNjaC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaFtpXSwganNvblB0ciArICcvJyArIGtleSArICcvJyArIGksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hLCBpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgaW4gdHJhdmVyc2UucHJvcHNLZXl3b3Jkcykge1xuICAgICAgICBpZiAoc2NoICYmIHR5cGVvZiBzY2ggPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNjaClcbiAgICAgICAgICAgIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaFtwcm9wXSwganNvblB0ciArICcvJyArIGtleSArICcvJyArIGVzY2FwZUpzb25QdHIocHJvcCksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hLCBwcm9wKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgaW4gdHJhdmVyc2Uua2V5d29yZHMgfHwgKG9wdHMuYWxsS2V5cyAmJiAhKGtleSBpbiB0cmF2ZXJzZS5za2lwS2V5d29yZHMpKSkge1xuICAgICAgICBfdHJhdmVyc2Uob3B0cywgcHJlLCBwb3N0LCBzY2gsIGpzb25QdHIgKyAnLycgKyBrZXksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcG9zdChzY2hlbWEsIGpzb25QdHIsIHJvb3RTY2hlbWEsIHBhcmVudEpzb25QdHIsIHBhcmVudEtleXdvcmQsIHBhcmVudFNjaGVtYSwga2V5SW5kZXgpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gZXNjYXBlSnNvblB0cihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9+L2csICd+MCcpLnJlcGxhY2UoL1xcLy9nLCAnfjEnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgQ2FjaGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENhY2hlKCkge1xuICB0aGlzLl9jYWNoZSA9IHt9O1xufTtcblxuXG5DYWNoZS5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gQ2FjaGVfcHV0KGtleSwgdmFsdWUpIHtcbiAgdGhpcy5fY2FjaGVba2V5XSA9IHZhbHVlO1xufTtcblxuXG5DYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gQ2FjaGVfZ2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fY2FjaGVba2V5XTtcbn07XG5cblxuQ2FjaGUucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uIENhY2hlX2RlbChrZXkpIHtcbiAgZGVsZXRlIHRoaXMuX2NhY2hlW2tleV07XG59O1xuXG5cbkNhY2hlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIENhY2hlX2NsZWFyKCkge1xuICB0aGlzLl9jYWNoZSA9IHt9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxudmFyIERBVEUgPSAvXihcXGRcXGRcXGRcXGQpLShcXGRcXGQpLShcXGRcXGQpJC87XG52YXIgREFZUyA9IFswLDMxLDI4LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTtcbnZhciBUSU1FID0gL14oXFxkXFxkKTooXFxkXFxkKTooXFxkXFxkKShcXC5cXGQrKT8oenxbKy1dXFxkXFxkOlxcZFxcZCk/JC9pO1xudmFyIEhPU1ROQU1FID0gL15bYS16MC05XSg/OlthLXowLTktXXswLDYxfVthLXowLTldKT8oPzpcXC5bYS16MC05XSg/OlstMC05YS16XXswLDYxfVswLTlhLXpdKT8pKiQvaTtcbnZhciBVUkkgPSAvXig/OlthLXpdW2EtejAtOStcXC0uXSo6KSg/OlxcLz9cXC8oPzooPzpbYS16MC05XFwtLl9+ISQmJygpKissOz06XXwlWzAtOWEtZl17Mn0pKkApPyg/OlxcWyg/Oig/Oig/Oig/OlswLTlhLWZdezEsNH06KXs2fXw6Oig/OlswLTlhLWZdezEsNH06KXs1fXwoPzpbMC05YS1mXXsxLDR9KT86Oig/OlswLTlhLWZdezEsNH06KXs0fXwoPzooPzpbMC05YS1mXXsxLDR9Oil7MCwxfVswLTlhLWZdezEsNH0pPzo6KD86WzAtOWEtZl17MSw0fTopezN9fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDJ9WzAtOWEtZl17MSw0fSk/OjooPzpbMC05YS1mXXsxLDR9Oil7Mn18KD86KD86WzAtOWEtZl17MSw0fTopezAsM31bMC05YS1mXXsxLDR9KT86OlswLTlhLWZdezEsNH06fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDR9WzAtOWEtZl17MSw0fSk/OjopKD86WzAtOWEtZl17MSw0fTpbMC05YS1mXXsxLDR9fCg/Oig/OjI1WzAtNV18MlswLTRdXFxkfFswMV0/XFxkXFxkPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KSl8KD86KD86WzAtOWEtZl17MSw0fTopezAsNX1bMC05YS1mXXsxLDR9KT86OlswLTlhLWZdezEsNH18KD86KD86WzAtOWEtZl17MSw0fTopezAsNn1bMC05YS1mXXsxLDR9KT86Oil8W1Z2XVswLTlhLWZdK1xcLlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpdKylcXF18KD86KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pfCg/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PV18JVswLTlhLWZdezJ9KSopKD86OlxcZCopPyg/OlxcLyg/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKikqfFxcLyg/Oig/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKyg/OlxcLyg/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKikqKT98KD86W2EtejAtOVxcLS5ffiEkJicoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkrKD86XFwvKD86W2EtejAtOVxcLS5ffiEkJicoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkqKSopKD86XFw/KD86W2EtejAtOVxcLS5ffiEkJicoKSorLDs9OkAvP118JVswLTlhLWZdezJ9KSopPyg/OiMoPzpbYS16MC05XFwtLl9+ISQmJygpKissOz06QC8/XXwlWzAtOWEtZl17Mn0pKik/JC9pO1xudmFyIFVSSVJFRiA9IC9eKD86W2Etel1bYS16MC05K1xcLS5dKjopPyg/OlxcLz9cXC8oPzooPzpbYS16MC05XFwtLl9+ISQmJygpKissOz06XXwlWzAtOWEtZl17Mn0pKkApPyg/OlxcWyg/Oig/Oig/Oig/OlswLTlhLWZdezEsNH06KXs2fXw6Oig/OlswLTlhLWZdezEsNH06KXs1fXwoPzpbMC05YS1mXXsxLDR9KT86Oig/OlswLTlhLWZdezEsNH06KXs0fXwoPzooPzpbMC05YS1mXXsxLDR9Oil7MCwxfVswLTlhLWZdezEsNH0pPzo6KD86WzAtOWEtZl17MSw0fTopezN9fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDJ9WzAtOWEtZl17MSw0fSk/OjooPzpbMC05YS1mXXsxLDR9Oil7Mn18KD86KD86WzAtOWEtZl17MSw0fTopezAsM31bMC05YS1mXXsxLDR9KT86OlswLTlhLWZdezEsNH06fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDR9WzAtOWEtZl17MSw0fSk/OjopKD86WzAtOWEtZl17MSw0fTpbMC05YS1mXXsxLDR9fCg/Oig/OjI1WzAtNV18MlswLTRdXFxkfFswMV0/XFxkXFxkPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KSl8KD86KD86WzAtOWEtZl17MSw0fTopezAsNX1bMC05YS1mXXsxLDR9KT86OlswLTlhLWZdezEsNH18KD86KD86WzAtOWEtZl17MSw0fTopezAsNn1bMC05YS1mXXsxLDR9KT86Oil8W1Z2XVswLTlhLWZdK1xcLlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpdKylcXF18KD86KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pfCg/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9XXwlWzAtOWEtZl17Mn0pKikoPzo6XFxkKik/KD86XFwvKD86W2EtejAtOVxcLS5ffiEkJidcIigpKissOz06QF18JVswLTlhLWZdezJ9KSopKnxcXC8oPzooPzpbYS16MC05XFwtLl9+ISQmJ1wiKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKyg/OlxcLyg/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkqKSopP3woPzpbYS16MC05XFwtLl9+ISQmJ1wiKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKyg/OlxcLyg/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkqKSopPyg/OlxcPyg/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9OkAvP118JVswLTlhLWZdezJ9KSopPyg/OiMoPzpbYS16MC05XFwtLl9+ISQmJ1wiKCkqKyw7PTpALz9dfCVbMC05YS1mXXsyfSkqKT8kL2k7XG4vLyB1cmktdGVtcGxhdGU6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2NTcwXG52YXIgVVJJVEVNUExBVEUgPSAvXig/Oig/OlteXFx4MDAtXFx4MjBcIic8PiVcXFxcXmB7fH1dfCVbMC05YS1mXXsyfSl8XFx7WysjLi87PyY9LCFAfF0/KD86W2EtejAtOV9dfCVbMC05YS1mXXsyfSkrKD86OlsxLTldWzAtOV17MCwzfXxcXCopPyg/OiwoPzpbYS16MC05X118JVswLTlhLWZdezJ9KSsoPzo6WzEtOV1bMC05XXswLDN9fFxcKik/KSpcXH0pKiQvaTtcbi8vIEZvciB0aGUgc291cmNlOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9kcGVyaW5pLzcyOTI5NFxuLy8gRm9yIHRlc3QgY2FzZXM6IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL3VybC1yZWdleFxuLy8gQHRvZG8gRGVsZXRlIGN1cnJlbnQgVVJMIGluIGZhdm91ciBvZiB0aGUgY29tbWVudGVkIG91dCBVUkwgcnVsZSB3aGVuIHRoaXMgaXNzdWUgaXMgZml4ZWQgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzc5ODMuXG4vLyB2YXIgVVJMID0gL14oPzooPzpodHRwcz98ZnRwKTpcXC9cXC8pKD86XFxTKyg/OjpcXFMqKT9AKT8oPzooPyExMCg/OlxcLlxcZHsxLDN9KXszfSkoPyExMjcoPzpcXC5cXGR7MSwzfSl7M30pKD8hMTY5XFwuMjU0KD86XFwuXFxkezEsM30pezJ9KSg/ITE5MlxcLjE2OCg/OlxcLlxcZHsxLDN9KXsyfSkoPyExNzJcXC4oPzoxWzYtOV18MlxcZHwzWzAtMV0pKD86XFwuXFxkezEsM30pezJ9KSg/OlsxLTldXFxkP3wxXFxkXFxkfDJbMDFdXFxkfDIyWzAtM10pKD86XFwuKD86MT9cXGR7MSwyfXwyWzAtNF1cXGR8MjVbMC01XSkpezJ9KD86XFwuKD86WzEtOV1cXGQ/fDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNF0pKXwoPzooPzpbYS16XFx1ezAwYTF9LVxcdXtmZmZmfTAtOV0rLT8pKlthLXpcXHV7MDBhMX0tXFx1e2ZmZmZ9MC05XSspKD86XFwuKD86W2EtelxcdXswMGExfS1cXHV7ZmZmZn0wLTldKy0/KSpbYS16XFx1ezAwYTF9LVxcdXtmZmZmfTAtOV0rKSooPzpcXC4oPzpbYS16XFx1ezAwYTF9LVxcdXtmZmZmfV17Mix9KSkpKD86OlxcZHsyLDV9KT8oPzpcXC9bXlxcc10qKT8kL2l1O1xudmFyIFVSTCA9IC9eKD86KD86aHR0cFtzXFx1MDE3Rl0/fGZ0cCk6XFwvXFwvKSg/Oig/OltcXDAtXFx4MDhcXHgwRS1cXHgxRiEtXFx4OUZcXHhBMS1cXHUxNjdGXFx1MTY4MS1cXHUxRkZGXFx1MjAwQi1cXHUyMDI3XFx1MjAyQS1cXHUyMDJFXFx1MjAzMC1cXHUyMDVFXFx1MjA2MC1cXHUyRkZGXFx1MzAwMS1cXHVEN0ZGXFx1RTAwMC1cXHVGRUZFXFx1RkYwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKSsoPzo6KD86W1xcMC1cXHgwOFxceDBFLVxceDFGIS1cXHg5RlxceEExLVxcdTE2N0ZcXHUxNjgxLVxcdTFGRkZcXHUyMDBCLVxcdTIwMjdcXHUyMDJBLVxcdTIwMkVcXHUyMDMwLVxcdTIwNUVcXHUyMDYwLVxcdTJGRkZcXHUzMDAxLVxcdUQ3RkZcXHVFMDAwLVxcdUZFRkVcXHVGRjAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pKik/QCk/KD86KD8hMTAoPzpcXC5bMC05XXsxLDN9KXszfSkoPyExMjcoPzpcXC5bMC05XXsxLDN9KXszfSkoPyExNjlcXC4yNTQoPzpcXC5bMC05XXsxLDN9KXsyfSkoPyExOTJcXC4xNjgoPzpcXC5bMC05XXsxLDN9KXsyfSkoPyExNzJcXC4oPzoxWzYtOV18MlswLTldfDNbMDFdKSg/OlxcLlswLTldezEsM30pezJ9KSg/OlsxLTldWzAtOV0/fDFbMC05XVswLTldfDJbMDFdWzAtOV18MjJbMC0zXSkoPzpcXC4oPzoxP1swLTldezEsMn18MlswLTRdWzAtOV18MjVbMC01XSkpezJ9KD86XFwuKD86WzEtOV1bMC05XT98MVswLTldWzAtOV18MlswLTRdWzAtOV18MjVbMC00XSkpfCg/Oig/Oig/OlswLTlLU2EtelxceEExLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKSstPykqKD86WzAtOUtTYS16XFx4QTEtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pKykoPzpcXC4oPzooPzpbMC05S1NhLXpcXHhBMS1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXSkrLT8pKig/OlswLTlLU2EtelxceEExLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKSspKig/OlxcLig/Oig/OltLU2EtelxceEExLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKXsyLH0pKSkoPzo6WzAtOV17Miw1fSk/KD86XFwvKD86W1xcMC1cXHgwOFxceDBFLVxceDFGIS1cXHg5RlxceEExLVxcdTE2N0ZcXHUxNjgxLVxcdTFGRkZcXHUyMDBCLVxcdTIwMjdcXHUyMDJBLVxcdTIwMkVcXHUyMDMwLVxcdTIwNUVcXHUyMDYwLVxcdTJGRkZcXHUzMDAxLVxcdUQ3RkZcXHVFMDAwLVxcdUZFRkVcXHVGRjAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pKik/JC9pO1xudmFyIFVVSUQgPSAvXig/OnVybjp1dWlkOik/WzAtOWEtZl17OH0tKD86WzAtOWEtZl17NH0tKXszfVswLTlhLWZdezEyfSQvaTtcbnZhciBKU09OX1BPSU5URVIgPSAvXig/OlxcLyg/Oltefi9dfH4wfH4xKSopKiQvO1xudmFyIEpTT05fUE9JTlRFUl9VUklfRlJBR01FTlQgPSAvXiMoPzpcXC8oPzpbYS16MC05X1xcLS4hJCYnKCkqKyw7Oj1AXXwlWzAtOWEtZl17Mn18fjB8fjEpKikqJC9pO1xudmFyIFJFTEFUSVZFX0pTT05fUE9JTlRFUiA9IC9eKD86MHxbMS05XVswLTldKikoPzojfCg/OlxcLyg/Oltefi9dfH4wfH4xKSopKikkLztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdHM7XG5cbmZ1bmN0aW9uIGZvcm1hdHMobW9kZSkge1xuICBtb2RlID0gbW9kZSA9PSAnZnVsbCcgPyAnZnVsbCcgOiAnZmFzdCc7XG4gIHJldHVybiB1dGlsLmNvcHkoZm9ybWF0c1ttb2RlXSk7XG59XG5cblxuZm9ybWF0cy5mYXN0ID0ge1xuICAvLyBkYXRlOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzMzM5I3NlY3Rpb24tNS42XG4gIGRhdGU6IC9eXFxkXFxkXFxkXFxkLVswLTFdXFxkLVswLTNdXFxkJC8sXG4gIC8vIGRhdGUtdGltZTogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNzZWN0aW9uLTUuNlxuICB0aW1lOiAvXig/OlswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkfDIzOjU5OjYwKSg/OlxcLlxcZCspPyg/Onp8WystXVxcZFxcZDpcXGRcXGQpPyQvaSxcbiAgJ2RhdGUtdGltZSc6IC9eXFxkXFxkXFxkXFxkLVswLTFdXFxkLVswLTNdXFxkW3RcXHNdKD86WzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGR8MjM6NTk6NjApKD86XFwuXFxkKyk/KD86enxbKy1dXFxkXFxkOlxcZFxcZCkkL2ksXG4gIC8vIHVyaTogaHR0cHM6Ly9naXRodWIuY29tL21hZmludG9zaC9pcy1teS1qc29uLXZhbGlkL2Jsb2IvbWFzdGVyL2Zvcm1hdHMuanNcbiAgdXJpOiAvXig/OlthLXpdW2EtejAtOSstLl0qOikoPzpcXC8/XFwvKT9bXlxcc10qJC9pLFxuICAndXJpLXJlZmVyZW5jZSc6IC9eKD86KD86W2Etel1bYS16MC05Ky0uXSo6KT9cXC8/XFwvKT8oPzpbXlxcXFxcXHMjXVteXFxzI10qKT8oPzojW15cXFxcXFxzXSopPyQvaSxcbiAgJ3VyaS10ZW1wbGF0ZSc6IFVSSVRFTVBMQVRFLFxuICB1cmw6IFVSTCxcbiAgLy8gZW1haWwgKHNvdXJjZXMgZnJvbSBqc2VuIHZhbGlkYXRvcik6XG4gIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjAxMzIzL3VzaW5nLWEtcmVndWxhci1leHByZXNzaW9uLXRvLXZhbGlkYXRlLWFuLWVtYWlsLWFkZHJlc3MjYW5zd2VyLTg4MjkzNjNcbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvZm9ybXMuaHRtbCN2YWxpZC1lLW1haWwtYWRkcmVzcyAoc2VhcmNoIGZvciAnd2lsbGZ1bCB2aW9sYXRpb24nKVxuICBlbWFpbDogL15bYS16MC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dK0BbYS16MC05XSg/OlthLXowLTktXXswLDYxfVthLXowLTldKT8oPzpcXC5bYS16MC05XSg/OlthLXowLTktXXswLDYxfVthLXowLTldKT8pKiQvaSxcbiAgaG9zdG5hbWU6IEhPU1ROQU1FLFxuICAvLyBvcHRpbWl6ZWQgaHR0cHM6Ly93d3cuc2FmYXJpYm9va3NvbmxpbmUuY29tL2xpYnJhcnkvdmlldy9yZWd1bGFyLWV4cHJlc3Npb25zLWNvb2tib29rLzk3ODA1OTY4MDI4MzcvY2gwN3MxNi5odG1sXG4gIGlwdjQ6IC9eKD86KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pJC8sXG4gIC8vIG9wdGltaXplZCBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzUzNDk3L3JlZ3VsYXItZXhwcmVzc2lvbi10aGF0LW1hdGNoZXMtdmFsaWQtaXB2Ni1hZGRyZXNzZXNcbiAgaXB2NjogL15cXHMqKD86KD86KD86WzAtOWEtZl17MSw0fTopezd9KD86WzAtOWEtZl17MSw0fXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezZ9KD86OlswLTlhLWZdezEsNH18KD86KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKD86XFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSl8OikpfCg/Oig/OlswLTlhLWZdezEsNH06KXs1fSg/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDJ9KXw6KD86KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKD86XFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSl8OikpfCg/Oig/OlswLTlhLWZdezEsNH06KXs0fSg/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDN9KXwoPzooPzo6WzAtOWEtZl17MSw0fSk/Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezN9KD86KD86KD86OlswLTlhLWZdezEsNH0pezEsNH0pfCg/Oig/OjpbMC05YS1mXXsxLDR9KXswLDJ9Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezJ9KD86KD86KD86OlswLTlhLWZdezEsNH0pezEsNX0pfCg/Oig/OjpbMC05YS1mXXsxLDR9KXswLDN9Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezF9KD86KD86KD86OlswLTlhLWZdezEsNH0pezEsNn0pfCg/Oig/OjpbMC05YS1mXXsxLDR9KXswLDR9Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86Oig/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDd9KXwoPzooPzo6WzAtOWEtZl17MSw0fSl7MCw1fTooPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoPzpcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpKSg/OiUuKyk/XFxzKiQvaSxcbiAgcmVnZXg6IHJlZ2V4LFxuICAvLyB1dWlkOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0MTIyXG4gIHV1aWQ6IFVVSUQsXG4gIC8vIEpTT04tcG9pbnRlcjogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY5MDFcbiAgLy8gdXJpIGZyYWdtZW50OiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNhcHBlbmRpeC1BXG4gICdqc29uLXBvaW50ZXInOiBKU09OX1BPSU5URVIsXG4gICdqc29uLXBvaW50ZXItdXJpLWZyYWdtZW50JzogSlNPTl9QT0lOVEVSX1VSSV9GUkFHTUVOVCxcbiAgLy8gcmVsYXRpdmUgSlNPTi1wb2ludGVyOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1sdWZmLXJlbGF0aXZlLWpzb24tcG9pbnRlci0wMFxuICAncmVsYXRpdmUtanNvbi1wb2ludGVyJzogUkVMQVRJVkVfSlNPTl9QT0lOVEVSXG59O1xuXG5cbmZvcm1hdHMuZnVsbCA9IHtcbiAgZGF0ZTogZGF0ZSxcbiAgdGltZTogdGltZSxcbiAgJ2RhdGUtdGltZSc6IGRhdGVfdGltZSxcbiAgdXJpOiB1cmksXG4gICd1cmktcmVmZXJlbmNlJzogVVJJUkVGLFxuICAndXJpLXRlbXBsYXRlJzogVVJJVEVNUExBVEUsXG4gIHVybDogVVJMLFxuICBlbWFpbDogL15bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cXC4pK1thLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT8kL2ksXG4gIGhvc3RuYW1lOiBob3N0bmFtZSxcbiAgaXB2NDogL14oPzooPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdXFxkfFswMV0/XFxkXFxkPykkLyxcbiAgaXB2NjogL15cXHMqKD86KD86KD86WzAtOWEtZl17MSw0fTopezd9KD86WzAtOWEtZl17MSw0fXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezZ9KD86OlswLTlhLWZdezEsNH18KD86KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKD86XFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSl8OikpfCg/Oig/OlswLTlhLWZdezEsNH06KXs1fSg/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDJ9KXw6KD86KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKD86XFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSl8OikpfCg/Oig/OlswLTlhLWZdezEsNH06KXs0fSg/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDN9KXwoPzooPzo6WzAtOWEtZl17MSw0fSk/Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezN9KD86KD86KD86OlswLTlhLWZdezEsNH0pezEsNH0pfCg/Oig/OjpbMC05YS1mXXsxLDR9KXswLDJ9Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezJ9KD86KD86KD86OlswLTlhLWZdezEsNH0pezEsNX0pfCg/Oig/OjpbMC05YS1mXXsxLDR9KXswLDN9Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezF9KD86KD86KD86OlswLTlhLWZdezEsNH0pezEsNn0pfCg/Oig/OjpbMC05YS1mXXsxLDR9KXswLDR9Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86Oig/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDd9KXwoPzooPzo6WzAtOWEtZl17MSw0fSl7MCw1fTooPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoPzpcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpKSg/OiUuKyk/XFxzKiQvaSxcbiAgcmVnZXg6IHJlZ2V4LFxuICB1dWlkOiBVVUlELFxuICAnanNvbi1wb2ludGVyJzogSlNPTl9QT0lOVEVSLFxuICAnanNvbi1wb2ludGVyLXVyaS1mcmFnbWVudCc6IEpTT05fUE9JTlRFUl9VUklfRlJBR01FTlQsXG4gICdyZWxhdGl2ZS1qc29uLXBvaW50ZXInOiBSRUxBVElWRV9KU09OX1BPSU5URVJcbn07XG5cblxuZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzMzM5I2FwcGVuZGl4LUNcbiAgcmV0dXJuIHllYXIgJSA0ID09PSAwICYmICh5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDApO1xufVxuXG5cbmZ1bmN0aW9uIGRhdGUoc3RyKSB7XG4gIC8vIGZ1bGwtZGF0ZSBmcm9tIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMzMzkjc2VjdGlvbi01LjZcbiAgdmFyIG1hdGNoZXMgPSBzdHIubWF0Y2goREFURSk7XG4gIGlmICghbWF0Y2hlcykgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciB5ZWFyID0gK21hdGNoZXNbMV07XG4gIHZhciBtb250aCA9ICttYXRjaGVzWzJdO1xuICB2YXIgZGF5ID0gK21hdGNoZXNbM107XG5cbiAgcmV0dXJuIG1vbnRoID49IDEgJiYgbW9udGggPD0gMTIgJiYgZGF5ID49IDEgJiZcbiAgICAgICAgICBkYXkgPD0gKG1vbnRoID09IDIgJiYgaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogREFZU1ttb250aF0pO1xufVxuXG5cbmZ1bmN0aW9uIHRpbWUoc3RyLCBmdWxsKSB7XG4gIHZhciBtYXRjaGVzID0gc3RyLm1hdGNoKFRJTUUpO1xuICBpZiAoIW1hdGNoZXMpIHJldHVybiBmYWxzZTtcblxuICB2YXIgaG91ciA9IG1hdGNoZXNbMV07XG4gIHZhciBtaW51dGUgPSBtYXRjaGVzWzJdO1xuICB2YXIgc2Vjb25kID0gbWF0Y2hlc1szXTtcbiAgdmFyIHRpbWVab25lID0gbWF0Y2hlc1s1XTtcbiAgcmV0dXJuICgoaG91ciA8PSAyMyAmJiBtaW51dGUgPD0gNTkgJiYgc2Vjb25kIDw9IDU5KSB8fFxuICAgICAgICAgIChob3VyID09IDIzICYmIG1pbnV0ZSA9PSA1OSAmJiBzZWNvbmQgPT0gNjApKSAmJlxuICAgICAgICAgKCFmdWxsIHx8IHRpbWVab25lKTtcbn1cblxuXG52YXIgREFURV9USU1FX1NFUEFSQVRPUiA9IC90fFxccy9pO1xuZnVuY3Rpb24gZGF0ZV90aW1lKHN0cikge1xuICAvLyBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzMzM5I3NlY3Rpb24tNS42XG4gIHZhciBkYXRlVGltZSA9IHN0ci5zcGxpdChEQVRFX1RJTUVfU0VQQVJBVE9SKTtcbiAgcmV0dXJuIGRhdGVUaW1lLmxlbmd0aCA9PSAyICYmIGRhdGUoZGF0ZVRpbWVbMF0pICYmIHRpbWUoZGF0ZVRpbWVbMV0sIHRydWUpO1xufVxuXG5cbmZ1bmN0aW9uIGhvc3RuYW1lKHN0cikge1xuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMTAzNCNzZWN0aW9uLTMuNVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMTEyMyNzZWN0aW9uLTJcbiAgcmV0dXJuIHN0ci5sZW5ndGggPD0gMjU1ICYmIEhPU1ROQU1FLnRlc3Qoc3RyKTtcbn1cblxuXG52YXIgTk9UX1VSSV9GUkFHTUVOVCA9IC9cXC98Oi87XG5mdW5jdGlvbiB1cmkoc3RyKSB7XG4gIC8vIGh0dHA6Ly9qbXJ3YXJlLmNvbS9hcnRpY2xlcy8yMDA5L3VyaV9yZWdleHAvVVJJX3JlZ2V4Lmh0bWwgKyBvcHRpb25hbCBwcm90b2NvbCArIHJlcXVpcmVkIFwiLlwiXG4gIHJldHVybiBOT1RfVVJJX0ZSQUdNRU5ULnRlc3Qoc3RyKSAmJiBVUkkudGVzdChzdHIpO1xufVxuXG5cbnZhciBaX0FOQ0hPUiA9IC9bXlxcXFxdXFxcXFovO1xuZnVuY3Rpb24gcmVnZXgoc3RyKSB7XG4gIGlmIChaX0FOQ0hPUi50ZXN0KHN0cikpIHJldHVybiBmYWxzZTtcbiAgdHJ5IHtcbiAgICBuZXcgUmVnRXhwKHN0cik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcnVsZU1vZHVsZXMgPSByZXF1aXJlKCcuLi9kb3RqcycpXG4gICwgdG9IYXNoID0gcmVxdWlyZSgnLi91dGlsJykudG9IYXNoO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJ1bGVzKCkge1xuICB2YXIgUlVMRVMgPSBbXG4gICAgeyB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHJ1bGVzOiBbIHsgJ21heGltdW0nOiBbJ2V4Y2x1c2l2ZU1heGltdW0nXSB9LFxuICAgICAgICAgICAgICAgeyAnbWluaW11bSc6IFsnZXhjbHVzaXZlTWluaW11bSddIH0sICdtdWx0aXBsZU9mJywgJ2Zvcm1hdCddIH0sXG4gICAgeyB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIHJ1bGVzOiBbICdtYXhMZW5ndGgnLCAnbWluTGVuZ3RoJywgJ3BhdHRlcm4nLCAnZm9ybWF0JyBdIH0sXG4gICAgeyB0eXBlOiAnYXJyYXknLFxuICAgICAgcnVsZXM6IFsgJ21heEl0ZW1zJywgJ21pbkl0ZW1zJywgJ2l0ZW1zJywgJ2NvbnRhaW5zJywgJ3VuaXF1ZUl0ZW1zJyBdIH0sXG4gICAgeyB0eXBlOiAnb2JqZWN0JyxcbiAgICAgIHJ1bGVzOiBbICdtYXhQcm9wZXJ0aWVzJywgJ21pblByb3BlcnRpZXMnLCAncmVxdWlyZWQnLCAnZGVwZW5kZW5jaWVzJywgJ3Byb3BlcnR5TmFtZXMnLFxuICAgICAgICAgICAgICAgeyAncHJvcGVydGllcyc6IFsnYWRkaXRpb25hbFByb3BlcnRpZXMnLCAncGF0dGVyblByb3BlcnRpZXMnXSB9IF0gfSxcbiAgICB7IHJ1bGVzOiBbICckcmVmJywgJ2NvbnN0JywgJ2VudW0nLCAnbm90JywgJ2FueU9mJywgJ29uZU9mJywgJ2FsbE9mJywgJ2lmJyBdIH1cbiAgXTtcblxuICB2YXIgQUxMID0gWyAndHlwZScsICckY29tbWVudCcgXTtcbiAgdmFyIEtFWVdPUkRTID0gW1xuICAgICckc2NoZW1hJywgJyRpZCcsICdpZCcsICckZGF0YScsICd0aXRsZScsXG4gICAgJ2Rlc2NyaXB0aW9uJywgJ2RlZmF1bHQnLCAnZGVmaW5pdGlvbnMnLFxuICAgICdleGFtcGxlcycsICdyZWFkT25seScsICd3cml0ZU9ubHknLFxuICAgICdjb250ZW50TWVkaWFUeXBlJywgJ2NvbnRlbnRFbmNvZGluZycsXG4gICAgJ2FkZGl0aW9uYWxJdGVtcycsICd0aGVuJywgJ2Vsc2UnXG4gIF07XG4gIHZhciBUWVBFUyA9IFsgJ251bWJlcicsICdpbnRlZ2VyJywgJ3N0cmluZycsICdhcnJheScsICdvYmplY3QnLCAnYm9vbGVhbicsICdudWxsJyBdO1xuICBSVUxFUy5hbGwgPSB0b0hhc2goQUxMKTtcbiAgUlVMRVMudHlwZXMgPSB0b0hhc2goVFlQRVMpO1xuXG4gIFJVTEVTLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgZ3JvdXAucnVsZXMgPSBncm91cC5ydWxlcy5tYXAoZnVuY3Rpb24gKGtleXdvcmQpIHtcbiAgICAgIHZhciBpbXBsS2V5d29yZHM7XG4gICAgICBpZiAodHlwZW9mIGtleXdvcmQgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFyIGtleSA9IE9iamVjdC5rZXlzKGtleXdvcmQpWzBdO1xuICAgICAgICBpbXBsS2V5d29yZHMgPSBrZXl3b3JkW2tleV07XG4gICAgICAgIGtleXdvcmQgPSBrZXk7XG4gICAgICAgIGltcGxLZXl3b3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgQUxMLnB1c2goayk7XG4gICAgICAgICAgUlVMRVMuYWxsW2tdID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBBTEwucHVzaChrZXl3b3JkKTtcbiAgICAgIHZhciBydWxlID0gUlVMRVMuYWxsW2tleXdvcmRdID0ge1xuICAgICAgICBrZXl3b3JkOiBrZXl3b3JkLFxuICAgICAgICBjb2RlOiBydWxlTW9kdWxlc1trZXl3b3JkXSxcbiAgICAgICAgaW1wbGVtZW50czogaW1wbEtleXdvcmRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfSk7XG5cbiAgICBSVUxFUy5hbGwuJGNvbW1lbnQgPSB7XG4gICAgICBrZXl3b3JkOiAnJGNvbW1lbnQnLFxuICAgICAgY29kZTogcnVsZU1vZHVsZXMuJGNvbW1lbnRcbiAgICB9O1xuXG4gICAgaWYgKGdyb3VwLnR5cGUpIFJVTEVTLnR5cGVzW2dyb3VwLnR5cGVdID0gZ3JvdXA7XG4gIH0pO1xuXG4gIFJVTEVTLmtleXdvcmRzID0gdG9IYXNoKEFMTC5jb25jYXQoS0VZV09SRFMpKTtcbiAgUlVMRVMuY3VzdG9tID0ge307XG5cbiAgcmV0dXJuIFJVTEVTO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy9hbGwgcmVxdWlyZXMgbXVzdCBiZSBleHBsaWNpdCBiZWNhdXNlIGJyb3dzZXJpZnkgd29uJ3Qgd29yayB3aXRoIGR5bmFtaWMgcmVxdWlyZXNcbm1vZHVsZS5leHBvcnRzID0ge1xuICAnJHJlZic6IHJlcXVpcmUoJy4vcmVmJyksXG4gIGFsbE9mOiByZXF1aXJlKCcuL2FsbE9mJyksXG4gIGFueU9mOiByZXF1aXJlKCcuL2FueU9mJyksXG4gICckY29tbWVudCc6IHJlcXVpcmUoJy4vY29tbWVudCcpLFxuICBjb25zdDogcmVxdWlyZSgnLi9jb25zdCcpLFxuICBjb250YWluczogcmVxdWlyZSgnLi9jb250YWlucycpLFxuICBkZXBlbmRlbmNpZXM6IHJlcXVpcmUoJy4vZGVwZW5kZW5jaWVzJyksXG4gICdlbnVtJzogcmVxdWlyZSgnLi9lbnVtJyksXG4gIGZvcm1hdDogcmVxdWlyZSgnLi9mb3JtYXQnKSxcbiAgJ2lmJzogcmVxdWlyZSgnLi9pZicpLFxuICBpdGVtczogcmVxdWlyZSgnLi9pdGVtcycpLFxuICBtYXhpbXVtOiByZXF1aXJlKCcuL19saW1pdCcpLFxuICBtaW5pbXVtOiByZXF1aXJlKCcuL19saW1pdCcpLFxuICBtYXhJdGVtczogcmVxdWlyZSgnLi9fbGltaXRJdGVtcycpLFxuICBtaW5JdGVtczogcmVxdWlyZSgnLi9fbGltaXRJdGVtcycpLFxuICBtYXhMZW5ndGg6IHJlcXVpcmUoJy4vX2xpbWl0TGVuZ3RoJyksXG4gIG1pbkxlbmd0aDogcmVxdWlyZSgnLi9fbGltaXRMZW5ndGgnKSxcbiAgbWF4UHJvcGVydGllczogcmVxdWlyZSgnLi9fbGltaXRQcm9wZXJ0aWVzJyksXG4gIG1pblByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX2xpbWl0UHJvcGVydGllcycpLFxuICBtdWx0aXBsZU9mOiByZXF1aXJlKCcuL211bHRpcGxlT2YnKSxcbiAgbm90OiByZXF1aXJlKCcuL25vdCcpLFxuICBvbmVPZjogcmVxdWlyZSgnLi9vbmVPZicpLFxuICBwYXR0ZXJuOiByZXF1aXJlKCcuL3BhdHRlcm4nKSxcbiAgcHJvcGVydGllczogcmVxdWlyZSgnLi9wcm9wZXJ0aWVzJyksXG4gIHByb3BlcnR5TmFtZXM6IHJlcXVpcmUoJy4vcHJvcGVydHlOYW1lcycpLFxuICByZXF1aXJlZDogcmVxdWlyZSgnLi9yZXF1aXJlZCcpLFxuICB1bmlxdWVJdGVtczogcmVxdWlyZSgnLi91bmlxdWVJdGVtcycpLFxuICB2YWxpZGF0ZTogcmVxdWlyZSgnLi92YWxpZGF0ZScpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9yZWYoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRhc3luYywgJHJlZkNvZGU7XG4gIGlmICgkc2NoZW1hID09ICcjJyB8fCAkc2NoZW1hID09ICcjLycpIHtcbiAgICBpZiAoaXQuaXNSb290KSB7XG4gICAgICAkYXN5bmMgPSBpdC5hc3luYztcbiAgICAgICRyZWZDb2RlID0gJ3ZhbGlkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgJGFzeW5jID0gaXQucm9vdC5zY2hlbWEuJGFzeW5jID09PSB0cnVlO1xuICAgICAgJHJlZkNvZGUgPSAncm9vdC5yZWZWYWxbMF0nO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgJHJlZlZhbCA9IGl0LnJlc29sdmVSZWYoaXQuYmFzZUlkLCAkc2NoZW1hLCBpdC5pc1Jvb3QpO1xuICAgIGlmICgkcmVmVmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciAkbWVzc2FnZSA9IGl0Lk1pc3NpbmdSZWZFcnJvci5tZXNzYWdlKGl0LmJhc2VJZCwgJHNjaGVtYSk7XG4gICAgICBpZiAoaXQub3B0cy5taXNzaW5nUmVmcyA9PSAnZmFpbCcpIHtcbiAgICAgICAgaXQubG9nZ2VyLmVycm9yKCRtZXNzYWdlKTtcbiAgICAgICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCckcmVmJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyByZWY6IFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHNjaGVtYSkpICsgJ1xcJyB9ICc7XG4gICAgICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ2NhblxcXFxcXCd0IHJlc29sdmUgcmVmZXJlbmNlICcgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHNjaGVtYSkpICsgJ1xcJyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRzY2hlbWEpKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB7fSAnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfX2VyciA9IG91dDtcbiAgICAgICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICBvdXQgKz0gJyBpZiAoZmFsc2UpIHsgJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpdC5vcHRzLm1pc3NpbmdSZWZzID09ICdpZ25vcmUnKSB7XG4gICAgICAgIGl0LmxvZ2dlci53YXJuKCRtZXNzYWdlKTtcbiAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgaXQuTWlzc2luZ1JlZkVycm9yKGl0LmJhc2VJZCwgJHNjaGVtYSwgJG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoJHJlZlZhbC5pbmxpbmUpIHtcbiAgICAgIHZhciAkaXQgPSBpdC51dGlsLmNvcHkoaXQpO1xuICAgICAgJGl0LmxldmVsKys7XG4gICAgICB2YXIgJG5leHRWYWxpZCA9ICd2YWxpZCcgKyAkaXQubGV2ZWw7XG4gICAgICAkaXQuc2NoZW1hID0gJHJlZlZhbC5zY2hlbWE7XG4gICAgICAkaXQuc2NoZW1hUGF0aCA9ICcnO1xuICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSAkc2NoZW1hO1xuICAgICAgdmFyICRjb2RlID0gaXQudmFsaWRhdGUoJGl0KS5yZXBsYWNlKC92YWxpZGF0ZVxcLnNjaGVtYS9nLCAkcmVmVmFsLmNvZGUpO1xuICAgICAgb3V0ICs9ICcgJyArICgkY29kZSkgKyAnICc7XG4gICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkbmV4dFZhbGlkKSArICcpIHsgJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgJGFzeW5jID0gJHJlZlZhbC4kYXN5bmMgPT09IHRydWUgfHwgKGl0LmFzeW5jICYmICRyZWZWYWwuJGFzeW5jICE9PSBmYWxzZSk7XG4gICAgICAkcmVmQ29kZSA9ICRyZWZWYWwuY29kZTtcbiAgICB9XG4gIH1cbiAgaWYgKCRyZWZDb2RlKSB7XG4gICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICAgIG91dCA9ICcnO1xuICAgIGlmIChpdC5vcHRzLnBhc3NDb250ZXh0KSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCRyZWZDb2RlKSArICcuY2FsbCh0aGlzLCAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCRyZWZDb2RlKSArICcoICc7XG4gICAgfVxuICAgIG91dCArPSAnICcgKyAoJGRhdGEpICsgJywgKGRhdGFQYXRoIHx8IFxcJ1xcJyknO1xuICAgIGlmIChpdC5lcnJvclBhdGggIT0gJ1wiXCInKSB7XG4gICAgICBvdXQgKz0gJyArICcgKyAoaXQuZXJyb3JQYXRoKTtcbiAgICB9XG4gICAgdmFyICRwYXJlbnREYXRhID0gJGRhdGFMdmwgPyAnZGF0YScgKyAoKCRkYXRhTHZsIC0gMSkgfHwgJycpIDogJ3BhcmVudERhdGEnLFxuICAgICAgJHBhcmVudERhdGFQcm9wZXJ0eSA9ICRkYXRhTHZsID8gaXQuZGF0YVBhdGhBcnJbJGRhdGFMdmxdIDogJ3BhcmVudERhdGFQcm9wZXJ0eSc7XG4gICAgb3V0ICs9ICcgLCAnICsgKCRwYXJlbnREYXRhKSArICcgLCAnICsgKCRwYXJlbnREYXRhUHJvcGVydHkpICsgJywgcm9vdERhdGEpICAnO1xuICAgIHZhciBfX2NhbGxWYWxpZGF0ZSA9IG91dDtcbiAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgIGlmICgkYXN5bmMpIHtcbiAgICAgIGlmICghaXQuYXN5bmMpIHRocm93IG5ldyBFcnJvcignYXN5bmMgc2NoZW1hIHJlZmVyZW5jZWQgYnkgc3luYyBzY2hlbWEnKTtcbiAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgIG91dCArPSAnIHZhciAnICsgKCR2YWxpZCkgKyAnOyAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgdHJ5IHsgYXdhaXQgJyArIChfX2NhbGxWYWxpZGF0ZSkgKyAnOyAnO1xuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgb3V0ICs9ICcgJyArICgkdmFsaWQpICsgJyA9IHRydWU7ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9IGNhdGNoIChlKSB7IGlmICghKGUgaW5zdGFuY2VvZiBWYWxpZGF0aW9uRXJyb3IpKSB0aHJvdyBlOyBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IGUuZXJyb3JzOyBlbHNlIHZFcnJvcnMgPSB2RXJyb3JzLmNvbmNhdChlLmVycm9ycyk7IGVycm9ycyA9IHZFcnJvcnMubGVuZ3RoOyAnO1xuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgb3V0ICs9ICcgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJHZhbGlkKSArICcpIHsgJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgaWYgKCEnICsgKF9fY2FsbFZhbGlkYXRlKSArICcpIHsgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSAnICsgKCRyZWZDb2RlKSArICcuZXJyb3JzOyBlbHNlIHZFcnJvcnMgPSB2RXJyb3JzLmNvbmNhdCgnICsgKCRyZWZDb2RlKSArICcuZXJyb3JzKTsgZXJyb3JzID0gdkVycm9ycy5sZW5ndGg7IH0gJztcbiAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgIG91dCArPSAnIGVsc2UgeyAnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9hbGxPZihpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gIHZhciAkY2xvc2luZ0JyYWNlcyA9ICcnO1xuICAkaXQubGV2ZWwrKztcbiAgdmFyICRuZXh0VmFsaWQgPSAndmFsaWQnICsgJGl0LmxldmVsO1xuICB2YXIgJGN1cnJlbnRCYXNlSWQgPSAkaXQuYmFzZUlkLFxuICAgICRhbGxTY2hlbWFzRW1wdHkgPSB0cnVlO1xuICB2YXIgYXJyMSA9ICRzY2hlbWE7XG4gIGlmIChhcnIxKSB7XG4gICAgdmFyICRzY2gsICRpID0gLTEsXG4gICAgICBsMSA9IGFycjEubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoJGkgPCBsMSkge1xuICAgICAgJHNjaCA9IGFycjFbJGkgKz0gMV07XG4gICAgICBpZiAoaXQudXRpbC5zY2hlbWFIYXNSdWxlcygkc2NoLCBpdC5SVUxFUy5hbGwpKSB7XG4gICAgICAgICRhbGxTY2hlbWFzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgJGl0LnNjaGVtYSA9ICRzY2g7XG4gICAgICAgICRpdC5zY2hlbWFQYXRoID0gJHNjaGVtYVBhdGggKyAnWycgKyAkaSArICddJztcbiAgICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSAkZXJyU2NoZW1hUGF0aCArICcvJyArICRpO1xuICAgICAgICBvdXQgKz0gJyAgJyArIChpdC52YWxpZGF0ZSgkaXQpKSArICcgJztcbiAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJykgeyAnO1xuICAgICAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIGlmICgkYWxsU2NoZW1hc0VtcHR5KSB7XG4gICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCRjbG9zaW5nQnJhY2VzLnNsaWNlKDAsIC0xKSkgKyAnICc7XG4gICAgfVxuICB9XG4gIG91dCA9IGl0LnV0aWwuY2xlYW5VcENvZGUob3V0KTtcbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfYW55T2YoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsO1xuICB2YXIgJGVycnMgPSAnZXJyc19fJyArICRsdmw7XG4gIHZhciAkaXQgPSBpdC51dGlsLmNvcHkoaXQpO1xuICB2YXIgJGNsb3NpbmdCcmFjZXMgPSAnJztcbiAgJGl0LmxldmVsKys7XG4gIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgdmFyICRub0VtcHR5U2NoZW1hID0gJHNjaGVtYS5ldmVyeShmdW5jdGlvbigkc2NoKSB7XG4gICAgcmV0dXJuIGl0LnV0aWwuc2NoZW1hSGFzUnVsZXMoJHNjaCwgaXQuUlVMRVMuYWxsKTtcbiAgfSk7XG4gIGlmICgkbm9FbXB0eVNjaGVtYSkge1xuICAgIHZhciAkY3VycmVudEJhc2VJZCA9ICRpdC5iYXNlSWQ7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJGVycnMpICsgJyA9IGVycm9yczsgdmFyICcgKyAoJHZhbGlkKSArICcgPSBmYWxzZTsgICc7XG4gICAgdmFyICR3YXNDb21wb3NpdGUgPSBpdC5jb21wb3NpdGVSdWxlO1xuICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9IHRydWU7XG4gICAgdmFyIGFycjEgPSAkc2NoZW1hO1xuICAgIGlmIChhcnIxKSB7XG4gICAgICB2YXIgJHNjaCwgJGkgPSAtMSxcbiAgICAgICAgbDEgPSBhcnIxLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoJGkgPCBsMSkge1xuICAgICAgICAkc2NoID0gYXJyMVskaSArPSAxXTtcbiAgICAgICAgJGl0LnNjaGVtYSA9ICRzY2g7XG4gICAgICAgICRpdC5zY2hlbWFQYXRoID0gJHNjaGVtYVBhdGggKyAnWycgKyAkaSArICddJztcbiAgICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSAkZXJyU2NoZW1hUGF0aCArICcvJyArICRpO1xuICAgICAgICBvdXQgKz0gJyAgJyArIChpdC52YWxpZGF0ZSgkaXQpKSArICcgJztcbiAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICBvdXQgKz0gJyAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkdmFsaWQpICsgJyB8fCAnICsgKCRuZXh0VmFsaWQpICsgJzsgaWYgKCEnICsgKCR2YWxpZCkgKyAnKSB7ICc7XG4gICAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgIH1cbiAgICB9XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gJHdhc0NvbXBvc2l0ZTtcbiAgICBvdXQgKz0gJyAnICsgKCRjbG9zaW5nQnJhY2VzKSArICcgaWYgKCEnICsgKCR2YWxpZCkgKyAnKSB7ICAgdmFyIGVyciA9ICAgJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdhbnlPZicpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHt9ICc7XG4gICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgbWF0Y2ggc29tZSBzY2hlbWEgaW4gYW55T2ZcXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgb3V0ICs9ICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcih2RXJyb3JzKTsgJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IHZFcnJvcnM7IHJldHVybiBmYWxzZTsgJztcbiAgICAgIH1cbiAgICB9XG4gICAgb3V0ICs9ICcgfSBlbHNlIHsgIGVycm9ycyA9ICcgKyAoJGVycnMpICsgJzsgaWYgKHZFcnJvcnMgIT09IG51bGwpIHsgaWYgKCcgKyAoJGVycnMpICsgJykgdkVycm9ycy5sZW5ndGggPSAnICsgKCRlcnJzKSArICc7IGVsc2UgdkVycm9ycyA9IG51bGw7IH0gJztcbiAgICBpZiAoaXQub3B0cy5hbGxFcnJvcnMpIHtcbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9XG4gICAgb3V0ID0gaXQudXRpbC5jbGVhblVwQ29kZShvdXQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9jb21tZW50KGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRjb21tZW50ID0gaXQudXRpbC50b1F1b3RlZFN0cmluZygkc2NoZW1hKTtcbiAgaWYgKGl0Lm9wdHMuJGNvbW1lbnQgPT09IHRydWUpIHtcbiAgICBvdXQgKz0gJyBjb25zb2xlLmxvZygnICsgKCRjb21tZW50KSArICcpOyc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGl0Lm9wdHMuJGNvbW1lbnQgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG91dCArPSAnIHNlbGYuX29wdHMuJGNvbW1lbnQoJyArICgkY29tbWVudCkgKyAnLCAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcsIHZhbGlkYXRlLnJvb3Quc2NoZW1hKTsnO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX2NvbnN0KGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRpc0RhdGEgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWEgJiYgJHNjaGVtYS4kZGF0YSxcbiAgICAkc2NoZW1hVmFsdWU7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLmdldERhdGEoJHNjaGVtYS4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgfSBlbHNlIHtcbiAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hO1xuICB9XG4gIGlmICghJGlzRGF0YSkge1xuICAgIG91dCArPSAnIHZhciBzY2hlbWEnICsgKCRsdmwpICsgJyA9IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJzsnO1xuICB9XG4gIG91dCArPSAndmFyICcgKyAoJHZhbGlkKSArICcgPSBlcXVhbCgnICsgKCRkYXRhKSArICcsIHNjaGVtYScgKyAoJGx2bCkgKyAnKTsgaWYgKCEnICsgKCR2YWxpZCkgKyAnKSB7ICAgJztcbiAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdjb25zdCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgYWxsb3dlZFZhbHVlOiBzY2hlbWEnICsgKCRsdmwpICsgJyB9ICc7XG4gICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBiZSBlcXVhbCB0byBjb25zdGFudFxcJyAnO1xuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICB9XG4gIG91dCArPSAnIH0nO1xuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnIGVsc2UgeyAnO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX2NvbnRhaW5zKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRlcnJzID0gJ2VycnNfXycgKyAkbHZsO1xuICB2YXIgJGl0ID0gaXQudXRpbC5jb3B5KGl0KTtcbiAgdmFyICRjbG9zaW5nQnJhY2VzID0gJyc7XG4gICRpdC5sZXZlbCsrO1xuICB2YXIgJG5leHRWYWxpZCA9ICd2YWxpZCcgKyAkaXQubGV2ZWw7XG4gIHZhciAkaWR4ID0gJ2knICsgJGx2bCxcbiAgICAkZGF0YU54dCA9ICRpdC5kYXRhTGV2ZWwgPSBpdC5kYXRhTGV2ZWwgKyAxLFxuICAgICRuZXh0RGF0YSA9ICdkYXRhJyArICRkYXRhTnh0LFxuICAgICRjdXJyZW50QmFzZUlkID0gaXQuYmFzZUlkLFxuICAgICRub25FbXB0eVNjaGVtYSA9IGl0LnV0aWwuc2NoZW1hSGFzUnVsZXMoJHNjaGVtYSwgaXQuUlVMRVMuYWxsKTtcbiAgb3V0ICs9ICd2YXIgJyArICgkZXJycykgKyAnID0gZXJyb3JzO3ZhciAnICsgKCR2YWxpZCkgKyAnOyc7XG4gIGlmICgkbm9uRW1wdHlTY2hlbWEpIHtcbiAgICB2YXIgJHdhc0NvbXBvc2l0ZSA9IGl0LmNvbXBvc2l0ZVJ1bGU7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gdHJ1ZTtcbiAgICAkaXQuc2NoZW1hID0gJHNjaGVtYTtcbiAgICAkaXQuc2NoZW1hUGF0aCA9ICRzY2hlbWFQYXRoO1xuICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGg7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJG5leHRWYWxpZCkgKyAnID0gZmFsc2U7IGZvciAodmFyICcgKyAoJGlkeCkgKyAnID0gMDsgJyArICgkaWR4KSArICcgPCAnICsgKCRkYXRhKSArICcubGVuZ3RoOyAnICsgKCRpZHgpICsgJysrKSB7ICc7XG4gICAgJGl0LmVycm9yUGF0aCA9IGl0LnV0aWwuZ2V0UGF0aEV4cHIoaXQuZXJyb3JQYXRoLCAkaWR4LCBpdC5vcHRzLmpzb25Qb2ludGVycywgdHJ1ZSk7XG4gICAgdmFyICRwYXNzRGF0YSA9ICRkYXRhICsgJ1snICsgJGlkeCArICddJztcbiAgICAkaXQuZGF0YVBhdGhBcnJbJGRhdGFOeHRdID0gJGlkeDtcbiAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpO1xuICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICBpZiAoaXQudXRpbC52YXJPY2N1cmVuY2VzKCRjb2RlLCAkbmV4dERhdGEpIDwgMikge1xuICAgICAgb3V0ICs9ICcgJyArIChpdC51dGlsLnZhclJlcGxhY2UoJGNvZGUsICRuZXh0RGF0YSwgJHBhc3NEYXRhKSkgKyAnICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhciAnICsgKCRuZXh0RGF0YSkgKyAnID0gJyArICgkcGFzc0RhdGEpICsgJzsgJyArICgkY29kZSkgKyAnICc7XG4gICAgfVxuICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJykgYnJlYWs7IH0gICc7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gJHdhc0NvbXBvc2l0ZTtcbiAgICBvdXQgKz0gJyAnICsgKCRjbG9zaW5nQnJhY2VzKSArICcgaWYgKCEnICsgKCRuZXh0VmFsaWQpICsgJykgeyc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgaWYgKCcgKyAoJGRhdGEpICsgJy5sZW5ndGggPT0gMCkgeyc7XG4gIH1cbiAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdjb250YWlucycpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHt9ICc7XG4gICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBjb250YWluIGEgdmFsaWQgaXRlbVxcJyAnO1xuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICB9XG4gIG91dCArPSAnIH0gZWxzZSB7ICc7XG4gIGlmICgkbm9uRW1wdHlTY2hlbWEpIHtcbiAgICBvdXQgKz0gJyAgZXJyb3JzID0gJyArICgkZXJycykgKyAnOyBpZiAodkVycm9ycyAhPT0gbnVsbCkgeyBpZiAoJyArICgkZXJycykgKyAnKSB2RXJyb3JzLmxlbmd0aCA9ICcgKyAoJGVycnMpICsgJzsgZWxzZSB2RXJyb3JzID0gbnVsbDsgfSAnO1xuICB9XG4gIGlmIChpdC5vcHRzLmFsbEVycm9ycykge1xuICAgIG91dCArPSAnIH0gJztcbiAgfVxuICBvdXQgPSBpdC51dGlsLmNsZWFuVXBDb2RlKG91dCk7XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX2RlcGVuZGVuY2llcyhpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJGVycnMgPSAnZXJyc19fJyArICRsdmw7XG4gIHZhciAkaXQgPSBpdC51dGlsLmNvcHkoaXQpO1xuICB2YXIgJGNsb3NpbmdCcmFjZXMgPSAnJztcbiAgJGl0LmxldmVsKys7XG4gIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgdmFyICRzY2hlbWFEZXBzID0ge30sXG4gICAgJHByb3BlcnR5RGVwcyA9IHt9LFxuICAgICRvd25Qcm9wZXJ0aWVzID0gaXQub3B0cy5vd25Qcm9wZXJ0aWVzO1xuICBmb3IgKCRwcm9wZXJ0eSBpbiAkc2NoZW1hKSB7XG4gICAgdmFyICRzY2ggPSAkc2NoZW1hWyRwcm9wZXJ0eV07XG4gICAgdmFyICRkZXBzID0gQXJyYXkuaXNBcnJheSgkc2NoKSA/ICRwcm9wZXJ0eURlcHMgOiAkc2NoZW1hRGVwcztcbiAgICAkZGVwc1skcHJvcGVydHldID0gJHNjaDtcbiAgfVxuICBvdXQgKz0gJ3ZhciAnICsgKCRlcnJzKSArICcgPSBlcnJvcnM7JztcbiAgdmFyICRjdXJyZW50RXJyb3JQYXRoID0gaXQuZXJyb3JQYXRoO1xuICBvdXQgKz0gJ3ZhciBtaXNzaW5nJyArICgkbHZsKSArICc7JztcbiAgZm9yICh2YXIgJHByb3BlcnR5IGluICRwcm9wZXJ0eURlcHMpIHtcbiAgICAkZGVwcyA9ICRwcm9wZXJ0eURlcHNbJHByb3BlcnR5XTtcbiAgICBpZiAoJGRlcHMubGVuZ3RoKSB7XG4gICAgICBvdXQgKz0gJyBpZiAoICcgKyAoJGRhdGEpICsgKGl0LnV0aWwuZ2V0UHJvcGVydHkoJHByb3BlcnR5KSkgKyAnICE9PSB1bmRlZmluZWQgJztcbiAgICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgICBvdXQgKz0gJyAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoJyArICgkZGF0YSkgKyAnLCBcXCcnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eSkpICsgJ1xcJykgJztcbiAgICAgIH1cbiAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgIG91dCArPSAnICYmICggJztcbiAgICAgICAgdmFyIGFycjEgPSAkZGVwcztcbiAgICAgICAgaWYgKGFycjEpIHtcbiAgICAgICAgICB2YXIgJHByb3BlcnR5S2V5LCAkaSA9IC0xLFxuICAgICAgICAgICAgbDEgPSBhcnIxLmxlbmd0aCAtIDE7XG4gICAgICAgICAgd2hpbGUgKCRpIDwgbDEpIHtcbiAgICAgICAgICAgICRwcm9wZXJ0eUtleSA9IGFycjFbJGkgKz0gMV07XG4gICAgICAgICAgICBpZiAoJGkpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgfHwgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciAkcHJvcCA9IGl0LnV0aWwuZ2V0UHJvcGVydHkoJHByb3BlcnR5S2V5KSxcbiAgICAgICAgICAgICAgJHVzZURhdGEgPSAkZGF0YSArICRwcm9wO1xuICAgICAgICAgICAgb3V0ICs9ICcgKCAoICcgKyAoJHVzZURhdGEpICsgJyA9PT0gdW5kZWZpbmVkICc7XG4gICAgICAgICAgICBpZiAoJG93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgfHwgISBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoJyArICgkZGF0YSkgKyAnLCBcXCcnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eUtleSkpICsgJ1xcJykgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnKSAmJiAobWlzc2luZycgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKGl0Lm9wdHMuanNvblBvaW50ZXJzID8gJHByb3BlcnR5S2V5IDogJHByb3ApKSArICcpICkgJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcpKSB7ICAnO1xuICAgICAgICB2YXIgJHByb3BlcnR5UGF0aCA9ICdtaXNzaW5nJyArICRsdmwsXG4gICAgICAgICAgJG1pc3NpbmdQcm9wZXJ0eSA9ICdcXCcgKyAnICsgJHByb3BlcnR5UGF0aCArICcgKyBcXCcnO1xuICAgICAgICBpZiAoaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5KSB7XG4gICAgICAgICAgaXQuZXJyb3JQYXRoID0gaXQub3B0cy5qc29uUG9pbnRlcnMgPyBpdC51dGlsLmdldFBhdGhFeHByKCRjdXJyZW50RXJyb3JQYXRoLCAkcHJvcGVydHlQYXRoLCB0cnVlKSA6ICRjdXJyZW50RXJyb3JQYXRoICsgJyArICcgKyAkcHJvcGVydHlQYXRoO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAgICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgnZGVwZW5kZW5jaWVzJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBwcm9wZXJ0eTogXFwnJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkcHJvcGVydHkpKSArICdcXCcsIG1pc3NpbmdQcm9wZXJ0eTogXFwnJyArICgkbWlzc2luZ1Byb3BlcnR5KSArICdcXCcsIGRlcHNDb3VudDogJyArICgkZGVwcy5sZW5ndGgpICsgJywgZGVwczogXFwnJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkZGVwcy5sZW5ndGggPT0gMSA/ICRkZXBzWzBdIDogJGRlcHMuam9pbihcIiwgXCIpKSkgKyAnXFwnIH0gJztcbiAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIGhhdmUgJztcbiAgICAgICAgICAgIGlmICgkZGVwcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJ3Byb3BlcnR5ICcgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJGRlcHNbMF0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG91dCArPSAncHJvcGVydGllcyAnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRkZXBzLmpvaW4oXCIsIFwiKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICcgd2hlbiBwcm9wZXJ0eSAnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eSkpICsgJyBpcyBwcmVzZW50XFwnICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB7fSAnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfX2VyciA9IG91dDtcbiAgICAgICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnICkgeyAnO1xuICAgICAgICB2YXIgYXJyMiA9ICRkZXBzO1xuICAgICAgICBpZiAoYXJyMikge1xuICAgICAgICAgIHZhciAkcHJvcGVydHlLZXksIGkyID0gLTEsXG4gICAgICAgICAgICBsMiA9IGFycjIubGVuZ3RoIC0gMTtcbiAgICAgICAgICB3aGlsZSAoaTIgPCBsMikge1xuICAgICAgICAgICAgJHByb3BlcnR5S2V5ID0gYXJyMltpMiArPSAxXTtcbiAgICAgICAgICAgIHZhciAkcHJvcCA9IGl0LnV0aWwuZ2V0UHJvcGVydHkoJHByb3BlcnR5S2V5KSxcbiAgICAgICAgICAgICAgJG1pc3NpbmdQcm9wZXJ0eSA9IGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eUtleSksXG4gICAgICAgICAgICAgICR1c2VEYXRhID0gJGRhdGEgKyAkcHJvcDtcbiAgICAgICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgaXQuZXJyb3JQYXRoID0gaXQudXRpbC5nZXRQYXRoKCRjdXJyZW50RXJyb3JQYXRoLCAkcHJvcGVydHlLZXksIGl0Lm9wdHMuanNvblBvaW50ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnIGlmICggJyArICgkdXNlRGF0YSkgKyAnID09PSB1bmRlZmluZWQgJztcbiAgICAgICAgICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgICAgICAgICBvdXQgKz0gJyB8fCAhIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgnICsgKCRkYXRhKSArICcsIFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5S2V5KSkgKyAnXFwnKSAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICcpIHsgIHZhciBlcnIgPSAgICc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ2RlcGVuZGVuY2llcycpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgcHJvcGVydHk6IFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5KSkgKyAnXFwnLCBtaXNzaW5nUHJvcGVydHk6IFxcJycgKyAoJG1pc3NpbmdQcm9wZXJ0eSkgKyAnXFwnLCBkZXBzQ291bnQ6ICcgKyAoJGRlcHMubGVuZ3RoKSArICcsIGRlcHM6IFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJGRlcHMubGVuZ3RoID09IDEgPyAkZGVwc1swXSA6ICRkZXBzLmpvaW4oXCIsIFwiKSkpICsgJ1xcJyB9ICc7XG4gICAgICAgICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIGhhdmUgJztcbiAgICAgICAgICAgICAgICBpZiAoJGRlcHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAncHJvcGVydHkgJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkZGVwc1swXSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJ3Byb3BlcnRpZXMgJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkZGVwcy5qb2luKFwiLCBcIikpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgd2hlbiBwcm9wZXJ0eSAnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eSkpICsgJyBpcyBwcmVzZW50XFwnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7IH0gJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gICAnO1xuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaXQuZXJyb3JQYXRoID0gJGN1cnJlbnRFcnJvclBhdGg7XG4gIHZhciAkY3VycmVudEJhc2VJZCA9ICRpdC5iYXNlSWQ7XG4gIGZvciAodmFyICRwcm9wZXJ0eSBpbiAkc2NoZW1hRGVwcykge1xuICAgIHZhciAkc2NoID0gJHNjaGVtYURlcHNbJHByb3BlcnR5XTtcbiAgICBpZiAoaXQudXRpbC5zY2hlbWFIYXNSdWxlcygkc2NoLCBpdC5SVUxFUy5hbGwpKSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCRuZXh0VmFsaWQpICsgJyA9IHRydWU7IGlmICggJyArICgkZGF0YSkgKyAoaXQudXRpbC5nZXRQcm9wZXJ0eSgkcHJvcGVydHkpKSArICcgIT09IHVuZGVmaW5lZCAnO1xuICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIG91dCArPSAnICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgnICsgKCRkYXRhKSArICcsIFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5KSkgKyAnXFwnKSAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcpIHsgJztcbiAgICAgICRpdC5zY2hlbWEgPSAkc2NoO1xuICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJHByb3BlcnR5KTtcbiAgICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGggKyAnLycgKyBpdC51dGlsLmVzY2FwZUZyYWdtZW50KCRwcm9wZXJ0eSk7XG4gICAgICBvdXQgKz0gJyAgJyArIChpdC52YWxpZGF0ZSgkaXQpKSArICcgJztcbiAgICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICAgIG91dCArPSAnIH0gICc7XG4gICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkbmV4dFZhbGlkKSArICcpIHsgJztcbiAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnICAgJyArICgkY2xvc2luZ0JyYWNlcykgKyAnIGlmICgnICsgKCRlcnJzKSArICcgPT0gZXJyb3JzKSB7JztcbiAgfVxuICBvdXQgPSBpdC51dGlsLmNsZWFuVXBDb2RlKG91dCk7XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX2VudW0oaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgdmFyICRpID0gJ2knICsgJGx2bCxcbiAgICAkdlNjaGVtYSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgaWYgKCEkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJHZTY2hlbWEpICsgJyA9IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJzsnO1xuICB9XG4gIG91dCArPSAndmFyICcgKyAoJHZhbGlkKSArICc7JztcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyBpZiAoc2NoZW1hJyArICgkbHZsKSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IHRydWU7IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHNjaGVtYScgKyAoJGx2bCkgKyAnKSkgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyBlbHNlIHsnO1xuICB9XG4gIG91dCArPSAnJyArICgkdmFsaWQpICsgJyA9IGZhbHNlO2ZvciAodmFyICcgKyAoJGkpICsgJz0wOyAnICsgKCRpKSArICc8JyArICgkdlNjaGVtYSkgKyAnLmxlbmd0aDsgJyArICgkaSkgKyAnKyspIGlmIChlcXVhbCgnICsgKCRkYXRhKSArICcsICcgKyAoJHZTY2hlbWEpICsgJ1snICsgKCRpKSArICddKSkgeyAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgYnJlYWs7IH0nO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIG91dCArPSAnICB9ICAnO1xuICB9XG4gIG91dCArPSAnIGlmICghJyArICgkdmFsaWQpICsgJykgeyAgICc7XG4gIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgnZW51bScpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgYWxsb3dlZFZhbHVlczogc2NoZW1hJyArICgkbHZsKSArICcgfSAnO1xuICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgYmUgZXF1YWwgdG8gb25lIG9mIHRoZSBhbGxvd2VkIHZhbHVlc1xcJyAnO1xuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICB9XG4gIG91dCArPSAnIH0nO1xuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnIGVsc2UgeyAnO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX2Zvcm1hdChpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICBpZiAoaXQub3B0cy5mb3JtYXQgPT09IGZhbHNlKSB7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgIG91dCArPSAnIGlmICh0cnVlKSB7ICc7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cbiAgdmFyICRpc0RhdGEgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWEgJiYgJHNjaGVtYS4kZGF0YSxcbiAgICAkc2NoZW1hVmFsdWU7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLmdldERhdGEoJHNjaGVtYS4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgfSBlbHNlIHtcbiAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hO1xuICB9XG4gIHZhciAkdW5rbm93bkZvcm1hdHMgPSBpdC5vcHRzLnVua25vd25Gb3JtYXRzLFxuICAgICRhbGxvd1Vua25vd24gPSBBcnJheS5pc0FycmF5KCR1bmtub3duRm9ybWF0cyk7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgdmFyICRmb3JtYXQgPSAnZm9ybWF0JyArICRsdmwsXG4gICAgICAkaXNPYmplY3QgPSAnaXNPYmplY3QnICsgJGx2bCxcbiAgICAgICRmb3JtYXRUeXBlID0gJ2Zvcm1hdFR5cGUnICsgJGx2bDtcbiAgICBvdXQgKz0gJyB2YXIgJyArICgkZm9ybWF0KSArICcgPSBmb3JtYXRzWycgKyAoJHNjaGVtYVZhbHVlKSArICddOyB2YXIgJyArICgkaXNPYmplY3QpICsgJyA9IHR5cGVvZiAnICsgKCRmb3JtYXQpICsgJyA9PSBcXCdvYmplY3RcXCcgJiYgISgnICsgKCRmb3JtYXQpICsgJyBpbnN0YW5jZW9mIFJlZ0V4cCkgJiYgJyArICgkZm9ybWF0KSArICcudmFsaWRhdGU7IHZhciAnICsgKCRmb3JtYXRUeXBlKSArICcgPSAnICsgKCRpc09iamVjdCkgKyAnICYmICcgKyAoJGZvcm1hdCkgKyAnLnR5cGUgfHwgXFwnc3RyaW5nXFwnOyBpZiAoJyArICgkaXNPYmplY3QpICsgJykgeyAnO1xuICAgIGlmIChpdC5hc3luYykge1xuICAgICAgb3V0ICs9ICcgdmFyIGFzeW5jJyArICgkbHZsKSArICcgPSAnICsgKCRmb3JtYXQpICsgJy5hc3luYzsgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgJyArICgkZm9ybWF0KSArICcgPSAnICsgKCRmb3JtYXQpICsgJy52YWxpZGF0ZTsgfSBpZiAoICAnO1xuICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICBvdXQgKz0gJyAoJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ3N0cmluZ1xcJykgfHwgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgKCc7XG4gICAgaWYgKCR1bmtub3duRm9ybWF0cyAhPSAnaWdub3JlJykge1xuICAgICAgb3V0ICs9ICcgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgJiYgIScgKyAoJGZvcm1hdCkgKyAnICc7XG4gICAgICBpZiAoJGFsbG93VW5rbm93bikge1xuICAgICAgICBvdXQgKz0gJyAmJiBzZWxmLl9vcHRzLnVua25vd25Gb3JtYXRzLmluZGV4T2YoJyArICgkc2NoZW1hVmFsdWUpICsgJykgPT0gLTEgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnKSB8fCAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyAoJyArICgkZm9ybWF0KSArICcgJiYgJyArICgkZm9ybWF0VHlwZSkgKyAnID09IFxcJycgKyAoJHJ1bGVUeXBlKSArICdcXCcgJiYgISh0eXBlb2YgJyArICgkZm9ybWF0KSArICcgPT0gXFwnZnVuY3Rpb25cXCcgPyAnO1xuICAgIGlmIChpdC5hc3luYykge1xuICAgICAgb3V0ICs9ICcgKGFzeW5jJyArICgkbHZsKSArICcgPyBhd2FpdCAnICsgKCRmb3JtYXQpICsgJygnICsgKCRkYXRhKSArICcpIDogJyArICgkZm9ybWF0KSArICcoJyArICgkZGF0YSkgKyAnKSkgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgJyArICgkZm9ybWF0KSArICcoJyArICgkZGF0YSkgKyAnKSAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyA6ICcgKyAoJGZvcm1hdCkgKyAnLnRlc3QoJyArICgkZGF0YSkgKyAnKSkpKSkgeyc7XG4gIH0gZWxzZSB7XG4gICAgdmFyICRmb3JtYXQgPSBpdC5mb3JtYXRzWyRzY2hlbWFdO1xuICAgIGlmICghJGZvcm1hdCkge1xuICAgICAgaWYgKCR1bmtub3duRm9ybWF0cyA9PSAnaWdub3JlJykge1xuICAgICAgICBpdC5sb2dnZXIud2FybigndW5rbm93biBmb3JtYXQgXCInICsgJHNjaGVtYSArICdcIiBpZ25vcmVkIGluIHNjaGVtYSBhdCBwYXRoIFwiJyArIGl0LmVyclNjaGVtYVBhdGggKyAnXCInKTtcbiAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgICB9IGVsc2UgaWYgKCRhbGxvd1Vua25vd24gJiYgJHVua25vd25Gb3JtYXRzLmluZGV4T2YoJHNjaGVtYSkgPj0gMCkge1xuICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgIG91dCArPSAnIGlmICh0cnVlKSB7ICc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBmb3JtYXQgXCInICsgJHNjaGVtYSArICdcIiBpcyB1c2VkIGluIHNjaGVtYSBhdCBwYXRoIFwiJyArIGl0LmVyclNjaGVtYVBhdGggKyAnXCInKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyICRpc09iamVjdCA9IHR5cGVvZiAkZm9ybWF0ID09ICdvYmplY3QnICYmICEoJGZvcm1hdCBpbnN0YW5jZW9mIFJlZ0V4cCkgJiYgJGZvcm1hdC52YWxpZGF0ZTtcbiAgICB2YXIgJGZvcm1hdFR5cGUgPSAkaXNPYmplY3QgJiYgJGZvcm1hdC50eXBlIHx8ICdzdHJpbmcnO1xuICAgIGlmICgkaXNPYmplY3QpIHtcbiAgICAgIHZhciAkYXN5bmMgPSAkZm9ybWF0LmFzeW5jID09PSB0cnVlO1xuICAgICAgJGZvcm1hdCA9ICRmb3JtYXQudmFsaWRhdGU7XG4gICAgfVxuICAgIGlmICgkZm9ybWF0VHlwZSAhPSAkcnVsZVR5cGUpIHtcbiAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgIG91dCArPSAnIGlmICh0cnVlKSB7ICc7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBpZiAoJGFzeW5jKSB7XG4gICAgICBpZiAoIWl0LmFzeW5jKSB0aHJvdyBuZXcgRXJyb3IoJ2FzeW5jIGZvcm1hdCBpbiBzeW5jIHNjaGVtYScpO1xuICAgICAgdmFyICRmb3JtYXRSZWYgPSAnZm9ybWF0cycgKyBpdC51dGlsLmdldFByb3BlcnR5KCRzY2hlbWEpICsgJy52YWxpZGF0ZSc7XG4gICAgICBvdXQgKz0gJyBpZiAoIShhd2FpdCAnICsgKCRmb3JtYXRSZWYpICsgJygnICsgKCRkYXRhKSArICcpKSkgeyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyBpZiAoISAnO1xuICAgICAgdmFyICRmb3JtYXRSZWYgPSAnZm9ybWF0cycgKyBpdC51dGlsLmdldFByb3BlcnR5KCRzY2hlbWEpO1xuICAgICAgaWYgKCRpc09iamVjdCkgJGZvcm1hdFJlZiArPSAnLnZhbGlkYXRlJztcbiAgICAgIGlmICh0eXBlb2YgJGZvcm1hdCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG91dCArPSAnICcgKyAoJGZvcm1hdFJlZikgKyAnKCcgKyAoJGRhdGEpICsgJykgJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnICcgKyAoJGZvcm1hdFJlZikgKyAnLnRlc3QoJyArICgkZGF0YSkgKyAnKSAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcpIHsgJztcbiAgICB9XG4gIH1cbiAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdmb3JtYXQnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGZvcm1hdDogICc7XG4gICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgIG91dCArPSAnJyArICgkc2NoZW1hVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJycgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkc2NoZW1hKSk7XG4gICAgfVxuICAgIG91dCArPSAnICB9ICc7XG4gICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBtYXRjaCBmb3JtYXQgXCInO1xuICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgb3V0ICs9ICdcXCcgKyAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICsgXFwnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnJyArIChpdC51dGlsLmVzY2FwZVF1b3Rlcygkc2NoZW1hKSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJ1wiXFwnICc7XG4gICAgfVxuICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgIG91dCArPSAnICwgc2NoZW1hOiAgJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAndmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkc2NoZW1hKSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyAgICAgICAgICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICB9XG4gIG91dCArPSAnIH0gJztcbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9pZihpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJHZhbGlkID0gJ3ZhbGlkJyArICRsdmw7XG4gIHZhciAkZXJycyA9ICdlcnJzX18nICsgJGx2bDtcbiAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gICRpdC5sZXZlbCsrO1xuICB2YXIgJG5leHRWYWxpZCA9ICd2YWxpZCcgKyAkaXQubGV2ZWw7XG4gIHZhciAkdGhlblNjaCA9IGl0LnNjaGVtYVsndGhlbiddLFxuICAgICRlbHNlU2NoID0gaXQuc2NoZW1hWydlbHNlJ10sXG4gICAgJHRoZW5QcmVzZW50ID0gJHRoZW5TY2ggIT09IHVuZGVmaW5lZCAmJiBpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCR0aGVuU2NoLCBpdC5SVUxFUy5hbGwpLFxuICAgICRlbHNlUHJlc2VudCA9ICRlbHNlU2NoICE9PSB1bmRlZmluZWQgJiYgaXQudXRpbC5zY2hlbWFIYXNSdWxlcygkZWxzZVNjaCwgaXQuUlVMRVMuYWxsKSxcbiAgICAkY3VycmVudEJhc2VJZCA9ICRpdC5iYXNlSWQ7XG4gIGlmICgkdGhlblByZXNlbnQgfHwgJGVsc2VQcmVzZW50KSB7XG4gICAgdmFyICRpZkNsYXVzZTtcbiAgICAkaXQuY3JlYXRlRXJyb3JzID0gZmFsc2U7XG4gICAgJGl0LnNjaGVtYSA9ICRzY2hlbWE7XG4gICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aDtcbiAgICAkaXQuZXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoO1xuICAgIG91dCArPSAnIHZhciAnICsgKCRlcnJzKSArICcgPSBlcnJvcnM7IHZhciAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgICc7XG4gICAgdmFyICR3YXNDb21wb3NpdGUgPSBpdC5jb21wb3NpdGVSdWxlO1xuICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9IHRydWU7XG4gICAgb3V0ICs9ICcgICcgKyAoaXQudmFsaWRhdGUoJGl0KSkgKyAnICc7XG4gICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICRpdC5jcmVhdGVFcnJvcnMgPSB0cnVlO1xuICAgIG91dCArPSAnICBlcnJvcnMgPSAnICsgKCRlcnJzKSArICc7IGlmICh2RXJyb3JzICE9PSBudWxsKSB7IGlmICgnICsgKCRlcnJzKSArICcpIHZFcnJvcnMubGVuZ3RoID0gJyArICgkZXJycykgKyAnOyBlbHNlIHZFcnJvcnMgPSBudWxsOyB9ICAnO1xuICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9ICR3YXNDb21wb3NpdGU7XG4gICAgaWYgKCR0aGVuUHJlc2VudCkge1xuICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJG5leHRWYWxpZCkgKyAnKSB7ICAnO1xuICAgICAgJGl0LnNjaGVtYSA9IGl0LnNjaGVtYVsndGhlbiddO1xuICAgICAgJGl0LnNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgJy50aGVuJztcbiAgICAgICRpdC5lcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvdGhlbic7XG4gICAgICBvdXQgKz0gJyAgJyArIChpdC52YWxpZGF0ZSgkaXQpKSArICcgJztcbiAgICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICAgIG91dCArPSAnICcgKyAoJHZhbGlkKSArICcgPSAnICsgKCRuZXh0VmFsaWQpICsgJzsgJztcbiAgICAgIGlmICgkdGhlblByZXNlbnQgJiYgJGVsc2VQcmVzZW50KSB7XG4gICAgICAgICRpZkNsYXVzZSA9ICdpZkNsYXVzZScgKyAkbHZsO1xuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkaWZDbGF1c2UpICsgJyA9IFxcJ3RoZW5cXCc7ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkaWZDbGF1c2UgPSAnXFwndGhlblxcJyc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICBpZiAoJGVsc2VQcmVzZW50KSB7XG4gICAgICAgIG91dCArPSAnIGVsc2UgeyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyBpZiAoIScgKyAoJG5leHRWYWxpZCkgKyAnKSB7ICc7XG4gICAgfVxuICAgIGlmICgkZWxzZVByZXNlbnQpIHtcbiAgICAgICRpdC5zY2hlbWEgPSBpdC5zY2hlbWFbJ2Vsc2UnXTtcbiAgICAgICRpdC5zY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArICcuZWxzZSc7XG4gICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnL2Vsc2UnO1xuICAgICAgb3V0ICs9ICcgICcgKyAoaXQudmFsaWRhdGUoJGl0KSkgKyAnICc7XG4gICAgICAkaXQuYmFzZUlkID0gJGN1cnJlbnRCYXNlSWQ7XG4gICAgICBvdXQgKz0gJyAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkbmV4dFZhbGlkKSArICc7ICc7XG4gICAgICBpZiAoJHRoZW5QcmVzZW50ICYmICRlbHNlUHJlc2VudCkge1xuICAgICAgICAkaWZDbGF1c2UgPSAnaWZDbGF1c2UnICsgJGx2bDtcbiAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJGlmQ2xhdXNlKSArICcgPSBcXCdlbHNlXFwnOyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGlmQ2xhdXNlID0gJ1xcJ2Vsc2VcXCcnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyBpZiAoIScgKyAoJHZhbGlkKSArICcpIHsgICB2YXIgZXJyID0gICAnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ2lmJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBmYWlsaW5nS2V5d29yZDogJyArICgkaWZDbGF1c2UpICsgJyB9ICc7XG4gICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgbWF0Y2ggXCJcXCcgKyAnICsgKCRpZkNsYXVzZSkgKyAnICsgXFwnXCIgc2NoZW1hXFwnICc7XG4gICAgICB9XG4gICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgfVxuICAgIG91dCArPSAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IodkVycm9ycyk7ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSB2RXJyb3JzOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICB9XG4gICAgfVxuICAgIG91dCArPSAnIH0gICAnO1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgICB9XG4gICAgb3V0ID0gaXQudXRpbC5jbGVhblVwQ29kZShvdXQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9pdGVtcyhpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJHZhbGlkID0gJ3ZhbGlkJyArICRsdmw7XG4gIHZhciAkZXJycyA9ICdlcnJzX18nICsgJGx2bDtcbiAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gIHZhciAkY2xvc2luZ0JyYWNlcyA9ICcnO1xuICAkaXQubGV2ZWwrKztcbiAgdmFyICRuZXh0VmFsaWQgPSAndmFsaWQnICsgJGl0LmxldmVsO1xuICB2YXIgJGlkeCA9ICdpJyArICRsdmwsXG4gICAgJGRhdGFOeHQgPSAkaXQuZGF0YUxldmVsID0gaXQuZGF0YUxldmVsICsgMSxcbiAgICAkbmV4dERhdGEgPSAnZGF0YScgKyAkZGF0YU54dCxcbiAgICAkY3VycmVudEJhc2VJZCA9IGl0LmJhc2VJZDtcbiAgb3V0ICs9ICd2YXIgJyArICgkZXJycykgKyAnID0gZXJyb3JzO3ZhciAnICsgKCR2YWxpZCkgKyAnOyc7XG4gIGlmIChBcnJheS5pc0FycmF5KCRzY2hlbWEpKSB7XG4gICAgdmFyICRhZGRpdGlvbmFsSXRlbXMgPSBpdC5zY2hlbWEuYWRkaXRpb25hbEl0ZW1zO1xuICAgIGlmICgkYWRkaXRpb25hbEl0ZW1zID09PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgJyArICgkdmFsaWQpICsgJyA9ICcgKyAoJGRhdGEpICsgJy5sZW5ndGggPD0gJyArICgkc2NoZW1hLmxlbmd0aCkgKyAnOyAnO1xuICAgICAgdmFyICRjdXJyRXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoO1xuICAgICAgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy9hZGRpdGlvbmFsSXRlbXMnO1xuICAgICAgb3V0ICs9ICcgIGlmICghJyArICgkdmFsaWQpICsgJykgeyAgICc7XG4gICAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdhZGRpdGlvbmFsSXRlbXMnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGxpbWl0OiAnICsgKCRzY2hlbWEubGVuZ3RoKSArICcgfSAnO1xuICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBOT1QgaGF2ZSBtb3JlIHRoYW4gJyArICgkc2NoZW1hLmxlbmd0aCkgKyAnIGl0ZW1zXFwnICc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiBmYWxzZSAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB7fSAnO1xuICAgICAgfVxuICAgICAgdmFyIF9fZXJyID0gb3V0O1xuICAgICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICAgIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAkZXJyU2NoZW1hUGF0aCA9ICRjdXJyRXJyU2NoZW1hUGF0aDtcbiAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhcnIxID0gJHNjaGVtYTtcbiAgICBpZiAoYXJyMSkge1xuICAgICAgdmFyICRzY2gsICRpID0gLTEsXG4gICAgICAgIGwxID0gYXJyMS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKCRpIDwgbDEpIHtcbiAgICAgICAgJHNjaCA9IGFycjFbJGkgKz0gMV07XG4gICAgICAgIGlmIChpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRzY2gsIGl0LlJVTEVTLmFsbCkpIHtcbiAgICAgICAgICBvdXQgKz0gJyAnICsgKCRuZXh0VmFsaWQpICsgJyA9IHRydWU7IGlmICgnICsgKCRkYXRhKSArICcubGVuZ3RoID4gJyArICgkaSkgKyAnKSB7ICc7XG4gICAgICAgICAgdmFyICRwYXNzRGF0YSA9ICRkYXRhICsgJ1snICsgJGkgKyAnXSc7XG4gICAgICAgICAgJGl0LnNjaGVtYSA9ICRzY2g7XG4gICAgICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArICdbJyArICRpICsgJ10nO1xuICAgICAgICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGggKyAnLycgKyAkaTtcbiAgICAgICAgICAkaXQuZXJyb3JQYXRoID0gaXQudXRpbC5nZXRQYXRoRXhwcihpdC5lcnJvclBhdGgsICRpLCBpdC5vcHRzLmpzb25Qb2ludGVycywgdHJ1ZSk7XG4gICAgICAgICAgJGl0LmRhdGFQYXRoQXJyWyRkYXRhTnh0XSA9ICRpO1xuICAgICAgICAgIHZhciAkY29kZSA9IGl0LnZhbGlkYXRlKCRpdCk7XG4gICAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICAgIGlmIChpdC51dGlsLnZhck9jY3VyZW5jZXMoJGNvZGUsICRuZXh0RGF0YSkgPCAyKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKGl0LnV0aWwudmFyUmVwbGFjZSgkY29kZSwgJG5leHREYXRhLCAkcGFzc0RhdGEpKSArICcgJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJG5leHREYXRhKSArICcgPSAnICsgKCRwYXNzRGF0YSkgKyAnOyAnICsgKCRjb2RlKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICcgfSAgJztcbiAgICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJG5leHRWYWxpZCkgKyAnKSB7ICc7XG4gICAgICAgICAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgJGFkZGl0aW9uYWxJdGVtcyA9PSAnb2JqZWN0JyAmJiBpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRhZGRpdGlvbmFsSXRlbXMsIGl0LlJVTEVTLmFsbCkpIHtcbiAgICAgICRpdC5zY2hlbWEgPSAkYWRkaXRpb25hbEl0ZW1zO1xuICAgICAgJGl0LnNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgJy5hZGRpdGlvbmFsSXRlbXMnO1xuICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy9hZGRpdGlvbmFsSXRlbXMnO1xuICAgICAgb3V0ICs9ICcgJyArICgkbmV4dFZhbGlkKSArICcgPSB0cnVlOyBpZiAoJyArICgkZGF0YSkgKyAnLmxlbmd0aCA+ICcgKyAoJHNjaGVtYS5sZW5ndGgpICsgJykgeyAgZm9yICh2YXIgJyArICgkaWR4KSArICcgPSAnICsgKCRzY2hlbWEubGVuZ3RoKSArICc7ICcgKyAoJGlkeCkgKyAnIDwgJyArICgkZGF0YSkgKyAnLmxlbmd0aDsgJyArICgkaWR4KSArICcrKykgeyAnO1xuICAgICAgJGl0LmVycm9yUGF0aCA9IGl0LnV0aWwuZ2V0UGF0aEV4cHIoaXQuZXJyb3JQYXRoLCAkaWR4LCBpdC5vcHRzLmpzb25Qb2ludGVycywgdHJ1ZSk7XG4gICAgICB2YXIgJHBhc3NEYXRhID0gJGRhdGEgKyAnWycgKyAkaWR4ICsgJ10nO1xuICAgICAgJGl0LmRhdGFQYXRoQXJyWyRkYXRhTnh0XSA9ICRpZHg7XG4gICAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpO1xuICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgaWYgKGl0LnV0aWwudmFyT2NjdXJlbmNlcygkY29kZSwgJG5leHREYXRhKSA8IDIpIHtcbiAgICAgICAgb3V0ICs9ICcgJyArIChpdC51dGlsLnZhclJlcGxhY2UoJGNvZGUsICRuZXh0RGF0YSwgJHBhc3NEYXRhKSkgKyAnICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dERhdGEpICsgJyA9ICcgKyAoJHBhc3NEYXRhKSArICc7ICcgKyAoJGNvZGUpICsgJyAnO1xuICAgICAgfVxuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgb3V0ICs9ICcgaWYgKCEnICsgKCRuZXh0VmFsaWQpICsgJykgYnJlYWs7ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9IH0gICc7XG4gICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkbmV4dFZhbGlkKSArICcpIHsgJztcbiAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRzY2hlbWEsIGl0LlJVTEVTLmFsbCkpIHtcbiAgICAkaXQuc2NoZW1hID0gJHNjaGVtYTtcbiAgICAkaXQuc2NoZW1hUGF0aCA9ICRzY2hlbWFQYXRoO1xuICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGg7XG4gICAgb3V0ICs9ICcgIGZvciAodmFyICcgKyAoJGlkeCkgKyAnID0gJyArICgwKSArICc7ICcgKyAoJGlkeCkgKyAnIDwgJyArICgkZGF0YSkgKyAnLmxlbmd0aDsgJyArICgkaWR4KSArICcrKykgeyAnO1xuICAgICRpdC5lcnJvclBhdGggPSBpdC51dGlsLmdldFBhdGhFeHByKGl0LmVycm9yUGF0aCwgJGlkeCwgaXQub3B0cy5qc29uUG9pbnRlcnMsIHRydWUpO1xuICAgIHZhciAkcGFzc0RhdGEgPSAkZGF0YSArICdbJyArICRpZHggKyAnXSc7XG4gICAgJGl0LmRhdGFQYXRoQXJyWyRkYXRhTnh0XSA9ICRpZHg7XG4gICAgdmFyICRjb2RlID0gaXQudmFsaWRhdGUoJGl0KTtcbiAgICAkaXQuYmFzZUlkID0gJGN1cnJlbnRCYXNlSWQ7XG4gICAgaWYgKGl0LnV0aWwudmFyT2NjdXJlbmNlcygkY29kZSwgJG5leHREYXRhKSA8IDIpIHtcbiAgICAgIG91dCArPSAnICcgKyAoaXQudXRpbC52YXJSZXBsYWNlKCRjb2RlLCAkbmV4dERhdGEsICRwYXNzRGF0YSkpICsgJyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dERhdGEpICsgJyA9ICcgKyAoJHBhc3NEYXRhKSArICc7ICcgKyAoJGNvZGUpICsgJyAnO1xuICAgIH1cbiAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgb3V0ICs9ICcgaWYgKCEnICsgKCRuZXh0VmFsaWQpICsgJykgYnJlYWs7ICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0nO1xuICB9XG4gIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgb3V0ICs9ICcgJyArICgkY2xvc2luZ0JyYWNlcykgKyAnIGlmICgnICsgKCRlcnJzKSArICcgPT0gZXJyb3JzKSB7JztcbiAgfVxuICBvdXQgPSBpdC51dGlsLmNsZWFuVXBDb2RlKG91dCk7XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX211bHRpcGxlT2YoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICRpc0RhdGEgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWEgJiYgJHNjaGVtYS4kZGF0YSxcbiAgICAkc2NoZW1hVmFsdWU7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLmdldERhdGEoJHNjaGVtYS4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgfSBlbHNlIHtcbiAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hO1xuICB9XG4gIG91dCArPSAndmFyIGRpdmlzaW9uJyArICgkbHZsKSArICc7aWYgKCc7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPT0gdW5kZWZpbmVkICYmICggdHlwZW9mICcgKyAoJHNjaGVtYVZhbHVlKSArICcgIT0gXFwnbnVtYmVyXFwnIHx8ICc7XG4gIH1cbiAgb3V0ICs9ICcgKGRpdmlzaW9uJyArICgkbHZsKSArICcgPSAnICsgKCRkYXRhKSArICcgLyAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnLCAnO1xuICBpZiAoaXQub3B0cy5tdWx0aXBsZU9mUHJlY2lzaW9uKSB7XG4gICAgb3V0ICs9ICcgTWF0aC5hYnMoTWF0aC5yb3VuZChkaXZpc2lvbicgKyAoJGx2bCkgKyAnKSAtIGRpdmlzaW9uJyArICgkbHZsKSArICcpID4gMWUtJyArIChpdC5vcHRzLm11bHRpcGxlT2ZQcmVjaXNpb24pICsgJyAnO1xuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIGRpdmlzaW9uJyArICgkbHZsKSArICcgIT09IHBhcnNlSW50KGRpdmlzaW9uJyArICgkbHZsKSArICcpICc7XG4gIH1cbiAgb3V0ICs9ICcgKSAnO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIG91dCArPSAnICApICAnO1xuICB9XG4gIG91dCArPSAnICkgeyAgICc7XG4gIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgnbXVsdGlwbGVPZicpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgbXVsdGlwbGVPZjogJyArICgkc2NoZW1hVmFsdWUpICsgJyB9ICc7XG4gICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBiZSBtdWx0aXBsZSBvZiAnO1xuICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgb3V0ICs9ICdcXCcgKyAnICsgKCRzY2hlbWFWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYVZhbHVlKSArICdcXCcnO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogICc7XG4gICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICBvdXQgKz0gJ3ZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcnICsgKCRzY2hlbWEpO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgICAgICAgICAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgfSAnO1xuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHt9ICc7XG4gIH1cbiAgdmFyIF9fZXJyID0gb3V0O1xuICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdC5hc3luYykge1xuICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgfVxuICBvdXQgKz0gJ30gJztcbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9ub3QoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICRlcnJzID0gJ2VycnNfXycgKyAkbHZsO1xuICB2YXIgJGl0ID0gaXQudXRpbC5jb3B5KGl0KTtcbiAgJGl0LmxldmVsKys7XG4gIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgaWYgKGl0LnV0aWwuc2NoZW1hSGFzUnVsZXMoJHNjaGVtYSwgaXQuUlVMRVMuYWxsKSkge1xuICAgICRpdC5zY2hlbWEgPSAkc2NoZW1hO1xuICAgICRpdC5zY2hlbWFQYXRoID0gJHNjaGVtYVBhdGg7XG4gICAgJGl0LmVyclNjaGVtYVBhdGggPSAkZXJyU2NoZW1hUGF0aDtcbiAgICBvdXQgKz0gJyB2YXIgJyArICgkZXJycykgKyAnID0gZXJyb3JzOyAgJztcbiAgICB2YXIgJHdhc0NvbXBvc2l0ZSA9IGl0LmNvbXBvc2l0ZVJ1bGU7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gdHJ1ZTtcbiAgICAkaXQuY3JlYXRlRXJyb3JzID0gZmFsc2U7XG4gICAgdmFyICRhbGxFcnJvcnNPcHRpb247XG4gICAgaWYgKCRpdC5vcHRzLmFsbEVycm9ycykge1xuICAgICAgJGFsbEVycm9yc09wdGlvbiA9ICRpdC5vcHRzLmFsbEVycm9ycztcbiAgICAgICRpdC5vcHRzLmFsbEVycm9ycyA9IGZhbHNlO1xuICAgIH1cbiAgICBvdXQgKz0gJyAnICsgKGl0LnZhbGlkYXRlKCRpdCkpICsgJyAnO1xuICAgICRpdC5jcmVhdGVFcnJvcnMgPSB0cnVlO1xuICAgIGlmICgkYWxsRXJyb3JzT3B0aW9uKSAkaXQub3B0cy5hbGxFcnJvcnMgPSAkYWxsRXJyb3JzT3B0aW9uO1xuICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9ICR3YXNDb21wb3NpdGU7XG4gICAgb3V0ICs9ICcgaWYgKCcgKyAoJG5leHRWYWxpZCkgKyAnKSB7ICAgJztcbiAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgnbm90JykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczoge30gJztcbiAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBOT1QgYmUgdmFsaWRcXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgdmFyIF9fZXJyID0gb3V0O1xuICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9IGVsc2UgeyAgZXJyb3JzID0gJyArICgkZXJycykgKyAnOyBpZiAodkVycm9ycyAhPT0gbnVsbCkgeyBpZiAoJyArICgkZXJycykgKyAnKSB2RXJyb3JzLmxlbmd0aCA9ICcgKyAoJGVycnMpICsgJzsgZWxzZSB2RXJyb3JzID0gbnVsbDsgfSAnO1xuICAgIGlmIChpdC5vcHRzLmFsbEVycm9ycykge1xuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyAgdmFyIGVyciA9ICAgJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdub3QnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7fSAnO1xuICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIE5PVCBiZSB2YWxpZFxcJyAnO1xuICAgICAgfVxuICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB7fSAnO1xuICAgIH1cbiAgICBvdXQgKz0gJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBpZiAoZmFsc2UpIHsgJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfb25lT2YoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsO1xuICB2YXIgJGVycnMgPSAnZXJyc19fJyArICRsdmw7XG4gIHZhciAkaXQgPSBpdC51dGlsLmNvcHkoaXQpO1xuICB2YXIgJGNsb3NpbmdCcmFjZXMgPSAnJztcbiAgJGl0LmxldmVsKys7XG4gIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgdmFyICRjdXJyZW50QmFzZUlkID0gJGl0LmJhc2VJZCxcbiAgICAkcHJldlZhbGlkID0gJ3ByZXZWYWxpZCcgKyAkbHZsLFxuICAgICRwYXNzaW5nU2NoZW1hcyA9ICdwYXNzaW5nU2NoZW1hcycgKyAkbHZsO1xuICBvdXQgKz0gJ3ZhciAnICsgKCRlcnJzKSArICcgPSBlcnJvcnMgLCAnICsgKCRwcmV2VmFsaWQpICsgJyA9IGZhbHNlICwgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlICwgJyArICgkcGFzc2luZ1NjaGVtYXMpICsgJyA9IG51bGw7ICc7XG4gIHZhciAkd2FzQ29tcG9zaXRlID0gaXQuY29tcG9zaXRlUnVsZTtcbiAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gdHJ1ZTtcbiAgdmFyIGFycjEgPSAkc2NoZW1hO1xuICBpZiAoYXJyMSkge1xuICAgIHZhciAkc2NoLCAkaSA9IC0xLFxuICAgICAgbDEgPSBhcnIxLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKCRpIDwgbDEpIHtcbiAgICAgICRzY2ggPSBhcnIxWyRpICs9IDFdO1xuICAgICAgaWYgKGl0LnV0aWwuc2NoZW1hSGFzUnVsZXMoJHNjaCwgaXQuUlVMRVMuYWxsKSkge1xuICAgICAgICAkaXQuc2NoZW1hID0gJHNjaDtcbiAgICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArICdbJyArICRpICsgJ10nO1xuICAgICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoICsgJy8nICsgJGk7XG4gICAgICAgIG91dCArPSAnICAnICsgKGl0LnZhbGlkYXRlKCRpdCkpICsgJyAnO1xuICAgICAgICAkaXQuYmFzZUlkID0gJGN1cnJlbnRCYXNlSWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dFZhbGlkKSArICcgPSB0cnVlOyAnO1xuICAgICAgfVxuICAgICAgaWYgKCRpKSB7XG4gICAgICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJyAmJiAnICsgKCRwcmV2VmFsaWQpICsgJykgeyAnICsgKCR2YWxpZCkgKyAnID0gZmFsc2U7ICcgKyAoJHBhc3NpbmdTY2hlbWFzKSArICcgPSBbJyArICgkcGFzc2luZ1NjaGVtYXMpICsgJywgJyArICgkaSkgKyAnXTsgfSBlbHNlIHsgJztcbiAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJG5leHRWYWxpZCkgKyAnKSB7ICcgKyAoJHZhbGlkKSArICcgPSAnICsgKCRwcmV2VmFsaWQpICsgJyA9IHRydWU7ICcgKyAoJHBhc3NpbmdTY2hlbWFzKSArICcgPSAnICsgKCRpKSArICc7IH0nO1xuICAgIH1cbiAgfVxuICBpdC5jb21wb3NpdGVSdWxlID0gJGl0LmNvbXBvc2l0ZVJ1bGUgPSAkd2FzQ29tcG9zaXRlO1xuICBvdXQgKz0gJycgKyAoJGNsb3NpbmdCcmFjZXMpICsgJ2lmICghJyArICgkdmFsaWQpICsgJykgeyAgIHZhciBlcnIgPSAgICc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdvbmVPZicpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgcGFzc2luZ1NjaGVtYXM6ICcgKyAoJHBhc3NpbmdTY2hlbWFzKSArICcgfSAnO1xuICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgbWF0Y2ggZXhhY3RseSBvbmUgc2NoZW1hIGluIG9uZU9mXFwnICc7XG4gICAgfVxuICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gJztcbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB7fSAnO1xuICB9XG4gIG91dCArPSAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKHZFcnJvcnMpOyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSB2RXJyb3JzOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgfVxuICB9XG4gIG91dCArPSAnfSBlbHNlIHsgIGVycm9ycyA9ICcgKyAoJGVycnMpICsgJzsgaWYgKHZFcnJvcnMgIT09IG51bGwpIHsgaWYgKCcgKyAoJGVycnMpICsgJykgdkVycm9ycy5sZW5ndGggPSAnICsgKCRlcnJzKSArICc7IGVsc2UgdkVycm9ycyA9IG51bGw7IH0nO1xuICBpZiAoaXQub3B0cy5hbGxFcnJvcnMpIHtcbiAgICBvdXQgKz0gJyB9ICc7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfcGF0dGVybihpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgdmFyICRyZWdleHAgPSAkaXNEYXRhID8gJyhuZXcgUmVnRXhwKCcgKyAkc2NoZW1hVmFsdWUgKyAnKSknIDogaXQudXNlUGF0dGVybigkc2NoZW1hKTtcbiAgb3V0ICs9ICdpZiAoICc7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPSBcXCdzdHJpbmdcXCcpIHx8ICc7XG4gIH1cbiAgb3V0ICs9ICcgIScgKyAoJHJlZ2V4cCkgKyAnLnRlc3QoJyArICgkZGF0YSkgKyAnKSApIHsgICAnO1xuICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ3BhdHRlcm4nKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IHBhdHRlcm46ICAnO1xuICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJHNjaGVtYSkpO1xuICAgIH1cbiAgICBvdXQgKz0gJyAgfSAnO1xuICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgbWF0Y2ggcGF0dGVybiBcIic7XG4gICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICBvdXQgKz0gJ1xcJyArICcgKyAoJHNjaGVtYVZhbHVlKSArICcgKyBcXCcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRzY2hlbWEpKTtcbiAgICAgIH1cbiAgICAgIG91dCArPSAnXCJcXCcgJztcbiAgICB9XG4gICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6ICAnO1xuICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgb3V0ICs9ICd2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRzY2hlbWEpKTtcbiAgICAgIH1cbiAgICAgIG91dCArPSAnICAgICAgICAgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gJztcbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB7fSAnO1xuICB9XG4gIHZhciBfX2VyciA9IG91dDtcbiAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gIH1cbiAgb3V0ICs9ICd9ICc7XG4gIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfcHJvcGVydGllcyhpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJGVycnMgPSAnZXJyc19fJyArICRsdmw7XG4gIHZhciAkaXQgPSBpdC51dGlsLmNvcHkoaXQpO1xuICB2YXIgJGNsb3NpbmdCcmFjZXMgPSAnJztcbiAgJGl0LmxldmVsKys7XG4gIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgdmFyICRrZXkgPSAna2V5JyArICRsdmwsXG4gICAgJGlkeCA9ICdpZHgnICsgJGx2bCxcbiAgICAkZGF0YU54dCA9ICRpdC5kYXRhTGV2ZWwgPSBpdC5kYXRhTGV2ZWwgKyAxLFxuICAgICRuZXh0RGF0YSA9ICdkYXRhJyArICRkYXRhTnh0LFxuICAgICRkYXRhUHJvcGVydGllcyA9ICdkYXRhUHJvcGVydGllcycgKyAkbHZsO1xuICB2YXIgJHNjaGVtYUtleXMgPSBPYmplY3Qua2V5cygkc2NoZW1hIHx8IHt9KSxcbiAgICAkcFByb3BlcnRpZXMgPSBpdC5zY2hlbWEucGF0dGVyblByb3BlcnRpZXMgfHwge30sXG4gICAgJHBQcm9wZXJ0eUtleXMgPSBPYmplY3Qua2V5cygkcFByb3BlcnRpZXMpLFxuICAgICRhUHJvcGVydGllcyA9IGl0LnNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyxcbiAgICAkc29tZVByb3BlcnRpZXMgPSAkc2NoZW1hS2V5cy5sZW5ndGggfHwgJHBQcm9wZXJ0eUtleXMubGVuZ3RoLFxuICAgICRub0FkZGl0aW9uYWwgPSAkYVByb3BlcnRpZXMgPT09IGZhbHNlLFxuICAgICRhZGRpdGlvbmFsSXNTY2hlbWEgPSB0eXBlb2YgJGFQcm9wZXJ0aWVzID09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKCRhUHJvcGVydGllcykubGVuZ3RoLFxuICAgICRyZW1vdmVBZGRpdGlvbmFsID0gaXQub3B0cy5yZW1vdmVBZGRpdGlvbmFsLFxuICAgICRjaGVja0FkZGl0aW9uYWwgPSAkbm9BZGRpdGlvbmFsIHx8ICRhZGRpdGlvbmFsSXNTY2hlbWEgfHwgJHJlbW92ZUFkZGl0aW9uYWwsXG4gICAgJG93blByb3BlcnRpZXMgPSBpdC5vcHRzLm93blByb3BlcnRpZXMsXG4gICAgJGN1cnJlbnRCYXNlSWQgPSBpdC5iYXNlSWQ7XG4gIHZhciAkcmVxdWlyZWQgPSBpdC5zY2hlbWEucmVxdWlyZWQ7XG4gIGlmICgkcmVxdWlyZWQgJiYgIShpdC5vcHRzLiRkYXRhICYmICRyZXF1aXJlZC4kZGF0YSkgJiYgJHJlcXVpcmVkLmxlbmd0aCA8IGl0Lm9wdHMubG9vcFJlcXVpcmVkKSB2YXIgJHJlcXVpcmVkSGFzaCA9IGl0LnV0aWwudG9IYXNoKCRyZXF1aXJlZCk7XG4gIG91dCArPSAndmFyICcgKyAoJGVycnMpICsgJyA9IGVycm9yczt2YXIgJyArICgkbmV4dFZhbGlkKSArICcgPSB0cnVlOyc7XG4gIGlmICgkb3duUHJvcGVydGllcykge1xuICAgIG91dCArPSAnIHZhciAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnID0gdW5kZWZpbmVkOyc7XG4gIH1cbiAgaWYgKCRjaGVja0FkZGl0aW9uYWwpIHtcbiAgICBpZiAoJG93blByb3BlcnRpZXMpIHtcbiAgICAgIG91dCArPSAnICcgKyAoJGRhdGFQcm9wZXJ0aWVzKSArICcgPSAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnIHx8IE9iamVjdC5rZXlzKCcgKyAoJGRhdGEpICsgJyk7IGZvciAodmFyICcgKyAoJGlkeCkgKyAnPTA7ICcgKyAoJGlkeCkgKyAnPCcgKyAoJGRhdGFQcm9wZXJ0aWVzKSArICcubGVuZ3RoOyAnICsgKCRpZHgpICsgJysrKSB7IHZhciAnICsgKCRrZXkpICsgJyA9ICcgKyAoJGRhdGFQcm9wZXJ0aWVzKSArICdbJyArICgkaWR4KSArICddOyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyBmb3IgKHZhciAnICsgKCRrZXkpICsgJyBpbiAnICsgKCRkYXRhKSArICcpIHsgJztcbiAgICB9XG4gICAgaWYgKCRzb21lUHJvcGVydGllcykge1xuICAgICAgb3V0ICs9ICcgdmFyIGlzQWRkaXRpb25hbCcgKyAoJGx2bCkgKyAnID0gIShmYWxzZSAnO1xuICAgICAgaWYgKCRzY2hlbWFLZXlzLmxlbmd0aCkge1xuICAgICAgICBpZiAoJHNjaGVtYUtleXMubGVuZ3RoID4gOCkge1xuICAgICAgICAgIG91dCArPSAnIHx8IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJy5oYXNPd25Qcm9wZXJ0eSgnICsgKCRrZXkpICsgJykgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgYXJyMSA9ICRzY2hlbWFLZXlzO1xuICAgICAgICAgIGlmIChhcnIxKSB7XG4gICAgICAgICAgICB2YXIgJHByb3BlcnR5S2V5LCBpMSA9IC0xLFxuICAgICAgICAgICAgICBsMSA9IGFycjEubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHdoaWxlIChpMSA8IGwxKSB7XG4gICAgICAgICAgICAgICRwcm9wZXJ0eUtleSA9IGFycjFbaTEgKz0gMV07XG4gICAgICAgICAgICAgIG91dCArPSAnIHx8ICcgKyAoJGtleSkgKyAnID09ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkcHJvcGVydHlLZXkpKSArICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgkcFByb3BlcnR5S2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycjIgPSAkcFByb3BlcnR5S2V5cztcbiAgICAgICAgaWYgKGFycjIpIHtcbiAgICAgICAgICB2YXIgJHBQcm9wZXJ0eSwgJGkgPSAtMSxcbiAgICAgICAgICAgIGwyID0gYXJyMi5sZW5ndGggLSAxO1xuICAgICAgICAgIHdoaWxlICgkaSA8IGwyKSB7XG4gICAgICAgICAgICAkcFByb3BlcnR5ID0gYXJyMlskaSArPSAxXTtcbiAgICAgICAgICAgIG91dCArPSAnIHx8ICcgKyAoaXQudXNlUGF0dGVybigkcFByb3BlcnR5KSkgKyAnLnRlc3QoJyArICgka2V5KSArICcpICc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyApOyBpZiAoaXNBZGRpdGlvbmFsJyArICgkbHZsKSArICcpIHsgJztcbiAgICB9XG4gICAgaWYgKCRyZW1vdmVBZGRpdGlvbmFsID09ICdhbGwnKSB7XG4gICAgICBvdXQgKz0gJyBkZWxldGUgJyArICgkZGF0YSkgKyAnWycgKyAoJGtleSkgKyAnXTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyICRjdXJyZW50RXJyb3JQYXRoID0gaXQuZXJyb3JQYXRoO1xuICAgICAgdmFyICRhZGRpdGlvbmFsUHJvcGVydHkgPSAnXFwnICsgJyArICRrZXkgKyAnICsgXFwnJztcbiAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgaXQuZXJyb3JQYXRoID0gaXQudXRpbC5nZXRQYXRoRXhwcihpdC5lcnJvclBhdGgsICRrZXksIGl0Lm9wdHMuanNvblBvaW50ZXJzKTtcbiAgICAgIH1cbiAgICAgIGlmICgkbm9BZGRpdGlvbmFsKSB7XG4gICAgICAgIGlmICgkcmVtb3ZlQWRkaXRpb25hbCkge1xuICAgICAgICAgIG91dCArPSAnIGRlbGV0ZSAnICsgKCRkYXRhKSArICdbJyArICgka2V5KSArICddOyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnICcgKyAoJG5leHRWYWxpZCkgKyAnID0gZmFsc2U7ICc7XG4gICAgICAgICAgdmFyICRjdXJyRXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoO1xuICAgICAgICAgICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvYWRkaXRpb25hbFByb3BlcnRpZXMnO1xuICAgICAgICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdhZGRpdGlvbmFsUHJvcGVydGllcycpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgYWRkaXRpb25hbFByb3BlcnR5OiBcXCcnICsgKCRhZGRpdGlvbmFsUHJvcGVydHkpICsgJ1xcJyB9ICc7XG4gICAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCcnO1xuICAgICAgICAgICAgICBpZiAoaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICdpcyBhbiBpbnZhbGlkIGFkZGl0aW9uYWwgcHJvcGVydHknO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dCArPSAnc2hvdWxkIE5PVCBoYXZlIGFkZGl0aW9uYWwgcHJvcGVydGllcyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICdcXCcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IGZhbHNlICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB7fSAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgX19lcnIgPSBvdXQ7XG4gICAgICAgICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICAgICAgfVxuICAgICAgICAgICRlcnJTY2hlbWFQYXRoID0gJGN1cnJFcnJTY2hlbWFQYXRoO1xuICAgICAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyBicmVhazsgJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoJGFkZGl0aW9uYWxJc1NjaGVtYSkge1xuICAgICAgICBpZiAoJHJlbW92ZUFkZGl0aW9uYWwgPT0gJ2ZhaWxpbmcnKSB7XG4gICAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJGVycnMpICsgJyA9IGVycm9yczsgICc7XG4gICAgICAgICAgdmFyICR3YXNDb21wb3NpdGUgPSBpdC5jb21wb3NpdGVSdWxlO1xuICAgICAgICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9IHRydWU7XG4gICAgICAgICAgJGl0LnNjaGVtYSA9ICRhUHJvcGVydGllcztcbiAgICAgICAgICAkaXQuc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyAnLmFkZGl0aW9uYWxQcm9wZXJ0aWVzJztcbiAgICAgICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnL2FkZGl0aW9uYWxQcm9wZXJ0aWVzJztcbiAgICAgICAgICAkaXQuZXJyb3JQYXRoID0gaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5ID8gaXQuZXJyb3JQYXRoIDogaXQudXRpbC5nZXRQYXRoRXhwcihpdC5lcnJvclBhdGgsICRrZXksIGl0Lm9wdHMuanNvblBvaW50ZXJzKTtcbiAgICAgICAgICB2YXIgJHBhc3NEYXRhID0gJGRhdGEgKyAnWycgKyAka2V5ICsgJ10nO1xuICAgICAgICAgICRpdC5kYXRhUGF0aEFyclskZGF0YU54dF0gPSAka2V5O1xuICAgICAgICAgIHZhciAkY29kZSA9IGl0LnZhbGlkYXRlKCRpdCk7XG4gICAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICAgIGlmIChpdC51dGlsLnZhck9jY3VyZW5jZXMoJGNvZGUsICRuZXh0RGF0YSkgPCAyKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKGl0LnV0aWwudmFyUmVwbGFjZSgkY29kZSwgJG5leHREYXRhLCAkcGFzc0RhdGEpKSArICcgJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJG5leHREYXRhKSArICcgPSAnICsgKCRwYXNzRGF0YSkgKyAnOyAnICsgKCRjb2RlKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICcgaWYgKCEnICsgKCRuZXh0VmFsaWQpICsgJykgeyBlcnJvcnMgPSAnICsgKCRlcnJzKSArICc7IGlmICh2YWxpZGF0ZS5lcnJvcnMgIT09IG51bGwpIHsgaWYgKGVycm9ycykgdmFsaWRhdGUuZXJyb3JzLmxlbmd0aCA9IGVycm9yczsgZWxzZSB2YWxpZGF0ZS5lcnJvcnMgPSBudWxsOyB9IGRlbGV0ZSAnICsgKCRkYXRhKSArICdbJyArICgka2V5KSArICddOyB9ICAnO1xuICAgICAgICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9ICR3YXNDb21wb3NpdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGl0LnNjaGVtYSA9ICRhUHJvcGVydGllcztcbiAgICAgICAgICAkaXQuc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyAnLmFkZGl0aW9uYWxQcm9wZXJ0aWVzJztcbiAgICAgICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnL2FkZGl0aW9uYWxQcm9wZXJ0aWVzJztcbiAgICAgICAgICAkaXQuZXJyb3JQYXRoID0gaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5ID8gaXQuZXJyb3JQYXRoIDogaXQudXRpbC5nZXRQYXRoRXhwcihpdC5lcnJvclBhdGgsICRrZXksIGl0Lm9wdHMuanNvblBvaW50ZXJzKTtcbiAgICAgICAgICB2YXIgJHBhc3NEYXRhID0gJGRhdGEgKyAnWycgKyAka2V5ICsgJ10nO1xuICAgICAgICAgICRpdC5kYXRhUGF0aEFyclskZGF0YU54dF0gPSAka2V5O1xuICAgICAgICAgIHZhciAkY29kZSA9IGl0LnZhbGlkYXRlKCRpdCk7XG4gICAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICAgIGlmIChpdC51dGlsLnZhck9jY3VyZW5jZXMoJGNvZGUsICRuZXh0RGF0YSkgPCAyKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKGl0LnV0aWwudmFyUmVwbGFjZSgkY29kZSwgJG5leHREYXRhLCAkcGFzc0RhdGEpKSArICcgJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJG5leHREYXRhKSArICcgPSAnICsgKCRwYXNzRGF0YSkgKyAnOyAnICsgKCRjb2RlKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAgIG91dCArPSAnIGlmICghJyArICgkbmV4dFZhbGlkKSArICcpIGJyZWFrOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaXQuZXJyb3JQYXRoID0gJGN1cnJlbnRFcnJvclBhdGg7XG4gICAgfVxuICAgIGlmICgkc29tZVByb3BlcnRpZXMpIHtcbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9XG4gICAgb3V0ICs9ICcgfSAgJztcbiAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJG5leHRWYWxpZCkgKyAnKSB7ICc7XG4gICAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgfVxuICB9XG4gIHZhciAkdXNlRGVmYXVsdHMgPSBpdC5vcHRzLnVzZURlZmF1bHRzICYmICFpdC5jb21wb3NpdGVSdWxlO1xuICBpZiAoJHNjaGVtYUtleXMubGVuZ3RoKSB7XG4gICAgdmFyIGFycjMgPSAkc2NoZW1hS2V5cztcbiAgICBpZiAoYXJyMykge1xuICAgICAgdmFyICRwcm9wZXJ0eUtleSwgaTMgPSAtMSxcbiAgICAgICAgbDMgPSBhcnIzLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaTMgPCBsMykge1xuICAgICAgICAkcHJvcGVydHlLZXkgPSBhcnIzW2kzICs9IDFdO1xuICAgICAgICB2YXIgJHNjaCA9ICRzY2hlbWFbJHByb3BlcnR5S2V5XTtcbiAgICAgICAgaWYgKGl0LnV0aWwuc2NoZW1hSGFzUnVsZXMoJHNjaCwgaXQuUlVMRVMuYWxsKSkge1xuICAgICAgICAgIHZhciAkcHJvcCA9IGl0LnV0aWwuZ2V0UHJvcGVydHkoJHByb3BlcnR5S2V5KSxcbiAgICAgICAgICAgICRwYXNzRGF0YSA9ICRkYXRhICsgJHByb3AsXG4gICAgICAgICAgICAkaGFzRGVmYXVsdCA9ICR1c2VEZWZhdWx0cyAmJiAkc2NoLmRlZmF1bHQgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAkaXQuc2NoZW1hID0gJHNjaDtcbiAgICAgICAgICAkaXQuc2NoZW1hUGF0aCA9ICRzY2hlbWFQYXRoICsgJHByb3A7XG4gICAgICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSAkZXJyU2NoZW1hUGF0aCArICcvJyArIGl0LnV0aWwuZXNjYXBlRnJhZ21lbnQoJHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAkaXQuZXJyb3JQYXRoID0gaXQudXRpbC5nZXRQYXRoKGl0LmVycm9yUGF0aCwgJHByb3BlcnR5S2V5LCBpdC5vcHRzLmpzb25Qb2ludGVycyk7XG4gICAgICAgICAgJGl0LmRhdGFQYXRoQXJyWyRkYXRhTnh0XSA9IGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJHByb3BlcnR5S2V5KTtcbiAgICAgICAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpO1xuICAgICAgICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICAgICAgICBpZiAoaXQudXRpbC52YXJPY2N1cmVuY2VzKCRjb2RlLCAkbmV4dERhdGEpIDwgMikge1xuICAgICAgICAgICAgJGNvZGUgPSBpdC51dGlsLnZhclJlcGxhY2UoJGNvZGUsICRuZXh0RGF0YSwgJHBhc3NEYXRhKTtcbiAgICAgICAgICAgIHZhciAkdXNlRGF0YSA9ICRwYXNzRGF0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyICR1c2VEYXRhID0gJG5leHREYXRhO1xuICAgICAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJG5leHREYXRhKSArICcgPSAnICsgKCRwYXNzRGF0YSkgKyAnOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJGhhc0RlZmF1bHQpIHtcbiAgICAgICAgICAgIG91dCArPSAnICcgKyAoJGNvZGUpICsgJyAnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoJHJlcXVpcmVkSGFzaCAmJiAkcmVxdWlyZWRIYXNoWyRwcm9wZXJ0eUtleV0pIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCAnICsgKCR1c2VEYXRhKSArICcgPT09IHVuZGVmaW5lZCAnO1xuICAgICAgICAgICAgICBpZiAoJG93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyB8fCAhIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgnICsgKCRkYXRhKSArICcsIFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5S2V5KSkgKyAnXFwnKSAnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG91dCArPSAnKSB7ICcgKyAoJG5leHRWYWxpZCkgKyAnID0gZmFsc2U7ICc7XG4gICAgICAgICAgICAgIHZhciAkY3VycmVudEVycm9yUGF0aCA9IGl0LmVycm9yUGF0aCxcbiAgICAgICAgICAgICAgICAkY3VyckVyclNjaGVtYVBhdGggPSAkZXJyU2NoZW1hUGF0aCxcbiAgICAgICAgICAgICAgICAkbWlzc2luZ1Byb3BlcnR5ID0gaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIGl0LmVycm9yUGF0aCA9IGl0LnV0aWwuZ2V0UGF0aCgkY3VycmVudEVycm9yUGF0aCwgJHByb3BlcnR5S2V5LCBpdC5vcHRzLmpzb25Qb2ludGVycyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy9yZXF1aXJlZCc7XG4gICAgICAgICAgICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAgICAgICAgICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgICAgICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgncmVxdWlyZWQnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IG1pc3NpbmdQcm9wZXJ0eTogXFwnJyArICgkbWlzc2luZ1Byb3BlcnR5KSArICdcXCcgfSAnO1xuICAgICAgICAgICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCcnO1xuICAgICAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gJ2lzIGEgcmVxdWlyZWQgcHJvcGVydHknO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICdzaG91bGQgaGF2ZSByZXF1aXJlZCBwcm9wZXJ0eSBcXFxcXFwnJyArICgkbWlzc2luZ1Byb3BlcnR5KSArICdcXFxcXFwnJztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIG91dCArPSAnXFwnICc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyB7fSAnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBfX2VyciA9IG91dDtcbiAgICAgICAgICAgICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJGVyclNjaGVtYVBhdGggPSAkY3VyckVyclNjaGVtYVBhdGg7XG4gICAgICAgICAgICAgIGl0LmVycm9yUGF0aCA9ICRjdXJyZW50RXJyb3JQYXRoO1xuICAgICAgICAgICAgICBvdXQgKz0gJyB9IGVsc2UgeyAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyBpZiAoICcgKyAoJHVzZURhdGEpICsgJyA9PT0gdW5kZWZpbmVkICc7XG4gICAgICAgICAgICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJyB8fCAhIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgnICsgKCRkYXRhKSArICcsIFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5S2V5KSkgKyAnXFwnKSAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdXQgKz0gJykgeyAnICsgKCRuZXh0VmFsaWQpICsgJyA9IHRydWU7IH0gZWxzZSB7ICc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJHVzZURhdGEpICsgJyAhPT0gdW5kZWZpbmVkICc7XG4gICAgICAgICAgICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJyAmJiAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgnICsgKCRkYXRhKSArICcsIFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5S2V5KSkgKyAnXFwnKSAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdXQgKz0gJyApIHsgJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICcgJyArICgkY29kZSkgKyAnIH0gJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkbmV4dFZhbGlkKSArICcpIHsgJztcbiAgICAgICAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCRwUHJvcGVydHlLZXlzLmxlbmd0aCkge1xuICAgIHZhciBhcnI0ID0gJHBQcm9wZXJ0eUtleXM7XG4gICAgaWYgKGFycjQpIHtcbiAgICAgIHZhciAkcFByb3BlcnR5LCBpNCA9IC0xLFxuICAgICAgICBsNCA9IGFycjQubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpNCA8IGw0KSB7XG4gICAgICAgICRwUHJvcGVydHkgPSBhcnI0W2k0ICs9IDFdO1xuICAgICAgICB2YXIgJHNjaCA9ICRwUHJvcGVydGllc1skcFByb3BlcnR5XTtcbiAgICAgICAgaWYgKGl0LnV0aWwuc2NoZW1hSGFzUnVsZXMoJHNjaCwgaXQuUlVMRVMuYWxsKSkge1xuICAgICAgICAgICRpdC5zY2hlbWEgPSAkc2NoO1xuICAgICAgICAgICRpdC5zY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArICcucGF0dGVyblByb3BlcnRpZXMnICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgkcFByb3BlcnR5KTtcbiAgICAgICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnL3BhdHRlcm5Qcm9wZXJ0aWVzLycgKyBpdC51dGlsLmVzY2FwZUZyYWdtZW50KCRwUHJvcGVydHkpO1xuICAgICAgICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgICAgICAgb3V0ICs9ICcgJyArICgkZGF0YVByb3BlcnRpZXMpICsgJyA9ICcgKyAoJGRhdGFQcm9wZXJ0aWVzKSArICcgfHwgT2JqZWN0LmtleXMoJyArICgkZGF0YSkgKyAnKTsgZm9yICh2YXIgJyArICgkaWR4KSArICc9MDsgJyArICgkaWR4KSArICc8JyArICgkZGF0YVByb3BlcnRpZXMpICsgJy5sZW5ndGg7ICcgKyAoJGlkeCkgKyAnKyspIHsgdmFyICcgKyAoJGtleSkgKyAnID0gJyArICgkZGF0YVByb3BlcnRpZXMpICsgJ1snICsgKCRpZHgpICsgJ107ICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIGZvciAodmFyICcgKyAoJGtleSkgKyAnIGluICcgKyAoJGRhdGEpICsgJykgeyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArIChpdC51c2VQYXR0ZXJuKCRwUHJvcGVydHkpKSArICcudGVzdCgnICsgKCRrZXkpICsgJykpIHsgJztcbiAgICAgICAgICAkaXQuZXJyb3JQYXRoID0gaXQudXRpbC5nZXRQYXRoRXhwcihpdC5lcnJvclBhdGgsICRrZXksIGl0Lm9wdHMuanNvblBvaW50ZXJzKTtcbiAgICAgICAgICB2YXIgJHBhc3NEYXRhID0gJGRhdGEgKyAnWycgKyAka2V5ICsgJ10nO1xuICAgICAgICAgICRpdC5kYXRhUGF0aEFyclskZGF0YU54dF0gPSAka2V5O1xuICAgICAgICAgIHZhciAkY29kZSA9IGl0LnZhbGlkYXRlKCRpdCk7XG4gICAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICAgIGlmIChpdC51dGlsLnZhck9jY3VyZW5jZXMoJGNvZGUsICRuZXh0RGF0YSkgPCAyKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKGl0LnV0aWwudmFyUmVwbGFjZSgkY29kZSwgJG5leHREYXRhLCAkcGFzc0RhdGEpKSArICcgJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJG5leHREYXRhKSArICcgPSAnICsgKCRwYXNzRGF0YSkgKyAnOyAnICsgKCRjb2RlKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAgIG91dCArPSAnIGlmICghJyArICgkbmV4dFZhbGlkKSArICcpIGJyZWFrOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAgIG91dCArPSAnIGVsc2UgJyArICgkbmV4dFZhbGlkKSArICcgPSB0cnVlOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB9ICAnO1xuICAgICAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkbmV4dFZhbGlkKSArICcpIHsgJztcbiAgICAgICAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyAnICsgKCRjbG9zaW5nQnJhY2VzKSArICcgaWYgKCcgKyAoJGVycnMpICsgJyA9PSBlcnJvcnMpIHsnO1xuICB9XG4gIG91dCA9IGl0LnV0aWwuY2xlYW5VcENvZGUob3V0KTtcbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfcHJvcGVydHlOYW1lcyhpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJGVycnMgPSAnZXJyc19fJyArICRsdmw7XG4gIHZhciAkaXQgPSBpdC51dGlsLmNvcHkoaXQpO1xuICB2YXIgJGNsb3NpbmdCcmFjZXMgPSAnJztcbiAgJGl0LmxldmVsKys7XG4gIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgb3V0ICs9ICd2YXIgJyArICgkZXJycykgKyAnID0gZXJyb3JzOyc7XG4gIGlmIChpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRzY2hlbWEsIGl0LlJVTEVTLmFsbCkpIHtcbiAgICAkaXQuc2NoZW1hID0gJHNjaGVtYTtcbiAgICAkaXQuc2NoZW1hUGF0aCA9ICRzY2hlbWFQYXRoO1xuICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGg7XG4gICAgdmFyICRrZXkgPSAna2V5JyArICRsdmwsXG4gICAgICAkaWR4ID0gJ2lkeCcgKyAkbHZsLFxuICAgICAgJGkgPSAnaScgKyAkbHZsLFxuICAgICAgJGludmFsaWROYW1lID0gJ1xcJyArICcgKyAka2V5ICsgJyArIFxcJycsXG4gICAgICAkZGF0YU54dCA9ICRpdC5kYXRhTGV2ZWwgPSBpdC5kYXRhTGV2ZWwgKyAxLFxuICAgICAgJG5leHREYXRhID0gJ2RhdGEnICsgJGRhdGFOeHQsXG4gICAgICAkZGF0YVByb3BlcnRpZXMgPSAnZGF0YVByb3BlcnRpZXMnICsgJGx2bCxcbiAgICAgICRvd25Qcm9wZXJ0aWVzID0gaXQub3B0cy5vd25Qcm9wZXJ0aWVzLFxuICAgICAgJGN1cnJlbnRCYXNlSWQgPSBpdC5iYXNlSWQ7XG4gICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICBvdXQgKz0gJyB2YXIgJyArICgkZGF0YVByb3BlcnRpZXMpICsgJyA9IHVuZGVmaW5lZDsgJztcbiAgICB9XG4gICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnID0gJyArICgkZGF0YVByb3BlcnRpZXMpICsgJyB8fCBPYmplY3Qua2V5cygnICsgKCRkYXRhKSArICcpOyBmb3IgKHZhciAnICsgKCRpZHgpICsgJz0wOyAnICsgKCRpZHgpICsgJzwnICsgKCRkYXRhUHJvcGVydGllcykgKyAnLmxlbmd0aDsgJyArICgkaWR4KSArICcrKykgeyB2YXIgJyArICgka2V5KSArICcgPSAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnWycgKyAoJGlkeCkgKyAnXTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgZm9yICh2YXIgJyArICgka2V5KSArICcgaW4gJyArICgkZGF0YSkgKyAnKSB7ICc7XG4gICAgfVxuICAgIG91dCArPSAnIHZhciBzdGFydEVycnMnICsgKCRsdmwpICsgJyA9IGVycm9yczsgJztcbiAgICB2YXIgJHBhc3NEYXRhID0gJGtleTtcbiAgICB2YXIgJHdhc0NvbXBvc2l0ZSA9IGl0LmNvbXBvc2l0ZVJ1bGU7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gdHJ1ZTtcbiAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpO1xuICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICBpZiAoaXQudXRpbC52YXJPY2N1cmVuY2VzKCRjb2RlLCAkbmV4dERhdGEpIDwgMikge1xuICAgICAgb3V0ICs9ICcgJyArIChpdC51dGlsLnZhclJlcGxhY2UoJGNvZGUsICRuZXh0RGF0YSwgJHBhc3NEYXRhKSkgKyAnICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhciAnICsgKCRuZXh0RGF0YSkgKyAnID0gJyArICgkcGFzc0RhdGEpICsgJzsgJyArICgkY29kZSkgKyAnICc7XG4gICAgfVxuICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9ICR3YXNDb21wb3NpdGU7XG4gICAgb3V0ICs9ICcgaWYgKCEnICsgKCRuZXh0VmFsaWQpICsgJykgeyBmb3IgKHZhciAnICsgKCRpKSArICc9c3RhcnRFcnJzJyArICgkbHZsKSArICc7ICcgKyAoJGkpICsgJzxlcnJvcnM7ICcgKyAoJGkpICsgJysrKSB7IHZFcnJvcnNbJyArICgkaSkgKyAnXS5wcm9wZXJ0eU5hbWUgPSAnICsgKCRrZXkpICsgJzsgfSAgIHZhciBlcnIgPSAgICc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgncHJvcGVydHlOYW1lcycpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgcHJvcGVydHlOYW1lOiBcXCcnICsgKCRpbnZhbGlkTmFtZSkgKyAnXFwnIH0gJztcbiAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Byb3BlcnR5IG5hbWUgXFxcXFxcJycgKyAoJGludmFsaWROYW1lKSArICdcXFxcXFwnIGlzIGludmFsaWRcXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgb3V0ICs9ICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcih2RXJyb3JzKTsgJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IHZFcnJvcnM7IHJldHVybiBmYWxzZTsgJztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgIG91dCArPSAnIGJyZWFrOyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9IH0nO1xuICB9XG4gIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgb3V0ICs9ICcgJyArICgkY2xvc2luZ0JyYWNlcykgKyAnIGlmICgnICsgKCRlcnJzKSArICcgPT0gZXJyb3JzKSB7JztcbiAgfVxuICBvdXQgPSBpdC51dGlsLmNsZWFuVXBDb2RlKG91dCk7XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX3JlcXVpcmVkKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRpc0RhdGEgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWEgJiYgJHNjaGVtYS4kZGF0YSxcbiAgICAkc2NoZW1hVmFsdWU7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLmdldERhdGEoJHNjaGVtYS4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgfSBlbHNlIHtcbiAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hO1xuICB9XG4gIHZhciAkdlNjaGVtYSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgaWYgKCEkaXNEYXRhKSB7XG4gICAgaWYgKCRzY2hlbWEubGVuZ3RoIDwgaXQub3B0cy5sb29wUmVxdWlyZWQgJiYgaXQuc2NoZW1hLnByb3BlcnRpZXMgJiYgT2JqZWN0LmtleXMoaXQuc2NoZW1hLnByb3BlcnRpZXMpLmxlbmd0aCkge1xuICAgICAgdmFyICRyZXF1aXJlZCA9IFtdO1xuICAgICAgdmFyIGFycjEgPSAkc2NoZW1hO1xuICAgICAgaWYgKGFycjEpIHtcbiAgICAgICAgdmFyICRwcm9wZXJ0eSwgaTEgPSAtMSxcbiAgICAgICAgICBsMSA9IGFycjEubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKGkxIDwgbDEpIHtcbiAgICAgICAgICAkcHJvcGVydHkgPSBhcnIxW2kxICs9IDFdO1xuICAgICAgICAgIHZhciAkcHJvcGVydHlTY2ggPSBpdC5zY2hlbWEucHJvcGVydGllc1skcHJvcGVydHldO1xuICAgICAgICAgIGlmICghKCRwcm9wZXJ0eVNjaCAmJiBpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRwcm9wZXJ0eVNjaCwgaXQuUlVMRVMuYWxsKSkpIHtcbiAgICAgICAgICAgICRyZXF1aXJlZFskcmVxdWlyZWQubGVuZ3RoXSA9ICRwcm9wZXJ0eTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyICRyZXF1aXJlZCA9ICRzY2hlbWE7XG4gICAgfVxuICB9XG4gIGlmICgkaXNEYXRhIHx8ICRyZXF1aXJlZC5sZW5ndGgpIHtcbiAgICB2YXIgJGN1cnJlbnRFcnJvclBhdGggPSBpdC5lcnJvclBhdGgsXG4gICAgICAkbG9vcFJlcXVpcmVkID0gJGlzRGF0YSB8fCAkcmVxdWlyZWQubGVuZ3RoID49IGl0Lm9wdHMubG9vcFJlcXVpcmVkLFxuICAgICAgJG93blByb3BlcnRpZXMgPSBpdC5vcHRzLm93blByb3BlcnRpZXM7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgIG91dCArPSAnIHZhciBtaXNzaW5nJyArICgkbHZsKSArICc7ICc7XG4gICAgICBpZiAoJGxvb3BSZXF1aXJlZCkge1xuICAgICAgICBpZiAoISRpc0RhdGEpIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkdlNjaGVtYSkgKyAnID0gdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnOyAnO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkaSA9ICdpJyArICRsdmwsXG4gICAgICAgICAgJHByb3BlcnR5UGF0aCA9ICdzY2hlbWEnICsgJGx2bCArICdbJyArICRpICsgJ10nLFxuICAgICAgICAgICRtaXNzaW5nUHJvcGVydHkgPSAnXFwnICsgJyArICRwcm9wZXJ0eVBhdGggKyAnICsgXFwnJztcbiAgICAgICAgaWYgKGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSkge1xuICAgICAgICAgIGl0LmVycm9yUGF0aCA9IGl0LnV0aWwuZ2V0UGF0aEV4cHIoJGN1cnJlbnRFcnJvclBhdGgsICRwcm9wZXJ0eVBhdGgsIGl0Lm9wdHMuanNvblBvaW50ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkdmFsaWQpICsgJyA9IHRydWU7ICc7XG4gICAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgICAgb3V0ICs9ICcgaWYgKHNjaGVtYScgKyAoJGx2bCkgKyAnID09PSB1bmRlZmluZWQpICcgKyAoJHZhbGlkKSArICcgPSB0cnVlOyBlbHNlIGlmICghQXJyYXkuaXNBcnJheShzY2hlbWEnICsgKCRsdmwpICsgJykpICcgKyAoJHZhbGlkKSArICcgPSBmYWxzZTsgZWxzZSB7JztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyBmb3IgKHZhciAnICsgKCRpKSArICcgPSAwOyAnICsgKCRpKSArICcgPCAnICsgKCR2U2NoZW1hKSArICcubGVuZ3RoOyAnICsgKCRpKSArICcrKykgeyAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkZGF0YSkgKyAnWycgKyAoJHZTY2hlbWEpICsgJ1snICsgKCRpKSArICddXSAhPT0gdW5kZWZpbmVkICc7XG4gICAgICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgICAgIG91dCArPSAnICYmICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCcgKyAoJGRhdGEpICsgJywgJyArICgkdlNjaGVtYSkgKyAnWycgKyAoJGkpICsgJ10pICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICc7IGlmICghJyArICgkdmFsaWQpICsgJykgYnJlYWs7IH0gJztcbiAgICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgICBvdXQgKz0gJyAgfSAgJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyAgaWYgKCEnICsgKCR2YWxpZCkgKyAnKSB7ICAgJztcbiAgICAgICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdyZXF1aXJlZCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgbWlzc2luZ1Byb3BlcnR5OiBcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcJyB9ICc7XG4gICAgICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJyc7XG4gICAgICAgICAgICBpZiAoaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIG91dCArPSAnaXMgYSByZXF1aXJlZCBwcm9wZXJ0eSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdXQgKz0gJ3Nob3VsZCBoYXZlIHJlcXVpcmVkIHByb3BlcnR5IFxcXFxcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcXFxcXCcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICdcXCcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9fZXJyID0gb3V0O1xuICAgICAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyB9IGVsc2UgeyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgaWYgKCAnO1xuICAgICAgICB2YXIgYXJyMiA9ICRyZXF1aXJlZDtcbiAgICAgICAgaWYgKGFycjIpIHtcbiAgICAgICAgICB2YXIgJHByb3BlcnR5S2V5LCAkaSA9IC0xLFxuICAgICAgICAgICAgbDIgPSBhcnIyLmxlbmd0aCAtIDE7XG4gICAgICAgICAgd2hpbGUgKCRpIDwgbDIpIHtcbiAgICAgICAgICAgICRwcm9wZXJ0eUtleSA9IGFycjJbJGkgKz0gMV07XG4gICAgICAgICAgICBpZiAoJGkpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgfHwgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciAkcHJvcCA9IGl0LnV0aWwuZ2V0UHJvcGVydHkoJHByb3BlcnR5S2V5KSxcbiAgICAgICAgICAgICAgJHVzZURhdGEgPSAkZGF0YSArICRwcm9wO1xuICAgICAgICAgICAgb3V0ICs9ICcgKCAoICcgKyAoJHVzZURhdGEpICsgJyA9PT0gdW5kZWZpbmVkICc7XG4gICAgICAgICAgICBpZiAoJG93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgfHwgISBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoJyArICgkZGF0YSkgKyAnLCBcXCcnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eUtleSkpICsgJ1xcJykgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnKSAmJiAobWlzc2luZycgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKGl0Lm9wdHMuanNvblBvaW50ZXJzID8gJHByb3BlcnR5S2V5IDogJHByb3ApKSArICcpICkgJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcpIHsgICc7XG4gICAgICAgIHZhciAkcHJvcGVydHlQYXRoID0gJ21pc3NpbmcnICsgJGx2bCxcbiAgICAgICAgICAkbWlzc2luZ1Byb3BlcnR5ID0gJ1xcJyArICcgKyAkcHJvcGVydHlQYXRoICsgJyArIFxcJyc7XG4gICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICBpdC5lcnJvclBhdGggPSBpdC5vcHRzLmpzb25Qb2ludGVycyA/IGl0LnV0aWwuZ2V0UGF0aEV4cHIoJGN1cnJlbnRFcnJvclBhdGgsICRwcm9wZXJ0eVBhdGgsIHRydWUpIDogJGN1cnJlbnRFcnJvclBhdGggKyAnICsgJyArICRwcm9wZXJ0eVBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdyZXF1aXJlZCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgbWlzc2luZ1Byb3BlcnR5OiBcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcJyB9ICc7XG4gICAgICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJyc7XG4gICAgICAgICAgICBpZiAoaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIG91dCArPSAnaXMgYSByZXF1aXJlZCBwcm9wZXJ0eSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdXQgKz0gJ3Nob3VsZCBoYXZlIHJlcXVpcmVkIHByb3BlcnR5IFxcXFxcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcXFxcXCcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICdcXCcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9fZXJyID0gb3V0O1xuICAgICAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyB9IGVsc2UgeyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoJGxvb3BSZXF1aXJlZCkge1xuICAgICAgICBpZiAoISRpc0RhdGEpIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkdlNjaGVtYSkgKyAnID0gdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnOyAnO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkaSA9ICdpJyArICRsdmwsXG4gICAgICAgICAgJHByb3BlcnR5UGF0aCA9ICdzY2hlbWEnICsgJGx2bCArICdbJyArICRpICsgJ10nLFxuICAgICAgICAgICRtaXNzaW5nUHJvcGVydHkgPSAnXFwnICsgJyArICRwcm9wZXJ0eVBhdGggKyAnICsgXFwnJztcbiAgICAgICAgaWYgKGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSkge1xuICAgICAgICAgIGl0LmVycm9yUGF0aCA9IGl0LnV0aWwuZ2V0UGF0aEV4cHIoJGN1cnJlbnRFcnJvclBhdGgsICRwcm9wZXJ0eVBhdGgsIGl0Lm9wdHMuanNvblBvaW50ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCR2U2NoZW1hKSArICcgJiYgIUFycmF5LmlzQXJyYXkoJyArICgkdlNjaGVtYSkgKyAnKSkgeyAgdmFyIGVyciA9ICAgJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdyZXF1aXJlZCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgbWlzc2luZ1Byb3BlcnR5OiBcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcJyB9ICc7XG4gICAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCcnO1xuICAgICAgICAgICAgICBpZiAoaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICdpcyBhIHJlcXVpcmVkIHByb3BlcnR5JztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJ3Nob3VsZCBoYXZlIHJlcXVpcmVkIHByb3BlcnR5IFxcXFxcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcXFxcXCcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG91dCArPSAnXFwnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7IH0gZWxzZSBpZiAoJyArICgkdlNjaGVtYSkgKyAnICE9PSB1bmRlZmluZWQpIHsgJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyBmb3IgKHZhciAnICsgKCRpKSArICcgPSAwOyAnICsgKCRpKSArICcgPCAnICsgKCR2U2NoZW1hKSArICcubGVuZ3RoOyAnICsgKCRpKSArICcrKykgeyBpZiAoJyArICgkZGF0YSkgKyAnWycgKyAoJHZTY2hlbWEpICsgJ1snICsgKCRpKSArICddXSA9PT0gdW5kZWZpbmVkICc7XG4gICAgICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgICAgIG91dCArPSAnIHx8ICEgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCcgKyAoJGRhdGEpICsgJywgJyArICgkdlNjaGVtYSkgKyAnWycgKyAoJGkpICsgJ10pICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcpIHsgIHZhciBlcnIgPSAgICc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdyZXF1aXJlZCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgbWlzc2luZ1Byb3BlcnR5OiBcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcJyB9ICc7XG4gICAgICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJyc7XG4gICAgICAgICAgICBpZiAoaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIG91dCArPSAnaXMgYSByZXF1aXJlZCBwcm9wZXJ0eSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdXQgKz0gJ3Nob3VsZCBoYXZlIHJlcXVpcmVkIHByb3BlcnR5IFxcXFxcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcXFxcXCcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICdcXCcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgfSB9ICc7XG4gICAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgICAgb3V0ICs9ICcgIH0gICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhcnIzID0gJHJlcXVpcmVkO1xuICAgICAgICBpZiAoYXJyMykge1xuICAgICAgICAgIHZhciAkcHJvcGVydHlLZXksIGkzID0gLTEsXG4gICAgICAgICAgICBsMyA9IGFycjMubGVuZ3RoIC0gMTtcbiAgICAgICAgICB3aGlsZSAoaTMgPCBsMykge1xuICAgICAgICAgICAgJHByb3BlcnR5S2V5ID0gYXJyM1tpMyArPSAxXTtcbiAgICAgICAgICAgIHZhciAkcHJvcCA9IGl0LnV0aWwuZ2V0UHJvcGVydHkoJHByb3BlcnR5S2V5KSxcbiAgICAgICAgICAgICAgJG1pc3NpbmdQcm9wZXJ0eSA9IGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eUtleSksXG4gICAgICAgICAgICAgICR1c2VEYXRhID0gJGRhdGEgKyAkcHJvcDtcbiAgICAgICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgaXQuZXJyb3JQYXRoID0gaXQudXRpbC5nZXRQYXRoKCRjdXJyZW50RXJyb3JQYXRoLCAkcHJvcGVydHlLZXksIGl0Lm9wdHMuanNvblBvaW50ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnIGlmICggJyArICgkdXNlRGF0YSkgKyAnID09PSB1bmRlZmluZWQgJztcbiAgICAgICAgICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgICAgICAgICBvdXQgKz0gJyB8fCAhIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgnICsgKCRkYXRhKSArICcsIFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5S2V5KSkgKyAnXFwnKSAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICcpIHsgIHZhciBlcnIgPSAgICc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ3JlcXVpcmVkJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBtaXNzaW5nUHJvcGVydHk6IFxcJycgKyAoJG1pc3NpbmdQcm9wZXJ0eSkgKyAnXFwnIH0gJztcbiAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCcnO1xuICAgICAgICAgICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnaXMgYSByZXF1aXJlZCBwcm9wZXJ0eSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnc2hvdWxkIGhhdmUgcmVxdWlyZWQgcHJvcGVydHkgXFxcXFxcJycgKyAoJG1pc3NpbmdQcm9wZXJ0eSkgKyAnXFxcXFxcJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dCArPSAnXFwnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7IH0gJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaXQuZXJyb3JQYXRoID0gJGN1cnJlbnRFcnJvclBhdGg7XG4gIH0gZWxzZSBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnIGlmICh0cnVlKSB7JztcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV91bmlxdWVJdGVtcyhpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJHZhbGlkID0gJ3ZhbGlkJyArICRsdmw7XG4gIHZhciAkaXNEYXRhID0gaXQub3B0cy4kZGF0YSAmJiAkc2NoZW1hICYmICRzY2hlbWEuJGRhdGEsXG4gICAgJHNjaGVtYVZhbHVlO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIG91dCArPSAnIHZhciBzY2hlbWEnICsgKCRsdmwpICsgJyA9ICcgKyAoaXQudXRpbC5nZXREYXRhKCRzY2hlbWEuJGRhdGEsICRkYXRhTHZsLCBpdC5kYXRhUGF0aEFycikpICsgJzsgJztcbiAgICAkc2NoZW1hVmFsdWUgPSAnc2NoZW1hJyArICRsdmw7XG4gIH0gZWxzZSB7XG4gICAgJHNjaGVtYVZhbHVlID0gJHNjaGVtYTtcbiAgfVxuICBpZiAoKCRzY2hlbWEgfHwgJGlzRGF0YSkgJiYgaXQub3B0cy51bmlxdWVJdGVtcyAhPT0gZmFsc2UpIHtcbiAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJHZhbGlkKSArICc7IGlmICgnICsgKCRzY2hlbWFWYWx1ZSkgKyAnID09PSBmYWxzZSB8fCAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnID09PSB1bmRlZmluZWQpICcgKyAoJHZhbGlkKSArICcgPSB0cnVlOyBlbHNlIGlmICh0eXBlb2YgJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPSBcXCdib29sZWFuXFwnKSAnICsgKCR2YWxpZCkgKyAnID0gZmFsc2U7IGVsc2UgeyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB2YXIgaSA9ICcgKyAoJGRhdGEpICsgJy5sZW5ndGggLCAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZSAsIGo7IGlmIChpID4gMSkgeyAnO1xuICAgIHZhciAkaXRlbVR5cGUgPSBpdC5zY2hlbWEuaXRlbXMgJiYgaXQuc2NoZW1hLml0ZW1zLnR5cGUsXG4gICAgICAkdHlwZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCRpdGVtVHlwZSk7XG4gICAgaWYgKCEkaXRlbVR5cGUgfHwgJGl0ZW1UeXBlID09ICdvYmplY3QnIHx8ICRpdGVtVHlwZSA9PSAnYXJyYXknIHx8ICgkdHlwZUlzQXJyYXkgJiYgKCRpdGVtVHlwZS5pbmRleE9mKCdvYmplY3QnKSA+PSAwIHx8ICRpdGVtVHlwZS5pbmRleE9mKCdhcnJheScpID49IDApKSkge1xuICAgICAgb3V0ICs9ICcgb3V0ZXI6IGZvciAoO2ktLTspIHsgZm9yIChqID0gaTsgai0tOykgeyBpZiAoZXF1YWwoJyArICgkZGF0YSkgKyAnW2ldLCAnICsgKCRkYXRhKSArICdbal0pKSB7ICcgKyAoJHZhbGlkKSArICcgPSBmYWxzZTsgYnJlYWsgb3V0ZXI7IH0gfSB9ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhciBpdGVtSW5kaWNlcyA9IHt9LCBpdGVtOyBmb3IgKDtpLS07KSB7IHZhciBpdGVtID0gJyArICgkZGF0YSkgKyAnW2ldOyAnO1xuICAgICAgdmFyICRtZXRob2QgPSAnY2hlY2tEYXRhVHlwZScgKyAoJHR5cGVJc0FycmF5ID8gJ3MnIDogJycpO1xuICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoaXQudXRpbFskbWV0aG9kXSgkaXRlbVR5cGUsICdpdGVtJywgdHJ1ZSkpICsgJykgY29udGludWU7ICc7XG4gICAgICBpZiAoJHR5cGVJc0FycmF5KSB7XG4gICAgICAgIG91dCArPSAnIGlmICh0eXBlb2YgaXRlbSA9PSBcXCdzdHJpbmdcXCcpIGl0ZW0gPSBcXCdcIlxcJyArIGl0ZW07ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyBpZiAodHlwZW9mIGl0ZW1JbmRpY2VzW2l0ZW1dID09IFxcJ251bWJlclxcJykgeyAnICsgKCR2YWxpZCkgKyAnID0gZmFsc2U7IGogPSBpdGVtSW5kaWNlc1tpdGVtXTsgYnJlYWs7IH0gaXRlbUluZGljZXNbaXRlbV0gPSBpOyB9ICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gJztcbiAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgb3V0ICs9ICcgIH0gICc7XG4gICAgfVxuICAgIG91dCArPSAnIGlmICghJyArICgkdmFsaWQpICsgJykgeyAgICc7XG4gICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ3VuaXF1ZUl0ZW1zJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBpOiBpLCBqOiBqIH0gJztcbiAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBOT1QgaGF2ZSBkdXBsaWNhdGUgaXRlbXMgKGl0ZW1zICMjIFxcJyArIGogKyBcXCcgYW5kIFxcJyArIGkgKyBcXCcgYXJlIGlkZW50aWNhbClcXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6ICAnO1xuICAgICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICAgIG91dCArPSAndmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ICs9ICcnICsgKCRzY2hlbWEpO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnICAgICAgICAgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgfVxuICAgIHZhciBfX2VyciA9IG91dDtcbiAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgfSAnO1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgIG91dCArPSAnIGlmICh0cnVlKSB7ICc7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBLRVlXT1JEUyA9IFtcbiAgJ211bHRpcGxlT2YnLFxuICAnbWF4aW11bScsXG4gICdleGNsdXNpdmVNYXhpbXVtJyxcbiAgJ21pbmltdW0nLFxuICAnZXhjbHVzaXZlTWluaW11bScsXG4gICdtYXhMZW5ndGgnLFxuICAnbWluTGVuZ3RoJyxcbiAgJ3BhdHRlcm4nLFxuICAnYWRkaXRpb25hbEl0ZW1zJyxcbiAgJ21heEl0ZW1zJyxcbiAgJ21pbkl0ZW1zJyxcbiAgJ3VuaXF1ZUl0ZW1zJyxcbiAgJ21heFByb3BlcnRpZXMnLFxuICAnbWluUHJvcGVydGllcycsXG4gICdyZXF1aXJlZCcsXG4gICdhZGRpdGlvbmFsUHJvcGVydGllcycsXG4gICdlbnVtJyxcbiAgJ2Zvcm1hdCcsXG4gICdjb25zdCdcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGFTY2hlbWEsIGtleXdvcmRzSnNvblBvaW50ZXJzKSB7XG4gIGZvciAodmFyIGk9MDsgaTxrZXl3b3Jkc0pzb25Qb2ludGVycy5sZW5ndGg7IGkrKykge1xuICAgIG1ldGFTY2hlbWEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG1ldGFTY2hlbWEpKTtcbiAgICB2YXIgc2VnbWVudHMgPSBrZXl3b3Jkc0pzb25Qb2ludGVyc1tpXS5zcGxpdCgnLycpO1xuICAgIHZhciBrZXl3b3JkcyA9IG1ldGFTY2hlbWE7XG4gICAgdmFyIGo7XG4gICAgZm9yIChqPTE7IGo8c2VnbWVudHMubGVuZ3RoOyBqKyspXG4gICAgICBrZXl3b3JkcyA9IGtleXdvcmRzW3NlZ21lbnRzW2pdXTtcblxuICAgIGZvciAoaj0wOyBqPEtFWVdPUkRTLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIga2V5ID0gS0VZV09SRFNbal07XG4gICAgICB2YXIgc2NoZW1hID0ga2V5d29yZHNba2V5XTtcbiAgICAgIGlmIChzY2hlbWEpIHtcbiAgICAgICAga2V5d29yZHNba2V5XSA9IHtcbiAgICAgICAgICBhbnlPZjogW1xuICAgICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgICAgeyAkcmVmOiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vwb2JlcmV6a2luL2Fqdi9tYXN0ZXIvbGliL3JlZnMvZGF0YS5qc29uIycgfVxuICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWV0YVNjaGVtYTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBNaXNzaW5nUmVmRXJyb3IgPSByZXF1aXJlKCcuL2Vycm9yX2NsYXNzZXMnKS5NaXNzaW5nUmVmO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBpbGVBc3luYztcblxuXG4vKipcbiAqIENyZWF0ZXMgdmFsaWRhdGluZyBmdW5jdGlvbiBmb3IgcGFzc2VkIHNjaGVtYSB3aXRoIGFzeW5jaHJvbm91cyBsb2FkaW5nIG9mIG1pc3Npbmcgc2NoZW1hcy5cbiAqIGBsb2FkU2NoZW1hYCBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHNjaGVtYSB1cmkgYW5kIHJldHVybnMgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHNjaGVtYS5cbiAqIEB0aGlzICBBanZcbiAqIEBwYXJhbSB7T2JqZWN0fSAgIHNjaGVtYSBzY2hlbWEgb2JqZWN0XG4gKiBAcGFyYW0ge0Jvb2xlYW59ICBtZXRhIG9wdGlvbmFsIHRydWUgdG8gY29tcGlsZSBtZXRhLXNjaGVtYTsgdGhpcyBwYXJhbWV0ZXIgY2FuIGJlIHNraXBwZWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGFuIG9wdGlvbmFsIG5vZGUtc3R5bGUgY2FsbGJhY2ssIGl0IGlzIGNhbGxlZCB3aXRoIDIgcGFyYW1ldGVyczogZXJyb3IgKG9yIG51bGwpIGFuZCB2YWxpZGF0aW5nIGZ1bmN0aW9uLlxuICogQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSB2YWxpZGF0aW5nIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjb21waWxlQXN5bmMoc2NoZW1hLCBtZXRhLCBjYWxsYmFjaykge1xuICAvKiBlc2xpbnQgbm8tc2hhZG93OiAwICovXG4gIC8qIGdsb2JhbCBQcm9taXNlICovXG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAodHlwZW9mIHRoaXMuX29wdHMubG9hZFNjaGVtYSAhPSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBFcnJvcignb3B0aW9ucy5sb2FkU2NoZW1hIHNob3VsZCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKHR5cGVvZiBtZXRhID09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG1ldGE7XG4gICAgbWV0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHZhciBwID0gbG9hZE1ldGFTY2hlbWFPZihzY2hlbWEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY2hlbWFPYmogPSBzZWxmLl9hZGRTY2hlbWEoc2NoZW1hLCB1bmRlZmluZWQsIG1ldGEpO1xuICAgIHJldHVybiBzY2hlbWFPYmoudmFsaWRhdGUgfHwgX2NvbXBpbGVBc3luYyhzY2hlbWFPYmopO1xuICB9KTtcblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBwLnRoZW4oXG4gICAgICBmdW5jdGlvbih2KSB7IGNhbGxiYWNrKG51bGwsIHYpOyB9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHA7XG5cblxuICBmdW5jdGlvbiBsb2FkTWV0YVNjaGVtYU9mKHNjaCkge1xuICAgIHZhciAkc2NoZW1hID0gc2NoLiRzY2hlbWE7XG4gICAgcmV0dXJuICRzY2hlbWEgJiYgIXNlbGYuZ2V0U2NoZW1hKCRzY2hlbWEpXG4gICAgICAgICAgICA/IGNvbXBpbGVBc3luYy5jYWxsKHNlbGYsIHsgJHJlZjogJHNjaGVtYSB9LCB0cnVlKVxuICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gX2NvbXBpbGVBc3luYyhzY2hlbWFPYmopIHtcbiAgICB0cnkgeyByZXR1cm4gc2VsZi5fY29tcGlsZShzY2hlbWFPYmopOyB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBNaXNzaW5nUmVmRXJyb3IpIHJldHVybiBsb2FkTWlzc2luZ1NjaGVtYShlKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBsb2FkTWlzc2luZ1NjaGVtYShlKSB7XG4gICAgICB2YXIgcmVmID0gZS5taXNzaW5nU2NoZW1hO1xuICAgICAgaWYgKGFkZGVkKHJlZikpIHRocm93IG5ldyBFcnJvcignU2NoZW1hICcgKyByZWYgKyAnIGlzIGxvYWRlZCBidXQgJyArIGUubWlzc2luZ1JlZiArICcgY2Fubm90IGJlIHJlc29sdmVkJyk7XG5cbiAgICAgIHZhciBzY2hlbWFQcm9taXNlID0gc2VsZi5fbG9hZGluZ1NjaGVtYXNbcmVmXTtcbiAgICAgIGlmICghc2NoZW1hUHJvbWlzZSkge1xuICAgICAgICBzY2hlbWFQcm9taXNlID0gc2VsZi5fbG9hZGluZ1NjaGVtYXNbcmVmXSA9IHNlbGYuX29wdHMubG9hZFNjaGVtYShyZWYpO1xuICAgICAgICBzY2hlbWFQcm9taXNlLnRoZW4ocmVtb3ZlUHJvbWlzZSwgcmVtb3ZlUHJvbWlzZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzY2hlbWFQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHNjaCkge1xuICAgICAgICBpZiAoIWFkZGVkKHJlZikpIHtcbiAgICAgICAgICByZXR1cm4gbG9hZE1ldGFTY2hlbWFPZihzY2gpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFhZGRlZChyZWYpKSBzZWxmLmFkZFNjaGVtYShzY2gsIHJlZiwgdW5kZWZpbmVkLCBtZXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9jb21waWxlQXN5bmMoc2NoZW1hT2JqKTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiByZW1vdmVQcm9taXNlKCkge1xuICAgICAgICBkZWxldGUgc2VsZi5fbG9hZGluZ1NjaGVtYXNbcmVmXTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYWRkZWQocmVmKSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9yZWZzW3JlZl0gfHwgc2VsZi5fc2NoZW1hc1tyZWZdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSURFTlRJRklFUiA9IC9eW2Etel8kXVthLXowLTlfJC1dKiQvaTtcbnZhciBjdXN0b21SdWxlQ29kZSA9IHJlcXVpcmUoJy4vZG90anMvY3VzdG9tJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGQ6IGFkZEtleXdvcmQsXG4gIGdldDogZ2V0S2V5d29yZCxcbiAgcmVtb3ZlOiByZW1vdmVLZXl3b3JkXG59O1xuXG4vKipcbiAqIERlZmluZSBjdXN0b20ga2V5d29yZFxuICogQHRoaXMgIEFqdlxuICogQHBhcmFtIHtTdHJpbmd9IGtleXdvcmQgY3VzdG9tIGtleXdvcmQsIHNob3VsZCBiZSB1bmlxdWUgKGluY2x1ZGluZyBkaWZmZXJlbnQgZnJvbSBhbGwgc3RhbmRhcmQsIGN1c3RvbSBhbmQgbWFjcm8ga2V5d29yZHMpLlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmluaXRpb24ga2V5d29yZCBkZWZpbml0aW9uIG9iamVjdCB3aXRoIHByb3BlcnRpZXMgYHR5cGVgICh0eXBlKHMpIHdoaWNoIHRoZSBrZXl3b3JkIGFwcGxpZXMgdG8pLCBgdmFsaWRhdGVgIG9yIGBjb21waWxlYC5cbiAqIEByZXR1cm4ge0Fqdn0gdGhpcyBmb3IgbWV0aG9kIGNoYWluaW5nXG4gKi9cbmZ1bmN0aW9uIGFkZEtleXdvcmQoa2V5d29yZCwgZGVmaW5pdGlvbikge1xuICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gIC8qIGVzbGludCBuby1zaGFkb3c6IDAgKi9cbiAgdmFyIFJVTEVTID0gdGhpcy5SVUxFUztcblxuICBpZiAoUlVMRVMua2V5d29yZHNba2V5d29yZF0pXG4gICAgdGhyb3cgbmV3IEVycm9yKCdLZXl3b3JkICcgKyBrZXl3b3JkICsgJyBpcyBhbHJlYWR5IGRlZmluZWQnKTtcblxuICBpZiAoIUlERU5USUZJRVIudGVzdChrZXl3b3JkKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0tleXdvcmQgJyArIGtleXdvcmQgKyAnIGlzIG5vdCBhIHZhbGlkIGlkZW50aWZpZXInKTtcblxuICBpZiAoZGVmaW5pdGlvbikge1xuICAgIGlmIChkZWZpbml0aW9uLm1hY3JvICYmIGRlZmluaXRpb24udmFsaWQgIT09IHVuZGVmaW5lZClcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJ2YWxpZFwiIG9wdGlvbiBjYW5ub3QgYmUgdXNlZCB3aXRoIG1hY3JvIGtleXdvcmRzJyk7XG5cbiAgICB2YXIgZGF0YVR5cGUgPSBkZWZpbml0aW9uLnR5cGU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YVR5cGUpKSB7XG4gICAgICB2YXIgaSwgbGVuID0gZGF0YVR5cGUubGVuZ3RoO1xuICAgICAgZm9yIChpPTA7IGk8bGVuOyBpKyspIGNoZWNrRGF0YVR5cGUoZGF0YVR5cGVbaV0pO1xuICAgICAgZm9yIChpPTA7IGk8bGVuOyBpKyspIF9hZGRSdWxlKGtleXdvcmQsIGRhdGFUeXBlW2ldLCBkZWZpbml0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRhdGFUeXBlKSBjaGVja0RhdGFUeXBlKGRhdGFUeXBlKTtcbiAgICAgIF9hZGRSdWxlKGtleXdvcmQsIGRhdGFUeXBlLCBkZWZpbml0aW9uKTtcbiAgICB9XG5cbiAgICB2YXIgJGRhdGEgPSBkZWZpbml0aW9uLiRkYXRhID09PSB0cnVlICYmIHRoaXMuX29wdHMuJGRhdGE7XG4gICAgaWYgKCRkYXRhICYmICFkZWZpbml0aW9uLnZhbGlkYXRlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCckZGF0YSBzdXBwb3J0OiBcInZhbGlkYXRlXCIgZnVuY3Rpb24gaXMgbm90IGRlZmluZWQnKTtcblxuICAgIHZhciBtZXRhU2NoZW1hID0gZGVmaW5pdGlvbi5tZXRhU2NoZW1hO1xuICAgIGlmIChtZXRhU2NoZW1hKSB7XG4gICAgICBpZiAoJGRhdGEpIHtcbiAgICAgICAgbWV0YVNjaGVtYSA9IHtcbiAgICAgICAgICBhbnlPZjogW1xuICAgICAgICAgICAgbWV0YVNjaGVtYSxcbiAgICAgICAgICAgIHsgJyRyZWYnOiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vwb2JlcmV6a2luL2Fqdi9tYXN0ZXIvbGliL3JlZnMvZGF0YS5qc29uIycgfVxuICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGRlZmluaXRpb24udmFsaWRhdGVTY2hlbWEgPSB0aGlzLmNvbXBpbGUobWV0YVNjaGVtYSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgUlVMRVMua2V5d29yZHNba2V5d29yZF0gPSBSVUxFUy5hbGxba2V5d29yZF0gPSB0cnVlO1xuXG5cbiAgZnVuY3Rpb24gX2FkZFJ1bGUoa2V5d29yZCwgZGF0YVR5cGUsIGRlZmluaXRpb24pIHtcbiAgICB2YXIgcnVsZUdyb3VwO1xuICAgIGZvciAodmFyIGk9MDsgaTxSVUxFUy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJnID0gUlVMRVNbaV07XG4gICAgICBpZiAocmcudHlwZSA9PSBkYXRhVHlwZSkge1xuICAgICAgICBydWxlR3JvdXAgPSByZztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFydWxlR3JvdXApIHtcbiAgICAgIHJ1bGVHcm91cCA9IHsgdHlwZTogZGF0YVR5cGUsIHJ1bGVzOiBbXSB9O1xuICAgICAgUlVMRVMucHVzaChydWxlR3JvdXApO1xuICAgIH1cblxuICAgIHZhciBydWxlID0ge1xuICAgICAga2V5d29yZDoga2V5d29yZCxcbiAgICAgIGRlZmluaXRpb246IGRlZmluaXRpb24sXG4gICAgICBjdXN0b206IHRydWUsXG4gICAgICBjb2RlOiBjdXN0b21SdWxlQ29kZSxcbiAgICAgIGltcGxlbWVudHM6IGRlZmluaXRpb24uaW1wbGVtZW50c1xuICAgIH07XG4gICAgcnVsZUdyb3VwLnJ1bGVzLnB1c2gocnVsZSk7XG4gICAgUlVMRVMuY3VzdG9tW2tleXdvcmRdID0gcnVsZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY2hlY2tEYXRhVHlwZShkYXRhVHlwZSkge1xuICAgIGlmICghUlVMRVMudHlwZXNbZGF0YVR5cGVdKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZSAnICsgZGF0YVR5cGUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cblxuLyoqXG4gKiBHZXQga2V5d29yZFxuICogQHRoaXMgIEFqdlxuICogQHBhcmFtIHtTdHJpbmd9IGtleXdvcmQgcHJlLWRlZmluZWQgb3IgY3VzdG9tIGtleXdvcmQuXG4gKiBAcmV0dXJuIHtPYmplY3R8Qm9vbGVhbn0gY3VzdG9tIGtleXdvcmQgZGVmaW5pdGlvbiwgYHRydWVgIGlmIGl0IGlzIGEgcHJlZGVmaW5lZCBrZXl3b3JkLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gZ2V0S2V5d29yZChrZXl3b3JkKSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgdmFyIHJ1bGUgPSB0aGlzLlJVTEVTLmN1c3RvbVtrZXl3b3JkXTtcbiAgcmV0dXJuIHJ1bGUgPyBydWxlLmRlZmluaXRpb24gOiB0aGlzLlJVTEVTLmtleXdvcmRzW2tleXdvcmRdIHx8IGZhbHNlO1xufVxuXG5cbi8qKlxuICogUmVtb3ZlIGtleXdvcmRcbiAqIEB0aGlzICBBanZcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXl3b3JkIHByZS1kZWZpbmVkIG9yIGN1c3RvbSBrZXl3b3JkLlxuICogQHJldHVybiB7QWp2fSB0aGlzIGZvciBtZXRob2QgY2hhaW5pbmdcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlS2V5d29yZChrZXl3b3JkKSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgdmFyIFJVTEVTID0gdGhpcy5SVUxFUztcbiAgZGVsZXRlIFJVTEVTLmtleXdvcmRzW2tleXdvcmRdO1xuICBkZWxldGUgUlVMRVMuYWxsW2tleXdvcmRdO1xuICBkZWxldGUgUlVMRVMuY3VzdG9tW2tleXdvcmRdO1xuICBmb3IgKHZhciBpPTA7IGk8UlVMRVMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcnVsZXMgPSBSVUxFU1tpXS5ydWxlcztcbiAgICBmb3IgKHZhciBqPTA7IGo8cnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChydWxlc1tqXS5rZXl3b3JkID09IGtleXdvcmQpIHtcbiAgICAgICAgcnVsZXMuc3BsaWNlKGosIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX2N1c3RvbShpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGVycm9yS2V5d29yZDtcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsO1xuICB2YXIgJGVycnMgPSAnZXJyc19fJyArICRsdmw7XG4gIHZhciAkaXNEYXRhID0gaXQub3B0cy4kZGF0YSAmJiAkc2NoZW1hICYmICRzY2hlbWEuJGRhdGEsXG4gICAgJHNjaGVtYVZhbHVlO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIG91dCArPSAnIHZhciBzY2hlbWEnICsgKCRsdmwpICsgJyA9ICcgKyAoaXQudXRpbC5nZXREYXRhKCRzY2hlbWEuJGRhdGEsICRkYXRhTHZsLCBpdC5kYXRhUGF0aEFycikpICsgJzsgJztcbiAgICAkc2NoZW1hVmFsdWUgPSAnc2NoZW1hJyArICRsdmw7XG4gIH0gZWxzZSB7XG4gICAgJHNjaGVtYVZhbHVlID0gJHNjaGVtYTtcbiAgfVxuICB2YXIgJHJ1bGUgPSB0aGlzLFxuICAgICRkZWZpbml0aW9uID0gJ2RlZmluaXRpb24nICsgJGx2bCxcbiAgICAkckRlZiA9ICRydWxlLmRlZmluaXRpb24sXG4gICAgJGNsb3NpbmdCcmFjZXMgPSAnJztcbiAgdmFyICRjb21waWxlLCAkaW5saW5lLCAkbWFjcm8sICRydWxlVmFsaWRhdGUsICR2YWxpZGF0ZUNvZGU7XG4gIGlmICgkaXNEYXRhICYmICRyRGVmLiRkYXRhKSB7XG4gICAgJHZhbGlkYXRlQ29kZSA9ICdrZXl3b3JkVmFsaWRhdGUnICsgJGx2bDtcbiAgICB2YXIgJHZhbGlkYXRlU2NoZW1hID0gJHJEZWYudmFsaWRhdGVTY2hlbWE7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJGRlZmluaXRpb24pICsgJyA9IFJVTEVTLmN1c3RvbVtcXCcnICsgKCRrZXl3b3JkKSArICdcXCddLmRlZmluaXRpb247IHZhciAnICsgKCR2YWxpZGF0ZUNvZGUpICsgJyA9ICcgKyAoJGRlZmluaXRpb24pICsgJy52YWxpZGF0ZTsnO1xuICB9IGVsc2Uge1xuICAgICRydWxlVmFsaWRhdGUgPSBpdC51c2VDdXN0b21SdWxlKCRydWxlLCAkc2NoZW1hLCBpdC5zY2hlbWEsIGl0KTtcbiAgICBpZiAoISRydWxlVmFsaWRhdGUpIHJldHVybjtcbiAgICAkc2NoZW1hVmFsdWUgPSAndmFsaWRhdGUuc2NoZW1hJyArICRzY2hlbWFQYXRoO1xuICAgICR2YWxpZGF0ZUNvZGUgPSAkcnVsZVZhbGlkYXRlLmNvZGU7XG4gICAgJGNvbXBpbGUgPSAkckRlZi5jb21waWxlO1xuICAgICRpbmxpbmUgPSAkckRlZi5pbmxpbmU7XG4gICAgJG1hY3JvID0gJHJEZWYubWFjcm87XG4gIH1cbiAgdmFyICRydWxlRXJycyA9ICR2YWxpZGF0ZUNvZGUgKyAnLmVycm9ycycsXG4gICAgJGkgPSAnaScgKyAkbHZsLFxuICAgICRydWxlRXJyID0gJ3J1bGVFcnInICsgJGx2bCxcbiAgICAkYXN5bmNLZXl3b3JkID0gJHJEZWYuYXN5bmM7XG4gIGlmICgkYXN5bmNLZXl3b3JkICYmICFpdC5hc3luYykgdGhyb3cgbmV3IEVycm9yKCdhc3luYyBrZXl3b3JkIGluIHN5bmMgc2NoZW1hJyk7XG4gIGlmICghKCRpbmxpbmUgfHwgJG1hY3JvKSkge1xuICAgIG91dCArPSAnJyArICgkcnVsZUVycnMpICsgJyA9IG51bGw7JztcbiAgfVxuICBvdXQgKz0gJ3ZhciAnICsgKCRlcnJzKSArICcgPSBlcnJvcnM7dmFyICcgKyAoJHZhbGlkKSArICc7JztcbiAgaWYgKCRpc0RhdGEgJiYgJHJEZWYuJGRhdGEpIHtcbiAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgb3V0ICs9ICcgaWYgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgPT09IHVuZGVmaW5lZCkgeyAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgfSBlbHNlIHsgJztcbiAgICBpZiAoJHZhbGlkYXRlU2NoZW1hKSB7XG4gICAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgICBvdXQgKz0gJyAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkZGVmaW5pdGlvbikgKyAnLnZhbGlkYXRlU2NoZW1hKCcgKyAoJHNjaGVtYVZhbHVlKSArICcpOyBpZiAoJyArICgkdmFsaWQpICsgJykgeyAnO1xuICAgIH1cbiAgfVxuICBpZiAoJGlubGluZSkge1xuICAgIGlmICgkckRlZi5zdGF0ZW1lbnRzKSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCRydWxlVmFsaWRhdGUudmFsaWRhdGUpICsgJyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkcnVsZVZhbGlkYXRlLnZhbGlkYXRlKSArICc7ICc7XG4gICAgfVxuICB9IGVsc2UgaWYgKCRtYWNybykge1xuICAgIHZhciAkaXQgPSBpdC51dGlsLmNvcHkoaXQpO1xuICAgIHZhciAkY2xvc2luZ0JyYWNlcyA9ICcnO1xuICAgICRpdC5sZXZlbCsrO1xuICAgIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgICAkaXQuc2NoZW1hID0gJHJ1bGVWYWxpZGF0ZS52YWxpZGF0ZTtcbiAgICAkaXQuc2NoZW1hUGF0aCA9ICcnO1xuICAgIHZhciAkd2FzQ29tcG9zaXRlID0gaXQuY29tcG9zaXRlUnVsZTtcbiAgICBpdC5jb21wb3NpdGVSdWxlID0gJGl0LmNvbXBvc2l0ZVJ1bGUgPSB0cnVlO1xuICAgIHZhciAkY29kZSA9IGl0LnZhbGlkYXRlKCRpdCkucmVwbGFjZSgvdmFsaWRhdGVcXC5zY2hlbWEvZywgJHZhbGlkYXRlQ29kZSk7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gJHdhc0NvbXBvc2l0ZTtcbiAgICBvdXQgKz0gJyAnICsgKCRjb2RlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgb3V0ID0gJyc7XG4gICAgb3V0ICs9ICcgICcgKyAoJHZhbGlkYXRlQ29kZSkgKyAnLmNhbGwoICc7XG4gICAgaWYgKGl0Lm9wdHMucGFzc0NvbnRleHQpIHtcbiAgICAgIG91dCArPSAndGhpcyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnc2VsZic7XG4gICAgfVxuICAgIGlmICgkY29tcGlsZSB8fCAkckRlZi5zY2hlbWEgPT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyAsICcgKyAoJHNjaGVtYVZhbHVlKSArICcgLCAnICsgKCRkYXRhKSArICcgLCB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyAsIChkYXRhUGF0aCB8fCBcXCdcXCcpJztcbiAgICBpZiAoaXQuZXJyb3JQYXRoICE9ICdcIlwiJykge1xuICAgICAgb3V0ICs9ICcgKyAnICsgKGl0LmVycm9yUGF0aCk7XG4gICAgfVxuICAgIHZhciAkcGFyZW50RGF0YSA9ICRkYXRhTHZsID8gJ2RhdGEnICsgKCgkZGF0YUx2bCAtIDEpIHx8ICcnKSA6ICdwYXJlbnREYXRhJyxcbiAgICAgICRwYXJlbnREYXRhUHJvcGVydHkgPSAkZGF0YUx2bCA/IGl0LmRhdGFQYXRoQXJyWyRkYXRhTHZsXSA6ICdwYXJlbnREYXRhUHJvcGVydHknO1xuICAgIG91dCArPSAnICwgJyArICgkcGFyZW50RGF0YSkgKyAnICwgJyArICgkcGFyZW50RGF0YVByb3BlcnR5KSArICcgLCByb290RGF0YSApICAnO1xuICAgIHZhciBkZWZfY2FsbFJ1bGVWYWxpZGF0ZSA9IG91dDtcbiAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgIGlmICgkckRlZi5lcnJvcnMgPT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCR2YWxpZCkgKyAnID0gJztcbiAgICAgIGlmICgkYXN5bmNLZXl3b3JkKSB7XG4gICAgICAgIG91dCArPSAnYXdhaXQgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnJyArIChkZWZfY2FsbFJ1bGVWYWxpZGF0ZSkgKyAnOyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoJGFzeW5jS2V5d29yZCkge1xuICAgICAgICAkcnVsZUVycnMgPSAnY3VzdG9tRXJyb3JzJyArICRsdmw7XG4gICAgICAgIG91dCArPSAnIHZhciAnICsgKCRydWxlRXJycykgKyAnID0gbnVsbDsgdHJ5IHsgJyArICgkdmFsaWQpICsgJyA9IGF3YWl0ICcgKyAoZGVmX2NhbGxSdWxlVmFsaWRhdGUpICsgJzsgfSBjYXRjaCAoZSkgeyAnICsgKCR2YWxpZCkgKyAnID0gZmFsc2U7IGlmIChlIGluc3RhbmNlb2YgVmFsaWRhdGlvbkVycm9yKSAnICsgKCRydWxlRXJycykgKyAnID0gZS5lcnJvcnM7IGVsc2UgdGhyb3cgZTsgfSAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgJyArICgkcnVsZUVycnMpICsgJyA9IG51bGw7ICcgKyAoJHZhbGlkKSArICcgPSAnICsgKGRlZl9jYWxsUnVsZVZhbGlkYXRlKSArICc7ICc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICgkckRlZi5tb2RpZnlpbmcpIHtcbiAgICBvdXQgKz0gJyBpZiAoJyArICgkcGFyZW50RGF0YSkgKyAnKSAnICsgKCRkYXRhKSArICcgPSAnICsgKCRwYXJlbnREYXRhKSArICdbJyArICgkcGFyZW50RGF0YVByb3BlcnR5KSArICddOyc7XG4gIH1cbiAgb3V0ICs9ICcnICsgKCRjbG9zaW5nQnJhY2VzKTtcbiAgaWYgKCRyRGVmLnZhbGlkKSB7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgIG91dCArPSAnIGlmICh0cnVlKSB7ICc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIGlmICggJztcbiAgICBpZiAoJHJEZWYudmFsaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3V0ICs9ICcgISc7XG4gICAgICBpZiAoJG1hY3JvKSB7XG4gICAgICAgIG91dCArPSAnJyArICgkbmV4dFZhbGlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnJyArICgkdmFsaWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCEkckRlZi52YWxpZCkgKyAnICc7XG4gICAgfVxuICAgIG91dCArPSAnKSB7ICc7XG4gICAgJGVycm9yS2V5d29yZCA9ICRydWxlLmtleXdvcmQ7XG4gICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICAgIG91dCA9ICcnO1xuICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ2N1c3RvbScpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsga2V5d29yZDogXFwnJyArICgkcnVsZS5rZXl3b3JkKSArICdcXCcgfSAnO1xuICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIHBhc3MgXCInICsgKCRydWxlLmtleXdvcmQpICsgJ1wiIGtleXdvcmQgdmFsaWRhdGlvblxcJyAnO1xuICAgICAgfVxuICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB7fSAnO1xuICAgIH1cbiAgICB2YXIgX19lcnIgPSBvdXQ7XG4gICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgfVxuICAgIHZhciBkZWZfY3VzdG9tRXJyb3IgPSBvdXQ7XG4gICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICBpZiAoJGlubGluZSkge1xuICAgICAgaWYgKCRyRGVmLmVycm9ycykge1xuICAgICAgICBpZiAoJHJEZWYuZXJyb3JzICE9ICdmdWxsJykge1xuICAgICAgICAgIG91dCArPSAnICBmb3IgKHZhciAnICsgKCRpKSArICc9JyArICgkZXJycykgKyAnOyAnICsgKCRpKSArICc8ZXJyb3JzOyAnICsgKCRpKSArICcrKykgeyB2YXIgJyArICgkcnVsZUVycikgKyAnID0gdkVycm9yc1snICsgKCRpKSArICddOyBpZiAoJyArICgkcnVsZUVycikgKyAnLmRhdGFQYXRoID09PSB1bmRlZmluZWQpICcgKyAoJHJ1bGVFcnIpICsgJy5kYXRhUGF0aCA9IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJzsgaWYgKCcgKyAoJHJ1bGVFcnIpICsgJy5zY2hlbWFQYXRoID09PSB1bmRlZmluZWQpIHsgJyArICgkcnVsZUVycikgKyAnLnNjaGVtYVBhdGggPSBcIicgKyAoJGVyclNjaGVtYVBhdGgpICsgJ1wiOyB9ICc7XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgJyArICgkcnVsZUVycikgKyAnLnNjaGVtYSA9ICcgKyAoJHNjaGVtYVZhbHVlKSArICc7ICcgKyAoJHJ1bGVFcnIpICsgJy5kYXRhID0gJyArICgkZGF0YSkgKyAnOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgkckRlZi5lcnJvcnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgJyArIChkZWZfY3VzdG9tRXJyb3IpICsgJyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCRlcnJzKSArICcgPT0gZXJyb3JzKSB7ICcgKyAoZGVmX2N1c3RvbUVycm9yKSArICcgfSBlbHNlIHsgIGZvciAodmFyICcgKyAoJGkpICsgJz0nICsgKCRlcnJzKSArICc7ICcgKyAoJGkpICsgJzxlcnJvcnM7ICcgKyAoJGkpICsgJysrKSB7IHZhciAnICsgKCRydWxlRXJyKSArICcgPSB2RXJyb3JzWycgKyAoJGkpICsgJ107IGlmICgnICsgKCRydWxlRXJyKSArICcuZGF0YVBhdGggPT09IHVuZGVmaW5lZCkgJyArICgkcnVsZUVycikgKyAnLmRhdGFQYXRoID0gKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnOyBpZiAoJyArICgkcnVsZUVycikgKyAnLnNjaGVtYVBhdGggPT09IHVuZGVmaW5lZCkgeyAnICsgKCRydWxlRXJyKSArICcuc2NoZW1hUGF0aCA9IFwiJyArICgkZXJyU2NoZW1hUGF0aCkgKyAnXCI7IH0gJztcbiAgICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKCRydWxlRXJyKSArICcuc2NoZW1hID0gJyArICgkc2NoZW1hVmFsdWUpICsgJzsgJyArICgkcnVsZUVycikgKyAnLmRhdGEgPSAnICsgKCRkYXRhKSArICc7ICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnIH0gfSAnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgkbWFjcm8pIHtcbiAgICAgIG91dCArPSAnICAgdmFyIGVyciA9ICAgJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgkZXJyb3JLZXl3b3JkIHx8ICdjdXN0b20nKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGtleXdvcmQ6IFxcJycgKyAoJHJ1bGUua2V5d29yZCkgKyAnXFwnIH0gJztcbiAgICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgcGFzcyBcIicgKyAoJHJ1bGUua2V5d29yZCkgKyAnXCIga2V5d29yZCB2YWxpZGF0aW9uXFwnICc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcih2RXJyb3JzKTsgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSB2RXJyb3JzOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCRyRGVmLmVycm9ycyA9PT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgJyArIChkZWZfY3VzdG9tRXJyb3IpICsgJyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgaWYgKEFycmF5LmlzQXJyYXkoJyArICgkcnVsZUVycnMpICsgJykpIHsgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSAnICsgKCRydWxlRXJycykgKyAnOyBlbHNlIHZFcnJvcnMgPSB2RXJyb3JzLmNvbmNhdCgnICsgKCRydWxlRXJycykgKyAnKTsgZXJyb3JzID0gdkVycm9ycy5sZW5ndGg7ICBmb3IgKHZhciAnICsgKCRpKSArICc9JyArICgkZXJycykgKyAnOyAnICsgKCRpKSArICc8ZXJyb3JzOyAnICsgKCRpKSArICcrKykgeyB2YXIgJyArICgkcnVsZUVycikgKyAnID0gdkVycm9yc1snICsgKCRpKSArICddOyBpZiAoJyArICgkcnVsZUVycikgKyAnLmRhdGFQYXRoID09PSB1bmRlZmluZWQpICcgKyAoJHJ1bGVFcnIpICsgJy5kYXRhUGF0aCA9IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJzsgICcgKyAoJHJ1bGVFcnIpICsgJy5zY2hlbWFQYXRoID0gXCInICsgKCRlcnJTY2hlbWFQYXRoKSArICdcIjsgICc7XG4gICAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgICBvdXQgKz0gJyAnICsgKCRydWxlRXJyKSArICcuc2NoZW1hID0gJyArICgkc2NoZW1hVmFsdWUpICsgJzsgJyArICgkcnVsZUVycikgKyAnLmRhdGEgPSAnICsgKCRkYXRhKSArICc7ICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgfSB9IGVsc2UgeyAnICsgKGRlZl9jdXN0b21FcnJvcikgKyAnIH0gJztcbiAgICAgIH1cbiAgICB9XG4gICAgb3V0ICs9ICcgfSAnO1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsImZ1bmN0aW9uIEhBUkVycm9yIChlcnJvcnMpIHtcbiAgdmFyIG1lc3NhZ2UgPSAndmFsaWRhdGlvbiBmYWlsZWQnXG5cbiAgdGhpcy5uYW1lID0gJ0hBUkVycm9yJ1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gIHRoaXMuZXJyb3JzID0gZXJyb3JzXG5cbiAgaWYgKHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IobWVzc2FnZSkpLnN0YWNrXG4gIH1cbn1cblxuSEFSRXJyb3IucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlXG5cbm1vZHVsZS5leHBvcnRzID0gSEFSRXJyb3JcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWZ0ZXJSZXF1ZXN0OiByZXF1aXJlKCcuL2FmdGVyUmVxdWVzdC5qc29uJyksXG4gIGJlZm9yZVJlcXVlc3Q6IHJlcXVpcmUoJy4vYmVmb3JlUmVxdWVzdC5qc29uJyksXG4gIGJyb3dzZXI6IHJlcXVpcmUoJy4vYnJvd3Nlci5qc29uJyksXG4gIGNhY2hlOiByZXF1aXJlKCcuL2NhY2hlLmpzb24nKSxcbiAgY29udGVudDogcmVxdWlyZSgnLi9jb250ZW50Lmpzb24nKSxcbiAgY29va2llOiByZXF1aXJlKCcuL2Nvb2tpZS5qc29uJyksXG4gIGNyZWF0b3I6IHJlcXVpcmUoJy4vY3JlYXRvci5qc29uJyksXG4gIGVudHJ5OiByZXF1aXJlKCcuL2VudHJ5Lmpzb24nKSxcbiAgaGFyOiByZXF1aXJlKCcuL2hhci5qc29uJyksXG4gIGhlYWRlcjogcmVxdWlyZSgnLi9oZWFkZXIuanNvbicpLFxuICBsb2c6IHJlcXVpcmUoJy4vbG9nLmpzb24nKSxcbiAgcGFnZTogcmVxdWlyZSgnLi9wYWdlLmpzb24nKSxcbiAgcGFnZVRpbWluZ3M6IHJlcXVpcmUoJy4vcGFnZVRpbWluZ3MuanNvbicpLFxuICBwb3N0RGF0YTogcmVxdWlyZSgnLi9wb3N0RGF0YS5qc29uJyksXG4gIHF1ZXJ5OiByZXF1aXJlKCcuL3F1ZXJ5Lmpzb24nKSxcbiAgcmVxdWVzdDogcmVxdWlyZSgnLi9yZXF1ZXN0Lmpzb24nKSxcbiAgcmVzcG9uc2U6IHJlcXVpcmUoJy4vcmVzcG9uc2UuanNvbicpLFxuICB0aW1pbmdzOiByZXF1aXJlKCcuL3RpbWluZ3MuanNvbicpXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIGNhc2VsZXNzID0gcmVxdWlyZSgnY2FzZWxlc3MnKVxudmFyIHV1aWQgPSByZXF1aXJlKCd1dWlkL3Y0JylcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJylcblxudmFyIG1kNSA9IGhlbHBlcnMubWQ1XG52YXIgdG9CYXNlNjQgPSBoZWxwZXJzLnRvQmFzZTY0XG5cbmZ1bmN0aW9uIEF1dGggKHJlcXVlc3QpIHtcbiAgLy8gZGVmaW5lIGFsbCBwdWJsaWMgcHJvcGVydGllcyBoZXJlXG4gIHRoaXMucmVxdWVzdCA9IHJlcXVlc3RcbiAgdGhpcy5oYXNBdXRoID0gZmFsc2VcbiAgdGhpcy5zZW50QXV0aCA9IGZhbHNlXG4gIHRoaXMuYmVhcmVyVG9rZW4gPSBudWxsXG4gIHRoaXMudXNlciA9IG51bGxcbiAgdGhpcy5wYXNzID0gbnVsbFxufVxuXG5BdXRoLnByb3RvdHlwZS5iYXNpYyA9IGZ1bmN0aW9uICh1c2VyLCBwYXNzLCBzZW5kSW1tZWRpYXRlbHkpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICh0eXBlb2YgdXNlciAhPT0gJ3N0cmluZycgfHwgKHBhc3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcGFzcyAhPT0gJ3N0cmluZycpKSB7XG4gICAgc2VsZi5yZXF1ZXN0LmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdhdXRoKCkgcmVjZWl2ZWQgaW52YWxpZCB1c2VyIG9yIHBhc3N3b3JkJykpXG4gIH1cbiAgc2VsZi51c2VyID0gdXNlclxuICBzZWxmLnBhc3MgPSBwYXNzXG4gIHNlbGYuaGFzQXV0aCA9IHRydWVcbiAgdmFyIGhlYWRlciA9IHVzZXIgKyAnOicgKyAocGFzcyB8fCAnJylcbiAgaWYgKHNlbmRJbW1lZGlhdGVseSB8fCB0eXBlb2Ygc2VuZEltbWVkaWF0ZWx5ID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBhdXRoSGVhZGVyID0gJ0Jhc2ljICcgKyB0b0Jhc2U2NChoZWFkZXIpXG4gICAgc2VsZi5zZW50QXV0aCA9IHRydWVcbiAgICByZXR1cm4gYXV0aEhlYWRlclxuICB9XG59XG5cbkF1dGgucHJvdG90eXBlLmJlYXJlciA9IGZ1bmN0aW9uIChiZWFyZXIsIHNlbmRJbW1lZGlhdGVseSkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgc2VsZi5iZWFyZXJUb2tlbiA9IGJlYXJlclxuICBzZWxmLmhhc0F1dGggPSB0cnVlXG4gIGlmIChzZW5kSW1tZWRpYXRlbHkgfHwgdHlwZW9mIHNlbmRJbW1lZGlhdGVseSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGJlYXJlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYmVhcmVyID0gYmVhcmVyKClcbiAgICB9XG4gICAgdmFyIGF1dGhIZWFkZXIgPSAnQmVhcmVyICcgKyAoYmVhcmVyIHx8ICcnKVxuICAgIHNlbGYuc2VudEF1dGggPSB0cnVlXG4gICAgcmV0dXJuIGF1dGhIZWFkZXJcbiAgfVxufVxuXG5BdXRoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAobWV0aG9kLCBwYXRoLCBhdXRoSGVhZGVyKSB7XG4gIC8vIFRPRE86IE1vcmUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgUkZDIDI2MTcuXG4gIC8vICAgLSBoYW5kbGUgY2hhbGxlbmdlLmRvbWFpblxuICAvLyAgIC0gc3VwcG9ydCBxb3A9XCJhdXRoLWludFwiIG9ubHlcbiAgLy8gICAtIGhhbmRsZSBBdXRoZW50aWNhdGlvbi1JbmZvIChub3QgbmVjZXNzYXJpbHk/KVxuICAvLyAgIC0gY2hlY2sgY2hhbGxlbmdlLnN0YWxlIChub3QgbmVjZXNzYXJpbHk/KVxuICAvLyAgIC0gaW5jcmVhc2UgbmMgKG5vdCBuZWNlc3NhcmlseT8pXG4gIC8vIEZvciByZWZlcmVuY2U6XG4gIC8vIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI2MTcjc2VjdGlvbi0zXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iYWdkZXIvY3VybC9ibG9iL21hc3Rlci9saWIvaHR0cF9kaWdlc3QuY1xuXG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHZhciBjaGFsbGVuZ2UgPSB7fVxuICB2YXIgcmUgPSAvKFthLXowLTlfLV0rKT0oPzpcIihbXlwiXSspXCJ8KFthLXowLTlfLV0rKSkvZ2lcbiAgZm9yICg7Oykge1xuICAgIHZhciBtYXRjaCA9IHJlLmV4ZWMoYXV0aEhlYWRlcilcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjaGFsbGVuZ2VbbWF0Y2hbMV1dID0gbWF0Y2hbMl0gfHwgbWF0Y2hbM11cbiAgfVxuXG4gIC8qKlxuICAgKiBSRkMgMjYxNzogaGFuZGxlIGJvdGggTUQ1IGFuZCBNRDUtc2VzcyBhbGdvcml0aG1zLlxuICAgKlxuICAgKiBJZiB0aGUgYWxnb3JpdGhtIGRpcmVjdGl2ZSdzIHZhbHVlIGlzIFwiTUQ1XCIgb3IgdW5zcGVjaWZpZWQsIHRoZW4gSEExIGlzXG4gICAqICAgSEExPU1ENSh1c2VybmFtZTpyZWFsbTpwYXNzd29yZClcbiAgICogSWYgdGhlIGFsZ29yaXRobSBkaXJlY3RpdmUncyB2YWx1ZSBpcyBcIk1ENS1zZXNzXCIsIHRoZW4gSEExIGlzXG4gICAqICAgSEExPU1ENShNRDUodXNlcm5hbWU6cmVhbG06cGFzc3dvcmQpOm5vbmNlOmNub25jZSlcbiAgICovXG4gIHZhciBoYTFDb21wdXRlID0gZnVuY3Rpb24gKGFsZ29yaXRobSwgdXNlciwgcmVhbG0sIHBhc3MsIG5vbmNlLCBjbm9uY2UpIHtcbiAgICB2YXIgaGExID0gbWQ1KHVzZXIgKyAnOicgKyByZWFsbSArICc6JyArIHBhc3MpXG4gICAgaWYgKGFsZ29yaXRobSAmJiBhbGdvcml0aG0udG9Mb3dlckNhc2UoKSA9PT0gJ21kNS1zZXNzJykge1xuICAgICAgcmV0dXJuIG1kNShoYTEgKyAnOicgKyBub25jZSArICc6JyArIGNub25jZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhhMVxuICAgIH1cbiAgfVxuXG4gIHZhciBxb3AgPSAvKF58LClcXHMqYXV0aFxccyooJHwsKS8udGVzdChjaGFsbGVuZ2UucW9wKSAmJiAnYXV0aCdcbiAgdmFyIG5jID0gcW9wICYmICcwMDAwMDAwMSdcbiAgdmFyIGNub25jZSA9IHFvcCAmJiB1dWlkKCkucmVwbGFjZSgvLS9nLCAnJylcbiAgdmFyIGhhMSA9IGhhMUNvbXB1dGUoY2hhbGxlbmdlLmFsZ29yaXRobSwgc2VsZi51c2VyLCBjaGFsbGVuZ2UucmVhbG0sIHNlbGYucGFzcywgY2hhbGxlbmdlLm5vbmNlLCBjbm9uY2UpXG4gIHZhciBoYTIgPSBtZDUobWV0aG9kICsgJzonICsgcGF0aClcbiAgdmFyIGRpZ2VzdFJlc3BvbnNlID0gcW9wXG4gICAgPyBtZDUoaGExICsgJzonICsgY2hhbGxlbmdlLm5vbmNlICsgJzonICsgbmMgKyAnOicgKyBjbm9uY2UgKyAnOicgKyBxb3AgKyAnOicgKyBoYTIpXG4gICAgOiBtZDUoaGExICsgJzonICsgY2hhbGxlbmdlLm5vbmNlICsgJzonICsgaGEyKVxuICB2YXIgYXV0aFZhbHVlcyA9IHtcbiAgICB1c2VybmFtZTogc2VsZi51c2VyLFxuICAgIHJlYWxtOiBjaGFsbGVuZ2UucmVhbG0sXG4gICAgbm9uY2U6IGNoYWxsZW5nZS5ub25jZSxcbiAgICB1cmk6IHBhdGgsXG4gICAgcW9wOiBxb3AsXG4gICAgcmVzcG9uc2U6IGRpZ2VzdFJlc3BvbnNlLFxuICAgIG5jOiBuYyxcbiAgICBjbm9uY2U6IGNub25jZSxcbiAgICBhbGdvcml0aG06IGNoYWxsZW5nZS5hbGdvcml0aG0sXG4gICAgb3BhcXVlOiBjaGFsbGVuZ2Uub3BhcXVlXG4gIH1cblxuICBhdXRoSGVhZGVyID0gW11cbiAgZm9yICh2YXIgayBpbiBhdXRoVmFsdWVzKSB7XG4gICAgaWYgKGF1dGhWYWx1ZXNba10pIHtcbiAgICAgIGlmIChrID09PSAncW9wJyB8fCBrID09PSAnbmMnIHx8IGsgPT09ICdhbGdvcml0aG0nKSB7XG4gICAgICAgIGF1dGhIZWFkZXIucHVzaChrICsgJz0nICsgYXV0aFZhbHVlc1trXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF1dGhIZWFkZXIucHVzaChrICsgJz1cIicgKyBhdXRoVmFsdWVzW2tdICsgJ1wiJylcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYXV0aEhlYWRlciA9ICdEaWdlc3QgJyArIGF1dGhIZWFkZXIuam9pbignLCAnKVxuICBzZWxmLnNlbnRBdXRoID0gdHJ1ZVxuICByZXR1cm4gYXV0aEhlYWRlclxufVxuXG5BdXRoLnByb3RvdHlwZS5vblJlcXVlc3QgPSBmdW5jdGlvbiAodXNlciwgcGFzcywgc2VuZEltbWVkaWF0ZWx5LCBiZWFyZXIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciByZXF1ZXN0ID0gc2VsZi5yZXF1ZXN0XG5cbiAgdmFyIGF1dGhIZWFkZXJcbiAgaWYgKGJlYXJlciA9PT0gdW5kZWZpbmVkICYmIHVzZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHNlbGYucmVxdWVzdC5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignbm8gYXV0aCBtZWNoYW5pc20gZGVmaW5lZCcpKVxuICB9IGVsc2UgaWYgKGJlYXJlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgYXV0aEhlYWRlciA9IHNlbGYuYmVhcmVyKGJlYXJlciwgc2VuZEltbWVkaWF0ZWx5KVxuICB9IGVsc2Uge1xuICAgIGF1dGhIZWFkZXIgPSBzZWxmLmJhc2ljKHVzZXIsIHBhc3MsIHNlbmRJbW1lZGlhdGVseSlcbiAgfVxuICBpZiAoYXV0aEhlYWRlcikge1xuICAgIHJlcXVlc3Quc2V0SGVhZGVyKCdhdXRob3JpemF0aW9uJywgYXV0aEhlYWRlcilcbiAgfVxufVxuXG5BdXRoLnByb3RvdHlwZS5vblJlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgcmVxdWVzdCA9IHNlbGYucmVxdWVzdFxuXG4gIGlmICghc2VsZi5oYXNBdXRoIHx8IHNlbGYuc2VudEF1dGgpIHsgcmV0dXJuIG51bGwgfVxuXG4gIHZhciBjID0gY2FzZWxlc3MocmVzcG9uc2UuaGVhZGVycylcblxuICB2YXIgYXV0aEhlYWRlciA9IGMuZ2V0KCd3d3ctYXV0aGVudGljYXRlJylcbiAgdmFyIGF1dGhWZXJiID0gYXV0aEhlYWRlciAmJiBhdXRoSGVhZGVyLnNwbGl0KCcgJylbMF0udG9Mb3dlckNhc2UoKVxuICByZXF1ZXN0LmRlYnVnKCdyZWF1dGgnLCBhdXRoVmVyYilcblxuICBzd2l0Y2ggKGF1dGhWZXJiKSB7XG4gICAgY2FzZSAnYmFzaWMnOlxuICAgICAgcmV0dXJuIHNlbGYuYmFzaWMoc2VsZi51c2VyLCBzZWxmLnBhc3MsIHRydWUpXG5cbiAgICBjYXNlICdiZWFyZXInOlxuICAgICAgcmV0dXJuIHNlbGYuYmVhcmVyKHNlbGYuYmVhcmVyVG9rZW4sIHRydWUpXG5cbiAgICBjYXNlICdkaWdlc3QnOlxuICAgICAgcmV0dXJuIHNlbGYuZGlnZXN0KHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnBhdGgsIGF1dGhIZWFkZXIpXG4gIH1cbn1cblxuZXhwb3J0cy5BdXRoID0gQXV0aFxuIiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gIEluIG5vZGUuanNcbi8vIHRoaXMgaXMgcHJldHR5IHN0cmFpZ2h0LWZvcndhcmQgLSB3ZSB1c2UgdGhlIGNyeXB0byBBUEkuXG5cbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub2RlUk5HKCkge1xuICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KTtcbn07XG4iLCIvKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIGJ0aCA9IGJ5dGVUb0hleDtcbiAgLy8gam9pbiB1c2VkIHRvIGZpeCBtZW1vcnkgaXNzdWUgY2F1c2VkIGJ5IGNvbmNhdGVuYXRpb246IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMxNzUjYzRcbiAgcmV0dXJuIChbYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXV0pLmpvaW4oJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ5dGVzVG9VdWlkO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxudmFyIHFzID0gcmVxdWlyZSgncXMnKVxudmFyIGNhc2VsZXNzID0gcmVxdWlyZSgnY2FzZWxlc3MnKVxudmFyIHV1aWQgPSByZXF1aXJlKCd1dWlkL3Y0JylcbnZhciBvYXV0aCA9IHJlcXVpcmUoJ29hdXRoLXNpZ24nKVxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gT0F1dGggKHJlcXVlc3QpIHtcbiAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdFxuICB0aGlzLnBhcmFtcyA9IG51bGxcbn1cblxuT0F1dGgucHJvdG90eXBlLmJ1aWxkUGFyYW1zID0gZnVuY3Rpb24gKF9vYXV0aCwgdXJpLCBtZXRob2QsIHF1ZXJ5LCBmb3JtLCBxc0xpYikge1xuICB2YXIgb2EgPSB7fVxuICBmb3IgKHZhciBpIGluIF9vYXV0aCkge1xuICAgIG9hWydvYXV0aF8nICsgaV0gPSBfb2F1dGhbaV1cbiAgfVxuICBpZiAoIW9hLm9hdXRoX3ZlcnNpb24pIHtcbiAgICBvYS5vYXV0aF92ZXJzaW9uID0gJzEuMCdcbiAgfVxuICBpZiAoIW9hLm9hdXRoX3RpbWVzdGFtcCkge1xuICAgIG9hLm9hdXRoX3RpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApLnRvU3RyaW5nKClcbiAgfVxuICBpZiAoIW9hLm9hdXRoX25vbmNlKSB7XG4gICAgb2Eub2F1dGhfbm9uY2UgPSB1dWlkKCkucmVwbGFjZSgvLS9nLCAnJylcbiAgfVxuICBpZiAoIW9hLm9hdXRoX3NpZ25hdHVyZV9tZXRob2QpIHtcbiAgICBvYS5vYXV0aF9zaWduYXR1cmVfbWV0aG9kID0gJ0hNQUMtU0hBMSdcbiAgfVxuXG4gIHZhciBjb25zdW1lcl9zZWNyZXRfb3JfcHJpdmF0ZV9rZXkgPSBvYS5vYXV0aF9jb25zdW1lcl9zZWNyZXQgfHwgb2Eub2F1dGhfcHJpdmF0ZV9rZXkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgZGVsZXRlIG9hLm9hdXRoX2NvbnN1bWVyX3NlY3JldFxuICBkZWxldGUgb2Eub2F1dGhfcHJpdmF0ZV9rZXlcblxuICB2YXIgdG9rZW5fc2VjcmV0ID0gb2Eub2F1dGhfdG9rZW5fc2VjcmV0IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gIGRlbGV0ZSBvYS5vYXV0aF90b2tlbl9zZWNyZXRcblxuICB2YXIgcmVhbG0gPSBvYS5vYXV0aF9yZWFsbVxuICBkZWxldGUgb2Eub2F1dGhfcmVhbG1cbiAgZGVsZXRlIG9hLm9hdXRoX3RyYW5zcG9ydF9tZXRob2RcblxuICB2YXIgYmFzZXVybCA9IHVyaS5wcm90b2NvbCArICcvLycgKyB1cmkuaG9zdCArIHVyaS5wYXRobmFtZVxuICB2YXIgcGFyYW1zID0gcXNMaWIucGFyc2UoW10uY29uY2F0KHF1ZXJ5LCBmb3JtLCBxc0xpYi5zdHJpbmdpZnkob2EpKS5qb2luKCcmJykpXG5cbiAgb2Eub2F1dGhfc2lnbmF0dXJlID0gb2F1dGguc2lnbihcbiAgICBvYS5vYXV0aF9zaWduYXR1cmVfbWV0aG9kLFxuICAgIG1ldGhvZCxcbiAgICBiYXNldXJsLFxuICAgIHBhcmFtcyxcbiAgICBjb25zdW1lcl9zZWNyZXRfb3JfcHJpdmF0ZV9rZXksIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gICAgdG9rZW5fc2VjcmV0IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gIClcblxuICBpZiAocmVhbG0pIHtcbiAgICBvYS5yZWFsbSA9IHJlYWxtXG4gIH1cblxuICByZXR1cm4gb2Fcbn1cblxuT0F1dGgucHJvdG90eXBlLmJ1aWxkQm9keUhhc2ggPSBmdW5jdGlvbiAoX29hdXRoLCBib2R5KSB7XG4gIGlmIChbJ0hNQUMtU0hBMScsICdSU0EtU0hBMSddLmluZGV4T2YoX29hdXRoLnNpZ25hdHVyZV9tZXRob2QgfHwgJ0hNQUMtU0hBMScpIDwgMCkge1xuICAgIHRoaXMucmVxdWVzdC5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignb2F1dGg6ICcgKyBfb2F1dGguc2lnbmF0dXJlX21ldGhvZCArXG4gICAgICAnIHNpZ25hdHVyZV9tZXRob2Qgbm90IHN1cHBvcnRlZCB3aXRoIGJvZHlfaGFzaCBzaWduaW5nLicpKVxuICB9XG5cbiAgdmFyIHNoYXN1bSA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJylcbiAgc2hhc3VtLnVwZGF0ZShib2R5IHx8ICcnKVxuICB2YXIgc2hhMSA9IHNoYXN1bS5kaWdlc3QoJ2hleCcpXG5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNoYTEsICdoZXgnKS50b1N0cmluZygnYmFzZTY0Jylcbn1cblxuT0F1dGgucHJvdG90eXBlLmNvbmNhdFBhcmFtcyA9IGZ1bmN0aW9uIChvYSwgc2VwLCB3cmFwKSB7XG4gIHdyYXAgPSB3cmFwIHx8ICcnXG5cbiAgdmFyIHBhcmFtcyA9IE9iamVjdC5rZXlzKG9hKS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaSAhPT0gJ3JlYWxtJyAmJiBpICE9PSAnb2F1dGhfc2lnbmF0dXJlJ1xuICB9KS5zb3J0KClcblxuICBpZiAob2EucmVhbG0pIHtcbiAgICBwYXJhbXMuc3BsaWNlKDAsIDAsICdyZWFsbScpXG4gIH1cbiAgcGFyYW1zLnB1c2goJ29hdXRoX3NpZ25hdHVyZScpXG5cbiAgcmV0dXJuIHBhcmFtcy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaSArICc9JyArIHdyYXAgKyBvYXV0aC5yZmMzOTg2KG9hW2ldKSArIHdyYXBcbiAgfSkuam9pbihzZXApXG59XG5cbk9BdXRoLnByb3RvdHlwZS5vblJlcXVlc3QgPSBmdW5jdGlvbiAoX29hdXRoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBzZWxmLnBhcmFtcyA9IF9vYXV0aFxuXG4gIHZhciB1cmkgPSBzZWxmLnJlcXVlc3QudXJpIHx8IHt9XG4gIHZhciBtZXRob2QgPSBzZWxmLnJlcXVlc3QubWV0aG9kIHx8ICcnXG4gIHZhciBoZWFkZXJzID0gY2FzZWxlc3Moc2VsZi5yZXF1ZXN0LmhlYWRlcnMpXG4gIHZhciBib2R5ID0gc2VsZi5yZXF1ZXN0LmJvZHkgfHwgJydcbiAgdmFyIHFzTGliID0gc2VsZi5yZXF1ZXN0LnFzTGliIHx8IHFzXG5cbiAgdmFyIGZvcm1cbiAgdmFyIHF1ZXJ5XG4gIHZhciBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSB8fCAnJ1xuICB2YXIgZm9ybUNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgdmFyIHRyYW5zcG9ydCA9IF9vYXV0aC50cmFuc3BvcnRfbWV0aG9kIHx8ICdoZWFkZXInXG5cbiAgaWYgKGNvbnRlbnRUeXBlLnNsaWNlKDAsIGZvcm1Db250ZW50VHlwZS5sZW5ndGgpID09PSBmb3JtQ29udGVudFR5cGUpIHtcbiAgICBjb250ZW50VHlwZSA9IGZvcm1Db250ZW50VHlwZVxuICAgIGZvcm0gPSBib2R5XG4gIH1cbiAgaWYgKHVyaS5xdWVyeSkge1xuICAgIHF1ZXJ5ID0gdXJpLnF1ZXJ5XG4gIH1cbiAgaWYgKHRyYW5zcG9ydCA9PT0gJ2JvZHknICYmIChtZXRob2QgIT09ICdQT1NUJyB8fCBjb250ZW50VHlwZSAhPT0gZm9ybUNvbnRlbnRUeXBlKSkge1xuICAgIHNlbGYucmVxdWVzdC5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignb2F1dGg6IHRyYW5zcG9ydF9tZXRob2Qgb2YgYm9keSByZXF1aXJlcyBQT1NUICcgK1xuICAgICAgJ2FuZCBjb250ZW50LXR5cGUgJyArIGZvcm1Db250ZW50VHlwZSkpXG4gIH1cblxuICBpZiAoIWZvcm0gJiYgdHlwZW9mIF9vYXV0aC5ib2R5X2hhc2ggPT09ICdib29sZWFuJykge1xuICAgIF9vYXV0aC5ib2R5X2hhc2ggPSBzZWxmLmJ1aWxkQm9keUhhc2goX29hdXRoLCBzZWxmLnJlcXVlc3QuYm9keS50b1N0cmluZygpKVxuICB9XG5cbiAgdmFyIG9hID0gc2VsZi5idWlsZFBhcmFtcyhfb2F1dGgsIHVyaSwgbWV0aG9kLCBxdWVyeSwgZm9ybSwgcXNMaWIpXG5cbiAgc3dpdGNoICh0cmFuc3BvcnQpIHtcbiAgICBjYXNlICdoZWFkZXInOlxuICAgICAgc2VsZi5yZXF1ZXN0LnNldEhlYWRlcignQXV0aG9yaXphdGlvbicsICdPQXV0aCAnICsgc2VsZi5jb25jYXRQYXJhbXMob2EsICcsJywgJ1wiJykpXG4gICAgICBicmVha1xuXG4gICAgY2FzZSAncXVlcnknOlxuICAgICAgdmFyIGhyZWYgPSBzZWxmLnJlcXVlc3QudXJpLmhyZWYgKz0gKHF1ZXJ5ID8gJyYnIDogJz8nKSArIHNlbGYuY29uY2F0UGFyYW1zKG9hLCAnJicpXG4gICAgICBzZWxmLnJlcXVlc3QudXJpID0gdXJsLnBhcnNlKGhyZWYpXG4gICAgICBzZWxmLnJlcXVlc3QucGF0aCA9IHNlbGYucmVxdWVzdC51cmkucGF0aFxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgJ2JvZHknOlxuICAgICAgc2VsZi5yZXF1ZXN0LmJvZHkgPSAoZm9ybSA/IGZvcm0gKyAnJicgOiAnJykgKyBzZWxmLmNvbmNhdFBhcmFtcyhvYSwgJyYnKVxuICAgICAgYnJlYWtcblxuICAgIGRlZmF1bHQ6XG4gICAgICBzZWxmLnJlcXVlc3QuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ29hdXRoOiB0cmFuc3BvcnRfbWV0aG9kIGludmFsaWQnKSlcbiAgfVxufVxuXG5leHBvcnRzLk9BdXRoID0gT0F1dGhcbiIsInZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKVxuXG5mdW5jdGlvbiBzaGEgKGtleSwgYm9keSwgYWxnb3JpdGhtKSB7XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSG1hYyhhbGdvcml0aG0sIGtleSkudXBkYXRlKGJvZHkpLmRpZ2VzdCgnYmFzZTY0Jylcbn1cblxuZnVuY3Rpb24gcnNhIChrZXksIGJvZHkpIHtcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVTaWduKCdSU0EtU0hBMScpLnVwZGF0ZShib2R5KS5zaWduKGtleSwgJ2Jhc2U2NCcpXG59XG5cbmZ1bmN0aW9uIHJmYzM5ODYgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgICAucmVwbGFjZSgvIS9nLCclMjEnKVxuICAgIC5yZXBsYWNlKC9cXCovZywnJTJBJylcbiAgICAucmVwbGFjZSgvXFwoL2csJyUyOCcpXG4gICAgLnJlcGxhY2UoL1xcKS9nLCclMjknKVxuICAgIC5yZXBsYWNlKC8nL2csJyUyNycpXG59XG5cbi8vIE1hcHMgb2JqZWN0IHRvIGJpLWRpbWVuc2lvbmFsIGFycmF5XG4vLyBDb252ZXJ0cyB7IGZvbzogJ0EnLCBiYXI6IFsgJ2InLCAnQicgXX0gdG9cbi8vIFsgWydmb28nLCAnQSddLCBbJ2JhcicsICdiJ10sIFsnYmFyJywgJ0InXSBdXG5mdW5jdGlvbiBtYXAgKG9iaikge1xuICB2YXIga2V5LCB2YWwsIGFyciA9IFtdXG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIHZhbCA9IG9ialtrZXldXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKVxuICAgICAgICBhcnIucHVzaChba2V5LCB2YWxbaV1dKVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKVxuICAgICAgZm9yICh2YXIgcHJvcCBpbiB2YWwpXG4gICAgICAgIGFyci5wdXNoKFtrZXkgKyAnWycgKyBwcm9wICsgJ10nLCB2YWxbcHJvcF1dKVxuICAgIGVsc2VcbiAgICAgIGFyci5wdXNoKFtrZXksIHZhbF0pXG4gIH1cbiAgcmV0dXJuIGFyclxufVxuXG4vLyBDb21wYXJlIGZ1bmN0aW9uIGZvciBzb3J0XG5mdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIHJldHVybiBhID4gYiA/IDEgOiBhIDwgYiA/IC0xIDogMFxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUJhc2UgKGh0dHBNZXRob2QsIGJhc2VfdXJpLCBwYXJhbXMpIHtcbiAgLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZGV2LnR3aXR0ZXIuY29tL2RvY3MvYXV0aC9vYXV0aCBhbmQgXG4gIC8vIGh0dHBzOi8vZGV2LnR3aXR0ZXIuY29tL2RvY3MvYXV0aC9jcmVhdGluZy1zaWduYXR1cmVcblxuICAvLyBQYXJhbWV0ZXIgbm9ybWFsaXphdGlvblxuICAvLyBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM1ODQ5I3NlY3Rpb24tMy40LjEuMy4yXG4gIHZhciBub3JtYWxpemVkID0gbWFwKHBhcmFtcylcbiAgLy8gMS4gIEZpcnN0LCB0aGUgbmFtZSBhbmQgdmFsdWUgb2YgZWFjaCBwYXJhbWV0ZXIgYXJlIGVuY29kZWRcbiAgLm1hcChmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBbIHJmYzM5ODYocFswXSksIHJmYzM5ODYocFsxXSB8fCAnJykgXVxuICB9KVxuICAvLyAyLiAgVGhlIHBhcmFtZXRlcnMgYXJlIHNvcnRlZCBieSBuYW1lLCB1c2luZyBhc2NlbmRpbmcgYnl0ZSB2YWx1ZVxuICAvLyAgICAgb3JkZXJpbmcuICBJZiB0d28gb3IgbW9yZSBwYXJhbWV0ZXJzIHNoYXJlIHRoZSBzYW1lIG5hbWUsIHRoZXlcbiAgLy8gICAgIGFyZSBzb3J0ZWQgYnkgdGhlaXIgdmFsdWUuXG4gIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoYVswXSwgYlswXSkgfHwgY29tcGFyZShhWzFdLCBiWzFdKVxuICB9KVxuICAvLyAzLiAgVGhlIG5hbWUgb2YgZWFjaCBwYXJhbWV0ZXIgaXMgY29uY2F0ZW5hdGVkIHRvIGl0cyBjb3JyZXNwb25kaW5nXG4gIC8vICAgICB2YWx1ZSB1c2luZyBhbiBcIj1cIiBjaGFyYWN0ZXIgKEFTQ0lJIGNvZGUgNjEpIGFzIGEgc2VwYXJhdG9yLCBldmVuXG4gIC8vICAgICBpZiB0aGUgdmFsdWUgaXMgZW1wdHkuXG4gIC5tYXAoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAuam9pbignPScpIH0pXG4gICAvLyA0LiAgVGhlIHNvcnRlZCBuYW1lL3ZhbHVlIHBhaXJzIGFyZSBjb25jYXRlbmF0ZWQgdG9nZXRoZXIgaW50byBhXG4gICAvLyAgICAgc2luZ2xlIHN0cmluZyBieSB1c2luZyBhbiBcIiZcIiBjaGFyYWN0ZXIgKEFTQ0lJIGNvZGUgMzgpIGFzXG4gICAvLyAgICAgc2VwYXJhdG9yLlxuICAuam9pbignJicpXG5cbiAgdmFyIGJhc2UgPSBbXG4gICAgcmZjMzk4NihodHRwTWV0aG9kID8gaHR0cE1ldGhvZC50b1VwcGVyQ2FzZSgpIDogJ0dFVCcpLFxuICAgIHJmYzM5ODYoYmFzZV91cmkpLFxuICAgIHJmYzM5ODYobm9ybWFsaXplZClcbiAgXS5qb2luKCcmJylcblxuICByZXR1cm4gYmFzZVxufVxuXG5mdW5jdGlvbiBobWFjc2lnbiAoaHR0cE1ldGhvZCwgYmFzZV91cmksIHBhcmFtcywgY29uc3VtZXJfc2VjcmV0LCB0b2tlbl9zZWNyZXQpIHtcbiAgdmFyIGJhc2UgPSBnZW5lcmF0ZUJhc2UoaHR0cE1ldGhvZCwgYmFzZV91cmksIHBhcmFtcylcbiAgdmFyIGtleSA9IFtcbiAgICBjb25zdW1lcl9zZWNyZXQgfHwgJycsXG4gICAgdG9rZW5fc2VjcmV0IHx8ICcnXG4gIF0ubWFwKHJmYzM5ODYpLmpvaW4oJyYnKVxuXG4gIHJldHVybiBzaGEoa2V5LCBiYXNlLCAnc2hhMScpXG59XG5cbmZ1bmN0aW9uIGhtYWNzaWduMjU2IChodHRwTWV0aG9kLCBiYXNlX3VyaSwgcGFyYW1zLCBjb25zdW1lcl9zZWNyZXQsIHRva2VuX3NlY3JldCkge1xuICB2YXIgYmFzZSA9IGdlbmVyYXRlQmFzZShodHRwTWV0aG9kLCBiYXNlX3VyaSwgcGFyYW1zKVxuICB2YXIga2V5ID0gW1xuICAgIGNvbnN1bWVyX3NlY3JldCB8fCAnJyxcbiAgICB0b2tlbl9zZWNyZXQgfHwgJydcbiAgXS5tYXAocmZjMzk4Nikuam9pbignJicpXG5cbiAgcmV0dXJuIHNoYShrZXksIGJhc2UsICdzaGEyNTYnKVxufVxuXG5mdW5jdGlvbiByc2FzaWduIChodHRwTWV0aG9kLCBiYXNlX3VyaSwgcGFyYW1zLCBwcml2YXRlX2tleSwgdG9rZW5fc2VjcmV0KSB7XG4gIHZhciBiYXNlID0gZ2VuZXJhdGVCYXNlKGh0dHBNZXRob2QsIGJhc2VfdXJpLCBwYXJhbXMpXG4gIHZhciBrZXkgPSBwcml2YXRlX2tleSB8fCAnJ1xuXG4gIHJldHVybiByc2Eoa2V5LCBiYXNlKVxufVxuXG5mdW5jdGlvbiBwbGFpbnRleHQgKGNvbnN1bWVyX3NlY3JldCwgdG9rZW5fc2VjcmV0KSB7XG4gIHZhciBrZXkgPSBbXG4gICAgY29uc3VtZXJfc2VjcmV0IHx8ICcnLFxuICAgIHRva2VuX3NlY3JldCB8fCAnJ1xuICBdLm1hcChyZmMzOTg2KS5qb2luKCcmJylcblxuICByZXR1cm4ga2V5XG59XG5cbmZ1bmN0aW9uIHNpZ24gKHNpZ25NZXRob2QsIGh0dHBNZXRob2QsIGJhc2VfdXJpLCBwYXJhbXMsIGNvbnN1bWVyX3NlY3JldCwgdG9rZW5fc2VjcmV0KSB7XG4gIHZhciBtZXRob2RcbiAgdmFyIHNraXBBcmdzID0gMVxuXG4gIHN3aXRjaCAoc2lnbk1ldGhvZCkge1xuICAgIGNhc2UgJ1JTQS1TSEExJzpcbiAgICAgIG1ldGhvZCA9IHJzYXNpZ25cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnSE1BQy1TSEExJzpcbiAgICAgIG1ldGhvZCA9IGhtYWNzaWduXG4gICAgICBicmVha1xuICAgIGNhc2UgJ0hNQUMtU0hBMjU2JzpcbiAgICAgIG1ldGhvZCA9IGhtYWNzaWduMjU2XG4gICAgICBicmVha1xuICAgIGNhc2UgJ1BMQUlOVEVYVCc6XG4gICAgICBtZXRob2QgPSBwbGFpbnRleHRcbiAgICAgIHNraXBBcmdzID0gNFxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NpZ25hdHVyZSBtZXRob2Qgbm90IHN1cHBvcnRlZDogJyArIHNpZ25NZXRob2QpXG4gIH1cblxuICByZXR1cm4gbWV0aG9kLmFwcGx5KG51bGwsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCBza2lwQXJncykpXG59XG5cbmV4cG9ydHMuaG1hY3NpZ24gPSBobWFjc2lnblxuZXhwb3J0cy5obWFjc2lnbjI1NiA9IGhtYWNzaWduMjU2XG5leHBvcnRzLnJzYXNpZ24gPSByc2FzaWduXG5leHBvcnRzLnBsYWludGV4dCA9IHBsYWludGV4dFxuZXhwb3J0cy5zaWduID0gc2lnblxuZXhwb3J0cy5yZmMzOTg2ID0gcmZjMzk4NlxuZXhwb3J0cy5nZW5lcmF0ZUJhc2UgPSBnZW5lcmF0ZUJhc2UiLCIndXNlIHN0cmljdCdcblxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpXG5cbmZ1bmN0aW9uIHJhbmRvbVN0cmluZyAoc2l6ZSkge1xuICB2YXIgYml0cyA9IChzaXplICsgMSkgKiA2XG4gIHZhciBidWZmZXIgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoTWF0aC5jZWlsKGJpdHMgLyA4KSlcbiAgdmFyIHN0cmluZyA9IGJ1ZmZlci50b1N0cmluZygnYmFzZTY0JykucmVwbGFjZSgvXFwrL2csICctJykucmVwbGFjZSgvXFwvL2csICdfJykucmVwbGFjZSgvPS9nLCAnJylcbiAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCBzaXplKVxufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVQYXlsb2FkSGFzaCAocGF5bG9hZCwgYWxnb3JpdGhtLCBjb250ZW50VHlwZSkge1xuICB2YXIgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKGFsZ29yaXRobSlcbiAgaGFzaC51cGRhdGUoJ2hhd2suMS5wYXlsb2FkXFxuJylcbiAgaGFzaC51cGRhdGUoKGNvbnRlbnRUeXBlID8gY29udGVudFR5cGUuc3BsaXQoJzsnKVswXS50cmltKCkudG9Mb3dlckNhc2UoKSA6ICcnKSArICdcXG4nKVxuICBoYXNoLnVwZGF0ZShwYXlsb2FkIHx8ICcnKVxuICBoYXNoLnVwZGF0ZSgnXFxuJylcbiAgcmV0dXJuIGhhc2guZGlnZXN0KCdiYXNlNjQnKVxufVxuXG5leHBvcnRzLmNhbGN1bGF0ZU1hYyA9IGZ1bmN0aW9uIChjcmVkZW50aWFscywgb3B0cykge1xuICB2YXIgbm9ybWFsaXplZCA9ICdoYXdrLjEuaGVhZGVyXFxuJyArXG4gICAgb3B0cy50cyArICdcXG4nICtcbiAgICBvcHRzLm5vbmNlICsgJ1xcbicgK1xuICAgIChvcHRzLm1ldGhvZCB8fCAnJykudG9VcHBlckNhc2UoKSArICdcXG4nICtcbiAgICBvcHRzLnJlc291cmNlICsgJ1xcbicgK1xuICAgIG9wdHMuaG9zdC50b0xvd2VyQ2FzZSgpICsgJ1xcbicgK1xuICAgIG9wdHMucG9ydCArICdcXG4nICtcbiAgICAob3B0cy5oYXNoIHx8ICcnKSArICdcXG4nXG5cbiAgaWYgKG9wdHMuZXh0KSB7XG4gICAgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQgKyBvcHRzLmV4dC5yZXBsYWNlKCdcXFxcJywgJ1xcXFxcXFxcJykucmVwbGFjZSgnXFxuJywgJ1xcXFxuJylcbiAgfVxuXG4gIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkICsgJ1xcbidcblxuICBpZiAob3B0cy5hcHApIHtcbiAgICBub3JtYWxpemVkID0gbm9ybWFsaXplZCArIG9wdHMuYXBwICsgJ1xcbicgKyAob3B0cy5kbGcgfHwgJycpICsgJ1xcbidcbiAgfVxuXG4gIHZhciBobWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoY3JlZGVudGlhbHMuYWxnb3JpdGhtLCBjcmVkZW50aWFscy5rZXkpLnVwZGF0ZShub3JtYWxpemVkKVxuICB2YXIgZGlnZXN0ID0gaG1hYy5kaWdlc3QoJ2Jhc2U2NCcpXG4gIHJldHVybiBkaWdlc3Rcbn1cblxuZXhwb3J0cy5oZWFkZXIgPSBmdW5jdGlvbiAodXJpLCBtZXRob2QsIG9wdHMpIHtcbiAgdmFyIHRpbWVzdGFtcCA9IG9wdHMudGltZXN0YW1wIHx8IE1hdGguZmxvb3IoKERhdGUubm93KCkgKyAob3B0cy5sb2NhbHRpbWVPZmZzZXRNc2VjIHx8IDApKSAvIDEwMDApXG4gIHZhciBjcmVkZW50aWFscyA9IG9wdHMuY3JlZGVudGlhbHNcbiAgaWYgKCFjcmVkZW50aWFscyB8fCAhY3JlZGVudGlhbHMuaWQgfHwgIWNyZWRlbnRpYWxzLmtleSB8fCAhY3JlZGVudGlhbHMuYWxnb3JpdGhtKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoWydzaGExJywgJ3NoYTI1NiddLmluZGV4T2YoY3JlZGVudGlhbHMuYWxnb3JpdGhtKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIHZhciBhcnRpZmFjdHMgPSB7XG4gICAgdHM6IHRpbWVzdGFtcCxcbiAgICBub25jZTogb3B0cy5ub25jZSB8fCByYW5kb21TdHJpbmcoNiksXG4gICAgbWV0aG9kOiBtZXRob2QsXG4gICAgcmVzb3VyY2U6IHVyaS5wYXRobmFtZSArICh1cmkuc2VhcmNoIHx8ICcnKSxcbiAgICBob3N0OiB1cmkuaG9zdG5hbWUsXG4gICAgcG9ydDogdXJpLnBvcnQgfHwgKHVyaS5wcm90b2NvbCA9PT0gJ2h0dHA6JyA/IDgwIDogNDQzKSxcbiAgICBoYXNoOiBvcHRzLmhhc2gsXG4gICAgZXh0OiBvcHRzLmV4dCxcbiAgICBhcHA6IG9wdHMuYXBwLFxuICAgIGRsZzogb3B0cy5kbGdcbiAgfVxuXG4gIGlmICghYXJ0aWZhY3RzLmhhc2ggJiYgKG9wdHMucGF5bG9hZCB8fCBvcHRzLnBheWxvYWQgPT09ICcnKSkge1xuICAgIGFydGlmYWN0cy5oYXNoID0gY2FsY3VsYXRlUGF5bG9hZEhhc2gob3B0cy5wYXlsb2FkLCBjcmVkZW50aWFscy5hbGdvcml0aG0sIG9wdHMuY29udGVudFR5cGUpXG4gIH1cblxuICB2YXIgbWFjID0gZXhwb3J0cy5jYWxjdWxhdGVNYWMoY3JlZGVudGlhbHMsIGFydGlmYWN0cylcblxuICB2YXIgaGFzRXh0ID0gYXJ0aWZhY3RzLmV4dCAhPT0gbnVsbCAmJiBhcnRpZmFjdHMuZXh0ICE9PSB1bmRlZmluZWQgJiYgYXJ0aWZhY3RzLmV4dCAhPT0gJydcbiAgdmFyIGhlYWRlciA9ICdIYXdrIGlkPVwiJyArIGNyZWRlbnRpYWxzLmlkICtcbiAgICAnXCIsIHRzPVwiJyArIGFydGlmYWN0cy50cyArXG4gICAgJ1wiLCBub25jZT1cIicgKyBhcnRpZmFjdHMubm9uY2UgK1xuICAgIChhcnRpZmFjdHMuaGFzaCA/ICdcIiwgaGFzaD1cIicgKyBhcnRpZmFjdHMuaGFzaCA6ICcnKSArXG4gICAgKGhhc0V4dCA/ICdcIiwgZXh0PVwiJyArIGFydGlmYWN0cy5leHQucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykgOiAnJykgK1xuICAgICdcIiwgbWFjPVwiJyArIG1hYyArICdcIidcblxuICBpZiAoYXJ0aWZhY3RzLmFwcCkge1xuICAgIGhlYWRlciA9IGhlYWRlciArICcsIGFwcD1cIicgKyBhcnRpZmFjdHMuYXBwICsgKGFydGlmYWN0cy5kbGcgPyAnXCIsIGRsZz1cIicgKyBhcnRpZmFjdHMuZGxnIDogJycpICsgJ1wiJ1xuICB9XG5cbiAgcmV0dXJuIGhlYWRlclxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB1dWlkID0gcmVxdWlyZSgndXVpZC92NCcpXG52YXIgQ29tYmluZWRTdHJlYW0gPSByZXF1aXJlKCdjb21iaW5lZC1zdHJlYW0nKVxudmFyIGlzc3RyZWFtID0gcmVxdWlyZSgnaXNzdHJlYW0nKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIE11bHRpcGFydCAocmVxdWVzdCkge1xuICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0XG4gIHRoaXMuYm91bmRhcnkgPSB1dWlkKClcbiAgdGhpcy5jaHVua2VkID0gZmFsc2VcbiAgdGhpcy5ib2R5ID0gbnVsbFxufVxuXG5NdWx0aXBhcnQucHJvdG90eXBlLmlzQ2h1bmtlZCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgY2h1bmtlZCA9IGZhbHNlXG4gIHZhciBwYXJ0cyA9IG9wdGlvbnMuZGF0YSB8fCBvcHRpb25zXG5cbiAgaWYgKCFwYXJ0cy5mb3JFYWNoKSB7XG4gICAgc2VsZi5yZXF1ZXN0LmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdBcmd1bWVudCBlcnJvciwgb3B0aW9ucy5tdWx0aXBhcnQuJykpXG4gIH1cblxuICBpZiAob3B0aW9ucy5jaHVua2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICBjaHVua2VkID0gb3B0aW9ucy5jaHVua2VkXG4gIH1cblxuICBpZiAoc2VsZi5yZXF1ZXN0LmdldEhlYWRlcigndHJhbnNmZXItZW5jb2RpbmcnKSA9PT0gJ2NodW5rZWQnKSB7XG4gICAgY2h1bmtlZCA9IHRydWVcbiAgfVxuXG4gIGlmICghY2h1bmtlZCkge1xuICAgIHBhcnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFydC5ib2R5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLnJlcXVlc3QuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0JvZHkgYXR0cmlidXRlIG1pc3NpbmcgaW4gbXVsdGlwYXJ0LicpKVxuICAgICAgfVxuICAgICAgaWYgKGlzc3RyZWFtKHBhcnQuYm9keSkpIHtcbiAgICAgICAgY2h1bmtlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIGNodW5rZWRcbn1cblxuTXVsdGlwYXJ0LnByb3RvdHlwZS5zZXRIZWFkZXJzID0gZnVuY3Rpb24gKGNodW5rZWQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgaWYgKGNodW5rZWQgJiYgIXNlbGYucmVxdWVzdC5oYXNIZWFkZXIoJ3RyYW5zZmVyLWVuY29kaW5nJykpIHtcbiAgICBzZWxmLnJlcXVlc3Quc2V0SGVhZGVyKCd0cmFuc2Zlci1lbmNvZGluZycsICdjaHVua2VkJylcbiAgfVxuXG4gIHZhciBoZWFkZXIgPSBzZWxmLnJlcXVlc3QuZ2V0SGVhZGVyKCdjb250ZW50LXR5cGUnKVxuXG4gIGlmICghaGVhZGVyIHx8IGhlYWRlci5pbmRleE9mKCdtdWx0aXBhcnQnKSA9PT0gLTEpIHtcbiAgICBzZWxmLnJlcXVlc3Quc2V0SGVhZGVyKCdjb250ZW50LXR5cGUnLCAnbXVsdGlwYXJ0L3JlbGF0ZWQ7IGJvdW5kYXJ5PScgKyBzZWxmLmJvdW5kYXJ5KVxuICB9IGVsc2Uge1xuICAgIGlmIChoZWFkZXIuaW5kZXhPZignYm91bmRhcnknKSAhPT0gLTEpIHtcbiAgICAgIHNlbGYuYm91bmRhcnkgPSBoZWFkZXIucmVwbGFjZSgvLipib3VuZGFyeT0oW15cXHM7XSspLiovLCAnJDEnKVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnJlcXVlc3Quc2V0SGVhZGVyKCdjb250ZW50LXR5cGUnLCBoZWFkZXIgKyAnOyBib3VuZGFyeT0nICsgc2VsZi5ib3VuZGFyeSlcbiAgICB9XG4gIH1cbn1cblxuTXVsdGlwYXJ0LnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uIChwYXJ0cywgY2h1bmtlZCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGJvZHkgPSBjaHVua2VkID8gbmV3IENvbWJpbmVkU3RyZWFtKCkgOiBbXVxuXG4gIGZ1bmN0aW9uIGFkZCAocGFydCkge1xuICAgIGlmICh0eXBlb2YgcGFydCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHBhcnQgPSBwYXJ0LnRvU3RyaW5nKClcbiAgICB9XG4gICAgcmV0dXJuIGNodW5rZWQgPyBib2R5LmFwcGVuZChwYXJ0KSA6IGJvZHkucHVzaChCdWZmZXIuZnJvbShwYXJ0KSlcbiAgfVxuXG4gIGlmIChzZWxmLnJlcXVlc3QucHJlYW1ibGVDUkxGKSB7XG4gICAgYWRkKCdcXHJcXG4nKVxuICB9XG5cbiAgcGFydHMuZm9yRWFjaChmdW5jdGlvbiAocGFydCkge1xuICAgIHZhciBwcmVhbWJsZSA9ICctLScgKyBzZWxmLmJvdW5kYXJ5ICsgJ1xcclxcbidcbiAgICBPYmplY3Qua2V5cyhwYXJ0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdib2R5JykgeyByZXR1cm4gfVxuICAgICAgcHJlYW1ibGUgKz0ga2V5ICsgJzogJyArIHBhcnRba2V5XSArICdcXHJcXG4nXG4gICAgfSlcbiAgICBwcmVhbWJsZSArPSAnXFxyXFxuJ1xuICAgIGFkZChwcmVhbWJsZSlcbiAgICBhZGQocGFydC5ib2R5KVxuICAgIGFkZCgnXFxyXFxuJylcbiAgfSlcbiAgYWRkKCctLScgKyBzZWxmLmJvdW5kYXJ5ICsgJy0tJylcblxuICBpZiAoc2VsZi5yZXF1ZXN0LnBvc3RhbWJsZUNSTEYpIHtcbiAgICBhZGQoJ1xcclxcbicpXG4gIH1cblxuICByZXR1cm4gYm9keVxufVxuXG5NdWx0aXBhcnQucHJvdG90eXBlLm9uUmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHZhciBjaHVua2VkID0gc2VsZi5pc0NodW5rZWQob3B0aW9ucylcbiAgdmFyIHBhcnRzID0gb3B0aW9ucy5kYXRhIHx8IG9wdGlvbnNcblxuICBzZWxmLnNldEhlYWRlcnMoY2h1bmtlZClcbiAgc2VsZi5jaHVua2VkID0gY2h1bmtlZFxuICBzZWxmLmJvZHkgPSBzZWxmLmJ1aWxkKHBhcnRzLCBjaHVua2VkKVxufVxuXG5leHBvcnRzLk11bHRpcGFydCA9IE11bHRpcGFydFxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxudmFyIGlzVXJsID0gL15odHRwcz86L1xuXG5mdW5jdGlvbiBSZWRpcmVjdCAocmVxdWVzdCkge1xuICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0XG4gIHRoaXMuZm9sbG93UmVkaXJlY3QgPSB0cnVlXG4gIHRoaXMuZm9sbG93UmVkaXJlY3RzID0gdHJ1ZVxuICB0aGlzLmZvbGxvd0FsbFJlZGlyZWN0cyA9IGZhbHNlXG4gIHRoaXMuZm9sbG93T3JpZ2luYWxIdHRwTWV0aG9kID0gZmFsc2VcbiAgdGhpcy5hbGxvd1JlZGlyZWN0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZSB9XG4gIHRoaXMubWF4UmVkaXJlY3RzID0gMTBcbiAgdGhpcy5yZWRpcmVjdHMgPSBbXVxuICB0aGlzLnJlZGlyZWN0c0ZvbGxvd2VkID0gMFxuICB0aGlzLnJlbW92ZVJlZmVyZXJIZWFkZXIgPSBmYWxzZVxufVxuXG5SZWRpcmVjdC5wcm90b3R5cGUub25SZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgaWYgKG9wdGlvbnMubWF4UmVkaXJlY3RzICE9PSB1bmRlZmluZWQpIHtcbiAgICBzZWxmLm1heFJlZGlyZWN0cyA9IG9wdGlvbnMubWF4UmVkaXJlY3RzXG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZvbGxvd1JlZGlyZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2VsZi5hbGxvd1JlZGlyZWN0ID0gb3B0aW9ucy5mb2xsb3dSZWRpcmVjdFxuICB9XG4gIGlmIChvcHRpb25zLmZvbGxvd1JlZGlyZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBzZWxmLmZvbGxvd1JlZGlyZWN0cyA9ICEhb3B0aW9ucy5mb2xsb3dSZWRpcmVjdFxuICB9XG4gIGlmIChvcHRpb25zLmZvbGxvd0FsbFJlZGlyZWN0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc2VsZi5mb2xsb3dBbGxSZWRpcmVjdHMgPSBvcHRpb25zLmZvbGxvd0FsbFJlZGlyZWN0c1xuICB9XG4gIGlmIChzZWxmLmZvbGxvd1JlZGlyZWN0cyB8fCBzZWxmLmZvbGxvd0FsbFJlZGlyZWN0cykge1xuICAgIHNlbGYucmVkaXJlY3RzID0gc2VsZi5yZWRpcmVjdHMgfHwgW11cbiAgfVxuICBpZiAob3B0aW9ucy5yZW1vdmVSZWZlcmVySGVhZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICBzZWxmLnJlbW92ZVJlZmVyZXJIZWFkZXIgPSBvcHRpb25zLnJlbW92ZVJlZmVyZXJIZWFkZXJcbiAgfVxuICBpZiAob3B0aW9ucy5mb2xsb3dPcmlnaW5hbEh0dHBNZXRob2QgIT09IHVuZGVmaW5lZCkge1xuICAgIHNlbGYuZm9sbG93T3JpZ2luYWxIdHRwTWV0aG9kID0gb3B0aW9ucy5mb2xsb3dPcmlnaW5hbEh0dHBNZXRob2RcbiAgfVxufVxuXG5SZWRpcmVjdC5wcm90b3R5cGUucmVkaXJlY3RUbyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHJlcXVlc3QgPSBzZWxmLnJlcXVlc3RcblxuICB2YXIgcmVkaXJlY3RUbyA9IG51bGxcbiAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gMzAwICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPCA0MDAgJiYgcmVzcG9uc2UuY2FzZWxlc3MuaGFzKCdsb2NhdGlvbicpKSB7XG4gICAgdmFyIGxvY2F0aW9uID0gcmVzcG9uc2UuY2FzZWxlc3MuZ2V0KCdsb2NhdGlvbicpXG4gICAgcmVxdWVzdC5kZWJ1ZygncmVkaXJlY3QnLCBsb2NhdGlvbilcblxuICAgIGlmIChzZWxmLmZvbGxvd0FsbFJlZGlyZWN0cykge1xuICAgICAgcmVkaXJlY3RUbyA9IGxvY2F0aW9uXG4gICAgfSBlbHNlIGlmIChzZWxmLmZvbGxvd1JlZGlyZWN0cykge1xuICAgICAgc3dpdGNoIChyZXF1ZXN0Lm1ldGhvZCkge1xuICAgICAgICBjYXNlICdQQVRDSCc6XG4gICAgICAgIGNhc2UgJ1BVVCc6XG4gICAgICAgIGNhc2UgJ1BPU1QnOlxuICAgICAgICBjYXNlICdERUxFVEUnOlxuICAgICAgICAgIC8vIERvIG5vdCBmb2xsb3cgcmVkaXJlY3RzXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWRpcmVjdFRvID0gbG9jYXRpb25cbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MDEpIHtcbiAgICB2YXIgYXV0aEhlYWRlciA9IHJlcXVlc3QuX2F1dGgub25SZXNwb25zZShyZXNwb25zZSlcbiAgICBpZiAoYXV0aEhlYWRlcikge1xuICAgICAgcmVxdWVzdC5zZXRIZWFkZXIoJ2F1dGhvcml6YXRpb24nLCBhdXRoSGVhZGVyKVxuICAgICAgcmVkaXJlY3RUbyA9IHJlcXVlc3QudXJpXG4gICAgfVxuICB9XG4gIHJldHVybiByZWRpcmVjdFRvXG59XG5cblJlZGlyZWN0LnByb3RvdHlwZS5vblJlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgcmVxdWVzdCA9IHNlbGYucmVxdWVzdFxuXG4gIHZhciByZWRpcmVjdFRvID0gc2VsZi5yZWRpcmVjdFRvKHJlc3BvbnNlKVxuICBpZiAoIXJlZGlyZWN0VG8gfHwgIXNlbGYuYWxsb3dSZWRpcmVjdC5jYWxsKHJlcXVlc3QsIHJlc3BvbnNlKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmVxdWVzdC5kZWJ1ZygncmVkaXJlY3QgdG8nLCByZWRpcmVjdFRvKVxuXG4gIC8vIGlnbm9yZSBhbnkgcG90ZW50aWFsIHJlc3BvbnNlIGJvZHkuICBpdCBjYW5ub3QgcG9zc2libHkgYmUgdXNlZnVsXG4gIC8vIHRvIHVzIGF0IHRoaXMgcG9pbnQuXG4gIC8vIHJlc3BvbnNlLnJlc3VtZSBzaG91bGQgYmUgZGVmaW5lZCwgYnV0IGNoZWNrIGFueXdheSBiZWZvcmUgY2FsbGluZy4gV29ya2Fyb3VuZCBmb3IgYnJvd3NlcmlmeS5cbiAgaWYgKHJlc3BvbnNlLnJlc3VtZSkge1xuICAgIHJlc3BvbnNlLnJlc3VtZSgpXG4gIH1cblxuICBpZiAoc2VsZi5yZWRpcmVjdHNGb2xsb3dlZCA+PSBzZWxmLm1heFJlZGlyZWN0cykge1xuICAgIHJlcXVlc3QuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0V4Y2VlZGVkIG1heFJlZGlyZWN0cy4gUHJvYmFibHkgc3R1Y2sgaW4gYSByZWRpcmVjdCBsb29wICcgKyByZXF1ZXN0LnVyaS5ocmVmKSlcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBzZWxmLnJlZGlyZWN0c0ZvbGxvd2VkICs9IDFcblxuICBpZiAoIWlzVXJsLnRlc3QocmVkaXJlY3RUbykpIHtcbiAgICByZWRpcmVjdFRvID0gdXJsLnJlc29sdmUocmVxdWVzdC51cmkuaHJlZiwgcmVkaXJlY3RUbylcbiAgfVxuXG4gIHZhciB1cmlQcmV2ID0gcmVxdWVzdC51cmlcbiAgcmVxdWVzdC51cmkgPSB1cmwucGFyc2UocmVkaXJlY3RUbylcblxuICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgd2UgY2hhbmdlIHByb3RvY29sIGZyb20gaHR0cHMgdG8gaHR0cCBvciB2aWNlIHZlcnNhXG4gIGlmIChyZXF1ZXN0LnVyaS5wcm90b2NvbCAhPT0gdXJpUHJldi5wcm90b2NvbCkge1xuICAgIGRlbGV0ZSByZXF1ZXN0LmFnZW50XG4gIH1cblxuICBzZWxmLnJlZGlyZWN0cy5wdXNoKHsgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzQ29kZSwgcmVkaXJlY3RVcmk6IHJlZGlyZWN0VG8gfSlcblxuICBpZiAoc2VsZi5mb2xsb3dBbGxSZWRpcmVjdHMgJiYgcmVxdWVzdC5tZXRob2QgIT09ICdIRUFEJyAmJlxuICAgIHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDQwMSAmJiByZXNwb25zZS5zdGF0dXNDb2RlICE9PSAzMDcpIHtcbiAgICByZXF1ZXN0Lm1ldGhvZCA9IHNlbGYuZm9sbG93T3JpZ2luYWxIdHRwTWV0aG9kID8gcmVxdWVzdC5tZXRob2QgOiAnR0VUJ1xuICB9XG4gIC8vIHJlcXVlc3QubWV0aG9kID0gJ0dFVCcgLy8gRm9yY2UgYWxsIHJlZGlyZWN0cyB0byB1c2UgR0VUIHx8IGNvbW1lbnRlZCBvdXQgZml4ZXMgIzIxNVxuICBkZWxldGUgcmVxdWVzdC5zcmNcbiAgZGVsZXRlIHJlcXVlc3QucmVxXG4gIGRlbGV0ZSByZXF1ZXN0Ll9zdGFydGVkXG4gIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSA0MDEgJiYgcmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMzA3KSB7XG4gICAgLy8gUmVtb3ZlIHBhcmFtZXRlcnMgZnJvbSB0aGUgcHJldmlvdXMgcmVzcG9uc2UsIHVubGVzcyB0aGlzIGlzIHRoZSBzZWNvbmQgcmVxdWVzdFxuICAgIC8vIGZvciBhIHNlcnZlciB0aGF0IHJlcXVpcmVzIGRpZ2VzdCBhdXRoZW50aWNhdGlvbi5cbiAgICBkZWxldGUgcmVxdWVzdC5ib2R5XG4gICAgZGVsZXRlIHJlcXVlc3QuX2Zvcm1cbiAgICBpZiAocmVxdWVzdC5oZWFkZXJzKSB7XG4gICAgICByZXF1ZXN0LnJlbW92ZUhlYWRlcignaG9zdCcpXG4gICAgICByZXF1ZXN0LnJlbW92ZUhlYWRlcignY29udGVudC10eXBlJylcbiAgICAgIHJlcXVlc3QucmVtb3ZlSGVhZGVyKCdjb250ZW50LWxlbmd0aCcpXG4gICAgICBpZiAocmVxdWVzdC51cmkuaG9zdG5hbWUgIT09IHJlcXVlc3Qub3JpZ2luYWxIb3N0LnNwbGl0KCc6JylbMF0pIHtcbiAgICAgICAgLy8gUmVtb3ZlIGF1dGhvcml6YXRpb24gaWYgY2hhbmdpbmcgaG9zdG5hbWVzIChidXQgbm90IGlmIGp1c3RcbiAgICAgICAgLy8gY2hhbmdpbmcgcG9ydHMgb3IgcHJvdG9jb2xzKS4gIFRoaXMgbWF0Y2hlcyB0aGUgYmVoYXZpb3Igb2YgY3VybDpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JhZ2Rlci9jdXJsL2Jsb2IvNmJlYjBlZWUvbGliL2h0dHAuYyNMNzEwXG4gICAgICAgIHJlcXVlc3QucmVtb3ZlSGVhZGVyKCdhdXRob3JpemF0aW9uJylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXNlbGYucmVtb3ZlUmVmZXJlckhlYWRlcikge1xuICAgIHJlcXVlc3Quc2V0SGVhZGVyKCdyZWZlcmVyJywgdXJpUHJldi5ocmVmKVxuICB9XG5cbiAgcmVxdWVzdC5lbWl0KCdyZWRpcmVjdCcpXG5cbiAgcmVxdWVzdC5pbml0KClcblxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnRzLlJlZGlyZWN0ID0gUmVkaXJlY3RcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJylcbnZhciB0dW5uZWwgPSByZXF1aXJlKCd0dW5uZWwtYWdlbnQnKVxuXG52YXIgZGVmYXVsdFByb3h5SGVhZGVyV2hpdGVMaXN0ID0gW1xuICAnYWNjZXB0JyxcbiAgJ2FjY2VwdC1jaGFyc2V0JyxcbiAgJ2FjY2VwdC1lbmNvZGluZycsXG4gICdhY2NlcHQtbGFuZ3VhZ2UnLFxuICAnYWNjZXB0LXJhbmdlcycsXG4gICdjYWNoZS1jb250cm9sJyxcbiAgJ2NvbnRlbnQtZW5jb2RpbmcnLFxuICAnY29udGVudC1sYW5ndWFnZScsXG4gICdjb250ZW50LWxvY2F0aW9uJyxcbiAgJ2NvbnRlbnQtbWQ1JyxcbiAgJ2NvbnRlbnQtcmFuZ2UnLFxuICAnY29udGVudC10eXBlJyxcbiAgJ2Nvbm5lY3Rpb24nLFxuICAnZGF0ZScsXG4gICdleHBlY3QnLFxuICAnbWF4LWZvcndhcmRzJyxcbiAgJ3ByYWdtYScsXG4gICdyZWZlcmVyJyxcbiAgJ3RlJyxcbiAgJ3VzZXItYWdlbnQnLFxuICAndmlhJ1xuXVxuXG52YXIgZGVmYXVsdFByb3h5SGVhZGVyRXhjbHVzaXZlTGlzdCA9IFtcbiAgJ3Byb3h5LWF1dGhvcml6YXRpb24nXG5dXG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFByb3h5SG9zdCAodXJpT2JqZWN0KSB7XG4gIHZhciBwb3J0ID0gdXJpT2JqZWN0LnBvcnRcbiAgdmFyIHByb3RvY29sID0gdXJpT2JqZWN0LnByb3RvY29sXG4gIHZhciBwcm94eUhvc3QgPSB1cmlPYmplY3QuaG9zdG5hbWUgKyAnOidcblxuICBpZiAocG9ydCkge1xuICAgIHByb3h5SG9zdCArPSBwb3J0XG4gIH0gZWxzZSBpZiAocHJvdG9jb2wgPT09ICdodHRwczonKSB7XG4gICAgcHJveHlIb3N0ICs9ICc0NDMnXG4gIH0gZWxzZSB7XG4gICAgcHJveHlIb3N0ICs9ICc4MCdcbiAgfVxuXG4gIHJldHVybiBwcm94eUhvc3Rcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0UHJveHlIZWFkZXJXaGl0ZUxpc3QgKGhlYWRlcnMsIHByb3h5SGVhZGVyV2hpdGVMaXN0KSB7XG4gIHZhciB3aGl0ZUxpc3QgPSBwcm94eUhlYWRlcldoaXRlTGlzdFxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHNldCwgaGVhZGVyKSB7XG4gICAgICBzZXRbaGVhZGVyLnRvTG93ZXJDYXNlKCldID0gdHJ1ZVxuICAgICAgcmV0dXJuIHNldFxuICAgIH0sIHt9KVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhoZWFkZXJzKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gKGhlYWRlcikge1xuICAgICAgcmV0dXJuIHdoaXRlTGlzdFtoZWFkZXIudG9Mb3dlckNhc2UoKV1cbiAgICB9KVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHNldCwgaGVhZGVyKSB7XG4gICAgICBzZXRbaGVhZGVyXSA9IGhlYWRlcnNbaGVhZGVyXVxuICAgICAgcmV0dXJuIHNldFxuICAgIH0sIHt9KVxufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RUdW5uZWxPcHRpb25zIChyZXF1ZXN0LCBwcm94eUhlYWRlcnMpIHtcbiAgdmFyIHByb3h5ID0gcmVxdWVzdC5wcm94eVxuXG4gIHZhciB0dW5uZWxPcHRpb25zID0ge1xuICAgIHByb3h5OiB7XG4gICAgICBob3N0OiBwcm94eS5ob3N0bmFtZSxcbiAgICAgIHBvcnQ6ICtwcm94eS5wb3J0LFxuICAgICAgcHJveHlBdXRoOiBwcm94eS5hdXRoLFxuICAgICAgaGVhZGVyczogcHJveHlIZWFkZXJzXG4gICAgfSxcbiAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgY2E6IHJlcXVlc3QuY2EsXG4gICAgY2VydDogcmVxdWVzdC5jZXJ0LFxuICAgIGtleTogcmVxdWVzdC5rZXksXG4gICAgcGFzc3BocmFzZTogcmVxdWVzdC5wYXNzcGhyYXNlLFxuICAgIHBmeDogcmVxdWVzdC5wZngsXG4gICAgY2lwaGVyczogcmVxdWVzdC5jaXBoZXJzLFxuICAgIHJlamVjdFVuYXV0aG9yaXplZDogcmVxdWVzdC5yZWplY3RVbmF1dGhvcml6ZWQsXG4gICAgc2VjdXJlT3B0aW9uczogcmVxdWVzdC5zZWN1cmVPcHRpb25zLFxuICAgIHNlY3VyZVByb3RvY29sOiByZXF1ZXN0LnNlY3VyZVByb3RvY29sXG4gIH1cblxuICByZXR1cm4gdHVubmVsT3B0aW9uc1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RUdW5uZWxGbk5hbWUgKHVyaSwgcHJveHkpIHtcbiAgdmFyIHVyaVByb3RvY29sID0gKHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAnaHR0cHMnIDogJ2h0dHAnKVxuICB2YXIgcHJveHlQcm90b2NvbCA9IChwcm94eS5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAnSHR0cHMnIDogJ0h0dHAnKVxuICByZXR1cm4gW3VyaVByb3RvY29sLCBwcm94eVByb3RvY29sXS5qb2luKCdPdmVyJylcbn1cblxuZnVuY3Rpb24gZ2V0VHVubmVsRm4gKHJlcXVlc3QpIHtcbiAgdmFyIHVyaSA9IHJlcXVlc3QudXJpXG4gIHZhciBwcm94eSA9IHJlcXVlc3QucHJveHlcbiAgdmFyIHR1bm5lbEZuTmFtZSA9IGNvbnN0cnVjdFR1bm5lbEZuTmFtZSh1cmksIHByb3h5KVxuICByZXR1cm4gdHVubmVsW3R1bm5lbEZuTmFtZV1cbn1cblxuZnVuY3Rpb24gVHVubmVsIChyZXF1ZXN0KSB7XG4gIHRoaXMucmVxdWVzdCA9IHJlcXVlc3RcbiAgdGhpcy5wcm94eUhlYWRlcldoaXRlTGlzdCA9IGRlZmF1bHRQcm94eUhlYWRlcldoaXRlTGlzdFxuICB0aGlzLnByb3h5SGVhZGVyRXhjbHVzaXZlTGlzdCA9IFtdXG4gIGlmICh0eXBlb2YgcmVxdWVzdC50dW5uZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy50dW5uZWxPdmVycmlkZSA9IHJlcXVlc3QudHVubmVsXG4gIH1cbn1cblxuVHVubmVsLnByb3RvdHlwZS5pc0VuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgcmVxdWVzdCA9IHNlbGYucmVxdWVzdFxuICAgIC8vIFR1bm5lbCBIVFRQUyBieSBkZWZhdWx0LiBBbGxvdyB0aGUgdXNlciB0byBvdmVycmlkZSB0aGlzIHNldHRpbmcuXG5cbiAgLy8gSWYgc2VsZi50dW5uZWxPdmVycmlkZSBpcyBzZXQgKHRoZSB1c2VyIHNwZWNpZmllZCBhIHZhbHVlKSwgdXNlIGl0LlxuICBpZiAodHlwZW9mIHNlbGYudHVubmVsT3ZlcnJpZGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHNlbGYudHVubmVsT3ZlcnJpZGVcbiAgfVxuXG4gIC8vIElmIHRoZSBkZXN0aW5hdGlvbiBpcyBIVFRQUywgdHVubmVsLlxuICBpZiAocmVxdWVzdC51cmkucHJvdG9jb2wgPT09ICdodHRwczonKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgZG8gbm90IHVzZSB0dW5uZWwuXG4gIHJldHVybiBmYWxzZVxufVxuXG5UdW5uZWwucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciByZXF1ZXN0ID0gc2VsZi5yZXF1ZXN0XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAodHlwZW9mIHJlcXVlc3QucHJveHkgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVxdWVzdC5wcm94eSA9IHVybC5wYXJzZShyZXF1ZXN0LnByb3h5KVxuICB9XG5cbiAgaWYgKCFyZXF1ZXN0LnByb3h5IHx8ICFyZXF1ZXN0LnR1bm5lbCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gU2V0dXAgUHJveHkgSGVhZGVyIEV4Y2x1c2l2ZSBMaXN0IGFuZCBXaGl0ZSBMaXN0XG4gIGlmIChvcHRpb25zLnByb3h5SGVhZGVyV2hpdGVMaXN0KSB7XG4gICAgc2VsZi5wcm94eUhlYWRlcldoaXRlTGlzdCA9IG9wdGlvbnMucHJveHlIZWFkZXJXaGl0ZUxpc3RcbiAgfVxuICBpZiAob3B0aW9ucy5wcm94eUhlYWRlckV4Y2x1c2l2ZUxpc3QpIHtcbiAgICBzZWxmLnByb3h5SGVhZGVyRXhjbHVzaXZlTGlzdCA9IG9wdGlvbnMucHJveHlIZWFkZXJFeGNsdXNpdmVMaXN0XG4gIH1cblxuICB2YXIgcHJveHlIZWFkZXJFeGNsdXNpdmVMaXN0ID0gc2VsZi5wcm94eUhlYWRlckV4Y2x1c2l2ZUxpc3QuY29uY2F0KGRlZmF1bHRQcm94eUhlYWRlckV4Y2x1c2l2ZUxpc3QpXG4gIHZhciBwcm94eUhlYWRlcldoaXRlTGlzdCA9IHNlbGYucHJveHlIZWFkZXJXaGl0ZUxpc3QuY29uY2F0KHByb3h5SGVhZGVyRXhjbHVzaXZlTGlzdClcblxuICAvLyBTZXR1cCBQcm94eSBIZWFkZXJzIGFuZCBQcm94eSBIZWFkZXJzIEhvc3RcbiAgLy8gT25seSBzZW5kIHRoZSBQcm94eSBXaGl0ZSBMaXN0ZWQgSGVhZGVyIG5hbWVzXG4gIHZhciBwcm94eUhlYWRlcnMgPSBjb25zdHJ1Y3RQcm94eUhlYWRlcldoaXRlTGlzdChyZXF1ZXN0LmhlYWRlcnMsIHByb3h5SGVhZGVyV2hpdGVMaXN0KVxuICBwcm94eUhlYWRlcnMuaG9zdCA9IGNvbnN0cnVjdFByb3h5SG9zdChyZXF1ZXN0LnVyaSlcblxuICBwcm94eUhlYWRlckV4Y2x1c2l2ZUxpc3QuZm9yRWFjaChyZXF1ZXN0LnJlbW92ZUhlYWRlciwgcmVxdWVzdClcblxuICAvLyBTZXQgQWdlbnQgZnJvbSBUdW5uZWwgRGF0YVxuICB2YXIgdHVubmVsRm4gPSBnZXRUdW5uZWxGbihyZXF1ZXN0KVxuICB2YXIgdHVubmVsT3B0aW9ucyA9IGNvbnN0cnVjdFR1bm5lbE9wdGlvbnMocmVxdWVzdCwgcHJveHlIZWFkZXJzKVxuICByZXF1ZXN0LmFnZW50ID0gdHVubmVsRm4odHVubmVsT3B0aW9ucylcblxuICByZXR1cm4gdHJ1ZVxufVxuXG5UdW5uZWwuZGVmYXVsdFByb3h5SGVhZGVyV2hpdGVMaXN0ID0gZGVmYXVsdFByb3h5SGVhZGVyV2hpdGVMaXN0XG5UdW5uZWwuZGVmYXVsdFByb3h5SGVhZGVyRXhjbHVzaXZlTGlzdCA9IGRlZmF1bHRQcm94eUhlYWRlckV4Y2x1c2l2ZUxpc3RcbmV4cG9ydHMuVHVubmVsID0gVHVubmVsXG4iLCIndXNlIHN0cmljdCdcblxudmFyIG5ldCA9IHJlcXVpcmUoJ25ldCcpXG4gICwgdGxzID0gcmVxdWlyZSgndGxzJylcbiAgLCBodHRwID0gcmVxdWlyZSgnaHR0cCcpXG4gICwgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpXG4gICwgZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJylcbiAgLCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKVxuICAsIHV0aWwgPSByZXF1aXJlKCd1dGlsJylcbiAgLCBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuICA7XG5cbmV4cG9ydHMuaHR0cE92ZXJIdHRwID0gaHR0cE92ZXJIdHRwXG5leHBvcnRzLmh0dHBzT3Zlckh0dHAgPSBodHRwc092ZXJIdHRwXG5leHBvcnRzLmh0dHBPdmVySHR0cHMgPSBodHRwT3Zlckh0dHBzXG5leHBvcnRzLmh0dHBzT3Zlckh0dHBzID0gaHR0cHNPdmVySHR0cHNcblxuXG5mdW5jdGlvbiBodHRwT3Zlckh0dHAob3B0aW9ucykge1xuICB2YXIgYWdlbnQgPSBuZXcgVHVubmVsaW5nQWdlbnQob3B0aW9ucylcbiAgYWdlbnQucmVxdWVzdCA9IGh0dHAucmVxdWVzdFxuICByZXR1cm4gYWdlbnRcbn1cblxuZnVuY3Rpb24gaHR0cHNPdmVySHR0cChvcHRpb25zKSB7XG4gIHZhciBhZ2VudCA9IG5ldyBUdW5uZWxpbmdBZ2VudChvcHRpb25zKVxuICBhZ2VudC5yZXF1ZXN0ID0gaHR0cC5yZXF1ZXN0XG4gIGFnZW50LmNyZWF0ZVNvY2tldCA9IGNyZWF0ZVNlY3VyZVNvY2tldFxuICBhZ2VudC5kZWZhdWx0UG9ydCA9IDQ0M1xuICByZXR1cm4gYWdlbnRcbn1cblxuZnVuY3Rpb24gaHR0cE92ZXJIdHRwcyhvcHRpb25zKSB7XG4gIHZhciBhZ2VudCA9IG5ldyBUdW5uZWxpbmdBZ2VudChvcHRpb25zKVxuICBhZ2VudC5yZXF1ZXN0ID0gaHR0cHMucmVxdWVzdFxuICByZXR1cm4gYWdlbnRcbn1cblxuZnVuY3Rpb24gaHR0cHNPdmVySHR0cHMob3B0aW9ucykge1xuICB2YXIgYWdlbnQgPSBuZXcgVHVubmVsaW5nQWdlbnQob3B0aW9ucylcbiAgYWdlbnQucmVxdWVzdCA9IGh0dHBzLnJlcXVlc3RcbiAgYWdlbnQuY3JlYXRlU29ja2V0ID0gY3JlYXRlU2VjdXJlU29ja2V0XG4gIGFnZW50LmRlZmF1bHRQb3J0ID0gNDQzXG4gIHJldHVybiBhZ2VudFxufVxuXG5cbmZ1bmN0aW9uIFR1bm5lbGluZ0FnZW50KG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHNlbGYub3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgc2VsZi5wcm94eU9wdGlvbnMgPSBzZWxmLm9wdGlvbnMucHJveHkgfHwge31cbiAgc2VsZi5tYXhTb2NrZXRzID0gc2VsZi5vcHRpb25zLm1heFNvY2tldHMgfHwgaHR0cC5BZ2VudC5kZWZhdWx0TWF4U29ja2V0c1xuICBzZWxmLnJlcXVlc3RzID0gW11cbiAgc2VsZi5zb2NrZXRzID0gW11cblxuICBzZWxmLm9uKCdmcmVlJywgZnVuY3Rpb24gb25GcmVlKHNvY2tldCwgaG9zdCwgcG9ydCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWxmLnJlcXVlc3RzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB2YXIgcGVuZGluZyA9IHNlbGYucmVxdWVzdHNbaV1cbiAgICAgIGlmIChwZW5kaW5nLmhvc3QgPT09IGhvc3QgJiYgcGVuZGluZy5wb3J0ID09PSBwb3J0KSB7XG4gICAgICAgIC8vIERldGVjdCB0aGUgcmVxdWVzdCB0byBjb25uZWN0IHNhbWUgb3JpZ2luIHNlcnZlcixcbiAgICAgICAgLy8gcmV1c2UgdGhlIGNvbm5lY3Rpb24uXG4gICAgICAgIHNlbGYucmVxdWVzdHMuc3BsaWNlKGksIDEpXG4gICAgICAgIHBlbmRpbmcucmVxdWVzdC5vblNvY2tldChzb2NrZXQpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBzb2NrZXQuZGVzdHJveSgpXG4gICAgc2VsZi5yZW1vdmVTb2NrZXQoc29ja2V0KVxuICB9KVxufVxudXRpbC5pbmhlcml0cyhUdW5uZWxpbmdBZ2VudCwgZXZlbnRzLkV2ZW50RW1pdHRlcilcblxuVHVubmVsaW5nQWdlbnQucHJvdG90eXBlLmFkZFJlcXVlc3QgPSBmdW5jdGlvbiBhZGRSZXF1ZXN0KHJlcSwgb3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICAgLy8gTGVnYWN5IEFQSTogYWRkUmVxdWVzdChyZXEsIGhvc3QsIHBvcnQsIHBhdGgpXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgaG9zdDogb3B0aW9ucyxcbiAgICAgIHBvcnQ6IGFyZ3VtZW50c1syXSxcbiAgICAgIHBhdGg6IGFyZ3VtZW50c1szXVxuICAgIH07XG4gIH1cblxuICBpZiAoc2VsZi5zb2NrZXRzLmxlbmd0aCA+PSB0aGlzLm1heFNvY2tldHMpIHtcbiAgICAvLyBXZSBhcmUgb3ZlciBsaW1pdCBzbyB3ZSdsbCBhZGQgaXQgdG8gdGhlIHF1ZXVlLlxuICAgIHNlbGYucmVxdWVzdHMucHVzaCh7aG9zdDogb3B0aW9ucy5ob3N0LCBwb3J0OiBvcHRpb25zLnBvcnQsIHJlcXVlc3Q6IHJlcX0pXG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBJZiB3ZSBhcmUgdW5kZXIgbWF4U29ja2V0cyBjcmVhdGUgYSBuZXcgb25lLlxuICBzZWxmLmNyZWF0ZUNvbm5lY3Rpb24oe2hvc3Q6IG9wdGlvbnMuaG9zdCwgcG9ydDogb3B0aW9ucy5wb3J0LCByZXF1ZXN0OiByZXF9KVxufVxuXG5UdW5uZWxpbmdBZ2VudC5wcm90b3R5cGUuY3JlYXRlQ29ubmVjdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3Rpb24ocGVuZGluZykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBzZWxmLmNyZWF0ZVNvY2tldChwZW5kaW5nLCBmdW5jdGlvbihzb2NrZXQpIHtcbiAgICBzb2NrZXQub24oJ2ZyZWUnLCBvbkZyZWUpXG4gICAgc29ja2V0Lm9uKCdjbG9zZScsIG9uQ2xvc2VPclJlbW92ZSlcbiAgICBzb2NrZXQub24oJ2FnZW50UmVtb3ZlJywgb25DbG9zZU9yUmVtb3ZlKVxuICAgIHBlbmRpbmcucmVxdWVzdC5vblNvY2tldChzb2NrZXQpXG5cbiAgICBmdW5jdGlvbiBvbkZyZWUoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2ZyZWUnLCBzb2NrZXQsIHBlbmRpbmcuaG9zdCwgcGVuZGluZy5wb3J0KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ2xvc2VPclJlbW92ZShlcnIpIHtcbiAgICAgIHNlbGYucmVtb3ZlU29ja2V0KHNvY2tldClcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZnJlZScsIG9uRnJlZSlcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbkNsb3NlT3JSZW1vdmUpXG4gICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2FnZW50UmVtb3ZlJywgb25DbG9zZU9yUmVtb3ZlKVxuICAgIH1cbiAgfSlcbn1cblxuVHVubmVsaW5nQWdlbnQucHJvdG90eXBlLmNyZWF0ZVNvY2tldCA9IGZ1bmN0aW9uIGNyZWF0ZVNvY2tldChvcHRpb25zLCBjYikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHBsYWNlaG9sZGVyID0ge31cbiAgc2VsZi5zb2NrZXRzLnB1c2gocGxhY2Vob2xkZXIpXG5cbiAgdmFyIGNvbm5lY3RPcHRpb25zID0gbWVyZ2VPcHRpb25zKHt9LCBzZWxmLnByb3h5T3B0aW9ucyxcbiAgICB7IG1ldGhvZDogJ0NPTk5FQ1QnXG4gICAgLCBwYXRoOiBvcHRpb25zLmhvc3QgKyAnOicgKyBvcHRpb25zLnBvcnRcbiAgICAsIGFnZW50OiBmYWxzZVxuICAgIH1cbiAgKVxuICBpZiAoY29ubmVjdE9wdGlvbnMucHJveHlBdXRoKSB7XG4gICAgY29ubmVjdE9wdGlvbnMuaGVhZGVycyA9IGNvbm5lY3RPcHRpb25zLmhlYWRlcnMgfHwge31cbiAgICBjb25uZWN0T3B0aW9ucy5oZWFkZXJzWydQcm94eS1BdXRob3JpemF0aW9uJ10gPSAnQmFzaWMgJyArXG4gICAgICAgIEJ1ZmZlci5mcm9tKGNvbm5lY3RPcHRpb25zLnByb3h5QXV0aCkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gIH1cblxuICBkZWJ1ZygnbWFraW5nIENPTk5FQ1QgcmVxdWVzdCcpXG4gIHZhciBjb25uZWN0UmVxID0gc2VsZi5yZXF1ZXN0KGNvbm5lY3RPcHRpb25zKVxuICBjb25uZWN0UmVxLnVzZUNodW5rZWRFbmNvZGluZ0J5RGVmYXVsdCA9IGZhbHNlIC8vIGZvciB2MC42XG4gIGNvbm5lY3RSZXEub25jZSgncmVzcG9uc2UnLCBvblJlc3BvbnNlKSAvLyBmb3IgdjAuNlxuICBjb25uZWN0UmVxLm9uY2UoJ3VwZ3JhZGUnLCBvblVwZ3JhZGUpICAgLy8gZm9yIHYwLjZcbiAgY29ubmVjdFJlcS5vbmNlKCdjb25uZWN0Jywgb25Db25uZWN0KSAgIC8vIGZvciB2MC43IG9yIGxhdGVyXG4gIGNvbm5lY3RSZXEub25jZSgnZXJyb3InLCBvbkVycm9yKVxuICBjb25uZWN0UmVxLmVuZCgpXG5cbiAgZnVuY3Rpb24gb25SZXNwb25zZShyZXMpIHtcbiAgICAvLyBWZXJ5IGhhY2t5LiBUaGlzIGlzIG5lY2Vzc2FyeSB0byBhdm9pZCBodHRwLXBhcnNlciBsZWFrcy5cbiAgICByZXMudXBncmFkZSA9IHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVXBncmFkZShyZXMsIHNvY2tldCwgaGVhZCkge1xuICAgIC8vIEhhY2t5LlxuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBvbkNvbm5lY3QocmVzLCBzb2NrZXQsIGhlYWQpXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ29ubmVjdChyZXMsIHNvY2tldCwgaGVhZCkge1xuICAgIGNvbm5lY3RSZXEucmVtb3ZlQWxsTGlzdGVuZXJzKClcbiAgICBzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKClcblxuICAgIGlmIChyZXMuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4gICAgICBhc3NlcnQuZXF1YWwoaGVhZC5sZW5ndGgsIDApXG4gICAgICBkZWJ1ZygndHVubmVsaW5nIGNvbm5lY3Rpb24gaGFzIGVzdGFibGlzaGVkJylcbiAgICAgIHNlbGYuc29ja2V0c1tzZWxmLnNvY2tldHMuaW5kZXhPZihwbGFjZWhvbGRlcildID0gc29ja2V0XG4gICAgICBjYihzb2NrZXQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCd0dW5uZWxpbmcgc29ja2V0IGNvdWxkIG5vdCBiZSBlc3RhYmxpc2hlZCwgc3RhdHVzQ29kZT0lZCcsIHJlcy5zdGF0dXNDb2RlKVxuICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCd0dW5uZWxpbmcgc29ja2V0IGNvdWxkIG5vdCBiZSBlc3RhYmxpc2hlZCwgJyArICdzdGF0dXNDb2RlPScgKyByZXMuc3RhdHVzQ29kZSlcbiAgICAgIGVycm9yLmNvZGUgPSAnRUNPTk5SRVNFVCdcbiAgICAgIG9wdGlvbnMucmVxdWVzdC5lbWl0KCdlcnJvcicsIGVycm9yKVxuICAgICAgc2VsZi5yZW1vdmVTb2NrZXQocGxhY2Vob2xkZXIpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25FcnJvcihjYXVzZSkge1xuICAgIGNvbm5lY3RSZXEucmVtb3ZlQWxsTGlzdGVuZXJzKClcblxuICAgIGRlYnVnKCd0dW5uZWxpbmcgc29ja2V0IGNvdWxkIG5vdCBiZSBlc3RhYmxpc2hlZCwgY2F1c2U9JXNcXG4nLCBjYXVzZS5tZXNzYWdlLCBjYXVzZS5zdGFjaylcbiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ3R1bm5lbGluZyBzb2NrZXQgY291bGQgbm90IGJlIGVzdGFibGlzaGVkLCAnICsgJ2NhdXNlPScgKyBjYXVzZS5tZXNzYWdlKVxuICAgIGVycm9yLmNvZGUgPSAnRUNPTk5SRVNFVCdcbiAgICBvcHRpb25zLnJlcXVlc3QuZW1pdCgnZXJyb3InLCBlcnJvcilcbiAgICBzZWxmLnJlbW92ZVNvY2tldChwbGFjZWhvbGRlcilcbiAgfVxufVxuXG5UdW5uZWxpbmdBZ2VudC5wcm90b3R5cGUucmVtb3ZlU29ja2V0ID0gZnVuY3Rpb24gcmVtb3ZlU29ja2V0KHNvY2tldCkge1xuICB2YXIgcG9zID0gdGhpcy5zb2NrZXRzLmluZGV4T2Yoc29ja2V0KVxuICBpZiAocG9zID09PSAtMSkgcmV0dXJuXG5cbiAgdGhpcy5zb2NrZXRzLnNwbGljZShwb3MsIDEpXG5cbiAgdmFyIHBlbmRpbmcgPSB0aGlzLnJlcXVlc3RzLnNoaWZ0KClcbiAgaWYgKHBlbmRpbmcpIHtcbiAgICAvLyBJZiB3ZSBoYXZlIHBlbmRpbmcgcmVxdWVzdHMgYW5kIGEgc29ja2V0IGdldHMgY2xvc2VkIGEgbmV3IG9uZVxuICAgIC8vIG5lZWRzIHRvIGJlIGNyZWF0ZWQgdG8gdGFrZSBvdmVyIGluIHRoZSBwb29sIGZvciB0aGUgb25lIHRoYXQgY2xvc2VkLlxuICAgIHRoaXMuY3JlYXRlQ29ubmVjdGlvbihwZW5kaW5nKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlY3VyZVNvY2tldChvcHRpb25zLCBjYikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgVHVubmVsaW5nQWdlbnQucHJvdG90eXBlLmNyZWF0ZVNvY2tldC5jYWxsKHNlbGYsIG9wdGlvbnMsIGZ1bmN0aW9uKHNvY2tldCkge1xuICAgIC8vIDAgaXMgZHVtbXkgcG9ydCBmb3IgdjAuNlxuICAgIHZhciBzZWN1cmVTb2NrZXQgPSB0bHMuY29ubmVjdCgwLCBtZXJnZU9wdGlvbnMoe30sIHNlbGYub3B0aW9ucyxcbiAgICAgIHsgc2VydmVybmFtZTogb3B0aW9ucy5ob3N0XG4gICAgICAsIHNvY2tldDogc29ja2V0XG4gICAgICB9XG4gICAgKSlcbiAgICBzZWxmLnNvY2tldHNbc2VsZi5zb2NrZXRzLmluZGV4T2Yoc29ja2V0KV0gPSBzZWN1cmVTb2NrZXRcbiAgICBjYihzZWN1cmVTb2NrZXQpXG4gIH0pXG59XG5cblxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIG92ZXJyaWRlcyA9IGFyZ3VtZW50c1tpXVxuICAgIGlmICh0eXBlb2Ygb3ZlcnJpZGVzID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvdmVycmlkZXMpXG4gICAgICBmb3IgKHZhciBqID0gMCwga2V5TGVuID0ga2V5cy5sZW5ndGg7IGogPCBrZXlMZW47ICsraikge1xuICAgICAgICB2YXIgayA9IGtleXNbal1cbiAgICAgICAgaWYgKG92ZXJyaWRlc1trXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGFyZ2V0W2tdID0gb3ZlcnJpZGVzW2tdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldFxufVxuXG5cbnZhciBkZWJ1Z1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfREVCVUcgJiYgL1xcYnR1bm5lbFxcYi8udGVzdChwcm9jZXNzLmVudi5OT0RFX0RFQlVHKSkge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGFyZ3NbMF0gPSAnVFVOTkVMOiAnICsgYXJnc1swXVxuICAgIH0gZWxzZSB7XG4gICAgICBhcmdzLnVuc2hpZnQoJ1RVTk5FTDonKVxuICAgIH1cbiAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIGFyZ3MpXG4gIH1cbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24oKSB7fVxufVxuZXhwb3J0cy5kZWJ1ZyA9IGRlYnVnIC8vIGZvciB0ZXN0XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJldmVudHNcIik7IiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjJcbihmdW5jdGlvbigpIHtcbiAgdmFyIGdldE5hbm9TZWNvbmRzLCBocnRpbWUsIGxvYWRUaW1lLCBtb2R1bGVMb2FkVGltZSwgbm9kZUxvYWRUaW1lLCB1cFRpbWU7XG5cbiAgaWYgKCh0eXBlb2YgcGVyZm9ybWFuY2UgIT09IFwidW5kZWZpbmVkXCIgJiYgcGVyZm9ybWFuY2UgIT09IG51bGwpICYmIHBlcmZvcm1hbmNlLm5vdykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgfTtcbiAgfSBlbHNlIGlmICgodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2VzcyAhPT0gbnVsbCkgJiYgcHJvY2Vzcy5ocnRpbWUpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIChnZXROYW5vU2Vjb25kcygpIC0gbm9kZUxvYWRUaW1lKSAvIDFlNjtcbiAgICB9O1xuICAgIGhydGltZSA9IHByb2Nlc3MuaHJ0aW1lO1xuICAgIGdldE5hbm9TZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaHI7XG4gICAgICBociA9IGhydGltZSgpO1xuICAgICAgcmV0dXJuIGhyWzBdICogMWU5ICsgaHJbMV07XG4gICAgfTtcbiAgICBtb2R1bGVMb2FkVGltZSA9IGdldE5hbm9TZWNvbmRzKCk7XG4gICAgdXBUaW1lID0gcHJvY2Vzcy51cHRpbWUoKSAqIDFlOTtcbiAgICBub2RlTG9hZFRpbWUgPSBtb2R1bGVMb2FkVGltZSAtIHVwVGltZTtcbiAgfSBlbHNlIGlmIChEYXRlLm5vdykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIGxvYWRUaW1lO1xuICAgIH07XG4gICAgbG9hZFRpbWUgPSBEYXRlLm5vdygpO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH1cblxufSkuY2FsbCh0aGlzKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVyZm9ybWFuY2Utbm93LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwbGljYXRpb25Qcm9wZXJ0aWVzQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL2FwcGxpY2F0aW9uLXByb3BlcnRpZXMnXG4gKiBAY29uc3RydWN0b3IgQXBwbGljYXRpb25Qcm9wZXJ0aWVzQ2xpZW50XG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqL1xuZnVuY3Rpb24gQXBwbGljYXRpb25Qcm9wZXJ0aWVzQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbiBhcHBsaWNhdGlvbiBwcm9wZXJ0eS5cbiAgICAgKiBAbWV0aG9kIGdldFByb3BlcnRpZXNcbiAgICAgKiBAbWVtYmVyT2YgQXBwbGljYXRpb25Qcm9wZXJ0aWVzQ2xpZW50I1xuICAgICAqIEBwYXJhbSBbb3B0c10gVGhlIG9wdGlvbnMgdXNlZCB0byBtYWtlIHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSBbb3B0cy5rZXldIEEgU3RyaW5nIGNvbnRhaW5pbmcgdGhlIHByb3BlcnR5IGtleS5cbiAgICAgKiBAcGFyYW0gW29wdHMucGVybWlzc2lvbkxldmVsXSBXaGVuIGZldGNoaW5nIGEgbGlzdCBzcGVjaWZpZXMgdGhlIHBlcm1pc3Npb24gbGV2ZWwgb2YgYWxsIGl0ZW1zIGluIHRoZSBsaXN0LlxuICAgICAqIEBwYXJhbSBbb3B0cy5rZXlGaWx0ZXJdIFdoZW4gZmV0Y2hpbmcgYSBsaXN0IGFsbG93cyB0aGUgbGlzdCB0byBiZSBmaWx0ZXJlZCBieSB0aGUgcHJvcGVydHkncyBzdGFydCBvZiBrZXkgZS5nLlxuICAgICAqICAgICBcImppcmEubGYuKlwiIHdob3VsZCBmZXRjaCBvbmx5IHRob3NlIHBlcm1pc3Npb25zIHRoYXQgYXJlIGVkaXRhYmxlIGFuZCB3aG9zZSBrZXlzIHN0YXJ0IHdpdGggXCJqaXJhLmxmLlwiLiBUaGlzXG4gICAgICogICAgIGlzIGEgcmVnZXhcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcHJvcGVydGllcyBhcmUgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHByb3BlcnRpZXMgYXJlIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFByb3BlcnRpZXMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHFzID0ge307XG4gICAgICAgIGlmIChvcHRzKSB7XG4gICAgICAgICAgICBpZiAob3B0cy5rZXkpIHtcbiAgICAgICAgICAgICAgICBxcy5rZXkgPSBvcHRzLmtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLmtleUZpbHRlcikge1xuICAgICAgICAgICAgICAgIHFzLmtleUZpbHRlciA9IG9wdHMua2V5RmlsdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdHMucGVybWlzc2lvbkxldmVsKSB7XG4gICAgICAgICAgICAgICAgcXMua2V5RmlsdGVyID0gb3B0cy5wZXJtaXNzaW9uTGV2ZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvYXBwbGljYXRpb24tcHJvcGVydGllcycpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiBxc1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNb2RpZnkgYW4gYXBwbGljYXRpb24gcHJvcGVydHkgdmlhIFBVVC4gVGhlIFwidmFsdWVcIiBmaWVsZCBwcmVzZW50IGluIHRoZSBQVVQgd2lsbCBvdmVycmlkZSB0aGVlIGV4aXN0aW5nIHZhbHVlLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRQcm9wZXJ0aWVzXG4gICAgICogQG1lbWJlck9mIEFwcGxpY2F0aW9uUHJvcGVydGllc0NsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgb3B0aW9ucyBmb3IgbW9kaWZ5aW5nIHRoZSBhcHBsaWNhdGlvbiBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0gb3B0cy5pZCBUaGUgaWQgb2YgdGhlIHByb3BlcnR5IHRvIGJlIG1vZGlmaWVkXG4gICAgICogQHBhcmFtIG9wdHMucHJvcGVydHkgVGhlIG5ldyBkYXRhIGZvciB0aGUgcHJvcGVydHkuICBTZWVcbiAgICAgKiAgICAge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTQ4OTF9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHByb3BlcnR5IGhhcyBiZWVuIG1vZGlmaWVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcHJvcGVydHkgaGFzIGJlZW4gbW9kaWZpZWRcbiAgICAgKi9cbiAgICB0aGlzLnNldFByb3BlcnR5ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9hcHBsaWNhdGlvbi1wcm9wZXJ0aWVzJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgYm9keTogb3B0cy5wcm9wZXJ0eVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdQcm9wZXJ0eSBVcGRhdGVkJyk7XG4gICAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGVycm9yU3RyaW5ncyA9IHJlcXVpcmUoJy4vLi4vbGliL2Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXR0YWNobWVudENsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9hdGFjaG1lbnQnXG4gKlxuICogQGNvbnN0cnVjdG9yIEF0dGFjaG1lbnRDbGllbnRcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICovXG5mdW5jdGlvbiBBdHRhY2htZW50Q2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWV0YS1kYXRhIGZvciBhbiBhdHRhY2htZW50LCBpbmNsdWRpbmcgdGhlIFVSSSBvZiB0aGUgYWN0dWFsIGF0dGFjaGVkIGZpbGUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEF0dGFjaG1lbnRcbiAgICAgKiBAbWVtYmVyT2YgQXR0YWNobWVudENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgb3B0aW9ucyBmb3IgdGhlIEFQSSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSBvcHRzLmF0dGFjaG1lbnRJZCBUaGUgaWQgb2YgdGhlIGF0dGFjaG1lbnQgdG8gcmV0cmlldmVcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgYXR0YWNobWVudCBtZXRhZGF0YSBpcyByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgYXR0YWNobWVudCBtZXRhZGF0YSBpcyByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRBdHRhY2htZW50ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5hdHRhY2htZW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fQVRUQUNITUVOVF9JRF9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvYXR0YWNobWVudC8nICsgb3B0cy5hdHRhY2htZW50SWQpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGF0dGFjaG1lbnQgZnJvbSBhbiBpc3N1ZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlQXR0YWNobWVudFxuICAgICAqIEBtZW1iZXJPZiBBdHRhY2htZW50Q2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBvcHRpb25zIGZvciB0aGUgQVBJIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIG9wdHMuYXR0YWNobWVudElkIFRoZSBpZCBvZiB0aGUgYXR0YWNobWVudCB0byBkZWxldGVcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgYXR0YWNobWVudCBpcyBkZWxldGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGF0dGFjaG1lbnQgaXMgZGVsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZUF0dGFjaG1lbnQgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLmF0dGFjaG1lbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19BVFRBQ0hNRU5UX0lEX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9hdHRhY2htZW50LycgKyBvcHRzLmF0dGFjaG1lbnRJZCksXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdBdHRhY2htZW50IERlbGV0ZWQnKTtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtZXRhIGluZm9ybWF0aW9ucyBmb3IgYW4gYXR0YWNobWVudHMsIHNwZWNpZmljYWxseSBpZiB0aGV5IGFyZSBlbmFibGVkIGFuZCB0aGUgbWF4aW11bSB1cGxvYWQgc2l6ZVxuICAgICAqIGFsbG93ZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEdsb2JhbEF0dGFjaG1lbnRNZXRhZGF0YVxuICAgICAqIEBtZW1iZXJPZiBBdHRhY2htZW50Q2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoaXMgQVBJIHJlcXVlc3QgYWN0dWFsbHkgdGFrZXMgbm8gb3B0aW9uczsgdGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgbWV0YWRhdGEgaXMgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIG1ldGFkYXRhIGlzIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldEdsb2JhbEF0dGFjaG1lbnRNZXRhZGF0YSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvYXR0YWNobWVudC9tZXRhJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlcnJvclN0cmluZ3MgPSByZXF1aXJlKCcuLy4uL2xpYi9lcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1ZGl0aW5nQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL2F1ZGl0aW5nJ1xuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgQXVkaXRpbmdDbGllbnRcbiAqL1xuZnVuY3Rpb24gQXVkaXRpbmdDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGF1ZGl0aW5nIHJlY29yZHMgZmlsdGVyZWQgdXNpbmcgcHJvdmlkZWQgcGFyYW1ldGVyc1xuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBdWRpdHNcbiAgICAgKiBAbWVtYmVyT2YgQXVkaXRpbmdDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIGZpbHRlcmluZyBvcHRpb25zIGZvciByZXRyaWV2aW5nIGF1ZGl0cy5cbiAgICAgKiBAcGFyYW0gW29wdHMub2Zmc2V0XSBUaGUgbnVtYmVyIG9mIHJlY29yZCBmcm9tIHdoaWNoIHNlYXJjaCBzdGFydHNcbiAgICAgKiBAcGFyYW0gW29wdHMubGltaXRdIE1heGltdW0gbnVtYmVyIG9mIHJldHVybmVkIHJlc3VsdHMgKGlmIGlzIGxpbWl0IGlzIDw9IDAgb3IgPiAxMDAwLCBpdCB3aWxsIGJlIHNldCBkbyBkZWZhdWx0XG4gICAgICogICAgIHZhbHVlOiAxMDAwKVxuICAgICAqIEBwYXJhbSBbb3B0cy5maWx0ZXJdIFRleHQgcXVlcnk7IGVhY2ggcmVjb3JkIHRoYXQgd2lsbCBiZSByZXR1cm5lZCBtdXN0IGNvbnRhaW4gdGhlIHByb3ZpZGVkIHRleHQgaW4gb25lIG9mIGl0c1xuICAgICAqICAgICBmaWVsZHNcbiAgICAgKiBAcGFyYW0gW29wdHMuZnJvbV0gVGltZXN0YW1wIGluIHBhc3Q7ICdmcm9tJyBtdXN0IGJlIGxlc3Mgb3IgZXF1YWwgJ3RvJywgb3RoZXJ3aXNlIHRoZSByZXN1bHQgc2V0IHdpbGwgYmUgZW1wdHlcbiAgICAgKiAgICAgb25seSByZWNvcmRzIHRoYXQgd2hlcmUgY3JlYXRlZCBpbiB0aGUgc2FtZSBtb21lbnQgb3IgYWZ0ZXIgdGhlICdmcm9tJyB0aW1lc3RhbXAgd2lsbCBiZSBwcm92aWRlZCBpblxuICAgICAqICAgICByZXNwb25zZVxuICAgICAqIEBwYXJhbSBbb3B0cy50b10gVGltZXN0YW1wIGluIHBhc3Q7ICdmcm9tJyBtdXN0IGJlIGxlc3Mgb3IgZXF1YWwgJ3RvJywgb3RoZXJ3aXNlIHRoZSByZXN1bHQgc2V0IHdpbGwgYmUgZW1wdHlcbiAgICAgKiAgICAgb25seSByZWNvcmRzIHRoYXQgd2hlcmUgY3JlYXRlZCBpbiB0aGUgc2FtZSBtb21lbnQgb3IgZWFybGllciB0aGFuIHRoZSAndG8nIHRpbWVzdGFtcCB3aWxsIGJlIHByb3ZpZGVkIGluXG4gICAgICogICAgIHJlc3BvbnNlXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGF1ZGl0cyBhcmUgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGF1ZGl0cyBhcmUgcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0QXVkaXRzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9hdWRpdGluZy9yZWNvcmQnKSxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IG9wdHMub2Zmc2V0LFxuICAgICAgICAgICAgICAgIGxpbWl0OiBvcHRzLmxpbWl0LFxuICAgICAgICAgICAgICAgIGZpbHRlcjogb3B0cy5maWx0ZXIsXG4gICAgICAgICAgICAgICAgZnJvbTogb3B0cy5mcm9tLFxuICAgICAgICAgICAgICAgIHRvOiBvcHRzLnRvXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVBdWRpdFxuICAgICAqIEBtZW1iZXJPZiBBdWRpdGluZ0NsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBvcHRzLmF1ZGl0IFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMjU1N31cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgYXVkaXQgaXMgY3JlYXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBhdWRpdCBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlQXVkaXQgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLmF1ZGl0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0FVRElUX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9hdWRpdGluZy9yZWNvcmQnKSxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMuYXVkaXRcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnQXVkaXQgUmVjb3JkIEFkZGVkJyk7XG4gICAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXV0aC8xL3Nlc3Npb24nXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgVXNlckNsaWVudFxuICovXG5mdW5jdGlvbiBBdXRoQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogTG9ncyB0aGUgY3VycmVudCB1c2VyIG91dCBvZiBKSVJBLCBkZXN0cm95aW5nIHRoZSBleGlzdGluZyBzZXNzaW9uLCBpZiBhbnkuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGxvZ291dFxuICAgICAqIEBtZW1iZXJPZiBBdXRoI1xuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB1c2VyIGhhcyBiZWVuIGxvZ2dlZCBvdXQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgdXNlciBoYXMgYmVlbiBsb2dnZWQgb3V0LlxuICAgICAqL1xuICAgIHRoaXMubG9nb3V0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRBdXRoVVJMKCcvc2Vzc2lvbicpLFxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKSwgJ1VzZXIgbG9nZ2VkIG91dC4nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHNlc3Npb24gZm9yIGEgdXNlciBpbiBKSVJBLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBsb2dpblxuICAgICAqIEBtZW1iZXJPZiBBdXRoI1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy51c2VybmFtZSBUaGUgbmFtZSBvZiB0aGUgdXNlciB0byBsb2dpbi5cbiAgICAgKiBAcGFyYW0gb3B0cy5wYXNzd29yZCBUaGUgcGFzc3dvcmQgb2YgdGhlIHVzZXIuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHVzZXIgaGFzIGJlZW4gbG9nZ2VkIGluLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHVzZXIgaGFzIGJlZW4gbG9nZ2VkIGluLlxuICAgICAqL1xuICAgIHRoaXMubG9naW4gPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEF1dGhVUkwoJy9zZXNzaW9uJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiBvcHRzXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ1VzZXIgbG9nZ2VkIGluLicpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgY3VycmVudCBVc2VyLiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50bHkgYXV0aGVudGljYXRlZCB1c2VyJ3Mgc2Vzc2lvbi5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3VycmVudFVzZXJcbiAgICAgKiBAbWVtYmVyT2YgQXV0aCNcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgY3VycmVudCB1c2VyIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB1c2VyIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmN1cnJlbnRVc2VyID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9zZXNzaW9uJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBlcnJvclN0cmluZ3MgPSByZXF1aXJlKCcuLy4uL2xpYi9lcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF2YXRhckNsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9hdmF0YXInXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBBdmF0YXJDbGllbnRcbiAqL1xuZnVuY3Rpb24gQXZhdGFyQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgc3lzdGVtIGF2YXRhcnMgb2YgdGhlIGdpdmVuIHR5cGUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEF2YXRhcnNcbiAgICAgKiBAbWVtYmVyT2YgQXZhdGFyQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgaW4gdGhlIEFQSSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSBvcHRzLmF2YXRhclR5cGUgVGhlIGF2YXRhciB0eXBlLiAgTWF5IGJlICdwcm9qZWN0JyBvciAndXNlcicuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGF2YXRhcnMgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBhdmF0YXJzIGFyZSByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRBdmF0YXJzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5hdmF0YXJUeXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0FWQVRBUl9UWVBFX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9hdmF0YXIvJyArIG9wdHMuYXZhdGFyVHlwZSArICcvc3lzdGVtJylcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRlbXBvcmFyeSBhdmF0YXIuICBUaGlzIGZ1bmN0aW9uIGRvZXNuJ3Qgc2VlbSB0byB3b3JrIHRoZSB3YXkgdGhlIEppcmEgQVBJIGRlc2NyaWJlcywgc28gZm9yIG5vd1xuICAgICAqIGp1c3QgZG9uJ3QgdXNlIGl0LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVUZW1wb3JhcnlBdmF0YXJcbiAgICAgKiBAbWVtYmVyT2YgQXZhdGFyQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgaW4gdGhlIEFQSSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSBvcHRzLmF2YXRhclR5cGUgVGhlIGF2YXRhciB0eXBlLiAgTWF5IGJlICdwcm9qZWN0JyBvciAndXNlcicuXG4gICAgICogQHBhcmFtIG9wdHMuYXZhdGFyRmlsZW5hbWUgVGhlIG5hbWUgb2YgdGhlIGZpbGUgYmVpbmcgdXBsb2FkZWRcbiAgICAgKiBAcGFyYW0gb3B0cy5hdmF0YXJGaWxlU2l6ZSBUaGUgc2l6ZSBvZiB0aGUgZmlsZVxuICAgICAqIEBwYXJhbSBvcHRzLmF2YXRhckZpbGVQYXRoIFRoZSBwYXRoIHRvIHRoZSBhdmF0YXIgZmlsZS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgYXZhdGFyIGlzIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgYXZhdGFyIGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgdGhpcy5jcmVhdGVUZW1wb3JhcnlBdmF0YXIgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLmF2YXRhclR5cGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fQVZBVEFSX1RZUEVfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaXplID0gZnMuc3RhdFN5bmMob3B0cy5hdmF0YXJGaWxlUGF0aCkuc2l6ZTtcbiAgICAgICAgdmFyIG5hbWUgPSBwYXRoLmJhc2VuYW1lKG9wdHMuYXZhdGFyRmlsZVBhdGgpO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvYXZhdGFyLycgKyBvcHRzLmF2YXRhclR5cGUgKyAnL3RlbXBvcmFyeScpLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFwiWC1BdGxhc3NpYW4tVG9rZW5cIjogXCJuby1jaGVja1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICBzaXplOiBzaXplXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9ybURhdGE6IHtcbiAgICAgICAgICAgICAgICBmaWxlOiBmcy5jcmVhdGVSZWFkU3RyZWFtKG9wdHMuYXZhdGFyRmlsZVBhdGgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmJvZHk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGNyb3BwaW5nIGluc3RydWN0aW9ucyBvZiB0aGUgdGVtcG9yYXJ5IGF2YXRhci4gIFRoaXMgZnVuY3Rpb24gZG9lc24ndCBzZWVtIHRvIHdvcmsgdGhlIHdheSB0aGUgSmlyYVxuICAgICAqIEFQSSBkZXNjcmliZXMsIHNvIGZvciBub3cganVzdCBkb24ndCB1c2UgaXQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGNyb3BUZW1wb3JhcnlBdmF0YXJcbiAgICAgKiBAbWVtYmVyT2YgQXZhdGFyQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIGJlIHVzZWQgaW4gdGhlIEFQSSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmF2YXRhclR5cGUgVGhlIGF2YXRhciB0eXBlLiAgTWF5IGJlICdwcm9qZWN0JyBvciAndXNlcicuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMuY3JvcCBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTMzMTZ9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGF2YXRhciBoYXMgYmVlbiBjcm9wcGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGF2YXRhciBoYXMgYmVlbiBjcm9wcGVkLlxuICAgICAqL1xuICAgIHRoaXMuY3JvcFRlbXBvcmFyeUF2YXRhciA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIW9wdHMuYXZhdGFyVHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19BVkFUQVJfVFlQRV9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvYXZhdGFyLycgKyBvcHRzLmF2YXRhclR5cGUgKyAnL3RlbXBvcmFyeUNyb3AnKSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIlgtQXRsYXNzaWFuLVRva2VuXCI6IFwibm8tY2hlY2tcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMuY3JvcFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gQWdpbGVCb2FyZENsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hZ2lsZS8xLjAvZGFzaGJvYXJkJ1xuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgQWdpbGVCb2FyZENsaWVudFxuICovXG5mdW5jdGlvbiBBZ2lsZUJvYXJkQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAvKipcbiAgICogR2V0IGEgbGlzdCBvZiBhbGwgZGFzaGJvYXJkcywgb3B0aW9uYWxseSBmaWx0ZXJpbmcgdGhlbS5cbiAgICpcbiAgICogQG1ldGhvZCBnZXRBbGxCb2FyZHNcbiAgICogQG1lbWJlck9mIEFnaWxlQm9hcmRDbGllbnQjXG4gICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgdG8gc2VuZCB0byB0aGUgSmlyYSBBUElcbiAgICogQHBhcmFtIFtvcHRzLnR5cGVdIExpbWl0cyByZXR1cm5pbmcgYm9hcmRzIG9mIGEgc3BlY2lmaWMgdHlwZTogYHNjcnVtYCBvciBga2FuYmFuYC5cbiAgICogQHBhcmFtIFtvcHRzLnN0YXJ0QXRdIFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGFzaGJvYXJkIHRvIHJldHVybiAoMC1iYXNlZCkuIG11c3QgYmUgMCBvciBhIG11bHRpcGxlIG9mXG4gICAqICAgICBtYXhSZXN1bHRzXG4gICAqIEBwYXJhbSBbb3B0cy5uYW1lXSBGaWx0ZXJzIHJlc3VsdHMgdG8gYm9hcmRzIHRoYXQgbWF0Y2ggb3IgcGFydGlhbGx5IG1hdGNoIHRoZSBzcGVjaWZpZWQgbmFtZS5cbiAgICogQHBhcmFtIFtvcHRzLnByb2plY3RLZXlPcklkXSBGaWx0ZXJzIHJlc3VsdHMgdG8gYm9hcmRzIHRoYXQgYXJlIHJlbGV2YW50IHRvIGEgcHJvamVjdC4gUmVsZXZhbmNlIG1lYW5pbmcgdGhhdFxuICAgKiAgICAgdGhlIGpxbCBmaWx0ZXIgZGVmaW5lZCBpbiBib2FyZCBjb250YWlucyBhIHJlZmVyZW5jZSB0byBhIHByb2plY3QuXG4gICAqIEBwYXJhbSBbb3B0cy5tYXhSZXN1bHRzXSBBIGhpbnQgYXMgdG8gdGhlIHRoZSBtYXhpbXVtIG51bWJlciBvZiBkYXNoYm9hcmRzIHRvIHJldHVybiBpbiBlYWNoIGNhbGwuIE5vdGUgdGhhdCB0aGVcbiAgICogICAgIEpJUkEgc2VydmVyIHJlc2VydmVzIHRoZSByaWdodCB0byBpbXBvc2UgYSBtYXhSZXN1bHRzIGxpbWl0IHRoYXQgaXMgbG93ZXIgdGhhbiB0aGUgdmFsdWUgdGhhdCBhIGNsaWVudFxuICAgKiAgICAgcHJvdmlkZXMsIGR1ZXMgdG8gbGFjayBvciByZXNvdXJjZXMgb3IgYW55IG90aGVyIGNvbmRpdGlvbi4gV2hlbiB0aGlzIGhhcHBlbnMsIHlvdXIgcmVzdWx0cyB3aWxsIGJlXG4gICAqICAgICB0cnVuY2F0ZWQuIENhbGxlcnMgc2hvdWxkIGFsd2F5cyBjaGVjayB0aGUgcmV0dXJuZWQgbWF4UmVzdWx0cyB0byBkZXRlcm1pbmUgdGhlIHZhbHVlIHRoYXQgaXMgZWZmZWN0aXZlbHlcbiAgICogICAgIGJlaW5nIHVzZWQuXG4gICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBkYXNoYm9hcmRzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGRhc2hib2FyZHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICovXG4gIHRoaXMuZ2V0QWxsQm9hcmRzID0gZnVuY3Rpb24ob3B0cywgY2FsbGJhY2spIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkQWdpbGVVUkwoXCIvYm9hcmRcIiksXG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICBqc29uOiB0cnVlLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgcXM6IHtcbiAgICAgICAgdHlwZTogb3B0cy50eXBlLFxuICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgIG5hbWU6IG9wdHMubmFtZSxcbiAgICAgICAgcHJvamVjdEtleU9ySWQ6IG9wdHMucHJvamVjdEtleU9ySWQsXG4gICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0c1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IGEgc2luZ2xlIGFnaWxlIGJvYXJkLlxuICAgKlxuICAgKiBAbWV0aG9kIGdldEJvYXJkXG4gICAqIEBtZW1iZXJPZiBBZ2lsZUJvYXJkQ2xpZW50I1xuICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgKiBAcGFyYW0gb3B0cy5ib2FyZElkIFRoZSBhZ2lsZSBib2FyZCBpZC5cbiAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGRhc2hib2FyZCBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgZGFzaGJvYXJkIGhhcyBiZWVuIHJldHJpZXZlZFxuICAgKi9cbiAgdGhpcy5nZXRCb2FyZCA9IGZ1bmN0aW9uKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEFnaWxlVVJMKFwiL2JvYXJkL1wiICsgb3B0cy5ib2FyZElkKSxcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGpzb246IHRydWUsXG4gICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICBxczoge1xuICAgICAgICBmaWx0ZXI6IG9wdHMuZmlsdGVyLFxuICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0c1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IGEgbGlzdCBvZiBhbGwgaXNzdWVzIGFzc29jaWF0ZWQgd2l0aCBhbiBhZ2lsZSBib2FyZFxuICAgKlxuICAgKiBAbWV0aG9kIGdldElzc3Vlc0ZvckJvYXJkXG4gICAqIEBtZW1iZXJPZiBBZ2lsZUJvYXJkQ2xpZW50I1xuICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHRvIHNlbmQgdG8gdGhlIEppcmEgQVBJXG4gICAqIEBwYXJhbSBvcHRzLmJvYXJkSWQgVGhlIGFnaWxlIGJvYXJkIGlkLlxuICAgKiBAcGFyYW0gW29wdHMuc3RhcnRBdF0gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBpc3N1ZSB0byByZXR1cm4gKDAtYmFzZWQpLiBtdXN0IGJlIDAgb3IgYSBtdWx0aXBsZSBvZlxuICAgKiAgICAgbWF4UmVzdWx0c1xuICAgKiBAcGFyYW0gW29wdHMubWF4UmVzdWx0c10gQSBoaW50IGFzIHRvIHRoZSB0aGUgbWF4aW11bSBudW1iZXIgb2YgaXNzdWVzIHRvIHJldHVybiBpbiBlYWNoIGNhbGwuIE5vdGUgdGhhdCB0aGVcbiAgICogICAgIEpJUkEgc2VydmVyIHJlc2VydmVzIHRoZSByaWdodCB0byBpbXBvc2UgYSBtYXhSZXN1bHRzIGxpbWl0IHRoYXQgaXMgbG93ZXIgdGhhbiB0aGUgdmFsdWUgdGhhdCBhIGNsaWVudFxuICAgKiAgICAgcHJvdmlkZXMsIGR1ZXMgdG8gbGFjayBvciByZXNvdXJjZXMgb3IgYW55IG90aGVyIGNvbmRpdGlvbi4gV2hlbiB0aGlzIGhhcHBlbnMsIHlvdXIgcmVzdWx0cyB3aWxsIGJlXG4gICAqICAgICB0cnVuY2F0ZWQuIENhbGxlcnMgc2hvdWxkIGFsd2F5cyBjaGVjayB0aGUgcmV0dXJuZWQgbWF4UmVzdWx0cyB0byBkZXRlcm1pbmUgdGhlIHZhbHVlIHRoYXQgaXMgZWZmZWN0aXZlbHlcbiAgICogICAgIGJlaW5nIHVzZWQuXG4gICAqIEBwYXJhbSBbb3B0cy5qcWxdIEZpbHRlcnMgcmVzdWx0cyB1c2luZyBhIEpRTCBxdWVyeS4gSWYgeW91IGRlZmluZSBhbiBvcmRlciBpbiB5b3VyIEpRTCBxdWVyeSwgaXQgd2lsbCBvdmVycmlkZVxuICAgKiAgICAgdGhlIGRlZmF1bHQgb3JkZXIgb2YgdGhlIHJldHVybmVkIGlzc3Vlcy4gTm90ZSB0aGF0IHVzZXJuYW1lIGFuZCB1c2Vya2V5IGhhdmUgYmVlbiBkZXByZWNhdGVkIGFzIHNlYXJjaCB0ZXJtc1xuICAgKiAgICAgZm9yIHRoaXMgcGFyYW1ldGVyLiBTZWUgdGhlIG1pZ3JhdGlvbiBndWlkZSBmb3IgZGV0YWlscy4gVXNlIGFjY291bnRJZCBpbnN0ZWFkLlxuICAgKiBAcGFyYW0gW29wdHMuZmllbGRzXSBUaGUgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuIGZvciBlYWNoIGlzc3VlLiBCeSBkZWZhdWx0LCBhbGwgbmF2aWdhYmxlIGFuZCBBZ2lsZSBmaWVsZHMgYXJlXG4gICAqICAgICByZXR1cm5lZC5cbiAgICogQHBhcmFtIFtvcHRzLmV4cGFuZF0gVGhlIHBhcmFtZXRlcnMgdG8gZXhwYW5kXG4gICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBpc3N1ZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgaXNzdWVzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAqL1xuICB0aGlzLmdldElzc3Vlc0ZvckJvYXJkID0gZnVuY3Rpb24ob3B0cywgY2FsbGJhY2spIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkQWdpbGVVUkwoXCIvYm9hcmQvXCIgKyBvcHRzLmJvYXJkSWQgKyBcIi9pc3N1ZVwiKSxcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGpzb246IHRydWUsXG4gICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICBxczoge1xuICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0cyxcbiAgICAgICAganFsOiBvcHRzLmpxbCxcbiAgICAgICAgZmllbGRzOiBvcHRzLmZpZWxkcy5qb2luKCcsJyksXG4gICAgICAgIGV4cGFuZDogb3B0cy5leHBhbmRcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpc3Qgb2Ygc3ByaW50cyBhc3NvY2lhdGVkIHdpdGggYW4gYWdpbGUgYm9hcmRcbiAgICpcbiAgICogQG1ldGhvZCBnZXRTcHJpbnRzRm9yQm9hcmRcbiAgICogQG1lbWJlck9mIEFnaWxlQm9hcmRDbGllbnQjXG4gICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgdG8gc2VuZCB0byB0aGUgSmlyYSBBUElcbiAgICogQHBhcmFtIG9wdHMuYm9hcmRJZCBUaGUgYWdpbGUgYm9hcmQgaWQuXG4gICAqIEBwYXJhbSBbb3B0cy5zdGFydEF0XSBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IHNwcmludCB0byByZXR1cm4gKDAtYmFzZWQpLiBtdXN0IGJlIDAgb3IgYSBtdWx0aXBsZSBvZlxuICAgKiAgICAgbWF4UmVzdWx0c1xuICAgKiBAcGFyYW0gW29wdHMubWF4UmVzdWx0c10gQSBoaW50IGFzIHRvIHRoZSB0aGUgbWF4aW11bSBudW1iZXIgb2Ygc3ByaW50cyB0byByZXR1cm4gaW4gZWFjaCBjYWxsLiBOb3RlIHRoYXQgdGhlXG4gICAqICAgICBKSVJBIHNlcnZlciByZXNlcnZlcyB0aGUgcmlnaHQgdG8gaW1wb3NlIGEgbWF4UmVzdWx0cyBsaW1pdCB0aGF0IGlzIGxvd2VyIHRoYW4gdGhlIHZhbHVlIHRoYXQgYSBjbGllbnRcbiAgICogICAgIHByb3ZpZGVzLCBkdWVzIHRvIGxhY2sgb3IgcmVzb3VyY2VzIG9yIGFueSBvdGhlciBjb25kaXRpb24uIFdoZW4gdGhpcyBoYXBwZW5zLCB5b3VyIHJlc3VsdHMgd2lsbCBiZVxuICAgKiAgICAgdHJ1bmNhdGVkLiBDYWxsZXJzIHNob3VsZCBhbHdheXMgY2hlY2sgdGhlIHJldHVybmVkIG1heFJlc3VsdHMgdG8gZGV0ZXJtaW5lIHRoZSB2YWx1ZSB0aGF0IGlzIGVmZmVjdGl2ZWx5XG4gICAqICAgICBiZWluZyB1c2VkLlxuICAgKiBAcGFyYW0gW29wdHMuc3RhdGVdIE9wdGlvbmFsbHkgZmlsdGVyIGJ5IHN0YXRlLCBlLmcuICdhY3RpdmUnLlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgQ2FsbGVkIHdoZW4gdGhlIHNwcmludHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgc3ByaW50cyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgKi9cbiAgdGhpcy5nZXRTcHJpbnRzRm9yQm9hcmQgPSBmdW5jdGlvbihvcHRzLCBjYWxsYmFjaykge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRBZ2lsZVVSTChcIi9ib2FyZC9cIiArIG9wdHMuYm9hcmRJZCArIFwiL3NwcmludFwiKSxcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGpzb246IHRydWUsXG4gICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICBxczoge1xuICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0cyxcbiAgICAgICAgc3RhdGU6IG9wdHMuc3RhdGVcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpc3Qgb2YgYWxsIGlzc3VlcyBmcm9tIHRoZSBib2FyZCdzIGJhY2tsb2csIGZvciB0aGUgZ2l2ZW4gYm9hcmQgSWQuXG4gICAqXG4gICAqIEBtZXRob2QgZ2V0SXNzdWVzRm9yQmFja2xvZ1xuICAgKiBAbWVtYmVyT2YgQWdpbGVCb2FyZENsaWVudCNcbiAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyB0byBzZW5kIHRvIHRoZSBKaXJhIEFQSVxuICAgKiBAcGFyYW0gb3B0cy5ib2FyZElkIFRoZSBhZ2lsZSBib2FyZCBpZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGpxbCBGaWx0ZXJzIHJlc3VsdHMgdXNpbmcgYSBKUUwgcXVlcnkuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsaWRhdGVRdWVyeSBTcGVjaWZpZXMgd2hldGhlciB0byB2YWxpZGUgdGhlIEpRTCBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkcyBUaGUgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuIGZvciBlYWNoIGlzc3VlLlxuICAgKiBAcGFyYW0gW29wdHMuc3RhcnRBdF0gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXNoYm9hcmQgdG8gcmV0dXJuICgwLWJhc2VkKS4gbXVzdCBiZSAwIG9yIGEgbXVsdGlwbGUgb2ZcbiAgICogICAgIG1heFJlc3VsdHNcbiAgICogQHBhcmFtIFtvcHRzLm1heFJlc3VsdHNdIEEgaGludCBhcyB0byB0aGUgdGhlIG1heGltdW0gbnVtYmVyIG9mIGlzc3VlcyB0byByZXR1cm4gaW4gZWFjaCBjYWxsLiBOb3RlIHRoYXQgdGhlXG4gICAqICAgICBKSVJBIHNlcnZlciByZXNlcnZlcyB0aGUgcmlnaHQgdG8gaW1wb3NlIGEgbWF4UmVzdWx0cyBsaW1pdCB0aGF0IGlzIGxvd2VyIHRoYW4gdGhlIHZhbHVlIHRoYXQgYSBjbGllbnRcbiAgICogICAgIHByb3ZpZGVzLCBkdWVzIHRvIGxhY2sgb3IgcmVzb3VyY2VzIG9yIGFueSBvdGhlciBjb25kaXRpb24uIFdoZW4gdGhpcyBoYXBwZW5zLCB5b3VyIHJlc3VsdHMgd2lsbCBiZVxuICAgKiAgICAgdHJ1bmNhdGVkLiBDYWxsZXJzIHNob3VsZCBhbHdheXMgY2hlY2sgdGhlIHJldHVybmVkIG1heFJlc3VsdHMgdG8gZGV0ZXJtaW5lIHRoZSB2YWx1ZSB0aGF0IGlzIGVmZmVjdGl2ZWx5XG4gICAqICAgICBiZWluZyB1c2VkLlxuICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgYmFja2xvZyBpc3N1ZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgYmFja2xvZyBpc3N1ZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICovXG4gIHRoaXMuZ2V0SXNzdWVzRm9yQmFja2xvZyA9IGZ1bmN0aW9uKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEFnaWxlVVJMKFwiL2JvYXJkL1wiICsgb3B0cy5ib2FyZElkICsgXCIvYmFja2xvZ1wiKSxcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGpzb246IHRydWUsXG4gICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICBxczoge1xuICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0cyxcbiAgICAgICAganFsOiBvcHRzLmpxbCxcbiAgICAgICAgdmFsaWRhdGVRdWVyeTogb3B0cy52YWxpZGF0ZVF1ZXJ5LFxuICAgICAgICBmaWVsZHM6IG9wdHMuZmllbGRzXG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgY29uZmlndXJhdGlvbiBmb3IgYSBib2FyZFxuICAgKlxuICAgKiBAbWV0aG9kIGdldEJvYXJkQ29uZmlndXJhdGlvblxuICAgKiBAbWVtYmVyT2YgQWdpbGVCb2FyZENsaWVudCNcbiAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyB0byBzZW5kIHRvIHRoZSBKaXJhIEFQSVxuICAgKiBAcGFyYW0gb3B0cy5ib2FyZElkIFRoZSBhZ2lsZSBib2FyZCBpZC5cbiAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGJvYXJkIGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBib2FyZCBjb25maWd1cmF0aW9uIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICovXG4gIHRoaXMuZ2V0Qm9hcmRDb25maWd1cmF0aW9uID0gZnVuY3Rpb24ob3B0cywgY2FsbGJhY2spIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkQWdpbGVVUkwoXG4gICAgICAgIFwiL2JvYXJkL1wiICsgb3B0cy5ib2FyZElkICsgXCIvY29uZmlndXJhdGlvblwiXG4gICAgICApLFxuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGJvYXJkXG4gICAqXG4gICAqIEBtZXRob2QgY3JlYXRlQm9hcmRcbiAgICogQG1lbWJlck9mIEFnaWxlU3ByaW50Q2xpZW50I1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBNdXN0IGJlIGxlc3MgdGhhbiAyNTUgY2hhcmFjdGVycy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVmFsaWQgdmFsdWVzOiBzY3J1bSwga2FuYmFuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmaWx0ZXJJZCBJRCBvZiBhIGZpbHRlciB0aGF0IHRoZSB1c2VyIGhhcyBwZXJtaXNzaW9ucyB0byB2aWV3LiBOb3RlLCBpZiB0aGVcbiAgICogIHVzZXIgZG9lcyBub3QgaGF2ZSB0aGUgJ0NyZWF0ZSBzaGFyZWQgb2JqZWN0cycgcGVybWlzc2lvbiBhbmQgdHJpZXMgdG8gY3JlYXRlIGEgc2hhcmVkIGJvYXJkLFxuICAgKiAgYSBwcml2YXRlIGJvYXJkIHdpbGwgYmUgY3JlYXRlZCBpbnN0ZWFkIChyZW1lbWJlciB0aGF0IGJvYXJkIHNoYXJpbmcgZGVwZW5kcyBvbiB0aGUgZmlsdGVyIHNoYXJpbmcpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbG9jYXRpb24gVGhlIGNvbnRhaW5lciB0aGF0IHRoZSBib2FyZCB3aWxsIGJlIGxvY2F0ZWQgaW4uIGxvY2F0aW9uIG11c3QgaW5jbHVkZSB0aGVcbiAgICogIHR5cGUgcHJvcGVydHkgKFZhbGlkIHZhbHVlczogcHJvamVjdCwgdXNlcikuIElmIGNob29zaW5nICdwcm9qZWN0JywgdGhlbiBhIHByb2plY3QgbXVzdCBiZSBzcGVjaWZpZWRcbiAgICogIGJ5IGEgcHJvamVjdEtleU9ySWQgcHJvcGVydHkgaW4gbG9jYXRpb24uIElmIGNob29zaW5nICd1c2VyJywgdGhlIGN1cnJlbnQgdXNlciBpcyBjaG9zZW4gYnkgZGVmYXVsdC5cbiAgICogIFRoZSBwcm9qZWN0S2V5T3JJZCBwcm9wZXJ0eSBzaG91bGQgbm90IGJlIHByb3ZpZGVkLlxuICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc3ByaW50IGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHNwcmludCBoYXMgYmVlbiBjcmVhdGVkLlxuICAgKi9cbiAgdGhpcy5jcmVhdGVCb2FyZCA9IGZ1bmN0aW9uKG5hbWUsIHR5cGUsIGZpbHRlcklkLCBsb2NhdGlvbiwgY2FsbGJhY2spIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkQWdpbGVVUkwoXCIvYm9hcmRcIiksXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZmlsdGVySWQsXG4gICAgICAgIGxvY2F0aW9uXG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgYSBsaXN0IG9mIHByb2plY3RzIGFzc29jaWF0ZWQgYm9hcmRcbiAgICpcbiAgICogQG1ldGhvZCBnZXRQcm9qZWN0c0ZvckJvYXJkXG4gICAqIEBtZW1iZXJPZiBBZ2lsZUJvYXJkQ2xpZW50I1xuICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHRvIHNlbmQgdG8gdGhlIEppcmEgQVBJXG4gICAqIEBwYXJhbSBvcHRzLmJvYXJkSWQgVGhlIGFnaWxlIGJvYXJkIGlkLlxuICAgKiBAcGFyYW0gW29wdHMuc3RhcnRBdF0gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzcHJpbnQgdG8gcmV0dXJuICgwLWJhc2VkKS4gbXVzdCBiZSAwIG9yIGEgbXVsdGlwbGUgb2ZcbiAgICogICAgIG1heFJlc3VsdHNcbiAgICogQHBhcmFtIFtvcHRzLm1heFJlc3VsdHNdIEEgaGludCBhcyB0byB0aGUgdGhlIG1heGltdW0gbnVtYmVyIG9mIHNwcmludHMgdG8gcmV0dXJuIGluIGVhY2ggY2FsbC4gTm90ZSB0aGF0IHRoZVxuICAgKiAgICAgSklSQSBzZXJ2ZXIgcmVzZXJ2ZXMgdGhlIHJpZ2h0IHRvIGltcG9zZSBhIG1heFJlc3VsdHMgbGltaXQgdGhhdCBpcyBsb3dlciB0aGFuIHRoZSB2YWx1ZSB0aGF0IGEgY2xpZW50XG4gICAqICAgICBwcm92aWRlcywgZHVlcyB0byBsYWNrIG9yIHJlc291cmNlcyBvciBhbnkgb3RoZXIgY29uZGl0aW9uLiBXaGVuIHRoaXMgaGFwcGVucywgeW91ciByZXN1bHRzIHdpbGwgYmVcbiAgICogICAgIHRydW5jYXRlZC4gQ2FsbGVycyBzaG91bGQgYWx3YXlzIGNoZWNrIHRoZSByZXR1cm5lZCBtYXhSZXN1bHRzIHRvIGRldGVybWluZSB0aGUgdmFsdWUgdGhhdCBpcyBlZmZlY3RpdmVseVxuICAgKiAgICAgYmVpbmcgdXNlZC5cbiAgICogQHBhcmFtIGNhbGxiYWNrIENhbGxlZCB3aGVuIHRoZSBzcHJpbnRzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHNwcmludHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICovXG4gIHRoaXMuZ2V0UHJvamVjdHNGb3JCb2FyZCA9IGZ1bmN0aW9uKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEFnaWxlVVJMKFwiL2JvYXJkL1wiICsgb3B0cy5ib2FyZElkICsgXCIvcHJvamVjdFwiKSxcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGpzb246IHRydWUsXG4gICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICBxczoge1xuICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0c1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgZXJyb3JTdHJpbmdzID0gcmVxdWlyZSgnLi8uLi9saWIvZXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21tZW50Q2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL2NvbW1lbnQnXG4gKiBAY29uc3RydWN0b3IgQ29tbWVudENsaWVudFxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIENvbW1lbnRDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBrZXlzIG9mIGFsbCBwcm9wZXJ0aWVzIGZvciB0aGUgY29tbWVudCBpZGVudGlmaWVkIGJ5IHRoZSBrZXkgb3IgYnkgdGhlIGlkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRDb21tZW50UHJvcGVydHlLZXlzXG4gICAgICogQG1lbWJlck9mIENvbW1lbnRDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIG9wdGlvbnMgcGFzc2VkIGluIHRoZSByZXF1ZXN0IHRvIHRoZSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMuY29tbWVudElkIFRoZSBpZCBvZiB0aGUgY29tbWVudCBmcm9tIHdoaWNoIGtleXMgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUga2V5cyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGtleXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldENvbW1lbnRQcm9wZXJ0eUtleXMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJycsICdHRVQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBzcGVjaWZpZWQgY29tbWVudCdzIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogWW91IGNhbiB1c2UgdGhpcyByZXNvdXJjZSB0byBzdG9yZSBhIGN1c3RvbSBkYXRhIGFnYWluc3QgdGhlIGNvbW1lbnQgaWRlbnRpZmllZCBieSB0aGUga2V5IG9yIGJ5IHRoZSBpZC4gVGhlXG4gICAgICogdXNlciB3aG8gc3RvcmVzIHRoZSBkYXRhIGlzIHJlcXVpcmVkIHRvIGhhdmUgcGVybWlzc2lvbnMgdG8gYWRtaW5pc3RlciB0aGUgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2V0Q29tbWVudFByb3BlcnR5XG4gICAgICogQG1lbWJlck9mIENvbW1lbnRDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIG9wdGlvbnMgcGFzc2VkIGluIHRoZSByZXF1ZXN0IHRvIHRoZSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMuY29tbWVudElkIFRoZSBpZCBvZiB0aGUgY29tbWVudCBmcm9tIHdoaWNoIGtleXMgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gb3B0cy5wcm9wZXJ0eUtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBiZSBlZGl0ZWQuXG4gICAgICogQHBhcmFtIG9wdHMucHJvcGVydHlWYWx1ZSBUaGUgbmV3IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcHJvcGVydHkgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHByb3BlcnR5IGhhcyBiZWVuIGVkaXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLnNldENvbW1lbnRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIW9wdHMucHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fQ09NTUVOVF9QUk9QRVJUWV9LRVlfRVJST1IpO1xuICAgICAgICB9IGVsc2UgaWYgKCFvcHRzLnByb3BlcnR5VmFsdWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fQ09NTUVOVF9QUk9QRVJUWV9WQUxVRV9FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy8nICsgb3B0cy5wcm9wZXJ0eUtleSwgJ1BVVCcsIG9wdHMucHJvcGVydHlWYWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdQcm9wZXJ0eSBFZGl0ZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IHdpdGggYSBnaXZlbiBrZXkgZnJvbSB0aGUgY29tbWVudCBpZGVudGlmaWVkIGJ5IHRoZSBrZXkgb3IgYnkgdGhlIGlkLiBUaGUgdXNlclxuICAgICAqIHdobyByZXRyaWV2ZXMgdGhlIHByb3BlcnR5IGlzIHJlcXVpcmVkIHRvIGhhdmUgcGVybWlzc2lvbnMgdG8gcmVhZCB0aGUgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0Q29tbWVudFByb3BlcnR5XG4gICAgICogQG1lbWJlck9mIENvbW1lbnRDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIG9wdGlvbnMgcGFzc2VkIGluIHRoZSByZXF1ZXN0IHRvIHRoZSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMuY29tbWVudElkIFRoZSBpZCBvZiB0aGUgY29tbWVudCBmcm9tIHdoaWNoIGtleXMgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gb3B0cy5wcm9wZXJ0eUtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBiZSBlZGl0ZWQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHByb3BlcnR5IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwcm9wZXJ0eSBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRDb21tZW50UHJvcGVydHkgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLnByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0NPTU1FTlRfUFJPUEVSVFlfS0VZX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnLycgKyBvcHRzLnByb3BlcnR5S2V5LCAnR0VUJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBmcm9tIHRoZSBjb21tZW50IGlkZW50aWZpZWQgYnkgdGhlIGtleSBvciBieSB0aGUgaWQuIFRocyB1c2VyIHJlbW92aW5nIHRoZSBwcm9wZXJ0eSBpc1xuICAgICAqIHJlcXVpcmVkIHRvIGhhdmUgcGVybWlzc2lvbnMgdG8gYWRtaW5pc3RlciB0aGUgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlQ29tbWVudFByb3BlcnR5XG4gICAgICogQG1lbWJlck9mIENvbW1lbnRDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIG9wdGlvbnMgcGFzc2VkIGluIHRoZSByZXF1ZXN0IHRvIHRoZSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMuY29tbWVudElkIFRoZSBpZCBvZiB0aGUgY29tbWVudCBmcm9tIHdoaWNoIGtleXMgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gb3B0cy5wcm9wZXJ0eUtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBiZSBlZGl0ZWQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHByb3BlcnR5IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwcm9wZXJ0eSBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5kZWxldGVDb21tZW50UHJvcGVydHkgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLnByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0NPTU1FTlRfUFJPUEVSVFlfS0VZX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnLycgKyBvcHRzLnByb3BlcnR5S2V5LCAnREVMRVRFJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdDb21tZW50IHByb3BlcnR5IGRlbGV0ZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQnVpbGQgb3V0IHRoZSByZXF1ZXN0IG9wdGlvbnMgbmVjZXNzYXJ5IHRvIG1ha2UgYSBwYXJ0aWN1bGFyIEFQSSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJ1aWxkUmVxdWVzdE9wdGlvbnNcbiAgICAgKiBAbWVtYmVyT2YgQ29tbWVudENsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBlbmRwb2ludCBmb2xsb3dpbmcgL2lzc3VlL3tpZE9yS2V5fVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgVGhlIHJlcXVlc3QgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbYm9keV0gVGhlIHJlcXVlc3QgYm9keSwgaWYgYW55LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcXNdIFRoZSBxdWVyeXN0cmluZywgaWYgYW55LiAgb3B0cy5leHBhbmQgYW5kIG9wdHMuZmllbGRzIGFycmF5cyB3aWxsIGJlIGF1dG9tYWdpY2FsbHkgYWRkZWQuXG4gICAgICogQHJldHVybnMge3t1cmk6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIGJvZHk6IE9iamVjdCwgcXM6IE9iamVjdCwgZm9sbG93QWxsUmVkaXJlY3RzOiBib29sZWFuLCBqc29uOiBib29sZWFufX1cbiAgICAgKi9cbiAgICB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0cywgcGF0aCwgbWV0aG9kLCBib2R5LCBxcykge1xuICAgICAgICBpZiAoIW9wdHMuY29tbWVudElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0NPTU1FTlRfSUQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiYXNlUGF0aCA9ICcvY29tbWVudC8nICsgb3B0cy5jb21tZW50SWQgKyBcIi9wcm9wZXJ0aWVzXCI7XG4gICAgICAgIGlmICghcXMpIHFzID0ge307XG4gICAgICAgIGlmICghYm9keSkgYm9keSA9IHt9O1xuXG4gICAgICAgIGlmIChvcHRzLmZpZWxkcykge1xuICAgICAgICAgICAgcXMuZmllbGRzID0gJyc7XG4gICAgICAgICAgICBvcHRzLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICAgIHFzLmZpZWxkcyArPSBmaWVsZCArICcsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0cy5leHBhbmQpIHtcbiAgICAgICAgICAgIHFzLmV4cGFuZCA9ICcnO1xuICAgICAgICAgICAgb3B0cy5leHBhbmQuZm9yRWFjaChmdW5jdGlvbiAoZXgpIHtcbiAgICAgICAgICAgICAgICBxcy5leHBhbmQgKz0gZXggKyAnLCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKGJhc2VQYXRoICsgcGF0aCksXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICBxczogcXMsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBqc29uOiB0cnVlXG4gICAgICAgIH07XG4gICAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudENsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9jb21wb25lbnQnXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgQ29tcG9uZW50Q2xpZW50XG4gKi9cbmZ1bmN0aW9uIENvbXBvbmVudENsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvbXBvbmVudCB2aWEgUE9TVC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3JlYXRlQ29tcG9uZW50XG4gICAgICogQG1lbWJlck9mIENvbXBvbmVudENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIG9wdHMuY29tcG9uZW50IFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMzg3MX1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICovXG4gICAgdGhpcy5jcmVhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2NvbXBvbmVudCcpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgYm9keTogb3B0cy5jb21wb25lbnRcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTW9kaWZ5IGEgY29tcG9uZW50IHZpYSBQVVQuIEFueSBmaWVsZHMgcHJlc2VudCBpbiB0aGUgUFVUIHdpbGwgb3ZlcnJpZGUgZXhpc3RpbmcgdmFsdWVzLiBBcyBhIGNvbnZlbmllbmNlLCBpZiBhXG4gICAgICogZmllbGQgaXMgbm90IHByZXNlbnQsIGl0IGlzIHNpbGVudGx5IGlnbm9yZWQuIElmIGxlYWRVc2VyTmFtZSBpcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIHRoZSBjb21wb25lbnQgbGVhZCB3aWxsIGJlXG4gICAgICogcmVtb3ZlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZWRpdENvbXBvbmVudFxuICAgICAqIEBtZW1iZXJPZiBDb21wb25lbnRDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy5pZCBUaGUgaWQgb2YgdGhlIGNvbXBvbmVudCB0byBlZGl0LlxuICAgICAqIEBwYXJhbSBvcHRzLmNvbXBvbmVudCBUaGUgbmV3IGRhdGEgdG8gcGxhY2UgaW4gdGhlIGNvbXBvbmVudC4gIFNlZVxuICAgICAqICAgICAge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTM5Mzl9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgYmVlZCBlZGl0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVkIGVkaXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmVkaXRDb21wb25lbnQgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2NvbXBvbmVudC8nICsgb3B0cy5pZCksXG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMuY29tcG9uZW50XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCBhIHByb2plY3QgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRDb21wb25lbnRcbiAgICAgKiBAbWVtYmVyT2YgQ29tcG9uZW50Q2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIG9wdHMuaWQgVGhlIGlkIG9mIHRoZSBjb21wb25lbnQgdG8gZWRpdC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9jb21wb25lbnQvJyArIG9wdHMuaWQpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgcHJvamVjdCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGRlbGV0ZUNvbXBvbmVudFxuICAgICAqIEBtZW1iZXJPZiBDb21wb25lbnRDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy5pZCBUaGUgaWQgb2YgdGhlIGNvbXBvbmVudCB0byBlZGl0LlxuICAgICAqIEBwYXJhbSBbb3B0cy5tb3ZlSXNzdWVzVG9dIFRoZSBuZXcgY29tcG9uZW50IGFwcGxpZWQgdG8gaXNzdWVzIHdob3NlICdpZCcgY29tcG9uZW50IHdpbGwgYmUgZGVsZXRlZC4gSWYgdGhpc1xuICAgICAqICAgICB2YWx1ZSBpcyBudWxsLCB0aGVuIHRoZSAnaWQnIGNvbXBvbmVudCBpcyBzaW1wbHkgcmVtb3ZlZCBmcm9tIHRoZSByZWxhdGVkIGlzdWVzLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvY29tcG9uZW50LycgKyBvcHRzLmlkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ1Byb2plY3QgQ29tcG9uZW50IERlbGV0ZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGNvdW50cyBvZiBpc3N1ZXMgcmVsYXRlZCB0byB0aGlzIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0UmVsYXRlZElzc3VlQ291bnRzXG4gICAgICogQG1lbWJlck9mIENvbXBvbmVudENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLmlkIFRoZSBpZCBvZiB0aGUgY29tcG9uZW50IHRvIGVkaXQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGNvdW50IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBjb3VudCBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRSZWxhdGVkSXNzdWVDb3VudHMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2NvbXBvbmVudC8nICsgb3B0cy5pZCArICcvcmVsYXRlZElzc3VlQ291bnRzJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGVycm9yU3RyaW5ncyA9IHJlcXVpcmUoJy4vLi4vbGliL2Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ3VzdG9tRmllbGRPcHRpb25DbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvY3VzdG9tRmllbGRPcHRpb25zJ1xuICpcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIEN1c3RvbUZpZWxkT3B0aW9uQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIEN1c3RvbUZpZWxkT3B0aW9uQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZ1bGwgcmVwcmVzZW50YXRpb24gb2YgdGhlIEN1c3RvbSBGaWVsZCBPcHRpb24gdGhhdCBoYXMgdGhlIGdpdmVuIGlkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRDdXN0b21GaWVsZE9wdGlvblxuICAgICAqIEBtZW1iZXJPZiBDdXN0b21GaWVsZE9wdGlvbkNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmllbGRPcHRpb25JZCBBIFN0cmluZyBjb250YWluaW5nIGFuIEN1c3RvbSBGaWVsZCBPcHRpb24gaWRcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiBkYXRhIGhhcyBiZWVuIHJldHJpZXZlZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gZGF0YSBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICAgKi9cbiAgICB0aGlzLmdldEN1c3RvbUZpZWxkT3B0aW9uID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5maWVsZE9wdGlvbklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0ZJRUxEX09QVElPTl9JRF9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvY3VzdG9tRmllbGRPcHRpb24vJyArIG9wdHMuZmllbGRPcHRpb25JZCksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gRGFzaGJvYXJkQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL2Rhc2hib2FyZCdcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIERhc2hib2FyZENsaWVudFxuICovXG5mdW5jdGlvbiBEYXNoYm9hcmRDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBsaXN0IG9mIGFsbCBkYXNoYm9hcmRzLCBvcHRpb25hbGx5IGZpbHRlcmluZyB0aGVtLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBbGxEYXNoYm9hcmRzXG4gICAgICogQG1lbWJlck9mIERhc2hib2FyZENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHRvIHNlbmQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIFtvcHRzLmZpbHRlcl0gQW4gb3B0aW9uYWwgZmlsdGVyIHRoYXQgaXMgYXBwbGllZCB0byB0aGUgbGlzdCBvZiBkYXNoYm9hcmRzLiBWYWxpZCB2YWx1ZXMgaW5jbHVkZVxuICAgICAqICAgICBcImZhdm91cml0ZVwiIGZvciByZXR1cm5pbmcgb25seSBmYXZvdXJpdGUgZGFzaGJvYXJkcywgYW5kIFwibXlcIiBmb3IgcmV0dXJuaW5nIGRhc2hib2FyZHMgdGhhdCBhcmUgb3duZWQgYnkgdGhlXG4gICAgICogICAgIGNhbGxpbmcgdXNlci5cbiAgICAgKiBAcGFyYW0gW29wdHMuc3RhcnRBdF0gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXNoYm9hcmQgdG8gcmV0dXJuICgwLWJhc2VkKS4gbXVzdCBiZSAwIG9yIGEgbXVsdGlwbGUgb2ZcbiAgICAgKiAgICAgbWF4UmVzdWx0c1xuICAgICAqIEBwYXJhbSBbb3B0cy5tYXhSZXN1bHRzXSBBIGhpbnQgYXMgdG8gdGhlIHRoZSBtYXhpbXVtIG51bWJlciBvZiBkYXNoYm9hcmRzIHRvIHJldHVybiBpbiBlYWNoIGNhbGwuIE5vdGUgdGhhdCB0aGVcbiAgICAgKiAgICAgSklSQSBzZXJ2ZXIgcmVzZXJ2ZXMgdGhlIHJpZ2h0IHRvIGltcG9zZSBhIG1heFJlc3VsdHMgbGltaXQgdGhhdCBpcyBsb3dlciB0aGFuIHRoZSB2YWx1ZSB0aGF0IGEgY2xpZW50XG4gICAgICogICAgIHByb3ZpZGVzLCBkdWVzIHRvIGxhY2sgb3IgcmVzb3VyY2VzIG9yIGFueSBvdGhlciBjb25kaXRpb24uIFdoZW4gdGhpcyBoYXBwZW5zLCB5b3VyIHJlc3VsdHMgd2lsbCBiZVxuICAgICAqICAgICB0cnVuY2F0ZWQuIENhbGxlcnMgc2hvdWxkIGFsd2F5cyBjaGVjayB0aGUgcmV0dXJuZWQgbWF4UmVzdWx0cyB0byBkZXRlcm1pbmUgdGhlIHZhbHVlIHRoYXQgaXMgZWZmZWN0aXZlbHlcbiAgICAgKiAgICAgYmVpbmcgdXNlZC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgZGFzaGJvYXJkcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGRhc2hib2FyZHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldEFsbERhc2hib2FyZHMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2Rhc2hib2FyZCcpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIGZpbHRlcjogb3B0cy5maWx0ZXIsXG4gICAgICAgICAgICAgICAgc3RhcnRBdDogb3B0cy5zdGFydEF0LFxuICAgICAgICAgICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0c1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzaW5nbGUgZGFzaGJvYXJkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXREYXNoYm9hcmRcbiAgICAgKiBAbWVtYmVyT2YgRGFzaGJvYXJkQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMuZGFzaGJvYXJkSWQgVGhlIGRhc2hib2FyZCBpZC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgZGFzaGJvYXJkIGhhcyBiZWVuIHJldHJpZXZlZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGRhc2hib2FyZCBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICAgKi9cbiAgICB0aGlzLmdldERhc2hib2FyZCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvZGFzaGJvYXJkLycgKyBvcHRzLmRhc2hib2FyZElkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IG9wdHMuZmlsdGVyLFxuICAgICAgICAgICAgICAgIHN0YXJ0QXQ6IG9wdHMuc3RhcnRBdCxcbiAgICAgICAgICAgICAgICBtYXhSZXN1bHRzOiBvcHRzLm1heFJlc3VsdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gRmllbGRDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvZmllbGQnXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgRmllbGRDbGllbnRcbiAqL1xuZnVuY3Rpb24gRmllbGRDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhbGwgZmllbGRzLCBib3RoIFN5c3RlbSBhbmQgQ3VzdG9tXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEFsbEZpZWxkc1xuICAgICAqIEBtZW1iZXJPZiBGaWVsZENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBJZ25vcmVkXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGZpZWxkcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGZpZWxkcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0QWxsRmllbGRzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9maWVsZCcpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGN1c3RvbSBmaWVsZCB1c2luZyBhIGRlZmluaXRpb24gKG9iamVjdCBlbmNhcHN1bGF0aW5nIGN1c3RvbSBmaWVsZCBkYXRhKVxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVDdXN0b21GaWVsZFxuICAgICAqIEBtZW1iZXJPZiBGaWVsZENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHRvIHNlbmQgdG8gSmlyYVxuICAgICAqIEBwYXJhbSBvcHRzLmZpZWxkIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMzQxMn1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgY3VzdG9tIGZpZWxkIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgY3VzdG9tIGZpZWxkIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICovXG4gICAgdGhpcy5jcmVhdGVDdXN0b21GaWVsZCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvZmllbGQnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMuZmllbGRcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gRmlsdGVyQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL2ZpbHRlcidcbiAqXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBGaWx0ZXJDbGllbnRcbiAqL1xuZnVuY3Rpb24gRmlsdGVyQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBmaWx0ZXIsIGFuZCByZXR1cm5zIG5ld2x5IGNyZWF0ZWQgZmlsdGVyLiBDdXJyZW50bHkgc2V0cyBwZXJtaXNzaW9ucyBqdXN0IHVzaW5nIHRoZSB1c2VycyBkZWZhdWx0XG4gICAgICogc2hhcmluZyBwZXJtaXNzaW9uc1xuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVGaWx0ZXJcbiAgICAgKiBAbWVtYmVyT2YgRmlsdGVyQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbb3B0cy5leHBhbmRdIFRoZSBwYXJhbWV0ZXJzIHRvIGV4cGFuZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cy5maWx0ZXIgVGhlIGZpbHRlciB0byBjcmVhdGUuICBTZWVcbiAgICAgKiAgICAgIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmUzMzQ3fVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBmaWx0ZXIgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBmaWx0ZXIgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmNyZWF0ZUZpbHRlciA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvZmlsdGVyJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge30sXG4gICAgICAgICAgICBib2R5OiBvcHRzLmZpbHRlclxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRzLmV4cGFuZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5xcy5leHBhbmQgPSAnJztcbiAgICAgICAgICAgIG9wdHMuZXhwYW5kLmZvckVhY2goZnVuY3Rpb24gKGV4KSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5xcy5leHBhbmQgKz0gZXggKyAnLCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmaWx0ZXIgZ2l2ZW4gYW4gaWRcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0RmlsdGVyXG4gICAgICogQG1lbWJlck9mIEZpbHRlckNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMuZmlsdGVySWQgVGhlIGlkIG9mIHRoZSBmaWx0ZXIgdG8gcmV0cmlldmVcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgZmlsdGVyIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBmaWx0ZXIgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0RmlsdGVyID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcnLCAnR0VUJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBmaWx0ZXJzIGZvciB0aGUgY3VycmVudCB1c2VyKG9ubHkgZm9yIGNsb3VkKVxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRGaWx0ZXJzXG4gICAgICogQG1lbWJlck9mIEZpbHRlckNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGZpbHRlciBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgZmlsdGVyIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldEZpbHRlcnMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvZmlsdGVyJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBhbiBleGlzdGluZyBmaWx0ZXIsIGFuZCByZXR1cm5zIGl0cyBuZXcgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZUZpbHRlclxuICAgICAqIEBtZW1iZXJPZiBGaWx0ZXJDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLmZpbHRlcklkIFRoZSBpZCBvZiB0aGUgZmlsdGVyIHRvIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmZpbHRlciBUaGUgbmV3IGRhdGEgZm9yIHRoZSBmaWx0ZXIuICBTZWVcbiAgICAgKiAgICAgIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmUzNDAxfVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBmaWx0ZXIgaGFzIGJlZW4gdXBkYXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBmaWx0ZXIgaGFzIGJlZW4gdXBkYXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLnVwZGF0ZUZpbHRlciA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnJywgJ1BVVCcsIG9wdHMuZmlsdGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIGZpbHRlci5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlRmlsdGVyXG4gICAgICogQG1lbWJlck9mIEZpbHRlckNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMuZmlsdGVySWQgVGhlIGlkIG9mIHRoZSBmaWx0ZXIgdG8gZGVsZXRlXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGZpbHRlciBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGZpbHRlciBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlRmlsdGVyID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcnLCAnREVMRVRFJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdGaWx0ZXIgRGVsZXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGNvbHVtbnMgZm9yIHRoZSBnaXZlbiBmaWx0ZXIuIEN1cnJlbnRseSBsb2dnZWQgaW4gdXNlciB3aWxsIGJlIHVzZWQgYXMgdGhlIHVzZXIgbWFraW5nIHN1Y2hcbiAgICAgKiByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRGaWx0ZXJDb2x1bW5zXG4gICAgICogQG1lbWJlck9mIEZpbHRlckNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMuZmlsdGVySWQgVGhlIGlkIG9mIHRoZSBmaWx0ZXIgZm9yIHdoaWNoIHRvIHJldHJpZXZlIGNvbHVtbnMuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGNvbHVtbnMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBjb2x1bW5zIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRGaWx0ZXJDb2x1bW5zID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvY29sdW1ucycsICdHRVQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRlZmF1bHQgY29sdW1ucyBmb3IgdGhlIGdpdmVuIGZpbHRlclxuICAgICAqXG4gICAgICogQG1ldGhvZCBzZXRGaWx0ZXJDb2x1bW5zXG4gICAgICogQG1lbWJlck9mIEZpbHRlckNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMuZmlsdGVySWQgVGhlIGlkIG9mIHRoZSBmaWx0ZXIgZm9yIHdoaWNoIHRvIHVwZGF0ZSBjb2x1bW5zLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY29sdW1ucyBUaGUgbmFtZXMgb2YgdGhlIG5ldyBjb2x1bW5zLlxuICAgICAqICAgICAgU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmUzNDYwfVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBjb2x1bW5zIGhhdmUgYmVlbiBzZXRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBjb2x1bW5zIGhhdmUgYmVlbiBzZXRcbiAgICAgKi9cbiAgICB0aGlzLnNldEZpbHRlckNvbHVtbnMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGJvZHkgPSB7Y29sdW1uczogb3B0cy5jb2x1bW5zfTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9jb2x1bW5zJywgJ1BVVCcsIGJvZHkpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnQ29sdW1ucyBVcGRhdGVkJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgY29sdW1ucyBmb3IgdGhlIGdpdmVuIGZpbHRlciBzdWNoIHRoYXQgdGhlIGZpbHRlciBubyBsb25nZXIgaGFzIGl0cyBvd24gY29sdW1uIGNvbmZpZy5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgcmVzZXRGaWx0ZXJDb2x1bW5zXG4gICAgICogQG1lbWJlck9mIEZpbHRlckNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMuZmlsdGVySWQgVGhlIGlkIG9mIHRoZSBmaWx0ZXIgZm9yIHdoaWNoIHRvIHJlc2V0IGNvbHVtbnMuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGNvbHVtbnMgaGF2ZSBiZWVuIHJlc2V0LlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGNvbHVtbnMgaGF2ZSBiZWVuIHJlc2V0LlxuICAgICAqL1xuICAgIHRoaXMucmVzZXRGaWx0ZXJDb2x1bW5zID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvY29sdW1ucycsICdERUxFVEUnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ0NvbHVtbnMgUmVzZXQnKTtcbiAgICB9O1xuXG4gICAgIC8qKlxuICAgICAqIEFkZHMgYSBzaGFyZSBwZXJtaXNzaW9uIGZvciB0aGUgZ2l2ZW4gZmlsdGVyXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGFkZFNoYXJlUGVybWlzc2lvblxuICAgICAqIEBtZW1iZXJPZiBGaWx0ZXJDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLmZpbHRlcklkIFRoZSBpZCBvZiB0aGUgZmlsdGVyIGZvciB3aGljaCB0byByZXNldCBjb2x1bW5zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLnBlcm1pc3Npb24gVGhlIHNoYXJlIHBlcm1pc3Npb24gdG8gYXBwbHlcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgY29sdW1ucyBoYXZlIGJlZW4gcmVzZXQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgY29sdW1ucyBoYXZlIGJlZW4gcmVzZXQuXG4gICAgICovXG4gICAgdGhpcy5hZGRTaGFyZVBlcm1pc3Npb24gPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9wZXJtaXNzaW9uJywgJ1BPU1QnLCBvcHRzLnBlcm1pc3Npb24pO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnU2hhcmUgUGVybWlzc2lvbiBBZGRlZCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRlZmF1bHQgc2hhcmUgc2NvcGUgb2YgdGhlIGxvZ2dlZC1pbiB1c2VyLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXREZWZhdWx0U2hhcmVTY29yZVxuICAgICAqIEBtZW1iZXJPZiBGaWx0ZXJDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgSWdub3JlZC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgZGVmYXVsdCBzaGFyZSBzY29wZSBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgZGVmYXVsdCBzaGFyZSBzY29wZSBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXREZWZhdWx0U2hhcmVTY29yZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvZmlsdGVyL2RlZmF1bHRTaGFyZVNjb3BlJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkZWZhdWx0IHNoYXJlIHNjb3BlIG9mIHRoZSBsb2dnZWQtaW4gdXNlci5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2V0RGVmYXVsdFNoYXJlU2NvcGVcbiAgICAgKiBAbWVtYmVyT2YgRmlsdGVyQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byBqaXJhXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuc2NvcGUgVGhlIG5ldyBkZWZhdWx0IHNoYXJlIHNjb3BlLiBBdmFpbGFibGUgdmFsdWVzIGFyZSBHTE9CQUwgYW5kIFBSSVZBVEUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGRlZmF1bHQgc2hhcmUgc2NvcGUgaGFzIGJlZW4gc2V0LlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGRlZmF1bHQgc2hhcmUgc2NvcGUgaGFzIGJlZW4gc2V0LlxuICAgICAqL1xuICAgIHRoaXMuc2V0RGVmYXVsdFNoYXJlU2NvcGUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2ZpbHRlci9kZWZhdWx0U2hhcmVTY29wZScpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgc2NvcGU6IG9wdHMuc2NvcGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZhdm91cml0ZSBmaWx0ZXJzIG9mIHRoZSBsb2dnZWQtaW4gdXNlci5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0RmF2b3VyaXRlRmlsdGVyc1xuICAgICAqIEBtZW1iZXJPZiBGaWx0ZXJDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgSWdub3JlZC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgbGlzdCBvZiBmYXZvdXJpdGVzIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBsaXN0IG9mIGZhdm91cml0ZXMgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0RmF2b3JpdGVGaWx0ZXJzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9maWx0ZXIvZmF2b3VyaXRlJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQnVpbGQgb3V0IHRoZSByZXF1ZXN0IG9wdGlvbnMgbmVjZXNzYXJ5IHRvIG1ha2UgYSBwYXJ0aWN1bGFyIEFQSSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJ1aWxkUmVxdWVzdE9wdGlvbnNcbiAgICAgKiBAbWVtYmVyT2YgRmlsdGVyQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMuZmlsdGVySWQgVGhlIGlkIG9mIHRoZSBmaWx0ZXIgdG8gdXNlIGluIHRoZSBwYXRoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtvcHRzLmZpZWxkc10gVGhlIGZpZWxkcyB0byBpbmNsdWRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gW29wdHMuZXhwYW5kXSBUaGUgZmllbGRzIHRvIGV4cGFuZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBlbmRwb2ludCBmb2xsb3dpbmcgL2ZpbHRlci97aWR9XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBUaGUgcmVxdWVzdCBtZXRob2QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtib2R5XSBUaGUgcmVxdWVzdCBib2R5LCBpZiBhbnkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtxc10gVGhlIHF1ZXJ5c3RyaW5nLCBpZiBhbnkuICBvcHRzLmV4cGFuZCBhbmQgb3B0cy5maWVsZHMgYXJyYXlzIHdpbGwgYmUgYXV0b21hZ2ljYWxseSBhZGRlZC5cbiAgICAgKiBAcmV0dXJucyB7e3VyaTogc3RyaW5nLCBtZXRob2Q6IHN0cmluZywgYm9keTogT2JqZWN0LCBxczogT2JqZWN0LCBmb2xsb3dBbGxSZWRpcmVjdHM6IGJvb2xlYW4sIGpzb246IGJvb2xlYW59fVxuICAgICAqL1xuICAgIHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRzLCBwYXRoLCBtZXRob2QsIGJvZHksIHFzKSB7XG4gICAgICAgIHZhciBiYXNlUGF0aCA9ICcvZmlsdGVyLycgKyBvcHRzLmZpbHRlcklkO1xuICAgICAgICBpZiAoIXFzKSBxcyA9IHt9O1xuICAgICAgICBpZiAoIWJvZHkpIGJvZHkgPSB7fTtcblxuICAgICAgICBpZiAob3B0cy5maWVsZHMpIHtcbiAgICAgICAgICAgIHFzLmZpZWxkcyA9ICcnO1xuICAgICAgICAgICAgb3B0cy5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICBxcy5maWVsZHMgKz0gZmllbGQgKyAnLCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcXMuZmllbGRzID0gcXMuZmllbGRzLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRzLmV4cGFuZCkge1xuICAgICAgICAgICAgcXMuZXhwYW5kID0gJyc7XG4gICAgICAgICAgICBvcHRzLmV4cGFuZC5mb3JFYWNoKGZ1bmN0aW9uIChleCkge1xuICAgICAgICAgICAgICAgIHFzLmV4cGFuZCArPSBleCArICcsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBxcy5leHBhbmQgPSBxcy5leHBhbmQuc2xpY2UoMCwgLTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKGJhc2VQYXRoICsgcGF0aCksXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICBxczogcXMsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBqc29uOiB0cnVlXG4gICAgICAgIH07XG4gICAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyb3VwQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL2dyb3VwJ1xuICpcbiAqIFRoZXNlIGFyZSBjb25zaWRlcmVkIGV4cGVyaW1lbnRhbCBhY2NvcmRpbmcgdG8gdGhlIEppcmEgRG9jcywgdXNlIGF0IHlvdXIgb3duIHJpc2suXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgR3JvdXBDbGllbnRcbiAqL1xuZnVuY3Rpb24gR3JvdXBDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZ3JvdXAgYnkgZ2l2ZW4gZ3JvdXAgcGFyYW1ldGVyIFJldHVybnMgUkVTVCByZXByZXNlbnRhdGlvbiBmb3IgdGhlIHJlcXVlc3RlZCBncm91cC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3JlYXRlR3JvdXBcbiAgICAgKiBAbWVtYmVyT2YgR3JvdXBDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIGppcmFcbiAgICAgKiBAcGFyYW0gb3B0cy5ncm91cCBUaGUgZ3JvdXAgdG8gY3JlYXRlLiAgU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmUyMDExfVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBncm91cCBpcyBjcmVhdGVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgZ3JvdXAgaXMgY3JlYXRlZFxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlR3JvdXAgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2dyb3VwJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiBvcHRzLmdyb3VwXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgUkVTVCByZXByZXNlbnRhdGlvbiBmb3IgdGhlIHJlcXVlc3RlZCBncm91cC4gQWxsb3dzIHRvIGdldCBsaXN0IG9mIGFjdGl2ZSB1c2VycyBiZWxvbmdpbmcgdG8gdGhlXG4gICAgICogc3BlY2lmaWVkIGdyb3VwIGFuZCBpdHMgc3ViZ3JvdXBzIGlmIFwidXNlcnNcIiBleHBhbmQgb3B0aW9uIGlzIHByb3ZpZGVkLiBZb3UgY2FuIHBhZ2UgdGhyb3VnaCB1c2VycyBsaXN0IGJ5IHVzaW5nXG4gICAgICogaW5kZXhlcyBpbiBleHBhbmQgcGFyYW0uIEZvciBleGFtcGxlIHRvIGdldCB1c2VycyBmcm9tIGluZGV4IDEwIHRvIGluZGV4IDE1IHVzZSBcInVzZXJzWzEwOjE1XVwiIGV4cGFuZCB2YWx1ZS5cbiAgICAgKiBUaGlzIHdpbGwgcmV0dXJuIDYgdXNlcnMgKGlmIHRoZXJlIGFyZSBhdCBsZWFzdCAxNiB1c2VycyBpbiB0aGlzIGdyb3VwKS4gSW5kZXhlcyBhcmUgMC1iYXNlZCBhbmQgaW5jbHVzaXZlLlxuICAgICAqIERFUFJFQ0FURUQuIFRoaXMgcmVzb3VyY2UgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBncm91cC9tZW1iZXIgQVBJIGluc3RlYWQuICgxNS1GZWItMjAxOClcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0R3JvdXBcbiAgICAgKiBAbWVtYmVyT2YgR3JvdXBDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLmdyb3VwTmFtZSBBIG5hbWUgb2YgcmVxdWVzdGVkIGdyb3VwLlxuICAgICAqIEBwYXJhbSBvcHRzLmV4cGFuZCBBcnJheSBvZiBmaWVsZHMgdG8gZXhwYW5kLiBDdXJyZW50bHkgb25seSBhdmFpbGFibGUgZXhwYW5kIGlzIFwidXNlcnNcIi5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgZ3JvdXAgaXMgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGdyb3VwIGlzIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldEdyb3VwID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBxcyA9IHtcbiAgICAgICAgICAgIGdyb3VwbmFtZTogb3B0cy5ncm91cE5hbWVcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0cy5leHBhbmQpIHtcbiAgICAgICAgICAgIHFzLmV4cGFuZCA9ICcnO1xuICAgICAgICAgICAgb3B0cy5leHBhbmQuZm9yRWFjaChmdW5jdGlvbiAoZXgpIHtcbiAgICAgICAgICAgICAgICBxcy5leHBhbmQgKz0gZXggKyAnLCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2dyb3VwJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiBxc1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIHJlc291cmNlIHJldHVybnMgYSBwYWdpbmF0ZWQgbGlzdCBvZiB1c2VycyB3aG8gYXJlIG1lbWJlcnMgb2YgdGhlIHNwZWNpZmllZCBncm91cCBhbmQgaXRzIHN1Ymdyb3Vwcy5cbiAgICAgKiBVc2VycyBpbiB0aGUgcGFnZSBhcmUgb3JkZXJlZCBieSB1c2VyIG5hbWVzLlxuICAgICAqIFVzZXIgb2YgdGhpcyByZXNvdXJjZSBpcyByZXF1aXJlZCB0byBoYXZlIHN5c2FkbWluIG9yIGFkbWluIHBlcm1pc3Npb25zLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRNZW1iZXJzXG4gICAgICogQG1lbWJlck9mIEdyb3VwQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5ncm91cE5hbWUgQSBuYW1lIG9mIHJlcXVlc3RlZCBncm91cC5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdHMuaW5jbHVkZUluYWN0aXZlVXNlcnMgaW5hY3RpdmUgdXNlcnMgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzcG9uc2UgaWYgc2V0IHRvIHRydWUuIERlZmF1bHQgZmFsc2UuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdHMuc3RhcnRBdCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVzZXIgaW4gZ3JvdXAgdG8gcmV0dXJuICgwIGJhc2VkKS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5tYXhSZXN1bHRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiB1c2VycyB0byByZXR1cm4gKG1heCA1MCkuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGdyb3VwIGlzIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBncm91cCBpcyByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRNZW1iZXJzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBxcyA9IHtcbiAgICAgICAgICAgIGdyb3VwbmFtZTogb3B0cy5ncm91cE5hbWUsXG4gICAgICAgICAgICBpbmNsdWRlSW5hY3RpdmVVc2Vyczogb3B0cy5pbmNsdWRlSW5hY3RpdmVVc2VycyxcbiAgICAgICAgICAgIHN0YXJ0QXQ6IG9wdHMuc3RhcnRBdCxcbiAgICAgICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0cyxcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvZ3JvdXAvbWVtYmVyJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiBxc1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGdpdmVuIHVzZXIgdG8gYSBncm91cC4gUmV0dXJucyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZ3JvdXAuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGFkZFVzZXJUb0dyb3VwXG4gICAgICogQG1lbWJlck9mIEdyb3VwQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5ncm91cE5hbWUgQSBuYW1lIG9mIHJlcXVlc3RlZCBncm91cC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy51c2VyTmFtZSBUaGUgbmFtZSBvZiB0aGUgdXNlciB0byBhZGQgdG8gdGhlIGdyb3VwLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB1c2VyIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBncm91cC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB1c2VyIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBncm91cC5cbiAgICAgKi9cbiAgICB0aGlzLmFkZFVzZXJUb0dyb3VwID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9ncm91cC91c2VyJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIGdyb3VwbmFtZTogb3B0cy5ncm91cE5hbWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgbmFtZTogb3B0cy51c2VyTmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGdpdmVuIHVzZXIgZnJvbSBhIGdyb3VwLiBSZXR1cm5zIG5vIGNvbnRlbnRcbiAgICAgKlxuICAgICAqIEBtZXRob2QgcmVtb3ZlVXNlckZyb21Hcm91cFxuICAgICAqIEBtZW1iZXJPZiBHcm91cENsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZ3JvdXBOYW1lIEEgbmFtZSBvZiByZXF1ZXN0ZWQgZ3JvdXAuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMudXNlck5hbWUgVGhlIG5hbWUgb2YgdGhlIHVzZXIgdG8gYWRkIHRvIHRoZSBncm91cC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgdXNlciBoYXMgYmVlbiBhZGRlZCB0byB0aGUgZ3JvdXAuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgdXNlciBoYXMgYmVlbiBhZGRlZCB0byB0aGUgZ3JvdXAuXG4gICAgICovXG4gICAgdGhpcy5yZW1vdmVVc2VyRnJvbUdyb3VwID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9ncm91cC91c2VyJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgZ3JvdXBuYW1lOiBvcHRzLmdyb3VwTmFtZSxcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogb3B0cy51c2VyTmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdVc2VyIFJlbW92ZWQgZnJvbSBHcm91cCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgZ3JvdXAgYnkgZ2l2ZW4gZ3JvdXAgcGFyYW1ldGVyLiBSZXR1cm5zIG5vIGNvbnRlbnRcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlR3JvdXBcbiAgICAgKiBAbWVtYmVyT2YgR3JvdXBDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmdyb3VwTmFtZSBBIGdyb3VwIHRvIGRlbGV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc3dhcEdyb3VwXSBBIGdyb3VwIHRvIHRyYW5zZmVyIHZpc2liaWxpdHkgcmVzdHJpY3Rpb25zIG9mIHRoZSBncm91cCB0aGF0IGlzIGJlaW5nIGRlbGV0ZWRcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgZ3JvdXAgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBncm91cCBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlR3JvdXAgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2dyb3VwJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgZ3JvdXBuYW1lOiBvcHRzLmdyb3VwTmFtZSxcbiAgICAgICAgICAgICAgICBzd2FwR3JvdXA6IG9wdHMuc3dhcEdyb3VwXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ0dyb3VwIERlbGV0ZWQnKTtcbiAgICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyb3VwVXNlclBpY2tlckNsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9ncm91cHVzZXJwaWNrZXInXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBHcm91cFVzZXJQaWNrZXJDbGllbnRcbiAqL1xuZnVuY3Rpb24gR3JvdXBVc2VyUGlja2VyQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgdXNlcnMgYW5kIGdyb3VwcyBtYXRjaGluZyBxdWVyeSB3aXRoIGhpZ2hsaWdodGluZy4gVGhpcyByZXNvdXJjZSBjYW5ub3QgYmUgYWNjZXNzZWRcbiAgICAgKiBhbm9ueW1vdXNseS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZmluZFVzZXJzQW5kR3JvdXBzXG4gICAgICogQG1lbWJlck9mIEdyb3VwVXNlclBpY2tlckNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHRvIHNlbmQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnF1ZXJ5IEEgc3RyaW5nIHVzZWQgdG8gc2VhcmNoIHVzZXJuYW1lLCBOYW1lIG9yIGUtbWFpbCBhZGRyZXNzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLm1heFJlc3VsdHNdIHRoZSBtYXhpbXVtIG51bWJlciBvZiB1c2VycyB0byByZXR1cm4gKGRlZmF1bHRzIHRvIDUwKS4gVGhlIG1heGltdW0gYWxsb3dlZFxuICAgICAqICAgICB2YWx1ZSBpcyAxMDAwLiBJZiB5b3Ugc3BlY2lmeSBhIHZhbHVlIHRoYXQgaXMgaGlnaGVyIHRoYW4gdGhpcyBudW1iZXIsIHlvdXIgc2VhcmNoIHJlc3VsdHMgd2lsbCBiZVxuICAgICAqICAgICB0cnVuY2F0ZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zaG93QXZhdGFyXSBXaGV0aGVyIHRvIHNob3cgdGhlIGF2YXRhclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5maWVsZElkXSBUaGUgY3VzdG9tIGZpZWxkIGlkLCBpZiB0aGlzIHJlcXVlc3QgY29tZXMgZnJvbSBhIGN1c3RvbSBmaWVsZCwgc3VjaCBhcyBhIHVzZXJcbiAgICAgKiAgICAgcGlja2VyLiBPcHRpb25hbC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMucHJvamVjdElkXSBUaGUgbGlzdCBvZiBwcm9qZWN0IGlkcyB0byBmdXJ0aGVyIHJlc3RyaWN0IHRoZSBzZWFyY2ggVGhpcyBwYXJhbWV0ZXIgY2FuIG9jY3VyXG4gICAgICogICAgIG11bHRpcGxlIHRpbWVzIHRvIHBhc3MgaW4gbXVsdGlwbGUgcHJvamVjdCBpZHMuIENvbW1hIHNlcGFyYXRlZCB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkLiBUaGlzIHBhcmFtZXRlciBpc1xuICAgICAqICAgICBvbmx5IHVzZWQgd2hlbiBmaWVsZElkIGlzIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlVHlwZUlkXSBUaGUgbGlzdCBvZiBpc3N1ZSB0eXBlIGlkcyB0byBmdXJ0aGVyIHJlc3RyaWN0IHRoZSBzZWFyY2guIFRoaXMgcGFyYW1ldGVyIGNhblxuICAgICAqICAgICBvY2N1ciBtdWx0aXBsZSB0aW1lcyB0byBwYXNzIGluIG11bHRpcGxlIGlzc3VlIHR5cGUgaWRzLiBDb21tYSBzZXBhcmF0ZWQgdmFsdWUgaXMgbm90IHN1cHBvcnRlZC4gU3BlY2lhbFxuICAgICAqICAgICB2YWx1ZXMgc3VjaCBhcyAtMSAoYWxsIHN0YW5kYXJkIGlzc3VlIHR5cGVzKSwgLTIgKGFsbCBzdWJ0YXNrIGlzc3VlIHR5cGVzKSBhcmUgc3VwcG9ydGVkLiBUaGlzIHBhcmFtZXRlciBpc1xuICAgICAqICAgICBvbmx5IHVzZWQgd2hlbiBmaWVsZElkIGlzIHByZXNlbnQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNlYXJjaCBpcyBjb21wbGV0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgc2VhcmNoIGlzIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmZpbmRVc2Vyc0FuZEdyb3VwcyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvZ3JvdXB1c2VycGlja2VyJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IG9wdHMucXVlcnksXG4gICAgICAgICAgICAgICAgbWF4UmVzdWx0czogb3B0cy5tYXhSZXN1bHRzLFxuICAgICAgICAgICAgICAgIHNob3dBdmF0YXI6IG9wdHMuc2hvd0F2YXRhcixcbiAgICAgICAgICAgICAgICBmaWVsZElkOiBvcHRzLmZpZWxkSWQsXG4gICAgICAgICAgICAgICAgcHJvamVjdElkOiBvcHRzLnByb2plY3RJZCxcbiAgICAgICAgICAgICAgICBpc3N1ZVR5cGVJZDogb3B0cy5pc3N1ZVR5cGVJZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gR3JvdXBzQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL2dyb3VwcydcbiAqXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBHcm91cHNDbGllbnRcbiAqL1xuZnVuY3Rpb24gR3JvdXBzQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBncm91cHMgd2l0aCBzdWJzdHJpbmdzIG1hdGNoaW5nIGEgZ2l2ZW4gcXVlcnkuIFRoaXMgaXMgbWFpbmx5IGZvciB1c2Ugd2l0aCB0aGUgZ3JvdXAgcGlja2VyLCBzbyB0aGVcbiAgICAgKiByZXR1cm5lZCBncm91cHMgY29udGFpbiBodG1sIHRvIGJlIHVzZWQgYXMgcGlja2VyIHN1Z2dlc3Rpb25zLiBUaGUgZ3JvdXBzIGFyZSBhbHNvIHdyYXBwZWQgaW4gYSBzaW5nbGUgcmVzcG9uc2VcbiAgICAgKiBvYmplY3QgdGhhdCBhbHNvIGNvbnRhaW5zIGEgaGVhZGVyIGZvciB1c2UgaW4gdGhlIHBpY2tlciwgc3BlY2lmaWNhbGx5IFNob3dpbmcgWCBvZiBZIG1hdGNoaW5nIGdyb3Vwcy4gVGhlXG4gICAgICogbnVtYmVyIG9mIGdyb3VwcyByZXR1cm5lZCBpcyBsaW1pdGVkIGJ5IHRoZSBzeXN0ZW0gcHJvcGVydHkgXCJqaXJhLmFqYXguYXV0b2NvbXBsZXRlLmxpbWl0XCIgVGhlIGdyb3VwcyB3aWxsIGJlXG4gICAgICogdW5pcXVlIGFuZCBzb3J0ZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGZpbmRHcm91cHNcbiAgICAgKiBAbWVtYmVyT2YgR3JvdXBzQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgdG8gdXNlIGluIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5xdWVyeSBBIHN0cmluZyBhZ2FpbnN0IHdoaWNoIHRvIG1hdGNoIGdyb3Vwcy4gIExlYXZlIHRoaXMgYmxhbmsgdG8gcmV0dXJuIGFsbCBncm91cHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZXhjbHVkZSBBIHN0cmluZyBzcGVjaWZ5aW5nIGdyb3VwcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLm1heFJlc3VsdHMgVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBncm91cHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBncm91cHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmZpbmRHcm91cHMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2dyb3Vwcy9waWNrZXInKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogb3B0cy5xdWVyeSxcbiAgICAgICAgICAgICAgICBleGNsdWRlOiBvcHRzLmV4Y2x1ZGUsXG4gICAgICAgICAgICAgICAgbWF4UmVzdWx0czogb3B0cy5tYXhSZXN1bHRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgZXJyb3JTdHJpbmdzID0gcmVxdWlyZSgnLi8uLi9saWIvZXJyb3InKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gSXNzdWVDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvaXNzdWUnIGFuZCAnL3Jlc3QvYWdpbGUvMS4wL2lzc3VlJ1xuICogQGNvbnN0cnVjdG9yIElzc3VlQ2xpZW50XG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqL1xuZnVuY3Rpb24gSXNzdWVDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBlc3RpbWF0aW9uIG9mIHRoZSBpc3N1ZSBhbmQgYSBmaWxlZElkIG9mIHRoZSBmaWVsZCB0aGF0IGlzXG4gICAgICogdXNlZCBmb3IgaXQuICBUaGUgYm9hcmRJZCBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQsIGFuZCBkZXRlcm1pbmVzIHdoaWNoXG4gICAgICogZmllbGQgd2lsbCBiZSB1cGRhdGVkIG9uIGFuIGlzc3VlLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRJc3N1ZUVzdGltYXRpb25cbiAgICAgKiBAbWVtYmVyT2YgSXNzdWVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgQVBJLiAgTm90ZSB0aGF0IHRoaXNcbiAgICAgKiAgICAgICAgb2JqZWN0IG11c3QgY29udGFpbiBFSVRIRVIgYW4gaXNzdWVJZCBvciBpc3N1ZUtleSBwcm9wZXJ0eTtcbiAgICAgKiAgICAgICAgaXNzdWVJZCB3aWxsIGJlIHVzZWQgb3ZlciBpc3N1ZUtleSBpZiBib3RoIGFyZSBwcmVzZW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUlkXSBUaGUgaWQgb2YgdGhlIGlzc3VlLiAgRVg6IDEwMDAyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlS2V5XSBUaGUgS2V5IG9mIHRlaCBpc3N1ZS4gIEVYOiBKV1ItM1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5ib2FyZElkXSBUaGUgaWQgb2YgdGhlIGJvYXJkIHJlcXVpcmVkIHRvXG4gICAgICogICAgICAgIGRldGVybWluZSB3aGljaCBmaWVsZCBpcyB1c2VkIGZvciBlc3RpbWF0aW9uLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBpc3N1ZSBlc3RpbWF0aW9uIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBpc3N1ZSBlc3RpbWF0aW9uIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldElzc3VlRXN0aW1hdGlvbiA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZW5kcG9pbnQgPSAnL2lzc3VlLycgKyAob3B0cy5pc3N1ZUlkIHx8IG9wdHMuaXNzdWVLZXkpICsgJy9lc3RpbWF0aW9uJztcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEFnaWxlVVJMKGVuZHBvaW50KSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBib2FyZElkOiBvcHRzLmJvYXJkSWQsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBvcHRzLmZpbHRlcixcbiAgICAgICAgICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgICAgICAgICAgbWF4UmVzdWx0czogb3B0cy5tYXhSZXN1bHRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGVzdGltYXRpb24gb2YgdGhlIGlzc3VlLiAgVGhlIGJvYXJkSWQgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLFxuICAgICAqIGFuZCBkZXRlcm1pbmVzIHdoaWNoIGZpZWxkIHdpbGwgYmUgdXBkYXRlZCBvbiBhbiBpc3N1ZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2V0SXNzdWVFc3RpbWF0aW9uXG4gICAgICogQG1lbWJlck9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzXG4gICAgICogICAgICAgIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3IgaXNzdWVLZXkgcHJvcGVydHk7XG4gICAgICogICAgICAgIGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMudmFsdWVdIFRoZSB2YWx1ZSB0byBzZXQgdGhlIGlzc3VlIGVzdGltYXRpb24gYXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGVoIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJvYXJkSWRdIFRoZSBpZCBvZiB0aGUgYm9hcmQgcmVxdWlyZWQgdG9cbiAgICAgKiAgICAgICAgZGV0ZXJtaW5lIHdoaWNoIGZpZWxkIGlzIHVzZWQgZm9yIGVzdGltYXRpb24uXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGlzc3VlIGVzdGltYXRpb24gaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBpc3N1ZSBlc3RpbWF0aW9uIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICovXG4gICAgdGhpcy5zZXRJc3N1ZUVzdGltYXRpb24gPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGVuZHBvaW50ID0gJy9pc3N1ZS8nICsgKG9wdHMuaXNzdWVJZCB8fCBvcHRzLmlzc3VlS2V5KSArICcvZXN0aW1hdGlvbic7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRBZ2lsZVVSTChlbmRwb2ludCksXG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogb3B0cy52YWx1ZSxcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IG9wdHMuZmlsdGVyLFxuICAgICAgICAgICAgICAgIHN0YXJ0QXQ6IG9wdHMuc3RhcnRBdCxcbiAgICAgICAgICAgICAgICBtYXhSZXN1bHRzOiBvcHRzLm1heFJlc3VsdHNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICBib2FyZElkOiBvcHRzLmJvYXJkSWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTW92ZXMgKHJhbmtzKSBpc3N1ZXMgYmVmb3JlIG9yIGFmdGVyIGEgZ2l2ZW4gaXNzdWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNldElzc3VlUmFua3NcbiAgICAgKiBAbWVtYmVyT2YgSXNzdWVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJhbmtpbmcgVGhlIHJhbmtpbmcgZGF0YSBpbiB0aGUgZm9ybSBvZiBQVVQgYm9keSB0byB0aGVcbiAgICAgKiAgICAgICAgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGlzc3VlIHJhbmsgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBpc3N1ZSByYW5rIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICovXG4gICAgdGhpcy5zZXRJc3N1ZVJhbmtzID0gZnVuY3Rpb24gKHJhbmtpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRBZ2lsZVVSTCgnL2lzc3VlL3JhbmsnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgYm9keTogcmFua2luZ1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGlzc3VlIG9yIGEgc3ViLXRhc2sgZnJvbSBhIEpTT04gcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBUaGUgZmllbGRzIHRoYXQgY2FuIGJlIHNldCBvbiBjcmVhdGUsIGluIGVpdGhlciB0aGUgZmllbGRzIHBhcmFtZXRlciBvciB0aGUgdXBkYXRlIHBhcmFtZXRlciBjYW4gYmUgZGV0ZXJtaW5lZFxuICAgICAqIHVzaW5nIHRoZSAvcmVzdC9hcGkvMi9pc3N1ZS9jcmVhdGVtZXRhIHJlc291cmNlLiBJZiBhIGZpZWxkIGlzIG5vdCBjb25maWd1cmVkIHRvIGFwcGVhciBvbiB0aGUgY3JlYXRlIHNjcmVlbixcbiAgICAgKiB0aGVuIGl0IHdpbGwgbm90IGJlIGluIHRoZSBjcmVhdGVtZXRhLCBhbmQgYSBmaWVsZCB2YWxpZGF0aW9uIGVycm9yIHdpbGwgb2NjdXIgaWYgaXQgaXMgc3VibWl0dGVkLlxuICAgICAqXG4gICAgICogQ3JlYXRpbmcgYSBzdWItdGFzayBpcyBzaW1pbGFyIHRvIGNyZWF0aW5nIGEgcmVndWxhciBpc3N1ZSwgd2l0aCB0d28gaW1wb3J0YW50IGRpZmZlcmVuY2VzOlxuICAgICAqXG4gICAgICogKiB0aGUgaXNzdWVUeXBlIGZpZWxkIG11c3QgY29ycmVzcG9uZCB0byBhIHN1Yi10YXNrIGlzc3VlIHR5cGUgKHlvdSBjYW4gdXNlIC9pc3N1ZS9jcmVhdGVtZXRhIHRvIGRpc2NvdmVyXG4gICAgICogc3ViLXRhc2sgaXNzdWUgdHlwZXMpLCBhbmRcbiAgICAgKiAqIHlvdSBtdXN0IHByb3ZpZGUgYSBwYXJlbnQgZmllbGQgaW4gdGhlIGlzc3VlIGNyZWF0ZSByZXF1ZXN0IGNvbnRhaW5pbmcgdGhlIGlkIG9yIGtleSBvZiB0aGUgcGFyZW50IGlzc3VlLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVJc3N1ZVxuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaXNzdWUgVGhlIGlzc3VlIGRhdGEgaW4gdGhlIGZvcm0gb2YgUE9TVCBib2R5IHRvIHRoZSBKSVJBIEFQSS5cbiAgICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTM5OH1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgaXNzdWUgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBpc3N1ZSBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlSXNzdWUgPSBmdW5jdGlvbiAoaXNzdWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9pc3N1ZScpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgYm9keTogaXNzdWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWV0YSBkYXRhIGZvciBjcmVhdGluZyBpc3N1ZXMuIFRoaXMgaW5jbHVkZXMgdGhlIGF2YWlsYWJsZSBwcm9qZWN0cywgaXNzdWUgdHlwZXMgYW5kIGZpZWxkcyxcbiAgICAgKiBpbmNsdWRpbmcgZmllbGQgdHlwZXMgYW5kIHdoZXRoZXIgb3Igbm90IHRob3NlIGZpZWxkcyBhcmUgcmVxdWlyZWQuIFByb2plY3RzIHdpbGwgbm90IGJlIHJldHVybmVkIGlmIHRoZSB1c2VyXG4gICAgICogZG9lcyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGNyZWF0ZSBpc3N1ZXMgaW4gdGhhdCBwcm9qZWN0LlxuICAgICAqXG4gICAgICogVGhlIGZpZWxkcyBpbiB0aGUgY3JlYXRlbWV0YSBjb3JyZXNwb25kIHRvIHRoZSBmaWVsZHMgaW4gdGhlIGNyZWF0ZSBzY3JlZW4gZm9yIHRoZSBwcm9qZWN0L2lzc3VldHlwZS4gRmllbGRzIG5vdFxuICAgICAqIGluIHRoZSBzY3JlZW4gd2lsbCBub3QgYmUgaW4gdGhlIGNyZWF0ZW1ldGEuXG4gICAgICpcbiAgICAgKiBGaWVsZHMgd2lsbCBvbmx5IGJlIHJldHVybmVkIGlmIGBgYGV4cGFuZD1wcm9qZWN0cy5pc3N1ZXR5cGVzLmZpZWxkcy5gYGBcbiAgICAgKlxuICAgICAqIFRoZSByZXN1bHRzIGNhbiBiZSBmaWx0ZXJlZCBieSBwcm9qZWN0IGFuZC9vciBpc3N1ZSB0eXBlLCBnaXZlbiBieSB0aGUgcXVlcnkgcGFyYW1zLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRDcmVhdGVNZXRhZGF0YVxuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHNdIFRoZSBvcHRpb25zIGZvciB0aGUgQVBJIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnByb2plY3RJZHNdIGNvbWJpbmVkIHdpdGggdGhlIHByb2plY3RLZXlzIHBhcmFtLCBsaXN0cyB0aGUgcHJvamVjdHMgd2l0aCB3aGljaCB0byBmaWx0ZXJcbiAgICAgKiAgICAgdGhlIHJlc3VsdHMuIElmIGFic2VudCwgYWxsIHByb2plY3RzIGFyZSByZXR1cm5lZC4gVGhpcyBwYXJhbWV0ZXIgY2FuIGJlIHNwZWNpZmllZCBtdWx0aXBsZSB0aW1lcywgYW5kL29yIGJlXG4gICAgICogICAgIGEgY29tbWEtc2VwYXJhdGVkIGxpc3QuIFNwZWNpZml5aW5nIGEgcHJvamVjdCB0aGF0IGRvZXMgbm90IGV4aXN0IChvciB0aGF0IHlvdSBjYW5ub3QgY3JlYXRlIGlzc3VlcyBpbikgaXNcbiAgICAgKiAgICAgbm90IGFuIGVycm9yLCBidXQgaXQgd2lsbCBub3QgYmUgaW4gdGhlIHJlc3VsdHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnByb2plY3RLZXlzXSBjb21iaW5lZCB3aXRoIHRoZSBwcm9qZWN0SWRzIHBhcmFtLCBsaXN0cyB0aGUgcHJvamVjdHMgd2l0aCB3aGljaCB0byBmaWx0ZXJcbiAgICAgKiAgICAgdGhlIHJlc3VsdHMuIElmIG51bGwsIGFsbCBwcm9qZWN0cyBhcmUgcmV0dXJuZWQuIFRoaXMgcGFyYW1ldGVyIGNhbiBiZSBzcGVjaWZpZWQgbXVsdGlwbGUgdGltZXMsIGFuZC9vciBiZSBhXG4gICAgICogICAgIGNvbW1hLXNlcGFyYXRlZCBsaXN0LiBTcGVjaWZpeWluZyBhIHByb2plY3QgdGhhdCBkb2VzIG5vdCBleGlzdCAob3IgdGhhdCB5b3UgY2Fubm90IGNyZWF0ZSBpc3N1ZXMgaW4pIGlzIG5vdFxuICAgICAqICAgICBhbiBlcnJvciwgYnV0IGl0IHdpbGwgbm90IGJlIGluIHRoZSByZXN1bHRzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZXR5cGVJZHNdIGNvbWJpbmRlZCB3aXRoIGlzc3VldHlwZU5hbWVzLCBsaXN0cyB0aGUgaXNzdWUgdHlwZXMgd2l0aCB3aGljaCB0byBmaWx0ZXJcbiAgICAgKiAgICAgdGhlIHJlc3VsdHMuIElmIG51bGwsIGFsbCBpc3N1ZSB0eXBlcyBhcmUgcmV0dXJuZWQuIFRoaXMgcGFyYW1ldGVyIGNhbiBiZSBzcGVjaWZpZWQgbXVsdGlwbGUgdGltZXMsIGFuZC9vclxuICAgICAqICAgICBiZSBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0LiBTcGVjaWZpeWluZyBhbiBpc3N1ZSB0eXBlIHRoYXQgZG9lcyBub3QgZXhpc3QgaXMgbm90IGFuIGVycm9yLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZXR5cGVOYW1lc10gY29tYmluZGVkIHdpdGggaXNzdWV0eXBlSWRzLCBsaXN0cyB0aGUgaXNzdWUgdHlwZXMgd2l0aCB3aGljaCB0byBmaWx0ZXJcbiAgICAgKiAgICAgdGhlIHJlc3VsdHMuIElmIG51bGwsIGFsbCBpc3N1ZSB0eXBlcyBhcmUgcmV0dXJuZWQuIFRoaXMgcGFyYW1ldGVyIGNhbiBiZSBzcGVjaWZpZWQgbXVsdGlwbGUgdGltZXMsIGJ1dCBpc1xuICAgICAqICAgICBOT1QgaW50ZXJwcmV0ZWQgYXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdC4gU3BlY2lmaXlpbmcgYW4gaXNzdWUgdHlwZSB0aGF0IGRvZXMgbm90IGV4aXN0IGlzIG5vdCBhbiBlcnJvci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZXhwYW5kXSBpbiBvcmRlciB0byBnZXQgZXhwYW5kZWQgZmllbGQgZGVzY3JpcHRpb25zLCBzcGVjaWZ5ICdwcm9qZWN0cy5pc3N1ZXR5cGVzLmZpZWxkcycgaGVyZS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgbWV0YWRhdGEgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIG1ldGFkYXRhIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldENyZWF0ZU1ldGFkYXRhID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9pc3N1ZS9jcmVhdGVtZXRhJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgcHJvamVjdElkczogb3B0cy5wcm9qZWN0SWRzLFxuICAgICAgICAgICAgICAgIHByb2plY3RLZXlzOiBvcHRzLnByb2plY3RLZXlzLFxuICAgICAgICAgICAgICAgIGlzc3VldHlwZUlkczogb3B0cy5pc3N1ZXR5cGVJZHMsXG4gICAgICAgICAgICAgICAgaXNzdWV0eXBlTmFtZXM6IG9wdHMuaXNzdWV0eXBlTmFtZXMsXG4gICAgICAgICAgICAgICAgZXhwYW5kOiBvcHRzLmV4cGFuZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGlzc3VlcyBvciBzdWItdGFza3MgZnJvbSBhIEpTT04gcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIG1hbnkgaXNzdWVzIGluIG9uZSBidWxrIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIENyZWF0aW5nIGEgc3ViLXRhc2sgaXMgc2ltaWxhciB0byBjcmVhdGluZyBhIHJlZ3VsYXIgaXNzdWUuIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaW4gY3JlYXRlSXNzdWUgc2VjdGlvbjpcbiAgICAgKiB7QGxpbmsgSXNzdWVSZXNvdXJjZSNjcmVhdGVJc3N1ZShJc3N1ZVVwZGF0ZUJlYW4pfX1cbiAgICAgKlxuICAgICAqIEBtZXRob2QgYnVsa0NyZWF0ZVxuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0gaXNzdWVzIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlODI4fVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBpc3N1ZXMgaGF2ZSBiZWVuIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgaXNzdWVzIGhhdmUgYmVlbiBjcmVhdGVkLlxuICAgICAqL1xuICAgIHRoaXMuYnVsa0NyZWF0ZSA9IGZ1bmN0aW9uIChpc3N1ZXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9pc3N1ZS9idWxrJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBib2R5OiBpc3N1ZXNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZ1bGwgcmVwcmVzZW50YXRpb24gb2YgdGhlIGlzc3VlIGZvciB0aGUgZ2l2ZW4gaXNzdWUga2V5LlxuICAgICAqXG4gICAgICogQW4gaXNzdWUgSlNPTiBjb25zaXN0cyBvZiB0aGUgaXNzdWUga2V5LCBhIGNvbGxlY3Rpb24gb2YgZmllbGRzLCBhIGxpbmsgdG8gdGhlIHdvcmtmbG93IHRyYW5zaXRpb24gc3ViLXJlc291cmNlLFxuICAgICAqIGFuZCAob3B0aW9uYWxseSkgdGhlIEhUTUwgcmVuZGVyZWQgdmFsdWVzIG9mIGFueSBmaWVsZHMgdGhhdCBzdXBwb3J0IGl0IChlLmcuIGlmIHdpa2kgc3ludGF4IGlzIGVuYWJsZWQgZm9yIHRoZVxuICAgICAqIGRlc2NyaXB0aW9uIG9yIGNvbW1lbnRzKS5cbiAgICAgKlxuICAgICAqIFRoZSBmaWVsZHMgcGFyYW0gKHdoaWNoIGNhbiBiZSBzcGVjaWZpZWQgbXVsdGlwbGUgdGltZXMpIGdpdmVzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGluY2x1ZGUgaW5cbiAgICAgKiB0aGUgcmVzcG9uc2UuIFRoaXMgY2FuIGJlIHVzZWQgdG8gcmV0cmlldmUgYSBzdWJzZXQgb2YgZmllbGRzLiBBIHBhcnRpY3VsYXIgZmllbGQgY2FuIGJlIGV4Y2x1ZGVkIGJ5IHByZWZpeGluZ1xuICAgICAqIGl0IHdpdGggYSBtaW51cy5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQsIGFsbCAoXFwqYWxsKSBmaWVsZHMgYXJlIHJldHVybmVkIGluIHRoaXMgZ2V0LWlzc3VlIHJlc291cmNlLiBOb3RlOiB0aGUgZGVmYXVsdCBpcyBkaWZmZXJlbnQgd2hlbiBkb2luZ1xuICAgICAqIGEganFsIHNlYXJjaCAtLSB0aGUgZGVmYXVsdCB0aGVyZSBpcyBqdXN0IG5hdmlnYWJsZSBmaWVsZHMgKFxcKm5hdmlnYWJsZSkuXG4gICAgICpcbiAgICAgKiAqIFxcKmFsbCAtIGluY2x1ZGUgYWxsIGZpZWxkc1xuICAgICAqICogXFwqbmF2aWdhYmxlIC0gaW5jbHVkZSBqdXN0IG5hdmlnYWJsZSBmaWVsZHNcbiAgICAgKiAqIHN1bW1hcnksY29tbWVudCAtIGluY2x1ZGUganVzdCB0aGUgc3VtbWFyeSBhbmQgY29tbWVudHNcbiAgICAgKiAqIC1jb21tZW50IC0gaW5jbHVkZSBldmVyeXRoaW5nIGV4Y2VwdCBjb21tZW50cyAodGhlIGRlZmF1bHQgaXMgKmFsbCBmb3IgZ2V0LWlzc3VlKVxuICAgICAqICogXFwqYWxsLC1jb21tZW50IC0gaW5jbHVkZSBldmVyeXRoaW5nIGV4Y2VwdCBjb21tZW50c1xuICAgICAqXG4gICAgICogSklSQSB3aWxsIGF0dGVtcHQgdG8gaWRlbnRpZnkgdGhlIGlzc3VlIGJ5IHRoZSBpc3N1ZUlkT3JLZXkgcGF0aCBwYXJhbWV0ZXIuIFRoaXMgY2FuIGJlIGFuIGlzc3VlIGlkLCBvciBhbiBpc3N1ZVxuICAgICAqIGtleS4gSWYgdGhlIGlzc3VlIGNhbm5vdCBiZSBmb3VuZCB2aWEgYW4gZXhhY3QgbWF0Y2gsIEpJUkEgd2lsbCBhbHNvIGxvb2sgZm9yIHRoZSBpc3N1ZSBpbiBhIGNhc2UtaW5zZW5zaXRpdmVcbiAgICAgKiB3YXksIG9yIGJ5IGxvb2tpbmcgdG8gc2VlIGlmIHRoZSBpc3N1ZSB3YXMgbW92ZWQuIEluIGVpdGhlciBvZiB0aGVzZSBjYXNlcywgdGhlIHJlcXVlc3Qgd2lsbCBwcm9jZWVkIGFzIG5vcm1hbFxuICAgICAqIChhIDMwMiBvciBvdGhlciByZWRpcmVjdCB3aWxsIG5vdCBiZSByZXR1cm5lZCkuIFRoZSBpc3N1ZSBrZXkgY29udGFpbmVkIGluIHRoZSByZXNwb25zZSB3aWxsIGluZGljYXRlIHRoZVxuICAgICAqIGN1cnJlbnQgdmFsdWUgb2YgaXNzdWUncyBrZXkuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldElzc3VlXG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmFnaWxlXSBXaGV0aGVyIG9yIG5vdCB0byBjYWxsIHRoZSBhZ2lsZSB2ZXJzaW9uIG9mIHRoaXMgZW5kcG9pbnQuICBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHMuZmllbGRzXSBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTYxMX1cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHMuZXhwYW5kXSBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTYxMX1cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHMucHJvcGVydGllc10gU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmU2MTF9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gZGF0YSBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIGRhdGEgaGFzIGJlZW4gcmV0cmlldmVkXG4gICAgICovXG4gICAgdGhpcy5nZXRJc3N1ZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIW9wdHMuYWdpbGUpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcnLCAnR0VUJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZW5kcG9pbnQgPSAnL2lzc3VlLycgKyAob3B0cy5pc3N1ZUlkIHx8IG9wdHMuaXNzdWVLZXkpO1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRBZ2lsZVVSTChlbmRwb2ludCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IG9wdHMuZmlsdGVyLFxuICAgICAgICAgICAgICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgICAgICAgICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0cyxcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kOiBvcHRzLmV4cGFuZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGFuIGlzc3VlLiBJZiB0aGUgaXNzdWUgaGFzIHN1YnRhc2tzIHlvdSBtdXN0IHNldCB0aGUgcGFyYW1ldGVyIGRlbGV0ZVN1YnRhc2tzPXRydWUgdG8gZGVsZXRlIHRoZSBpc3N1ZS5cbiAgICAgKiBZb3UgY2Fubm90IGRlbGV0ZSBhbiBpc3N1ZSB3aXRob3V0IGl0cyBzdWJ0YXNrcyBhbHNvIGJlaW5nIGRlbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGRlbGV0ZUlzc3VlXG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZGVsZXRlU3VidGFza3NdIFwiYSBTdHJpbmcgb2YgdHJ1ZSBvciBmYWxzZSBpbmRpY2F0aW5nIHRoYXQgYW55IHN1YnRhc2tzIHNob3VsZCBhbHNvXG4gICAgICogICAgICAgIGJlIGRlbGV0ZWQuIElmIHRoZSBpc3N1ZSBoYXMgbm8gc3VidGFza3MgdGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZC4gSWYgdGhlIGlzc3VlIGhhcyBzdWJ0YXNrcyBhbmQgdGhpc1xuICAgICAqICAgICAgICBwYXJhbWV0ZXIgaXMgbWlzc2luZyBvciBmYWxzZSwgdGhlbiB0aGUgaXNzdWUgd2lsbCBub3QgYmUgZGVsZXRlZCBhbmQgYW4gZXJyb3Igd2lsbCBiZSByZXR1cm5lZC5cIlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIGRhdGEgaGFzIGJlZW4gcmV0cmlldmVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiBkYXRhIGhhcyBiZWVuIHJldHJpZXZlZFxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlSXNzdWUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJycsICdERUxFVEUnLCBudWxsLCB7ZGVsZXRlU3VidGFza3M6IG9wdHMuZGVsZXRlU3VidGFza3N9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnSXNzdWUgRGVsZXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAgRWRpdHMgYW4gaXNzdWUgZnJvbSBhIEpTT04gcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBUaGUgaXNzdWUgY2FuIGVpdGhlciBiZSB1cGRhdGVkIGJ5IHNldHRpbmcgZXhwbGljaXQgdGhlIGZpZWxkIHZhbHVlKHMpIG9yIGJ5IHVzaW5nIGFuIG9wZXJhdGlvbiB0byBjaGFuZ2UgdGhlXG4gICAgICogZmllbGQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBUaGUgZmllbGRzIHRoYXQgY2FuIGJlIHVwZGF0ZWQsIGluIGVpdGhlciB0aGUgZmllbGRzIHBhcmFtZXRlciBvciB0aGUgdXBkYXRlIHBhcmFtZXRlciwgY2FuIGJlIGRldGVybWluZWQgdXNpbmdcbiAgICAgKiB0aGUge0BsaW5rIElzc3VlQ2xpZW50I2dldEVkaXRNZXRhZGF0YX0gbWV0aG9kLiBJZiBhIGZpZWxkIGlzIG5vdCBjb25maWd1cmVkIHRvIGFwcGVhciBvbiB0aGUgZWRpdFxuICAgICAqIHNjcmVlbiwgdGhlbiBpdCB3aWxsIG5vdCBiZSBpbiB0aGUgZWRpdG1ldGEsIGFuZCBhIGZpZWxkIHZhbGlkYXRpb24gZXJyb3Igd2lsbCBvY2N1ciBpZiBpdCBpcyBzdWJtaXR0ZWQuXG4gICAgICpcbiAgICAgKiBTcGVjaWZ5aW5nIGEgXCJmaWVsZF9pZFwiOiBmaWVsZF92YWx1ZSBpbiB0aGUgXCJmaWVsZHNcIiBpcyBhIHNob3J0aGFuZCBmb3IgYSBcInNldFwiIG9wZXJhdGlvbiBpbiB0aGUgXCJ1cGRhdGVcIlxuICAgICAqIHNlY3Rpb24uIEZpZWxkIHNob3VsZCBhcHBlYXIgZWl0aGVyIGluIFwiZmllbGRzXCIgb3IgXCJ1cGRhdGVcIiwgbm90IGluIGJvdGguXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGVkaXRJc3N1ZVxuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMuaXNzdWUgU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmU2NTZ9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gZGF0YSBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIGRhdGEgaGFzIGJlZW4gcmV0cmlldmVkXG4gICAgICovXG4gICAgdGhpcy5lZGl0SXNzdWUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLmlzc3VlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0lTU1VFX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnJywgJ1BVVCcsIG9wdHMuaXNzdWUsIG9wdHMucXMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdJc3N1ZSBVcGRhdGVkJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgYW4gaXNzdWUgdG8gYSB1c2VyLiBZb3UgY2FuIHVzZSB0aGlzIHJlc291cmNlIHRvIGFzc2lnbiBpc3N1ZXMgd2hlbiB0aGUgdXNlciBzdWJtaXR0aW5nIHRoZSByZXF1ZXN0IGhhc1xuICAgICAqIHRoZSBhc3NpZ24gcGVybWlzc2lvbiBidXQgbm90IHRoZSBlZGl0IGlzc3VlIHBlcm1pc3Npb24uIElmIHRoZSBuYW1lIGlzIFwiLTFcIiBhdXRvbWF0aWMgYXNzaWduZWUgaXMgdXNlZC4gQSBudWxsXG4gICAgICogbmFtZSB3aWxsIHJlbW92ZSB0aGUgYXNzaWduZWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGFzc2lnbklzc3VlXG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5hc3NpZ25lZSBUaGUgbmFtZSBvZiB0aGUgdXNlciB0byB3aG9tIHRvIGFzc2lnbiB0aGUgaXNzdWUuIC0xIGZvciBkZWZhdWx0LCBudWxsIGZvciBub1xuICAgICAqICAgICBhc3NpZ25lZS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgaXNzdWUgaGFzIGJlZW4gYXNzaWduZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgaXNzdWUgaGFzIGJlZW4gYXNzaWduZWQuXG4gICAgICovXG4gICAgdGhpcy5hc3NpZ25Jc3N1ZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoISh0eXBlb2Ygb3B0cy5hc3NpZ25lZSA9PT0gXCJzdHJpbmdcIiAmJiBvcHRzLmFzc2lnbmVlLmxlbmd0aCB8fCBvcHRzLmFzc2lnbmVlID09PSBudWxsKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19BU1NJR05FRV9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL2Fzc2lnbmVlJywgJ1BVVCcsIHtuYW1lOiBvcHRzLmFzc2lnbmVlfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ0lzc3VlIEFzc2lnbmVkJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgdGhlIGNvbW1lbnRzIGZvciBhbiBpc3N1ZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0Q29tbWVudHNcbiAgICAgKiBAbWVtYmVyb2YgSXNzdWVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgQVBJLiAgTm90ZSB0aGF0IHRoaXMgb2JqZWN0IG11c3QgY29udGFpbiBFSVRIRVIgYW4gaXNzdWVJZCBvclxuICAgICAqICAgICAgICBpc3N1ZUtleSBwcm9wZXJ0eTsgaXNzdWVJZCB3aWxsIGJlIHVzZWQgb3ZlciBpc3N1ZUtleSBpZiBib3RoIGFyZSBwcmVzZW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUlkXSBUaGUgaWQgb2YgdGhlIGlzc3VlLiAgRVg6IDEwMDAyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlS2V5XSBUaGUgS2V5IG9mIHRoZSBpc3N1ZS4gIEVYOiBKV1ItM1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmV4cGFuZCBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTQ2MX1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgaXNzdWUgaGFzIGJlZW4gYXNzaWduZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgaXNzdWUgaGFzIGJlZW4gYXNzaWduZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRDb21tZW50cyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL2NvbW1lbnQnLCAnR0VUJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbW1lbnQgdG8gYW4gaXNzdWVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgYWRkQ29tbWVudFxuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMuY29tbWVudCBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTQ4Mn1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiBkYXRhIGhhcyBiZWVuIHJldHJpZXZlZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gZGF0YSBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICAgKi9cbiAgICB0aGlzLmFkZENvbW1lbnQgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICAgIGlmKG9wdHMuY29tbWVudC5ib2R5KSB7XG4gICAgICAgICAgICBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvY29tbWVudCcsICdQT1NUJywgb3B0cy5jb21tZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9jb21tZW50JywgJ1BPU1QnLCB7Ym9keTogb3B0cy5jb21tZW50fSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0Q29tbWVudFxuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuY29tbWVudElkIFRoZSBpZCBvZiB0aGUgY29tbWVudC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgY29tbWVudCBpcyByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgY29tbWVudCBpcyByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRDb21tZW50ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5jb21tZW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fQ09NTUVOVF9JRCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9jb21tZW50LycgKyBvcHRzLmNvbW1lbnRJZCwgJ0dFVCcpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGFuIGV4aXN0aW5nIGNvbW1lbnQgdXNpbmcgaXRzIEpTT04gcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGVkaXRDb21tZW50XG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5jb21tZW50SWQgVGhlIGlkIG9mIHRoZSBjb21tZW50LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmNvbW1lbnQgU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmU1Mzl9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gZGF0YSBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIGRhdGEgaGFzIGJlZW4gcmV0cmlldmVkXG4gICAgICovXG4gICAgdGhpcy5lZGl0Q29tbWVudCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIW9wdHMuY29tbWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19DT01NRU5UX0VSUk9SKTtcbiAgICAgICAgfSBlbHNlIGlmICghb3B0cy5jb21tZW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fQ09NTUVOVF9JRCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9jb21tZW50LycgKyBvcHRzLmNvbW1lbnRJZCwgJ1BVVCcsIG9wdHMuY29tbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBleGlzdGluZyBjb21tZW50LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBkZWxldGVDb21tZW50XG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5jb21tZW50SWQgVGhlIGlkIG9mIHRoZSBjb21tZW50LlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBjb21tZW50IGlzIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBjb21tZW50IGlzIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZUNvbW1lbnQgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLmNvbW1lbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19DT01NRU5UX0lEKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL2NvbW1lbnQvJyArIG9wdHMuY29tbWVudElkLCAnREVMRVRFJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ0NvbW1lbnQgRGVsZXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtZXRhIGRhdGEgZm9yIGVkaXRpbmcgYW4gaXNzdWUuXG4gICAgICpcbiAgICAgKiBUaGUgZmllbGRzIGluIHRoZSBlZGl0bWV0YSBjb3JyZXNwb25kIHRvIHRoZSBmaWVsZHMgaW4gdGhlIGVkaXQgc2NyZWVuIGZvciB0aGUgaXNzdWUuIEZpZWxkcyBub3QgaW4gdGhlIHNjcmVlblxuICAgICAqIHdpbGwgbm90IGJlIGluIHRoZSBlZGl0ZW1ldGEuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEVkaXRNZXRhZGF0YVxuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIG1ldGFkYXRhIGlzIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBtZXRhZGF0YSBpcyByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRFZGl0TWV0YWRhdGEgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9lZGl0bWV0YScsICdHRVQnKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBub3RpZmljYXRpb24gKGVtYWlsKSB0byB0aGUgbGlzdCBvciByZWNpcGllbnRzIGRlZmluZWQgaW4gdGhlIHJlcXVlc3QuXG4gICAgICogQSBjb3VwbGUgb2Ygbm90ZXM6IHRoaXMgbWF5IGNhbGwgYmFjayB3aXRoIHRoZSBlcnJvciAnTm8gcmVjaXBpZW50cyB3ZXJlIGRlZmluZWQgZm9yIG5vdGlmaWNhdGlvbi4nIGlmIGFsbFxuICAgICAqIG9mIHRoZSBpbnRlbmRlZCByZWNpcGllbnRzIGhhdmUgZGlzYWJsZWQgbm90aWZpY2F0aW9ucyBmcm9tIEppcmEuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNlbmRFbWFpbE5vdGlmaWNhdGlvblxuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMubm90aWZpY2F0aW9uIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlNDM1fVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBtZXRhZGF0YSBpcyByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgbWV0YWRhdGEgaXMgcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuc2VuZEVtYWlsTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5ub3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fTk9USUZJQ0FUSU9OX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvbm90aWZ5JywgJ1BPU1QnLCBvcHRzLm5vdGlmaWNhdGlvbik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ05vdGlmaWNhdGlvbnMgU2VudCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBSRVNUIHN1Yi1yZXNvdXJjZSByZXByZXNlbnRpbmcgdGhlIHJlbW90ZSBpc3N1ZSBsaW5rcyBvbiB0aGUgaXNzdWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFJlbW90ZUxpbmtzXG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5nbG9iYWxJZCBUaGUgaWQgb2YgdGhlIHJlbW90ZSBpc3N1ZSBsaW5rIHRvIGJlIHJldHVybmVkLiBJZiBudWxsIChub3QgcHJvdmlkZWQpIGFsbCByZW1vdGVcbiAgICAgKiAgICAgbGlua3MgZm9yIHRoZSBpc3N1ZSBhcmUgcmV0dXJuZWQuIEZvciBhIGZ1bGwgZXhwbGFuYXRpb24gb2YgSXNzdWUgTGluayBmaWVsZHMgcGxlYXNlIHJlZmVyIHRvXG4gICAgICogICAgIHtAbGluayBodHRwczovL2RldmVsb3Blci5hdGxhc3NpYW4uY29tL2Rpc3BsYXkvSklSQURFVi9GaWVsZHMraW4rUmVtb3RlK0lzc3VlK0xpbmtzfVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSByZW1vdGUgbGlua3MgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSByZW1vdGUgbGlua3MgYXJlIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFJlbW90ZUxpbmtzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvcmVtb3RlbGluaycsICdHRVQnLCBudWxsLCB7Z2xvYmFsSWQ6IG9wdHMuZ2xvYmFsSWR9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyAob3IgdXBkYXRlcykgYSByZW1vdGUgaXNzdWUgbGluayBmcm9tIGEgSlNPTiByZXByZXNlbnRhdGlvbi4gSWYgYSBnbG9iYWxJZCBpcyBwcm92aWRlZCBhbmQgYSByZW1vdGUgaXNzdWVcbiAgICAgKiBsaW5rIGV4aXN0cyB3aXRoIHRoYXQgZ2xvYmFsSWQsIHRoZSByZW1vdGUgaXNzdWUgbGluayBpcyB1cGRhdGVkLiBPdGhlcndpc2UsIHRoZSByZW1vdGUgaXNzdWUgbGluayBpcyBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVSZW1vdGVMaW5rXG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cy5yZW1vdGVMaW5rIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlOTQ1fVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSByZW1vdGUgbGlua3MgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSByZW1vdGUgbGlua3MgYXJlIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmNyZWF0ZVJlbW90ZUxpbmsgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9yZW1vdGVsaW5rJywgJ1BPU1QnLCBvcHRzLnJlbW90ZUxpbmspO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIChvciBjcmVhdGVzKSBhIHJlbW90ZSBpc3N1ZSBsaW5rIGZyb20gYSBKU09OIHJlcHJlc2VudGF0aW9uLiBJZiBhIGdsb2JhbElkIGlzIHByb3ZpZGVkIGFuZCBhIHJlbW90ZSBpc3N1ZVxuICAgICAqIGxpbmsgZXhpc3RzIHdpdGggdGhhdCBnbG9iYWxJZCwgdGhlIHJlbW90ZSBpc3N1ZSBsaW5rIGlzIHVwZGF0ZWQuIE90aGVyd2lzZSwgdGhlIHJlbW90ZSBpc3N1ZSBsaW5rIGlzIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVJlbW90ZUxpbmtcbiAgICAgKiBAbWVtYmVyb2YgSXNzdWVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgQVBJLiAgTm90ZSB0aGF0IHRoaXMgb2JqZWN0IG11c3QgY29udGFpbiBFSVRIRVIgYW4gaXNzdWVJZCBvclxuICAgICAqICAgICBpc3N1ZUtleSBwcm9wZXJ0eTsgaXNzdWVJZCB3aWxsIGJlIHVzZWQgb3ZlciBpc3N1ZUtleSBpZiBib3RoIGFyZSBwcmVzZW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUlkXSBUaGUgaWQgb2YgdGhlIGlzc3VlLiAgRVg6IDEwMDAyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlS2V5XSBUaGUgS2V5IG9mIHRoZSBpc3N1ZS4gIEVYOiBKV1ItM1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLnJlbW90ZUxpbmsgU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmU5NDV9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHJlbW90ZSBsaW5rcyBhcmUgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHJlbW90ZSBsaW5rcyBhcmUgcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMudXBkYXRlUmVtb3RlTGluayA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICAvLyBUaGUgb25lIEFQSSBlbmRwb2ludCBoYW5kbGVzIGJvdGggdXBkYXRlcyBhbmQgY3JlYXRpb24uXG4gICAgICAgIHRoaXMuY3JlYXRlUmVtb3RlTGluayhvcHRzLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSB0aGUgcmVtb3RlIGlzc3VlIGxpbmsgd2l0aCB0aGUgZ2l2ZW4gZ2xvYmFsIGlkIG9uIHRoZSBpc3N1ZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlUmVtb3RlTGlua1xuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZ2xvYmFsSWQgVGhlIGdsb2JhbCBpZCBvZiB0aGUgcmVtb3RlIGlzc3VlIGxpbmtcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcmVtb3RlIGxpbmtzIGFyZSByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcmVtb3RlIGxpbmtzIGFyZSByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5kZWxldGVSZW1vdGVMaW5rID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5nbG9iYWxJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19HTE9CQUxfSURfRVJST1IpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9yZW1vdGVsaW5rJywgJ0RFTEVURScsIG51bGwsIHtnbG9iYWxJZDogb3B0cy5nbG9iYWxJZH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdSZW1vdGVMaW5rIERlbGV0ZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZW1vdGUgaXNzdWUgbGluayB3aXRoIHRoZSBnaXZlbiBpZCBvbiB0aGUgaXNzdWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFJlbW90ZUxpbmtCeUlkXG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5saW5rSWQgVGhlIGlkIG9mIHRoZSByZW1vdGUgbGlua1xuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSByZW1vdGUgbGlua3MgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSByZW1vdGUgbGlua3MgYXJlIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFJlbW90ZUxpbmtCeUlkID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5saW5rSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fTElOS19JRF9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3JlbW90ZWxpbmsvJyArIG9wdHMubGlua0lkLCAnR0VUJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcmVtb3RlIGlzc3VlIGxpbmsgd2l0aCB0aGUgZ2l2ZW4gaWQgb24gdGhlIGlzc3VlLlxuICAgICAqXG4gICAgICogQG1ldGhvZCB1cGRhdGVSZW1vdGVMaW5rQnlJZFxuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubGlua0lkIFRoZSBpZCBvZiB0aGUgcmVtb3RlIGxpbmtcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5yZW1vdGVMaW5rIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMTAzN31cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcmVtb3RlIGxpbmtzIGFyZSByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcmVtb3RlIGxpbmtzIGFyZSByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy51cGRhdGVSZW1vdGVMaW5rQnlJZCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIW9wdHMubGlua0lkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0xJTktfSURfRVJST1IpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9yZW1vdGVsaW5rLycgKyBvcHRzLmxpbmtJZCwgJ1BVVCcsIG9wdHMucmVtb3RlTGluayk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ1JlbW90ZUxpbmsgVXBkYXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHJlbW90ZSBpc3N1ZSBsaW5rIHdpdGggdGhlIGdpdmVuIGlkIG9uIHRoZSBpc3N1ZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlUmVtb3RlTGlua0J5SWRcbiAgICAgKiBAbWVtYmVyb2YgSXNzdWVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgQVBJLiAgTm90ZSB0aGF0IHRoaXMgb2JqZWN0IG11c3QgY29udGFpbiBFSVRIRVIgYW4gaXNzdWVJZCBvclxuICAgICAqICAgICBpc3N1ZUtleSBwcm9wZXJ0eTsgaXNzdWVJZCB3aWxsIGJlIHVzZWQgb3ZlciBpc3N1ZUtleSBpZiBib3RoIGFyZSBwcmVzZW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUlkXSBUaGUgaWQgb2YgdGhlIGlzc3VlLiAgRVg6IDEwMDAyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlS2V5XSBUaGUgS2V5IG9mIHRoZSBpc3N1ZS4gIEVYOiBKV1ItM1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmxpbmtJZCBUaGUgaWQgb2YgdGhlIHJlbW90ZSBsaW5rXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHJlbW90ZSBsaW5rcyBhcmUgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHJlbW90ZSBsaW5rcyBhcmUgcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlUmVtb3RlTGlua0J5SWQgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLmxpbmtJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19MSU5LX0lEX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvcmVtb3RlbGluay8nICsgb3B0cy5saW5rSWQsICdERUxFVEUnKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnUmVtb3RlTGluayBEZWxldGVkJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCBhIGxpc3Qgb2YgdGhlIHRyYW5zaXRpb25zIHBvc3NpYmxlIGZvciB0aGlzIGlzc3VlIGJ5IHRoZSBjdXJyZW50IHVzZXIsIGFsb25nIHdpdGggZmllbGRzIHRoYXQgYXJlIHJlcXVpcmVkXG4gICAgICogYW5kIHRoZWlyIHR5cGVzLlxuICAgICAqXG4gICAgICogRmllbGRzIHdpbGwgb25seSBiZSByZXR1cm5lZCBpZiBgYGBleHBhbmQ9dHJhbnNpdGlvbnMuZmllbGRzLmBgYFxuICAgICAqXG4gICAgICogVGhlIGZpZWxkcyBpbiB0aGUgbWV0YWRhdGEgY29ycmVzcG9uZCB0byB0aGUgZmllbGRzIGluIHRoZSB0cmFuc2l0aW9uIHNjcmVlbiBmb3IgdGhhdCB0cmFuc2l0aW9uLiBGaWVsZHMgbm90IGluXG4gICAgICogdGhlIHNjcmVlbiB3aWxsIG5vdCBiZSBpbiB0aGUgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFRyYW5zaXRpb25zXG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy50cmFuc2l0aW9uSWQgSWYgc3BlY2lmaWVkLCB3aWxsIGNhbGwgYmFjayB3aXRoIG9ubHkgdGhlIHRyYW5zaXRpb24gd2l0aCB0aGUgc3BlY2lmaWVkIGlkLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB0cmFuc2l0aW9ucyBhcmUgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHRyYW5zaXRpb25zIGFyZSByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRUcmFuc2l0aW9ucyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3RyYW5zaXRpb25zJywgJ0dFVCcsIG51bGwsIHt0cmFuc2l0aW9uSWQ6IG9wdHMudHJhbnNpdGlvbklkfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSB0cmFuc2l0aW9uIG9uIGFuIGlzc3VlLiBXaGVuIHBlcmZvcm1pbmcgdGhlIHRyYW5zaXRpb24geW91IGNhbiB1ZGF0ZSBvciBzZXQgb3RoZXIgaXNzdWUgZmllbGRzLlxuICAgICAqXG4gICAgICogVGhlIGZpZWxkcyB0aGF0IGNhbiBiZSBzZXQgb24gdHJhbnN0aW9uLCBpbiBlaXRoZXIgdGhlIGZpZWxkcyBwYXJhbWV0ZXIgb3IgdGhlIHVwZGF0ZSBwYXJhbWV0ZXIgY2FuIGJlXG4gICAgICogZGV0ZXJtaW5lZCB1c2luZyB0aGUqKiAvcmVzdC9hcGkvMi9pc3N1ZS97aXNzdWVJZE9yS2V5fS90cmFuc2l0aW9ucz9leHBhbmQ9dHJhbnNpdGlvbnMuZmllbGRzIHJlc291cmNlKiouIElmIGFcbiAgICAgKiBmaWVsZCBpcyBub3QgY29uZmlndXJlZCB0byBhcHBlYXIgb24gdGhlIHRyYW5zaXRpb24gc2NyZWVuLCB0aGVuIGl0IHdpbGwgbm90IGJlIGluIHRoZSB0cmFuc2l0aW9uIG1ldGFkYXRhLCBhbmRcbiAgICAgKiBhIGZpZWxkIHZhbGlkYXRpb24gZXJyb3Igd2lsbCBvY2N1ciBpZiBpdCBpcyBzdWJtaXR0ZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHRyYW5zaXRpb25Jc3N1ZVxuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMudHJhbnNpdGlvbiBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTY5OH1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgdHJhbnNpdGlvbnMgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB0cmFuc2l0aW9ucyBhcmUgcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMudHJhbnNpdGlvbklzc3VlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy50cmFuc2l0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX1RSQU5TSVRJT05fRVJST1IpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICAgIGlmKCFvcHRzLnRyYW5zaXRpb24udHJhbnNpdGlvbikgeyAvLyBUbyBrZWVwIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgICBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvdHJhbnNpdGlvbnMnLCAnUE9TVCcsIG9wdHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3RyYW5zaXRpb25zJywgJ1BPU1QnLCBvcHRzLnRyYW5zaXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ0lzc3VlIFRyYW5zaXRpb25lZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgeW91ciB2b3RlIGZyb20gYW4gaXNzdWUuIChpLmUuIFwidW52b3RlXCIpXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHVudm90ZVxuICAgICAqIEBtZW1iZXJvZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIGFmdGVyIHRoZSB2b3RlIGlzIHJlbW92ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgYWZ0ZXIgdGhlIHZvdGUgaXMgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICB0aGlzLnVudm90ZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3ZvdGVzJywgJ0RFTEVURScpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdWb3RlIFJlbW92ZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdCB5b3VyIHZvdGUgaW4gZmF2b3VyIG9mIGFuIGlzc3VlLlxuICAgICAqXG4gICAgICogQG1ldGhvZCB2b3RlXG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgYWZ0ZXIgdGhlIHZvdGUgaXMgcmVtb3ZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCBhZnRlciB0aGUgdm90ZSBpcyByZW1vdmVkLlxuICAgICAqL1xuICAgIHRoaXMudm90ZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3ZvdGVzJywgJ1BPU1QnKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnVm90ZSBBZGRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBSRVNUIHN1Yi1yZXNvdXJjZSByZXByZXNlbnRpbmcgdGhlIHZvdGVycyBvbiB0aGUgaXNzdWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFZvdGVzXG4gICAgICogQG1lbWJlcm9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgYWZ0ZXIgdGhlIHZvdGVzIGFyZSByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgYWZ0ZXIgdGhlIHZvdGVzIGFyZSByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRWb3RlcyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3ZvdGVzJywgJ0dFVCcpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIHdhdGNoZXJzIGZvciB0aGUgaXNzdWUgd2l0aCB0aGUgZ2l2ZW4ga2V5LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRXYXRjaGVyc1xuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIGFmdGVyIHRoZSB3YXRjaGVycyBhcmUgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIGFmdGVyIHRoZSB3YXRjaGVycyBhcmUgcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0V2F0Y2hlcnMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy93YXRjaGVycycsICdHRVQnKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHVzZXIgdG8gYW4gaXNzdWUncyB3YXRjaGVyIGxpc3QuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGFkZFdhdGNoZXJcbiAgICAgKiBAbWVtYmVyT2YgSXNzdWVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgQVBJLiAgTm90ZSB0aGF0IHRoaXMgb2JqZWN0IG11c3QgY29udGFpbiBFSVRIRVIgYW4gaXNzdWVJZCBvclxuICAgICAqICAgICBpc3N1ZUtleSBwcm9wZXJ0eTsgaXNzdWVJZCB3aWxsIGJlIHVzZWQgb3ZlciBpc3N1ZUtleSBpZiBib3RoIGFyZSBwcmVzZW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUlkXSBUaGUgaWQgb2YgdGhlIGlzc3VlLiAgRVg6IDEwMDAyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlS2V5XSBUaGUgS2V5IG9mIHRoZSBpc3N1ZS4gIEVYOiBKV1ItM1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLndhdGNoZXIgVGhlIHVzZXJuYW1lIG9mIHRoZSB1c2VyIHRvIGFkZCBhcyBhIHdhdGNoZXIuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIGFmdGVyIHRoZSB3YXRjaGVyIGlzIGFkZGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIGFmdGVyIHRoZSB3YXRjaGVyIGlzIGFkZGVkLlxuICAgICAqL1xuICAgIHRoaXMuYWRkV2F0Y2hlciA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIW9wdHMud2F0Y2hlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19XQVRDSEVSX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3dhdGNoZXJzJywgJ1BPU1QnLCBvcHRzLndhdGNoZXIpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdXYXRjaGVyIEFkZGVkJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSB1c2VyIHRvIGFuIGlzc3VlJ3Mgd2F0Y2hlciBsaXN0LlxuICAgICAqXG4gICAgICogQG1ldGhvZCByZW1vdmVXYXRjaGVyXG4gICAgICogQG1lbWJlck9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy53YXRjaGVyIFRoZSB1c2VybmFtZSBvZiB0aGUgdXNlciB0byByZW1vdmUgYXMgYSB3YXRjaGVyLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCBhZnRlciB0aGUgd2F0Y2hlciBpcyByZW1vdmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIGFmdGVyIHRoZSB3YXRjaGVyIGlzIHJlbW92ZWQuXG4gICAgICovXG4gICAgdGhpcy5yZW1vdmVXYXRjaGVyID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy53YXRjaGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX1dBVENIRVJfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvd2F0Y2hlcnMnLCAnREVMRVRFJywgbnVsbCwge3VzZXJuYW1lOiBvcHRzLndhdGNoZXJ9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnV2F0Y2hlciBSZW1vdmVkJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIHdvcmsgbG9ncyBmb3IgYW4gaXNzdWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFdvcmtMb2dzXG4gICAgICogQG1lbWJlck9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgYWZ0ZXIgdGhlIHdvcmtsb2dzIGFyZSByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgYWZ0ZXIgdGhlIHdvcmtsb2dzIGFyZSByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRXb3JrTG9ncyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3dvcmtsb2cnLCAnR0VUJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBuZXcgd29ya2xvZyBlbnRyeSB0byBhbiBpc3N1ZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgYWRkV29ya0xvZ1xuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmFkanVzdEVzdGltYXRlXSBBbGxvd3MgeW91IHRvIHByb3ZpZGUgc3BlY2lmaWMgaW5zdHJ1Y3Rpb25zIHRvIHVwZGF0ZSB0aGUgcmVtYWluaW5nIHRpbWVcbiAgICAgKiAgICAgZXN0aW1hdGUgb2YgdGhlIGlzc3VlLiBWYWxpZCB2YWx1ZXMgYXJlXG4gICAgICogICAgICogXCJuZXdcIiAtIHNldHMgdGhlIGVzdGltYXRlIHRvIGEgc3BlY2lmaWMgdmFsdWVcbiAgICAgKiAgICAgKiBcImxlYXZlXCItIGxlYXZlcyB0aGUgZXN0aW1hdGUgYXMgaXNcbiAgICAgKiAgICAgKiBcIm1hbnVhbFwiIC0gc3BlY2lmeSBhIHNwZWNpZmljIGFtb3VudCB0byBpbmNyZWFzZSByZW1haW5pbmcgZXN0aW1hdGUgYnlcbiAgICAgKiAgICAgKiBcImF1dG9cIi0gRGVmYXVsdCBvcHRpb24uIFdpbGwgYXV0b21hdGljYWxseSBhZGp1c3QgdGhlIHZhbHVlIGJhc2VkIG9uIHRoZVxuICAgICAqICAgICAgICAgIG5ldyB0aW1lU3BlbnQgc3BlY2lmaWVkIG9uIHRoZSB3b3JrbG9nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm5ld0VzdGltYXRlXSAocmVxdWlyZWQgd2hlbiBcIm5ld1wiIGlzIHNlbGVjdGVkIGZvciBhZGp1c3RFc3RpbWF0ZSkgdGhlIG5ldyB2YWx1ZSBmb3IgdGhlXG4gICAgICogICAgIHJlbWFpbmluZyBlc3RpbWF0ZSBmaWVsZC4gZS5nLiBcIjJkXCJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMucmVkdWNlQnldIChyZXF1aXJlZCB3aGVuIFwibWFudWFsXCIgaXMgc2VsZWN0ZWQgZm9yIGFkanVzdEVzdGltYXRlKSB0aGUgYW1vdW50IHRvIHJlZHVjZSB0aGVcbiAgICAgKiAgICAgcmVtYWluaW5nIGVzdGltYXRlIGJ5IGUuZy4gXCIyZFwiXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMud29ya2xvZyBTZWUge0BsaW5rOiBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmUxMTA2fVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCBhZnRlciB0aGUgd29ya2xvZyBpcyBhZGRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCBhZnRlciB0aGUgd29ya2xvZyBpcyBhZGRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmFkZFdvcmtMb2cgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLndvcmtsb2cpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fV09SS0xPR19FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy93b3JrbG9nJywgJ1BPU1QnLCBvcHRzLndvcmtsb2csIHtcbiAgICAgICAgICAgIG5ld0VzdGltYXRlOiBvcHRzLm5ld0VzdGltYXRlLFxuICAgICAgICAgICAgcmVkdWNlQnk6IG9wdHMucmVkdWNlQnksXG4gICAgICAgICAgICBhZGp1c3RFc3RpbWF0ZTogb3B0cy5hZGp1c3RFc3RpbWF0ZVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnV29ya2xvZyBBZGRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgc3BlY2lmaWMgd29ya2xvZy5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0V29ya0xvZ1xuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMud29ya2xvZ0lkIFRoZSBpZCBvZiB0aGUgd29yayBsb2cgdG8gcmV0cmlldmUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIGFmdGVyIHRoZSB3b3JrbG9nIGlzIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCBhZnRlciB0aGUgd29ya2xvZyBpcyByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRXb3JrTG9nID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy53b3JrbG9nSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fV09SS0xPR19JRF9FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy93b3JrbG9nLycgKyBvcHRzLndvcmtsb2dJZCwgJ0dFVCcpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGFuIGV4aXN0aW5nIHdvcmtsb2cgZW50cnkgdXNpbmcgaXRzIEpTT04gcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVdvcmtMb2dcbiAgICAgKiBAbWVtYmVyT2YgSXNzdWVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgQVBJLiAgTm90ZSB0aGF0IHRoaXMgb2JqZWN0IG11c3QgY29udGFpbiBFSVRIRVIgYW4gaXNzdWVJZCBvclxuICAgICAqICAgICBpc3N1ZUtleSBwcm9wZXJ0eTsgaXNzdWVJZCB3aWxsIGJlIHVzZWQgb3ZlciBpc3N1ZUtleSBpZiBib3RoIGFyZSBwcmVzZW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUlkXSBUaGUgaWQgb2YgdGhlIGlzc3VlLiAgRVg6IDEwMDAyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlS2V5XSBUaGUgS2V5IG9mIHRoZSBpc3N1ZS4gIEVYOiBKV1ItM1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLndvcmtsb2dJZCBUaGUgaWQgb2YgdGhlIHdvcmsgbG9nIHRvIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5hZGp1c3RFc3RpbWF0ZV0gQWxsb3dzIHlvdSB0byBwcm92aWRlIHNwZWNpZmljIGluc3RydWN0aW9ucyB0byB1cGRhdGUgdGhlIHJlbWFpbmluZyB0aW1lXG4gICAgICogICAgIGVzdGltYXRlIG9mIHRoZSBpc3N1ZS4gVmFsaWQgdmFsdWVzIGFyZVxuICAgICAqICAgICAqIFwibmV3XCIgLSBzZXRzIHRoZSBlc3RpbWF0ZSB0byBhIHNwZWNpZmljIHZhbHVlXG4gICAgICogICAgICogXCJsZWF2ZVwiLSBsZWF2ZXMgdGhlIGVzdGltYXRlIGFzIGlzXG4gICAgICogICAgICogXCJhdXRvXCItIERlZmF1bHQgb3B0aW9uLiBXaWxsIGF1dG9tYXRpY2FsbHkgYWRqdXN0IHRoZSB2YWx1ZSBiYXNlZCBvbiB0aGVcbiAgICAgKiAgICAgICAgICBuZXcgdGltZVNwZW50IHNwZWNpZmllZCBvbiB0aGUgd29ya2xvZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5uZXdFc3RpbWF0ZV0gKHJlcXVpcmVkIHdoZW4gXCJuZXdcIiBpcyBzZWxlY3RlZCBmb3IgYWRqdXN0RXN0aW1hdGUpIHRoZSBuZXcgdmFsdWUgZm9yIHRoZVxuICAgICAqICAgICByZW1haW5pbmcgZXN0aW1hdGUgZmllbGQuIGUuZy4gXCIyZFwiXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMud29ya2xvZyBTZWUge0BsaW5rOiBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmUxMTYxfVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCBhZnRlciB0aGUgd29ya2xvZyBpcyB1cGRhdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIGFmdGVyIHRoZSB3b3JrbG9nIGlzIHVwZGF0ZWQuXG4gICAgICovXG4gICAgdGhpcy51cGRhdGVXb3JrTG9nID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy53b3JrbG9nSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fV09SS0xPR19JRF9FUlJPUik7XG4gICAgICAgIH0gZWxzZSBpZiAoIW9wdHMud29ya2xvZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19XT1JLTE9HX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvd29ya2xvZy8nICsgb3B0cy53b3JrbG9nSWQsICdQVVQnLCBvcHRzLndvcmtsb2csIHtcbiAgICAgICAgICAgIG5ld0VzdGltYXRlOiBvcHRzLm5ld0VzdGltYXRlLFxuICAgICAgICAgICAgYWRqdXN0RXN0aW1hdGU6IG9wdHMuYWRqdXN0RXN0aW1hdGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYW4gZXhpc3Rpbmcgd29ya2xvZyBlbnRyeVxuICAgICAqXG4gICAgICogQG1ldGhvZCBkZWxldGVXb3JrTG9nXG4gICAgICogQG1lbWJlck9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy53b3JrbG9nSWQgVGhlIGlkIG9mIHRoZSB3b3JrIGxvZyB0byBkZWxldGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmFkanVzdEVzdGltYXRlXSBBbGxvd3MgeW91IHRvIHByb3ZpZGUgc3BlY2lmaWMgaW5zdHJ1Y3Rpb25zIHRvIHVwZGF0ZSB0aGUgcmVtYWluaW5nIHRpbWVcbiAgICAgKiAgICAgZXN0aW1hdGUgb2YgdGhlIGlzc3VlLiBWYWxpZCB2YWx1ZXMgYXJlXG4gICAgICogICAgICogXCJuZXdcIiAtIHNldHMgdGhlIGVzdGltYXRlIHRvIGEgc3BlY2lmaWMgdmFsdWVcbiAgICAgKiAgICAgKiBcImxlYXZlXCItIGxlYXZlcyB0aGUgZXN0aW1hdGUgYXMgaXNcbiAgICAgKiAgICAgKiBcIm1hbnVhbFwiIC0gc3BlY2lmeSBhIHNwZWNpZmljIGFtb3VudCB0byBpbmNyZWFzZSByZW1haW5pbmcgZXN0aW1hdGUgYnlcbiAgICAgKiAgICAgKiBcImF1dG9cIi0gRGVmYXVsdCBvcHRpb24uIFdpbGwgYXV0b21hdGljYWxseSBhZGp1c3QgdGhlIHZhbHVlIGJhc2VkIG9uIHRoZVxuICAgICAqICAgICAgICAgIG5ldyB0aW1lU3BlbnQgc3BlY2lmaWVkIG9uIHRoZSB3b3JrbG9nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm5ld0VzdGltYXRlXSAocmVxdWlyZWQgd2hlbiBcIm5ld1wiIGlzIHNlbGVjdGVkIGZvciBhZGp1c3RFc3RpbWF0ZSkgdGhlIG5ldyB2YWx1ZSBmb3IgdGhlXG4gICAgICogICAgIHJlbWFpbmluZyBlc3RpbWF0ZSBmaWVsZC4gZS5nLiBcIjJkXCJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaW5jcmVhc2VCeV0gKHJlcXVpcmVkIHdoZW4gXCJtYW51YWxcIiBpcyBzZWxlY3RlZCBmb3IgYWRqdXN0RXN0aW1hdGUpIHRoZSBhbW91bnQgdG8gcmVkdWNlXG4gICAgICogICAgIHRoZSByZW1haW5pbmcgZXN0aW1hdGUgYnkgZS5nLiBcIjJkXCJcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgYWZ0ZXIgdGhlIHdvcmsgbG9nIGlzIGRlbGV0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgYWZ0ZXIgdGhlIHdvcmsgbG9nIGlzIGRlbGV0ZWQuXG4gICAgICovXG4gICAgdGhpcy5kZWxldGVXb3JrTG9nID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy53b3JrbG9nSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fV09SS0xPR19JRF9FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy93b3JrbG9nLycgKyBvcHRzLndvcmtsb2dJZCwgJ0RFTEVURScsIG51bGwsIHtcbiAgICAgICAgICAgIG5ld0VzdGltYXRlOiBvcHRzLm5ld0VzdGltYXRlLFxuICAgICAgICAgICAgaW5jcmVhc2VCeTogb3B0cy5pbmNyZWFzZUJ5LFxuICAgICAgICAgICAgYWRqdXN0RXN0aW1hdGU6IG9wdHMuYWRqdXN0RXN0aW1hdGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdXb3JrIExvZyBEZWxldGVkJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZCBhbiBhdHRhY2htZW50cyB0byBhbiBpc3N1ZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgYWRkQXR0YWNobWVudFxuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUNsaWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlbmFtZSBUaGUgZmlsZSBuYW1lIG9mIGF0dGFjaG1lbnQuIElmIHlvdSBwYXNzIGFuIGFycmF5IG9mIGZpbGVuYW1lcywgbXVsdGlwbGUgYXR0YWNobWVudHMgd2lsbCBiZSBhZGRlZC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgYXR0YWNobWVudCBoYXMgYmVlbiBhdHRhY2hlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBhdHRhY2htZW50IGhhcyBiZWVuIGF0dGFjaGVkLlxuICAgICAqL1xuICAgIHRoaXMuYWRkQXR0YWNobWVudCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIW9wdHMuZmlsZW5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fRklMRU5BTUVfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvYXR0YWNobWVudHMnLCAnUE9TVCcpO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5ib2R5O1xuICAgICAgICBpZiAob3B0cy5maWxlbmFtZS5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpIG9wdHMuZmlsZW5hbWUgPSBbb3B0cy5maWxlbmFtZV07XG4gICAgICAgIHZhciBhdHRhY2htZW50cyA9IG9wdHMuZmlsZW5hbWUubWFwIChmdW5jdGlvbiAoZmlsZW5hbWUpIHtyZXR1cm4gZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlbmFtZSl9KTtcbiAgICAgICAgb3B0aW9ucy5mb3JtRGF0YSA9IHtmaWxlOiBhdHRhY2htZW50c307XG4gICAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgICAgICAgIFwiWC1BdGxhc3NpYW4tVG9rZW5cIjogXCJub2NoZWNrXCJcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUga2V5cyBvZiBhbGwgcHJvcGVydGllcyBmb3IgdGhlIGlzc3VlIGlkZW50aWZpZWQgYnkgdGhlIGtleSBvciBieSB0aGUgaWQuICBUaGlzIGZ1bmN0aW9uIGlzIG1ha2VkIGFzXG4gICAgICogZXhwZXJpbWVudGFsIGluIHRoZSBKaXJhIEFQSSBkb2NzLCB1c2UgYXQgeW91ciBvd24gcmlzay5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0UHJvcGVydGllc1xuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHByb3BlcnRpZXMgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwcm9wZXJ0aWVzIGFyZSByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvcHJvcGVydGllcycsICdHRVQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBzcGVjaWZpZWQgaXNzdWUncyBwcm9wZXJ0eS4gWW91IGNhbiB1c2UgdGhpcyByZXNvdXJjZSB0byBzdG9yZSBhIGN1c3RvbSBkYXRhIGFnYWluc3QgdGhlXG4gICAgICogaXNzdWUgaWRlbnRpZmllZCBieSB0aGUga2V5IG9yIGJ5IHRoZSBpZC4gVGhlIHVzZXIgd2hvIHN0b3JlcyB0aGUgZGF0YSBpcyByZXF1aXJlZCB0byBoYXZlIHBlcm1pc3Npb25zIHRvIGVkaXRcbiAgICAgKiB0aGUgaXNzdWUuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIG1ha2VkIGFzIGV4cGVyaW1lbnRhbCBpbiB0aGUgSmlyYSBBUEkgZG9jcywgdXNlIGF0IHlvdXIgb3duIHJpc2suXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNldFByb3BlcnR5XG4gICAgICogQG1lbWJlck9mIElzc3VlQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIEFQSS4gIE5vdGUgdGhhdCB0aGlzIG9iamVjdCBtdXN0IGNvbnRhaW4gRUlUSEVSIGFuIGlzc3VlSWQgb3JcbiAgICAgKiAgICAgaXNzdWVLZXkgcHJvcGVydHk7IGlzc3VlSWQgd2lsbCBiZSB1c2VkIG92ZXIgaXNzdWVLZXkgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVJZF0gVGhlIGlkIG9mIHRoZSBpc3N1ZS4gIEVYOiAxMDAwMlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIEtleSBvZiB0aGUgaXNzdWUuICBFWDogSldSLTNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5wcm9wZXJ0eUtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSBiZWluZyBzZXQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMucHJvcGVydHlWYWx1ZSBUaGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IGJlaW5nIHNldC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcHJvcGVydHkgaXMgc2V0LlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHByb3BlcnR5IGlzIHNldC5cbiAgICAgKi9cbiAgICB0aGlzLnNldFByb3BlcnR5ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5wcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19QUk9QRVJUWV9LRVlfRVJST1IpO1xuICAgICAgICB9IGVsc2UgaWYgKCFvcHRzLnByb3BlcnR5VmFsdWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fUFJPUEVSVFlfVkFMVUVfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvcHJvcGVydGllcy8nICsgb3B0cy5wcm9wZXJ0eUtleSwgJ1BVVCcsIG9wdHMucHJvcGVydHlWYWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdQcm9wZXJ0eSBTZXQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IHdpdGggYSBnaXZlbiBrZXkgZnJvbSB0aGUgaXNzdWUgaWRlbnRpZmllZCBieSB0aGUga2V5IG9yIGJ5IHRoZSBpZC4gVGhlIHVzZXJcbiAgICAgKiB3aG8gcmV0cmlldmVzIHRoZSBwcm9wZXJ0eSBpcyByZXF1aXJlZCB0byBoYXZlIHBlcm1pc3Npb25zIHRvIHJlYWQgdGhlIGlzc3VlLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBtYWtlZCBhcyBleHBlcmltZW50YWwgaW4gdGhlIEppcmEgQVBJIGRvY3MsIHVzZSBhdCB5b3VyIG93biByaXNrLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRQcm9wZXJ0eVxuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMucHJvcGVydHlLZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgYmVpbmcgc2V0LlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwcm9wZXJ0eSBpcyByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcHJvcGVydHkgaXMgcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLnByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX1BST1BFUlRZX0tFWV9FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9wcm9wZXJ0aWVzLycgKyBvcHRzLnByb3BlcnR5S2V5LCAnR0VUJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBmcm9tIHRoZSBpc3N1ZSBpZGVudGlmaWVkIGJ5IHRoZSBrZXkgb3IgYnkgdGhlIGlkLiBUaHMgdXNlciByZW1vdmluZyB0aGUgcHJvcGVydHkgaXNcbiAgICAgKiByZXF1aXJlZCB0byBoYXZlIHBlcm1pc3Npb25zIHRvIGVkaXQgdGhlIGlzc3VlLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBtYWtlZCBhcyBleHBlcmltZW50YWwgaW4gdGhlIEppcmEgQVBJIGRvY3MsIHVzZSBhdCB5b3VyIG93biByaXNrLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRQcm9wZXJ0eVxuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkuICBOb3RlIHRoYXQgdGhpcyBvYmplY3QgbXVzdCBjb250YWluIEVJVEhFUiBhbiBpc3N1ZUlkIG9yXG4gICAgICogICAgIGlzc3VlS2V5IHByb3BlcnR5OyBpc3N1ZUlkIHdpbGwgYmUgdXNlZCBvdmVyIGlzc3VlS2V5IGlmIGJvdGggYXJlIHByZXNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlSWRdIFRoZSBpZCBvZiB0aGUgaXNzdWUuICBFWDogMTAwMDJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuaXNzdWVLZXldIFRoZSBLZXkgb2YgdGhlIGlzc3VlLiAgRVg6IEpXUi0zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMucHJvcGVydHlLZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgYmVpbmcgc2V0LlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQuXG4gICAgICovXG4gICAgdGhpcy5kZWxldGVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIW9wdHMucHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fUFJPUEVSVFlfS0VZX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3Byb3BlcnRpZXMvJyArIG9wdHMucHJvcGVydHlLZXksICdERUxFVEUnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ1Byb3BlcnR5IERlbGV0ZWQnKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zZXRXb3JrbG9nUHJvcGVydHkgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLnByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX1BST1BFUlRZX0tFWV9FUlJPUik7XG4gICAgICAgIH0gZWxzZSBpZiAoIW9wdHMucHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19QUk9QRVJUWV9WQUxVRV9FUlJPUik7XG4gICAgICAgIH1cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKFxuICAgICAgICBvcHRzLFxuICAgICAgICAnL3dvcmtsb2cvJyArIG9wdHMud29ya2xvZ0lkICsgJy9wcm9wZXJ0aWVzLycgKyBvcHRzLnByb3BlcnR5S2V5LFxuICAgICAgICAnUFVUJyxcbiAgICAgICAgb3B0cy5wcm9wZXJ0eVZhbHVlXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ1Byb3BlcnR5IFNldCcpO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFdvcmtMb2dQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhcbiAgICAgICAgb3B0cyxcbiAgICAgICAgJy93b3JrbG9nLycgKyBvcHRzLndvcmtsb2dJZCArICcvcHJvcGVydGllcy8nLFxuICAgICAgICAnR0VUJ1xuICAgICAgKTtcbiAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFdvcmtMb2dQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgaWYgKCFvcHRzLnByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19QUk9QRVJUWV9LRVlfRVJST1IpO1xuICAgICAgfVxuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMoXG4gICAgICAgIG9wdHMsXG4gICAgICAgICcvd29ya2xvZy8nICsgb3B0cy53b3JrbG9nSWQgKyAnL3Byb3BlcnRpZXMvJyArIG9wdHMucHJvcGVydHlLZXksXG4gICAgICAgICdHRVQnXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEJ1aWxkIG91dCB0aGUgcmVxdWVzdCBvcHRpb25zIG5lY2Vzc2FyeSB0byBtYWtlIGEgcGFydGljdWxhciBBUEkgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBidWlsZFJlcXVlc3RPcHRpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgZW5kcG9pbnQgZm9sbG93aW5nIC9pc3N1ZS97aWRPcktleX1cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIFRoZSByZXF1ZXN0IG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2JvZHldIFRoZSByZXF1ZXN0IGJvZHksIGlmIGFueS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3FzXSBUaGUgcXVlcnlzdHJpbmcsIGlmIGFueS4gIG9wdHMuZXhwYW5kIGFuZCBvcHRzLmZpZWxkcyBhcnJheXMgd2lsbCBiZSBhdXRvbWFnaWNhbGx5IGFkZGVkLlxuICAgICAqIEByZXR1cm5zIHt7dXJpOiBzdHJpbmcsIG1ldGhvZDogc3RyaW5nLCBib2R5OiBPYmplY3QsIHFzOiBPYmplY3QsIGZvbGxvd0FsbFJlZGlyZWN0czogYm9vbGVhbiwganNvbjogYm9vbGVhbn19XG4gICAgICovXG4gICAgdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zID0gZnVuY3Rpb24gKG9wdHMsIHBhdGgsIG1ldGhvZCwgYm9keSwgcXMpIHtcbiAgICAgICAgaWYgKCFvcHRzLmlzc3VlSWQgJiYgIW9wdHMuaXNzdWVLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fSVNTVUVfSURFTlRJRklFUik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlkT3JLZXkgPSBvcHRzLmlzc3VlSWQgfHwgb3B0cy5pc3N1ZUtleTtcbiAgICAgICAgdmFyIGJhc2VQYXRoID0gJy9pc3N1ZS8nICsgaWRPcktleTtcbiAgICAgICAgaWYgKCFxcykgcXMgPSB7fTtcbiAgICAgICAgaWYgKCFib2R5KSBib2R5ID0ge307XG5cbiAgICAgICAgaWYgKG9wdHMuZmllbGRzKSB7XG4gICAgICAgICAgICBxcy5maWVsZHMgPSAnJztcbiAgICAgICAgICAgIG9wdHMuZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgcXMuZmllbGRzICs9IGZpZWxkICsgJywnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRzLmV4cGFuZCkge1xuICAgICAgICAgICAgcXMuZXhwYW5kID0gJyc7XG4gICAgICAgICAgICBvcHRzLmV4cGFuZC5mb3JFYWNoKGZ1bmN0aW9uIChleCkge1xuICAgICAgICAgICAgICAgIHFzLmV4cGFuZCArPSBleCArICcsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0cy5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBxcy5wcm9wZXJ0aWVzID0gJyc7XG4gICAgICAgICAgICBvcHRzLnByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgIHFzLnByb3BlcnRpZXMgKz0gcHJvcCArICcsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoYmFzZVBhdGggKyBwYXRoKSxcbiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgIHFzOiBxcyxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGpzb246IHRydWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdWdnZXN0ZWQgaXNzdWVzIHdoaWNoIG1hdGNoIHRoZSBhdXRvLWNvbXBsZXRpb24gcXVlcnkgZm9yIHRoZSBcbiAgICAgKiB1c2VyIHdoaWNoIGV4ZWN1dGVzIHRoaXMgcmVxdWVzdC4gVGhpcyBSRVNUIG1ldGhvZCB3aWxsIGNoZWNrIHRoZSB1c2VyJ3MgXG4gICAgICogaGlzdG9yeSBhbmQgdGhlIHVzZXIncyBicm93c2luZyBjb250ZXh0IGFuZCBzZWxlY3QgdGhpcyBpc3N1ZXMsIHdoaWNoIFxuICAgICAqIG1hdGNoIHRoZSBxdWVyeS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0SXNzdWVQaWNrZXJcbiAgICAgKiBAbWVtYmVyT2YgSXNzdWVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgQVBJLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5xdWVyeV0gdGhlIHF1ZXJ5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmN1cnJlbnRKUUxdIHRoZSBKUUwgaW4gY29udGV4dCBvZiB3aGljaCB0aGUgcmVxdWVzdCBcbiAgICAgKiAgICAgICAgICAgICAgICAgaXMgZXhlY3V0ZWQuIE9ubHkgaXNzdWVzIHdoaWNoIG1hdGNoIHRoaXMgSlFMIHF1ZXJ5IHdpbGwgYmUgXG4gICAgICogICAgICAgICAgICAgICAgIGluY2x1ZGVkIGluIHJlc3VsdHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmN1cnJlbnRJc3N1ZUtleV0gdGhlIGtleSBvZiB0aGUgaXNzdWUgaW4gY29udGV4dCBvZiBcbiAgICAgKiAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIHJlcXVlc3QgaXMgZXhlY3V0ZWQuIFRoZSBpc3N1ZSB3aGljaCBpcyBpbiBjb250ZXh0IFxuICAgICAqICAgICAgICAgICAgICAgICB3aWxsIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgYXV0by1jb21wbGV0aW9uIHJlc3VsdCwgZXZlbiBpZiBcbiAgICAgKiAgICAgICAgICAgICAgICAgaXQgbWF0Y2hlcyB0aGUgcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmN1cnJlbnRQcm9qZWN0SWRdIHRoZSBpZCBvZiB0aGUgcHJvamVjdCBpbiBjb250ZXh0IG9mIFxuICAgICAqICAgICAgICAgICAgICAgICB3aGljaCB0aGUgcmVxdWVzdCBpcyBleGVjdXRlZC4gU3VnZ2VzdGVkIGlzc3VlcyB3aWxsIGJlIG9ubHkgXG4gICAgICogICAgICAgICAgICAgICAgIGZyb20gdGhpcyBwcm9qZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2hvd1N1YlRhc2tzXSBpZiBzZXQgdG8gZmFsc2UsIHN1YnRhc2tzIHdpbGwgbm90IGJlIFxuICAgICAqICAgICAgICAgICAgICAgICAgaW5jbHVkZWQgaW4gdGhlIGxpc3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zaG93U3ViVGFza1BhcmVudF0gaWYgc2V0IHRvIGZhbHNlIGFuZCByZXF1ZXN0IGlzIFxuICAgICAqICAgICAgICAgICAgICAgICAgZXhlY3V0ZWQgaW4gY29udGV4dCBvZiBhIHN1YnRhc2ssIHRoZSBwYXJlbnQgaXNzdWUgd2lsbCBcbiAgICAgKiAgICAgICAgICAgICAgICAgIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgYXV0by1jb21wbGV0aW9uIHJlc3VsdCwgZXZlbiBpZiBpdCBcbiAgICAgKiAgICAgICAgICAgICAgICAgIG1hdGNoZXMgdGhlIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBpc3N1ZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBpc3N1ZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldElzc3VlUGlja2VyID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9pc3N1ZS9waWNrZXInKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogb3B0cy5xdWVyeSxcbiAgICAgICAgICAgICAgICBjdXJyZW50SlFMOiBvcHRzLmN1cnJlbnRKUUwsXG4gICAgICAgICAgICAgICAgY3VycmVudElzc3VlS2V5OiBvcHRzLmN1cnJlbnRJc3N1ZUtleSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJvamVjdElkOiBvcHRzLmN1cnJlbnRQcm9qZWN0SWQsXG4gICAgICAgICAgICAgICAgc2hvd1N1YlRhc2tzOiBvcHRzLnNob3dTdWJUYXNrcyxcbiAgICAgICAgICAgICAgICBzaG93U3ViVGFza1BhcmVudDogb3B0cy5zaG93U3ViVGFza1BhcmVudFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgZXJyb3JTdHJpbmdzID0gcmVxdWlyZSgnLi8uLi9saWIvZXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBJc3N1ZUxpbmtDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvaXNzdWVMaW5rJ1xuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgSXNzdWVMaW5rQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIElzc3VlTGlua0NsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaXNzdWUgbGluayBiZXR3ZWVuIHR3byBpc3N1ZXMuIFRoZSB1c2VyIHJlcXVpcmVzIHRoZSBsaW5rIGlzc3VlIHBlcm1pc3Npb24gZm9yIHRoZSBpc3N1ZSB3aGljaCB3aWxsXG4gICAgICogYmUgbGlua2VkIHRvIGFub3RoZXIgaXNzdWUuIFRoZSBzcGVjaWZpZWQgbGluayB0eXBlIGluIHRoZSByZXF1ZXN0IGlzIHVzZWQgdG8gY3JlYXRlIHRoZSBsaW5rIGFuZCB3aWxsIGNyZWF0ZSBhXG4gICAgICogbGluayBmcm9tIHRoZSBmaXJzdCBpc3N1ZSB0byB0aGUgc2Vjb25kIGlzc3VlIHVzaW5nIHRoZSBvdXR3YXJkIGRlc2NyaXB0aW9uLiBJdCBhbHNvIGNyZWF0ZSBhIGxpbmsgZnJvbSB0aGVcbiAgICAgKiBzZWNvbmQgaXNzdWUgdG8gdGhlIGZpcnN0IGlzc3VlIHVzaW5nIHRoZSBpbndhcmQgZGVzY3JpcHRpb24gb2YgdGhlIGlzc3VlIGxpbmsgdHlwZS4gSXQgd2lsbCBhZGQgdGhlIHN1cHBsaWVkXG4gICAgICogY29tbWVudCB0byB0aGUgZmlyc3QgaXNzdWUuIFRoZSBjb21tZW50IGNhbiBoYXZlIGEgcmVzdHJpY3Rpb24gd2hvIGNhbiB2aWV3IGl0LiBJZiBncm91cCBpcyBzcGVjaWZpZWQsIG9ubHlcbiAgICAgKiB1c2VycyBvZiB0aGlzIGdyb3VwIGNhbiB2aWV3IHRoaXMgY29tbWVudCwgaWYgcm9sZUxldmVsIGlzIHNwZWNpZmllZCBvbmx5IHVzZXJzIHdobyBoYXZlIHRoZSBzcGVjaWZpZWQgcm9sZSBjYW5cbiAgICAgKiB2aWV3IHRoaXMgY29tbWVudC4gVGhlIHVzZXIgd2hvIGNyZWF0ZXMgdGhlIGlzc3VlIGxpbmsgbmVlZHMgdG8gYmVsb25nIHRvIHRoZSBzcGVjaWZpZWQgZ3JvdXAgb3IgaGF2ZSB0aGVcbiAgICAgKiBzcGVjaWZpZWQgcm9sZS5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUxpbmtDbGllbnQjXG4gICAgICogQG1ldGhvZCBjcmVhdGVJc3N1ZUxpbmtcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgb3B0aW9ucyBmb3IgdGhlIHJlcXVlc3Qgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy5pc3N1ZUxpbmsgU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmU1MDEwfVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBsaW5rIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgbGluayBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlSXNzdWVMaW5rID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5pc3N1ZUxpbmspIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fSVNTVUVfTElOS19FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9pc3N1ZUxpbmsnKSxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiBvcHRzLmlzc3VlTGlua1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdJc3N1ZSBMaW5rIENyZWF0ZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbiBpc3N1ZSBsaW5rIHdpdGggdGhlIHNwZWNpZmllZCBpZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0SXNzdWVMaW5rXG4gICAgICogQG1lbWJlck9mIElzc3VlTGlua0NsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgb3B0aW9ucyB1c2VkIGluIHRoZSByZXF1ZXN0IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLmxpbmtJZCBUaGUgaWQgb2YgdGhlIGxpbmsgdG8gcmV0cmlldmUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIElzc3VlIExpbmsgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIElzc3VlIExpbmsgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0SXNzdWVMaW5rID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5saW5rSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fSVNTVUVfTElOS19JRF9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2lzc3VlTGluay8nICsgb3B0cy5saW5rSWQpLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGFuIGlzc3VlIGxpbmsgd2l0aCB0aGUgc3BlY2lmaWVkIGlkLiBUbyBiZSBhYmxlIHRvIGRlbGV0ZSBhbiBpc3N1ZSBsaW5rIHlvdSBtdXN0IGJlIGFibGUgdG8gdmlldyBib3RoXG4gICAgICogaXNzdWVzIGFuZCBtdXN0IGhhdmUgdGhlIGxpbmsgaXNzdWUgcGVybWlzc2lvbiBmb3IgYXQgbGVhc3Qgb25lIG9mIHRoZSBpc3N1ZXMuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGRlbGV0ZUlzc3VlTGlua1xuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUxpbmtDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIG9wdGlvbnMgdXNlZCBpbiB0aGUgcmVxdWVzdCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy5saW5rSWQgVGhlIGlkIG9mIHRoZSBsaW5rIHRvIGRlbGV0ZS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgSXNzdWUgTGluayBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIElzc3VlIExpbmsgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZUlzc3VlTGluayA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIW9wdHMubGlua0lkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0lTU1VFX0xJTktfSURfRVJST1IpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9pc3N1ZUxpbmsvJyArIG9wdHMubGlua0lkKSxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnSXNzdWUgTGluayBEZWxldGVkJyk7XG4gICAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGVycm9yU3RyaW5ncyA9IHJlcXVpcmUoJy4vLi4vbGliL2Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gSXNzdWVMaW5rVHlwZUNsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9pc3N1ZUxpbmtUeXBlJ1xuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgSXNzdWVMaW5rVHlwZUNsaWVudFxuICovXG5mdW5jdGlvbiBJc3N1ZUxpbmtUeXBlQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGEgbGlzdCBvZiBhdmFpbGFibGUgaXNzdWUgbGluayB0eXBlcywgaWYgaXNzdWUgbGlua2luZyBpcyBlbmFibGVkLiBFYWNoIGlzc3VlIGxpbmsgdHlwZSBoYXMgYW4gaWQsIGEgbmFtZVxuICAgICAqIGFuZCBhIGxhYmVsIGZvciB0aGUgb3V0d2FyZCBhbmQgaW53YXJkIGxpbmsgcmVsYXRpb25zaGlwLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBdmFpbGFibGVUeXBlc1xuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUxpbmtUeXBlQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgZm9yIHRoZSBBUEkuICBJZ25vcmVkIGluIHRoaXMgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGF2YWlsYWJsZSBJc3N1ZUxpbmsgdHlwZXMgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBhdmFpbGFibGUgSXNzdWVMaW5rIHR5cGVzIGFyZSByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRBdmFpbGFibGVUeXBlcyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvaXNzdWVMaW5rVHlwZScpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGlzc3VlIGxpbmsgdHlwZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3JlYXRlSXNzdWVMaW5rVHlwZVxuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUxpbmtUeXBlQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy5saW5rVHlwZSBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTIwMTh9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIElzc3VlTGluayB0eXBlIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgSXNzdWVMaW5rIHR5cGUgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmNyZWF0ZUlzc3VlTGlua1R5cGUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2lzc3VlTGlua1R5cGUnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMubGlua1R5cGVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBmb3IgYSBnaXZlbiBpc3N1ZSBsaW5rIHR5cGUgaWQgYWxsIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgaXNzdWUgbGluayB0eXBlLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRJc3N1ZUxpbmtUeXBlXG4gICAgICogQG1lbWJlck9mIElzc3VlTGlua1R5cGVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLmlzc3VlTGlua1R5cGVJZCBUaGUgaWQgb2YgdGhlIElzc3VlTGluayB0eXBlIHRvIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBJc3N1ZUxpbmsgdHlwZSBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBJc3N1ZUxpbmsgdHlwZSBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICAgKi9cbiAgICB0aGlzLmdldElzc3VlTGlua1R5cGUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFvcHRzLmlzc3VlTGlua1R5cGVJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yU3RyaW5ncy5OT19JU1NVRV9MSU5LX1RZUEVfSUQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2lzc3VlTGlua1R5cGUvJyArIG9wdHMuaXNzdWVMaW5rVHlwZUlkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSB0aGUgc3BlY2lmaWVkIGlzc3VlIGxpbmsgdHlwZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlSXNzdWVMaW5rVHlwZVxuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUxpbmtUeXBlQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy5pc3N1ZUxpbmtUeXBlSWQgVGhlIGlkIG9mIHRoZSBJc3N1ZUxpbmsgdHlwZSB0byBkZWxldGUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIElzc3VlTGluayB0eXBlIGhhcyBiZWVuIGRlbGV0ZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIElzc3VlTGluayB0eXBlIGhhcyBiZWVuIGRlbGV0ZVxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlSXNzdWVMaW5rVHlwZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIW9wdHMuaXNzdWVMaW5rVHlwZUlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmdzLk5PX0lTU1VFX0xJTktfVFlQRV9JRCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvaXNzdWVMaW5rVHlwZS8nICsgb3B0cy5pc3N1ZUxpbmtUeXBlSWQpLFxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnSXNzdWVMaW5rIHR5cGUgZGVsZXRlZC4nKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBzcGVjaWZpZWQgaXNzdWUgbGluayB0eXBlLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBlZGl0SXNzdWVMaW5rVHlwZVxuICAgICAqIEBtZW1iZXJPZiBJc3N1ZUxpbmtUeXBlQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy5pc3N1ZUxpbmtUeXBlSWQgVGhlIGlkIG9mIHRoZSBJc3N1ZUxpbmsgdHlwZSB0byByZXRyaWV2ZS5cbiAgICAgKiBAcGFyYW0gb3B0cy5saW5rVHlwZSBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTIwNzF9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIElzc3VlTGluayB0eXBlIGhhcyBiZWVuIHVwZGF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgSXNzdWVMaW5rIHR5cGUgaGFzIGJlZW4gdXBkYXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmVkaXRJc3N1ZUxpbmtUeXBlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghb3B0cy5pc3N1ZUxpbmtUeXBlSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZ3MuTk9fSVNTVUVfTElOS19UWVBFX0lEKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9pc3N1ZUxpbmtUeXBlLycgKyBvcHRzLmlzc3VlTGlua1R5cGVJZCksXG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMuaXNzdWVMaW5rVHlwZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gSXNzdWVUeXBlQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL2lzc3VldHlwZSdcbiAqXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBJc3N1ZVR5cGVDbGllbnRcbiAqL1xuZnVuY3Rpb24gSXNzdWVUeXBlQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgYWxsIGlzc3VlIHR5cGVzIHZpc2libGUgdG8gdGhlIHVzZXJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0QWxsSXNzdWVUeXBlc1xuICAgICAqIEBtZW1iZXJPZiBJc3N1ZVR5cGVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgSWdub3JlZFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGlzc3VlIHR5cGVzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgaXNzdWUgdHlwZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldEFsbElzc3VlVHlwZXMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2lzc3VldHlwZScpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpc3N1ZSB0eXBlIGZyb20gYSBKU09OIHJlcHJlc2VudGF0aW9uIGFuZCBhZGRzIHRoZSBpc3N1ZSBuZXdseVxuICAgICAqIGNyZWF0ZWQgaXNzdWUgdHlwZSB0byB0aGUgZGVmYXVsdCBpc3N1ZSB0eXBlIHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3JlYXRlSXNzdWVUeXBlXG4gICAgICogQG1lbWJlck9mIElzc3VlVHlwZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaXNzdWVUeXBlIE9iamVjdCBjb250YWluaW5nIGRldGFpbHMgb2YgdGhlIG5ldyBpc3N1ZVR5cGUuXG4gICAgICogICAgICBTY2hlbWE6XG4gICAgICogICAgICAqIFwibmFtZVwiIC0gVGhlIG5hbWUgb2YgdGhlIGlzc3VlIHR5cGVcbiAgICAgKiAgICAgICogXCJkZXNjcmlwdGlvblwiIC0gU29tZSBkZXNjcmlwdGlvbiBhYm91dCB0aGUgaXNzdWUgdHlwZVxuICAgICAqICAgICAgKiBcInR5cGVcIiAtIENhbiBoYXZlIGVpdGhlciBcInN1YnRhc2tcIiBvciBcInN0YW5kYXJkXCIgYXMgdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBpc3N1ZSB0eXBlIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgaXNzdWUgdHlwZSBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlSXNzdWVUeXBlID0gZnVuY3Rpb24gKGlzc3VlVHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2lzc3VldHlwZScpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgYm9keTogaXNzdWVUeXBlLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogR2V0IGEgZnVsbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgaXNzdWUgdHlwZSB0aGF0IGhhcyB0aGUgZ2l2ZW4gaWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldElzc3VlVHlwZVxuICAgICAqIEBtZW1iZXJPZiBJc3N1ZVR5cGVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5pc3N1ZVR5cGVJZCBBIFN0cmluZyBjb250YWluaW5nIGFuIGlzc3VlIHR5cGUgaWRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBpc3N1ZSB0eXBlIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBpc3N1ZSB0eXBlIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldElzc3VlVHlwZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvaXNzdWV0eXBlLycgKyBvcHRzLmlzc3VlVHlwZUlkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgdGhlIHNwZWNpZmllZCBpc3N1ZSB0eXBlLlxuICAgICAqIElmIHRoZSBpc3N1ZSB0eXBlIGhhcyBhbnkgYXNzb2NpYXRlZCBpc3N1ZXMsIHRoZXNlIGlzc3VlcyB3aWxsIGJlXG4gICAgICogbWlncmF0ZWQgdG8gdGhlIGFsdGVybmF0aXZlIGlzc3VlIHR5cGUgc3BlY2lmaWVkIGluIHRoZSBwYXJhbWV0ZXIuXG4gICAgICogWW91IGNhbiBkZXRlcm1pbmUgdGhlIGFsdGVybmF0aXZlIGlzc3VlIHR5cGVzIGJ5IGNhbGxpbmcgdGhlIC9yZXN0L2FwaS8yL2lzc3VldHlwZS97aWR9L2FsdGVybmF0aXZlcyByZXNvdXJjZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlSXNzdWVUeXBlXG4gICAgICogQG1lbWJlck9mIElzc3VlVHlwZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBzZW5kIHRvIHRoZSBKSVJBIEFQSVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLmlzc3VlVHlwZUlkIElEIG9mIHRoZSBpc3N1ZVR5cGUgdG8gYmUgZGVsZXRlZC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5hbHRlcm5hdGl2ZUlzc3VlVHlwZUlkIHRoZSBpZCBvZiBhbiBpc3N1ZSB0eXBlIHRvIHdoaWNoIGlzc3Vlc1xuICAgICAqICAgICAgICAgIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVtb3ZlZCBpc3N1ZSB0eXBlIHdpbGwgYmUgbWlncmF0ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgaXNzdWUgdHlwZSBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGlzc3VlIHR5cGUgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZUlzc3VlVHlwZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvaXNzdWV0eXBlLycgKyBvcHRzLmlzc3VlVHlwZUlkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZUlzc3VlVHlwZUlkOiBvcHRzLmFsdGVybmF0aXZlSXNzdWVUeXBlSWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBzcGVjaWZpZWQgaXNzdWUgdHlwZSBmcm9tIGEgSlNPTiByZXByZXNlbnRhdGlvbi5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgdXBkYXRlSXNzdWVUeXBlXG4gICAgICogQG1lbWJlck9mIElzc3VlVHlwZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLmlzc3VlVHlwZUlkIElEIG9mIHRoZSBpc3N1ZSB0eXBlIHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cy5pc3N1ZVR5cGUgT2JqZWN0IGNvbnRhaW5pbmcgZGV0YWlscyBvZiB0aGUgaXNzdWVUeXBlIHRvIGJlIHVwZGF0ZWQuXG4gICAgICogICAgICBTY2hlbWE6XG4gICAgICogICAgICAqIFwibmFtZVwiIC0gVGhlIG5hbWUgb2YgdGhlIGlzc3VlIHR5cGVcbiAgICAgKiAgICAgICogXCJkZXNjcmlwdGlvblwiIC0gU29tZSBkZXNjcmlwdGlvbiBhYm91dCB0aGUgaXNzdWUgdHlwZVxuICAgICAqICAgICAgKiBcImF2YXRhcklkXCIgLSBJbnRlZ2VyIGNvbnRhaW5pbmcgdGhlIGF2YXRhciBJRFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGlzc3VlIHR5cGUgaGFzIGJlZW4gdXBkYXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBpc3N1ZSB0eXBlIGhhcyBiZWVuIHVwZGF0ZWQuXG4gICAgICovXG4gICAgdGhpcy51cGRhdGVJc3N1ZVR5cGUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2lzc3VldHlwZS8nICsgb3B0cy5pc3N1ZVR5cGVJZCksXG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMuaXNzdWVUeXBlLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhbGwgYWx0ZXJuYXRpdmUgaXNzdWUgdHlwZXMgZm9yIHRoZSBnaXZlbiBpc3N1ZSB0eXBlIGlkLlxuICAgICAqIFRoZSBsaXN0IHdpbGwgY29udGFpbiB0aGVzZSBpc3N1ZXMgdHlwZXMsIHRvIHdoaWNoIGlzc3VlcyBhc3NpZ25lZCB0byB0aGUgZ2l2ZW5cbiAgICAgKiBpc3N1ZSB0eXBlIGNhbiBiZSBtaWdyYXRlZC4gVGhlIHN1aXRhYmxlIGFsdGVybmF0aXZlcyBhcmUgaXNzdWUgdHlwZXMgd2hpY2ggYXJlXG4gICAgICogYXNzaWduZWQgdG8gdGhlIHNhbWUgd29ya2Zsb3csIHRoZSBzYW1lIGZpZWxkIGNvbmZpZ3VyYXRpb24gYW5kIHRoZSBzYW1lIHNjcmVlbiBzY2hlbWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEFsdGVybmF0aXZlSXNzdWVUeXBlc1xuICAgICAqIEBtZW1iZXJPZiBJc3N1ZVR5cGVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5pc3N1ZVR5cGVJZCBBIFN0cmluZyBjb250YWluaW5nIGFuIGlzc3VlIHR5cGUgaWRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBpc3N1ZSB0eXBlIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBpc3N1ZSB0eXBlIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldEFsdGVybmF0aXZlSXNzdWVUeXBlcyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvaXNzdWV0eXBlLycgKyBvcHRzLmlzc3VlVHlwZUlkICsgJy9hbHRlcm5hdGl2ZXMnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBKcWxDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvanFsL2F1dG9jb21wbGV0ZWRhdGEnXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgSnFsQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIEpxbENsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGF1dG8gY29tcGxldGUgZGF0YSByZXF1aXJlZCBmb3IgSlFMIHNlYXJjaGVzLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBdXRvQ29tcGxldGVEYXRhXG4gICAgICogQG1lbWJlck9mIEpxbENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS4gIElnbm9yZWQgYnkgdGhpcyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgYXV0b2NvbXBsZXRlIGRhdGEgaXMgcmV0dXJuZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgYXV0b2NvbXBsZXRlIGRhdGEgaXMgcmV0dXJuZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRBdXRvQ29tcGxldGVEYXRhID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9qcWwvYXV0b2NvbXBsZXRlZGF0YScpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBMaWNlbnNlUm9sZUNsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9saWNlbnNlcm9sZSdcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIExpY2Vuc2VSb2xlQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIExpY2Vuc2VSb2xlQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgbGljZW5zZSByb2xlcyBpbiB0aGUgc3lzdGVtLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBbGxMaWNlbnNlUm9sZXNcbiAgICAgKiBAbWVtYmVyT2YgTGljZW5zZVJvbGVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgSWdub3JlZFxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBsaWNlbnNlIHJvbGVzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgbGljZW5zZSByb2xlcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0QWxsTGljZW5zZVJvbGVzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9saWNlbnNlcm9sZScpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFzc2VkIGxpY2Vuc2Ugcm9sZSBpZiBpdCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldExpY2Vuc2VSb2xlXG4gICAgICogQG1lbWJlck9mIExpY2Vuc2VSb2xlQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMucm9sZUlkIFRoZSBpZCBvZiB0aGUgbGljZW5zZSByb2xlIHRvIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBsaWNlbnNlIHJvbGUgaXMgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGxpY2Vuc2Ugcm9sZSBpcyByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRMaWNlbnNlUm9sZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvbGljZW5zZXJvbGUvJyArIG9wdHMucm9sZUlkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGxpY2Vuc2Ugcm9sZSB3aXRoIHRoZSBwYXNzZWQgZGF0YS4gT25seSB0aGUgZ3JvdXBzIG9mIHRoZSByb2xlIG1heSBiZSB1cGRhdGVkLiBSZXF1ZXN0cyB0byBjaGFuZ2VcbiAgICAgKiB0aGUgaWQgb3IgdGhlIG5hbWUgb2YgdGhlIHJvbGUgd2lsbCBiZSBzaWxlbnRseSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBlZGl0TGljZW5zZVJvbGVcbiAgICAgKiBAbWVtYmVyT2YgTGljZW5zZVJvbGVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy5yb2xlSWQgVGhlIGlkIG9mIHRoZSBsaWNlbnNlIHJvbGUgdG8gcmV0cmlldmUuXG4gICAgICogQHBhcmFtIG9wdHMucm9sZSBUaGUgbmV3IGRhdGEgdG8gcGxhY2UgaW4gdGhlIHJvbGUuICBTZWVcbiAgICAgKiAge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTM2NX1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgbGljZW5zZSByb2xlIGlzIGVkaXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBsaWNlbnNlIHJvbGUgaXMgZWRpdGVkLlxuICAgICAqL1xuICAgIHRoaXMuZWRpdExpY2Vuc2VSb2xlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9saWNlbnNlcm9sZS8nICsgb3B0cy5yb2xlSWQpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiBvcHRzLnJvbGVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gTGljZW5zZVZhbGlkYXRvckNsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9saWNlbnNlVmFsaWRhdG9yJ1xuICpcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIExpY2Vuc2VWYWxpZGF0b3JDbGllbnRcbiAqL1xuZnVuY3Rpb24gTGljZW5zZVZhbGlkYXRvckNsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQG1ldGhvZCB2YWxpZGF0ZUxpY2Vuc2VcbiAgICAgKiBAbWVtYmVyT2YgTGljZW5zZVZhbGlkYXRvckNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLmxpY2Vuc2UgVGhlIGxpY2Vuc2UgdG8gdmFsaWRhdGUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGxpY2Vuc2UgaGFzIGJlZW4gdmFsaWRhdGVkLCBvciBmYWlscyB0byB2YWxpZGF0ZS5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBsaWNlbnNlIGhhcyBiZWVuIHZhbGlkYXRlZCwgb3IgZmFpbHMgdG8gdmFsaWRhdGUuXG4gICAgICovXG4gICAgdGhpcy52YWxpZGF0ZUxpY2Vuc2UgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL2xpY2Vuc2VWYWxpZGF0b3InKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMubGljZW5zZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBNeVBlcm1pc3Npb25zQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL215cGVybWlzc2lvbnMnXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgTXlQZXJtaXNzaW9uc0NsaWVudFxuICovXG5mdW5jdGlvbiBNeVBlcm1pc3Npb25zQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgcGVybWlzc2lvbnMgaW4gdGhlIHN5c3RlbSBhbmQgd2hldGhlciB0aGUgY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyIGhhcyB0aGVtLiBZb3UgY2FuIG9wdGlvbmFsbHlcbiAgICAgKiBwcm92aWRlIGEgc3BlY2lmaWMgY29udGV4dCB0byBnZXQgcGVybWlzc2lvbnMgZm9yIChwcm9qZWN0S2V5IE9SIHByb2plY3RJZCBPUiBpc3N1ZUtleSBPUiBpc3N1ZUlkKVxuICAgICAqXG4gICAgICogKiBXaGVuIG5vIGNvbnRleHQgc3VwcGxpZWQgdGhlIHByb2plY3QgcmVsYXRlZCBwZXJtaXNzaW9ucyB3aWxsIHJldHVybiB0cnVlIGlmIHRoZSB1c2VyIGhhcyB0aGF0IHBlcm1pc3Npb24gaW5cbiAgICAgKiBBTlkgcHJvamVjdFxuICAgICAqICogSWYgYSBwcm9qZWN0IGNvbnRleHQgaXMgcHJvdmlkZWQsIHByb2plY3QgcmVsYXRlZCBwZXJtaXNzaW9ucyB3aWxsIHJldHVybiB0cnVlIGlmIHRoZSB1c2VyIGhhcyB0aGUgcGVybWlzc2lvbnNcbiAgICAgKiBpbiB0aGUgc3BlY2lmaWVkIHByb2plY3QuIEZvciBwZXJtaXNzaW9ucyB0aGF0IGFyZSBkZXRlcm1pbmVkIHVzaW5nIGlzc3VlIGRhdGEgKGUuZyBDdXJyZW50IEFzc2lnbmVlKSwgdHJ1ZSB3aWxsXG4gICAgICogYmUgcmV0dXJuZWQgaWYgdGhlIHVzZXIgbWVldHMgdGhlIHBlcm1pc3Npb24gY3JpdGVyaWEgaW4gQU5ZIGlzc3VlIGluIHRoYXQgcHJvamVjdFxuICAgICAqICogSWYgYW4gaXNzdWUgY29udGV4dCBpcyBwcm92aWRlZCwgaXQgd2lsbCByZXR1cm4gd2hldGhlciBvciBub3QgdGhlIHVzZXIgaGFzIGVhY2ggcGVybWlzc2lvbiBpbiB0aGF0IHNwZWNpZmljXG4gICAgICogaXNzdWVcbiAgICAgKlxuICAgICAqIE5COiBUaGUgYWJvdmUgbWVhbnMgdGhhdCBmb3IgaXNzdWUtbGV2ZWwgcGVybWlzc2lvbnMgKEVESVRfSVNTVUUgZm9yIGV4YW1wbGUpLCBoYXNQZXJtaXNzaW9uIG1heSBiZSB0cnVlIHdoZW4gbm9cbiAgICAgKiBjb250ZXh0IGlzIHByb3ZpZGVkLCBvciB3aGVuIGEgcHJvamVjdCBjb250ZXh0IGlzIHByb3ZpZGVkLCBidXQgbWF5IGJlIGZhbHNlIGZvciBhbnkgZ2l2ZW4gKG9yIGFsbCkgaXNzdWVzLiBUaGlzXG4gICAgICogd291bGQgb2NjdXIgKGZvciBleGFtcGxlKSBpZiBSZXBvcnRlcnMgd2VyZSBnaXZlbiB0aGUgRURJVF9JU1NVRSBwZXJtaXNzaW9uLiBUaGlzIGlzIGJlY2F1c2UgYW55IHVzZXIgY291bGQgYmUgYVxuICAgICAqIHJlcG9ydGVyLCBleGNlcHQgaW4gdGhlIGNvbnRleHQgb2YgYSBjb25jcmV0ZSBpc3N1ZSwgd2hlcmUgdGhlIHJlcG9ydGVyIGlzIGtub3duLlxuICAgICAqXG4gICAgICogR2xvYmFsIHBlcm1pc3Npb25zIHdpbGwgc3RpbGwgYmUgcmV0dXJuZWQgZm9yIGFsbCBzY29wZXMuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldE15UGVybWlzc2lvbnNcbiAgICAgKiBAbWVtYmVyT2YgTXlQZXJtaXNzaW9uc0NsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHBlcm1pc3Npb25zIGhhdmUgYmVlbiByZXR1cm5lZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwZXJtaXNzaW9ucyBoYXZlIGJlZW4gcmV0dXJuZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRNeVBlcm1pc3Npb25zID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9teXBlcm1pc3Npb25zJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVJZDogb3B0cy5pc3N1ZUlkLFxuICAgICAgICAgICAgICAgIGlzc3VlS2V5OiBvcHRzLmlzc3VlS2V5LFxuICAgICAgICAgICAgICAgIHByb2plY3RJZDogb3B0cy5wcm9qZWN0SWQsXG4gICAgICAgICAgICAgICAgcHJvamVjdEtleTogb3B0cy5wcm9qZWN0S2V5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBNeVByZWZlcmVuY2VzQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL215cHJlZmVyZW5jZXMnXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgTXlQcmVmZXJlbmNlc0NsaWVudFxuICovXG5mdW5jdGlvbiBNeVByZWZlcmVuY2VzQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBwcmVmZXJlbmNlIG9mIHRoZSBjdXJyZW50bHkgbG9nZ2VkIGluIHVzZXIuIFByZWZlcmVuY2Uga2V5IG11c3QgYmUgcHJvdmlkZWQgYXMgaW5wdXQgcGFyYW1ldGVyIChrZXkpLlxuICAgICAqIFRoZSB2YWx1ZSBpcyByZXR1cm5lZCBleGFjdGx5IGFzIGl0IGlzLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRQcmVmZXJlbmNlXG4gICAgICogQG1lbWJlck9mIE15UHJlZmVyZW5jZXNDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW5kIHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy5rZXkgS2V5IG9mIHRoZSBwcmVmZXJlbmNlIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwcmVmZXJlbmNlIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwcmVmZXJlbmNlIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFByZWZlcmVuY2UgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL215cHJlZmVyZW5jZXMnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBrZXk6IG9wdHMua2V5XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgcHJlZmVyZW5jZSBvZiB0aGUgY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyLiBQcmVmZXJlbmNlIGtleSBtdXN0IGJlIHByb3ZpZGVkIGFzIGlucHV0IHBhcmFtZXRlcnMgKGtleSkuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGVkaXRQcmVmZXJlbmNlXG4gICAgICogQG1lbWJlck9mIE15UHJlZmVyZW5jZXNDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW5kIHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy5rZXkgS2V5IG9mIHRoZSBwcmVmZXJlbmNlIHRvIGJlIGVkaXRlZC5cbiAgICAgKiBAcGFyYW0gb3B0cy52YWx1ZSBUaGUgbmV3IHZhbHVlIHRvIHNldCBmb3IgdGhlIHByZWZlcmVuY2UuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHByZWZlcmVuY2UgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHByZWZlcmVuY2UgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqL1xuICAgIHRoaXMuZWRpdFByZWZlcmVuY2UgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL215cHJlZmVyZW5jZXMnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBrZXk6IG9wdHMua2V5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keTogb3B0cy52YWx1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHByZWZlcmVuY2Ugb2YgdGhlIGN1cnJlbnRseSBsb2dnZWQgaW4gdXNlci4gUHJlZmVyZW5jZSBrZXkgbXVzdCBiZSBwcm92aWRlZCBhcyBpbnB1dCBwYXJhbWV0ZXJzIChrZXkpLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBkZWxldGVQcmVmZXJlbmNlXG4gICAgICogQG1lbWJlck9mIE15UHJlZmVyZW5jZXNDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW5kIHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy5rZXkgS2V5IG9mIHRoZSBwcmVmZXJlbmNlIHRvIGJlIGRlbGV0ZWQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHByZWZlcmVuY2UgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwcmVmZXJlbmNlIGhhcyBiZWVuIGRlbGV0ZWQuXG4gICAgICovXG4gICAgdGhpcy5kZWxldGVQcmVmZXJlbmNlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9teXByZWZlcmVuY2VzJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAga2V5OiBvcHRzLmtleVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBNeXNlbGZDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvbXlzZWxmJ1xuICpcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIE15c2VsZkNsaWVudFxuICovXG5mdW5jdGlvbiBNeXNlbGZDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGN1cnJlbnRseSBsb2dnZWQgdXNlci4gVGhpcyByZXNvdXJjZSBjYW5ub3QgYmUgYWNjZXNzZWQgYW5vbnltb3VzbHkuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldE15c2VsZlxuICAgICAqIEBtZW1iZXJPZiBNeXNlbGZDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgSWdub3JlZFxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBjdXJyZW50IHVzZXIgaXMgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGN1cnJlbnQgdXNlciBpcyByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRNeXNlbGYgPSBmdW5jdGlvbiAoZGVidWcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9teXNlbGYnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgZGVidWc6IGRlYnVnLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNb2RpZnkgY3VycmVudGx5IGxvZ2dlZCB1c2VyLiBUaGUgXCJ2YWx1ZVwiIGZpZWxkcyBwcmVzZW50IHdpbGwgb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHZhbHVlLiBGaWVsZHMgc2tpcHBlZCBpblxuICAgICAqIHJlcXVlc3Qgd2lsbCBub3QgYmUgY2hhbmdlZC4gT25seSBlbWFpbCBhbmQgZGlzcGxheSBuYW1lIGNhbiBiZSBjaGFuZ2UgdGhhdCB3YXkuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGVkaXRNeXNlbGZcbiAgICAgKiBAbWVtYmVyT2YgTXlzZWxmQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VuZCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMubmV3RGF0YSBUaGUgbmV3IGRhdGEuICBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTEyNDJ9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHVzZXIncyBkYXRhIGhhcyBiZWVuIG1vZGlmaWVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgdXNlcidzIGRhdGEgaGFzIGJlZW4gbW9kaWZpZWRcbiAgICAgKi9cbiAgICB0aGlzLmVkaXRNeXNlbGYgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL215c2VsZicpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiBvcHRzLm5ld0RhdGFcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTW9kaWZ5IGNhbGxlciBwYXNzd29yZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY2hhbmdlUGFzc3dvcmRcbiAgICAgKiBAbWVtYmVyT2YgTXlzZWxmQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMubmV3RGF0YSBUaGUgbmV3IGRhdGFcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcGFzc3dvcmQgaGFzIGJlZW4gY2hhbmdlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwYXNzd29yZCBoYXMgYmVlbiBjaGFuZ2VkLlxuICAgICAqL1xuICAgIHRoaXMuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL215c2VsZi9wYXNzd29yZCcpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiBvcHRzLm5ld0RhdGFcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG59XG4iLCJleHBvcnRzLk9BdXRoID0gcmVxdWlyZShcIi4vbGliL29hdXRoXCIpLk9BdXRoO1xuZXhwb3J0cy5PQXV0aEVjaG8gPSByZXF1aXJlKFwiLi9saWIvb2F1dGhcIikuT0F1dGhFY2hvO1xuZXhwb3J0cy5PQXV0aDIgPSByZXF1aXJlKFwiLi9saWIvb2F1dGgyXCIpLk9BdXRoMjsiLCIvKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0xLCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0xXG4gKiBWZXJzaW9uIDIuMiBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxuLypcbiAqIENvbmZpZ3VyYWJsZSB2YXJpYWJsZXMuIFlvdSBtYXkgbmVlZCB0byB0d2VhayB0aGVzZSB0byBiZSBjb21wYXRpYmxlIHdpdGhcbiAqIHRoZSBzZXJ2ZXItc2lkZSwgYnV0IHRoZSBkZWZhdWx0cyB3b3JrIGluIG1vc3QgY2FzZXMuXG4gKi9cbnZhciBoZXhjYXNlID0gMTsgIC8qIGhleCBvdXRwdXQgZm9ybWF0LiAwIC0gbG93ZXJjYXNlOyAxIC0gdXBwZXJjYXNlICAgICAgICAqL1xudmFyIGI2NHBhZCAgPSBcIj1cIjsgLyogYmFzZS02NCBwYWQgY2hhcmFjdGVyLiBcIj1cIiBmb3Igc3RyaWN0IFJGQyBjb21wbGlhbmNlICAgKi9cblxuLypcbiAqIFRoZXNlIGFyZSB0aGUgZnVuY3Rpb25zIHlvdSdsbCB1c3VhbGx5IHdhbnQgdG8gY2FsbFxuICogVGhleSB0YWtlIHN0cmluZyBhcmd1bWVudHMgYW5kIHJldHVybiBlaXRoZXIgaGV4IG9yIGJhc2UtNjQgZW5jb2RlZCBzdHJpbmdzXG4gKi9cbmZ1bmN0aW9uIGhleF9zaGExKHMpICAgIHsgcmV0dXJuIHJzdHIyaGV4KHJzdHJfc2hhMShzdHIycnN0cl91dGY4KHMpKSk7IH1cbmZ1bmN0aW9uIGI2NF9zaGExKHMpICAgIHsgcmV0dXJuIHJzdHIyYjY0KHJzdHJfc2hhMShzdHIycnN0cl91dGY4KHMpKSk7IH1cbmZ1bmN0aW9uIGFueV9zaGExKHMsIGUpIHsgcmV0dXJuIHJzdHIyYW55KHJzdHJfc2hhMShzdHIycnN0cl91dGY4KHMpKSwgZSk7IH1cbmZ1bmN0aW9uIGhleF9obWFjX3NoYTEoaywgZClcbiAgeyByZXR1cm4gcnN0cjJoZXgocnN0cl9obWFjX3NoYTEoc3RyMnJzdHJfdXRmOChrKSwgc3RyMnJzdHJfdXRmOChkKSkpOyB9XG5mdW5jdGlvbiBiNjRfaG1hY19zaGExKGssIGQpXG4gIHsgcmV0dXJuIHJzdHIyYjY0KHJzdHJfaG1hY19zaGExKHN0cjJyc3RyX3V0ZjgoayksIHN0cjJyc3RyX3V0ZjgoZCkpKTsgfVxuZnVuY3Rpb24gYW55X2htYWNfc2hhMShrLCBkLCBlKVxuICB7IHJldHVybiByc3RyMmFueShyc3RyX2htYWNfc2hhMShzdHIycnN0cl91dGY4KGspLCBzdHIycnN0cl91dGY4KGQpKSwgZSk7IH1cblxuLypcbiAqIFBlcmZvcm0gYSBzaW1wbGUgc2VsZi10ZXN0IHRvIHNlZSBpZiB0aGUgVk0gaXMgd29ya2luZ1xuICovXG5mdW5jdGlvbiBzaGExX3ZtX3Rlc3QoKVxue1xuICByZXR1cm4gaGV4X3NoYTEoXCJhYmNcIikudG9Mb3dlckNhc2UoKSA9PSBcImE5OTkzZTM2NDcwNjgxNmFiYTNlMjU3MTc4NTBjMjZjOWNkMGQ4OWRcIjtcbn1cblxuLypcbiAqIENhbGN1bGF0ZSB0aGUgU0hBMSBvZiBhIHJhdyBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gcnN0cl9zaGExKHMpXG57XG4gIHJldHVybiBiaW5iMnJzdHIoYmluYl9zaGExKHJzdHIyYmluYihzKSwgcy5sZW5ndGggKiA4KSk7XG59XG5cbi8qXG4gKiBDYWxjdWxhdGUgdGhlIEhNQUMtU0hBMSBvZiBhIGtleSBhbmQgc29tZSBkYXRhIChyYXcgc3RyaW5ncylcbiAqL1xuZnVuY3Rpb24gcnN0cl9obWFjX3NoYTEoa2V5LCBkYXRhKVxue1xuICB2YXIgYmtleSA9IHJzdHIyYmluYihrZXkpO1xuICBpZihia2V5Lmxlbmd0aCA+IDE2KSBia2V5ID0gYmluYl9zaGExKGJrZXksIGtleS5sZW5ndGggKiA4KTtcblxuICB2YXIgaXBhZCA9IEFycmF5KDE2KSwgb3BhZCA9IEFycmF5KDE2KTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gIHtcbiAgICBpcGFkW2ldID0gYmtleVtpXSBeIDB4MzYzNjM2MzY7XG4gICAgb3BhZFtpXSA9IGJrZXlbaV0gXiAweDVDNUM1QzVDO1xuICB9XG5cbiAgdmFyIGhhc2ggPSBiaW5iX3NoYTEoaXBhZC5jb25jYXQocnN0cjJiaW5iKGRhdGEpKSwgNTEyICsgZGF0YS5sZW5ndGggKiA4KTtcbiAgcmV0dXJuIGJpbmIycnN0cihiaW5iX3NoYTEob3BhZC5jb25jYXQoaGFzaCksIDUxMiArIDE2MCkpO1xufVxuXG4vKlxuICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYSBoZXggc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHJzdHIyaGV4KGlucHV0KVxue1xuICB0cnkgeyBoZXhjYXNlIH0gY2F0Y2goZSkgeyBoZXhjYXNlPTA7IH1cbiAgdmFyIGhleF90YWIgPSBoZXhjYXNlID8gXCIwMTIzNDU2Nzg5QUJDREVGXCIgOiBcIjAxMjM0NTY3ODlhYmNkZWZcIjtcbiAgdmFyIG91dHB1dCA9IFwiXCI7XG4gIHZhciB4O1xuICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspXG4gIHtcbiAgICB4ID0gaW5wdXQuY2hhckNvZGVBdChpKTtcbiAgICBvdXRwdXQgKz0gaGV4X3RhYi5jaGFyQXQoKHggPj4+IDQpICYgMHgwRilcbiAgICAgICAgICAgKyAgaGV4X3RhYi5jaGFyQXQoIHggICAgICAgICYgMHgwRik7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuLypcbiAqIENvbnZlcnQgYSByYXcgc3RyaW5nIHRvIGEgYmFzZS02NCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gcnN0cjJiNjQoaW5wdXQpXG57XG4gIHRyeSB7IGI2NHBhZCB9IGNhdGNoKGUpIHsgYjY0cGFkPScnOyB9XG4gIHZhciB0YWIgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcbiAgdmFyIG91dHB1dCA9IFwiXCI7XG4gIHZhciBsZW4gPSBpbnB1dC5sZW5ndGg7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMylcbiAge1xuICAgIHZhciB0cmlwbGV0ID0gKGlucHV0LmNoYXJDb2RlQXQoaSkgPDwgMTYpXG4gICAgICAgICAgICAgICAgfCAoaSArIDEgPCBsZW4gPyBpbnB1dC5jaGFyQ29kZUF0KGkrMSkgPDwgOCA6IDApXG4gICAgICAgICAgICAgICAgfCAoaSArIDIgPCBsZW4gPyBpbnB1dC5jaGFyQ29kZUF0KGkrMikgICAgICA6IDApO1xuICAgIGZvcih2YXIgaiA9IDA7IGogPCA0OyBqKyspXG4gICAge1xuICAgICAgaWYoaSAqIDggKyBqICogNiA+IGlucHV0Lmxlbmd0aCAqIDgpIG91dHB1dCArPSBiNjRwYWQ7XG4gICAgICBlbHNlIG91dHB1dCArPSB0YWIuY2hhckF0KCh0cmlwbGV0ID4+PiA2KigzLWopKSAmIDB4M0YpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG4vKlxuICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYW4gYXJiaXRyYXJ5IHN0cmluZyBlbmNvZGluZ1xuICovXG5mdW5jdGlvbiByc3RyMmFueShpbnB1dCwgZW5jb2RpbmcpXG57XG4gIHZhciBkaXZpc29yID0gZW5jb2RpbmcubGVuZ3RoO1xuICB2YXIgcmVtYWluZGVycyA9IEFycmF5KCk7XG4gIHZhciBpLCBxLCB4LCBxdW90aWVudDtcblxuICAvKiBDb252ZXJ0IHRvIGFuIGFycmF5IG9mIDE2LWJpdCBiaWctZW5kaWFuIHZhbHVlcywgZm9ybWluZyB0aGUgZGl2aWRlbmQgKi9cbiAgdmFyIGRpdmlkZW5kID0gQXJyYXkoTWF0aC5jZWlsKGlucHV0Lmxlbmd0aCAvIDIpKTtcbiAgZm9yKGkgPSAwOyBpIDwgZGl2aWRlbmQubGVuZ3RoOyBpKyspXG4gIHtcbiAgICBkaXZpZGVuZFtpXSA9IChpbnB1dC5jaGFyQ29kZUF0KGkgKiAyKSA8PCA4KSB8IGlucHV0LmNoYXJDb2RlQXQoaSAqIDIgKyAxKTtcbiAgfVxuXG4gIC8qXG4gICAqIFJlcGVhdGVkbHkgcGVyZm9ybSBhIGxvbmcgZGl2aXNpb24uIFRoZSBiaW5hcnkgYXJyYXkgZm9ybXMgdGhlIGRpdmlkZW5kLFxuICAgKiB0aGUgbGVuZ3RoIG9mIHRoZSBlbmNvZGluZyBpcyB0aGUgZGl2aXNvci4gT25jZSBjb21wdXRlZCwgdGhlIHF1b3RpZW50XG4gICAqIGZvcm1zIHRoZSBkaXZpZGVuZCBmb3IgdGhlIG5leHQgc3RlcC4gV2Ugc3RvcCB3aGVuIHRoZSBkaXZpZGVuZCBpcyB6ZXJvLlxuICAgKiBBbGwgcmVtYWluZGVycyBhcmUgc3RvcmVkIGZvciBsYXRlciB1c2UuXG4gICAqL1xuICB3aGlsZShkaXZpZGVuZC5sZW5ndGggPiAwKVxuICB7XG4gICAgcXVvdGllbnQgPSBBcnJheSgpO1xuICAgIHggPSAwO1xuICAgIGZvcihpID0gMDsgaSA8IGRpdmlkZW5kLmxlbmd0aDsgaSsrKVxuICAgIHtcbiAgICAgIHggPSAoeCA8PCAxNikgKyBkaXZpZGVuZFtpXTtcbiAgICAgIHEgPSBNYXRoLmZsb29yKHggLyBkaXZpc29yKTtcbiAgICAgIHggLT0gcSAqIGRpdmlzb3I7XG4gICAgICBpZihxdW90aWVudC5sZW5ndGggPiAwIHx8IHEgPiAwKVxuICAgICAgICBxdW90aWVudFtxdW90aWVudC5sZW5ndGhdID0gcTtcbiAgICB9XG4gICAgcmVtYWluZGVyc1tyZW1haW5kZXJzLmxlbmd0aF0gPSB4O1xuICAgIGRpdmlkZW5kID0gcXVvdGllbnQ7XG4gIH1cblxuICAvKiBDb252ZXJ0IHRoZSByZW1haW5kZXJzIHRvIHRoZSBvdXRwdXQgc3RyaW5nICovXG4gIHZhciBvdXRwdXQgPSBcIlwiO1xuICBmb3IoaSA9IHJlbWFpbmRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgb3V0cHV0ICs9IGVuY29kaW5nLmNoYXJBdChyZW1haW5kZXJzW2ldKTtcblxuICAvKiBBcHBlbmQgbGVhZGluZyB6ZXJvIGVxdWl2YWxlbnRzICovXG4gIHZhciBmdWxsX2xlbmd0aCA9IE1hdGguY2VpbChpbnB1dC5sZW5ndGggKiA4IC9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChNYXRoLmxvZyhlbmNvZGluZy5sZW5ndGgpIC8gTWF0aC5sb2coMikpKVxuICBmb3IoaSA9IG91dHB1dC5sZW5ndGg7IGkgPCBmdWxsX2xlbmd0aDsgaSsrKVxuICAgIG91dHB1dCA9IGVuY29kaW5nWzBdICsgb3V0cHV0O1xuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qXG4gKiBFbmNvZGUgYSBzdHJpbmcgYXMgdXRmLTguXG4gKiBGb3IgZWZmaWNpZW5jeSwgdGhpcyBhc3N1bWVzIHRoZSBpbnB1dCBpcyB2YWxpZCB1dGYtMTYuXG4gKi9cbmZ1bmN0aW9uIHN0cjJyc3RyX3V0ZjgoaW5wdXQpXG57XG4gIHZhciBvdXRwdXQgPSBcIlwiO1xuICB2YXIgaSA9IC0xO1xuICB2YXIgeCwgeTtcblxuICB3aGlsZSgrK2kgPCBpbnB1dC5sZW5ndGgpXG4gIHtcbiAgICAvKiBEZWNvZGUgdXRmLTE2IHN1cnJvZ2F0ZSBwYWlycyAqL1xuICAgIHggPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xuICAgIHkgPSBpICsgMSA8IGlucHV0Lmxlbmd0aCA/IGlucHV0LmNoYXJDb2RlQXQoaSArIDEpIDogMDtcbiAgICBpZigweEQ4MDAgPD0geCAmJiB4IDw9IDB4REJGRiAmJiAweERDMDAgPD0geSAmJiB5IDw9IDB4REZGRilcbiAgICB7XG4gICAgICB4ID0gMHgxMDAwMCArICgoeCAmIDB4MDNGRikgPDwgMTApICsgKHkgJiAweDAzRkYpO1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIC8qIEVuY29kZSBvdXRwdXQgYXMgdXRmLTggKi9cbiAgICBpZih4IDw9IDB4N0YpXG4gICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcbiAgICBlbHNlIGlmKHggPD0gMHg3RkYpXG4gICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEMwIHwgKCh4ID4+PiA2ICkgJiAweDFGKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoIHggICAgICAgICAmIDB4M0YpKTtcbiAgICBlbHNlIGlmKHggPD0gMHhGRkZGKVxuICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhFMCB8ICgoeCA+Pj4gMTIpICYgMHgwRiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwIHwgKCh4ID4+PiA2ICkgJiAweDNGKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoIHggICAgICAgICAmIDB4M0YpKTtcbiAgICBlbHNlIGlmKHggPD0gMHgxRkZGRkYpXG4gICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEYwIHwgKCh4ID4+PiAxOCkgJiAweDA3KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoKHggPj4+IDEyKSAmIDB4M0YpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MCB8ICgoeCA+Pj4gNiApICYgMHgzRiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwIHwgKCB4ICAgICAgICAgJiAweDNGKSk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuLypcbiAqIEVuY29kZSBhIHN0cmluZyBhcyB1dGYtMTZcbiAqL1xuZnVuY3Rpb24gc3RyMnJzdHJfdXRmMTZsZShpbnB1dClcbntcbiAgdmFyIG91dHB1dCA9IFwiXCI7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKylcbiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSggaW5wdXQuY2hhckNvZGVBdChpKSAgICAgICAgJiAweEZGLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpbnB1dC5jaGFyQ29kZUF0KGkpID4+PiA4KSAmIDB4RkYpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBzdHIycnN0cl91dGYxNmJlKGlucHV0KVxue1xuICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKVxuICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChpbnB1dC5jaGFyQ29kZUF0KGkpID4+PiA4KSAmIDB4RkYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmNoYXJDb2RlQXQoaSkgICAgICAgICYgMHhGRik7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qXG4gKiBDb252ZXJ0IGEgcmF3IHN0cmluZyB0byBhbiBhcnJheSBvZiBiaWctZW5kaWFuIHdvcmRzXG4gKiBDaGFyYWN0ZXJzID4yNTUgaGF2ZSB0aGVpciBoaWdoLWJ5dGUgc2lsZW50bHkgaWdub3JlZC5cbiAqL1xuZnVuY3Rpb24gcnN0cjJiaW5iKGlucHV0KVxue1xuICB2YXIgb3V0cHV0ID0gQXJyYXkoaW5wdXQubGVuZ3RoID4+IDIpO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgb3V0cHV0Lmxlbmd0aDsgaSsrKVxuICAgIG91dHB1dFtpXSA9IDA7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGggKiA4OyBpICs9IDgpXG4gICAgb3V0cHV0W2k+PjVdIHw9IChpbnB1dC5jaGFyQ29kZUF0KGkgLyA4KSAmIDB4RkYpIDw8ICgyNCAtIGkgJSAzMik7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qXG4gKiBDb252ZXJ0IGFuIGFycmF5IG9mIGJpZy1lbmRpYW4gd29yZHMgdG8gYSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gYmluYjJyc3RyKGlucHV0KVxue1xuICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aCAqIDMyOyBpICs9IDgpXG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGlucHV0W2k+PjVdID4+PiAoMjQgLSBpICUgMzIpKSAmIDB4RkYpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG4vKlxuICogQ2FsY3VsYXRlIHRoZSBTSEEtMSBvZiBhbiBhcnJheSBvZiBiaWctZW5kaWFuIHdvcmRzLCBhbmQgYSBiaXQgbGVuZ3RoXG4gKi9cbmZ1bmN0aW9uIGJpbmJfc2hhMSh4LCBsZW4pXG57XG4gIC8qIGFwcGVuZCBwYWRkaW5nICovXG4gIHhbbGVuID4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbGVuICUgMzIpO1xuICB4WygobGVuICsgNjQgPj4gOSkgPDwgNCkgKyAxNV0gPSBsZW47XG5cbiAgdmFyIHcgPSBBcnJheSg4MCk7XG4gIHZhciBhID0gIDE3MzI1ODQxOTM7XG4gIHZhciBiID0gLTI3MTczMzg3OTtcbiAgdmFyIGMgPSAtMTczMjU4NDE5NDtcbiAgdmFyIGQgPSAgMjcxNzMzODc4O1xuICB2YXIgZSA9IC0xMDA5NTg5Nzc2O1xuXG4gIGZvcih2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNilcbiAge1xuICAgIHZhciBvbGRhID0gYTtcbiAgICB2YXIgb2xkYiA9IGI7XG4gICAgdmFyIG9sZGMgPSBjO1xuICAgIHZhciBvbGRkID0gZDtcbiAgICB2YXIgb2xkZSA9IGU7XG5cbiAgICBmb3IodmFyIGogPSAwOyBqIDwgODA7IGorKylcbiAgICB7XG4gICAgICBpZihqIDwgMTYpIHdbal0gPSB4W2kgKyBqXTtcbiAgICAgIGVsc2Ugd1tqXSA9IGJpdF9yb2wod1tqLTNdIF4gd1tqLThdIF4gd1tqLTE0XSBeIHdbai0xNl0sIDEpO1xuICAgICAgdmFyIHQgPSBzYWZlX2FkZChzYWZlX2FkZChiaXRfcm9sKGEsIDUpLCBzaGExX2Z0KGosIGIsIGMsIGQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9hZGQoc2FmZV9hZGQoZSwgd1tqXSksIHNoYTFfa3QoaikpKTtcbiAgICAgIGUgPSBkO1xuICAgICAgZCA9IGM7XG4gICAgICBjID0gYml0X3JvbChiLCAzMCk7XG4gICAgICBiID0gYTtcbiAgICAgIGEgPSB0O1xuICAgIH1cblxuICAgIGEgPSBzYWZlX2FkZChhLCBvbGRhKTtcbiAgICBiID0gc2FmZV9hZGQoYiwgb2xkYik7XG4gICAgYyA9IHNhZmVfYWRkKGMsIG9sZGMpO1xuICAgIGQgPSBzYWZlX2FkZChkLCBvbGRkKTtcbiAgICBlID0gc2FmZV9hZGQoZSwgb2xkZSk7XG4gIH1cbiAgcmV0dXJuIEFycmF5KGEsIGIsIGMsIGQsIGUpO1xuXG59XG5cbi8qXG4gKiBQZXJmb3JtIHRoZSBhcHByb3ByaWF0ZSB0cmlwbGV0IGNvbWJpbmF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgY3VycmVudFxuICogaXRlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHNoYTFfZnQodCwgYiwgYywgZClcbntcbiAgaWYodCA8IDIwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZCk7XG4gIGlmKHQgPCA0MCkgcmV0dXJuIGIgXiBjIF4gZDtcbiAgaWYodCA8IDYwKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpO1xuICByZXR1cm4gYiBeIGMgXiBkO1xufVxuXG4vKlxuICogRGV0ZXJtaW5lIHRoZSBhcHByb3ByaWF0ZSBhZGRpdGl2ZSBjb25zdGFudCBmb3IgdGhlIGN1cnJlbnQgaXRlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHNoYTFfa3QodClcbntcbiAgcmV0dXJuICh0IDwgMjApID8gIDE1MTg1MDAyNDkgOiAodCA8IDQwKSA/ICAxODU5Nzc1MzkzIDpcbiAgICAgICAgICh0IDwgNjApID8gLTE4OTQwMDc1ODggOiAtODk5NDk3NTE0O1xufVxuXG4vKlxuICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseVxuICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy5cbiAqL1xuZnVuY3Rpb24gc2FmZV9hZGQoeCwgeSlcbntcbiAgdmFyIGxzdyA9ICh4ICYgMHhGRkZGKSArICh5ICYgMHhGRkZGKTtcbiAgdmFyIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICByZXR1cm4gKG1zdyA8PCAxNikgfCAobHN3ICYgMHhGRkZGKTtcbn1cblxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuZnVuY3Rpb24gYml0X3JvbChudW0sIGNudClcbntcbiAgcmV0dXJuIChudW0gPDwgY250KSB8IChudW0gPj4+ICgzMiAtIGNudCkpO1xufVxuXG5leHBvcnRzLkhNQUNTSEExPSBmdW5jdGlvbihrZXksIGRhdGEpIHtcbiAgcmV0dXJuIGI2NF9obWFjX3NoYTEoa2V5LCBkYXRhKTtcbn0iLCJ2YXIgcXVlcnlzdHJpbmc9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyksXG4gICAgY3J5cHRvPSByZXF1aXJlKCdjcnlwdG8nKSxcbiAgICBodHRwcz0gcmVxdWlyZSgnaHR0cHMnKSxcbiAgICBodHRwPSByZXF1aXJlKCdodHRwJyksXG4gICAgVVJMPSByZXF1aXJlKCd1cmwnKSxcbiAgICBPQXV0aFV0aWxzPSByZXF1aXJlKCcuL191dGlscycpO1xuXG5leHBvcnRzLk9BdXRoMj0gZnVuY3Rpb24oY2xpZW50SWQsIGNsaWVudFNlY3JldCwgYmFzZVNpdGUsIGF1dGhvcml6ZVBhdGgsIGFjY2Vzc1Rva2VuUGF0aCwgY3VzdG9tSGVhZGVycykge1xuICB0aGlzLl9jbGllbnRJZD0gY2xpZW50SWQ7XG4gIHRoaXMuX2NsaWVudFNlY3JldD0gY2xpZW50U2VjcmV0O1xuICB0aGlzLl9iYXNlU2l0ZT0gYmFzZVNpdGU7XG4gIHRoaXMuX2F1dGhvcml6ZVVybD0gYXV0aG9yaXplUGF0aCB8fCBcIi9vYXV0aC9hdXRob3JpemVcIjtcbiAgdGhpcy5fYWNjZXNzVG9rZW5Vcmw9IGFjY2Vzc1Rva2VuUGF0aCB8fCBcIi9vYXV0aC9hY2Nlc3NfdG9rZW5cIjtcbiAgdGhpcy5fYWNjZXNzVG9rZW5OYW1lPSBcImFjY2Vzc190b2tlblwiO1xuICB0aGlzLl9hdXRoTWV0aG9kPSBcIkJlYXJlclwiO1xuICB0aGlzLl9jdXN0b21IZWFkZXJzID0gY3VzdG9tSGVhZGVycyB8fCB7fTtcbiAgdGhpcy5fdXNlQXV0aG9yaXphdGlvbkhlYWRlckZvckdFVD0gZmFsc2U7XG5cbiAgLy9vdXIgYWdlbnRcbiAgdGhpcy5fYWdlbnQgPSB1bmRlZmluZWQ7XG59O1xuXG4vLyBBbGxvd3MgeW91IHRvIHNldCBhbiBhZ2VudCB0byB1c2UgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBIVFRQIG9yXG4vLyBIVFRQUyBhZ2VudHMuIFVzZWZ1bCB3aGVuIGRlYWxpbmcgd2l0aCB5b3VyIG93biBjZXJ0aWZpY2F0ZXMuXG5leHBvcnRzLk9BdXRoMi5wcm90b3R5cGUuc2V0QWdlbnQgPSBmdW5jdGlvbihhZ2VudCkge1xuICB0aGlzLl9hZ2VudCA9IGFnZW50O1xufTtcblxuLy8gVGhpcyAnaGFjaycgbWV0aG9kIGlzIHJlcXVpcmVkIGZvciBzaXRlcyB0aGF0IGRvbid0IHVzZVxuLy8gJ2FjY2Vzc190b2tlbicgYXMgdGhlIG5hbWUgb2YgdGhlIGFjY2VzcyB0b2tlbiAoZm9yIHJlcXVlc3RzKS5cbi8vICggaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaWV0Zi1vYXV0aC12Mi0xNiNzZWN0aW9uLTcgKVxuLy8gaXQgaXNuJ3QgY2xlYXIgd2hhdCB0aGUgY29ycmVjdCB2YWx1ZSBzaG91bGQgYmUgYXRtLCBzbyBhbGxvd2luZ1xuLy8gZm9yIHNwZWNpZmljICh0ZW1wb3Jhcnk/KSBvdmVycmlkZSBmb3Igbm93LlxuZXhwb3J0cy5PQXV0aDIucHJvdG90eXBlLnNldEFjY2Vzc1Rva2VuTmFtZT0gZnVuY3Rpb24gKCBuYW1lICkge1xuICB0aGlzLl9hY2Nlc3NUb2tlbk5hbWU9IG5hbWU7XG59XG5cbi8vIFNldHMgdGhlIGF1dGhvcml6YXRpb24gbWV0aG9kIGZvciBBdXRob3JpemF0aW9uIGhlYWRlci5cbi8vIGUuZy4gQXV0aG9yaXphdGlvbjogQmVhcmVyIDx0b2tlbj4gICMgXCJCZWFyZXJcIiBpcyB0aGUgYXV0aG9yaXphdGlvbiBtZXRob2QuXG5leHBvcnRzLk9BdXRoMi5wcm90b3R5cGUuc2V0QXV0aE1ldGhvZCA9IGZ1bmN0aW9uICggYXV0aE1ldGhvZCApIHtcbiAgdGhpcy5fYXV0aE1ldGhvZCA9IGF1dGhNZXRob2Q7XG59O1xuXG5cbi8vIElmIHlvdSB1c2UgdGhlIE9BdXRoMiBleHBvc2VkICdnZXQnIG1ldGhvZCAoYW5kIGRvbid0IGNvbnN0cnVjdCB5b3VyIG93biBfcmVxdWVzdCBjYWxsIClcbi8vIHRoaXMgd2lsbCBzcGVjaWZ5IHdoZXRoZXIgdG8gdXNlIGFuICdBdXRob3JpemUnIGhlYWRlciBpbnN0ZWFkIG9mIHBhc3NpbmcgdGhlIGFjY2Vzc190b2tlbiBhcyBhIHF1ZXJ5IHBhcmFtZXRlclxuZXhwb3J0cy5PQXV0aDIucHJvdG90eXBlLnVzZUF1dGhvcml6YXRpb25IZWFkZXJmb3JHRVQgPSBmdW5jdGlvbih1c2VJdCkge1xuICB0aGlzLl91c2VBdXRob3JpemF0aW9uSGVhZGVyRm9yR0VUPSB1c2VJdDtcbn1cblxuZXhwb3J0cy5PQXV0aDIucHJvdG90eXBlLl9nZXRBY2Nlc3NUb2tlblVybD0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9iYXNlU2l0ZSArIHRoaXMuX2FjY2Vzc1Rva2VuVXJsOyAvKiArIFwiP1wiICsgcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHBhcmFtcyk7ICovXG59XG5cbi8vIEJ1aWxkIHRoZSBhdXRob3JpemF0aW9uIGhlYWRlci4gSW4gcGFydGljdWxhciwgYnVpbGQgdGhlIHBhcnQgYWZ0ZXIgdGhlIGNvbG9uLlxuLy8gZS5nLiBBdXRob3JpemF0aW9uOiBCZWFyZXIgPHRva2VuPiAgIyBCdWlsZCBcIkJlYXJlciA8dG9rZW4+XCJcbmV4cG9ydHMuT0F1dGgyLnByb3RvdHlwZS5idWlsZEF1dGhIZWFkZXI9IGZ1bmN0aW9uKHRva2VuKSB7XG4gIHJldHVybiB0aGlzLl9hdXRoTWV0aG9kICsgJyAnICsgdG9rZW47XG59O1xuXG5leHBvcnRzLk9BdXRoMi5wcm90b3R5cGUuX2Nob29zZUh0dHBMaWJyYXJ5PSBmdW5jdGlvbiggcGFyc2VkVXJsICkge1xuICB2YXIgaHR0cF9saWJyYXJ5PSBodHRwcztcbiAgLy8gQXMgdGhpcyBpcyBPQVV0aDIsIHdlICphc3N1bWUqIGh0dHBzIHVubGVzcyB0b2xkIGV4cGxpY2l0bHkgb3RoZXJ3aXNlLlxuICBpZiggcGFyc2VkVXJsLnByb3RvY29sICE9IFwiaHR0cHM6XCIgKSB7XG4gICAgaHR0cF9saWJyYXJ5PSBodHRwO1xuICB9XG4gIHJldHVybiBodHRwX2xpYnJhcnk7XG59O1xuXG5leHBvcnRzLk9BdXRoMi5wcm90b3R5cGUuX3JlcXVlc3Q9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBoZWFkZXJzLCBwb3N0X2JvZHksIGFjY2Vzc190b2tlbiwgY2FsbGJhY2spIHtcblxuICB2YXIgcGFyc2VkVXJsPSBVUkwucGFyc2UoIHVybCwgdHJ1ZSApO1xuICBpZiggcGFyc2VkVXJsLnByb3RvY29sID09IFwiaHR0cHM6XCIgJiYgIXBhcnNlZFVybC5wb3J0ICkge1xuICAgIHBhcnNlZFVybC5wb3J0PSA0NDM7XG4gIH1cblxuICB2YXIgaHR0cF9saWJyYXJ5PSB0aGlzLl9jaG9vc2VIdHRwTGlicmFyeSggcGFyc2VkVXJsICk7XG5cblxuICB2YXIgcmVhbEhlYWRlcnM9IHt9O1xuICBmb3IoIHZhciBrZXkgaW4gdGhpcy5fY3VzdG9tSGVhZGVycyApIHtcbiAgICByZWFsSGVhZGVyc1trZXldPSB0aGlzLl9jdXN0b21IZWFkZXJzW2tleV07XG4gIH1cbiAgaWYoIGhlYWRlcnMgKSB7XG4gICAgZm9yKHZhciBrZXkgaW4gaGVhZGVycykge1xuICAgICAgcmVhbEhlYWRlcnNba2V5XSA9IGhlYWRlcnNba2V5XTtcbiAgICB9XG4gIH1cbiAgcmVhbEhlYWRlcnNbJ0hvc3QnXT0gcGFyc2VkVXJsLmhvc3Q7XG5cbiAgaWYgKCFyZWFsSGVhZGVyc1snVXNlci1BZ2VudCddKSB7XG4gICAgcmVhbEhlYWRlcnNbJ1VzZXItQWdlbnQnXSA9ICdOb2RlLW9hdXRoJztcbiAgfVxuXG4gIGlmKCBwb3N0X2JvZHkgKSB7XG4gICAgICBpZiAoIEJ1ZmZlci5pc0J1ZmZlcihwb3N0X2JvZHkpICkge1xuICAgICAgICAgIHJlYWxIZWFkZXJzW1wiQ29udGVudC1MZW5ndGhcIl09IHBvc3RfYm9keS5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlYWxIZWFkZXJzW1wiQ29udGVudC1MZW5ndGhcIl09IEJ1ZmZlci5ieXRlTGVuZ3RoKHBvc3RfYm9keSk7XG4gICAgICB9XG4gIH0gZWxzZSB7XG4gICAgICByZWFsSGVhZGVyc1tcIkNvbnRlbnQtbGVuZ3RoXCJdPSAwO1xuICB9XG5cbiAgaWYoIGFjY2Vzc190b2tlbiAmJiAhKCdBdXRob3JpemF0aW9uJyBpbiByZWFsSGVhZGVycykpIHtcbiAgICBpZiggISBwYXJzZWRVcmwucXVlcnkgKSBwYXJzZWRVcmwucXVlcnk9IHt9O1xuICAgIHBhcnNlZFVybC5xdWVyeVt0aGlzLl9hY2Nlc3NUb2tlbk5hbWVdPSBhY2Nlc3NfdG9rZW47XG4gIH1cblxuICB2YXIgcXVlcnlTdHI9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShwYXJzZWRVcmwucXVlcnkpO1xuICBpZiggcXVlcnlTdHIgKSBxdWVyeVN0cj0gIFwiP1wiICsgcXVlcnlTdHI7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIGhvc3Q6cGFyc2VkVXJsLmhvc3RuYW1lLFxuICAgIHBvcnQ6IHBhcnNlZFVybC5wb3J0LFxuICAgIHBhdGg6IHBhcnNlZFVybC5wYXRobmFtZSArIHF1ZXJ5U3RyLFxuICAgIG1ldGhvZDogbWV0aG9kLFxuICAgIGhlYWRlcnM6IHJlYWxIZWFkZXJzXG4gIH07XG5cbiAgdGhpcy5fZXhlY3V0ZVJlcXVlc3QoIGh0dHBfbGlicmFyeSwgb3B0aW9ucywgcG9zdF9ib2R5LCBjYWxsYmFjayApO1xufVxuXG5leHBvcnRzLk9BdXRoMi5wcm90b3R5cGUuX2V4ZWN1dGVSZXF1ZXN0PSBmdW5jdGlvbiggaHR0cF9saWJyYXJ5LCBvcHRpb25zLCBwb3N0X2JvZHksIGNhbGxiYWNrICkge1xuICAvLyBTb21lIGhvc3RzICpjb3VnaCogZ29vZ2xlIGFwcGVhciB0byBjbG9zZSB0aGUgY29ubmVjdGlvbiBlYXJseSAvIHNlbmQgbm8gY29udGVudC1sZW5ndGggaGVhZGVyXG4gIC8vIGFsbG93IHRoaXMgYmVoYXZpb3VyLlxuICB2YXIgYWxsb3dFYXJseUNsb3NlPSBPQXV0aFV0aWxzLmlzQW5FYXJseUNsb3NlSG9zdChvcHRpb25zLmhvc3QpO1xuICB2YXIgY2FsbGJhY2tDYWxsZWQ9IGZhbHNlO1xuICBmdW5jdGlvbiBwYXNzQmFja0NvbnRyb2woIHJlc3BvbnNlLCByZXN1bHQgKSB7XG4gICAgaWYoIWNhbGxiYWNrQ2FsbGVkKSB7XG4gICAgICBjYWxsYmFja0NhbGxlZD10cnVlO1xuICAgICAgaWYoICEocmVzcG9uc2Uuc3RhdHVzQ29kZSA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzQ29kZSA8PSAyOTkpICYmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9IDMwMSkgJiYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT0gMzAyKSApIHtcbiAgICAgICAgY2FsbGJhY2soeyBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXNDb2RlLCBkYXRhOiByZXN1bHQgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQsIHJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcmVzdWx0PSBcIlwiO1xuXG4gIC8vc2V0IHRoZSBhZ2VudCBvbiB0aGUgcmVxdWVzdCBvcHRpb25zXG4gIGlmICh0aGlzLl9hZ2VudCkge1xuICAgIG9wdGlvbnMuYWdlbnQgPSB0aGlzLl9hZ2VudDtcbiAgfVxuXG4gIHZhciByZXF1ZXN0ID0gaHR0cF9saWJyYXJ5LnJlcXVlc3Qob3B0aW9ucyk7XG4gIHJlcXVlc3Qub24oJ3Jlc3BvbnNlJywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgcmVzcG9uc2Uub24oXCJkYXRhXCIsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgcmVzdWx0Kz0gY2h1bmtcbiAgICB9KTtcbiAgICByZXNwb25zZS5vbihcImNsb3NlXCIsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmKCBhbGxvd0Vhcmx5Q2xvc2UgKSB7XG4gICAgICAgIHBhc3NCYWNrQ29udHJvbCggcmVzcG9uc2UsIHJlc3VsdCApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJlc3BvbnNlLmFkZExpc3RlbmVyKFwiZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHBhc3NCYWNrQ29udHJvbCggcmVzcG9uc2UsIHJlc3VsdCApO1xuICAgIH0pO1xuICB9KTtcbiAgcmVxdWVzdC5vbignZXJyb3InLCBmdW5jdGlvbihlKSB7XG4gICAgY2FsbGJhY2tDYWxsZWQ9IHRydWU7XG4gICAgY2FsbGJhY2soZSk7XG4gIH0pO1xuXG4gIGlmKCAob3B0aW9ucy5tZXRob2QgPT0gJ1BPU1QnIHx8IG9wdGlvbnMubWV0aG9kID09ICdQVVQnKSAmJiBwb3N0X2JvZHkgKSB7XG4gICAgIHJlcXVlc3Qud3JpdGUocG9zdF9ib2R5KTtcbiAgfVxuICByZXF1ZXN0LmVuZCgpO1xufVxuXG5leHBvcnRzLk9BdXRoMi5wcm90b3R5cGUuZ2V0QXV0aG9yaXplVXJsPSBmdW5jdGlvbiggcGFyYW1zICkge1xuICB2YXIgcGFyYW1zPSBwYXJhbXMgfHwge307XG4gIHBhcmFtc1snY2xpZW50X2lkJ10gPSB0aGlzLl9jbGllbnRJZDtcbiAgcmV0dXJuIHRoaXMuX2Jhc2VTaXRlICsgdGhpcy5fYXV0aG9yaXplVXJsICsgXCI/XCIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkocGFyYW1zKTtcbn1cblxuZXhwb3J0cy5PQXV0aDIucHJvdG90eXBlLmdldE9BdXRoQWNjZXNzVG9rZW49IGZ1bmN0aW9uKGNvZGUsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgdmFyIHBhcmFtcz0gcGFyYW1zIHx8IHt9O1xuICBwYXJhbXNbJ2NsaWVudF9pZCddID0gdGhpcy5fY2xpZW50SWQ7XG4gIHBhcmFtc1snY2xpZW50X3NlY3JldCddID0gdGhpcy5fY2xpZW50U2VjcmV0O1xuICB2YXIgY29kZVBhcmFtID0gKHBhcmFtcy5ncmFudF90eXBlID09PSAncmVmcmVzaF90b2tlbicpID8gJ3JlZnJlc2hfdG9rZW4nIDogJ2NvZGUnO1xuICBwYXJhbXNbY29kZVBhcmFtXT0gY29kZTtcblxuICB2YXIgcG9zdF9kYXRhPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkoIHBhcmFtcyApO1xuICB2YXIgcG9zdF9oZWFkZXJzPSB7XG4gICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICB9O1xuXG5cbiAgdGhpcy5fcmVxdWVzdChcIlBPU1RcIiwgdGhpcy5fZ2V0QWNjZXNzVG9rZW5VcmwoKSwgcG9zdF9oZWFkZXJzLCBwb3N0X2RhdGEsIG51bGwsIGZ1bmN0aW9uKGVycm9yLCBkYXRhLCByZXNwb25zZSkge1xuICAgIGlmKCBlcnJvciApICBjYWxsYmFjayhlcnJvcik7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgcmVzdWx0cztcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEFzIG9mIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtb2F1dGgtdjItMDdcbiAgICAgICAgLy8gcmVzcG9uc2VzIHNob3VsZCBiZSBpbiBKU09OXG4gICAgICAgIHJlc3VsdHM9IEpTT04ucGFyc2UoIGRhdGEgKTtcbiAgICAgIH1cbiAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgLy8gLi4uLiBIb3dldmVyIGJvdGggRmFjZWJvb2sgKyBHaXRodWIgY3VycmVudGx5IHVzZSByZXYwNSBvZiB0aGUgc3BlY1xuICAgICAgICAvLyBhbmQgbmVpdGhlciBzZWVtIHRvIHNwZWNpZnkgYSBjb250ZW50LXR5cGUgY29ycmVjdGx5IGluIHRoZWlyIHJlc3BvbnNlIGhlYWRlcnMgOihcbiAgICAgICAgLy8gY2xpZW50cyBvZiB0aGVzZSBzZXJ2aWNlcyB3aWxsIHN1ZmZlciBhICptaW5vciogcGVyZm9ybWFuY2UgY29zdCBvZiB0aGUgZXhjZXB0aW9uXG4gICAgICAgIC8vIGJlaW5nIHRocm93blxuICAgICAgICByZXN1bHRzPSBxdWVyeXN0cmluZy5wYXJzZSggZGF0YSApO1xuICAgICAgfVxuICAgICAgdmFyIGFjY2Vzc190b2tlbj0gcmVzdWx0c1tcImFjY2Vzc190b2tlblwiXTtcbiAgICAgIHZhciByZWZyZXNoX3Rva2VuPSByZXN1bHRzW1wicmVmcmVzaF90b2tlblwiXTtcbiAgICAgIGRlbGV0ZSByZXN1bHRzW1wicmVmcmVzaF90b2tlblwiXTtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGFjY2Vzc190b2tlbiwgcmVmcmVzaF90b2tlbiwgcmVzdWx0cyk7IC8vIGNhbGxiYWNrIHJlc3VsdHMgPS09XG4gICAgfVxuICB9KTtcbn1cblxuLy8gRGVwcmVjYXRlZFxuZXhwb3J0cy5PQXV0aDIucHJvdG90eXBlLmdldFByb3RlY3RlZFJlc291cmNlPSBmdW5jdGlvbih1cmwsIGFjY2Vzc190b2tlbiwgY2FsbGJhY2spIHtcbiAgdGhpcy5fcmVxdWVzdChcIkdFVFwiLCB1cmwsIHt9LCBcIlwiLCBhY2Nlc3NfdG9rZW4sIGNhbGxiYWNrICk7XG59XG5cbmV4cG9ydHMuT0F1dGgyLnByb3RvdHlwZS5nZXQ9IGZ1bmN0aW9uKHVybCwgYWNjZXNzX3Rva2VuLCBjYWxsYmFjaykge1xuICBpZiggdGhpcy5fdXNlQXV0aG9yaXphdGlvbkhlYWRlckZvckdFVCApIHtcbiAgICB2YXIgaGVhZGVycz0geydBdXRob3JpemF0aW9uJzogdGhpcy5idWlsZEF1dGhIZWFkZXIoYWNjZXNzX3Rva2VuKSB9XG4gICAgYWNjZXNzX3Rva2VuPSBudWxsO1xuICB9XG4gIGVsc2Uge1xuICAgIGhlYWRlcnM9IHt9O1xuICB9XG4gIHRoaXMuX3JlcXVlc3QoXCJHRVRcIiwgdXJsLCBoZWFkZXJzLCBcIlwiLCBhY2Nlc3NfdG9rZW4sIGNhbGxiYWNrICk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzd29yZENsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9wYXNzd29yZCdcbiAqXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBQYXNzd29yZENsaWVudFxuICovXG5mdW5jdGlvbiBQYXNzd29yZENsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdXNlci1mcmllbmRseSBzdGF0ZW1lbnRzIGdvdmVybmluZyB0aGUgc3lzdGVtJ3MgcGFzc3dvcmQgcG9saWN5LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRQYXNzd29yZFBvbGljeVxuICAgICAqIEBtZW1iZXJPZiBQYXNzd29yZENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHRvIHNlbmQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5oYXNPbGRQYXNzd29yZD1mYWxzZV0gV2hldGhlciBvciBub3QgdGhlIHVzZXIgd2lsbCBiZSByZXF1aXJlZCB0byBlbnRlciB0aGVpciBjdXJyZW50XG4gICAgICogICAgIHBhc3N3b3JkLiBVc2UgZmFsc2UgKHRoZSBkZWZhdWx0KSBpZiB0aGlzIGlzIGEgbmV3IHVzZXIgb3IgaWYgYW4gYWRtaW5pc3RyYXRvciBpcyBmb3JjaWJseSBjaGFuZ2luZyBhbm90aGVyXG4gICAgICogICAgIHVzZXIncyBwYXNzd29yZC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcGFzc3dvcmQgcG9saWN5IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwYXNzd29yZCBwb2xpY3kgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0UGFzc3dvcmRQb2xpY3kgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3Bhc3N3b3JkL3BvbGljeScpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIGhhc09sZFBhc3N3b3JkOiBvcHRzLmhhc09sZFBhc3N3b3JkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBlcm1pc3Npb25zQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL3Blcm1pc3Npb25zJ1xuICpcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIFBlcm1pc3Npb25zQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIFBlcm1pc3Npb25zQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgcGVybWlzc2lvbnMgdGhhdCBhcmUgcHJlc2VudCBpbiB0aGUgSklSQSBpbnN0YW5jZVxuICAgICAqIC0gR2xvYmFsLCBQcm9qZWN0IGFuZCB0aGUgZ2xvYmFsIG9uZXMgYWRkZWQgYnkgcGx1Z2luc1xuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBbGxQZXJtaXNzaW9uc1xuICAgICAqIEBtZW1iZXJPZiBQZXJtaXNzaW9uc0NsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwZXJtaXNzaW9ucyBoYXZlIGJlZW4gcmV0dXJuZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcGVybWlzc2lvbnMgaGF2ZSBiZWVuIHJldHVybmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0QWxsUGVybWlzc2lvbnMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3Blcm1pc3Npb25zJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBQZXJtaXNzaW9uU2NoZW1lQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL3Blcm1pc3Npb25zY2hlbWUnXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgUGVybWlzc2lvblNjaGVtZUNsaWVudFxuICovXG5mdW5jdGlvbiBQZXJtaXNzaW9uU2NoZW1lQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgYWxsIHBlcm1pc3Npb24gc2NoZW1lcy5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQgb25seSBzaG9ydGVuZWQgYmVhbnMgYXJlIHJldHVybmVkLlxuICAgICAqIElmIHlvdSB3YW50IHRvIGluY2x1ZGUgcGVybWlzc2lvbnMgb2YgYWxsIHRoZSBzY2hlbWVzLCB0aGVuIHNwZWNpZnkgdGhlIHBlcm1pc3Npb25zIGV4cGFuZCBwYXJhbWV0ZXIuXG4gICAgICogUGVybWlzc2lvbnMgd2lsbCBiZSBpbmNsdWRlZCBhbHNvIGlmIHlvdSBzcGVjaWZ5IGFueSBvdGhlciBleHBhbmQgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBbGxQZXJtaXNzaW9uU2NoZW1lc1xuICAgICAqIEBtZW1iZXJPZiBQZXJtaXNzaW9uU2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IG9wdHMuZXhwYW5kXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNjaGVtZXMgaGF2ZSBiZWVuIHJldHVybmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHNjaGVtZXMgaGF2ZSBiZWVuIHJldHVybmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0QWxsUGVybWlzc2lvblNjaGVtZXMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGV4cGFuZCA9IG9wdHMuZXhwYW5kXG4gICAgICAgIGlmIChvcHRzLmV4cGFuZCAmJiBvcHRzLmV4cGFuZCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBleHBhbmQgPSBvcHRzLmV4cGFuZC5qb2luKCcsJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3Blcm1pc3Npb25zY2hlbWUnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBleHBhbmQ6IGV4cGFuZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBwZXJtaXNzaW9uIHNjaGVtZS4gVGhpcyBtZXRob2QgY2FuIGNyZWF0ZSBzY2hlbWVzIHdpdGggYSBkZWZpbmVkIHBlcm1pc3Npb24gc2V0LCBvciB3aXRob3V0LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVQZXJtaXNzaW9uU2NoZW1lXG4gICAgICogQG1lbWJlck9mIFBlcm1pc3Npb25TY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy5zY2hlbWUgU2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5hdGxhc3NpYW4uY29tL2Nsb3VkL2ppcmEvcGxhdGZvcm0vcmVzdC8jYXBpLWFwaS0yLXBlcm1pc3Npb25zY2hlbWUtcG9zdH1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc2NoZW1lIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgc2NoZW1lIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICovXG4gICAgdGhpcy5jcmVhdGVQZXJtaXNzaW9uU2NoZW1lID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9wZXJtaXNzaW9uc2NoZW1lJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiBvcHRzLnNjaGVtZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIFBlcm1pc3Npb25TY2hlbWUuIFRoaXMgcmVzb3VyY2UgY2Fubm90IGJlIGFjY2Vzc2VkIGFub255bW91c2x5LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRQZXJtaXNzaW9uU2NoZW1lXG4gICAgICogQG1lbWJlck9mIFBlcm1pc3Npb25TY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLnNjaGVtZUlkIFRoZSBpZCBvZiB0aGUgc2NoZW1lIHRvIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmV4cGFuZCBUaGUgZmllbGRzIHRvIGJlIGV4cGFuZGVkLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBzY2hlbWUgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHNjaGVtZSBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRQZXJtaXNzaW9uU2NoZW1lID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBleHBhbmQgPSBvcHRzLmV4cGFuZFxuICAgICAgICBpZiAob3B0cy5leHBhbmQgJiYgb3B0cy5leHBhbmQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgZXhwYW5kID0gb3B0cy5leHBhbmQuam9pbignLCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9wZXJtaXNzaW9uc2NoZW1lLycgKyBvcHRzLnNjaGVtZUlkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBleHBhbmQ6IGV4cGFuZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGEgcGVybWlzc2lvbiBzY2hlbWUuXG4gICAgICogXG4gICAgICogSWYgdGhlIHBlcm1pc3Npb25zIGxpc3QgaXMgcHJlc2VudCB0aGVuIGl0IHdpbGwgYmUgc2V0IGluIHRoZSBwZXJtaXNzaW9uIHNjaGVtZSxcbiAgICAgKiB3aGljaCBiYXNpY2FsbHkgbWVhbnMgaXQgd2lsbCBvdmVyd3JpdGUgYW55IHBlcm1pc3Npb24gZ3JhbnRzIHRoYXQgZXhpc3RlZCBpbiB0aGUgcGVybWlzc2lvbiBzY2hlbWUuXG4gICAgICogU2VuZGluZyBhbiBlbXB0eSBsaXN0IHdpbGwgcmVtb3ZlIGFsbCBwZXJtaXNzaW9uIGdyYW50cyBmcm9tIHRoZSBwZXJtaXNzaW9uIHNjaGVtZS5cbiAgICAgKiBcbiAgICAgKiBUbyB1cGRhdGUganVzdCB0aGUgbmFtZSBhbmQgZGVzY3JpcHRpb24sIGRvIG5vdCBzZW5kIHBlcm1pc3Npb25zIGxpc3QgYXQgYWxsLlxuICAgICAqIFRvIGFkZCBvciByZW1vdmUgYSBzaW5nbGUgcGVybWlzc2lvbiBncmFudCBpbnN0ZWFkIG9mIHVwZGF0aW5nIHRoZSB3aG9sZSBsaXN0XG4gICAgICogYXQgb25jZSB1c2UgdGhlIHtzY2hlbWVJZH0vcGVybWlzc2lvbi8gcmVzb3VyY2UuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGVkaXRQZXJtaXNzaW9uU2NoZW1lXG4gICAgICogQG1lbWJlck9mIFBlcm1pc3Npb25TY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLnNjaGVtZUlkIFRoZSBpZCBvZiB0aGUgc2NoZW1lIHRvIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSBvcHRzLnNjaGVtZSBUaGUgYm9keSBvZiB0aGUgc2NoZW1lIHRvIGVkaXQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHVzZXIgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHVzZXIgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqL1xuICAgIHRoaXMuZWRpdFBlcm1pc3Npb25TY2hlbWUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3Blcm1pc3Npb25zY2hlbWUvJyArIG9wdHMuc2NoZW1lSWQpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiBvcHRzLnNjaGVtZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIFBlcm1pc3Npb24gU2NoZW1lLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBkZWxldGVQZXJtaXNzaW9uU2NoZW1lXG4gICAgICogQG1lbWJlck9mIFBlcm1pc3Npb25TY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLnNjaGVtZUlkIFRoZSBuYW1lIG9mIHRoZSBzY2hlbWUgdG8gZGVsZXRlLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBzY2hlbWUgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzY2hlbWUgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZVBlcm1pc3Npb25TY2hlbWUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3Blcm1pc3Npb25zY2hlbWUvJyArIG9wdHMuc2NoZW1lSWQpLFxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnUGVybWlzc2lvbiBTY2hlbWUgcmVtb3ZlZC4nKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgcGVybWlzc2lvbiBncmFudHMgb2YgdGhlIGdpdmVuIHBlcm1pc3Npb24gc2NoZW1lLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRQZXJtaXNzaW9uU2NoZW1lR3JhbnRzXG4gICAgICogQG1lbWJlck9mIFBlcm1pc3Npb25TY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLnNjaGVtZUlkIFRoZSBpZCBvZiB0aGUgc2NoZW1lIHRvIHdoaWNoIHRoZSBwZXJtaXNzaW9uIGdyYW50IGJlbG9uZ3MuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMuZXhwYW5kIFRoZSBmaWVsZHMgdG8gYmUgZXhwYW5kZWQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNjaGVtZSBncmFudHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzY2hlbWUgZ3JhbnRzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRQZXJtaXNzaW9uU2NoZW1lR3JhbnRzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBleHBhbmQgPSBvcHRzLmV4cGFuZFxuICAgICAgICBpZiAob3B0cy5leHBhbmQgJiYgb3B0cy5leHBhbmQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgZXhwYW5kID0gb3B0cy5leHBhbmQuam9pbignLCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9wZXJtaXNzaW9uc2NoZW1lLycgKyBvcHRzLnNjaGVtZUlkICsgJy9wZXJtaXNzaW9uJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgZXhwYW5kOiBleHBhbmRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHBlcm1pc3Npb24gZ3JhbnQgaW4gYSBwZXJtaXNzaW9uIHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3JlYXRlUGVybWlzc2lvbkdyYW50SW5TY2hlbWVcbiAgICAgKiBAbWVtYmVyT2YgUGVybWlzc2lvblNjaGVtZUNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLnNjaGVtZUlkIFRoZSBpZCBvZiB0aGUgc2NoZW1lIHRvIHdoaWNoIHRoZSBwZXJtaXNzaW9uIGdyYW50IGJlbG9uZ3MuXG4gICAgICogQHBhcmFtIG9wdHMuZ3JhbnQgU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9zb2Z0d2FyZS9qaXJhL2RvY3MvYXBpL1JFU1QvNy42LjEvI2FwaS8yL3Blcm1pc3Npb25zY2hlbWUtY3JlYXRlUGVybWlzc2lvbkdyYW50fVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwZXJtaXNzaW9uIGdyYW50IGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcGVybWlzc2lvbiBncmFudCBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlUGVybWlzc2lvbkdyYW50SW5TY2hlbWUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3Blcm1pc3Npb25zY2hlbWUvJyArIG9wdHMuc2NoZW1lSWQgKyAnL3Blcm1pc3Npb24nKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMuZ3JhbnRcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgcGVybWlzc2lvbiBncmFudCBmcm9tIGEgcGVybWlzc2lvbiBzY2hlbWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGRlbGV0ZVBlcm1pc3Npb25HcmFudEZyb21TY2hlbWVcbiAgICAgKiBAbWVtYmVyT2YgUGVybWlzc2lvblNjaGVtZUNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIG9wdHMuc2NoZW1lSWQgVGhlIG5hbWUgb2YgdGhlIHNjaGVtZSB0byBkZWxldGUuXG4gICAgICogQHBhcmFtIG9wdHMucGVybWlzc2lvbklkIFRoZSBpZCBvZiB0aGUgcGVybWlzc2lvbiB0byBkZWxldGUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNjaGVtZSBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHNjaGVtZSBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlUGVybWlzc2lvbkdyYW50RnJvbVNjaGVtZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvcGVybWlzc2lvbnNjaGVtZS8nICsgb3B0cy5zY2hlbWVJZCArICcvcGVybWlzc2lvbi8nICsgb3B0cy5wZXJtaXNzaW9uSWQpLFxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnUGVybWlzc2lvbiByZW1vdmVkIGZyb20gc2NoZW1lLicpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcGVybWlzc2lvbiBncmFudCBpZGVudGlmaWVkIGJ5IHRoZSBnaXZlbiBpZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0UGVybWlzc2lvblNjaGVtZUdyYW50QnlJZFxuICAgICAqIEBtZW1iZXJPZiBQZXJtaXNzaW9uU2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy5zY2hlbWVJZCBUaGUgaWQgb2YgdGhlIHNjaGVtZSB0byB3aGljaCB0aGUgcGVybWlzc2lvbiBncmFudCBiZWxvbmdzLlxuICAgICAqIEBwYXJhbSBvcHRzLnBlcm1pc3Npb25JZCBUaGUgaWQgb2YgdGhlIHBlcm1pc3Npb24gdG8gZmV0Y2guXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMuZXhwYW5kIFRoZSBmaWVsZHMgdG8gYmUgZXhwYW5kZWQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNjaGVtZSBncmFudHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzY2hlbWUgZ3JhbnRzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRQZXJtaXNzaW9uU2NoZW1lR3JhbnRCeUlkID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBleHBhbmQgPSBvcHRzLmV4cGFuZFxuICAgICAgICBpZiAob3B0cy5leHBhbmQgJiYgb3B0cy5leHBhbmQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgZXhwYW5kID0gb3B0cy5leHBhbmQuam9pbignLCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9wZXJtaXNzaW9uc2NoZW1lLycgKyBvcHRzLnNjaGVtZUlkICsgJy9wZXJtaXNzaW9uLycgKyBvcHRzLnBlcm1pc3Npb25JZCksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgZXhwYW5kOiBleHBhbmRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByaW9yaXR5Q2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL3ByaW9yaXR5J1xuICpcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIFByaW9yaXR5Q2xpZW50XG4gKi9cbmZ1bmN0aW9uIFByaW9yaXR5Q2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgYWxsIHByaW9yaXRpZXMgdmlzaWJsZSB0byB0aGUgdXNlclxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBbGxQcmlvcml0aWVzXG4gICAgICogQG1lbWJlck9mIFByaW9yaXR5Q2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIElnbm9yZWRcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcHJpb3JpdGllcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHByaW9yaXRpZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldEFsbFByaW9yaXRpZXMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3ByaW9yaXR5JyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBmdWxsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwcmlvcml0eSB0aGF0IGhhcyB0aGUgZ2l2ZW4gaWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFByaW9yaXR5XG4gICAgICogQG1lbWJlck9mIFByaW9yaXR5Q2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIG9wdHMucHJpb3JpdHlJZCBBIFN0cmluZyBjb250YWluaW5nIGEgcHJpb3JpdHkgaWRcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcHJpb3JpdHkgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHByaW9yaXR5IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFByaW9yaXR5ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9wcmlvcml0eS8nICsgb3B0cy5wcmlvcml0eUlkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9qZWN0Q2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL3Byb2plY3QnXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBQcm9qZWN0Q2xpZW50XG4gKi9cbmZ1bmN0aW9uIFByb2plY3RDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBwcm9qZWN0cyB3aGljaCBhcmUgdmlzaWJsZSBmb3IgdGhlIGN1cnJlbnRseSBsb2dnZWQgaW4gdXNlci4gSWYgbm8gdXNlciBpcyBsb2dnZWQgaW4sIGl0IHJldHVybnMgdGhlXG4gICAgICogbGlzdCBvZiBwcm9qZWN0cyB0aGF0IGFyZSB2aXNpYmxlIHdoZW4gdXNpbmcgYW5vbnltb3VzIGFjY2Vzcy5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0QWxsUHJvamVjdHNcbiAgICAgKiBAbWVtYmVyT2YgUHJvamVjdENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwcm9qZWN0cyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHByb2plY3RzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRBbGxQcm9qZWN0cyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnJywgJ0dFVCcpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgcHJvamVjdFxuICAgICAqXG4gICAgICogQG1ldGhvZCBkZWxldGVQcm9qZWN0XG4gICAgICogQG1lbWJlck9mIFByb2plY3RDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy5wcm9qZWN0SWRPcktleSBUaGUgcHJvamVjdCBpZCBvciBwcm9qZWN0IGtleVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwcm9qZWN0IGhhcyBiZWVuIGRlbGV0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcHJvamVjdCBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlUHJvamVjdCA9IGZ1bmN0aW9uKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcnLCAnREVMRVRFJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdQcm9qZWN0IERlbGV0ZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHByb2plY3QuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVByb2plY3RcbiAgICAgKiBAbWVtYmVyT2YgUHJvamVjdENsaWVudCNcbiAgICAgKiBAcGFyYW0gcHJvamVjdCBUaGUgcHJvamVjdCBwcm9wZXJ0aWVzLiBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2FwaS8yL3Byb2plY3R9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHByb2plY3QgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwcm9qZWN0IGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICovXG4gICAgdGhpcy5jcmVhdGVQcm9qZWN0ID0gZnVuY3Rpb24gKHByb2plY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9wcm9qZWN0JyksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBib2R5OiBwcm9qZWN0XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgcHJvamVjdCBwcm9wZXJ0ZXMuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFByb2plY3RQcm9wZXJ0aWVzXG4gICAgICogQG1lbWJlck9mIFByb2plY3RDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgT3B0aW9uc1xuICAgICAqIEBwYXJhbSBvcHRzLnByb2plY3RJZE9yS2V5IFRoZSBwcm9qZWN0IGlkIG9yIHByb2plY3Qga2V5XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gcHJvcGVydGllcyBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiBwcm9wZXJ0aWVzIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFByb2plY3RQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvcHJvcGVydGllcycsICdHRVQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuXG5cblxuICAgIC8qKlxuICAgICAqIENvbnRhaW5zIGEgZnVsbCByZXByZXNlbnRhdGlvbiBvZiBhIHByb2plY3QgaW4gSlNPTiBmb3JtYXQuXG4gICAgICpcbiAgICAgKiBBbGwgcHJvamVjdCBrZXlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvamVjdCB3aWxsIG9ubHkgYmUgcmV0dXJuZWQgaWYgZXhwYW5kPXByb2plY3RLZXlzLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRQcm9qZWN0XG4gICAgICogQG1lbWJlck9mIFByb2plY3RDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy5wcm9qZWN0SWRPcktleSBUaGUgcHJvamVjdCBpZCBvciBwcm9qZWN0IGtleVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwcm9qZWN0IGlzIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwcm9qZWN0IGlzIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFByb2plY3QgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJycsICdHRVQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnRhaW5zIGEgZnVsbCByZXByZXNlbnRhdGlvbiBvZiBhIHRoZSBzcGVjaWZpZWQgcHJvamVjdCdzIGNvbXBvbmVudHMuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldENvbXBvbmVudHNcbiAgICAgKiBAbWVtYmVyT2YgUHJvamVjdENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLnByb2plY3RJZE9yS2V5IFRoZSBwcm9qZWN0IGlkIG9yIHByb2plY3Qga2V5XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudHMgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBjb21wb25lbnRzIGFyZSByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRDb21wb25lbnRzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvY29tcG9uZW50cycsICdHRVQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgaXNzdWUgdHlwZXMgd2l0aCB2YWxpZCBzdGF0dXMgdmFsdWVzIGZvciBhIHByb2plY3RcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0U3RhdHVzZXNcbiAgICAgKiBAbWVtYmVyT2YgUHJvamVjdENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLnByb2plY3RJZE9yS2V5IFRoZSBwcm9qZWN0IGlkIG9yIHByb2plY3Qga2V5XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHN0YXR1c2VzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgc3RhdHVzZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFN0YXR1c2VzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvc3RhdHVzZXMnLCAnR0VUJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb250YWlucyBhIGZ1bGwgcmVwcmVzZW50YXRpb24gb2YgYSB0aGUgc3BlY2lmaWVkIHByb2plY3QncyB2ZXJzaW9ucy5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0VmVyc2lvbnNcbiAgICAgKiBAbWVtYmVyT2YgUHJvamVjdENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLnByb2plY3RJZE9yS2V5IFRoZSBwcm9qZWN0IGlkIG9yIHByb2plY3Qga2V5XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHZlcnNpb25zIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgdmVyc2lvbnMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFZlcnNpb25zID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvdmVyc2lvbnMnLCAnR0VUJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb250YWlucyBhIGxpc3Qgb2Ygcm9sZXMgaW4gdGhpcyBwcm9qZWN0IHdpdGggbGlua3MgdG8gZnVsbCBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRSb2xlc1xuICAgICAqIEBtZW1iZXJPZiBQcm9qZWN0Q2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMucHJvamVjdElkT3JLZXkgVGhlIHByb2plY3QgaWQgb3IgcHJvamVjdCBrZXlcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcm9sZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSByb2xlcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0Um9sZXMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9yb2xlJywgJ0dFVCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGV0YWlscyBvbiBhIGdpdmVuIHByb2plY3Qgcm9sZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0Um9sZVxuICAgICAqIEBtZW1iZXJPZiBQcm9qZWN0Q2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMucHJvamVjdElkT3JLZXkgVGhlIHByb2plY3QgaWQgb3IgcHJvamVjdCBrZXlcbiAgICAgKiBAcGFyYW0gb3B0cy5yb2xlSWQgVGhlIGlkIG9mIHRoZSByb2xlIHRvIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSByb2xlcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHJvbGVzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRSb2xlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvcm9sZS8nICsgb3B0cy5yb2xlSWQsICdHRVQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgYSBwcm9qZWN0IHJvbGUgdG8gY29udGFpbiB0aGUgc2VudCBhY3RvcnMuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVJvbGVcbiAgICAgKiBAbWVtYmVyT2YgUHJvamVjdENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLnByb2plY3RJZE9yS2V5IFRoZSBwcm9qZWN0IGlkIG9yIHByb2plY3Qga2V5XG4gICAgICogQHBhcmFtIG9wdHMucm9sZUlkIFRoZSBpZCBvZiB0aGUgcm9sZSB0byByZXRyaWV2ZS5cbiAgICAgKiBAcGFyYW0gb3B0cy5uZXdSb2xlIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMTA4fVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSByb2xlcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHJvbGVzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy51cGRhdGVSb2xlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvcm9sZS8nICsgb3B0cy5yb2xlSWQsICdQVVQnLCBvcHRzLm5ld1JvbGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkIGFuIGFjdG9yIHRvIGEgcHJvamVjdCByb2xlLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBhZGRUb1JvbGVcbiAgICAgKiBAbWVtYmVyT2YgUHJvamVjdENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLnByb2plY3RJZE9yS2V5IFRoZSBwcm9qZWN0IGlkIG9yIHByb2plY3Qga2V5XG4gICAgICogQHBhcmFtIG9wdHMucm9sZUlkIFRoZSBpZCBvZiB0aGUgcm9sZSB0byByZXRyaWV2ZS5cbiAgICAgKiBAcGFyYW0gb3B0cy5uZXdSb2xlIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMTM0fVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSByb2xlcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHJvbGVzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5hZGRUb1JvbGUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9yb2xlLycgKyBvcHRzLnJvbGVJZCwgJ1BPU1QnLCBvcHRzLm5ld1JvbGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQnVpbGQgb3V0IHRoZSByZXF1ZXN0IG9wdGlvbnMgbmVjZXNzYXJ5IHRvIG1ha2UgYSBwYXJ0aWN1bGFyIEFQSSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJ1aWxkUmVxdWVzdE9wdGlvbnNcbiAgICAgKiBAbWVtYmVyT2YgUHJvamVjdENsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnByb2plY3RJZE9yS2V5IFRoZSBpZCBvZiB0aGUgcHJvamVjdCB0byB1c2UgaW4gdGhlIHBhdGguXG4gICAgICogQHBhcmFtIHtBcnJheX0gW29wdHMuZmllbGRzXSBUaGUgZmllbGRzIHRvIGluY2x1ZGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbb3B0cy5leHBhbmRdIFRoZSBmaWVsZHMgdG8gZXhwYW5kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIGVuZHBvaW50IGZvbGxvd2luZyAvcHJvamVjdC97aWR9XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBUaGUgcmVxdWVzdCBtZXRob2QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtib2R5XSBUaGUgcmVxdWVzdCBib2R5LCBpZiBhbnkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtxc10gVGhlIHF1ZXJ5c3RyaW5nLCBpZiBhbnkuICBvcHRzLmV4cGFuZCBhbmQgb3B0cy5maWVsZHMgYXJyYXlzIHdpbGwgYmUgYXV0b21hZ2ljYWxseSBhZGRlZC5cbiAgICAgKiBAcmV0dXJucyB7e3VyaTogc3RyaW5nLCBtZXRob2Q6IHN0cmluZywgYm9keTogT2JqZWN0LCBxczogT2JqZWN0LCBmb2xsb3dBbGxSZWRpcmVjdHM6IGJvb2xlYW4sIGpzb246IGJvb2xlYW59fVxuICAgICAqL1xuICAgIHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRzLCBwYXRoLCBtZXRob2QsIGJvZHksIHFzKSB7XG4gICAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gICAgICAgIHZhciBiYXNlUGF0aCA9IG9wdHMucHJvamVjdElkT3JLZXkgPyAnL3Byb2plY3QvJyArIG9wdHMucHJvamVjdElkT3JLZXkgOiAnL3Byb2plY3QnO1xuXG4gICAgICAgIGlmICghcXMpIHFzID0ge307XG4gICAgICAgIGlmICghYm9keSkgYm9keSA9IHt9O1xuXG4gICAgICAgIGlmIChvcHRzLmZpZWxkcykge1xuICAgICAgICAgICAgcXMuZmllbGRzID0gJyc7XG4gICAgICAgICAgICBvcHRzLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICAgIHFzLmZpZWxkcyArPSBmaWVsZCArICcsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBxcy5maWVsZHMgPSBxcy5maWVsZHMuc2xpY2UoMCwgLTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdHMuZXhwYW5kKSB7XG4gICAgICAgICAgICBxcy5leHBhbmQgPSAnJztcbiAgICAgICAgICAgIG9wdHMuZXhwYW5kLmZvckVhY2goZnVuY3Rpb24gKGV4KSB7XG4gICAgICAgICAgICAgICAgcXMuZXhwYW5kICs9IGV4ICsgJywnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHFzLmV4cGFuZCA9IHFzLmV4cGFuZC5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoYmFzZVBhdGggKyBwYXRoKSxcbiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgIHFzOiBxcyxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGpzb246IHRydWVcbiAgICAgICAgfTtcbiAgICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvamVjdENhdGVnb3J5Q2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL3Byb2plY3RDYXRlZ29yeSdcbiAqXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBQcm9qZWN0Q2F0ZWdvcnlDbGllbnRcbiAqL1xuZnVuY3Rpb24gUHJvamVjdENhdGVnb3J5Q2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgYWxsIHByb2plY3RDYXRlZ29yaWVzIHZpc2libGUgdG8gdGhlIHVzZXJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0QWxsUHJvamVjdENhdGVnb3JpZXNcbiAgICAgKiBAbWVtYmVyT2YgUHJvamVjdENhdGVnb3J5Q2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIElnbm9yZWRcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc3RhdHVzQ2F0ZWdvcmllcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHN0YXR1c0NhdGVnb3JpZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldEFsbFByb2plY3RDYXRlZ29yaWVzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9wcm9qZWN0Q2F0ZWdvcnknKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCBhIGZ1bGwgcmVwcmVzZW50YXRpb24gb2YgdGhlIHByb2plY3RDYXRlZ29yeSB0aGF0IGhhcyB0aGUgZ2l2ZW4gaWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFByb2plY3RDYXRlZ29yeVxuICAgICAqIEBtZW1iZXJPZiBQcm9qZWN0Q2F0ZWdvcnlDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy5wcm9qZWN0Q2F0ZWdvcnlJZCBBIFN0cmluZyBjb250YWluaW5nIGEgcHJvamVjdENhdGVnb3J5IGlkXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHByb2plY3RDYXRlZ29yeSBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcHJvamVjdENhdGVnb3J5IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFByb2plY3RDYXRlZ29yeSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvcHJvamVjdENhdGVnb3J5LycgKyBvcHRzLnByb2plY3RDYXRlZ29yeUlkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb2plY3RWYWxpZGF0ZUNsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9wcm9qZWN0dmFsaWRhdGUnXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgUHJvamVjdFZhbGlkYXRlQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIFByb2plY3RWYWxpZGF0ZUNsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlcyBhIHByb2plY3Qga2V5LiAgVGhpcyBlbmRwb2ludCBpcyBhIGxpdHRsZSB3b25reSwgYXMgaXQgcmV0dXJucyBhIGxpc3Qgb2YgZXJyb3JzIGFzIGEgdmFsaWQgcmVzcG9uc2U7XG4gICAgICogZXZlbiBpZiB0aGUga2V5IGlzIGludmFsaWQsIGl0IHN0aWxsIHJldHVybnMgYSAyMDAgcmVzcG9uc2UuXG4gICAgICogU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmUyOTd9XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHZhbGlkYXRlUHJvamVjdEtleVxuICAgICAqIEBtZW1iZXJPZiBQcm9qZWN0VmFsaWRhdGVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy5wcm9qZWN0S2V5IFRoZSBrZXkgb2YgdGhlIHByb2plY3QuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGtleSBoYXMgYmVlbiB2YWxpZGF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUga2V5IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLnZhbGlkYXRlUHJvamVjdEtleSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvcHJvamVjdHZhbGlkYXRlL2tleScpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIGtleTogb3B0cy5wcm9qZWN0S2V5XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlaW5kZXhDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvcmVpbmRleCdcbiAqXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBSZWluZGV4Q2xpZW50XG4gKi9cbmZ1bmN0aW9uIFJlaW5kZXhDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBLaWNrcyBvZmYgYSByZWluZGV4LiBOZWVkIEFkbWluIHBlcm1pc3Npb25zIHRvIHBlcmZvcm0gdGhpcyByZWluZGV4LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBkb1JlaW5kZXhcbiAgICAgKiBAbWVtYmVyT2YgUmVpbmRleENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy50eXBlXSBDYXNlIGluc2Vuc2l0aXZlIFN0cmluZyBpbmRpY2F0aW5nIHR5cGUgb2YgcmVpbmRleC4gSWYgb21pdHRlZCwgdGhlbiBkZWZhdWx0cyB0b1xuICAgICAqICAgICBCQUNLR1JPVU5EX1BSRUZFUlJFRFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5kZXhDb21tZW50cz1mYWxzZV0gSW5kaWNhdGVzIHRoYXQgY29tbWVudHMgc2hvdWxkIGFsc28gYmUgcmVpbmRleGVkLiBOb3QgcmVsZXZhbnQgZm9yXG4gICAgICogICAgIGZvcmVncm91bmQgcmVpbmRleCwgd2hlcmUgY29tbWVudHMgYXJlIGFsd2F5cyByZWluZGV4ZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmRleENoYW5nZUhpc3Rvcnk9ZmFsc2VdIEluZGljYXRlcyB0aGF0IGNoYW5nZUhpc3Rvcnkgc2hvdWxkIGFsc28gYmUgcmVpbmRleGVkLiBOb3RcbiAgICAgKiAgICAgcmVsZXZhbnQgZm9yIGZvcmVncm91bmQgcmVpbmRleCwgd2hlcmUgY2hhbmdlSGlzdG9yeSBpcyBhbHdheXMgcmVpbmRleGVkLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSByZWluZGV4IGhhcyBiZWVuIHN0YXJ0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcmVpbmRleCBoYXMgYmVlbiBzdGFydGVkLlxuICAgICAqL1xuICAgIHRoaXMuZG9SZWluZGV4ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9yZWluZGV4JyksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIHR5cGU6IG9wdHMudHlwZSxcbiAgICAgICAgICAgICAgICBpbmRleENvbW1lbnRzOiBvcHRzLmluZGV4Q29tbWVudHMsXG4gICAgICAgICAgICAgICAgaW5kZXhDaGFuZ2VIaXN0b3J5OiBvcHRzLmluZGV4Q2hhbmdlSGlzdG9yeVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGluZm9ybWF0aW9uIG9uIHRoZSBzeXN0ZW0gcmVpbmRleGVzLiBJZiBhIHJlaW5kZXggaXMgY3VycmVudGx5IHRha2luZyBwbGFjZSB0aGVuIGluZm9ybWF0aW9uIGFib3V0IHRoaXNcbiAgICAgKiByZWluZGV4IGlzIHJldHVybmVkLiBJZiB0aGVyZSBpcyBubyBhY3RpdmUgaW5kZXggdGFzaywgdGhlbiByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsYXRlc3QgcmVpbmRleCB0YXNrXG4gICAgICogcnVuLCBvdGhlcndpc2UgcmV0dXJucyBhIDQwNCBpbmRpY2F0aW5nIHRoYXQgbm8gcmVpbmRleCBoYXMgdGFrZW4gcGxhY2UuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFJlaW5kZXhcbiAgICAgKiBAbWVtYmVyT2YgUmVpbmRleENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBbb3B0cy50YXNrSWRdIFRoZSBpZCBvZiBhbiBpbmRleGluZyB0YXNrIHlvdSB3aXNoIHRvIG9idGFpbiBkZXRhaWxzIG9uLiBJZiBvbWl0dGVkLCB0aGVuIGRlZmF1bHRzIHRvIHRoZVxuICAgICAqICAgICBzdGFuZGFyZCBiZWhhdmlvdXIgYW5kIHJldHVybnMgaW5mb3JtYXRpb24gb24gdGhlIGFjdGl2ZSByZWluZGV4IHRhc2ssIG9yIHRoZSBsYXN0IHRhc2sgdG8gcnVuIGlmIG5vIHJlaW5kZXhcbiAgICAgKiAgICAgaXMgdGFraW5nIHBsYWNlLiAuIElmIHRoZXJlIGlzIG5vIHJlaW5kZXhpbmcgdGFzayB3aXRoIHRoYXQgaWQgdGhlbiBhIDQwNCBpcyByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcmVpbmRleCBkYXRhIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSByZWluZGV4IGRhdGEgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0UmVpbmRleCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvcmVpbmRleCcpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIHRhc2tJZDogb3B0cy50YXNrSWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzb2x1dGlvbkNsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9yZXNvbHV0aW9uJ1xuICpcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIFJlc29sdXRpb25DbGllbnRcbiAqL1xuZnVuY3Rpb24gUmVzb2x1dGlvbkNsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGFsbCByZXNvbHV0aW9ucyB2aXNpYmxlIHRvIHRoZSB1c2VyXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEFsbFJlc29sdXRpb25zXG4gICAgICogQG1lbWJlck9mIFJlc29sdXRpb25DbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgSWdub3JlZFxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSByZXNvbHV0aW9ucyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHJlc29sdXRpb25zIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRBbGxSZXNvbHV0aW9ucyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvcmVzb2x1dGlvbicpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGEgZnVsbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcmVzb2x1dGlvbiB0aGF0IGhhcyB0aGUgZ2l2ZW4gaWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFJlc29sdXRpb25cbiAgICAgKiBAbWVtYmVyT2YgUmVzb2x1dGlvbkNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLnJlc29sdXRpb25JZCBBIFN0cmluZyBjb250YWluaW5nIGEgcmVzb2x1dGlvbiBpZFxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSByZXNvbHV0aW9uIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSByZXNvbHV0aW9uIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFJlc29sdXRpb24gPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3Jlc29sdXRpb24vJyArIG9wdHMucmVzb2x1dGlvbklkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBSb2xlQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL3JvbGUnXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgUm9sZUNsaWVudFxuICovXG5mdW5jdGlvbiBSb2xlQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAvKipcbiAgICogR2V0IGFsbCB0aGUgUHJvamVjdFJvbGVzIGF2YWlsYWJsZSBpbiBKaXJhLiBDdXJyZW50bHkgdGhpcyBsaXN0IGlzIGdsb2JhbC5cbiAgICpcbiAgICogQG1ldGhvZCBnZXRBbGxcbiAgICogQG1lbWJlck9mIFJvbGVDbGllbnQjXG4gICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwZXJtaXNzaW9ucyBoYXZlIGJlZW4gcmV0dXJuZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHBlcm1pc3Npb25zIGhhdmUgYmVlbiByZXR1cm5lZC5cbiAgICovXG4gIHRoaXMuZ2V0QWxsID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3JvbGUnKSxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBqc29uOiB0cnVlLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUHJvamVjdFJvbGUgdG8gYmUgYXZhaWxhYmxlIGluIEppcmEuXG4gICAqIFRoZSBjcmVhdGVkIHJvbGUgZG9lcyBub3QgaGF2ZSBhbnkgZGVmYXVsdCBhY3RvcnMgYXNzaWduZWQuXG4gICAqXG4gICAqIEBtZXRob2QgY3JlYXRlUm9sZVxuICAgKiBAbWVtYmVyT2YgUm9sZUNsaWVudCNcbiAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICogQHBhcmFtIG9wdHMucm9sZSBTZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLmF0bGFzc2lhbi5jb20vY2xvdWQvamlyYS9wbGF0Zm9ybS9yZXN0LyNhcGktYXBpLTItcm9sZS1wb3N0fVxuICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc2NoZW1lIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHNjaGVtZSBoYXMgYmVlbiBjcmVhdGVkLlxuICAgKi9cbiAgdGhpcy5jcmVhdGVSb2xlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3JvbGUnKSxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgIGJvZHk6IG9wdHMucm9sZVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBzcGVjaWZpYyBQcm9qZWN0Um9sZSBhdmFpbGFibGUgaW4gSmlyYS5cbiAgICpcbiAgICogQG1ldGhvZCBnZXRSb2xlQnlJZFxuICAgKiBAbWVtYmVyT2YgUm9sZUNsaWVudCNcbiAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHBlcm1pc3Npb25zIGhhdmUgYmVlbiByZXR1cm5lZC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcGVybWlzc2lvbnMgaGF2ZSBiZWVuIHJldHVybmVkLlxuICAgKi9cbiAgdGhpcy5nZXRSb2xlQnlJZCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9yb2xlLycgKyBvcHRzLnJvbGVJZCksXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZ1bGx5IHVwZGF0ZXMgYSByb2xlcy4gQm90aCBuYW1lIGFuZCBkZXNjcmlwdGlvbiBtdXN0IGJlIGdpdmVuLlxuICAgKlxuICAgKiBAbWV0aG9kIHVwZGF0ZVJvbGVcbiAgICogQG1lbWJlck9mIFJvbGVDbGllbnQjXG4gICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAqIEBwYXJhbSBvcHRzLnJvbGRJZCBJZGVudGlmaWVyIGZvciB0ZWggcm9sZS5cbiAgICogQHBhcmFtIG9wdHMucm9sZSBPYmplY3QgY29udGFpbmluZyB0aGUgbmFtZSBhbmQgZGVzY3JpcHRpb24gdG8gYmUgdXBkYXRlZC5cbiAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHBlcm1pc3Npb25zIGhhdmUgYmVlbiByZXR1cm5lZC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcGVybWlzc2lvbnMgaGF2ZSBiZWVuIHJldHVybmVkLlxuICAgKi9cbiAgdGhpcy51cGRhdGVSb2xlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3JvbGUvJyArIG9wdHMucm9sZUlkKSxcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBqc29uOiB0cnVlLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgYm9keTogb3B0cy5yb2xlLFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgKiBEZWxldGVzIGEgcm9sZS4gTWF5IHJldHVybiA0MDMgaW4gdGhlIGZ1dHVyZVxuICAqXG4gICogQG1ldGhvZCBkZWxldGVSb2xlXG4gICogQG1lbWJlck9mIFJvbGVDbGllbnQjXG4gICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5yb2xkSWQgSWRlbnRpZmllciBmb3IgdGhlIHJvbGUuXG4gICogQHBhcmFtIHtTdHJpbmd9IG9wdHMuc3dhcCBpZiBnaXZlbiwgcmVtb3ZlcyBhIHJvbGUgZXZlbiBpZiBpdCBpcyB1c2VkIGluIHNjaGVtZSBieSByZXBsYWNpbmcgdGhlIHJvbGUgd2l0aCB0aGUgZ2l2ZW4gb25lXG4gICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHBlcm1pc3Npb25zIGhhdmUgYmVlbiByZXR1cm5lZC5cbiAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwZXJtaXNzaW9ucyBoYXZlIGJlZW4gcmV0dXJuZWQuXG4gICovXG4gIHRoaXMuZGVsZXRlUm9sZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9yb2xlLycgKyBvcHRzLnJvbGVJZCksXG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgIHFzOiB7XG4gICAgICAgIHN3YXA6IG9wdHMuc3dhcFxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgKiBHZXRzIGRlZmF1bHQgYWN0b3JzIGZvciB0aGUgZ2l2ZW4gcm9sZS5cbiAgKlxuICAqIEBtZXRob2QgZ2V0QWN0b3JzXG4gICogQG1lbWJlck9mIFJvbGVDbGllbnQjXG4gICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5yb2xkSWQgSWRlbnRpZmllciBmb3IgdGhlIHJvbGUuXG4gICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHBlcm1pc3Npb25zIGhhdmUgYmVlbiByZXR1cm5lZC5cbiAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwZXJtaXNzaW9ucyBoYXZlIGJlZW4gcmV0dXJuZWQuXG4gICovXG4gIHRoaXMuZ2V0QWN0b3JzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3JvbGUvJyArIG9wdHMucm9sZUlkICsgJy9hY3RvcnMnKSxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBqc29uOiB0cnVlLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgKiBBZGRzIGRlZmF1bHQgYWN0b3JzIHRvIHRoZSBnaXZlbiByb2xlLlxuICAqIFRoZSByZXF1ZXN0IGRhdGEgc2hvdWxkIGNvbnRhaW4gYSBsaXN0IG9mIHVzZXJuYW1lcyBvciBhIGxpc3Qgb2YgZ3JvdXBzIHRvIGFkZC5cbiAgKlxuICAqIEBtZXRob2QgYWRkQWN0b3JzXG4gICogQG1lbWJlck9mIFJvbGVDbGllbnQjXG4gICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5yb2xkSWQgSWRlbnRpZmllciBmb3IgdGhlIHJvbGUuXG4gICogQHBhcmFtIHtBcnJheX0gb3B0cy5ncm91cCBBcnJheSBvZiBncm91cCBpZHMuXG4gICogQHBhcmFtIHtBcnJheX0gb3B0cy51c2VyIEFycmF5IG9mIHVzZXIgaWRzLlxuICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwZXJtaXNzaW9ucyBoYXZlIGJlZW4gcmV0dXJuZWQuXG4gICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcGVybWlzc2lvbnMgaGF2ZSBiZWVuIHJldHVybmVkLlxuICAqL1xuICB0aGlzLmFkZEFjdG9ycyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9yb2xlLycgKyBvcHRzLnJvbGVJZCArICcvYWN0b3JzJyksXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGpzb246IHRydWUsXG4gICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHVzZXI6IG9wdHMudXNlcixcbiAgICAgICAgZ3JvdXA6IG9wdHMuZ3JvdXAsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgKiBSZW1vdmVzIGRlZmF1bHQgYWN0b3IgZnJvbSB0aGUgZ2l2ZW4gcm9sZS5cbiAgKlxuICAqIEBtZXRob2QgcmVtb3ZlQWN0b3JcbiAgKiBAbWVtYmVyT2YgUm9sZUNsaWVudCNcbiAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLnJvbGRJZCBJZGVudGlmaWVyIGZvciB0aGUgcm9sZS5cbiAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5ncm91cCBncm91cCBpZC5cbiAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy51c2VyIHVzZXIgaWQuXG4gICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHBlcm1pc3Npb25zIGhhdmUgYmVlbiByZXR1cm5lZC5cbiAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBwZXJtaXNzaW9ucyBoYXZlIGJlZW4gcmV0dXJuZWQuXG4gICovXG4gIHRoaXMucmVtb3ZlQWN0b3IgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvcm9sZS8nICsgb3B0cy5yb2xlSWQgKyAnL2FjdG9ycycpLFxuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgIGpzb246IHRydWUsXG4gICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICBxczoge1xuICAgICAgICB1c2VyOiBvcHRzLnVzZXIsXG4gICAgICAgIGdyb3VwOiBvcHRzLmdyb3VwLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gU2NyZWVuc0NsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9zY3JlZW5zJ1xuICpcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIFNjcmVlbnNDbGllbnRcbiAqL1xuZnVuY3Rpb24gU2NyZWVuc0NsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIEdldHMgYXZhaWxhYmxlIGZpZWxkcyBmb3Igc2NyZWVuLiBpLmUgb25lcyB0aGF0IGhhdmVuJ3QgYWxyZWFkeSBiZWVuIGFkZGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBdmFpbGFibGVGaWVsZHNcbiAgICAgKiBAbWVtYmVyT2YgU2NyZWVuc0NsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gSmlyYVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnNjcmVlbklkIFRoZSBpZCBvZiB0aGUgc2NyZWVuIHRvIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBhdmFpbGFibGUgZmllbGRzIGhhdmUgYmVlbiByZXRyaWV2ZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBhdmFpbGFibGUgZmllbGRzIGhhdmUgYmVlbiByZXRyaWV2ZWRcbiAgICAgKi9cbiAgICB0aGlzLmdldEF2YWlsYWJsZUZpZWxkcyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL2F2YWlsYWJsZUZpZWxkcycsICdHRVQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGFsbCB0YWJzIGZvciB0aGUgZ2l2ZW4gc2NyZWVuLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRUYWJzXG4gICAgICogQG1lbWJlck9mIFNjcmVlbnNDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIEppcmFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5zY3JlZW5JZCBUaGUgaWQgb2YgdGhlIHNjcmVlbiB0byByZXRyaWV2ZS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgdGFicyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHRhYnMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFRhYnMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy90YWJzJywgJ0dFVCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0YWIgZm9yIGdpdmVuIHNjcmVlblxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVUYWJcbiAgICAgKiBAbWVtYmVyT2YgU2NyZWVuc0NsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gSmlyYVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnNjcmVlbklkIFRoZSBpZCBvZiB0aGUgc2NyZWVuIGluIHdoaWNoIHRvIGNyZWF0ZSBhIHRhYi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5uYW1lIFRoZSBuYW1lIG9mIHRoZSB0YWIgdG8gYWRkLiAgTWluaW11bSByZXF1aXJlZCB0byBjcmVhdGUgYSB0YWIuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHRhYiBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHRhYiBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlVGFiID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvdGFicycsICdQT1NUJywge25hbWU6IG9wdHMubmFtZX0pO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuYW1lcyB0aGUgZ2l2ZW4gdGFiIG9uIHRoZSBnaXZlbiBzY3JlZW4uXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHJlbmFtZVRhYlxuICAgICAqIEBtZW1iZXJPZiBTY3JlZW5zQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgamlyYSBBUElcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5zY3JlZW5JZCBUaGUgaWQgb2YgdGhlIHNjcmVlbiBjb250YWluaW5nIHRoZSB0YWIgdG8gcmVuYW1lLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnRhYklkIFRoZSBpZCBvZiB0aGUgdGFiIHRvIHJlbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm5hbWUgVGhlIG5ldyBuYW1lIG9mIHRoZSB0YWIuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gZGF0YSBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIGRhdGEgaGFzIGJlZW4gcmV0cmlldmVkXG4gICAgICovXG4gICAgdGhpcy5yZW5hbWVUYWIgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy90YWJzLycgKyBvcHRzLnRhYklkLCAnUFVUJywge25hbWU6IG9wdHMubmFtZX0pO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVsZXRlcyB0aGUgZ2l2ZW4gdGFiIGZyb20gdGhlIGdpdmVuIHNjcmVlbi5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlVGFiXG4gICAgICogQG1lbWJlck9mIFNjcmVlbnNDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBqaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnNjcmVlbklkIFRoZSBpZCBvZiB0aGUgc2NyZWVuIGNvbnRhaW5pbmcgdGhlIHRhYiB0byBkZWxldGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMudGFiSWQgVGhlIGlkIG9mIHRoZSB0YWIgdG8gZGVsZXRlXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gZGF0YSBoYXMgYmVlbiByZXRyaWV2ZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIGRhdGEgaGFzIGJlZW4gcmV0cmlldmVkXG4gICAgICovXG4gICAgdGhpcy5kZWxldGVUYWIgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy90YWJzLycgKyBvcHRzLnRhYklkLCAnREVMRVRFJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdUYWIgRGVsZXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGZpZWxkIHRvIHRoZSBnaXZlbiB0YWJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgYWRkRmllbGRUb1RhYlxuICAgICAqIEBtZW1iZXJPZiBTY3JlZW5zQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5zY3JlZW5JZCBUaGUgaWQgb2YgdGhlIHNjcmVlbiBjb250YWluaW5nIHRoZSB0YWIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMudGFiSWQgdGhlIGlkIG9mIHRoZSB0YWIgdG8gd2hpY2ggdGhlIGZpZWxkcyB3aWxsIGJlIGFkZGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpZWxkSWQgVGhlIGZpZWxkIHRvIGFkZFxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBmaWVsZHMgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSB0YWIuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgZmllbGRzIGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgdGFiLlxuICAgICAqL1xuICAgIHRoaXMuYWRkRmllbGRUb1RhYiA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3RhYnMvJyArIG9wdHMudGFiSWQgKyAnL2ZpZWxkcycsICdQT1NUJywgb3B0cy5maWVsZElkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGZpZWxkcyBmb3IgYSBnaXZlbiB0YWIuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEZpZWxkc0luVGFiXG4gICAgICogQG1lbWJlck9mIFNjcmVlbnNDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnNjcmVlbklkIFRoZSBpZCBvZiB0aGUgc2NyZWVuIGNvbnRhaW5pbmcgdGhlIHRhYi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy50YWJJZCB0aGUgaWQgb2YgdGhlIHRhYiBmb3Igd2hpY2ggdG8gcmV0cmlldmUgZmllbGRzLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBmaWVsZHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBmaWVsZHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldEZpZWxkc0luVGFiID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvdGFicy8nICsgb3B0cy50YWJJZCArICcvZmllbGRzJywgJ0dFVCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBnaXZlbiBmaWVsZCBmcm9tIHRoZSBnaXZlbiB0YWIuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHJlbW92ZUZpZWxkRnJvbVRhYlxuICAgICAqIEBtZW1iZXJPZiBTY3JlZW5zQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5zY3JlZW5JZCBUaGUgaWQgb2YgdGhlIHNjcmVlbiBjb250YWluaW5nIHRoZSB0YWIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMudGFiSWQgdGhlIGlkIG9mIHRoZSB0YWIgZnJvbSB3aGljaCB0byByZW1vdmUgdGhlIGZpZWxkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpZWxkSWQgVGhlIGlkIG9mIHRoZSBmaWVsZCB0byByZW1vdmUgZnJvbSB0aGUgdGFiLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBmaWVsZCBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGZpZWxkIGhhcyBiZWVuIHJlbW92ZWQuXG4gICAgICovXG4gICAgdGhpcy5yZW1vdmVGaWVsZEZyb21UYWIgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy90YWJzLycgKyBvcHRzLnRhYklkICsgJy9maWVsZHMvJyArIG9wdHMuZmllbGRJZCwgJ0RFTEVURScpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnRmllbGQgUmVtb3ZlZCBGcm9tIFRhYicpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRoZSBnaXZlbiBmaWVsZCBvbiB0aGUgZ2l2ZW4gdGFiXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIG1vdmVGaWVsZE9uVGFiXG4gICAgICogQG1lbWJlck9mIFNjcmVlbnNDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnNjcmVlbklkIFRoZSBpZCBvZiB0aGUgc2NyZWVuIGNvbnRhaW5pbmcgdGhlIHRhYi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy50YWJJZCB0aGUgaWQgb2YgdGhlIHRhYiBjb250YWluaW5nIHRoZSBmaWVsZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWVsZElkIFRoZSBpZCBvZiB0aGUgZmllbGQgdG8gcmVtb3ZlIGZyb20gdGhlIHRhYi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5uZXdQb3NpdGlvbiBUaGUgcG9zaXRpb24gdG8gd2hpY2ggdGhlIGZpZWxkIHNob3VsZCBiZSBtb3ZlZC4gIE1heSBiZSBvbmUgb2Y6XG4gICAgICogICogRWFybGllclxuICAgICAqICAqIExhdGVyXG4gICAgICogICogRmlyc3RcbiAgICAgKiAgKiBMYXN0XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGZpZWxkIGhhcyBiZWVuIHJlbW92ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgZmllbGQgaGFzIGJlZW4gcmVtb3ZlZC5cbiAgICAgKi9cbiAgICB0aGlzLm1vdmVGaWVsZE9uVGFiID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvdGFicy8nICsgb3B0cy50YWJJZCArICcvZmllbGRzLycgKyBvcHRzLmZpZWxkSWQgKyAnL21vdmUnLFxuICAgICAgICAgICAgJ1BPU1QnLCB7cG9zaXRpb246IG9wdHMubmV3UG9zaXRpb259KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ0ZpZWxkIE1vdmVkJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIHRhYiBwb3NpdGlvblxuICAgICAqXG4gICAgICogQG1ldGhvZCBtb3ZlVGFiUG9zaXRpb25cbiAgICAgKiBAbWVtYmVyT2YgU2NyZWVuc0NsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnNjcmVlbklkIFRoZSBpZCBvZiB0aGUgc2NyZWVuIGNvbnRhaW5pbmcgdGhlIHRhYi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy50YWJJZCB0aGUgaWQgb2YgdGhlIHRhYiB0byBtb3ZlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLm5ld1Bvc2l0aW9uIFRoZSBuZXcgKHplcm8taW5kZXhlZCkgcG9zaXRpb24gb2YgdGhlIHRhYi5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgdGFiIGhhcyBiZWVuIG1vdmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHRhYiBoYXMgYmVlbiBtb3ZlZC5cbiAgICAgKi9cbiAgICB0aGlzLm1vdmVUYWJQb3NpdGlvbiA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3RhYnMvJyArIG9wdHMudGFiSWQgKyAnL21vdmUvJyArIG9wdHMubmV3UG9zaXRpb24sICdQT1NUJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdUYWIgTW92ZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBmaWVsZCBvciBjdXN0b20gZmllbGQgdG8gdGhlIGRlZmF1bHQgdGFiXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGFkZEZpZWxkVG9EZWZhdWx0VGFiXG4gICAgICogQG1lbWJlck9mIFNjcmVlbnNDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWVsZElkIFRoZSBpZCBvZiB0aGUgZmllbGQgdG8gYWRkIHRvIHRoZSBkZWZhdWx0IHRhYi5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgdGFiIGhhcyBiZWVuIG1vdmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHRhYiBoYXMgYmVlbiBtb3ZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmFkZEZpZWxkVG9EZWZhdWx0VGFiID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9zY3JlZW5zL2FkZFRvRGVmYXVsdC8nICsgb3B0cy5maWVsZElkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBvdXQgdGhlIHJlcXVlc3Qgb3B0aW9ucyBuZWNlc3NhcnkgdG8gbWFrZSBhIHBhcnRpY3VsYXIgQVBJIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYnVpbGRSZXF1ZXN0T3B0aW9uc1xuICAgICAqIEBtZW1iZXJPZiBGaWx0ZXJDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5zY3JlZW5JZCBUaGUgaWQgb2YgdGhlIHNjcmVlbiB0byB1c2UgaW4gdGhlIHBhdGguXG4gICAgICogQHBhcmFtIHtBcnJheX0gW29wdHMuZmllbGRzXSBUaGUgZmllbGRzIHRvIGluY2x1ZGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbb3B0cy5leHBhbmRdIFRoZSBmaWVsZHMgdG8gZXhwYW5kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIGVuZHBvaW50IGZvbGxvd2luZyAvc2NyZWVuL3tpZH1cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIFRoZSByZXF1ZXN0IG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2JvZHldIFRoZSByZXF1ZXN0IGJvZHksIGlmIGFueS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3FzXSBUaGUgcXVlcnlzdHJpbmcsIGlmIGFueS4gIG9wdHMuZXhwYW5kIGFuZCBvcHRzLmZpZWxkcyBhcnJheXMgd2lsbCBiZSBhdXRvbWFnaWNhbGx5IGFkZGVkLlxuICAgICAqIEByZXR1cm5zIHt7dXJpOiBzdHJpbmcsIG1ldGhvZDogc3RyaW5nLCBib2R5OiBPYmplY3QsIHFzOiBPYmplY3QsIGZvbGxvd0FsbFJlZGlyZWN0czogYm9vbGVhbiwganNvbjogYm9vbGVhbn19XG4gICAgICovXG4gICAgdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zID0gZnVuY3Rpb24gKG9wdHMsIHBhdGgsIG1ldGhvZCwgYm9keSwgcXMpIHtcbiAgICAgICAgdmFyIGJhc2VQYXRoID0gJy9zY3JlZW5zLycgKyBvcHRzLnNjcmVlbklkO1xuICAgICAgICBpZiAoIXFzKSBxcyA9IHt9O1xuICAgICAgICBpZiAoIWJvZHkpIGJvZHkgPSB7fTtcblxuICAgICAgICBpZiAob3B0cy5maWVsZHMpIHtcbiAgICAgICAgICAgIHFzLmZpZWxkcyA9ICcnO1xuICAgICAgICAgICAgb3B0cy5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICBxcy5maWVsZHMgKz0gZmllbGQgKyAnLCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcXMuZmllbGRzID0gcXMuZmllbGRzLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRzLmV4cGFuZCkge1xuICAgICAgICAgICAgcXMuZXhwYW5kID0gJyc7XG4gICAgICAgICAgICBvcHRzLmV4cGFuZC5mb3JFYWNoKGZ1bmN0aW9uIChleCkge1xuICAgICAgICAgICAgICAgIHFzLmV4cGFuZCArPSBleCArICcsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBxcy5leHBhbmQgPSBxcy5leHBhbmQuc2xpY2UoMCwgLTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKGJhc2VQYXRoICsgcGF0aCksXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICBxczogcXMsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBqc29uOiB0cnVlXG4gICAgICAgIH07XG4gICAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWFyY2hDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvc2VhcmNoJ1xuICpcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIFNlYXJjaENsaWVudFxuICovXG5mdW5jdGlvbiBTZWFyY2hDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyBmb3IgaXNzdWVzIHVzaW5nIEpRTC5cbiAgICAgKlxuICAgICAqIFNvcnRpbmcgdGhlIGpxbCBwYXJhbWV0ZXIgaXMgYSBmdWxsIEpRTCBleHByZXNzaW9uLCBhbmQgaW5jbHVkZXMgYW4gT1JERVIgQlkgY2xhdXNlLlxuICAgICAqXG4gICAgICogVGhlIGZpZWxkcyBwYXJhbSAod2hpY2ggY2FuIGJlIHNwZWNpZmllZCBtdWx0aXBsZSB0aW1lcykgZ2l2ZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gaW5jbHVkZSBpblxuICAgICAqIHRoZSByZXNwb25zZS4gVGhpcyBjYW4gYmUgdXNlZCB0byByZXRyaWV2ZSBhIHN1YnNldCBvZiBmaWVsZHMuIEEgcGFydGljdWxhciBmaWVsZCBjYW4gYmUgZXhjbHVkZWQgYnkgcHJlZml4aW5nXG4gICAgICogaXQgd2l0aCBhIG1pbnVzLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgb25seSBuYXZpZ2FibGUgKCpuYXZpZ2FibGUpIGZpZWxkcyBhcmUgcmV0dXJuZWQgaW4gdGhpcyBzZWFyY2ggcmVzb3VyY2UuIE5vdGU6IHRoZSBkZWZhdWx0IGlzXG4gICAgICogZGlmZmVyZW50IGluIHRoZSBnZXQtaXNzdWUgcmVzb3VyY2UgLS0gdGhlIGRlZmF1bHQgdGhlcmUgYWxsIGZpZWxkcyAoKmFsbCkuXG4gICAgICpcbiAgICAgKiAqICphbGwgLSBpbmNsdWRlIGFsbCBmaWVsZHNcbiAgICAgKiAqIG5hdmlnYWJsZSAtIGluY2x1ZGUganVzdCBuYXZpZ2FibGUgZmllbGRzXG4gICAgICogKiBzdW1tYXJ5LGNvbW1lbnQgLSBpbmNsdWRlIGp1c3QgdGhlIHN1bW1hcnkgYW5kIGNvbW1lbnRzXG4gICAgICogKiAtZGVzY3JpcHRpb24gLSBpbmNsdWRlIG5hdmlnYWJsZSBmaWVsZHMgZXhjZXB0IHRoZSBkZXNjcmlwdGlvbiAodGhlIGRlZmF1bHQgaXMgKm5hdmlnYWJsZSBmb3Igc2VhcmNoKVxuICAgICAqICogKmFsbCwtY29tbWVudCAtIGluY2x1ZGUgZXZlcnl0aGluZyBleGNlcHQgY29tbWVudHNcbiAgICAgKlxuICAgICAqIEV4cGFuZGluZyBJc3N1ZXMgaW4gdGhlIFNlYXJjaCBSZXN1bHQ6IEl0IGlzIHBvc3NpYmxlIHRvIGV4cGFuZCB0aGUgaXNzdWVzIHJldHVybmVkIGJ5IGRpcmVjdGx5IHNwZWNpZnlpbmcgdGhlXG4gICAgICogZXhwYW5zaW9uIG9uIHRoZSBleHBhbmQgcGFyYW1ldGVyIHBhc3NlZCBpbiB0byB0aGlzIHJlc291cmNlcy5cbiAgICAgKlxuICAgICAqIEZvciBpbnN0YW5jZSwgdG8gZXhwYW5kIHRoZSBcImNoYW5nZWxvZ1wiIGZvciBhbGwgdGhlIGlzc3VlcyBvbiB0aGUgc2VhcmNoIHJlc3VsdCwgaXQgaXMgbmVjY2VzYXJ5IHRvIHNwZWNpZnlcbiAgICAgKiBcImNoYW5nZWxvZ1wiIGFzIG9uZSBvZiB0aGUgdmFsdWVzIHRvIGV4cGFuZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2VhcmNoXG4gICAgICogQG1lbWJlck9mIFNlYXJjaENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgb3B0aW9ucyBmb3IgdGhlIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5qcWwgVGhlIEpRTCBxdWVyeSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMuc3RhcnRBdF0gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBpc3N1ZSB0byByZXR1cm4gKDAtYmFzZWQpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLm1heFJlc3VsdHNdIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpc3N1ZXMgdG8gcmV0dXJuIChkZWZhdWx0cyB0byA1MCkuIFRoZSBtYXhpbXVtIGFsbG93YWJsZVxuICAgICAqICAgICB2YWx1ZSBpcyBkaWN0YXRlZCBieSB0aGUgSklSQSBwcm9wZXJ0eSAnamlyYS5zZWFyY2gudmlld3MuZGVmYXVsdC5tYXgnLiBJZiB5b3Ugc3BlY2lmeSBhIHZhbHVlIHRoYXQgaXNcbiAgICAgKiAgICAgaGlnaGVyIHRoYW4gdGhpcyBudW1iZXIsIHlvdXIgc2VhcmNoIHJlc3VsdHMgd2lsbCBiZSB0cnVuY2F0ZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy52YWxpZGF0ZVF1ZXJ5PXRydWVdIFdoZXRoZXIgdG8gdmFsaWRhdGUgdGhlIEpRTCBxdWVyeVxuICAgICAqIEBwYXJhbSB7YXJyYXl9IFtvcHRzLmZpZWxkc10gVGhlIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybiBmb3IgZWFjaCBpc3N1ZS4gQnkgZGVmYXVsdCwgYWxsIG5hdmlnYWJsZSBmaWVsZHMgYXJlXG4gICAgICogICAgIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IFtvcHRzLmV4cGFuZF0gQSBsaXN0IG9mIHRoZSBwYXJhbWV0ZXJzIHRvIGV4cGFuZC5cbiAgICAgKiBAcGFyYW0ge2FycmF5fSBbb3B0cy5wcm9wZXJ0aWVzXSBBIGxpc3Qgb2YgdGhlIHByb3BlcnRpZXMgdG8gaW5jbHVkZSAoNSBtYXgpLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aXRoIHRoZSBzZWFyY2ggcmVzdWx0cy5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aXRoIHRoZSBzZWFyY2ggcmVzdWx0cy5cbiAgICAgKi9cbiAgICB0aGlzLnNlYXJjaCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBvcHRzLm1ldGhvZCA9IG9wdHMubWV0aG9kIHx8ICdQT1NUJztcblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvc2VhcmNoJyksXG4gICAgICAgICAgICBtZXRob2Q6IG9wdHMubWV0aG9kLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHRpbWVvdXQ6IG9wdHMudGltZW91dCB8fCAxMDAwMCxcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc2VhcmNoX29wdGlvbnMgPSB7XG4gICAgICAgICAgICBqcWw6IG9wdHMuanFsLFxuICAgICAgICAgICAgc3RhcnRBdDogb3B0cy5zdGFydEF0LFxuICAgICAgICAgICAgbWF4UmVzdWx0czogb3B0cy5tYXhSZXN1bHRzLFxuICAgICAgICAgICAgdmFsaWRhdGVRdWVyeTogb3B0cy52YWxpZGF0ZVF1ZXJ5LFxuICAgICAgICAgICAgZmllbGRzOiBvcHRzLmZpZWxkcyxcbiAgICAgICAgICAgIGV4cGFuZDogb3B0cy5leHBhbmQsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBvcHRzLnByb3BlcnRpZXNcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0cy5tZXRob2QgPT09ICdQT1NUJykge1xuICAgICAgICAgICAgb3B0aW9ucy5ib2R5ID0gc2VhcmNoX29wdGlvbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLnFzID0gc2VhcmNoX29wdGlvbnM7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlY3VyaXR5TGV2ZWxDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvc2VjdXJpdHlsZXZlbCdcbiAqXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBTZWN1cml0eUxldmVsQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIFNlY3VyaXR5TGV2ZWxDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBmdWxsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzZWN1cml0eSBsZXZlbCB0aGF0IGhhcyB0aGUgZ2l2ZW4gaWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFNlY3VyaXR5TGV2ZWxcbiAgICAgKiBAbWVtYmVyT2YgU2VjdXJpdHlMZXZlbENsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHRvIHNlbmQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLnNlY3VyaXR5TGV2ZWxJZCBUaGUgaWQgb2YgdGhlIHNlY3VyaXR5IGxldmVsIHRvIHJldHJpZXZlXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNlY3VyaXR5IGxldmVsIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzZWN1cml0eSBsZXZlbCBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRTZWN1cml0eUxldmVsID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9zZWN1cml0eWxldmVsLycgKyBvcHRzLnNlY3VyaXR5TGV2ZWxJZCksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXJ2ZXJJbmZvQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL3NlcnZlckluZm8nXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBTZXJ2ZXJJbmZvQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIFNlcnZlckluZm9DbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGdlbmVyYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgSklSQSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFNlcnZlckluZm9cbiAgICAgKiBAbWVtYmVyT2YgU2VydmVySW5mb0NsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZG9IZWFsdGhDaGVja10gV2hldGhlciB0byBwZXJmb3JtIGEgaGVhbHRoIGNoZWNrIG9uIHRoZSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNlcnZlciBpbmZvIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzZXJ2ZXIgaW5mbyBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRTZXJ2ZXJJbmZvID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy9zZXJ2ZXJJbmZvJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgZG9IZWFsdGhDaGVjazogb3B0cy5kb0hlYWx0aENoZWNrXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldHRpbmdzQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL3NldHRpbmdzJ1xuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgU2V0dGluZ3NDbGllbnRcbiAqL1xuZnVuY3Rpb24gU2V0dGluZ3NDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBiYXNlIFVSTCB0aGF0IGlzIGNvbmZpZ3VyZWQgZm9yIHRoaXMgSklSQSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2V0QmFzZVVybFxuICAgICAqIEBtZW1iZXJPZiBTZXR0aW5nc0NsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLm5ld1VybCBUaGUgbmV3IGJhc2UgdXJsLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBiYXNlIHVybCBoYXMgYmVlbiBzZXQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgYmFzZSB1cmwgaGFzIGJlZW4gc2V0LlxuICAgICAqL1xuICAgIHRoaXMuc2V0QmFzZVVybCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvc2V0dGluZ3MvYmFzZVVybCcpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiBvcHRzLm5ld1VybFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkZWZhdWx0IHN5c3RlbSBjb2x1bW5zIGZvciBpc3N1ZSBuYXZpZ2F0b3IuIEFkbWluIHBlcm1pc3Npb24gd2lsbCBiZSByZXF1aXJlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0SXNzdWVOYXZDb2x1bW5zXG4gICAgICogQG1lbWJlck9mIFNldHRpbmdzQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIElnbm9yZWRcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgY29sdW1ucyBoYXZlIGJlZW4gcmV0cmlldmVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgY29sdW1ucyBoYXZlIGJlZW4gcmV0cmlldmVkXG4gICAgICovXG4gICAgdGhpcy5nZXRJc3N1ZU5hdkNvbHVtbnMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3NldHRpbmdzL2NvbHVtbnMnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBBZ2lsZVNwcmludENsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hZ2lsZS8xLjAvc3ByaW50J1xuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgQWdpbGVTcHJpbnRDbGllbnRcbiAqL1xuZnVuY3Rpb24gQWdpbGVTcHJpbnRDbGllbnQoamlyYUNsaWVudCkge1xuICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgc3ByaW50IGZyb20gYSBKU09OIHJlcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBAbWV0aG9kIGNyZWF0ZVNwcmludFxuICAgKiBAbWVtYmVyT2YgQWdpbGVTcHJpbnRDbGllbnQjXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzcHJpbnQgVGhlIHNwcmludCBkYXRhIGluIHRoZSBmb3JtIG9mIFBPU1QgYm9keSB0byB0aGVcbiAgICogICBKaXJhIEFQSS5cbiAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNwcmludCBoYXMgYmVlbiBjcmVhdGVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzcHJpbnQgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICovXG4gIHRoaXMuY3JlYXRlU3ByaW50ID0gZnVuY3Rpb24gKHNwcmludCwgY2FsbGJhY2spIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkQWdpbGVVUkwoJy9zcHJpbnQnKSxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGJvZHk6IHNwcmludFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IGEgc2luZ2xlIHNwcmludC5cbiAgICpcbiAgICogQG1ldGhvZCBnZXRTcHJpbnRcbiAgICogQG1lbWJlck9mIEFnaWxlU3ByaW50Q2xpZW50I1xuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgKiBAcGFyYW0gb3B0cy5zcHJpbnRJZCBUaGUgc3ByaW50IGlkLlxuICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc3ByaW50IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgc3ByaW50IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICovXG4gIHRoaXMuZ2V0U3ByaW50ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEFnaWxlVVJMKCcvc3ByaW50LycgKyBvcHRzLnNwcmludElkKSxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBqc29uOiB0cnVlLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgcXM6IHtcbiAgICAgICAgZmlsdGVyOiBvcHRzLmZpbHRlcixcbiAgICAgICAgc3RhcnRBdDogb3B0cy5zdGFydEF0LFxuICAgICAgICBtYXhSZXN1bHRzOiBvcHRzLm1heFJlc3VsdHNcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBmdWxsIHVwZGF0ZSBvZiBhIHNwcmludC5cbiAgICpcbiAgICogQG1ldGhvZCB1cGRhdGVTcHJpbnRcbiAgICogQG1lbWJlck9mIEFnaWxlU3ByaW50Q2xpZW50I1xuICAgKiBAcGFyYW0ge09iamVjdH0gc3ByaW50IFRoZSBzcHJpbnQgZGF0YSBpbiB0aGUgZm9ybSBvZiBQVVQgYm9keSB0byB0aGVcbiAgICogICBKaXJhIEFQSS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtzcHJpbnQuc3ByaW50SWRdIFRoZSBpZCBvZiB0aGUgc3ByaW50LiAgRVg6IDMzMVxuICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc3ByaW50IGhhcyBiZWVuIHVwZGF0ZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHNwcmludCBoYXMgYmVlbiB1cGRhdGVkLlxuICAgKi9cbiAgdGhpcy51cGRhdGVTcHJpbnQgPSBmdW5jdGlvbiAoc3ByaW50LCBjYWxsYmFjaykge1xuICAgIHZhciBzcHJpbnRJZCA9IHNwcmludC5zcHJpbnRJZDtcbiAgICBkZWxldGUgc3ByaW50LnNwcmludElkO1xuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEFnaWxlVVJMKCcvc3ByaW50LycgKyBzcHJpbnRJZCksXG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGJvZHk6IHNwcmludFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgICogUGVyZm9ybSBhIHBhcnRpYWwgdXBkYXRlIG9mIGEgc3ByaW50LlxuICAgKlxuICAgKiBAbWV0aG9kIHBhcnRpYWxseVVwZGF0ZVNwcmludFxuICAgKiBAbWVtYmVyT2YgQWdpbGVTcHJpbnRDbGllbnQjXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzcHJpbnQgVGhlIHNwcmludCBkYXRhIGluIHRoZSBmb3JtIG9mIFBPU1QgYm9keSB0byB0aGVcbiAgICogICBKaXJhIEFQSS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtzcHJpbnQuc3ByaW50SWRdIFRoZSBpZCBvZiB0aGUgc3ByaW50LiAgRVg6IDMzMS5cbiAgICogQHBhcmFtIGNhbGxiYWNrIENhbGxlZCB3aGVuIHRoZSBzcHJpbnQgaGFzIGJlZW4gdXBkYXRlZC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgc3ByaW50IGhhcyBiZWVuIHVwZGF0ZWQuXG4gICAqL1xuICB0aGlzLnBhcnRpYWxseVVwZGF0ZVNwcmludCA9IGZ1bmN0aW9uIChzcHJpbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNwcmludElkID0gc3ByaW50LnNwcmludElkO1xuICAgIGRlbGV0ZSBzcHJpbnQuc3ByaW50SWQ7XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkQWdpbGVVUkwoJy9zcHJpbnQvJyArIHNwcmludElkKSxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGJvZHk6IHNwcmludFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgICogRGVsZXRlIGFuIGV4aXN0aW5nIHNwcmludC5cbiAgICpcbiAgICogQG1ldGhvZCBkZWxldGVTcHJpbnRcbiAgICogQG1lbWJlck9mIEFnaWxlU3ByaW50Q2xpZW50I1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5zcHJpbnRJZCBUaGUgaWQgb2YgdGhlIHNwcmludC4gIEVYOiAzMzFcbiAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNwcmludCBpcyBkZWxldGVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzcHJpbnQgaXMgZGVsZXRlZC5cbiAgICovXG4gIHRoaXMuZGVsZXRlU3ByaW50ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEFnaWxlVVJMKCcvc3ByaW50LycgKyBvcHRzLnNwcmludElkKSxcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICBqc29uOiB0cnVlLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgcXM6IHtcbiAgICAgICAgZmlsdGVyOiBvcHRzLmZpbHRlcixcbiAgICAgICAgc3RhcnRBdDogb3B0cy5zdGFydEF0LFxuICAgICAgICBtYXhSZXN1bHRzOiBvcHRzLm1heFJlc3VsdHNcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbGwgaXNzdWVzIGluIGEgc3ByaW50LCBmb3IgYSBnaXZlbiBzcHJpbnQgaWQuXG4gICAqXG4gICAqIEBtZXRob2QgZ2V0U3ByaW50SXNzdWVzXG4gICAqIEBtZW1iZXJPZiBBZ2lsZVNwcmludENsaWVudCNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICogQHBhcmFtIG9wdHMuc3ByaW50SWQgVGhlIHNwcmludCBpZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGpxbCBGaWx0ZXJzIHJlc3VsdHMgdXNpbmcgYSBKUUwgcXVlcnkuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsaWRhdGVRdWVyeSBTcGVjaWZpZXMgd2hldGhlciB0byB2YWxpZGUgdGhlIEpRTCBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkcyBUaGUgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuIGZvciBlYWNoIGlzc3VlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwYW5kIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgdGhlIHBhcmFtZXRlcnMgdG8gZXhwYW5kLlxuICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgaXNzdWVzIGFyZSByZXR1cm5lZC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgaXNzdWVzIGFyZSByZXR1cm5lZC5cbiAgICovXG4gIHRoaXMuZ2V0U3ByaW50SXNzdWVzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEFnaWxlVVJMKCcvc3ByaW50LycgKyBvcHRzLnNwcmludElkICsgJy9pc3N1ZScpLFxuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIGpzb246IHRydWUsXG4gICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICBxczoge1xuICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0cyxcbiAgICAgICAganFsOiBvcHRzLmpxbCxcbiAgICAgICAgdmFsaWRhdGVRdWVyeTogb3B0cy52YWxpZGF0ZVF1ZXJ5LFxuICAgICAgICBmaWVsZHM6IG9wdHMuZmllbGRzLFxuICAgICAgICBleHBhbmQ6IG9wdHMuZXhwYW5kXG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBNb3ZlIGlzc3VlcyB0byBhIHNwcmludCwgZm9yIGEgZ2l2ZW4gc3ByaW50IGlkLlxuICAgKlxuICAgKiBAbWV0aG9kIG1vdmVTcHJpbnRJc3N1ZXNcbiAgICogQG1lbWJlck9mIEFnaWxlU3ByaW50Q2xpZW50I1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgaXNzdWUgZGF0YSBpbiB0aGUgZm9ybSBvZiBQT1NUIGJvZHkgdG8gdGhlXG4gICAqICAgSmlyYSBBUEkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zcHJpbnRJZF0gVGhlIHNwcmludCBpZC5cbiAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNwcmludCBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHNwcmludCBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAqL1xuICB0aGlzLm1vdmVTcHJpbnRJc3N1ZXMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICB2YXIgc3ByaW50SWQgPSBvcHRzLnNwcmludElkO1xuICAgIGRlbGV0ZSBvcHRzLnNwcmludElkO1xuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEFnaWxlVVJMKCcvc3ByaW50LycgKyBzcHJpbnRJZCArICcvaXNzdWUnKSxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGJvZHk6IG9wdHNcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFN3YXAgdGhlIHBvc2l0aW9uIG9mIHRoZSBzcHJpbnQgKGdpdmVuIGJ5IHNwcmludCBpZCkgd2l0aCB0aGUgc2Vjb25kXG4gICAqIHNwcmludC5cbiAgICpcbiAgICogQG1ldGhvZCBzd2FwU3ByaW50XG4gICAqIEBtZW1iZXJPZiBBZ2lsZVNwcmludENsaWVudCNcbiAgICogQHBhcmFtIHtPYmplY3R9IHN3YXBwZWQgVGhlIGRhdGEgaW4gdGhlIGZvcm0gb2YgUE9TVCBib2R5IHRvIHRoZSBKaXJhIEFQSS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtzd2FwcGVkLnNwcmludElkXSBUaGUgaWQgb2YgdGhlIHNwcmludC4gIEVYOiAzMTFcbiAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNwcmludCBoYXMgYmVlbiByZXRyaXZlZC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgc3ByaW50IGhhcyBiZWVuIHJldHJpdmVkLlxuICAgKi9cbiAgdGhpcy5zd2FwU3ByaW50ID0gZnVuY3Rpb24gKHN3YXBwZWQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNwcmludElkID0gc3dhcHBlZC5zcHJpbnRJZDtcbiAgICBkZWxldGUgc3dhcHBlZC5zcHJpbnRJZDtcblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRBZ2lsZVVSTCgnL3NwcmludC8nICsgc3ByaW50SWQgKyAnL3N3YXAnKSxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGJvZHk6IHN3YXBwZWRcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gIH07XG5cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXR1c0NsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi9zdGF0dXMnXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgU3RhdHVzQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIFN0YXR1c0NsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGFsbCBzdGF0dXNlcyB2aXNpYmxlIHRvIHRoZSB1c2VyXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEFsbFN0YXR1c2VzXG4gICAgICogQG1lbWJlck9mIFN0YXR1c0NsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBJZ25vcmVkXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gc3RhdHVzZXMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHN0YXR1c2VzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRBbGxTdGF0dXNlcyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvc3RhdHVzJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBmdWxsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzdGF0dXMgdGhhdCBoYXMgdGhlIGdpdmVuIGlkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRTdGF0dXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhdHVzQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIG9wdHMuc3RhdHVzSWQgQSBTdHJpbmcgY29udGFpbmluZyBhIHN0YXR1cyBpZFxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBzdGF0dXMgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHN0YXR1cyBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRTdGF0dXMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3N0YXR1cy8nICsgb3B0cy5zdGF0dXNJZCksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhdHVzQ2F0ZWdvcnlDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvc3RhdHVzY2F0ZWdvcnknXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgU3RhdHVzQ2F0ZWdvcnlDbGllbnRcbiAqL1xuZnVuY3Rpb24gU3RhdHVzQ2F0ZWdvcnlDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhbGwgc3RhdHVzQ2F0ZWdvcmllcyB2aXNpYmxlIHRvIHRoZSB1c2VyXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEFsbFN0YXR1c0NhdGVnb3JpZXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhdHVzQ2F0ZWdvcnlDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgSWdub3JlZFxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBzdGF0dXNDYXRlZ29yaWVzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgc3RhdHVzQ2F0ZWdvcmllcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0QWxsU3RhdHVzQ2F0ZWdvcmllcyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvc3RhdHVzY2F0ZWdvcnknKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCBhIGZ1bGwgcmVwcmVzZW50YXRpb24gb2YgdGhlIHN0YXR1c0NhdGVnb3J5IHRoYXQgaGFzIHRoZSBnaXZlbiBpZCBvciBrZXkuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFN0YXR1c0NhdGVnb3J5XG4gICAgICogQG1lbWJlck9mIFN0YXR1c0NhdGVnb3J5Q2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIG9wdHMuc3RhdHVzQ2F0ZWdvcnlJZE9yS2V5IEEgU3RyaW5nIGNvbnRhaW5pbmcgYSBzdGF0dXNDYXRlZ29yeSBpZFxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBzdGF0dXNDYXRlZ29yeSBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgc3RhdHVzQ2F0ZWdvcnkgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0U3RhdHVzQ2F0ZWdvcnkgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3N0YXR1c2NhdGVnb3J5LycgKyBvcHRzLnN0YXR1c0NhdGVnb3J5SWRPcktleSksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBVc2VyQ2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL3VzZXInXG4gKlxuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgVXNlckNsaWVudFxuICovXG5mdW5jdGlvbiBVc2VyQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGEgdXNlci4gVGhpcyByZXNvdXJjZSBjYW5ub3QgYmUgYWNjZXNzZWQgYW5vbnltb3VzbHkuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFVzZXJcbiAgICAgKiBAbWVtYmVyT2YgVXNlckNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIG9wdHMudXNlcm5hbWUgVGhlIG5hbWUgb2YgdGhlIHVzZXIgdG8gcmV0cmlldmUuXG4gICAgICogQHBhcmFtIG9wdHMudXNlcktleSBUaGUga2V5IG9mIHRoZSB1c2VyIHRvIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmV4cGFuZCBUaGUgZmllbGRzIHRvIGJlIGV4cGFuZGVkLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB1c2VyIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB1c2VyIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFVzZXIgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3VzZXInKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogb3B0cy51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBrZXk6IG9wdHMudXNlcktleSxcbiAgICAgICAgICAgICAgICBleHBhbmQ6IG9wdHMuZXhwYW5kXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdHMuZXhwYW5kKSB7XG4gICAgICAgICAgICBvcHRpb25zLnFzLmV4cGFuZCA9ICcnO1xuICAgICAgICAgICAgb3B0cy5leHBhbmQuZm9yRWFjaChmdW5jdGlvbiAoZXgpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnFzLmV4cGFuZCArPSBleCArICcsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB1c2VyLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBkZWxldGVVc2VyXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLnVzZXJuYW1lIFRoZSBuYW1lIG9mIHRoZSB1c2VyIHRvIGRlbGV0ZS5cbiAgICAgKiBAcGFyYW0gb3B0cy51c2VyS2V5IFRoZSBrZXkgb2YgdGhlIHVzZXIgdG8gZGVsZXRlLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB1c2VyIGhhcyBiZWVuIGRlbGV0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgdXNlciBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlVXNlciA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvdXNlcicpLFxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBvcHRzLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIGtleTogb3B0cy51c2VyS2V5XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ1VzZXIgcmVtb3ZlZC4nKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHVzZXIuIEJ5IGRlZmF1bHQgY3JlYXRlZCB1c2VyIHdpbGwgbm90IGJlIG5vdGlmaWVkIHdpdGggZW1haWwuIElmIHBhc3N3b3JkIGZpZWxkIGlzIG5vdCBzZXQgdGhlbiBwYXNzd29yZFxuICAgICAqIHdpbGwgYmUgcmFuZG9tbHkgZ2VuZXJhdGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVVc2VyXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy51c2VyIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlNDA0OX1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgdXNlciBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHVzZXIgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmNyZWF0ZVVzZXIgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3VzZXInKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMudXNlclxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNb2RpZnkgdXNlci4gVGhlIFwidmFsdWVcIiBmaWVsZHMgcHJlc2VudCB3aWxsIG92ZXJyaWRlIHRoZSBleGlzdGluZyB2YWx1ZS4gRmllbGRzIHNraXBwZWQgaW4gcmVxdWVzdCB3aWxsIG5vdCBiZVxuICAgICAqIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGVkaXRVc2VyXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLnVzZXIgU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmU0MDgxfVxuICAgICAqIEBwYXJhbSBvcHRzLnVzZXJuYW1lIFRoZSBuYW1lIG9mIHRoZSB1c2VyIHRvIGVkaXQuXG4gICAgICogQHBhcmFtIG9wdHMudXNlcktleSBUaGUga2V5IG9mIHRoZSB1c2VyIHRvIGVkaXQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHVzZXIgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHVzZXIgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqL1xuICAgIHRoaXMuZWRpdFVzZXIgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3VzZXInKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogb3B0cy51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBrZXk6IG9wdHMudXNlcktleVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMudXNlclxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiB1c2VycyB0aGF0IG1hdGNoIHRoZSBzZWFyY2ggc3RyaW5nIGFuZCBjYW4gYmUgYXNzaWduZWQgaXNzdWVzIGZvciBhbGwgdGhlIGdpdmVuIHByb2plY3RzLiBUaGlzXG4gICAgICogcmVzb3VyY2UgY2Fubm90IGJlIGFjY2Vzc2VkIGFub255bW91c2x5LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBtdWx0aVByb2plY3RTZWFyY2hBc3NpZ25hYmxlXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnVzZXJuYW1lIFRoZSBuYW1lIG9mIHRoZSB1c2VyIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvcHRzLnByb2plY3RLZXlzIFRoZSBrZXlzIG9mIHRoZSBwcm9qZWN0cyB3ZSBhcmUgZmluZGluZyBhc3NpZ25hYmxlIHVzZXJzIGZvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5zdGFydEF0XSBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IHVzZXIgdG8gcmV0dXJuICgwLWJhc2VkKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5tYXhSZXN1bHRzXSBUaGUgbWF4aW11bSBudW1iZXIgb2YgdXNlcnMgdG8gcmV0dXJuIChkZWZhdWx0cyB0byA1MCkuIFRoZSBtYXhpbXVtIGFsbG93ZWRcbiAgICAgKiAgICAgdmFsdWUgaXMgMTAwMC4gSWYgeW91IHNwZWNpZnkgYSB2YWx1ZSB0aGF0IGlzIGhpZ2hlciB0aGFuIHRoaXMgbnVtYmVyLCB5b3VyIHNlYXJjaCByZXN1bHRzIHdpbGwgYmVcbiAgICAgKiAgICAgdHJ1bmNhdGVkLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBzZWFyY2ggcmVzdWx0cyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHNlYXJjaCByZXN1bHRzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5tdWx0aVByb2plY3RTZWFyY2hBc3NpZ25hYmxlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBwcm9qZWN0S2V5U3RyaW5nID0gJyc7XG4gICAgICAgIGlmIChvcHRzLnByb2plY3RLZXlzKSB7XG4gICAgICAgICAgICBvcHRzLnByb2plY3RLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHByb2plY3RLZXlTdHJpbmcgKz0ga2V5ICsgJywnO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcm9qZWN0S2V5U3RyaW5nID0gcHJvamVjdEtleVN0cmluZy5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3VzZXIvYXNzaWduYWJsZS9tdWx0aVByb2plY3RTZWFyY2gnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogb3B0cy51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBwcm9qZWN0S2V5czogcHJvamVjdEtleVN0cmluZyxcbiAgICAgICAgICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgICAgICAgICAgbWF4UmVzdWx0czogb3B0cy5tYXhSZXN1bHRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiB1c2VycyB0aGF0IG1hdGNoIHRoZSBzZWFyY2ggc3RyaW5nLiBUaGlzIHJlc291cmNlIGNhbm5vdCBiZSBhY2Nlc3NlZCBhbm9ueW1vdXNseS4gUGxlYXNlIG5vdGVcbiAgICAgKiB0aGF0IHRoaXMgcmVzb3VyY2Ugc2hvdWxkIGJlIGNhbGxlZCB3aXRoIGFuIGlzc3VlIGtleSB3aGVuIGEgbGlzdCBvZiBhc3NpZ25hYmxlIHVzZXJzIGlzIHJldHJpZXZlZCBmb3IgZWRpdGluZy5cbiAgICAgKiBGb3IgY3JlYXRlIG9ubHkgYSBwcm9qZWN0IGtleSBzaG91bGQgYmUgc3VwcGxpZWQuIFRoZSBsaXN0IG9mIGFzc2lnbmFibGUgdXNlcnMgbWF5IGJlIGluY29ycmVjdCBpZiBpdCdzIGNhbGxlZFxuICAgICAqIHdpdGggdGhlIHByb2plY3Qga2V5IGZvciBlZGl0aW5nLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBzZWFyY2hBc3NpZ25hYmxlXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnVzZXJuYW1lIFRoZSB1c2VybmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnByb2plY3QgVGhlIGtleSBvZiB0aGUgcHJvamVjdCB3ZSBhcmUgZmluZGluZyBhc3NpZ25hYmxlIHVzZXJzIGZvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gVGhlIGlzc3VlIGtleSBmb3IgdGhlIGlzc3VlIGJlaW5nIGVkaXRlZCB3ZSBuZWVkIHRvIGZpbmQgYXNzaWduYWJsZSB1c2VycyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnN0YXJ0QXRdIFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdXNlciB0byByZXR1cm4gKDAtYmFzZWQpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLm1heFJlc3VsdHNdIFRoZSBtYXhpbXVtIG51bWJlciBvZiB1c2VycyB0byByZXR1cm4gKGRlZmF1bHRzIHRvIDUwKS4gVGhlIG1heGltdW0gYWxsb3dlZFxuICAgICAqICAgICB2YWx1ZSBpcyAxMDAwLiBJZiB5b3Ugc3BlY2lmeSBhIHZhbHVlIHRoYXQgaXMgaGlnaGVyIHRoYW4gdGhpcyBudW1iZXIsIHlvdXIgc2VhcmNoIHJlc3VsdHMgd2lsbCBiZVxuICAgICAqICAgICB0cnVuY2F0ZWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLmFjdGlvbkRlc2NyaXB0b3JJZF1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc2VhcmNoIHJlc3VsdHMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzZWFyY2ggcmVzdWx0cyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuc2VhcmNoQXNzaWduYWJsZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvdXNlci9hc3NpZ25hYmxlL3NlYXJjaCcpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBvcHRzLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIHByb2plY3Q6IG9wdHMucHJvamVjdCxcbiAgICAgICAgICAgICAgICBpc3N1ZUtleTogb3B0cy5pc3N1ZUtleSxcbiAgICAgICAgICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgICAgICAgICAgbWF4UmVzdWx0czogb3B0cy5tYXhSZXN1bHRzLFxuICAgICAgICAgICAgICAgIGFjdGlvbkRlc2NyaXB0b3JJZDogb3B0cy5hY3Rpb25EZXNjcmlwdG9ySWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGVtcG9yYXJ5IGF2YXRhci4gQ3JlYXRpbmcgYSB0ZW1wb3JhcnkgYXZhdGFyIGlzIHBhcnQgb2YgYSAzLXN0ZXAgcHJvY2VzcyBpbiB1cGxvYWRpbmcgYSBuZXcgYXZhdGFyIGZvclxuICAgICAqIGEgdXNlcjogdXBsb2FkLCBjcm9wLCBjb25maXJtLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVUZW1wb3JhcnlBdmF0YXJcbiAgICAgKiBAbWVtYmVyT2YgVXNlckNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMudXNlcm5hbWUgVGhlIHVzZXJuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZXBhdGggVGhlIHBhdGggdG8gdGhlIGZpbGUgdG8gdXBsb2FkLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB0ZW1wb3JhcnkgYXZhdGFyIGhhcyBiZWVuIHVwbG9hZGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHRlbXBvcmFyeSBhdmF0YXIgaGFzIGJlZW4gdXBsb2FkZWQuXG4gICAgICovXG4gICAgdGhpcy5jcmVhdGVUZW1wb3JhcnlBdmF0YXIgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGV4dGVuc2lvbiA9IHBhdGguZXh0bmFtZShvcHRzLmZpbGVwYXRoKS5zbGljZSgxKTtcbiAgICAgICAgdmFyIGJhc2VOYW1lID0gcGF0aC5iYXNlbmFtZShvcHRzLmZpbGVwYXRoKTtcbiAgICAgICAgdmFyIGZpbGVTaXplID0gZnMuc3RhdFN5bmMob3B0cy5maWxlcGF0aCkuc2l6ZTtcblxuICAgICAgICBleHRlbnNpb24gPSBleHRlbnNpb24gPT0gJ2pwZycgPyAnanBlZycgOiBleHRlbnNpb247XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3VzZXIvYXZhdGFyL3RlbXBvcmFyeScpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBvcHRzLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBiYXNlTmFtZSxcbiAgICAgICAgICAgICAgICBzaXplOiBmaWxlU2l6ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IGZzLnJlYWRGaWxlU3luYyhvcHRzLmZpbGVwYXRoKSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIlgtQXRsYXNzaWFuLVRva2VuXCI6ICduby1jaGVjaycsXG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogJ2ltYWdlLycgKyBleHRlbnNpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRlbXBvcmFyeSBhdmF0YXIgaW50byBhIHJlYWwgYXZhdGFyXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGNvbnZlcnRUZW1wb3JhcnlBdmF0YXJcbiAgICAgKiBAbWVtYmVyT2YgVXNlckNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMudXNlcm5hbWUgVGhlIHVzZXJuYW1lXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMuYXZhdGFySWQgVGhlIGlkIG9mIHRoZSB0ZW1wb3JhcnkgYXZhdGFyIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGF2YXRhciBoYXMgYmVlbiBjb252ZXJ0ZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBhdmF0YXIgaGFzIGJlZW4gY29udmVydGVkXG4gICAgICovXG4gICAgdGhpcy5jb252ZXJ0VGVtcG9yYXJ5QXZhdGFyID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy91c2VyL2F2YXRhci8nKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogb3B0cy51c2VybmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IHtpZDogb3B0cy5hdmF0YXJJZH0sXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJYLUF0bGFzc2lhbi1Ub2tlblwiOiAnbm8tY2hlY2snXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdBdmF0YXIgQ29udmVydGVkJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYXZhdGFyXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGRlbGV0ZUF2YXRhclxuICAgICAqIEBtZW1iZXJPZiBVc2VyQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy51c2VybmFtZSBUaGUgdXNlcm5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cy5hdmF0YXJJZCBUaGUgaWQgb2YgdGhlIHRlbXBvcmFyeSBhdmF0YXIgdG8gZGVsZXRlLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBhdmF0YXIgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBhdmF0YXIgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZUF2YXRhciA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvdXNlci9hdmF0YXIvJyArIG9wdHMuYXZhdGFySWQpLFxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBvcHRzLnVzZXJuYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdBdmF0YXIgRGVsZXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBhdmF0YXJzIHdoaWNoIGFyZSB2aXNpYmxlIGZvciB0aGUgY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBdmF0YXJzXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnVzZXJuYW1lIFRoZSB1c2VybmFtZVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBhdmF0YXJzIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgYXZhdGFycyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0QXZhdGFycyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvdXNlci9hdmF0YXJzJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IG9wdHMudXNlcm5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRlZmF1bHQgY29sdW1ucyBmb3IgdGhlIGdpdmVuIHVzZXIuIEFkbWluIHBlcm1pc3Npb24gd2lsbCBiZSByZXF1aXJlZCB0byBnZXQgY29sdW1ucyBmb3IgYSB1c2VyXG4gICAgICogb3RoZXIgdGhhbiB0aGUgY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXREZWZhdWx0Q29sdW1uc1xuICAgICAqIEBtZW1iZXJPZiBVc2VyQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy51c2VybmFtZSBUaGUgdXNlcm5hbWVcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgY29sdW1ucyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGNvbHVtbnMgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldERlZmF1bHRDb2x1bW5zID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy91c2VyL2NvbHVtbnMnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogb3B0cy51c2VybmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGVmYXVsdCBjb2x1bW5zIGZvciB0aGUgZ2l2ZW4gdXNlci4gQWRtaW4gcGVybWlzc2lvbiB3aWxsIGJlIHJlcXVpcmVkIHRvIGdldCBjb2x1bW5zIGZvciBhIHVzZXIgb3RoZXJcbiAgICAgKiB0aGFuIHRoZSBjdXJyZW50bHkgbG9nZ2VkIGluIHVzZXIuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNldERlZmF1bHRDb2x1bW5zXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnVzZXJuYW1lIFRoZSB1c2VybmFtZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY29sdW1ucyBUaGUgbmFtZXMgb2YgdGhlIG5ldyBjb2x1bW5zLiAgU2VlIHtAbGlua1xuICAgICAgICAqICAgICBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmU0NTY2fVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBjb2x1bW5zIGhhdmUgYmVlbiBzZXQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgY29sdW1ucyBoYXZlIGJlZW4gc2V0LlxuICAgICAqL1xuICAgIHRoaXMuc2V0RGVmYXVsdENvbHVtbnMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3VzZXIvY29sdW1ucycpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBvcHRzLnVzZXJuYW1lXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGNvbHVtbnM6IG9wdHMuY29sdW1uc1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnRGVmYXVsdCBDb2x1bW5zIFNldCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgZGVmYXVsdCBjb2x1bW5zIGZvciB0aGUgZ2l2ZW4gdXNlciB0byB0aGUgc3lzdGVtIGRlZmF1bHQuIEFkbWluIHBlcm1pc3Npb24gd2lsbCBiZSByZXF1aXJlZCB0byBnZXRcbiAgICAgKiBjb2x1bW5zIGZvciBhIHVzZXIgb3RoZXIgdGhhbiB0aGUgY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyLlxuICAgICAqXG4gICAgICogQG1ldGhvZCByZXNldERlZmF1bHRDb2x1bW5zXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnVzZXJuYW1lIFRoZSB1c2VybmFtZVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBjb2x1bW5zIGhhdmUgYmVlbiByZXNldC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBjb2x1bW5zIGhhdmUgYmVlbiByZXNldC5cbiAgICAgKi9cbiAgICB0aGlzLnJlc2V0RGVmYXVsdENvbHVtbnMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3VzZXIvY29sdW1ucycpLFxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBvcHRzLnVzZXJuYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdEZWZhdWx0IENvbHVtbnMgUmVzZXQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTW9kaWZ5IHVzZXIgcGFzc3dvcmQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGNoYW5nZVBhc3N3b3JkXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLnVzZXJuYW1lIFRoZSBuYW1lIG9mIHRoZSB1c2VyIGZvciB3aGljaCB0byBjaGFuZ2UgdGhlIHBhc3N3b3JkLlxuICAgICAqIEBwYXJhbSBvcHRzLnVzZXJLZXkgVGhlIGtleSBvZiB0aGUgdXNlciBmb3Igd2hpY2ggdG8gY2hhbmdlIHRoZSBwYXNzd29yZC5cbiAgICAgKiBAcGFyYW0gb3B0cy5wYXNzd29yZCBUaGUgbmV3IHBhc3N3b3JkLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBwYXNzd29yZCBoYXMgYmVlbiBzZXQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcGFzc3dvcmQgaGFzIGJlZW4gc2V0LlxuICAgICAqL1xuICAgIHRoaXMuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3VzZXIvcGFzc3dvcmQnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogb3B0cy51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBrZXk6IG9wdHMudXNlcktleVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogb3B0cy5wYXNzd29yZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnUGFzc3dvcmQgQ2hhbmdlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhY3RpdmUgdXNlcnMgdGhhdCBtYXRjaCB0aGUgc2VhcmNoIHN0cmluZyBhbmQgaGF2ZSBhbGwgc3BlY2lmaWVkIHBlcm1pc3Npb25zIGZvciB0aGUgcHJvamVjdFxuICAgICAqIG9yIGlzc3VlLlxuICAgICAqXG4gICAgICogVGhpcyByZXNvdXJjZSBjYW4gYmUgYWNjZXNzZWQgYnkgdXNlcnMgd2l0aCBBRE1JTklTVEVSX1BST0pFQ1QgcGVybWlzc2lvbiBmb3IgdGhlIHByb2plY3Qgb3IgZ2xvYmFsXG4gICAgICogQURNSU4gb3IgU1lTQURNSU4gcmlnaHRzLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBzZWFyY2hQZXJtaXNzaW9uc1xuICAgICAqIEBtZW1iZXJPZiBVc2VyQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgamlyYSBBUElcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy51c2VybmFtZSBUaGUgdXNlcm5hbWUgZmlsdGVyLCBsaXN0IGluY2x1ZGVzIGFsbCB1c2VycyBpZiB1bnNwZWNpZmllZFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG9wdHMucGVybWlzc2lvbnMgQXJyYXkgb2YgcGVybWlzc2lvbnMgZm9yIHByb2plY3Qgb3IgaXNzdWUgcmV0dXJuZWQgdXNlcnMgbXVzdCBoYXZlLCBzZWVcbiAgICAgKiAgICAgW1Blcm1pc3Npb25zXXtAbGlua1xuICAgICAgICAqICAgICBodHRwczovL2RldmVsb3Blci5hdGxhc3NpYW4uY29tL3N0YXRpYy9qYXZhZG9jL2ppcmEvNi4wL3JlZmVyZW5jZS9jb20vYXRsYXNzaWFuL2ppcmEvc2VjdXJpdHkvUGVybWlzc2lvbnMuUGVybWlzc2lvbi5odG1sfVxuICAgICAgICAqICAgICBKYXZhRG9jIGZvciB0aGUgbGlzdCBvZiBhbGwgcG9zc2libGUgcGVybWlzc2lvbnMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmlzc3VlS2V5XSB0aGUgaXNzdWUga2V5IGZvciB0aGUgaXNzdWUgZm9yIHdoaWNoIHJldHVybmVkIHVzZXJzIGhhdmUgc3BlY2lmaWVkIHBlcm1pc3Npb25zLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5wcm9qZWN0S2V5XSB0aGUgb3B0aW9uYWwgcHJvamVjdCBrZXkgdG8gc2VhcmNoIGZvciB1c2VycyB3aXRoIGlmIG5vIGlzc3VlS2V5IGlzIHN1cHBsaWVkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5zdGFydEF0XSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVzZXIgdG8gcmV0dXJuICgwLWJhc2VkKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5tYXhSZXN1bHRzXSB0aGUgbWF4aW11bSBudW1iZXIgb2YgdXNlcnMgdG8gcmV0dXJuIChkZWZhdWx0cyB0byA1MCkuIFRoZSBtYXhpbXVtIGFsbG93ZWRcbiAgICAgKiAgICAgdmFsdWUgaXMgMTAwMC4gSWYgeW91IHNwZWNpZnkgYSB2YWx1ZSB0aGF0IGlzIGhpZ2hlciB0aGFuIHRoaXMgbnVtYmVyLCB5b3VyIHNlYXJjaCByZXN1bHRzIHdpbGwgYmVcbiAgICAgKiAgICAgdHJ1bmNhdGVkLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBzZWFyY2ggcmVzdWx0cyBhcmUgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHNlYXJjaCByZXN1bHRzIGFyZSByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5zZWFyY2hQZXJtaXNzaW9ucyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcGVybWlzc2lvbnMgPSAnJztcbiAgICAgICAgaWYgKG9wdHMucGVybWlzc2lvbnMpIHtcbiAgICAgICAgICAgIG9wdHMucGVybWlzc2lvbnMuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zICs9IHMgKyAnLCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGVybWlzc2lvbnMgPSBwZXJtaXNzaW9ucy5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFVSTCgnL3VzZXIvcGVybWlzc2lvbi9zZWFyY2gnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogb3B0cy51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBwZXJtaXNzaW9uczogcGVybWlzc2lvbnMsXG4gICAgICAgICAgICAgICAgaXNzdWVLZXk6IG9wdHMuaXNzdWVLZXksXG4gICAgICAgICAgICAgICAgcHJvamVjdEtleTogb3B0cy5wcm9qZWN0S2V5LFxuICAgICAgICAgICAgICAgIHN0YXJ0QXQ6IG9wdHMuc3RhcnRBdCxcbiAgICAgICAgICAgICAgICBtYXhSZXN1bHRzOiBvcHRzLm1heFJlc3VsdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIHVzZXJzIG1hdGNoaW5nIHF1ZXJ5IHdpdGggaGlnaGxpZ2h0aW5nLiBUaGlzIHJlc291cmNlIGNhbm5vdCBiZSBhY2Nlc3NlZCBhbm9ueW1vdXNseS5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2VhcmNoUGlja2VyXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5xdWVyeVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5tYXhSZXN1bHRzPTUwXVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2hvd0F2YXRhcj1mYWxzZV1cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZXhjbHVkZV1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc2VhcmNoIHJlc3VsdHMgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzZWFyY2ggcmVzdWx0cyBhcmUgcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuc2VhcmNoUGlja2VyID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy91c2VyL3BpY2tlcicpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiBvcHRzLnF1ZXJ5LFxuICAgICAgICAgICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0cyxcbiAgICAgICAgICAgICAgICBzaG93QXZhdGFyOiBvcHRzLnNob3dBdmF0YXIsXG4gICAgICAgICAgICAgICAgZXhjbHVkZTogb3B0cy5leGNsdWRlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiB1c2VycyB0aGF0IG1hdGNoIHRoZSBzZWFyY2ggc3RyaW5nLiBUaGlzIHJlc291cmNlIGNhbm5vdCBiZSBhY2Nlc3NlZCBhbm9ueW1vdXNseS5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2VhcmNoXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy51c2VybmFtZSBBIHF1ZXJ5IHN0cmluZyB1c2VkIHRvIHNlYXJjaCB1c2VybmFtZSwgbmFtZSBvciBlLW1haWwgYWRkcmVzc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5zdGFydEF0PTBdIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdXNlciB0byByZXR1cm4gKDAtYmFzZWQpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLm1heFJlc3VsdHM9NTBdIHRoZSBtYXhpbXVtIG51bWJlciBvZiB1c2VycyB0byByZXR1cm4gKGRlZmF1bHRzIHRvIDUwKS4gVGhlIG1heGltdW0gYWxsb3dlZFxuICAgICAqICAgICB2YWx1ZSBpcyAxMDAwLiBJZiB5b3Ugc3BlY2lmeSBhIHZhbHVlIHRoYXQgaXMgaGlnaGVyIHRoYW4gdGhpcyBudW1iZXIsIHlvdXIgc2VhcmNoIHJlc3VsdHMgd2lsbCBiZVxuICAgICAqICAgICB0cnVuY2F0ZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlQWN0aXZlPXRydWVdIElmIHRydWUsIHRoZW4gYWN0aXZlIHVzZXJzIGFyZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0cyAoZGVmYXVsdCB0cnVlKVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZUluYWN0aXZlPWZhbHNlXSBJZiB0cnVlLCB0aGVuIGluYWN0aXZlIHVzZXJzIGFyZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0cyAoZGVmYXVsdFxuICAgICAqICAgICBmYWxzZSlcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc2VhcmNoIHJlc3VsdHMgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzZWFyY2ggcmVzdWx0cyBhcmUgcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuc2VhcmNoID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy91c2VyL3NlYXJjaCcpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBvcHRzLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0cyxcbiAgICAgICAgICAgICAgICBzdGFydEF0OiBvcHRzLnN0YXJ0QXQsXG4gICAgICAgICAgICAgICAgaW5jbHVkZUFjdGl2ZTogb3B0cy5pbmNsdWRlQWN0aXZlLFxuICAgICAgICAgICAgICAgIGluY2x1ZGVJbmFjdGl2ZTogb3B0cy5pbmNsdWRlSW5hY3RpdmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGFjdGl2ZSB1c2VycyB0aGF0IG1hdGNoIHRoZSBzZWFyY2ggc3RyaW5nLiBUaGlzIHJlc291cmNlIGNhbm5vdCBiZSBhY2Nlc3NlZCBhbm9ueW1vdXNseS4gR2l2ZW5cbiAgICAgKiBhbiBpc3N1ZSBrZXkgdGhpcyByZXNvdXJjZSB3aWxsIHByb3ZpZGUgYSBsaXN0IG9mIHVzZXJzIHRoYXQgbWF0Y2ggdGhlIHNlYXJjaCBzdHJpbmcgYW5kIGhhdmUgdGhlIGJyb3dzZSBpc3N1ZVxuICAgICAqIHBlcm1pc3Npb24gZm9yIHRoZSBpc3N1ZSBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgdmlld0lzc3VlU2VhcmNoXG4gICAgICogQG1lbWJlck9mIFVzZXJDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy51c2VybmFtZSBBIHF1ZXJ5IHN0cmluZyB1c2VkIHRvIHNlYXJjaCB1c2VybmFtZSwgbmFtZSBvciBlLW1haWwgYWRkcmVzc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pc3N1ZUtleV0gdGhlIGlzc3VlIGtleSBmb3IgdGhlIGlzc3VlIGJlaW5nIGVkaXRlZCB3ZSBuZWVkIHRvIGZpbmQgdmlld2FibGUgdXNlcnMgZm9yLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5wcm9qZWN0S2V5XSB0aGUgb3B0aW9uYWwgcHJvamVjdCBrZXkgdG8gc2VhcmNoIGZvciB1c2VycyB3aXRoIGlmIG5vIGlzc3VlS2V5IGlzIHN1cHBsaWVkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5zdGFydEF0PTBdIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdXNlciB0byByZXR1cm4gKDAtYmFzZWQpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLm1heFJlc3VsdHM9NTBdIHRoZSBtYXhpbXVtIG51bWJlciBvZiB1c2VycyB0byByZXR1cm4gKGRlZmF1bHRzIHRvIDUwKS4gVGhlIG1heGltdW0gYWxsb3dlZFxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIGRhdGEgaGFzIGJlZW4gcmV0cmlldmVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiBkYXRhIGhhcyBiZWVuIHJldHJpZXZlZFxuICAgICAqL1xuICAgIHRoaXMudmlld0lzc3VlU2VhcmNoID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy91c2VyL3ZpZXdpc3N1ZS9zZWFyY2gnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogb3B0cy51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBpc3N1ZUtleTogb3B0cy5pc3N1ZUtleSxcbiAgICAgICAgICAgICAgICBwcm9qZWN0S2V5OiBvcHRzLnByb2plY3RLZXksXG4gICAgICAgICAgICAgICAgc3RhcnRBdDogb3B0cy5zdGFydEF0LFxuICAgICAgICAgICAgICAgIG1heFJlc3VsdHM6IG9wdHMubWF4UmVzdWx0c1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gVmVyc2lvbkNsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC9hcGkvMi92ZXJzaW9uJ1xuICogQHBhcmFtIHtKaXJhQ2xpZW50fSBqaXJhQ2xpZW50XG4gKiBAY29uc3RydWN0b3IgVmVyc2lvbkNsaWVudFxuICovXG5mdW5jdGlvbiBWZXJzaW9uQ2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHZlcnNpb25cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3JlYXRlVmVyc2lvblxuICAgICAqIEBtZW1iZXJPZiBWZXJzaW9uQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byBKaXJhLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLnZlcnNpb24gU2VlIHtAbGluayBodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL1JFU1QvbGF0ZXN0LyNkMmUzNTQ5fVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB2ZXJzaW9uIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgdmVyc2lvbiBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlVmVyc2lvbiA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvdmVyc2lvbicpLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgYm9keTogb3B0cy52ZXJzaW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1vZGlmeSBhIHZlcnNpb24ncyBzZXF1ZW5jZSB3aXRoaW4gYSBwcm9qZWN0LiBUaGUgbW92ZSB2ZXJzaW9uIGJlYW4gaGFzIDIgYWx0ZXJuYXRpdmUgZmllbGQgdmFsdWUgcGFpcnNcbiAgICAgKiAob3B0cy5wb3NpdGlvbiBvciBvcHRzLmFmdGVyKS4gIE9uZSBhbmQgb25seSBvbmUgb2YgdGhlc2UgdHdvIG11c3QgYmUgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIG1vdmVWZXJzaW9uXG4gICAgICogQG1lbWJlck9mIFZlcnNpb25DbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy52ZXJzaW9uSWQgVGhlIGlkIG9mIHRoZSB2ZXJzaW9uIHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnBvc2l0aW9uXSBBbiBhYnNvbHV0ZSBwb3NpdGlvbiwgd2hpY2ggbWF5IGhhdmUgYSB2YWx1ZSBvZiAnRmlyc3QnLCAnTGFzdCcsICdFYXJsaWVyJyBvclxuICAgICAqICAgICAnTGF0ZXInLiBNdXN0IGJlIHByb3ZpZGVkIGlmIG9wdHMuYWZ0ZXIgaXMgbWlzc2luZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYWZ0ZXJdIEEgdmVyc2lvbiB0byBwbGFjZSB0aGlzIHZlcnNpb24gYWZ0ZXIuIFRoZSB2YWx1ZSBzaG91bGQgYmUgdGhlIHNlbGYgbGluayBvZiBhbm90aGVyXG4gICAgICogICAgIHZlcnNpb24uIE11c3QgYmUgcHJvdmlkZWQgaWYgb3B0cy5wb3NpdGlvbiBpcyBtaXNzaW5nXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHZlcnNpb24gaGFzIGJlZW4gbW92ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgdmVyc2lvbiBoYXMgYmVlbiBtb3ZlZC5cbiAgICAgKi9cbiAgICB0aGlzLm1vdmVWZXJzaW9uID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvbW92ZScsICdQT1NUJywge3Bvc2l0aW9uOiBvcHRzLnBvc2l0aW9uLCBhZnRlcjogb3B0cy5hZnRlcn0pO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIFxuICAgICAvKipcbiAgICAgKiBHZXQgYSBhbGwgdmVyc2lvbnMgZnJvbSBzcGVjaWZpYyBib2FyZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0QWxsVmVyc2lvbnNcbiAgICAgKiBAbWVtYmVyT2YgVmVyc2lvbkNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gb3B0cy5ib2FyZElkIFRoZSBpZCBvZiB0aGUgYm9hcmQgd2hpY2ggY29udGFpbnMgdmVyc2lvbnMgdG8gcmV0cmlldmUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gYWxsIHZlcnNpb25zIGFyZSByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiBhbGwgdmVyc2lvbnMgYXJlIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldEFsbFZlcnNpb25zID0gZnVuY3Rpb24ob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZEFnaWxlVVJMKGAvYm9hcmQvJHtvcHRzLmJvYXJkSWR9L3ZlcnNpb25gKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IG9wdHMuZmlsdGVyLFxuICAgICAgICAgICAgICAgIHN0YXJ0QXQ6IG9wdHMuc3RhcnRBdCxcbiAgICAgICAgICAgICAgICBtYXhSZXN1bHRzOiBvcHRzLm1heFJlc3VsdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogR2V0IGEgcHJvamVjdCB2ZXJzaW9uLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRWZXJzaW9uXG4gICAgICogQG1lbWJlck9mIFZlcnNpb25DbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IG9wdHMudmVyc2lvbklkIFRoZSBpZCBvZiB0aGUgdmVyc2lvbiB0byByZXRyaWV2ZS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgdmVyc2lvbiBpcyByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgdmVyc2lvbiBpcyByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRWZXJzaW9uID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcnLCAnR0VUJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNb2RpZnkgYW4gZXhpc3RpbmcgdmVyc2lvbjsgYW55IG9taXR0ZWQgZmllbGRzIHdpbGwgYmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZWRpdFZlcnNpb25cbiAgICAgKiBAbWVtYmVyT2YgVmVyc2lvbkNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gSmlyYS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy52ZXJzaW9uSWQgVGhlIGlkIG9mIHRoZSB2ZXJzaW9uIHRvIGVkaXQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMudmVyc2lvbiBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTM2MTl9XG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHZlcnNpb24gaGFzIGJlZW4gbW9kaWZpZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgdmVyc2lvbiBoYXMgYmVlbiBtb2RpZmllZC5cbiAgICAgKi9cbiAgICB0aGlzLmVkaXRWZXJzaW9uID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcnLCAnUFVUJywgb3B0cy52ZXJzaW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCBhIGJlYW4gY29udGFpbmluZyB0aGUgbnVtYmVyIG9mIGZpeGVkIGluIGFuZCBhZmZlY3RlZCBpc3N1ZXMgZm9yIHRoZSBnaXZlbiB2ZXJzaW9uLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRSZWxhdGVkSXNzdWVDb3VudHNcbiAgICAgKiBAbWVtYmVyT2YgVmVyc2lvbkNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLnZlcnNpb25JZCBUaGUgdmVyc2lvbiBmb3Igd2hpY2ggdG8gcmV0cmlldmUgcmVsYXRlZCBpc3N1ZXMuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGNvdW50IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBjb3VudCBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRSZWxhdGVkSXNzdWVDb3VudHMgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9yZWxhdGVkSXNzdWVDb3VudHMnLCAnR0VUJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG51bWJlciBvZiB1bnJlc29sdmVkIGlzc3VlcyBmb3IgdGhlIGdpdmVuIHZlcnNpb25cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0VW5yZXNvbHZlZElzc3VlQ291bnRcbiAgICAgKiBAbWVtYmVyT2YgVmVyc2lvbkNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLnZlcnNpb25JZCBUaGUgdmVyc2lvbiBmb3Igd2hpY2ggdG8gcmV0cmlldmUgdW5yZXNvbHZlZCBpc3N1ZXMuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGNvdW50IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBjb3VudCBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRVbnJlc29sdmVkSXNzdWVDb3VudCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3VucmVzb2x2ZWRJc3N1ZUNvdW50JywgJ0dFVCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZW1vdGUgdmVyc2lvbiBsaW5rcyBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIHZlcnNpb24gaWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFJlbW90ZUxpbmtzXG4gICAgICogQG1lbWJlck9mIFZlcnNpb25DbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy52ZXJzaW9uSWQgVGhlIHZlcnNpb24gZm9yIHdoaWNoIHRvIHJldHJpZXZlIHJlbW90ZSBsaW5rcy5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgbGlua3MgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBsaW5rcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0UmVtb3RlTGlua3MgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9yZW1vdGVsaW5rJywgJ0dFVCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgcmVtb3RlIHZlcnNpb24gbGluayB2aWEgUE9TVC4gVGhlIGxpbmsncyBnbG9iYWwgaWQgd2lsbCBiZSB0YWtlbiBmcm9tIHRoZSBKU09OIHBheWxvYWQgaWYgcHJvdmlkZWQ7XG4gICAgICogb3RoZXJ3aXNlLCBpdCB3aWxsIGJlIGdlbmVyYXRlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3JlYXRlUmVtb3RlTGlua1xuICAgICAqIEBtZW1iZXJPZiBWZXJzaW9uQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMudmVyc2lvbklkIFRoZSB2ZXJzaW9uIGZvciB3aGljaCB0byByZXRyaWV2ZSB1bnJlc29sdmVkIGlzc3Vlcy5cbiAgICAgKiBAcGFyYW0gb3B0cy5yZW1vdGVMaW5rIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMzc1M31cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcmVtb3RlIGxpbmsgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSByZW1vdGUgbGluayBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlUmVtb3RlTGluayA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3JlbW90ZWxpbmsnLCAnUE9TVCcsIG9wdHMucmVtb3RlTGluayk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdSZW1vdGVsaW5rIENyZWF0ZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGEgUkVTVCBzdWItcmVzb3VyY2UgcmVwcmVzZW50aW5nIGEgcmVtb3RlIHZlcnNpb24gbGluay5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0UmVtb3RlTGlua3NcbiAgICAgKiBAbWVtYmVyT2YgVmVyc2lvbkNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLnZlcnNpb25JZCBUaGUgdmVyc2lvbiBmb3Igd2hpY2ggdG8gcmV0cmlldmUgdGhlIHJlbW90ZSBsaW5rXG4gICAgICogQHBhcmFtIG9wdHMucmVtb3RlTGlua0lkIFRoZSBnbG9iYWwgaWQgb2YgdGhlIHJlbW90ZSBsaW5rXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGxpbmsgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGxpbmsgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0UmVtb3RlTGluayA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3JlbW90ZWxpbmsvJyArIG9wdHMucmVtb3RlTGlua0lkLCAnR0VUJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSByZW1vdGUgdmVyc2lvbiBsaW5rLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBkZWxldGVSZW1vdGVMaW5rXG4gICAgICogQG1lbWJlck9mIFZlcnNpb25DbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy52ZXJzaW9uSWQgVGhlIHZlcnNpb24gaWRcbiAgICAgKiBAcGFyYW0gb3B0cy5yZW1vdGVMaW5rSWQgVGhlIGdsb2JhbCBpZCBvZiB0aGUgcmVtb3RlIGxpbmtcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgbGluayBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGxpbmsgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZVJlbW90ZUxpbmsgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9yZW1vdGVsaW5rLycgKyBvcHRzLnJlbW90ZUxpbmtJZCwgJ0RFTEVURScpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrLCAnUmVtb3RlIExpbmsgRGVsZXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBwcm9qZWN0IHZlcnNpb24uXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGRlbGV0ZVZlcnNpb25cbiAgICAgKiBAbWVtYmVyT2YgVmVyc2lvbkNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gb3B0cy52ZXJzaW9uSWQgVGhlIGlkIG9mIHRoZSB2ZXJzaW9uIHRvIGRlbGV0ZS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgdmVyc2lvbiBpcyBkZWxldGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHZlcnNpb24gaXMgZGVsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZVZlcnNpb24gPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJycsICdERUxFVEUnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgJ1ZlcnNpb24gRGVsZXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYWxsIHJlbW90ZSB2ZXJzaW9uIGxpbmtzIGZvciBhIGdpdmVuIHZlcnNpb24gaWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGRlbGV0ZUFsbFJlbW90ZUxpbmtzXG4gICAgICogQG1lbWJlck9mIFZlcnNpb25DbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IG9wdHMudmVyc2lvbklkIFRoZSBpZCBvZiB0aGUgdmVyc2lvbiB0byBkZWxldGUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHZlcnNpb24gaXMgZGVsZXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB2ZXJzaW9uIGlzIGRlbGV0ZWQuXG4gICAgICovXG4gICAgdGhpcy5kZWxldGVBbGxSZW1vdGVMaW5rcyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3JlbW90ZWxpbmsnLCAnREVMRVRFJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdSZW1vdGUgTGlua3MgRGVsZXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByZW1vdGUgdmVyc2lvbiBsaW5rcyBmb3IgYSBnaXZlbiBnbG9iYWwgaWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldEdsb2JhbFJlbW90ZUxpbmtcbiAgICAgKiBAbWVtYmVyT2YgVmVyc2lvbkNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLmdsb2JhbElkIFRoZSBnbG9iYWwgaWQgb2YgdGhlIHJlbW90ZSByZXNvdXJjZSB0aGF0IGlzIGxpbmtlZCB0byB0aGUgdmVyc2lvbnNcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgcmVtb3RlIGxpbmsgaXMgcmV0dXJuZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgcmVtb3RlIGxpbmsgaXMgcmV0dXJuZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRHbG9iYWxSZW1vdGVMaW5rID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy92ZXJzaW9uL3JlbW90ZWxpbmsnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtnbG9iYWxJZDogb3B0cy5nbG9iYWxJZH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEJ1aWxkIG91dCB0aGUgcmVxdWVzdCBvcHRpb25zIG5lY2Vzc2FyeSB0byBtYWtlIGEgcGFydGljdWxhciBBUEkgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBidWlsZFJlcXVlc3RPcHRpb25zXG4gICAgICogQG1lbWJlck9mIEZpbHRlckNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnZlcnNpb25JZCBUaGUgaWQgb2YgdGhlIHNjcmVlbiB0byB1c2UgaW4gdGhlIHBhdGguXG4gICAgICogQHBhcmFtIHtBcnJheX0gW29wdHMuZmllbGRzXSBUaGUgZmllbGRzIHRvIGluY2x1ZGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbb3B0cy5leHBhbmRdIFRoZSBmaWVsZHMgdG8gZXhwYW5kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIGVuZHBvaW50IGZvbGxvd2luZyAvdmVyc2lvbi97aWR9XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBUaGUgcmVxdWVzdCBtZXRob2QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtib2R5XSBUaGUgcmVxdWVzdCBib2R5LCBpZiBhbnkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtxc10gVGhlIHF1ZXJ5c3RyaW5nLCBpZiBhbnkuICBvcHRzLmV4cGFuZCBhbmQgb3B0cy5maWVsZHMgYXJyYXlzIHdpbGwgYmUgYXV0b21hZ2ljYWxseSBhZGRlZC5cbiAgICAgKiBAcmV0dXJucyB7e3VyaTogc3RyaW5nLCBtZXRob2Q6IHN0cmluZywgYm9keTogT2JqZWN0LCBxczogT2JqZWN0LCBmb2xsb3dBbGxSZWRpcmVjdHM6IGJvb2xlYW4sIGpzb246IGJvb2xlYW59fVxuICAgICAqL1xuICAgIHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRzLCBwYXRoLCBtZXRob2QsIGJvZHksIHFzKSB7XG4gICAgICAgIHZhciBiYXNlUGF0aCA9ICcvdmVyc2lvbi8nICsgb3B0cy52ZXJzaW9uSWQ7XG4gICAgICAgIGlmICghcXMpIHFzID0ge307XG4gICAgICAgIGlmICghYm9keSkgYm9keSA9IHt9O1xuXG4gICAgICAgIGlmIChvcHRzLmZpZWxkcykge1xuICAgICAgICAgICAgcXMuZmllbGRzID0gJyc7XG4gICAgICAgICAgICBvcHRzLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICAgIHFzLmZpZWxkcyArPSBmaWVsZCArICcsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBxcy5maWVsZHMgPSBxcy5maWVsZHMuc2xpY2UoMCwgLTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdHMuZXhwYW5kKSB7XG4gICAgICAgICAgICBxcy5leHBhbmQgPSAnJztcbiAgICAgICAgICAgIG9wdHMuZXhwYW5kLmZvckVhY2goZnVuY3Rpb24gKGV4KSB7XG4gICAgICAgICAgICAgICAgcXMuZXhwYW5kICs9IGV4ICsgJywnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHFzLmV4cGFuZCA9IHFzLmV4cGFuZC5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoYmFzZVBhdGggKyBwYXRoKSxcbiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgIHFzOiBxcyxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGpzb246IHRydWVcbiAgICAgICAgfTtcbiAgICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViaG9va0NsaWVudDtcblxuLyoqXG4gKiBVc2VkIHRvIGFjY2VzcyBKaXJhIFJFU1QgZW5kcG9pbnRzIGluICcvcmVzdC93ZWJob29rLzEuMC93ZWJob29rJ1xuICpcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIFdlYmhvb2tDbGllbnRcbiAqL1xuZnVuY3Rpb24gV2ViaG9va0NsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGFsbCByZWdpc3RlcmVkIHdlYmhvb2tzLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRBbGxXZWJob29rc1xuICAgICAqIEBtZW1iZXJPZiBXZWJob29rQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIElnbm9yZWRcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgd2ViaG9va3MgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB3ZWJob29rcyBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0QWxsV2ViaG9va3MgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFdlYmhvb2tVUkwoJy93ZWJob29rJyksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgd2ViaG9vayB3aXRoIGEgc3BlY2lmaWMgSUQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFdlYmhvb2tcbiAgICAgKiBAbWVtYmVyT2YgV2ViaG9va0NsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgb3B0aW9ucyBzZW50IHRvIHRoZSBKSVJBIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy53ZWJob29rSWQgVGhlIG51bWVyaWNhbCB3ZWJob29rIElELlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB3ZWJob29rIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB3ZWJob29rIGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFdlYmhvb2sgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmk6IHRoaXMuamlyYUNsaWVudC5idWlsZFdlYmhvb2tVUkwoJy93ZWJob29rLycgKyBvcHRzLndlYmhvb2tJZCksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBuZXcgd2ViaG9vay5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3JlYXRlV2ViaG9va1xuICAgICAqIEBtZW1iZXJPZiBXZWJob29rQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBvcHRpb25zIHNlbnQgdG8gdGhlIEpJUkEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLm5hbWUgVGhlIG5hbWUgb2YgdGhlIHdlYmhvb2suXG4gICAgICogQHBhcmFtIG9wdHMudXJsIFRoZSBVUkwgb2YgdGhlIHdlYmhvb2suXG4gICAgICogQHBhcmFtIG9wdHMuZXZlbnRzIEFuIGFycmF5IG9mIGV2ZW50cyB3aXRoIHdoaWNoIHRoZSB3ZWJob29rIHNob3VsZCBiZSByZWdpc3RlcmVkLiBTZWVcbiAgICAgKiAgIHtAbGluayBodHRwczovL2RldmVsb3Blci5hdGxhc3NpYW4uY29tL2ppcmFkZXYvamlyYS1hcGlzL3dlYmhvb2tzI1dlYmhvb2tzLWNvbmZpZ3VyZUNvbmZpZ3VyaW5nYXdlYmhvb2t9LlxuICAgICAqIEBwYXJhbSBvcHRzLmVuYWJsZWQgV2hldGhlciB0aGUgd2ViaG9vayBpcyBlbmFibGVkLlxuICAgICAqIEBwYXJhbSBvcHRzLmZpbHRlciBBbiBvYmplY3QgY29udGFpbmluZyBmaWx0ZXIgY29uZmlndXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gb3B0cy5maWx0ZXIuaXNzdWUtcmVsYXRlZC1ldmVudHMtc2VjdGlvbiBBIGZpbHRlciBmb3IgaXNzdWVzLCB3cml0dGVuIGluIEpRTC5cbiAgICAgKiBAcGFyYW0gb3B0cy5leGNsdWRlQm9keSBXaGV0aGVyIHRvIHNlbmQgYW4gZW1wdHkgYm9keSB0byB0aGUgd2ViaG9vayBVUkwuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHdlYmhvb2sgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHdlYmhvb2sgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlV2ViaG9vayA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkV2ViaG9va1VSTCgnL3dlYmhvb2snKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhIHJlZ2lzdGVyZWQgd2ViaG9vay5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlV2ViaG9va1xuICAgICAqIEBtZW1iZXJPZiBXZWJob29rQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBvcHRpb25zIHNlbnQgdG8gdGhlIEpJUkEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLndlYmhvb2tJZCBUaGUgbnVtZXJpY2FsIHdlYmhvb2sgSUQuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHdlYmhvb2sgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHdlYmhvb2sgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlV2ViaG9vayA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkV2ViaG9va1VSTCgnL3dlYmhvb2svJyArIG9wdHMud2ViaG9va0lkKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdvcmtmbG93Q2xpZW50O1xuXG4vKipcbiAqIFVzZWQgdG8gYWNjZXNzIEppcmEgUkVTVCBlbmRwb2ludHMgaW4gJy9yZXN0L2FwaS8yL3dvcmtmbG93J1xuICpcbiAqIEBwYXJhbSB7SmlyYUNsaWVudH0gamlyYUNsaWVudFxuICogQGNvbnN0cnVjdG9yIFdvcmtmbG93Q2xpZW50XG4gKi9cbmZ1bmN0aW9uIFdvcmtmbG93Q2xpZW50KGppcmFDbGllbnQpIHtcbiAgICB0aGlzLmppcmFDbGllbnQgPSBqaXJhQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgd29ya2Zsb3dzLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRXb3JrZmxvd3NcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy53b3JrZmxvd05hbWVdIFRoZSBuYW1lIG9mIHRoZSB3b3JrZmxvdyB0byByZXRyaWV2ZS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgd29ya2Zsb3cocykgaGF2ZSBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB3b3JrZmxvdyhzKSBoYXZlIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0V29ya2Zsb3dzID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBxcyA9IHt9O1xuICAgICAgICBpZiAob3B0cyAmJiB0eXBlb2Ygb3B0cyA9PT0gJ29iamVjdCcgJiYgb3B0cy5oYXNPd25Qcm9wZXJ0eSgnd29ya2Zsb3dOYW1lJykpIHtcbiAgICAgICAgICAgIHFzLndvcmtmbG93TmFtZSA9IG9wdHMud29ya2Zsb3dOYW1lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy93b3JrZmxvdycpLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBxczogcXNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gV29ya2Zsb3dTY2hlbWVDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvd29ya2Zsb3dzY2hlbWUnXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBXb3JrZmxvd1NjaGVtZUNsaWVudFxuICovXG5mdW5jdGlvbiBXb3JrZmxvd1NjaGVtZUNsaWVudChqaXJhQ2xpZW50KSB7XG4gICAgdGhpcy5qaXJhQ2xpZW50ID0gamlyYUNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyB3b3JrZmxvdyBzY2hlbWUuIFRoZSBib2R5IGNvbnRhaW5zIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIG5ldyBzY2hlbWUuIFZhbHVlcyBub3QgcGFzc2VkIGFyZVxuICAgICAqIGFzc3VtZWQgdG8gYmUgc2V0IHRvIHRoZWlyIGRlZmF1bHRzLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVXb3JrZmxvd1NjaGVtZVxuICAgICAqIEBtZW1iZXJPZiBXb3JrZmxvd1NjaGVtZUNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93U2NoZW1lIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMjE5Nn1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgd29ya2Zsb3cgc2NoZW1lIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgd29ya2Zsb3cgc2NoZW1lIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICovXG4gICAgdGhpcy5jcmVhdGVXb3JrZmxvd1NjaGVtZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvd29ya2Zsb3dzY2hlbWUnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGJvZHk6IG9wdHMud29ya2Zsb3dTY2hlbWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgcGFzc2VkIHdvcmtmbG93IHNjaGVtZS4gVGhlIGJvZHkgb2YgdGhlIHJlcXVlc3QgaXMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLiBWYWx1ZXNcbiAgICAgKiBub3QgcGFzc2VkIGFyZSBhc3N1bWVkIHRvIGluZGljYXRlIG5vIGNoYW5nZSBmb3IgdGhhdCBmaWVsZC4gVGhlIHBhc3NlZCByZXByZXNlbnRhdGlvbiBjYW4gaGF2ZSBpdHNcbiAgICAgKiB1cGRhdGVEcmFmdElmTmVlZGVkIGZsYWcgc2V0IHRvIHRydWUgdG8gaW5kaWNhdGUgdGhhdCB0aGUgZHJhZnQgc2hvdWxkIGJlIGNyZWF0ZWQgYW5kL29yIHVwZGF0ZWQgd2hlbiB0aGUgYWN0dWFsXG4gICAgICogc2NoZW1lIGNhbm5vdCBiZSBlZGl0ZWQgKGUuZy4gd2hlbiB0aGUgc2NoZW1lIGlzIGJlaW5nIHVzZWQgYnkgYSBwcm9qZWN0KS4gVmFsdWVzIG5vdCBhcHBlYXJpbmcgdGhlIGJvZHkgd2lsbFxuICAgICAqIG5vdCBiZSB0b3VjaGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBlZGl0V29ya2Zsb3dTY2hlbWVcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dTY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy53b3JrZmxvd1NjaGVtZUlkIFRoZSBpZCBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93U2NoZW1lIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMjMwNX1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgd29ya2Zsb3cgc2NoZW1lIGhhcyBiZWVuIGVkaXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB3b3JrZmxvdyBzY2hlbWUgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqL1xuICAgIHRoaXMuZWRpdFdvcmtmbG93U2NoZW1lID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcnLCAnUFVUJywgb3B0cy53b3JrZmxvd1NjaGVtZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHJlcXVlc3RlZCB3b3JrZmxvdyBzY2hlbWVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0V29ya2Zsb3dTY2hlbWVcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dTY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy53b3JrZmxvd1NjaGVtZUlkIFRoZSBpZCBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqIEBwYXJhbSBbb3B0cy5yZXR1cm5EcmFmdElmRXhpc3RzPWZhbHNlXSB3aGVuIHRydWUgaW5kaWNhdGVzIHRoYXQgYSBzY2hlbWUncyBkcmFmdCwgaWYgaXQgZXhpc3RzLCBzaG91bGQgYmVcbiAgICAgKiAgICAgcXVlcmllZCBpbnN0ZWFkIG9mIHRoZSBzY2hlbWUgaXRzZWxmLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB3b3JrZmxvdyBzY2hlbWUgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHdvcmtmbG93IHNjaGVtZSBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXRXb3JrZmxvd1NjaGVtZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnJywgJ0dFVCcsIG51bGwsIHtyZXR1cm5EcmFmdElmRXhpc3RzOiBvcHRzLnJldHVybkRyYWZ0SWZFeGlzdHN9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSB0aGUgcGFzc2VkIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlV29ya2Zsb3dTY2hlbWVcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dTY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy53b3JrZmxvd1NjaGVtZUlkIFRoZSBpZCBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB3b3JrZmxvdyBzY2hlbWUgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB3b3JrZmxvdyBzY2hlbWUgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZVdvcmtmbG93U2NoZW1lID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcnLCAnREVMRVRFJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssICdXb3JrZmxvdyBTY2hlbWUgRGVsZXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkcmFmdCBmb3IgdGhlIHBhc3NlZCBzY2hlbWUuIFRoZSBkcmFmdCB3aWxsIGJlIGEgY29weSBvZiB0aGUgc3RhdGUgb2YgdGhlIHBhcmVudC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3JlYXRlRHJhZnRcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dTY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy53b3JrZmxvd1NjaGVtZUlkIFRoZSBpZCBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBkcmFmdCBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGRyYWZ0IGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICovXG4gICAgdGhpcy5jcmVhdGVEcmFmdCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL2NyZWF0ZWRyYWZ0JywgJ1BPU1QnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGVmYXVsdCB3b3JrZmxvdyBmcm9tIHRoZSBwYXNzZWQgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXREZWZhdWx0V29ya2Zsb3dcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dTY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy53b3JrZmxvd1NjaGVtZUlkIFRoZSBpZCBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqIEBwYXJhbSBvcHRzLnJldHVybkRyYWZ0SWZFeGlzdHMgd2hlbiB0cnVlIGluZGljYXRlcyB0aGF0IGEgc2NoZW1lJ3MgZHJhZnQsIGlmIGl0IGV4aXN0cywgc2hvdWxkIGJlIHF1ZXJpZWRcbiAgICAgKiAgICAgaW5zdGVhZCBvZiB0aGUgc2NoZW1lIGl0c2VsZi5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgZGVmYXVsdCB3b3JrZmxvdyBpcyByZXR1cm5lZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBkZWZhdWx0IHdvcmtmbG93IGlzIHJldHVybmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0RGVmYXVsdFdvcmtmbG93ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvZGVmYXVsdCcsICdHRVQnLCBudWxsLCB7cmV0dXJuRHJhZnRJZkV4aXN0czogb3B0cy5yZXR1cm5EcmFmdElmRXhpc3RzfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGRlZmF1bHQgd29ya2Zsb3cgZnJvbSB0aGUgcGFzc2VkIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgcmVtb3ZlRGVmYXVsdFdvcmtmbG93XG4gICAgICogQG1lbWJlck9mIFdvcmtmbG93U2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMud29ya2Zsb3dTY2hlbWVJZCBUaGUgaWQgb2YgdGhlIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKiBAcGFyYW0gb3B0cy51cGRhdGVEcmFmdElmTmVlZGVkIHdoZW4gdHJ1ZSB3aWxsIGNyZWF0ZSBhbmQgcmV0dXJuIGEgZHJhZnQgd2hlbiB0aGUgd29ya2Zsb3cgc2NoZW1lIGNhbm5vdCBiZVxuICAgICAqICAgICBlZGl0ZWQgKGUuZy4gd2hlbiBpdCBpcyBiZWluZyB1c2VkIGJ5IGEgcHJvamVjdCkuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGRlZmF1bCB3b3JrZmxvdyBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGRlZmF1bCB3b3JrZmxvdyBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAqL1xuICAgIHRoaXMucmVtb3ZlRGVmYXVsdFdvcmtmbG93ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvZGVmYXVsdCcsICdERUxFVEUnLCBudWxsLCB7dXBkYXRlRHJhZnRJZk5lZWRlZDogb3B0cy51cGRhdGVEcmFmdElmTmVlZGVkfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGRlZmF1bHQgd29ya2Zsb3cgZnJvbSB0aGUgcGFzc2VkIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2V0RGVmYXVsdFdvcmtmbG93XG4gICAgICogQG1lbWJlck9mIFdvcmtmbG93U2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMud29ya2Zsb3dTY2hlbWVJZCBUaGUgaWQgb2YgdGhlIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKiBAcGFyYW0gb3B0cy53b3JrZmxvd05hbWUgVGhlIG5hbWUgb2YgdGhlIG5ldyBkZWFmYXVsdCB3b3JrZmxvd1xuICAgICAqIEBwYXJhbSBvcHRzLnVwZGF0ZURyYWZ0SWZOZWVkZWQgd2hlbiB0cnVlIHdpbGwgY3JlYXRlIGFuZCByZXR1cm4gYSBkcmFmdCB3aGVuIHRoZSB3b3JrZmxvdyBzY2hlbWUgY2Fubm90IGJlXG4gICAgICogICAgIGVkaXRlZCAoZS5nLiB3aGVuIGl0IGlzIGJlaW5nIHVzZWQgYnkgYSBwcm9qZWN0KS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgZGVmYXVsdCB3b3JrZmxvdyBoYXMgYmVlbiB1cGRhdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGRlZmF1bHQgd29ya2Zsb3cgaGFzIGJlZW4gdXBkYXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLnNldERlZmF1bHRXb3JrZmxvdyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL2RlZmF1bHQnLCAnUFVUJywge1xuICAgICAgICAgICAgd29ya2Zsb3c6IG9wdHMud29ya2Zsb3dOYW1lLFxuICAgICAgICAgICAgdXBkYXRlRHJhZnRJZk5lZWRlZDogb3B0cy51cGRhdGVEcmFmdElmTmVlZGVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZXF1ZXN0ZWQgZHJhZnQgd29ya2Zsb3cgc2NoZW1lXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldERyYWZ0XG4gICAgICogQG1lbWJlck9mIFdvcmtmbG93U2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMud29ya2Zsb3dTY2hlbWVJZCBUaGUgaWQgb2YgdGhlIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgZHJhZnQgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGRyYWZ0IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldERyYWZ0ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvZHJhZnQnLCAnR0VUJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYSBkcmFmdCB3b3JrZmxvdyBzY2hlbWUuIFRoZSBkcmFmdCB3aWxsIGNyZWF0ZWQgaWYgbmVjZXNzYXJ5LiBUaGUgYm9keSBpcyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuICAgICAqIHdvcmtmbG93IHNjaGVtZS4gVmFsdWVzIG5vdCBwYXNzZWQgYXJlIGFzc3VtZWQgdG8gaW5kaWNhdGUgbm8gY2hhbmdlIGZvciB0aGF0IGZpZWxkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBlZGl0RHJhZnRcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dTY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSS5cbiAgICAgKiBAcGFyYW0gb3B0cy53b3JrZmxvd1NjaGVtZUlkIFRoZSBpZCBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqIEBwYXJhbSBvcHRzLmRyYWZ0IFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMjU3NX1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgZHJhZnQgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGRyYWZ0IGhhcyBiZWVuIGVkaXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmVkaXREcmFmdCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL2RyYWZ0JywgJ1BVVCcsIG9wdHMuZHJhZnQpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIHRoZSBwYXNzZWQgZHJhZnQgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBkZWxldGVEcmFmdFxuICAgICAqIEBtZW1iZXJPZiBXb3JrZmxvd1NjaGVtZUNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93U2NoZW1lSWQgVGhlIGlkIG9mIHRoZSB3b3JrZmxvdyBzY2hlbWUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGRyYWZ0IGhhcyBiZWVuIGRlbGV0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgZHJhZnQgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZURyYWZ0ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvZHJhZnQnLCAnREVMRVRFJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRlZmF1bHQgd29ya2Zsb3cgZnJvbSB0aGUgcGFzc2VkIGRyYWZ0IHdvcmtmbG93IHNjaGVtZVxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXREcmFmdERlZmF1bHRXb3JrZmxvd1xuICAgICAqIEBtZW1iZXJPZiBXb3JrZmxvd1NjaGVtZUNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93U2NoZW1lSWQgVGhlIGlkIG9mIHRoZSB3b3JrZmxvdyBzY2hlbWUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGRlZmF1bHQgd29ya2Zsb3cgaXMgcmV0dXJuZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgZGVmYXVsdCB3b3JrZmxvdyBpcyByZXR1cm5lZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldERyYWZ0RGVmYXVsdFdvcmtmbG93ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvZHJhZnQvZGVmYXVsdCcsICdHRVQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgZGVmYXVsdCB3b3JrZmxvdyBmcm9tIHRoZSBwYXNzZWQgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBzZXREcmFmdERlZmF1bHRXb3JrZmxvd1xuICAgICAqIEBtZW1iZXJPZiBXb3JrZmxvd1NjaGVtZUNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93U2NoZW1lSWQgVGhlIGlkIG9mIHRoZSB3b3JrZmxvdyBzY2hlbWUuXG4gICAgICogQHBhcmFtIG9wdHMud29ya2Zsb3dOYW1lIFRoZSBuYW1lIG9mIHRoZSBuZXcgZGVmYXVsdCB3b3JrZmxvd1xuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBkZWZhdWx0IHdvcmtmbG93IGhhcyBiZWVuIHVwZGF0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgZGVmYXVsdCB3b3JrZmxvdyBoYXMgYmVlbiB1cGRhdGVkLlxuICAgICAqL1xuICAgIHRoaXMuc2V0RHJhZnREZWZhdWx0V29ya2Zsb3cgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9kcmFmdC9kZWZhdWx0JywgJ1BVVCcsIHtcbiAgICAgICAgICAgIHdvcmtmbG93OiBvcHRzLndvcmtmbG93TmFtZSxcbiAgICAgICAgICAgIHVwZGF0ZURyYWZ0SWZOZWVkZWQ6IG9wdHMudXBkYXRlRHJhZnRJZk5lZWRlZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgZGVmYXVsdCB3b3JrZmxvdyBmcm9tIHRoZSBwYXNzZWQgZHJhZnQgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqXG4gICAgICogQG1ldGhvZCByZW1vdmVEcmFmdERlZmF1bHRXb3JrZmxvd1xuICAgICAqIEBtZW1iZXJPZiBXb3JrZmxvd1NjaGVtZUNsaWVudCNcbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJLlxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93U2NoZW1lSWQgVGhlIGlkIG9mIHRoZSB3b3JrZmxvdyBzY2hlbWUuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGRlZmF1bCB3b3JrZmxvdyBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGRlZmF1bCB3b3JrZmxvdyBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAqL1xuICAgIHRoaXMucmVtb3ZlRHJhZnREZWZhdWx0V29ya2Zsb3cgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9kcmFmdC9kZWZhdWx0JywgJ0RFTEVURScpO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaXNzdWUgdHlwZSBtYXBwaW5nIGZvciB0aGUgcGFzc2VkIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0SXNzdWVUeXBlXG4gICAgICogQG1lbWJlck9mIFdvcmtmbG93U2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMud29ya2Zsb3dTY2hlbWVJZCBUaGUgaWQgb2YgdGhlIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKiBAcGFyYW0gb3B0cy5pc3N1ZVR5cGUgVGhlIGlzc3VlIHR5cGVcbiAgICAgKiBAcGFyYW0gb3B0cy5yZXR1cm5EcmFmdElmRXhpc3RzIHdoZW4gdHJ1ZSBpbmRpY2F0ZXMgdGhhdCBhIHNjaGVtZSdzIGRyYWZ0LCBpZiBpdCBleGlzdHMsIHNob3VsZCBiZSBxdWVyaWVkXG4gICAgICogICAgIGluc3RlYWQgb2YgdGhlIHNjaGVtZSBpdHNlbGYuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGlzc3VlIHR5cGUgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGlzc3VlIHR5cGUgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0SXNzdWVUeXBlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvaXNzdWV0eXBlLycgKyBvcHRzLmlzc3VlVHlwZSwgJ0dFVCcsIG51bGwsXG4gICAgICAgICAgICB7cmV0dXJuRHJhZnRJZkV4aXN0czogb3B0cy5yZXR1cm5EcmFmdElmRXhpc3RzfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGlzc3VlIHR5cGUgbWFwcGluZyBmb3IgdGhlIHBhc3NlZCBzY2hlbWUuIFRoZSBwYXNzZWQgcmVwcmVzZW50YXRpb24gY2FuIGhhdmUgaXRzIHVwZGF0ZURyYWZ0SWZOZWVkZWRcbiAgICAgKiBmbGFnIHNldCB0byB0cnVlIHRvIGluZGljYXRlIHRoYXQgdGhlIGRyYWZ0IHNob3VsZCBiZSBjcmVhdGVkL3VwZGF0ZWQgd2hlbiB0aGUgYWN0dWFsIHNjaGVtZSBjYW5ub3QgYmUgZWRpdGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBlZGl0SXNzdWVUeXBlXG4gICAgICogQG1lbWJlck9mIFdvcmtmbG93U2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy53b3JrZmxvd1NjaGVtZUlkIFRoZSBpZCBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqIEBwYXJhbSBvcHRzLmlzc3VlVHlwZSBUaGUgaXNzdWUgdHlwZVxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93IFRoZSBuZXcgd29ya2Zsb3dcbiAgICAgKiBAcGFyYW0gb3B0cy51cGRhdGVEcmFmdElmTmVlZGVkIHdoZW4gdHJ1ZSB3aWxsIGNyZWF0ZSBhbmQgcmV0dXJuIGEgZHJhZnQgd2hlbiB0aGUgd29ya2Zsb3cgc2NoZW1lIGNhbm5vdCBiZVxuICAgICAqICAgICBlZGl0ZWQgKGUuZy4gd2hlbiBpdCBpcyBiZWluZyB1c2VkIGJ5IGEgcHJvamVjdCkuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGlzc3VlIHR5cGUgaGFzIGJlZW4gZWRpdGVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgaXNzdWUgdHlwZSBoYXMgYmVlbiBlZGl0ZWRcbiAgICAgKi9cbiAgICB0aGlzLmVkaXRJc3N1ZVR5cGUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9pc3N1ZXR5cGUvJyArIG9wdHMuaXNzdWVUeXBlLCAnUFVUJywge1xuICAgICAgICAgICAgd29ya2Zsb3c6IG9wdHMud29ya2Zsb3csXG4gICAgICAgICAgICB1cGRhdGVEcmFmdElmTmVlZGVkOiBvcHRzLnVwZGF0ZURyYWZ0SWZOZWVkZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIHNwZWNpZmllZCBpc3N1ZSB0eXBlIG1hcHBpbmcgZnJvbSB0aGUgc2NoZW1lLlxuICAgICAqXG4gICAgICogQG1ldGhvZCByZW1vdmVJc3N1ZVR5cGVcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dTY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93U2NoZW1lSWQgVGhlIGlkIG9mIHRoZSB3b3JrZmxvdyBzY2hlbWUuXG4gICAgICogQHBhcmFtIG9wdHMuaXNzdWVUeXBlIFRoZSBpc3N1ZSB0eXBlXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGlzc3VlIHR5cGUgbWFwcGluZyBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGlzc3VlIHR5cGUgbWFwcGluZyBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAqL1xuICAgIHRoaXMucmVtb3ZlSXNzdWVUeXBlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvaXNzdWV0eXBlLycgKyBvcHRzLmlzc3VlVHlwZSwgJ0RFTEVURScsIG51bGwsIHtcbiAgICAgICAgICAgIHVwZGF0ZURyYWZ0SWZOZWVkZWQ6IG9wdHMudXBkYXRlRHJhZnRJZk5lZWRlZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlzc3VlIHR5cGUgbWFwcGluZyBmb3IgdGhlIHBhc3NlZCBkcmFmdCB3b3JrZmxvdyBzY2hlbWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldERyYWZ0SXNzdWVUeXBlXG4gICAgICogQG1lbWJlck9mIFdvcmtmbG93U2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUEkuXG4gICAgICogQHBhcmFtIG9wdHMud29ya2Zsb3dTY2hlbWVJZCBUaGUgaWQgb2YgdGhlIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKiBAcGFyYW0gb3B0cy5pc3N1ZVR5cGUgVGhlIGlzc3VlIHR5cGVcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgaXNzdWUgdHlwZSBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgaXNzdWUgdHlwZSBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXREcmFmdElzc3VlVHlwZSA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL2RyYWZ0L2lzc3VldHlwZS8nICsgb3B0cy5pc3N1ZVR5cGUsICdHRVQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgaXNzdWUgdHlwZSBtYXBwaW5nIGZvciB0aGUgcGFzc2VkIGRyYWZ0IHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZWRpdERyYWZ0SXNzdWVUeXBlXG4gICAgICogQG1lbWJlck9mIFdvcmtmbG93U2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy53b3JrZmxvd1NjaGVtZUlkIFRoZSBpZCBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqIEBwYXJhbSBvcHRzLmlzc3VlVHlwZSBUaGUgaXNzdWUgdHlwZVxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93IFRoZSBuZXcgd29ya2Zsb3dcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgaXNzdWUgdHlwZSBoYXMgYmVlbiBlZGl0ZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBpc3N1ZSB0eXBlIGhhcyBiZWVuIGVkaXRlZFxuICAgICAqL1xuICAgIHRoaXMuZWRpdERyYWZ0SXNzdWVUeXBlID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvZHJhZnQvaXNzdWV0eXBlLycgKyBvcHRzLmlzc3VlVHlwZSwgJ1BVVCcsIHt3b3JrZmxvdzogb3B0cy53b3JrZmxvd30pO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBzcGVjaWZpZWQgaXNzdWUgdHlwZSBtYXBwaW5nIGZyb20gdGhlIHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgcmVtb3ZlRHJhZnRJc3N1ZVR5cGVcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dTY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93U2NoZW1lSWQgVGhlIGlkIG9mIHRoZSB3b3JrZmxvdyBzY2hlbWUuXG4gICAgICogQHBhcmFtIG9wdHMuaXNzdWVUeXBlIFRoZSBpc3N1ZSB0eXBlXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIGlzc3VlIHR5cGUgbWFwcGluZyBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGlzc3VlIHR5cGUgbWFwcGluZyBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAqL1xuICAgIHRoaXMucmVtb3ZlRHJhZnRJc3N1ZVR5cGUgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9kcmFmdC9pc3N1ZXR5cGUvJyArIG9wdHMuaXNzdWVUeXBlLCAnREVMRVRFJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB3b3JrZmxvdyBtYXBwaW5ncyBvciByZXF1ZXN0ZWQgbWFwcGluZyB0byB0aGUgY2FsbGVyIGZvciB0aGUgcGFzc2VkIHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0V29ya2Zsb3dcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dTY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93U2NoZW1lSWQgVGhlIGlkIG9mIHRoZSB3b3JrZmxvdyBzY2hlbWUuXG4gICAgICogQHBhcmFtIG9wdHMud29ya2Zsb3dOYW1lIFRoZSBuYW1lIG9mIHRoZSB3b3JrZmxvdy5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgd29ya2Zsb3cgaGFzIGJlZW4gcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHdvcmtmbG93IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldFdvcmtmbG93ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvd29ya2Zsb3cnLCAnR0VUJywgbnVsbCwge1xuICAgICAgICAgICAgd29ya2Zsb3dOYW1lOiBvcHRzLndvcmtmbG93TmFtZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHdvcmtmbG93IG1hcHBpbmdzIG9yIHJlcXVlc3RlZCBtYXBwaW5nIHRvIHRoZSBjYWxsZXIgZm9yIHRoZSBwYXNzZWQgZHJhZnQgc2NoZW1lLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXREcmFmdFdvcmtmbG93XG4gICAgICogQG1lbWJlck9mIFdvcmtmbG93U2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0gb3B0cy53b3JrZmxvd1NjaGVtZUlkIFRoZSBpZCBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqIEBwYXJhbSBvcHRzLndvcmtmbG93TmFtZSBUaGUgbmFtZSBvZiB0aGUgd29ya2Zsb3cuXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHdvcmtmbG93IGhhcyBiZWVuIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSB3b3JrZmxvdyBoYXMgYmVlbiByZXRyaWV2ZWQuXG4gICAgICovXG4gICAgdGhpcy5nZXREcmFmdFdvcmtmbG93ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvZHJhZnQvd29ya2Zsb3cnLCAnR0VUJywgbnVsbCwge1xuICAgICAgICAgICAgd29ya2Zsb3dOYW1lOiBvcHRzLndvcmtmbG93TmFtZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgc2NoZW1lIHRvIGluY2x1ZGUgdGhlIHBhc3NlZCBtYXBwaW5nLiBUaGUgYm9keSBpcyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB3b3JrZmxvdyBtYXBwaW5nLiBWYWx1ZXNcbiAgICAgKiBub3QgcGFzc2VkIGFyZSBhc3N1bWVkIHRvIGluZGljYXRlIG5vIGNoYW5nZSBmb3IgdGhhdCBmaWVsZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZWRpdFdvcmtmbG93XG4gICAgICogQG1lbWJlck9mIFdvcmtmbG93U2NoZW1lQ2xpZW50I1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSByZXF1ZXN0IG9wdGlvbnMgc2VudCB0byB0aGUgSmlyYSBBUElcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy53b3JrZmxvd1NjaGVtZUlkIFRoZSBpZCBvZiB0aGUgd29ya2Zsb3cgc2NoZW1lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLndvcmtmbG93TmFtZSBUaGUgbmFtZSBvZiB0aGUgd29ya2Zsb3cuXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3B0cy5pc3N1ZVR5cGVzIFRoZSBuZXcgaXNzdWUgdHlwZXMgdG8gaW5jbHVlIGluIHRoZSB3b3JrZmxvdy5cbiAgICAgKiAgICAgIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9SRVNUL2xhdGVzdC8jZDJlMjUwOX1cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgd29ya2Zsb3cgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHdvcmtmbG93IGhhcyBiZWVuIGVkaXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmVkaXRXb3JrZmxvdyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL3dvcmtmbG93JywgJ1BVVCcsIHtcbiAgICAgICAgICAgIHdvcmtmbG93OiBvcHRzLndvcmtmbG93TmFtZSxcbiAgICAgICAgICAgIGlzc3VlVHlwZXM6IG9wdHMuaXNzdWVUeXBlc1xuICAgICAgICB9LCB7d29ya2Zsb3dOYW1lOiBvcHRzLndvcmtmbG93TmFtZX0pO1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBkcmFmdCBzY2hlbWUgdG8gaW5jbHVkZSB0aGUgcGFzc2VkIG1hcHBpbmcuIFRoZSBib2R5IGlzIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIHdvcmtmbG93IG1hcHBpbmcuXG4gICAgICogVmFsdWVzIG5vdCBwYXNzZWQgYXJlIGFzc3VtZWQgdG8gaW5kaWNhdGUgbm8gY2hhbmdlIGZvciB0aGF0IGZpZWxkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBlZGl0RHJhZnRXb3JrZmxvd1xuICAgICAqIEBtZW1iZXJPZiBXb3JrZmxvd1NjaGVtZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMud29ya2Zsb3dTY2hlbWVJZCBUaGUgaWQgb2YgdGhlIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy53b3JrZmxvd05hbWUgVGhlIG5hbWUgb2YgdGhlIHdvcmtmbG93LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuaXNzdWVUeXBlcyBUaGUgbmV3IGlzc3VlIHR5cGVzIHRvIGluY2x1ZSBpbiB0aGUgd29ya2Zsb3cuXG4gICAgICogICAgICBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvUkVTVC9sYXRlc3QvI2QyZTI2NzAgfVxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB3b3JrZmxvdyBoYXMgYmVlbiBlZGl0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgd29ya2Zsb3cgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqL1xuICAgIHRoaXMuZWRpdERyYWZ0V29ya2Zsb3cgPSBmdW5jdGlvbiAob3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMob3B0cywgJy9kcmFmdC93b3JrZmxvdycsICdQVVQnLCB7XG4gICAgICAgICAgICB3b3JrZmxvdzogb3B0cy53b3JrZmxvd05hbWUsXG4gICAgICAgICAgICBpc3N1ZVR5cGVzOiBvcHRzLmlzc3VlVHlwZXNcbiAgICAgICAgfSwge3dvcmtmbG93TmFtZTogb3B0cy53b3JrZmxvd05hbWV9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSB0aGUgcGFzc2VkIHdvcmtmbG93IGZyb20gdGhlIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlV29ya2Zsb3dcbiAgICAgKiBAbWVtYmVyT2YgV29ya2Zsb3dTY2hlbWVDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLndvcmtmbG93U2NoZW1lSWQgVGhlIGlkIG9mIHRoZSB3b3JrZmxvdyBzY2hlbWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMud29ya2Zsb3dOYW1lIFRoZSBuYW1lIG9mIHRoZSB3b3JrZmxvdy5cbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgd29ya2Zsb3cgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIHdvcmtmbG93IGhhcyBiZWVuIGVkaXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZVdvcmtmbG93ID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5idWlsZFJlcXVlc3RPcHRpb25zKG9wdHMsICcvd29ya2Zsb3cnLCAnREVMRVRFJywgbnVsbCwge3dvcmtmbG93TmFtZTogb3B0cy53b3JrZmxvd05hbWV9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuamlyYUNsaWVudC5tYWtlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSB0aGUgcGFzc2VkIHdvcmtmbG93IGZyb20gdGhlIHdvcmtmbG93IGRyYWZ0IHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZGVsZXRlRHJhZnRXb3JrZmxvd1xuICAgICAqIEBtZW1iZXJPZiBXb3JrZmxvd1NjaGVtZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgcmVxdWVzdCBvcHRpb25zIHNlbnQgdG8gdGhlIEppcmEgQVBJXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMud29ya2Zsb3dTY2hlbWVJZCBUaGUgaWQgb2YgdGhlIHdvcmtmbG93IHNjaGVtZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy53b3JrZmxvd05hbWUgVGhlIG5hbWUgb2YgdGhlIHdvcmtmbG93LlxuICAgICAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSB3b3JrZmxvdyBoYXMgYmVlbiBlZGl0ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgd29ya2Zsb3cgaGFzIGJlZW4gZWRpdGVkLlxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlRHJhZnRXb3JrZmxvdyA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuYnVpbGRSZXF1ZXN0T3B0aW9ucyhvcHRzLCAnL2RyYWZ0L3dvcmtmbG93JywgJ0RFTEVURScsIG51bGwsIHt3b3JrZmxvd05hbWU6IG9wdHMud29ya2Zsb3dOYW1lfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmppcmFDbGllbnQubWFrZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBvdXQgdGhlIHJlcXVlc3Qgb3B0aW9ucyBuZWNlc3NhcnkgdG8gbWFrZSBhIHBhcnRpY3VsYXIgQVBJIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYnVpbGRSZXF1ZXN0T3B0aW9uc1xuICAgICAqIEBtZW1iZXJPZiBXb3JrZmxvd1NjaGVtZUNsaWVudCNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLndvcmtmbG93U2NoZW1lSWQgVGhlIGlkIG9mIHRoZSB3b3JrZmxvd1NjaGVtZSB0byB1c2UgaW4gdGhlIHBhdGguXG4gICAgICogQHBhcmFtIHtBcnJheX0gW29wdHMuZmllbGRzXSBUaGUgZmllbGRzIHRvIGluY2x1ZGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbb3B0cy5leHBhbmRdIFRoZSBmaWVsZHMgdG8gZXhwYW5kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIGVuZHBvaW50IGZvbGxvd2luZyAvd29ya2Zsb3dTY2hlbWUve2lkfVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgVGhlIHJlcXVlc3QgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbYm9keV0gVGhlIHJlcXVlc3QgYm9keSwgaWYgYW55LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcXNdIFRoZSBxdWVyeXN0cmluZywgaWYgYW55LiAgb3B0cy5leHBhbmQgYW5kIG9wdHMuZmllbGRzIGFycmF5cyB3aWxsIGJlIGF1dG9tYWdpY2FsbHkgYWRkZWQuXG4gICAgICogQHJldHVybnMge3t1cmk6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIGJvZHk6IE9iamVjdCwgcXM6IE9iamVjdCwgZm9sbG93QWxsUmVkaXJlY3RzOiBib29sZWFuLCBqc29uOiBib29sZWFufX1cbiAgICAgKi9cbiAgICB0aGlzLmJ1aWxkUmVxdWVzdE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0cywgcGF0aCwgbWV0aG9kLCBib2R5LCBxcykge1xuICAgICAgICB2YXIgYmFzZVBhdGggPSAnL3dvcmtmbG93c2NoZW1lLycgKyBvcHRzLndvcmtmbG93U2NoZW1lSWQ7XG4gICAgICAgIGlmICghcXMpIHFzID0ge307XG4gICAgICAgIGlmICghYm9keSkgYm9keSA9IHt9O1xuXG4gICAgICAgIGlmIChvcHRzLmZpZWxkcykge1xuICAgICAgICAgICAgcXMuZmllbGRzID0gJyc7XG4gICAgICAgICAgICBvcHRzLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICAgIHFzLmZpZWxkcyArPSBmaWVsZCArICcsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBxcy5maWVsZHMgPSBxcy5maWVsZHMuc2xpY2UoMCwgLTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdHMuZXhwYW5kKSB7XG4gICAgICAgICAgICBxcy5leHBhbmQgPSAnJztcbiAgICAgICAgICAgIG9wdHMuZXhwYW5kLmZvckVhY2goZnVuY3Rpb24gKGV4KSB7XG4gICAgICAgICAgICAgICAgcXMuZXhwYW5kICs9IGV4ICsgJywnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHFzLmV4cGFuZCA9IHFzLmV4cGFuZC5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoYmFzZVBhdGggKyBwYXRoKSxcbiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgIHFzOiBxcyxcbiAgICAgICAgICAgIGZvbGxvd0FsbFJlZGlyZWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGpzb246IHRydWVcbiAgICAgICAgfTtcbiAgICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdvcmtsb2dDbGllbnQ7XG5cbi8qKlxuICogVXNlZCB0byBhY2Nlc3MgSmlyYSBSRVNUIGVuZHBvaW50cyBpbiAnL3Jlc3QvYXBpLzIvd29ya2xvZydcbiAqXG4gKiBAcGFyYW0ge0ppcmFDbGllbnR9IGppcmFDbGllbnRcbiAqIEBjb25zdHJ1Y3RvciBXb3JrTG9nQ2xpZW50XG4gKi9cbmZ1bmN0aW9uIFdvcmtsb2dDbGllbnQoamlyYUNsaWVudCkge1xuICAgIHRoaXMuamlyYUNsaWVudCA9IGppcmFDbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdvcmtsb2dzIGlkIGFuZCBkZWxldGUgdGltZSBvZiB3b3JrbG9ncyB0aGF0IHdlcmUgZGVsZXRlZCBzaW5jZSBnaXZlbiB0aW1lLiBUaGUgcmV0dXJucyBzZXQgb2Ygd29ya2xvZ3MgaXMgXG4gICAgICogbGltaXRlZCB0byAxMDAwIGVsZW1lbnRzLiBUaGlzIEFQSSB3aWxsIG5vdCByZXR1cm4gd29ya2xvZ3MgZGVsZXRlZCBkdXJpbmcgbGFzdCBtaW51dGUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFdvcmtsb2dEZWxldGVkXG4gICAgICogQG1lbWJlck9mIFdvcmtsb2dDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnNpbmNlIEEgZGF0ZSB0aW1lIGluIHVuaXggdGltZXN0YW1wIGZvcm1hdCBzaW5jZSB3aGVuIGRlbGV0ZWQgd29ya2xvZ3Mgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKiAgICAgIERlZmF1bHQ6IDBcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc2VhcmNoIHJlc3VsdHMgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzZWFyY2ggcmVzdWx0cyBhcmUgcmV0cmlldmVkLlxuICAgICAqLyBcbiAgICB0aGlzLmdldFdvcmtsb2dEZWxldGVkID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy93b3JrbG9nL2RlbGV0ZWQnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBzaW5jZTogb3B0cy5zaW5jZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIFJldHVybnMgd29ya2xvZ3MgZm9yIGdpdmVuIHdvcmtsb2cgaWRzLiBPbmx5IHdvcmtsb2dzIHRvIHdoaWNoIHRoZSBjYWxsaW5nIHVzZXIgaGFzIHBlcm1pc3Npb25zLCBcbiAgICAgKiB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHQuIFRoZSByZXR1cm5zIHNldCBvZiB3b3JrbG9ncyBpcyBsaW1pdGVkIHRvIDEwMDAgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHdvcmtsb2dMaXN0XG4gICAgICogQG1lbWJlck9mIFdvcmtsb2dDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7YXJyYXl9IFtvcHRzLmlkc10gYSBKU09OIGFycmF5IG5hbWVkIGlkcyB3aGljaCBjb250YWlucyBhIGxpc3Qgb2YgaXNzdWUgSURzXG4gICAgICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGVkIHdoZW4gdGhlIHNlYXJjaCByZXN1bHRzIGFyZSByZXRyaWV2ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZWQgd2hlbiB0aGUgc2VhcmNoIHJlc3VsdHMgYXJlIHJldHJpZXZlZC5cbiAgICAgKi8gXG4gICAgdGhpcy53b3JrbG9nTGlzdCA9IGZ1bmN0aW9uIChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVyaTogdGhpcy5qaXJhQ2xpZW50LmJ1aWxkVVJMKCcvd29ya2xvZy9saXN0JyksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBmb2xsb3dBbGxSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgaWRzOiBvcHRzLmlkc1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdvcmtsb2dzIGlkIGFuZCB1cGRhdGUgdGltZSBvZiB3b3JrbG9ncyB0aGF0IHdlcmUgdXBkYXRlZCBzaW5jZSBnaXZlbiB0aW1lLiBUaGUgcmV0dXJucyBzZXQgb2Ygd29ya2xvZ3MgaXMgXG4gICAgICogbGltaXRlZCB0byAxMDAwIGVsZW1lbnRzLiBUaGlzIEFQSSB3aWxsIG5vdCByZXR1cm4gd29ya2xvZ3MgZGVsZXRlZCBkdXJpbmcgbGFzdCBtaW51dGUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldFdvcmtsb2dEZWxldGVkXG4gICAgICogQG1lbWJlck9mIFdvcmtsb2dDbGllbnQjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgVGhlIHJlcXVlc3Qgb3B0aW9ucyBzZW50IHRvIHRoZSBKaXJhIEFQSVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnNpbmNlIEEgZGF0ZSB0aW1lIGluIHVuaXggdGltZXN0YW1wIGZvcm1hdCBzaW5jZSB3aGVuIHVwZGF0ZWQgd29ya2xvZ3Mgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKiAgICAgIERlZmF1bHQ6IDBcbiAgICAgKiBAcGFyYW0gW2NhbGxiYWNrXSBDYWxsZWQgd2hlbiB0aGUgc2VhcmNoIHJlc3VsdHMgYXJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBzZWFyY2ggcmVzdWx0cyBhcmUgcmV0cmlldmVkLlxuICAgICAqLyBcbiAgICB0aGlzLmdldFdvcmtsb2dVcGRhdGVkID0gZnVuY3Rpb24gKG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJpOiB0aGlzLmppcmFDbGllbnQuYnVpbGRVUkwoJy93b3JrbG9nL3VwZGF0ZWQnKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICBzaW5jZTogb3B0cy5zaW5jZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5qaXJhQ2xpZW50Lm1ha2VSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmNvbnN0IHF1b3RlcyA9IHtcbiAgJ1wiJzogJ1wiJyxcbiAgXCInXCI6IFwiJ1wiLFxuICAnYCc6ICdgJyxcbiAgJ+KAnCc6ICfigJ0nLFxuICAn4oCYJzogJ+KAmScsXG59XG5cbmNvbnN0IHNwYWNlcyA9IFsnICcsICdcXG4nLCAnXFx0J11cbmNvbnN0IHNwYWNlc1JFID0gLyB8XFxufFxcdC9cblxuLy8gc3BsaXRzIGEgc3RyaW5nIGJ5IHdoaXRlIHNwYWNlLCBidXQgcmVzcGVjdCBxdW90ZXNcbmV4cG9ydCBjb25zdCBzcGxpdDIgPSAoczogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHsgbGlzdCwgY3VycmVudCB9ID0gcy5zcGxpdCgnJykucmVkdWNlKFxuICAgICh7IGxpc3QsIGN1cnJlbnQsIHF1b3RlIH0sIGMpID0+IHtcbiAgICAgIGlmIChxdW90ZSkge1xuICAgICAgICByZXR1cm4gYyA9PT0gcXVvdGVcbiAgICAgICAgICA/IHsgbGlzdDogWy4uLmxpc3QsIGN1cnJlbnRdLCBjdXJyZW50OiAnJywgcXVvdGU6ICcnIH1cbiAgICAgICAgICA6IHsgbGlzdCwgY3VycmVudDogY3VycmVudCArIGMsIHF1b3RlIH1cbiAgICAgIH1cbiAgICAgIGlmIChxdW90ZXNbY10pIHtcbiAgICAgICAgcmV0dXJuIHsgbGlzdCwgY3VycmVudDogJycsIHF1b3RlOiBxdW90ZXNbY10gfVxuICAgICAgfVxuICAgICAgaWYgKHNwYWNlcy5pbmNsdWRlcyhjKSkge1xuICAgICAgICByZXR1cm4gY3VycmVudFxuICAgICAgICAgID8geyBsaXN0OiBbLi4ubGlzdCwgY3VycmVudF0sIGN1cnJlbnQ6ICcnLCBxdW90ZTogJycgfVxuICAgICAgICAgIDogeyBsaXN0LCBjdXJyZW50LCBxdW90ZTogJycgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgbGlzdCwgY3VycmVudDogY3VycmVudCArIGMsIHF1b3RlOiAnJyB9XG4gICAgfSxcbiAgICB7IGxpc3Q6IFtdLCBjdXJyZW50OiAnJywgcXVvdGU6ICcnIH1cbiAgKVxuICByZXR1cm4gY3VycmVudCA/IFsuLi5saXN0LCBjdXJyZW50XSA6IGxpc3Rcbn1cblxuZXhwb3J0IGNvbnN0IGh1bWFuUmVhZGFibGVBcnJheSA9IChsaXN0OiBBcnJheTxzdHJpbmc+KTogc3RyaW5nID0+XG4gIGxpc3RcbiAgICAubWFwKGl0ZW0gPT4gKGl0ZW0ubWF0Y2goc3BhY2VzUkUpID8gYFxcYFwiJHtpdGVtfVwiXFxgYCA6IGBcXGAke2l0ZW19XFxgYCkpXG4gICAgLmpvaW4oJyAnKVxuIiwiLy8gQGZsb3dcbmltcG9ydCBCb3QgZnJvbSAna2V5YmFzZS1ib3QnXG5pbXBvcnQgeWFyZ3MgZnJvbSAneWFyZ3MtcGFyc2VyJ1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi91dGlscydcbmltcG9ydCB7IHR5cGUgQ29udGV4dCB9IGZyb20gJy4vY29udGV4dCdcblxudHlwZSBVbmtub3duTWVzc2FnZSA9IHt8XG4gIHR5cGU6ICd1bmtub3duJyxcbiAgZXJyb3I/OiA/c3RyaW5nLFxufH1cblxudHlwZSBIZWxwTWVzc2FnZSA9IHt8XG4gIHR5cGU6ICdoZWxwJyxcbnx9XG5cbmV4cG9ydCB0eXBlIENyZWF0ZU1lc3NhZ2UgPSB7fFxuICBmcm9tOiBzdHJpbmcsXG4gIHR5cGU6ICdjcmVhdGUnLFxuICBuYW1lOiBzdHJpbmcsXG4gIHByb2plY3Q6IHN0cmluZyxcbiAgYXNzaWduZWU6IHN0cmluZyxcbiAgZGVzY3JpcHRpb246IHN0cmluZyxcbnx9XG5cbmV4cG9ydCB0eXBlIFNlYXJjaE1lc3NhZ2UgPSB7fFxuICBmcm9tOiBzdHJpbmcsXG4gIHR5cGU6ICdzZWFyY2gnLFxuICBxdWVyeTogc3RyaW5nLFxuICBwcm9qZWN0OiBzdHJpbmcsXG4gIHN0YXR1czogc3RyaW5nLFxuICBhc3NpZ25lZTogc3RyaW5nLFxufH1cblxuZXhwb3J0IHR5cGUgQ29tbWVudE1lc3NhZ2UgPSB7fFxuICBmcm9tOiBzdHJpbmcsXG4gIHR5cGU6ICdjb21tZW50JyxcbiAgcXVlcnk6IHN0cmluZyxcbiAgcHJvamVjdDogc3RyaW5nLFxuICBzdGF0dXM6IHN0cmluZyxcbiAgYXNzaWduZWU6IHN0cmluZyxcbiAgY29tbWVudDogc3RyaW5nLFxufH1cblxuZXhwb3J0IHR5cGUgUmVhY2ppTWVzc2FnZSA9IHt8XG4gIGZyb206IHN0cmluZyxcbiAgdHlwZTogJ3JlYWNqaScsXG4gIHJlYWN0VG9JRDogbnVtYmVyLFxuICBlbW9qaTogc3RyaW5nLFxufH1cblxuZXhwb3J0IHR5cGUgTWVzc2FnZSA9XG4gIHwgVW5rbm93bk1lc3NhZ2VcbiAgfCBIZWxwTWVzc2FnZVxuICB8IFNlYXJjaE1lc3NhZ2VcbiAgfCBDb21tZW50TWVzc2FnZVxuICB8IFJlYWNqaU1lc3NhZ2VcblxuY29uc3QgY21kUkUgPSBuZXcgUmVnRXhwKC8oPzoha2lyYSlcXHMrKFxcUyspKD86XFxzKyhcXFMrKSk/KD86XFxzKyguKikpPy8pXG5cbmNvbnN0IGlzS2lyYU1lc3NhZ2UgPSBtZXNzYWdlID0+XG4gIG1lc3NhZ2UgJiZcbiAgbWVzc2FnZS5jb250ZW50ICYmXG4gIG1lc3NhZ2UuY29udGVudC50eXBlID09PSAndGV4dCcgJiZcbiAgdHlwZW9mIG1lc3NhZ2UuY29udGVudC50ZXh0LmJvZHkgPT09ICdzdHJpbmcnICYmXG4gIG1lc3NhZ2UuY29udGVudC50ZXh0LmJvZHkuc3RhcnRzV2l0aCgnIWtpcmEnKVxuXG5jb25zdCBpc0tpcmFSZWFjdGlvbiA9IG1lc3NhZ2UgPT5cbiAgbWVzc2FnZSAmJiBtZXNzYWdlLmNvbnRlbnQgJiYgbWVzc2FnZS5jb250ZW50LnR5cGUgPT09ICdyZWFjdGlvbidcblxuY29uc3QgeWFyZ3NPcHRpb25zID0ge1xuICBhbGlhczoge1xuICAgIHByb2plY3Q6IFsncCddLFxuICB9LFxuICBzdHJpbmc6IFsncHJvamVjdCcsICdzdGF0dXMnLCAnYXNzaWduZWUnXSxcbn1cblxuY29uc3QgdmFsaWRhdGVPcHRpb25zID0gKGNvbnRleHQsIHBhcnNlZCkgPT4ge1xuICBjb25zdCBwcm9qZWN0ID0gcGFyc2VkLnByb2plY3QgPyBwYXJzZWQucHJvamVjdC50b0xvd2VyQ2FzZSgpIDogJydcbiAgY29uc3Qgc3RhdHVzID0gcGFyc2VkLnN0YXR1cyA/IHBhcnNlZC5zdGF0dXMudG9Mb3dlckNhc2UoKSA6ICcnXG4gIGNvbnN0IGFzc2lnbmVlID0gcGFyc2VkLmFzc2lnbmVlID8gcGFyc2VkLmFzc2lnbmVlLnRvTG93ZXJDYXNlKCkgOiAnJ1xuICBpZiAocHJvamVjdCAmJiAhY29udGV4dC5jb25maWcuamlyYS5wcm9qZWN0cy5pbmNsdWRlcyhwcm9qZWN0KSkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm9qZWN0OiAnJyxcbiAgICAgIHN0YXR1czogJycsXG4gICAgICBhc3NpZ25lZTogJycsXG4gICAgICBlcnJvcjogYGludmFsaWQgcHJvamVjdDogJHtwcm9qZWN0fSBpcyBub3Qgb25lIG9mICR7VXRpbHMuaHVtYW5SZWFkYWJsZUFycmF5KFxuICAgICAgICBjb250ZXh0LmNvbmZpZy5qaXJhLnByb2plY3RzXG4gICAgICApfWAsXG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXR1cyAmJiAhY29udGV4dC5jb25maWcuamlyYS5zdGF0dXMuaW5jbHVkZXMoc3RhdHVzKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm9qZWN0OiAnJyxcbiAgICAgIHN0YXR1czogJycsXG4gICAgICBhc3NpZ25lZTogJycsXG4gICAgICBlcnJvcjogYGludmFsaWQgc3RhdHVzOiAke3N0YXR1c30gaXMgbm90IG9uZSBvZiAke1V0aWxzLmh1bWFuUmVhZGFibGVBcnJheShcbiAgICAgICAgY29udGV4dC5jb25maWcuamlyYS5zdGF0dXNcbiAgICAgICl9YCxcbiAgICB9XG4gIH1cblxuICBpZiAoYXNzaWduZWUgJiYgIWNvbnRleHQuY29uZmlnLmppcmEudXNlcm5hbWVNYXBwZXJbYXNzaWduZWVdKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2plY3Q6ICcnLFxuICAgICAgc3RhdHVzOiAnJyxcbiAgICAgIGFzc2lnbmVlOiAnJyxcbiAgICAgIGVycm9yOiBgaW52YWxpZCBhc3NpZ25lZTogJHthc3NpZ25lZX0gaXMgbm90IG9uZSBvZiAke1V0aWxzLmh1bWFuUmVhZGFibGVBcnJheShcbiAgICAgICAgT2JqZWN0LmtleXMoY29udGV4dC5jb25maWcuamlyYS51c2VybmFtZU1hcHBlcilcbiAgICAgICl9YCxcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBwcm9qZWN0LCBzdGF0dXMsIGFzc2lnbmVlLCBlcnJvcjogbnVsbCB9XG59XG5cbmV4cG9ydCBjb25zdCBwYXJzZU1lc3NhZ2UgPSAoXG4gIGNvbnRleHQ6IENvbnRleHQsXG4gIG1lc3NhZ2U6IEJvdC5NZXNzYWdlXG4pOiA/TWVzc2FnZSA9PiB7XG4gIGlmIChpc0tpcmFSZWFjdGlvbihtZXNzYWdlKSkge1xuICAgIHJldHVybiB7XG4gICAgICBmcm9tOiBtZXNzYWdlLnNlbmRlci51c2VybmFtZSxcbiAgICAgIHR5cGU6ICdyZWFjamknLFxuICAgICAgcmVhY3RUb0lEOiBtZXNzYWdlLmNvbnRlbnQucmVhY3Rpb24ubSxcbiAgICAgIGVtb2ppOiBtZXNzYWdlLmNvbnRlbnQucmVhY3Rpb24uYixcbiAgICB9XG4gIH1cblxuICBpZiAoIWlzS2lyYU1lc3NhZ2UobWVzc2FnZSkpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgcGFyc2VkID0geWFyZ3MoVXRpbHMuc3BsaXQyKG1lc3NhZ2UuY29udGVudC50ZXh0LmJvZHkpLCB5YXJnc09wdGlvbnMpXG5cbiAgY29uc3QgeyBwcm9qZWN0LCBzdGF0dXMsIGFzc2lnbmVlLCBlcnJvciB9ID0gdmFsaWRhdGVPcHRpb25zKGNvbnRleHQsIHBhcnNlZClcblxuICBpZiAoZXJyb3IpIHtcbiAgICByZXR1cm4geyB0eXBlOiAndW5rbm93bicsIGVycm9yIH1cbiAgfVxuXG4gIHN3aXRjaCAocGFyc2VkLl9bMV0pIHtcbiAgICBjYXNlICdoZWxwJzpcbiAgICAgIHJldHVybiB7IHR5cGU6ICdoZWxwJyB9XG4gICAgY2FzZSAnc2VhcmNoJzpcbiAgICAgIGlmIChwYXJzZWQuXy5sZW5ndGggPCAzKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICd1bmtub3duJywgZXJyb3I6ICdzZWFyY2ggbmVlZCBhdCBsZWFzdCAxIGFyZycgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZnJvbTogbWVzc2FnZS5zZW5kZXIudXNlcm5hbWUsXG4gICAgICAgIHR5cGU6ICdzZWFyY2gnLFxuICAgICAgICBxdWVyeTogcGFyc2VkLl8uc2xpY2UoMikuam9pbignICcpLFxuICAgICAgICBwcm9qZWN0LFxuICAgICAgICBhc3NpZ25lZSxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgfVxuICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgaWYgKHBhcnNlZC5fLmxlbmd0aCA8IDQpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ3Vua25vd24nLCBlcnJvcjogJ2NvbW1lbnQgbmVlZCBhdCBsZWFzdCAyIGFyZ3MnIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZyb206IG1lc3NhZ2Uuc2VuZGVyLnVzZXJuYW1lLFxuICAgICAgICB0eXBlOiAnY29tbWVudCcsXG4gICAgICAgIHF1ZXJ5OiBwYXJzZWQuX1syXSxcbiAgICAgICAgcHJvamVjdCxcbiAgICAgICAgYXNzaWduZWUsXG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgY29tbWVudDogcGFyc2VkLl8uc2xpY2UoMykuam9pbignICcpLFxuICAgICAgfVxuICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgICBpZiAocGFyc2VkLl8ubGVuZ3RoIDwgNCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiAndW5rbm93bicsIGVycm9yOiAnY3JlYXRlIG5lZWQgYXQgbGVhc3QgMiBhcmdzJyB9XG4gICAgICB9XG4gICAgICBpZiAoIXByb2plY3QpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ3Vua25vd24nLCBlcnJvcjogJ2NyZWF0ZSByZXF1aXJlcyAtLXByb2plY3QnIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZyb206IG1lc3NhZ2Uuc2VuZGVyLnVzZXJuYW1lLFxuICAgICAgICB0eXBlOiAnY3JlYXRlJyxcbiAgICAgICAgbmFtZTogcGFyc2VkLl9bMl0sXG4gICAgICAgIHByb2plY3QsXG4gICAgICAgIGFzc2lnbmVlLFxuICAgICAgICBkZXNjcmlwdGlvbjogcGFyc2VkLl8uc2xpY2UoMykuam9pbignICcpLFxuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4geyB0eXBlOiAndW5rbm93bicgfVxuICB9XG59XG4iLCIvLyBAZmxvd1xuXG5leHBvcnQgY29uc3QgZW1vamlUb051bSA9IChudW06IHN0cmluZyk6ID9udW1iZXIgPT4ge1xuICBzd2l0Y2ggKG51bSkge1xuICAgIGNhc2UgJzp6ZXJvOic6XG4gICAgICByZXR1cm4gMFxuICAgIGNhc2UgJzpvbmU6JzpcbiAgICAgIHJldHVybiAxXG4gICAgY2FzZSAnOnR3bzonOlxuICAgICAgcmV0dXJuIDJcbiAgICBjYXNlICc6dGhyZWU6JzpcbiAgICAgIHJldHVybiAzXG4gICAgY2FzZSAnOmZvdXI6JzpcbiAgICAgIHJldHVybiA0XG4gICAgY2FzZSAnOmZpdmU6JzpcbiAgICAgIHJldHVybiA1XG4gICAgY2FzZSAnOnNpeDonOlxuICAgICAgcmV0dXJuIDZcbiAgICBjYXNlICc6c2V2ZW46JzpcbiAgICAgIHJldHVybiA3XG4gICAgY2FzZSAnOmVpZ2h0Oic6XG4gICAgICByZXR1cm4gOFxuICAgIGNhc2UgJzpuaW5lOic6XG4gICAgICByZXR1cm4gOVxuICAgIGNhc2UgJzprZXljYXBfdGVuOic6XG4gICAgICByZXR1cm4gMTBcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbnVtVG9FbW9qaSA9IChudW06IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIHN3aXRjaCAobnVtKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuICc6emVybzonXG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuICc6b25lOidcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gJzp0d286J1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiAnOnRocmVlOidcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gJzpmb3VyOidcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gJzpmaXZlOidcbiAgICBjYXNlIDY6XG4gICAgICByZXR1cm4gJzpzaXg6J1xuICAgIGNhc2UgNzpcbiAgICAgIHJldHVybiAnOnNldmVuOidcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gJzplaWdodDonXG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuICc6bmluZTonXG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiAnOmtleWNhcF90ZW46J1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJzpxdWVzdGlvbjonXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHN0YXR1c1RvRW1vamkgPSAoc3RhdHVzOiBzdHJpbmcpID0+IHtcbiAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICBjYXNlICdEb25lJzpcbiAgICAgIHJldHVybiAnOndoaXRlX2NoZWNrX21hcms6J1xuICAgIGNhc2UgJ1RvIERvJzpcbiAgICAgIHJldHVybiAnOnN0YXR1ZV9vZl9saWJlcnR5OidcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICc6YnVpbGRpbmdfY29uc3RydWN0aW9uOidcbiAgfVxufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBCb3QgZnJvbSAna2V5YmFzZS1ib3QnXG5pbXBvcnQgeyB0eXBlIElzc3VlIGFzIEppcmFJc3N1ZSB9IGZyb20gJy4vamlyYSdcbmltcG9ydCB7IG51bVRvRW1vamksIHN0YXR1c1RvRW1vamkgfSBmcm9tICcuL2Vtb2ppJ1xuaW1wb3J0IHR5cGUgeyBTZWFyY2hNZXNzYWdlLCBDb21tZW50TWVzc2FnZSB9IGZyb20gJy4vbWVzc2FnZSdcbmltcG9ydCB0eXBlIHsgQ29udGV4dCB9IGZyb20gJy4vY29udGV4dCdcblxuY29uc3QgaXNzdWVUb0xpbmUgPSAoaXNzdWUsIGluZGV4KSA9PlxuICBgJHtudW1Ub0Vtb2ppKGluZGV4KX0gKiR7aXNzdWUua2V5fSogJHtzdGF0dXNUb0Vtb2ppKGlzc3VlLnN0YXR1cyl9ICR7XG4gICAgaXNzdWUuc3VtbWFyeVxuICB9IC0gJHtpc3N1ZS51cmx9YFxuXG5jb25zdCBidWlsZFNlYXJjaFJlc3VsdEJvZHkgPSAocGFyc2VkTWVzc2FnZSwganFsLCBpc3N1ZXMsIGFkZGl0aW9uYWwpID0+IHtcbiAgY29uc3QgYmVnaW4gPSAnYGBgXFxuJyArIGpxbCArICdcXG5gYGAnXG4gIGlmICghaXNzdWVzLmxlbmd0aCkge1xuICAgIHJldHVybiBiZWdpbiArICdJIGdvdCBub3RoaW5nIGZyb20gSmlyYS4nXG4gIH1cbiAgY29uc3QgZmlyc3RJc3N1ZXMgPSBpc3N1ZXMuc2xpY2UoMCwgMTEpXG4gIGNvbnN0IGhlYWQgPVxuICAgIGBAJHtwYXJzZWRNZXNzYWdlLmZyb219IEkgZ290ICR7aXNzdWVzLmxlbmd0aH0gdGlja2V0cyBmcm9tIEppcmFgICtcbiAgICAoaXNzdWVzID4gMTEgPyAnLiBIZXJlIGFyZSB0aGUgZmlyc3QgMTE6XFxuXFxuJyA6ICc6XFxuXFxuJylcbiAgY29uc3QgYm9keSA9IGZpcnN0SXNzdWVzLm1hcChpc3N1ZVRvTGluZSkuam9pbignXFxuJylcbiAgcmV0dXJuIGJlZ2luICsgaGVhZCArIGJvZHkgKyAoYWRkaXRpb25hbCA/ICdcXG5cXG4nICsgYWRkaXRpb25hbCA6ICcnKVxufVxuXG5leHBvcnQgY29uc3QgZ2V0T3JTZWFyY2ggPSAoXG4gIGNvbnRleHQ6IENvbnRleHQsXG4gIGNoYW5uZWw6IEJvdC5DaGF0Q2hhbm5lbCxcbiAgcGFyc2VkTWVzc2FnZTogU2VhcmNoTWVzc2FnZSB8IENvbW1lbnRNZXNzYWdlLFxuICBhZGRpdGlvbmFsPzogc3RyaW5nXG4pOiBQcm9taXNlPHsgaXNzdWVzOiBBcnJheTxKaXJhSXNzdWU+LCBjb3VudDogbnVtYmVyLCBpZDogbnVtYmVyIH0+ID0+XG4gIGNvbnRleHQuamlyYVxuICAgIC5nZXRPclNlYXJjaCh7XG4gICAgICBxdWVyeTogcGFyc2VkTWVzc2FnZS5xdWVyeSxcbiAgICAgIHByb2plY3Q6IHBhcnNlZE1lc3NhZ2UucHJvamVjdCxcbiAgICAgIHN0YXR1czogcGFyc2VkTWVzc2FnZS5zdGF0dXMsXG4gICAgICBhc3NpZ25lZUppcmE6XG4gICAgICAgIGNvbnRleHQuY29uZmlnLmppcmEudXNlcm5hbWVNYXBwZXJbcGFyc2VkTWVzc2FnZS5hc3NpZ25lZV0gfHwgJycsXG4gICAgfSlcbiAgICAudGhlbigoeyBqcWwsIGlzc3VlcyB9KSA9PlxuICAgICAgY29udGV4dC5ib3QuY2hhdFxuICAgICAgICAuc2VuZChjaGFubmVsLCB7XG4gICAgICAgICAgYm9keTogYnVpbGRTZWFyY2hSZXN1bHRCb2R5KHBhcnNlZE1lc3NhZ2UsIGpxbCwgaXNzdWVzLCBhZGRpdGlvbmFsKSxcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHsgaWQgfSkgPT4gKHtcbiAgICAgICAgICBjb3VudDogaXNzdWVzLmxlbmd0aCA+IDExID8gMTEgOiBpc3N1ZXMubGVuZ3RoLFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIGlzc3VlcyxcbiAgICAgICAgfSkpXG4gICAgKVxuXG5leHBvcnQgZGVmYXVsdCAoXG4gIGNvbnRleHQ6IENvbnRleHQsXG4gIGNoYW5uZWw6IEJvdC5DaGF0Q2hhbm5lbCxcbiAgcGFyc2VkTWVzc2FnZTogU2VhcmNoTWVzc2FnZVxuKSA9PiBnZXRPclNlYXJjaChjb250ZXh0LCBjaGFubmVsLCBwYXJzZWRNZXNzYWdlKVxuIiwiLy8gQGZsb3dcbmltcG9ydCBCb3QgZnJvbSAna2V5YmFzZS1ib3QnXG5pbXBvcnQgeyBudW1Ub0Vtb2ppIH0gZnJvbSAnLi9lbW9qaSdcbmltcG9ydCB7IGdldE9yU2VhcmNoIH0gZnJvbSAnLi9zZWFyY2gnXG5pbXBvcnQgdHlwZSB7IENvbW1lbnRNZXNzYWdlIH0gZnJvbSAnLi9tZXNzYWdlJ1xuaW1wb3J0IHR5cGUgeyBDb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0J1xuXG5jb25zdCByZWFjdE51bSA9IChjb250ZXh0OiBDb250ZXh0LCBjaGFubmVsLCBpZCwgbnVtLCB1bnRpbCkgPT5cbiAgbnVtIDwgdW50aWwgJiZcbiAgY29udGV4dC5ib3QuY2hhdFxuICAgIC5yZWFjdChjaGFubmVsLCBpZCwgbnVtVG9FbW9qaShudW0pKVxuICAgIC50aGVuKCgpID0+IHJlYWN0TnVtKGNvbnRleHQsIGNoYW5uZWwsIGlkLCBudW0gKyAxLCB1bnRpbCkpXG5cbmV4cG9ydCBkZWZhdWx0IChcbiAgY29udGV4dDogQ29udGV4dCxcbiAgY2hhbm5lbDogQm90LkNoYXRDaGFubmVsLFxuICBwYXJzZWRNZXNzYWdlOiBDb21tZW50TWVzc2FnZVxuKSA9PlxuICBnZXRPclNlYXJjaChcbiAgICBjb250ZXh0LFxuICAgIGNoYW5uZWwsXG4gICAgcGFyc2VkTWVzc2FnZSxcbiAgICAnVG8gY29uZmlybSBjb21tZW50aW5nLCBjbGljayBvbiBlbW9qaXMgYmVsb3cgaW4gdGhlIG5leHQgMiBtaW51dGVzOidcbiAgKS50aGVuKCh7IGNvdW50LCBpZCwgaXNzdWVzIH0pID0+IHtcbiAgICBjb250ZXh0LmNvbW1lbnQuYWRkKGlkLCBwYXJzZWRNZXNzYWdlLCBpc3N1ZXMpXG4gICAgcmVhY3ROdW0oY29udGV4dCwgY2hhbm5lbCwgaWQsIDAsIGNvdW50KVxuICB9KVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgUmVhY2ppTWVzc2FnZSB9IGZyb20gJy4vbWVzc2FnZSdcbmltcG9ydCB7IGVtb2ppVG9OdW0gfSBmcm9tICcuL2Vtb2ppJ1xuaW1wb3J0IEJvdCBmcm9tICdrZXliYXNlLWJvdCdcbmltcG9ydCB0eXBlIHsgQ29udGV4dCB9IGZyb20gJy4vY29udGV4dCdcblxuY29uc3Qga2IyamlyYU1lbnRpb24gPSAoY29udGV4dCwga2IpID0+XG4gIGNvbnRleHQuY29uZmlnLmppcmEudXNlcm5hbWVNYXBwZXJba2JdXG4gICAgPyBgW34ke2NvbnRleHQuY29uZmlnLmppcmEudXNlcm5hbWVNYXBwZXJba2JdfV1gXG4gICAgOiBrYlxuXG5leHBvcnQgZGVmYXVsdCAoXG4gIGNvbnRleHQ6IENvbnRleHQsXG4gIGNoYW5uZWw6IEJvdC5DaGF0Q2hhbm5lbCxcbiAgcGFyc2VkTWVzc2FnZTogUmVhY2ppTWVzc2FnZVxuKSA9PiB7XG4gIGNvbnN0IGl0ZW0gPSBjb250ZXh0LmNvbW1lbnQuZ2V0KHBhcnNlZE1lc3NhZ2UucmVhY3RUb0lEKVxuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChwYXJzZWRNZXNzYWdlLmZyb20gPT09IGNvbnRleHQuY29uZmlnLmtleWJhc2UudXNlcm5hbWUpIHtcbiAgICAvLyBXZSBuZXZlciBnZXQgb3VyIG93biByZWFjamkgYXMgb2Ygbm93LCBidXQganVzdCBpbiBjYXNlIC4uLlxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgbnVtID0gZW1vamlUb051bShwYXJzZWRNZXNzYWdlLmVtb2ppKVxuICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAobnVtID49IGl0ZW0uaXNzdWVzLmxlbmd0aCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgaXNzdWVLZXkgPSBpdGVtLmlzc3Vlc1tudW1dLmtleVxuICBjb25zdCBjb21tZW50ID1cbiAgICBgQ29tbWVudCBieSAke2tiMmppcmFNZW50aW9uKGNvbnRleHQsIGl0ZW0ubWVzc2FnZS5mcm9tKX1gICtcbiAgICAoaXRlbS5tZXNzYWdlLmZyb20gPT09IHBhcnNlZE1lc3NhZ2UuZnJvbVxuICAgICAgPyAnOiAnXG4gICAgICA6IGAgKGNvbmZpcm1lZCBieSAke2tiMmppcmFNZW50aW9uKGNvbnRleHQsIHBhcnNlZE1lc3NhZ2UuZnJvbSl9KTogYCkgK1xuICAgIGl0ZW0ubWVzc2FnZS5jb21tZW50XG4gIHJldHVybiBjb250ZXh0LmppcmEuYWRkQ29tbWVudChpc3N1ZUtleSwgY29tbWVudCkudGhlbih1cmwgPT5cbiAgICBjb250ZXh0LmJvdC5jaGF0LnNlbmQoY2hhbm5lbCwge1xuICAgICAgYm9keTogYEAke3BhcnNlZE1lc3NhZ2UuZnJvbX0gRG9uZSEgJHt1cmx9YCxcbiAgICB9KVxuICApXG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IEJvdCBmcm9tICdrZXliYXNlLWJvdCdcbmltcG9ydCAqIGFzIE1lc3NhZ2UgZnJvbSAnLi9tZXNzYWdlJ1xuaW1wb3J0IHNlYXJjaCBmcm9tICcuL3NlYXJjaCdcbmltcG9ydCBjb21tZW50IGZyb20gJy4vY29tbWVudCdcbmltcG9ydCByZWFjamkgZnJvbSAnLi9yZWFjamknXG5pbXBvcnQgY3JlYXRlIGZyb20gJy4vY3JlYXRlJ1xuaW1wb3J0IHsgdHlwZSBDb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0J1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi91dGlscydcblxuY29uc3Qgc2VuZEhlbHAgPSAoY29udGV4dCwgY2hhbm5lbCkgPT5cbiAgY29udGV4dC5ib3QuY2hhdC5zZW5kKGNoYW5uZWwsIHtcbiAgICBib2R5OlxuICAgICAgJ1VzYWdlOiBcXG4nICtcbiAgICAgICcgIGAha2lyYSBzZWFyY2ggPHF1ZXJ5PmBcXG4nICtcbiAgICAgICcgIGAha2lyYSBjb21tZW50IDxxdWVyeXxcIm11bHRpIHdvcmQgcXVlcnlcIj4gPHlvdXIgY29tbWVudD5gXFxuJyArXG4gICAgICAnICBgIWtpcmEgY3JlYXRlIC0tcHJvamVjdD08UFJPSkVDVD4gWy0tYXNzaWduZWU9PGtiIHVzZXJuYW1lPl0gPHN1bW1hcnl8XCJtdWx0aSB3b3JkIHN1bW1hcnlcIj4gPGRlc2NyaXB0aW9uPmBcXG4nICtcbiAgICAgICdPcHRpb25zOiBcXG4nICtcbiAgICAgICcgIGAtcGAsIGAtLXByb2plY3RgOiBvbmx5IHNlYXJjaCBmb3Igc3BlY2lmaWMgcHJvamVjdCAnICtcbiAgICAgIGAke1V0aWxzLmh1bWFuUmVhZGFibGVBcnJheShjb250ZXh0LmNvbmZpZy5qaXJhLnByb2plY3RzKX1cXG5gICtcbiAgICAgICcgIGAtLXN0YXR1c2A6IG9ubHkgc2VhcmNoIGZvciB0aWNrZXRzIGluIHNwZWNpZmljIHN0YXR1cyAnICtcbiAgICAgIGAke1V0aWxzLmh1bWFuUmVhZGFibGVBcnJheShjb250ZXh0LmNvbmZpZy5qaXJhLnN0YXR1cyl9XFxuYCArXG4gICAgICAnICBgLS1hc3NpZ25lZWA6IG9ubHkgc2VhcmNoIGZvciB0aWNrZXRzIGFzc2lnbmVkIHRvIHNwZWNpZmllZCBwZXJzb24gKGtleWJhc2UgdXNlcm5hbWUpICcgK1xuICAgICAgYCR7VXRpbHMuaHVtYW5SZWFkYWJsZUFycmF5KFxuICAgICAgICBPYmplY3Qua2V5cyhjb250ZXh0LmNvbmZpZy5qaXJhLnVzZXJuYW1lTWFwcGVyKVxuICAgICAgKX1cXG5gLFxuICB9KVxuXG5jb25zdCByZWFjdEFjayA9IChjb250ZXh0LCBjaGFubmVsOiBCb3QuQ2hhdENoYW5uZWwsIGlkOiBudW1iZXIpID0+XG4gIGNvbnRleHQuYm90LmNoYXQucmVhY3QoY2hhbm5lbCwgaWQsICc6ZXllczonKVxuXG5jb25zdCBvbk1lc3NhZ2UgPSAoY29udGV4dCwga2JNZXNzYWdlKSA9PiB7XG4gIHRyeSB7XG4gICAgLy9jb25zb2xlLmRlYnVnKGtiTWVzc2FnZSlcbiAgICBjb25zdCBwYXJzZWRNZXNzYWdlID0gTWVzc2FnZS5wYXJzZU1lc3NhZ2UoY29udGV4dCwga2JNZXNzYWdlKVxuICAgIGNvbnNvbGUuZGVidWcoeyBtc2c6ICdnb3QgbWVzc2FnZScsIHBhcnNlZE1lc3NhZ2UgfSlcbiAgICBpZiAoIXBhcnNlZE1lc3NhZ2UpIHtcbiAgICAgIC8vIG5vdCBhIGtpcmEgbWVzc2FnZVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHN3aXRjaCAocGFyc2VkTWVzc2FnZS50eXBlKSB7XG4gICAgICBjYXNlICd1bmtub3duJzpcbiAgICAgIGNhc2UgJ2hlbHAnOlxuICAgICAgICBzZW5kSGVscChjb250ZXh0LCBrYk1lc3NhZ2UuY2hhbm5lbClcbiAgICAgICAgcmV0dXJuXG4gICAgICBjYXNlICdzZWFyY2gnOlxuICAgICAgICByZWFjdEFjayhjb250ZXh0LCBrYk1lc3NhZ2UuY2hhbm5lbCwga2JNZXNzYWdlLmlkKVxuICAgICAgICBzZWFyY2goY29udGV4dCwga2JNZXNzYWdlLmNoYW5uZWwsIHBhcnNlZE1lc3NhZ2UpXG4gICAgICAgIHJldHVyblxuICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgIHJlYWN0QWNrKGNvbnRleHQsIGtiTWVzc2FnZS5jaGFubmVsLCBrYk1lc3NhZ2UuaWQpXG4gICAgICAgIGNvbW1lbnQoY29udGV4dCwga2JNZXNzYWdlLmNoYW5uZWwsIHBhcnNlZE1lc3NhZ2UpXG4gICAgICAgIHJldHVyblxuICAgICAgY2FzZSAncmVhY2ppJzpcbiAgICAgICAgcmVhY2ppKGNvbnRleHQsIGtiTWVzc2FnZS5jaGFubmVsLCBwYXJzZWRNZXNzYWdlKVxuICAgICAgICByZXR1cm5cbiAgICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgICAgIGNyZWF0ZShjb250ZXh0LCBrYk1lc3NhZ2UuY2hhbm5lbCwgcGFyc2VkTWVzc2FnZSlcbiAgICAgICAgcmV0dXJuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25zb2xlLmVycm9yKHsgZXJyb3I6ICdob3cgY291bGQgdGhpcyBoYXBwZW4nIH0pXG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpXG4gIH1cbn1cblxuY29uc3QgZXF1YWxDaGF0Q2hhbm5lbCA9IChjMSwgYzIpID0+XG4gIFsnbmFtZScsICdwdWJsaWMnLCAnbWVtYmVyc1R5cGUnLCAndG9waWNUeXBlJywgJ3RvcGljTmFtZSddLnJlZHVjZShcbiAgICAoZXF1YWwsIGtleSkgPT4gYzFba2V5XSA9PT0gYzJba2V5XSxcbiAgICB0cnVlXG4gIClcblxuZXhwb3J0IGRlZmF1bHQgKGNvbnRleHQ6IENvbnRleHQpID0+IHtcbiAgY29udGV4dC5ib3QuY2hhdC53YXRjaEFsbENoYW5uZWxzRm9yTmV3TWVzc2FnZXMoXG4gICAgbWVzc2FnZSA9PlxuICAgICAgY29udGV4dC5jb25maWcua2V5YmFzZS5jaGFubmVscy5zb21lKGNoYW5uZWwgPT5cbiAgICAgICAgZXF1YWxDaGF0Q2hhbm5lbChjaGFubmVsLCBtZXNzYWdlLmNoYW5uZWwpXG4gICAgICApICYmIG9uTWVzc2FnZShjb250ZXh0LCBtZXNzYWdlKVxuICApXG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IEJvdCBmcm9tICdrZXliYXNlLWJvdCdcbmltcG9ydCB7IG51bVRvRW1vamkgfSBmcm9tICcuL2Vtb2ppJ1xuaW1wb3J0IHsgZ2V0T3JTZWFyY2ggfSBmcm9tICcuL3NlYXJjaCdcbmltcG9ydCB0eXBlIHsgQ29tbWVudE1lc3NhZ2UgfSBmcm9tICcuL21lc3NhZ2UnXG5pbXBvcnQgdHlwZSB7IENvbnRleHQgfSBmcm9tICcuL2NvbnRleHQnXG5cbmV4cG9ydCBkZWZhdWx0IChcbiAgY29udGV4dDogQ29udGV4dCxcbiAgY2hhbm5lbDogQm90LkNoYXRDaGFubmVsLFxuICBwYXJzZWRNZXNzYWdlOiBDb21tZW50TWVzc2FnZVxuKSA9PlxuICBjb250ZXh0LmppcmFcbiAgICAuY3JlYXRlSXNzdWUoe1xuICAgICAgYXNzaWduZWVKaXJhOlxuICAgICAgICBjb250ZXh0LmNvbmZpZy5qaXJhLnVzZXJuYW1lTWFwcGVyW3BhcnNlZE1lc3NhZ2UuYXNzaWduZWVdIHx8ICcnLFxuICAgICAgcHJvamVjdDogcGFyc2VkTWVzc2FnZS5wcm9qZWN0LFxuICAgICAgbmFtZTogcGFyc2VkTWVzc2FnZS5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgIGBSZXBvcnRlZCBieSBbfiR7XG4gICAgICAgICAgY29udGV4dC5jb25maWcuamlyYS51c2VybmFtZU1hcHBlcltwYXJzZWRNZXNzYWdlLmZyb21dXG4gICAgICAgIH1dOiBcXG5gICsgcGFyc2VkTWVzc2FnZS5kZXNjcmlwdGlvbixcbiAgICB9KVxuICAgIC50aGVuKHVybCA9PlxuICAgICAgY29udGV4dC5ib3QuY2hhdC5zZW5kKGNoYW5uZWwsIHtcbiAgICAgICAgYm9keTpcbiAgICAgICAgICAnVGlja2V0IGNyZWF0ZWQnICtcbiAgICAgICAgICAocGFyc2VkTWVzc2FnZS5hc3NpZ25lZSA/IGAgZm9yIEAke3BhcnNlZE1lc3NhZ2UuYXNzaWduZWV9YCA6ICcnKSArXG4gICAgICAgICAgYDogJHt1cmx9YCxcbiAgICAgIH0pXG4gICAgKVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgQ2hhdENoYW5uZWwgfSBmcm9tICdrZXliYXNlLWJvdCdcblxuZXhwb3J0IHR5cGUgQ29uZmlnID0ge1xuICBrZXliYXNlOiB7XG4gICAgdXNlcm5hbWU6IHN0cmluZyxcbiAgICBwYXBlcmtleTogc3RyaW5nLFxuICAgIGNoYW5uZWxzOiBBcnJheTxDaGF0Q2hhbm5lbD4sXG4gIH0sXG4gIGppcmE6IHtcbiAgICBob3N0OiBzdHJpbmcsXG4gICAgdXNlcm5hbWU6IHN0cmluZyxcbiAgICBwYXNzd29yZDogc3RyaW5nLFxuICAgIHByb2plY3RzOiBBcnJheTxzdHJpbmc+LFxuICAgIHN0YXR1czogQXJyYXk8c3RyaW5nPixcbiAgICB1c2VybmFtZU1hcHBlcjoge1xuICAgICAgW3N0cmluZ106IHN0cmluZyxcbiAgICB9LFxuICB9LFxufVxuXG5jb25zdCBjaGVja0NvbmZpZyA9IChvYmopOiA/Q29uZmlnID0+IHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqLmtleWJhc2UgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBpZiAodHlwZW9mIG9iai5rZXliYXNlLnVzZXJuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgaWYgKHR5cGVvZiBvYmoua2V5YmFzZS5wYXBlcmtleSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGlmICghQXJyYXkuaXNBcnJheShvYmoua2V5YmFzZS5jaGFubmVscykpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGZvciAobGV0IGNoYW5uZWwgb2Ygb2JqLmtleWJhc2UuY2hhbm5lbHMpIHtcbiAgICBpZiAodHlwZW9mIGNoYW5uZWwgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqLmppcmEgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBpZiAodHlwZW9mIG9iai5qaXJhLmhvc3QgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBpZiAodHlwZW9mIG9iai5qaXJhLnVzZXJuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgaWYgKHR5cGVvZiBvYmouamlyYS5wYXNzd29yZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGlmICghQXJyYXkuaXNBcnJheShvYmouamlyYS5wcm9qZWN0cykpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGlmICghQXJyYXkuaXNBcnJheShvYmouamlyYS5zdGF0dXMpKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8vIGNhc2UtaW5zZW5zaXRpdmVcbiAgb2JqLmppcmEucHJvamVjdHMgPSBvYmouamlyYS5wcm9qZWN0cy5tYXAocHJvamVjdCA9PiBwcm9qZWN0LnRvTG93ZXJDYXNlKCkpXG4gIG9iai5qaXJhLnN0YXR1cyA9IG9iai5qaXJhLnN0YXR1cy5tYXAoc3RhdHVzID0+IHN0YXR1cy50b0xvd2VyQ2FzZSgpKVxuXG4gIC8vIFRPRE8gdmFsaWRhdGUgdXNlcm5hbWVNYXBwZXIgbWF5YmVcblxuICByZXR1cm4gKG9iajogT2JqZWN0KVxufVxuXG5leHBvcnQgY29uc3QgcGFyc2UgPSAoYmFzZTY0Q29uZmlnOiBzdHJpbmcpOiA/Q29uZmlnID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY2hlY2tDb25maWcoXG4gICAgICBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKGJhc2U2NENvbmZpZywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCkpXG4gICAgKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKVxuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgSmlyYUNsaWVudCBmcm9tICdqaXJhLWNvbm5lY3RvcidcbmltcG9ydCB0eXBlIHsgQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnXG5pbXBvcnQgdHlwZSB7IENvbnRleHQgfSBmcm9tICcuL2NvbnRleHQnXG5cbmNvbnN0IGxvb2tzTGlrZUlzc3VlS2V5ID0gc3RyID0+ICEhc3RyLm1hdGNoKC9bQS1aYS16XSstWzAtOV0rLylcblxuZXhwb3J0IHR5cGUgSXNzdWUgPSB7XG4gIGtleTogc3RyaW5nLFxuICBzdW1tYXJ5OiBzdHJpbmcsXG4gIHN0YXR1czogc3RyaW5nLFxuICB1cmw6IHN0cmluZyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICBfY29uZmlnOiBDb25maWdcbiAgX2ppcmE6IE9iamVjdFxuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnKSB7XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnXG4gICAgdGhpcy5famlyYSA9IG5ldyBKaXJhQ2xpZW50KHtcbiAgICAgIGhvc3Q6IGNvbmZpZy5qaXJhLmhvc3QsXG4gICAgICBiYXNpY19hdXRoOiB7XG4gICAgICAgIHVzZXJuYW1lOiBjb25maWcuamlyYS51c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmQ6IGNvbmZpZy5qaXJhLnBhc3N3b3JkLFxuICAgICAgfSxcbiAgICB9KVxuICB9XG5cbiAgamlyYVJlc3BNYXBwZXIgPSAoaXNzdWU6IE9iamVjdCk6IElzc3VlID0+ICh7XG4gICAga2V5OiBpc3N1ZS5rZXksXG4gICAgc3VtbWFyeTogaXNzdWUuZmllbGRzLnN1bW1hcnksXG4gICAgc3RhdHVzOiBpc3N1ZS5maWVsZHMuc3RhdHVzLnN0YXR1c0NhdGVnb3J5Lm5hbWUsXG4gICAgdXJsOiBgaHR0cHM6Ly8ke3RoaXMuX2NvbmZpZy5qaXJhLmhvc3R9L2Jyb3dzZS8ke2lzc3VlLmtleX1gLFxuICB9KVxuXG4gIGdldE9yU2VhcmNoKHtcbiAgICBxdWVyeSxcbiAgICBwcm9qZWN0LFxuICAgIHN0YXR1cyxcbiAgICBhc3NpZ25lZUppcmEsXG4gIH06IHtcbiAgICBxdWVyeTogc3RyaW5nLFxuICAgIHByb2plY3Q6IHN0cmluZyxcbiAgICBzdGF0dXM6IHN0cmluZyxcbiAgICBhc3NpZ25lZUppcmE6IHN0cmluZyxcbiAgfSk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QganFsID1cbiAgICAgIChwcm9qZWN0ID8gYHByb2plY3QgPSBcIiR7cHJvamVjdH1cIiBBTkQgYCA6ICcnKSArXG4gICAgICAoc3RhdHVzID8gYHN0YXR1cyA9IFwiJHtzdGF0dXN9XCIgQU5EIGAgOiAnJykgK1xuICAgICAgKGFzc2lnbmVlSmlyYSA/IGBhc3NpZ25lZSA9IFwiJHthc3NpZ25lZUppcmF9XCIgQU5EIGAgOiAnJykgK1xuICAgICAgYHRleHQgfiBcIiR7cXVlcnl9XCJgXG4gICAgY29uc29sZS5kZWJ1Zyh7IG1zZzogJ2dldE9yU2VhcmNoJywganFsIH0pXG4gICAgcmV0dXJuIChcbiAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgbG9va3NMaWtlSXNzdWVLZXkocXVlcnkpXG4gICAgICAgICAgPyB0aGlzLl9qaXJhLmlzc3VlLmdldElzc3VlKHtcbiAgICAgICAgICAgICAgaXNzdWVLZXk6IHF1ZXJ5LFxuICAgICAgICAgICAgICAvL2ZpZWxkczogWydrZXknLCAnc3VtbWFyeScsICdzdGF0dXMnXSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiBuZXcgUHJvbWlzZShyID0+IHIoKSksXG4gICAgICAgIHRoaXMuX2ppcmEuc2VhcmNoLnNlYXJjaCh7XG4gICAgICAgICAganFsLFxuICAgICAgICAgIGZpZWxkczogJ2tleSxzdW1tYXJ5LHN0YXR1cycsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICBtYXhSZXN1bHRzOiAxMSxcbiAgICAgICAgfSksXG4gICAgICBdKVxuICAgICAgICAvKlxuICAgICAgLnRoZW4oYSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGEpXG4gICAgICAgIHJldHVybiBhXG4gICAgICB9KVxuICAgICAgKi9cbiAgICAgICAgLnRoZW4oKFtmcm9tR2V0LCBmcm9tU2VhcmNoXSkgPT4gKHtcbiAgICAgICAgICBqcWwsXG4gICAgICAgICAgaXNzdWVzOiBbXG4gICAgICAgICAgICAuLi4oZnJvbUdldCA/IFtmcm9tR2V0XSA6IFtdKSxcbiAgICAgICAgICAgIC4uLihmcm9tU2VhcmNoID8gZnJvbVNlYXJjaC5pc3N1ZXMgOiBbXSksXG4gICAgICAgICAgXS5tYXAodGhpcy5qaXJhUmVzcE1hcHBlciksXG4gICAgICAgIH0pKVxuICAgIClcbiAgfVxuXG4gIGFkZENvbW1lbnQoaXNzdWVLZXk6IHN0cmluZywgY29tbWVudDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5famlyYS5pc3N1ZVxuICAgICAgLmFkZENvbW1lbnQoe1xuICAgICAgICBpc3N1ZUtleSxcbiAgICAgICAgY29tbWVudDogeyBib2R5OiBjb21tZW50IH0sXG4gICAgICB9KVxuICAgICAgLnRoZW4oXG4gICAgICAgICh7IGlkIH0pID0+XG4gICAgICAgICAgYGh0dHBzOi8vJHtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5qaXJhLmhvc3RcbiAgICAgICAgICB9L2Jyb3dzZS8ke2lzc3VlS2V5fT9mb2N1c2VkQ29tbWVudElkPSR7aWR9YFxuICAgICAgKVxuICB9XG5cbiAgY3JlYXRlSXNzdWUoe1xuICAgIGFzc2lnbmVlSmlyYSxcbiAgICBwcm9qZWN0LFxuICAgIG5hbWUsXG4gICAgZGVzY3JpcHRpb24sXG4gIH06IHtcbiAgICBhc3NpZ25lZUppcmE6IHN0cmluZyxcbiAgICBwcm9qZWN0OiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gIH0pOiBQcm9taXNpZTxhbnk+IHtcbiAgICBjb25zb2xlLmxvZyh7XG4gICAgICBtc2c6ICdjcmVhdGVJc3N1ZScsXG4gICAgICBhc3NpZ25lZUppcmEsXG4gICAgICBwcm9qZWN0LFxuICAgICAgbmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uLFxuICAgIH0pXG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX2ppcmEuaXNzdWVcbiAgICAgICAgLmNyZWF0ZUlzc3VlKHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIGFzc2lnbmVlOiBhc3NpZ25lZUppcmEgPyB7IG5hbWU6IGFzc2lnbmVlSmlyYSB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcHJvamVjdDogeyBrZXk6IHByb2plY3QudG9VcHBlckNhc2UoKSB9LFxuICAgICAgICAgICAgaXNzdWV0eXBlOiB7IG5hbWU6ICdTdG9yeScgfSwgLy8gVE9ETyBtYWtlIHRoaXMgY29uZmlndXJhYmxlP1xuICAgICAgICAgICAgc3VtbWFyeTogbmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICAgIC8qXG4gICAgICAudGhlbihhID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYSlcbiAgICAgICAgcmV0dXJuIGFcbiAgICAgIH0pXG4gICAgICAqL1xuICAgICAgICAudGhlbigoeyBrZXkgfSkgPT4gYGh0dHBzOi8vJHt0aGlzLl9jb25maWcuamlyYS5ob3N0fS9icm93c2UvJHtrZXl9YClcbiAgICApXG4gIH1cbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgQm90IGZyb20gJ2tleWJhc2UtYm90J1xuaW1wb3J0IHR5cGUgeyBJc3N1ZSB9IGZyb20gJy4vamlyYSdcbmltcG9ydCB0eXBlIHsgQ29tbWVudE1lc3NhZ2UgfSBmcm9tICcuL21lc3NhZ2UnXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJ1xuaW1wb3J0ICogYXMgQ29uZmlnIGZyb20gJy4vY29uZmlnJ1xuaW1wb3J0IEppcmEgZnJvbSAnLi9qaXJhJ1xuXG5jb25zdCBzZXRUaW1lb3V0UHJvbWlzZSA9IHV0aWwucHJvbWlzaWZ5KHNldFRpbWVvdXQpXG5cbnR5cGUgQ29tbWVudENvbnRleHRJdGVtID0ge1xuICBtZXNzYWdlOiBDb21tZW50TWVzc2FnZSxcbiAgaXNzdWVzOiBBcnJheTxJc3N1ZT4sXG59XG5cbmNsYXNzIENvbW1lbnRDb250ZXh0IHtcbiAgX3Jlc3BNc2dJRFRvQ29tbWVudE1lc3NhZ2UgPSBuZXcgTWFwKClcblxuICBhZGQgPSAocmVzcG9uc2VJRDogbnVtYmVyLCBtZXNzYWdlOiBDb21tZW50TWVzc2FnZSwgaXNzdWVzOiBBcnJheTxJc3N1ZT4pID0+IHtcbiAgICB0aGlzLl9yZXNwTXNnSURUb0NvbW1lbnRNZXNzYWdlLnNldChyZXNwb25zZUlELCB7IG1lc3NhZ2UsIGlzc3VlcyB9KVxuICAgIHNldFRpbWVvdXRQcm9taXNlKDEwMDAgKiAxMjAgLyogMm1pbiAqLykudGhlbigoKSA9PlxuICAgICAgdGhpcy5fcmVzcE1zZ0lEVG9Db21tZW50TWVzc2FnZS5kZWxldGUocmVzcG9uc2VJRClcbiAgICApXG4gIH1cblxuICBnZXQgPSAocmVzcG9uc2VJRDogbnVtYmVyKTogP0NvbW1lbnRDb250ZXh0SXRlbSA9PlxuICAgIHRoaXMuX3Jlc3BNc2dJRFRvQ29tbWVudE1lc3NhZ2UuZ2V0KHJlc3BvbnNlSUQpXG59XG5cbmV4cG9ydCB0eXBlIENvbnRleHQgPSB7XG4gIGJvdDogQm90LkJvdCxcbiAgY29uZmlnOiBDb25maWcuQ29uZmlnLFxuICBjb21tZW50OiBDb21tZW50Q29udGV4dCxcbiAgamlyYTogSmlyYSxcbn1cblxuZXhwb3J0IGNvbnN0IGluaXQgPSAoY29uZmlnOiBDb25maWcuQ29uZmlnKTogUHJvbWlzZTxDb250ZXh0PiA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgYm90OiBuZXcgQm90KCksXG4gICAgY29uZmlnLFxuICAgIGNvbW1lbnQ6IG5ldyBDb21tZW50Q29udGV4dCgpLFxuICAgIGppcmE6IG5ldyBKaXJhKGNvbmZpZyksXG4gIH1cbiAgcmV0dXJuIGNvbnRleHQuYm90XG4gICAgLmluaXQoY29udGV4dC5jb25maWcua2V5YmFzZS51c2VybmFtZSwgY29udGV4dC5jb25maWcua2V5YmFzZS5wYXBlcmtleSwge1xuICAgICAgdmVyYm9zZTogdHJ1ZSxcbiAgICB9KVxuICAgIC50aGVuKCgpID0+IGNvbnRleHQpXG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IEtpcmEgZnJvbSAnLi9raXJhJ1xuaW1wb3J0IHsgaW5pdCB9IGZyb20gJy4vY29udGV4dCdcbmltcG9ydCAqIGFzIENvbmZpZyBmcm9tICcuL2NvbmZpZydcblxuY29uc3QgY29uZmlnID0gQ29uZmlnLnBhcnNlKHByb2Nlc3MuZW52LktJUkFfQ09ORklHIHx8ICcnKVxuaWYgKCFjb25maWcpIHtcbiAgY29uc29sZS5lcnJvcignaW52YWxpZCBjb25maWcnKVxuICBjb25zb2xlLmVycm9yKHByb2Nlc3MuZW52LktJUkFfQ09ORklHKVxuICBwcm9jZXNzLmV4aXQoMSlcbn0gZWxzZSB7XG4gIGluaXQoY29uZmlnKS50aGVuKEtpcmEpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9