!function(e){var t={};function a(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=e,a.c=t,a.d=function(e,t,i){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(a.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(i,r,function(t){return e[t]}.bind(null,r));return i},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=259)}([function(e,t,a){var i=a(21),r=a(20).Stream,o=a(3),n=/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;function s(e){return e.charAt(0).toUpperCase()+e.slice(1)}function u(e,t,a,r,n){throw new i.AssertionError({message:o.format("%s (%s) is required",e,t),actual:void 0===n?typeof r:n(r),expected:t,operator:a||"===",stackStartFunction:u.caller})}function c(e){return Object.prototype.toString.call(e).slice(8,-1)}function p(){}var l={bool:{check:function(e){return"boolean"==typeof e}},func:{check:function(e){return"function"==typeof e}},string:{check:function(e){return"string"==typeof e}},object:{check:function(e){return"object"==typeof e&&null!==e}},number:{check:function(e){return"number"==typeof e&&!isNaN(e)}},finite:{check:function(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}},buffer:{check:function(e){return Buffer.isBuffer(e)},operator:"Buffer.isBuffer"},array:{check:function(e){return Array.isArray(e)},operator:"Array.isArray"},stream:{check:function(e){return e instanceof r},operator:"instanceof",actual:c},date:{check:function(e){return e instanceof Date},operator:"instanceof",actual:c},regexp:{check:function(e){return e instanceof RegExp},operator:"instanceof",actual:c},uuid:{check:function(e){return"string"==typeof e&&n.test(e)},operator:"isUUID"}};e.exports=function e(t){var a,r=Object.keys(l);return a=process.env.NODE_NDEBUG?p:function(e,t){e||u(t,"true",e)},r.forEach(function(e){if(t)a[e]=p;else{var i=l[e];a[e]=function(t,a){i.check(t)||u(a,e,i.operator,t,i.actual)}}}),r.forEach(function(e){var i="optional"+s(e);if(t)a[i]=p;else{var r=l[e];a[i]=function(t,a){null!=t&&(r.check(t)||u(a,e,r.operator,t,r.actual))}}}),r.forEach(function(e){var i="arrayOf"+s(e);if(t)a[i]=p;else{var r=l[e],o="["+e+"]";a[i]=function(e,t){var a;for(Array.isArray(e)||u(t,o,r.operator,e,r.actual),a=0;a<e.length;a++)r.check(e[a])||u(t,o,r.operator,e,r.actual)}}}),r.forEach(function(e){var i="optionalArrayOf"+s(e);if(t)a[i]=p;else{var r=l[e],o="["+e+"]";a[i]=function(e,t){var a;if(null!=e)for(Array.isArray(e)||u(t,o,r.operator,e,r.actual),a=0;a<e.length;a++)r.check(e[a])||u(t,o,r.operator,e,r.actual)}}}),Object.keys(i).forEach(function(e){a[e]="AssertionError"!==e&&t?p:i[e]}),a._setExports=e,a}(process.env.NODE_NDEBUG)},function(e,t){e.exports=require("crypto")},function(e,t,a){"use strict";var i,r=a(55),o=r.Buffer,n={};for(i in r)r.hasOwnProperty(i)&&"SlowBuffer"!==i&&"Buffer"!==i&&(n[i]=r[i]);var s=n.Buffer={};for(i in o)o.hasOwnProperty(i)&&"allocUnsafe"!==i&&"allocUnsafeSlow"!==i&&(s[i]=o[i]);if(n.Buffer.prototype=o.prototype,s.from&&s.from!==Uint8Array.from||(s.from=function(e,t,a){if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof e);if(e&&void 0===e.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);return o(e,t,a)}),s.alloc||(s.alloc=function(e,t,a){if("number"!=typeof e)throw new TypeError('The "size" argument must be of type number. Received type '+typeof e);if(e<0||e>=2*(1<<30))throw new RangeError('The value "'+e+'" is invalid for option "size"');var i=o(e);return t&&0!==t.length?"string"==typeof a?i.fill(t,a):i.fill(t):i.fill(0),i}),!n.kStringMaxLength)try{n.kStringMaxLength=process.binding("buffer").kStringMaxLength}catch(e){}n.constants||(n.constants={MAX_LENGTH:n.kMaxLength},n.kStringMaxLength&&(n.constants.MAX_STRING_LENGTH=n.kStringMaxLength)),e.exports=n},function(e,t){e.exports=require("util")},function(e,t,a){e.exports=g;var i,r=a(0),o=a(7),n=a(1),s=a(25),u=a(11),c=a(41).DiffieHellman,p=a(9),l=a(5),m=a(6);try{i=a(56)}catch(e){}var h=p.InvalidAlgorithmError,d=p.KeyParseError,f={};function g(e){r.object(e,"options"),r.arrayOfObject(e.parts,"options.parts"),r.string(e.type,"options.type"),r.optionalString(e.comment,"options.comment");var t=o.info[e.type];if("object"!=typeof t)throw new h(e.type);for(var a,i={},n=0;n<e.parts.length;++n){var s=e.parts[n];i[s.name]=s}if(this.type=e.type,this.parts=e.parts,this.part=i,this.comment=void 0,this.source=e.source,this._rfc4253Cache=e._rfc4253Cache,this._hashCache={},this.curve=void 0,"ecdsa"===this.type){var u=this.part.curve.data.toString();this.curve=u,a=o.curves[u].size}else if("ed25519"===this.type||"curve25519"===this.type)a=256,this.curve="curve25519";else{var c=this.part[t.sizePart];a=8*(a=c.data.length)-l.countZeros(c.data)}this.size=a}f.auto=a(57),f.pem=a(14),f.pkcs1=a(42),f.pkcs8=a(29),f.rfc4253=a(15),f.ssh=a(59),f["ssh-private"]=a(34),f.openssh=f["ssh-private"],f.dnssec=a(43),f.putty=a(60),f.ppk=f.putty,g.formats=f,g.prototype.toBuffer=function(e,t){return void 0===e&&(e="ssh"),r.string(e,"format"),r.object(f[e],"formats[format]"),r.optionalObject(t,"options"),"rfc4253"===e?(void 0===this._rfc4253Cache&&(this._rfc4253Cache=f.rfc4253.write(this)),this._rfc4253Cache):f[e].write(this,t)},g.prototype.toString=function(e,t){return this.toBuffer(e,t).toString()},g.prototype.hash=function(e,t){if(r.string(e,"algorithm"),r.optionalString(t,"type"),void 0===t&&(t="ssh"),e=e.toLowerCase(),void 0===o.hashAlgs[e])throw new h(e);var a,i=e+"||"+t;if(this._hashCache[i])return this._hashCache[i];if("ssh"===t)a=this.toBuffer("rfc4253");else{if("spki"!==t)throw new Error("Hash type "+t+" not supported");a=f.pkcs8.pkcs8ToBuffer(this)}var s=n.createHash(e).update(a).digest();return this._hashCache[i]=s,s},g.prototype.fingerprint=function(e,t){void 0===e&&(e="sha256"),void 0===t&&(t="ssh"),r.string(e,"algorithm"),r.string(t,"type");var a={type:"key",hash:this.hash(e,t),algorithm:e,hashType:t};return new s(a)},g.prototype.defaultHashAlgorithm=function(){var e="sha1";return"rsa"===this.type&&(e="sha256"),"dsa"===this.type&&this.size>1024&&(e="sha256"),"ed25519"===this.type&&(e="sha512"),"ecdsa"===this.type&&(e=this.size<=256?"sha256":this.size<=384?"sha384":"sha512"),e},g.prototype.createVerify=function(e){if(void 0===e&&(e=this.defaultHashAlgorithm()),r.string(e,"hash algorithm"),"ed25519"===this.type&&void 0!==i)return new i.Verifier(this,e);if("curve25519"===this.type)throw new Error("Curve25519 keys are not suitable for signing or verification");var t,a,o;try{a=e.toUpperCase(),t=n.createVerify(a)}catch(e){o=e}(void 0===t||o instanceof Error&&o.message.match(/Unknown message digest/))&&(a="RSA-",a+=e.toUpperCase(),t=n.createVerify(a)),r.ok(t,"failed to create verifier");var s=t.verify.bind(t),c=this.toBuffer("pkcs8"),p=this.curve,l=this;return t.verify=function(t,a){if(u.isSignature(t,[2,0]))return t.type===l.type&&((!t.hashAlgorithm||t.hashAlgorithm===e)&&((!t.curve||"ecdsa"!==l.type||t.curve===p)&&s(c,t.toBuffer("asn1"))));if("string"==typeof t||Buffer.isBuffer(t))return s(c,t,a);throw u.isSignature(t,[1,0])?new Error("signature was created by too old a version of sshpk and cannot be verified"):new TypeError("signature must be a string, Buffer, or Signature object")},t},g.prototype.createDiffieHellman=function(){if("rsa"===this.type)throw new Error("RSA keys do not support Diffie-Hellman");return new c(this)},g.prototype.createDH=g.prototype.createDiffieHellman,g.parse=function(e,t,a){"string"!=typeof e&&r.buffer(e,"data"),void 0===t&&(t="auto"),r.string(t,"format"),"string"==typeof a&&(a={filename:a}),r.optionalObject(a,"options"),void 0===a&&(a={}),r.optionalString(a.filename,"options.filename"),void 0===a.filename&&(a.filename="(unnamed)"),r.object(f[t],"formats[format]");try{var i=f[t].read(e,a);return i instanceof m&&(i=i.toPublic()),i.comment||(i.comment=a.filename),i}catch(e){if("KeyEncryptedError"===e.name)throw e;throw new d(a.filename,t,e)}},g.isKey=function(e,t){return l.isCompatible(e,g,t)},g.prototype._sshpkApiVersion=[1,7],g._oldVersionDetect=function(e){return r.func(e.toBuffer),r.func(e.fingerprint),e.createDH?[1,4]:e.defaultHashAlgorithm?[1,3]:e.formats.auto?[1,2]:e.formats.pkcs1?[1,1]:[1,0]}},function(e,t,a){e.exports={bufferSplit:function(e,t){i.buffer(e),i.string(t);for(var a=[],r=0,o=0,n=0;n<e.length;++n)if(e[n]===t.charCodeAt(o)?++o:o=e[n]===t.charCodeAt(0)?1:0,o>=t.length){var s=n+1;a.push(e.slice(r,s-o)),r=s,o=0}r<=e.length&&a.push(e.slice(r,e.length));return a},addRSAMissing:function(e){i.object(e),d(e,o,[1,1]);var t,a=new l(e.part.d.data);if(!e.part.dmodp){var r=new l(e.part.p.data),n=a.mod(r.subtract(1));t=y(n),e.part.dmodp={name:"dmodp",data:t},e.parts.push(e.part.dmodp)}if(!e.part.dmodq){var s=new l(e.part.q.data),u=a.mod(s.subtract(1));t=y(u),e.part.dmodq={name:"dmodq",data:t},e.parts.push(e.part.dmodq)}},calculateDSAPublic:function(e,t,a){return i.buffer(e),i.buffer(t),i.buffer(a),e=new l(e),t=new l(t),a=new l(a),y(e.modPow(a,t))},calculateED25519Public:function(e){i.buffer(e);var t=m.sign.keyPair.fromSeed(new Uint8Array(e));return r.from(t.publicKey)},calculateX25519Public:function(e){i.buffer(e);var t=m.box.keyPair.fromSeed(new Uint8Array(e));return r.from(t.publicKey)},mpNormalize:v,mpDenormalize:function(e){i.buffer(e);for(;e.length>1&&0===e[0];)e=e.slice(1);return e},ecNormalize:function(e,t){if(i.buffer(e),0===e[0]&&4===e[1])return t?e:e.slice(1);if(4===e[0]){if(!t)return e}else{for(;0===e[0];)e=e.slice(1);if(2===e[0]||3===e[0])throw new Error("Compressed elliptic curve points are not supported");if(4!==e[0])throw new Error("Not a valid elliptic curve point");if(!t)return e}var a=r.alloc(e.length+1);return a[0]=0,e.copy(a,1),a},countZeros:function(e){var t=0,a=8;for(;t<e.length;){var i=1<<a;if((e[t]&i)===i)break;--a<0&&(t++,a=8)}return 8*t+(8-a)-1},assertCompatible:d,isCompatible:function(e,t,a){if(null===e||"object"!=typeof e)return!1;void 0===a&&(a=t.prototype._sshpkApiVersion);if(e instanceof t&&t.prototype._sshpkApiVersion[0]==a[0])return!0;var i=Object.getPrototypeOf(e),r=0;for(;i.constructor.name!==t.name;)if(!(i=Object.getPrototypeOf(i))||++r>h)return!1;if(i.constructor.name!==t.name)return!1;var o=i._sshpkApiVersion;void 0===o&&(o=t._oldVersionDetect(e));return!(o[0]!=a[0]||o[1]<a[1])},opensslKeyDeriv:function(e,t,a,o){i.buffer(t,"salt"),i.buffer(a,"passphrase"),i.number(o,"iteration count");var n,u,c,p=f[e];i.object(p,"supported cipher"),t=t.slice(0,g);var l=r.alloc(0);for(;l.length<p.key+p.iv;){c=[],u&&c.push(u),c.push(a),c.push(t),n=r.concat(c);for(var m=0;m<o;++m)n=s.createHash("md5").update(n).digest();l=r.concat([l,n]),u=n}return{key:l.slice(0,p.key),iv:l.slice(p.key,p.key+p.iv)}},opensshCipherInfo:function(e){var t={};switch(e){case"3des-cbc":t.keySize=24,t.blockSize=8,t.opensslName="des-ede3-cbc";break;case"blowfish-cbc":t.keySize=16,t.blockSize=8,t.opensslName="bf-cbc";break;case"aes128-cbc":case"aes128-ctr":case"aes128-gcm@openssh.com":t.keySize=16,t.blockSize=16,t.opensslName="aes-128-"+e.slice(7,10);break;case"aes192-cbc":case"aes192-ctr":case"aes192-gcm@openssh.com":t.keySize=24,t.blockSize=16,t.opensslName="aes-192-"+e.slice(7,10);break;case"aes256-cbc":case"aes256-ctr":case"aes256-gcm@openssh.com":t.keySize=32,t.blockSize=16,t.opensslName="aes-256-"+e.slice(7,10);break;default:throw new Error('Unsupported openssl cipher "'+e+'"')}return t},publicFromPrivateECDSA:function(e,t){i.string(e,"curveName"),i.buffer(t);var a=u.curves[e],o=new l(a.p),s=new l(a.a),c=new l(a.b),m=new p.ECCurveFp(o,s,c),h=m.decodePointHex(a.G.toString("hex")),d=new l(v(t)),f=h.multiply(d);f=r.from(m.encodePointHex(f),"hex");var g=[];return g.push({name:"curve",data:r.from(e)}),g.push({name:"Q",data:f}),new n({type:"ecdsa",curve:m,parts:g})},zeroPadToLength:function(e,t){i.buffer(e),i.number(t);for(;e.length>t;)i.equal(e[0],0),e=e.slice(1);for(;e.length<t;){var a=r.alloc(e.length+1);a[0]=0,e.copy(a,1),e=a}return e},writeBitString:function(e,t,a){void 0===a&&(a=c.Ber.BitString);var i=r.alloc(t.length+1);i[0]=0,t.copy(i,1),e.writeBuffer(i,a)},readBitString:function(e,t){void 0===t&&(t=c.Ber.BitString);var a=e.readString(t,!0);return i.strictEqual(a[0],0,"bit strings with unused bits are not supported (0x"+a[0].toString(16)+")"),a.slice(1)},pbkdf2:function(e,t,a,i,o){var n=r.alloc(t.length+4);t.copy(n);var u=0,c=[],p=1;for(;u<i;){var l=m(p++);u+=l.length,c.push(l)}return r.concat(c).slice(0,i);function m(t){n.writeUInt32BE(t,n.length-4);var i=s.createHmac(e,o);i.update(n);for(var r=i.digest(),u=r,c=1;c++<a;){(i=s.createHmac(e,o)).update(u),u=i.digest();for(var p=0;p<r.length;++p)r[p]^=u[p]}return r}}};var i=a(0),r=a(2).Buffer,o=a(6),n=a(4),s=a(1),u=a(7),c=a(12),p=a(33),l=a(26).BigInteger,m=a(27),h=3;function d(e,t,a,r){if(void 0===r&&(r="object"),i.ok(e,r+" must not be null"),i.object(e,r+" must be an object"),void 0===a&&(a=t.prototype._sshpkApiVersion),!(e instanceof t&&t.prototype._sshpkApiVersion[0]==a[0])){for(var o=Object.getPrototypeOf(e),n=0;o.constructor.name!==t.name;)o=Object.getPrototypeOf(o),i.ok(o&&++n<=h,r+" must be a "+t.name+" instance");i.strictEqual(o.constructor.name,t.name,r+" must be a "+t.name+" instance");var s=o._sshpkApiVersion;void 0===s&&(s=t._oldVersionDetect(e)),i.ok(s[0]==a[0]&&s[1]>=a[1],r+" must be compatible with "+t.name+" klass version "+a[0]+"."+a[1])}}var f={"des-ede3-cbc":{key:24,iv:8},"aes-128-cbc":{key:16,iv:16},"aes-256-cbc":{key:32,iv:16}},g=8;function v(e){for(i.buffer(e);e.length>1&&0===e[0]&&0==(128&e[1]);)e=e.slice(1);if(128==(128&e[0])){var t=r.alloc(e.length+1);t[0]=0,e.copy(t,1),e=t}return e}function y(e){var t=r.from(e.toByteArray());return t=v(t)}},function(e,t,a){e.exports=b;var i=a(0),r=a(2).Buffer,o=a(7),n=a(1),s=(a(25),a(11)),u=a(9),c=a(3),p=a(5),l=a(41),m=l.generateECDSA,h=l.generateED25519,d=a(56),f=a(27),g=a(4),v=(u.InvalidAlgorithmError,u.KeyParseError),y=(u.KeyEncryptedError,{});function b(e){i.object(e,"options"),g.call(this,e),this._pubCache=void 0}y.auto=a(57),y.pem=a(14),y.pkcs1=a(42),y.pkcs8=a(29),y.rfc4253=a(15),y["ssh-private"]=a(34),y.openssh=y["ssh-private"],y.ssh=y["ssh-private"],y.dnssec=a(43),c.inherits(b,g),b.formats=y,b.prototype.toBuffer=function(e,t){return void 0===e&&(e="pkcs1"),i.string(e,"format"),i.object(y[e],"formats[format]"),i.optionalObject(t,"options"),y[e].write(this,t)},b.prototype.hash=function(e,t){return this.toPublic().hash(e,t)},b.prototype.fingerprint=function(e,t){return this.toPublic().fingerprint(e,t)},b.prototype.toPublic=function(){if(this._pubCache)return this._pubCache;for(var e=o.info[this.type],t=[],a=0;a<e.parts.length;++a){var i=e.parts[a];t.push(this.part[i])}return this._pubCache=new g({type:this.type,source:this,parts:t}),this.comment&&(this._pubCache.comment=this.comment),this._pubCache},b.prototype.derive=function(e){var t,a,o;if(i.string(e,"type"),"ed25519"===this.type&&"curve25519"===e)return 0===(t=this.part.k.data)[0]&&(t=t.slice(1)),o=f.box.keyPair.fromSecretKey(new Uint8Array(t)),a=r.from(o.publicKey),new b({type:"curve25519",parts:[{name:"A",data:p.mpNormalize(a)},{name:"k",data:p.mpNormalize(t)}]});if("curve25519"===this.type&&"ed25519"===e)return 0===(t=this.part.k.data)[0]&&(t=t.slice(1)),o=f.sign.keyPair.fromSeed(new Uint8Array(t)),a=r.from(o.publicKey),new b({type:"ed25519",parts:[{name:"A",data:p.mpNormalize(a)},{name:"k",data:p.mpNormalize(t)}]});throw new Error("Key derivation not supported from "+this.type+" to "+e)},b.prototype.createVerify=function(e){return this.toPublic().createVerify(e)},b.prototype.createSign=function(e){if(void 0===e&&(e=this.defaultHashAlgorithm()),i.string(e,"hash algorithm"),"ed25519"===this.type&&void 0!==d)return new d.Signer(this,e);if("curve25519"===this.type)throw new Error("Curve25519 keys are not suitable for signing or verification");var t,a,o;try{a=e.toUpperCase(),t=n.createSign(a)}catch(e){o=e}(void 0===t||o instanceof Error&&o.message.match(/Unknown message digest/))&&(a="RSA-",a+=e.toUpperCase(),t=n.createSign(a)),i.ok(t,"failed to create verifier");var u=t.sign.bind(t),c=this.toBuffer("pkcs1"),p=this.type,l=this.curve;return t.sign=function(){var t=u(c);return"string"==typeof t&&(t=r.from(t,"binary")),(t=s.parse(t,p,"asn1")).hashAlgorithm=e,t.curve=l,t},t},b.parse=function(e,t,a){"string"!=typeof e&&i.buffer(e,"data"),void 0===t&&(t="auto"),i.string(t,"format"),"string"==typeof a&&(a={filename:a}),i.optionalObject(a,"options"),void 0===a&&(a={}),i.optionalString(a.filename,"options.filename"),void 0===a.filename&&(a.filename="(unnamed)"),i.object(y[t],"formats[format]");try{var r=y[t].read(e,a);return i.ok(r instanceof b,"key is not a private key"),r.comment||(r.comment=a.filename),r}catch(e){if("KeyEncryptedError"===e.name)throw e;throw new v(a.filename,t,e)}},b.isPrivateKey=function(e,t){return p.isCompatible(e,b,t)},b.generate=function(e,t){switch(void 0===t&&(t={}),i.object(t,"options"),e){case"ecdsa":return void 0===t.curve&&(t.curve="nistp256"),i.string(t.curve,"options.curve"),m(t.curve);case"ed25519":return h();default:throw new Error('Key generation not supported with key type "'+e+'"')}},b.prototype._sshpkApiVersion=[1,6],b._oldVersionDetect=function(e){return i.func(e.toPublic),i.func(e.createSign),e.derive?[1,3]:e.defaultHashAlgorithm?[1,2]:e.formats.auto?[1,1]:[1,0]}},function(e,t,a){var i=a(2).Buffer,r={dsa:{parts:["p","q","g","y"],sizePart:"p"},rsa:{parts:["e","n"],sizePart:"n"},ecdsa:{parts:["curve","Q"],sizePart:"Q"},ed25519:{parts:["A"],sizePart:"A"}};r.curve25519=r.ed25519;var o={dsa:{parts:["p","q","g","y","x"]},rsa:{parts:["n","e","d","iqmp","p","q"]},ecdsa:{parts:["curve","Q","d"]},ed25519:{parts:["A","k"]}};o.curve25519=o.ed25519;var n={nistp256:{size:256,pkcs8oid:"1.2.840.10045.3.1.7",p:i.from("00ffffffff 00000001 00000000 0000000000000000 ffffffff ffffffff ffffffff".replace(/ /g,""),"hex"),a:i.from("00FFFFFFFF 00000001 00000000 0000000000000000 FFFFFFFF FFFFFFFF FFFFFFFC".replace(/ /g,""),"hex"),b:i.from("5ac635d8 aa3a93e7 b3ebbd55 769886bc651d06b0 cc53b0f6 3bce3c3e 27d2604b".replace(/ /g,""),"hex"),s:i.from("00c49d3608 86e70493 6a6678e1 139d26b7819f7e90".replace(/ /g,""),"hex"),n:i.from("00ffffffff 00000000 ffffffff ffffffffbce6faad a7179e84 f3b9cac2 fc632551".replace(/ /g,""),"hex"),G:i.from("046b17d1f2 e12c4247 f8bce6e5 63a440f277037d81 2deb33a0 f4a13945 d898c2964fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e162bce3357 6b315ece cbb64068 37bf51f5".replace(/ /g,""),"hex")},nistp384:{size:384,pkcs8oid:"1.3.132.0.34",p:i.from("00ffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff fffffffeffffffff 00000000 00000000 ffffffff".replace(/ /g,""),"hex"),a:i.from("00FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFEFFFFFFFF 00000000 00000000 FFFFFFFC".replace(/ /g,""),"hex"),b:i.from("b3312fa7 e23ee7e4 988e056b e3f82d19181d9c6e fe814112 0314088f 5013875ac656398d 8a2ed19d 2a85c8ed d3ec2aef".replace(/ /g,""),"hex"),s:i.from("00a335926a a319a27a 1d00896a 6773a4827acdac73".replace(/ /g,""),"hex"),n:i.from("00ffffffff ffffffff ffffffff ffffffffffffffff ffffffff c7634d81 f4372ddf581a0db2 48b0a77a ecec196a ccc52973".replace(/ /g,""),"hex"),G:i.from("04aa87ca22 be8b0537 8eb1c71e f320ad746e1d3b62 8ba79b98 59f741e0 82542a385502f25d bf55296c 3a545e38 72760ab73617de4a 96262c6f 5d9e98bf 9292dc29f8f41dbd 289a147c e9da3113 b5f0b8c00a60b1ce 1d7e819d 7a431d7c 90ea0e5f".replace(/ /g,""),"hex")},nistp521:{size:521,pkcs8oid:"1.3.132.0.35",p:i.from("01ffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff ffffffffffff".replace(/ /g,""),"hex"),a:i.from("01FFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC".replace(/ /g,""),"hex"),b:i.from("51953eb961 8e1c9a1f 929a21a0 b68540eea2da725b 99b315f3 b8b48991 8ef109e156193951 ec7e937b 1652c0bd 3bb1bf073573df88 3d2c34f1 ef451fd4 6b503f00".replace(/ /g,""),"hex"),s:i.from("00d09e8800 291cb853 96cc6717 393284aaa0da64ba".replace(/ /g,""),"hex"),n:i.from("01ffffffffff ffffffff ffffffff ffffffffffffffff ffffffff ffffffff fffffffa51868783 bf2f966b 7fcc0148 f709a5d03bb5c9b8 899c47ae bb6fb71e 91386409".replace(/ /g,""),"hex"),G:i.from("0400c6 858e06b7 0404e9cd 9e3ecb66 2395b4429c648139 053fb521 f828af60 6b4d3dbaa14b5e77 efe75928 fe1dc127 a2ffa8de3348b3c1 856a429b f97e7e31 c2e5bd660118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd998f54449 579b4468 17afbd17 273e662c97ee7299 5ef42640 c550b901 3fad0761353c7086 a272c240 88be9476 9fd16650".replace(/ /g,""),"hex")}};e.exports={info:r,privInfo:o,hashAlgs:{md5:!0,sha1:!0,sha256:!0,sha384:!0,sha512:!0},curves:n}},function(e,t){e.exports=require("url")},function(e,t,a){a(0);var i=a(3);function r(e,t){Error.captureStackTrace&&Error.captureStackTrace(this,r),this.name="FingerprintFormatError",this.fingerprint=e,this.format=t,this.message="Fingerprint format is not supported, or is invalid: ",void 0!==e&&(this.message+=" fingerprint = "+e),void 0!==t&&(this.message+=" format = "+t)}function o(e){Error.captureStackTrace&&Error.captureStackTrace(this,o),this.name="InvalidAlgorithmError",this.algorithm=e,this.message='Algorithm "'+e+'" is not supported'}function n(e,t,a){Error.captureStackTrace&&Error.captureStackTrace(this,n),this.name="KeyParseError",this.format=t,this.keyName=e,this.innerErr=a,this.message="Failed to parse "+e+" as a valid "+t+" format key: "+a.message}function s(e,t,a){Error.captureStackTrace&&Error.captureStackTrace(this,s),this.name="SignatureParseError",this.type=e,this.format=t,this.innerErr=a,this.message="Failed to parse the given data as a "+e+" signature in "+t+" format: "+a.message}function u(e,t,a){Error.captureStackTrace&&Error.captureStackTrace(this,u),this.name="CertificateParseError",this.format=t,this.certName=e,this.innerErr=a,this.message="Failed to parse "+e+" as a valid "+t+" format certificate: "+a.message}function c(e,t){Error.captureStackTrace&&Error.captureStackTrace(this,c),this.name="KeyEncryptedError",this.format=t,this.keyName=e,this.message="The "+t+" format key "+e+" is encrypted (password-protected), and no passphrase was provided in `options`"}i.inherits(r,Error),i.inherits(o,Error),i.inherits(n,Error),i.inherits(s,Error),i.inherits(u,Error),i.inherits(c,Error),e.exports={FingerprintFormatError:r,InvalidAlgorithmError:o,KeyParseError:n,SignatureParseError:s,KeyEncryptedError:c,CertificateParseError:u}},function(e,t,a){"use strict";t.NO_HOST_ERROR="Missing 'host' property.",t.NO_CONSUMER_KEY_ERROR="Missing 'oauth_consumer_key' property.",t.NO_PRIVATE_KEY_ERROR="Missing 'oauth_private_key' property.",t.NO_OAUTH_TOKEN_ERROR="Missing 'oauth_token' property.",t.NO_OAUTH_TOKEN_SECRET_ERROR="Missing 'oauth_token_secret' property.",t.NO_USERNAME_ERROR="Missing 'username' property.",t.NO_PASSWORD_ERROR="Missing 'password' property.",t.NO_AUTHENTICATION_ERROR="Missing 'auth' property.",t.NO_VERIFIER_ERROR="Missing 'oauth_verifier' property.",t.INVALID_AUTHENTICATION_PROPERTY_ERROR="Invalid 'auth' property.",t.NO_ISSUE_IDENTIFIER="Missing Issue ID or Key",t.NO_COMMENT_ID="Missing 'commentID' property.",t.NO_COMMENT_ERROR="Missing 'comment' property.",t.NO_NOTIFICATION_ERROR="Missing 'notification' property",t.NO_GLOBAL_ID_ERROR="Missing 'globalId' property.",t.NO_LINK_ID_ERROR="Missing 'linkId' property.",t.NO_TRANSITION_ERROR="Missing 'transition' property.",t.NO_ISSUE_ERROR="Missing 'issue' property",t.NO_ASSIGNEE_ERROR="Missing 'assignee' property",t.NO_WATCHER_ERROR="Missing 'watcher' property",t.NO_WORKLOG_ERROR="Missing 'worklog' property",t.NO_WORKLOG_ID_ERROR="Missing 'worklogId' property",t.NO_FILENAME_ERROR="Missing 'filename' property",t.NO_PROPERTY_KEY_ERROR="Missing 'propertyKey' property",t.NO_PROPERTY_VALUE_ERROR="Missing 'propertyValue' property",t.NO_ATTACHMENT_ID_ERROR="Missing 'attachmentId' property",t.NO_AUDIT_ERROR="Missing 'audit' property",t.NO_AVATAR_TYPE_ERROR="Missing 'avatarType' property",t.NO_COMMENT_PROPERTY_KEY_ERROR="Missing 'propertyKey' property",t.NO_COMMENT_PROPERTY_VALUE_ERROR="Missing 'propertyValue' property",t.NO_ISSUE_LINK_ERROR="Missing'issueLink' property",t.NO_ISSUE_LINK_ID_ERROR="Missing'linkId' property",t.NO_ISSUE_LINK_TYPE_ID="Missing 'issueLinkTypeId' property.",t.NO_FIELD_OPTION_ID_ERROR="Missing 'fieldOptionId' property."},function(e,t,a){e.exports=l;var i=a(0),r=a(2).Buffer,o=(a(7),a(1),a(9)),n=a(5),s=a(12),u=a(28),c=o.InvalidAlgorithmError,p=o.SignatureParseError;function l(e){i.object(e,"options"),i.arrayOfObject(e.parts,"options.parts"),i.string(e.type,"options.type");for(var t={},a=0;a<e.parts.length;++a){var r=e.parts[a];t[r.name]=r}this.type=e.type,this.hashAlgorithm=e.hashAlgo,this.curve=e.curve,this.parts=e.parts,this.part=t}function m(e,t,a,r){if("ssh"===a){try{var o=new u({buffer:e}),n=o.readString()}catch(e){}if(void 0!==o){var s="SSH signature does not match expected type (expected "+t+", got "+n+")";switch(n){case"ssh-rsa":i.strictEqual(t,"rsa",s),r.hashAlgo="sha1";break;case"rsa-sha2-256":i.strictEqual(t,"rsa",s),r.hashAlgo="sha256";break;case"rsa-sha2-512":i.strictEqual(t,"rsa",s),r.hashAlgo="sha512";break;case"ssh-ed25519":i.strictEqual(t,"ed25519",s),r.hashAlgo="sha512";break;default:throw new Error("Unknown SSH signature type: "+n)}var c=o.readPart();return i.ok(o.atEnd(),"extra trailing bytes"),c.name="sig",r.parts.push(c),new l(r)}}return r.parts.push({name:"sig",data:e}),new l(r)}l.prototype.toBuffer=function(e){var t;void 0===e&&(e="asn1"),i.string(e,"format");var a="ssh-"+this.type;switch(this.type){case"rsa":switch(this.hashAlgorithm){case"sha256":a="rsa-sha2-256";break;case"sha512":a="rsa-sha2-512";break;case"sha1":case void 0:break;default:throw new Error("SSH signature format does not support hash algorithm "+this.hashAlgorithm)}return"ssh"===e?((t=new u({})).writeString(a),t.writePart(this.part.sig),t.toBuffer()):this.part.sig.data;case"ed25519":return"ssh"===e?((t=new u({})).writeString(a),t.writePart(this.part.sig),t.toBuffer()):this.part.sig.data;case"dsa":case"ecdsa":var o,c;if("asn1"===e){var p=new s.BerWriter;return p.startSequence(),o=n.mpNormalize(this.part.r.data),c=n.mpNormalize(this.part.s.data),p.writeBuffer(o,s.Ber.Integer),p.writeBuffer(c,s.Ber.Integer),p.endSequence(),p.buffer}if("ssh"===e&&"dsa"===this.type){if((t=new u({})).writeString("ssh-dss"),(o=this.part.r.data).length>20&&0===o[0]&&(o=o.slice(1)),(c=this.part.s.data).length>20&&0===c[0]&&(c=c.slice(1)),this.hashAlgorithm&&"sha1"!==this.hashAlgorithm||o.length+c.length!==40)throw new Error("OpenSSH only supports DSA signatures with SHA1 hash");return t.writeBuffer(r.concat([o,c])),t.toBuffer()}if("ssh"===e&&"ecdsa"===this.type){var l,m=new u({});o=this.part.r.data,m.writeBuffer(o),m.writePart(this.part.s),t=new u({}),0===o[0]&&(o=o.slice(1));var h=8*o.length;return 256===h?l="nistp256":384===h?l="nistp384":528===h&&(l="nistp521"),t.writeString("ecdsa-sha2-"+l),t.writeBuffer(m.toBuffer()),t.toBuffer()}throw new Error("Invalid signature format");default:throw new Error("Invalid signature data")}},l.prototype.toString=function(e){return i.optionalString(e,"format"),this.toBuffer(e).toString("base64")},l.parse=function(e,t,a){"string"==typeof e&&(e=r.from(e,"base64")),i.buffer(e,"data"),i.string(a,"format"),i.string(t,"type");var o={};o.type=t.toLowerCase(),o.parts=[];try{switch(i.ok(e.length>0,"signature must not be empty"),o.type){case"rsa":case"ed25519":return m(e,t,a,o);case"dsa":case"ecdsa":return"asn1"===a?function(e,t,a,i){var r=new s.BerReader(e);r.readSequence();var o=r.readString(s.Ber.Integer,!0),u=r.readString(s.Ber.Integer,!0);return i.parts.push({name:"r",data:n.mpNormalize(o)}),i.parts.push({name:"s",data:n.mpNormalize(u)}),new l(i)}(e,0,0,o):"dsa"===o.type?function(e,t,a,r){if(40!=e.length){var o=new u({buffer:e}),n=o.readBuffer();"ssh-dss"===n.toString("ascii")&&(n=o.readBuffer()),i.ok(o.atEnd(),"extra trailing bytes"),i.strictEqual(n.length,40,"invalid inner length"),e=n}return r.parts.push({name:"r",data:e.slice(0,20)}),r.parts.push({name:"s",data:e.slice(20,40)}),new l(r)}(e,0,0,o):function(e,t,a,r){var o,n,s=new u({buffer:e}),c=s.readBuffer(),p=c.toString("ascii");if("ecdsa-"===p.slice(0,6)){var m=p.split("-");switch(i.strictEqual(m[0],"ecdsa"),i.strictEqual(m[1],"sha2"),r.curve=m[2],r.curve){case"nistp256":r.hashAlgo="sha256";break;case"nistp384":r.hashAlgo="sha384";break;case"nistp521":r.hashAlgo="sha512";break;default:throw new Error("Unsupported ECDSA curve: "+r.curve)}c=s.readBuffer(),i.ok(s.atEnd(),"extra trailing bytes on outer"),s=new u({buffer:c}),o=s.readPart()}else o={data:c};return n=s.readPart(),i.ok(s.atEnd(),"extra trailing bytes"),o.name="r",n.name="s",r.parts.push(o),r.parts.push(n),new l(r)}(e,0,0,o);default:throw new c(t)}}catch(e){if(e instanceof c)throw e;throw new p(t,a,e)}},l.isSignature=function(e,t){return n.isCompatible(e,l,t)},l.prototype._sshpkApiVersion=[2,1],l._oldVersionDetect=function(e){return i.func(e.toBuffer),e.hasOwnProperty("hashAlgorithm")?[2,0]:[1,0]}},function(e,t,a){var i=a(107);e.exports={Ber:i,BerReader:i.Reader,BerWriter:i.Writer}},function(e,t){e.exports=require("fs")},function(e,t,a){e.exports={read:function(e,t,a){var u=e;"string"!=typeof e&&(i.buffer(e,"buf"),e=e.toString("ascii"));var c,y,k=e.trim().split(/[\r\n]+/g),w=-1;for(;!c&&w<k.length;)c=k[++w].match(/[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);i.ok(c,"invalid PEM header");var j=k.length;for(;!y&&j>0;)y=k[--j].match(/[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);i.ok(y,"invalid PEM footer"),i.equal(c[2],y[2]);var x,E=c[2].toLowerCase();c[1]&&(i.equal(c[1],y[1],"PEM header and footer mismatch"),x=c[1].trim());k=k.slice(w,j+1);var S,_,R,A={};for(;k=k.slice(1),c=k[0].match(/^([A-Za-z0-9-]+): (.+)$/);)A[c[1].toLowerCase()]=c[2];if(k=k.slice(0,-1).join(""),e=n.from(k,"base64"),A["proc-type"]){var C=A["proc-type"].split(",");if("4"===C[0]&&"ENCRYPTED"===C[1]){if("string"==typeof t.passphrase&&(t.passphrase=n.from(t.passphrase,"utf-8")),!n.isBuffer(t.passphrase))throw new d.KeyEncryptedError(t.filename,"PEM");C=A["dek-info"].split(","),i.ok(2===C.length),S=C[0].toLowerCase(),R=n.from(C[1],"hex"),_=s.opensslKeyDeriv(S,R,t.passphrase,1).key}}if(x&&"encrypted"===x.toLowerCase()){var q,O=new r.BerReader(e);O.readSequence(),O.readSequence(),q=O.offset+O.length;var P=O.readOID();if(P!==f)throw new Error("Unsupported PEM/PKCS8 encryption scheme: "+P);O.readSequence(),O.readSequence();var F=O.offset+O.length,z=O.readOID();if(z!==g)throw new Error("Unsupported PBES2 KDF: "+z);O.readSequence();var T=O.readString(r.Ber.OctetString,!0),I=O.readInt(),D="sha1";if(O.offset<F){O.readSequence();var B=O.readOID();if(void 0===(D=b[B]))throw new Error("Unsupported PBKDF2 hash: "+B)}O._offset=F,O.readSequence();var L=O.readOID();if(void 0===(S=v[L]))throw new Error("Unsupported PBES2 cipher: "+L);if(R=O.readString(r.Ber.OctetString,!0),O._offset=q,e=O.readString(r.Ber.OctetString,!0),"string"==typeof t.passphrase&&(t.passphrase=n.from(t.passphrase,"utf-8")),!n.isBuffer(t.passphrase))throw new d.KeyEncryptedError(t.filename,"PEM");var U=s.opensshCipherInfo(S);S=U.opensslName,_=s.pbkdf2(D,T,I,U.keySize,t.passphrase),x=void 0}if(S&&_&&R){var N,H=o.createDecipheriv(S,_,R),M=[];for(H.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),H.write(e),H.end();null!==(N=H.read());)M.push(N);e=n.concat(M)}if(x&&"openssh"===x.toLowerCase())return m.readSSHPrivate(E,e,t);if(x&&"ssh2"===x.toLowerCase())return h.readType(E,e,t);var K=new r.BerReader(e);return K.originalInput=u,K.readSequence(),x?(a&&i.strictEqual(a,"pkcs1"),p.readPkcs1(x,E,K)):(a&&i.strictEqual(a,"pkcs8"),l.readPkcs8(x,E,K))},write:function(e,t,a){i.object(e);var o,s={ecdsa:"EC",rsa:"RSA",dsa:"DSA",ed25519:"EdDSA"}[e.type],m=new r.BerWriter;if(c.isPrivateKey(e))a&&"pkcs8"===a?(o="PRIVATE KEY",l.writePkcs8(m,e)):(a&&i.strictEqual(a,"pkcs1"),o=s+" PRIVATE KEY",p.writePkcs1(m,e));else{if(!u.isKey(e))throw new Error("key is not a Key or PrivateKey");a&&"pkcs1"===a?(o=s+" PUBLIC KEY",p.writePkcs1(m,e)):(a&&i.strictEqual(a,"pkcs8"),o="PUBLIC KEY",l.writePkcs8(m,e))}var h=m.buffer.toString("base64"),d=h.length+h.length/64+18+16+2*o.length+10,f=n.alloc(d),g=0;g+=f.write("-----BEGIN "+o+"-----\n",g);for(var v=0;v<h.length;){var y=v+64;y>h.length&&(y=h.length),g+=f.write(h.slice(v,y),g),f[g++]=10,v=y}return g+=f.write("-----END "+o+"-----\n",g),f.slice(0,g)}};var i=a(0),r=a(12),o=a(1),n=a(2).Buffer,s=(a(7),a(5)),u=a(4),c=a(6),p=a(42),l=a(29),m=a(34),h=a(15),d=a(9),f="1.2.840.113549.1.5.13",g="1.2.840.113549.1.5.12",v={"1.2.840.113549.3.7":"3des-cbc","2.16.840.1.101.3.4.1.2":"aes128-cbc","2.16.840.1.101.3.4.1.42":"aes256-cbc"},y={};Object.keys(v).forEach(function(e){y[v[e]]=e});var b={"1.2.840.113549.2.7":"sha1","1.2.840.113549.2.9":"sha256","1.2.840.113549.2.11":"sha512"},k={};Object.keys(b).forEach(function(e){k[b[e]]=e})},function(e,t,a){e.exports={read:m.bind(void 0,!1,void 0),readType:m.bind(void 0,!1),write:function(e,t){i.object(e);var a,s=l(e),p=o.info[e.type];u.isPrivateKey(e)&&(p=o.privInfo[e.type]);var m=p.parts,h=new c({});for(h.writeString(s),a=0;a<m.length;++a){var d=e.part[m[a]].data;!1!==p.normalize&&(d="ed25519"===e.type?n.zeroPadToLength(d,32):n.mpNormalize(d)),"ed25519"===e.type&&"k"===m[a]&&(d=r.concat([d,e.part.A.data])),h.writeBuffer(d)}return h.toBuffer()},readPartial:m.bind(void 0,!0),readInternal:m,keyTypeToAlg:l,algToKeyType:p};var i=a(0),r=a(2).Buffer,o=a(7),n=a(5),s=a(4),u=a(6),c=a(28);function p(e){if(i.string(e),"ssh-dss"===e)return"dsa";if("ssh-rsa"===e)return"rsa";if("ssh-ed25519"===e)return"ed25519";if("ssh-curve25519"===e)return"curve25519";if(e.match(/^ecdsa-sha2-/))return"ecdsa";throw new Error("Unknown algorithm "+e)}function l(e){if(i.object(e),"dsa"===e.type)return"ssh-dss";if("rsa"===e.type)return"ssh-rsa";if("ed25519"===e.type)return"ssh-ed25519";if("curve25519"===e.type)return"ssh-curve25519";if("ecdsa"===e.type)return"ecdsa-sha2-"+e.part.curve.data.toString();throw new Error("Unknown key type "+e.type)}function m(e,t,a,l){"string"==typeof a&&(a=r.from(a)),i.buffer(a,"buf");var m={},h=m.parts=[],d=new c({buffer:a}),f=d.readString();i.ok(!d.atEnd(),"key must have at least one part"),m.type=p(f);var g=o.info[m.type].parts.length;for(t&&"private"===t&&(g=o.privInfo[m.type].parts.length);!d.atEnd()&&h.length<g;)h.push(d.readPart());for(;!e&&!d.atEnd();)h.push(d.readPart());i.ok(h.length>=1,"key must have at least one part"),i.ok(e||d.atEnd(),"leftover bytes at end of key");var v=s,y=o.info[m.type];if("private"!==t&&y.parts.length===h.length||(y=o.privInfo[m.type],v=u),i.strictEqual(y.parts.length,h.length),"ecdsa"===m.type){var b=/^ecdsa-sha2-(.+)$/.exec(f);i.ok(null!==b),i.strictEqual(b[1],h[0].data.toString())}for(var k=!0,w=0;w<y.parts.length;++w){var j,x=h[w];if(x.name=y.parts[w],"ed25519"===m.type&&"k"===x.name&&(x.data=x.data.slice(0,32)),"curve"!==x.name&&!1!==y.normalize)(j="ed25519"===m.type?n.zeroPadToLength(x.data,32):n.mpNormalize(x.data)).toString("binary")!==x.data.toString("binary")&&(x.data=j,k=!1)}return k&&(m._rfc4253Cache=d.toBuffer()),e&&"object"==typeof e&&(e.remainder=d.remainder(),e.consumed=d._offset),new v(m)}},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("http")},function(e,t,a){"use strict";function i(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var r=i(a(86)),o=i(a(87)),n=i(a(88)),s=i(a(89)),u=i(a(1)),c=a(90),p=i(a(91)),l=i(a(92)),m=a(3),h=a(13),d=i(h),f=i(a(16));const g={chat:{read:[["messages",null,"msg","reactions","reactions",null]]}};function v(e,t){if(!e)return e;const a={...e};return a.parent?(a.parent=a.parent.slice(),a.parent.push(t)):a.parent=[t],a}function y(e,t){return null==e||"object"!=typeof e?e:Array.isArray(e)?e.map((e,a)=>y(e,v(t,a))):Object.keys(e).reduce((a,i)=>{const r=function(e){if(!e||!g[e.apiName]||!g[e.apiName][e.method])return!1;const t=e.parent?e.parent.length:0;for(const a of g[e.apiName][e.method]){if(a.length!==t)continue;let i=!1;for(const[t,r]of a.entries())if(null!==r&&"object"==typeof e.parent&&e.parent[t]!==r){i=!0;break}if(!i)return!0}return!1}(t)?i:o(i);return"object"==typeof e[i]?{...a,[r]:y(e[i],v(t,i))}:{...a,[r]:e[i]}},{})}const b=(e,t,a,i={stdinBuffer:void 0,onStdOut:void 0})=>{const r=[...a];t&&r.unshift("--home",t);const o=c.spawn(f.join(e,"keybase"),r),n=[],s=[];i.stdinBuffer&&o.stdin.write(i.stdinBuffer),o.stdin.end();const u=p.createInterface({input:o.stdout});return i.onStdOut?u.on("line",i.onStdOut):o.stdout.on("data",e=>{n.push(e)}),o.stderr.on("data",e=>{s.push(e)}),new Promise((e,t)=>{o.on("close",a=>{let r=null;if(a){const e=Buffer.concat(s).toString("utf8");t(new Error(e))}else{const e=Buffer.concat(n).toString("utf8");try{r=i.json?JSON.parse(e):e}catch(e){t(e)}}e(r)})})};async function k(e,t){const a=await b(e,t,["status","--json"],{json:!0});if(a&&a.Username&&a.Device&&a.Device.name)return{username:a.Username,devicename:a.Device.name,homeDir:t};throw new Error("Failed to get current username and device name.")}async function w(e,t){try{return await b(e,t,["--no-auto-fork","status","--json"],{json:!0}),!0}catch(e){return!1}}const j=m.promisify(c.exec);function x(e){return new Promise(t=>{setTimeout(()=>{t()},e)})}class E{constructor(e){this.workingDir=e,this.initialized=!1,this.verbose=!1,this.botLite=!0,this.disableTyping=!0}async init(e,t,a){if(!e||"string"!=typeof e)throw new Error(`Please provide a username to initialize the bot. Got: ${JSON.stringify(e)}`);if(!t||"string"!=typeof t)throw new Error("Please provide a paperkey to initialize the bot.");if(this.initialized)throw new Error("Cannot initialize an already initialized bot.");this.homeDir=this.workingDir,this.serviceLogFile=f.join(this.homeDir,"Library","Logs","keybase.service.log"),this.botLite=!a||Boolean("boolean"!=typeof a.botLite||a.botLite),this.disableTyping=!a||Boolean("boolean"!=typeof a.disableTyping||a.disableTyping);try{await this.startupService(),await b(this.workingDir,this.homeDir,["oneshot","--username",e],{stdinBuffer:t}),await b(this.workingDir,this.homeDir,["chat","notification-settings","disable-typing",this.disableTyping.toString()]);const i=await k(this.workingDir,this.homeDir);if(i&&i.username&&i.devicename&&(this.initialized="paperkey",this.username=i.username,this.devicename=i.devicename,this.verbose=!!a&&Boolean(a.verbose)),this.username!==e)throw new Error("Failed to initialize service.")}catch(e){throw await this._killCustomService(),e}}async initFromRunningService(e,t){if(this.initialized)throw new Error("Cannot initialize an already initialized bot.");this.homeDir=e;const a=await k(this.workingDir,this.homeDir);a&&a.username&&a.devicename&&(this.initialized="runningService",this.username=a.username,this.devicename=a.devicename,this.verbose=!!t&&Boolean(t.verbose))}async _killCustomService(){try{await b(this.workingDir,this.homeDir,["logout"])}catch(e){}try{await b(this.workingDir,this.homeDir,["ctl","stop","--shutdown"])}catch(e){}let e=0;for(;await x(100),this.running;)if(++e>=100)throw new Error(`The service didn't finish shutting down in time (${this.workingDir})`)}async deinit(){if(!this.initialized)throw new Error("Cannot deinitialize an uninitialized bot.");"paperkey"===this.initialized&&await this._killCustomService(),this.initialized=!1}myInfo(){return this.username&&this.devicename?{username:this.username,devicename:this.devicename,homeDir:this.homeDir?this.homeDir:void 0,botLite:this.botLite,disableTyping:this.disableTyping}:null}async startupService(){const e=["service"];this.homeDir&&e.unshift("--home",this.homeDir),this.serviceLogFile&&e.unshift("-d","--log-file",this.serviceLogFile),this.botLite&&e.unshift("--enable-bot-lite-mode");const t=c.spawn("keybase",e,{env:process.env});return this.running=!0,t.on("exit",e=>{this.running=!1}),new Promise(async(e,a)=>{t.on("close",e=>{a(new Error(`keybase service exited with code ${e} (${this.workingDir})`))});let i=0;for(;!await w(this.workingDir,this.homeDir);)if(await x(100),++i>=100)throw new Error("Couldn't start up service fast enough");e()})}}const S={chat:1,team:1,wallet:1};class _{constructor(e){this._workingDir=e,this.initialized=!1,this.verbose=!1,this.spawnedProcesses=[]}async _init(e,t){const a=await k(this._workingDir,e);this.homeDir=e,this.username=a.username,this.devicename=a.devicename,this.initialized=!0}async _deinit(){for(const e of this.spawnedProcesses)e.kill()}async _runApiCommand(e){const t=e.options?function e(t,a){return null==t||"object"!=typeof t?t:Array.isArray(t)?t.map(t=>e(t,a)):Object.keys(t).reduce((i,o)=>{let s;return s="wallet"===a?n(o):r(o),"object"==typeof t[o]?{...i,[s]:e(t[o],a)}:{...i,[s]:t[o]}},{})}(e.options,e.apiName):void 0,a={method:e.method,params:{version:S[e.apiName],options:t}},i=JSON.stringify(a),o=i.length,s=await b(this._workingDir,this.homeDir,[e.apiName,"api"],{stdinBuffer:Buffer.alloc(o,i,"utf8"),json:!0});if(s.hasOwnProperty("error"))throw new Error(s.error.message);return y(s.result,{apiName:e.apiName,method:e.method})}async _guardInitialized(){if(!this.initialized)throw new Error("The client is not yet initialized.")}_pathToKeybaseBinary(){return f.join(this._workingDir,"keybase")}}class R extends _{async list(e){await this._guardInitialized();const t=await this._runApiCommand({apiName:"chat",method:"list",options:e});if(!t)throw new Error("Keybase chat list returned nothing.");return t.conversations||[]}async listChannels(e,t){await this._guardInitialized();const a={...t,name:e,membersType:t&&t.membersType?t.membersType:"team"},i=await this._runApiCommand({apiName:"chat",method:"listconvsonname",options:a});if(!i)throw new Error("Keybase chat list convs on name returned nothing.");return i.conversations||[]}async read(e,t){await this._guardInitialized();const a={...t,channel:e,peek:!(!t||!t.peek)&&t.peek,unreadOnly:!(!t||void 0===t.unreadOnly)&&t.unreadOnly},i=await this._runApiCommand({apiName:"chat",method:"read",options:a});if(!i)throw new Error("Keybase chat read returned nothing.");return{pagination:i.pagination,messages:i.messages.map(e=>e.msg)}}async joinChannel(e){if(await this._guardInitialized(),!await this._runApiCommand({apiName:"chat",method:"join",options:{channel:e}}))throw new Error("Keybase chat join returned nothing")}async leaveChannel(e){if(await this._guardInitialized(),!await this._runApiCommand({apiName:"chat",method:"leave",options:{channel:e}}))throw new Error("Keybase chat leave returned nothing")}async send(e,t,a){await this._guardInitialized();const i={...a,channel:e,message:t},r=await this._runApiCommand({apiName:"chat",method:"send",options:i});if(!r)throw new Error("Keybase chat send returned nothing");return{id:r.id}}async createChannel(e){await this._guardInitialized();const t={channel:e};if(!await this._runApiCommand({apiName:"chat",method:"newconv",options:t}))throw new Error("Keybase chat newconv returned nothing")}async attach(e,t,a){await this._guardInitialized();const i={...a,channel:e,filename:t},r=await this._runApiCommand({apiName:"chat",method:"attach",options:i});if(!r)throw new Error("Keybase chat attach returned nothing");return{id:r.id}}async download(e,t,a,i){await this._guardInitialized();const r={...i,channel:e,messageId:t,output:a};if(!await this._runApiCommand({apiName:"chat",method:"download",options:r}))throw new Error("Keybase chat download returned nothing")}async react(e,t,a,i){await this._guardInitialized();const r={...i,channel:e,messageId:t,message:{body:a}},o=await this._runApiCommand({apiName:"chat",method:"reaction",options:r});if(!o)throw new Error("Keybase chat react returned nothing.");return{id:o.id}}async delete(e,t,a){await this._guardInitialized();const i={...a,channel:e,messageId:t};if(!await this._runApiCommand({apiName:"chat",method:"delete",options:i}))throw new Error("Keybase chat delete returned nothing.")}async watchChannelForNewMessages(e,t,a,i){await this._guardInitialized(),this._chatListen(t,a,e,i)}async watchAllChannelsForNewMessages(e,t,a){await this._guardInitialized(),this._chatListen(e,t,void 0,a)}_channelMatch(e,t){const a=void 0!==e.public&&e.public,i=void 0===e.topicType?"chat":e.topicType,r=void 0===e.topicName?"general":e.topicName;return t.name===e.name&&t.public===a&&t.topicType===i&&t.topicName===r}_chatListen(e,t,a,i){const r=["chat","api-listen"];this.homeDir&&r.unshift("--home",this.homeDir),(!i||i&&!1!==i.hideExploding)&&r.push("--hide-exploding");const o=c.spawn(this._pathToKeybaseBinary(),r);this.spawnedProcesses.push(o);p.createInterface({input:o.stdout}).on("line",i=>{try{const r=y(JSON.parse(i));if(r.hasOwnProperty("error"))throw new Error(r.error);a&&!this._channelMatch(a,r.msg.channel.topicName)||!this.username||!this.devicename||r.msg.sender.username===this.username.toLowerCase()&&r.msg.sender.deviceName===this.devicename||e(r.msg)}catch(e){t&&t(e)}})}}class A extends _{async balances(){await this._guardInitialized();const e=await this._runApiCommand({apiName:"wallet",method:"balances"});if(!e)throw new Error("Keybase wallet balanaces returned nothing.");return e||[]}async history(e){await this._guardInitialized();const t={accountId:e},a=await this._runApiCommand({apiName:"wallet",method:"history",options:t});if(!a)throw new Error("Keybase wallet history returned nothing.");return a.map(e=>e.payment)}async details(e){await this._guardInitialized();const t={txid:e},a=await this._runApiCommand({apiName:"wallet",method:"details",options:t});if(!a)throw new Error("Keybase wallet details returned nothing.");return a}async lookup(e){await this._guardInitialized();const t={name:e},a=await this._runApiCommand({apiName:"wallet",method:"lookup",options:t});if(!a)throw new Error("Keybase wallet lookup returned nothing.");return a}async send(e,t,a,i){await this._guardInitialized();const r={recipient:e,amount:t,currency:a,message:i},o=await this._runApiCommand({apiName:"wallet",method:"send",options:r});if(!o)throw new Error("Keybase wallet send returned nothing.");return o}async batch(e,t){await this._guardInitialized();const a={batchId:e,payments:t},i=await this._runApiCommand({apiName:"wallet",method:"batch",options:a});if(!i)throw new Error("Keybase wallet batch returned nothing.");return i}async cancel(e){await this._guardInitialized();const t={txid:e};if(!await this._runApiCommand({apiName:"wallet",method:"cancel",options:t}))throw new Error("Keybase wallet cancel returned nothing.")}}e.exports=class{constructor(){this._workingDir=function(){const e=u.randomBytes(16).toString("hex");return f.join(s.tmpdir(),`keybase_bot_${e}`)}(),this._service=new E(this._workingDir),this.chat=new R(this._workingDir),this.wallet=new A(this._workingDir)}async init(e,t,a){await this._prepWorkingDir(),await this._service.init(e,t,a),await this._initSubBots(a)}async initFromRunningService(e,t){await this._prepWorkingDir(),await this._service.initFromRunningService(e,t),await this._initSubBots(t)}myInfo(){return this._service.myInfo()}async deinit(){await this.chat._deinit(),await this._service.deinit(),await async function e(t){const a=m.promisify(d.lstat),i=m.promisify(d.unlink),r=m.promisify(d.rmdir),o=m.promisify(d.readdir);if(await a(t)){for(const r of await o(t)){const o=f.join(t,r);(await a(o)).isDirectory()?await e(o):await i(o)}await r(t)}}(this._workingDir)}async _prepWorkingDir(){const e=await async function(){const{stdout:e}=await j("which keybase");if(!e||!e.trim().length)throw new Error("Could not find keybase binary");return e.trim()}(),t=f.join(this._workingDir,"keybase");await m.promisify(l)(this._workingDir),await m.promisify(h.copyFile)(e,t)}async _initSubBots(e){const t=this.myInfo();if(!t)throw new Error("Issue initializing bot.");await this.chat._init(t.homeDir,e),await this.wallet._init(t.homeDir,e)}}},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("stream")},function(e,t){e.exports=require("assert")},function(e,t,a){"use strict";function i(e,t,a){var i=a?" !== ":" === ",r=a?" || ":" && ",o=a?"!":"",n=a?"":"!";switch(e){case"null":return t+i+"null";case"array":return o+"Array.isArray("+t+")";case"object":return"("+o+t+r+"typeof "+t+i+'"object"'+r+n+"Array.isArray("+t+"))";case"integer":return"(typeof "+t+i+'"number"'+r+n+"("+t+" % 1)"+r+t+i+t+")";default:return"typeof "+t+i+'"'+e+'"'}}e.exports={copy:function(e,t){for(var a in t=t||{},e)t[a]=e[a];return t},checkDataType:i,checkDataTypes:function(e,t){switch(e.length){case 1:return i(e[0],t,!0);default:var a="",r=o(e);for(var n in r.array&&r.object&&(a=r.null?"(":"(!"+t+" || ",a+="typeof "+t+' !== "object")',delete r.null,delete r.array,delete r.object),r.number&&delete r.integer,r)a+=(a?" && ":"")+i(n,t,!0);return a}},coerceToTypes:function(e,t){if(Array.isArray(t)){for(var a=[],i=0;i<t.length;i++){var o=t[i];r[o]?a[a.length]=o:"array"===e&&"array"===o&&(a[a.length]=o)}if(a.length)return a}else{if(r[t])return[t];if("array"===e&&"array"===t)return["array"]}},toHash:o,getProperty:u,escapeQuotes:c,equal:a(46),ucs2length:a(143),varOccurences:function(e,t){t+="[^0-9]";var a=e.match(new RegExp(t,"g"));return a?a.length:0},varReplace:function(e,t,a){return t+="([^0-9])",a=a.replace(/\$/g,"$$$$"),e.replace(new RegExp(t,"g"),a+"$1")},cleanUpCode:function(e){return e.replace(p,"").replace(l,"").replace(m,"if (!($1))")},finalCleanUpCode:function(e,t){var a=e.match(h);a&&2==a.length&&(e=t?e.replace(f,"").replace(y,b):e.replace(d,"").replace(g,v));return(a=e.match(k))&&3===a.length?e.replace(w,""):e},schemaHasRules:function(e,t){if("boolean"==typeof e)return!e;for(var a in e)if(t[a])return!0},schemaHasRulesExcept:function(e,t,a){if("boolean"==typeof e)return!e&&"not"!=a;for(var i in e)if(i!=a&&t[i])return!0},toQuotedString:j,getPathExpr:function(e,t,a,i){return S(e,a?"'/' + "+t+(i?"":".replace(/~/g, '~0').replace(/\\//g, '~1')"):i?"'[' + "+t+" + ']'":"'[\\'' + "+t+" + '\\']'")},getPath:function(e,t,a){var i=j(a?"/"+_(t):u(t));return S(e,i)},getData:function(e,t,a){var i,r,o,n;if(""===e)return"rootData";if("/"==e[0]){if(!x.test(e))throw new Error("Invalid JSON-pointer: "+e);r=e,o="rootData"}else{if(!(n=e.match(E)))throw new Error("Invalid JSON-pointer: "+e);if(i=+n[1],"#"==(r=n[2])){if(i>=t)throw new Error("Cannot access property/index "+i+" levels up, current level is "+t);return a[t-i]}if(i>t)throw new Error("Cannot access data "+i+" levels up, current level is "+t);if(o="data"+(t-i||""),!r)return o}for(var s=o,c=r.split("/"),p=0;p<c.length;p++){var l=c[p];l&&(o+=u(R(l)),s+=" && "+o)}return s},unescapeFragment:function(e){return R(decodeURIComponent(e))},unescapeJsonPointer:R,escapeFragment:function(e){return encodeURIComponent(_(e))},escapeJsonPointer:_};var r=o(["string","number","integer","boolean","null"]);function o(e){for(var t={},a=0;a<e.length;a++)t[e[a]]=!0;return t}var n=/^[a-z$_][a-z$_0-9]*$/i,s=/'|\\/g;function u(e){return"number"==typeof e?"["+e+"]":n.test(e)?"."+e:"['"+c(e)+"']"}function c(e){return e.replace(s,"\\$&").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\f/g,"\\f").replace(/\t/g,"\\t")}var p=/else\s*{\s*}/g,l=/if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g,m=/if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;var h=/[^v.]errors/g,d=/var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g,f=/var errors = 0;|var vErrors = null;/g,g="return errors === 0;",v="validate.errors = null; return true;",y=/if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/,b="return data;",k=/[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g,w=/if \(rootData === undefined\) rootData = data;/;function j(e){return"'"+c(e)+"'"}var x=/^\/(?:[^~]|~0|~1)*$/,E=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function S(e,t){return'""'==e?t:(e+" + "+t).replace(/' \+ '/g,"")}function _(e){return e.replace(/~/g,"~0").replace(/\//g,"~1")}function R(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}},function(e,t,a){var i=a(55),r=i.Buffer;function o(e,t){for(var a in e)t[a]=e[a]}function n(e,t,a){return r(e,t,a)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?e.exports=i:(o(i,t),t.Buffer=n),o(r,n),n.from=function(e,t,a){if("number"==typeof e)throw new TypeError("Argument must not be a number");return r(e,t,a)},n.alloc=function(e,t,a){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=r(e);return void 0!==t?"string"==typeof a?i.fill(t,a):i.fill(t):i.fill(0),i},n.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r(e)},n.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},function(e,t){e.exports=require("querystring")},function(e,t,a){e.exports=d;var i=a(0),r=a(2).Buffer,o=a(7),n=a(1),s=a(9),u=a(4),c=a(6),p=a(30),l=a(5),m=s.FingerprintFormatError,h=s.InvalidAlgorithmError;function d(e){if(i.object(e,"options"),i.string(e.type,"options.type"),i.buffer(e.hash,"options.hash"),i.string(e.algorithm,"options.algorithm"),this.algorithm=e.algorithm.toLowerCase(),!0!==o.hashAlgs[this.algorithm])throw new h(this.algorithm);this.hash=e.hash,this.type=e.type,this.hashType=e.hashType}d.prototype.toString=function(e){switch(void 0===e&&(e="md5"===this.algorithm||"spki"===this.hashType?"hex":"base64"),i.string(e),e){case"hex":return"spki"===this.hashType?this.hash.toString("hex"):this.hash.toString("hex").replace(/(.{2})(?=.)/g,"$1:");case"base64":return"spki"===this.hashType?this.hash.toString("base64"):function(e,t){return e.toUpperCase()+":"+(a=t,a.replace(/=*$/,""));var a}(this.algorithm,this.hash.toString("base64"));default:throw new m(void 0,e)}},d.prototype.matches=function(e){i.object(e,"key or certificate"),"key"===this.type&&"ssh"!==this.hashType?(l.assertCompatible(e,u,[1,7],"key with spki"),c.isPrivateKey(e)&&l.assertCompatible(e,c,[1,6],"privatekey with spki support")):"key"===this.type?l.assertCompatible(e,u,[1,0],"key"):l.assertCompatible(e,p,[1,0],"certificate");var t=e.hash(this.algorithm,this.hashType),a=n.createHash(this.algorithm).update(t).digest("base64");return void 0===this.hash2&&(this.hash2=n.createHash(this.algorithm).update(this.hash).digest("base64")),this.hash2===a};var f=/^[A-Za-z0-9+\/=]+$/,g=/^[a-fA-F0-9]+$/;d.parse=function(e,t){var a,n,s;i.string(e,"fingerprint"),Array.isArray(t)&&(s=t,t={}),i.optionalObject(t,"options"),void 0===t&&(t={}),void 0!==t.enAlgs&&(s=t.enAlgs),void 0!==t.algorithms&&(s=t.algorithms),i.optionalArrayOfString(s,"algorithms");var u="ssh";void 0!==t.hashType&&(u=t.hashType),i.string(u,"options.hashType");var c=e.split(":");if(2==c.length){if(a=c[0].toLowerCase(),!f.test(c[1]))throw new m(e);try{n=r.from(c[1],"base64")}catch(t){throw new m(e)}}else if(c.length>2){if(a="md5","md5"===c[0].toLowerCase()&&(c=c.slice(1)),c=(c=c.map(function(t){for(;t.length<2;)t="0"+t;if(t.length>2)throw new m(e);return t})).join(""),!g.test(c)||c.length%2!=0)throw new m(e);try{n=r.from(c,"hex")}catch(t){throw new m(e)}}else{if(g.test(e))n=r.from(e,"hex");else{if(!f.test(e))throw new m(e);n=r.from(e,"base64")}switch(n.length){case 32:a="sha256";break;case 16:a="md5";break;case 20:a="sha1";break;case 64:a="sha512";break;default:throw new m(e)}void 0===t.hashType&&(u="spki")}if(void 0===a)throw new m(e);if(void 0===o.hashAlgs[a])throw new h(a);if(void 0!==s&&-1===(s=s.map(function(e){return e.toLowerCase()})).indexOf(a))throw new h(a);return new d({algorithm:a,hash:n,type:t.type||"key",hashType:u})},d.isFingerprint=function(e,t){return l.isCompatible(e,d,t)},d.prototype._sshpkApiVersion=[1,2],d._oldVersionDetect=function(e){return i.func(e.toString),i.func(e.matches),[1,0]}},function(e,t,a){(function(){var t;function a(e,t,a){null!=e&&("number"==typeof e?this.fromNumber(e,t,a):null==t&&"string"!=typeof e?this.fromString(e,256):this.fromString(e,t))}function i(){return new a(null)}var r="undefined"!=typeof navigator;r&&"Microsoft Internet Explorer"==navigator.appName?(a.prototype.am=function(e,t,a,i,r,o){for(var n=32767&t,s=t>>15;--o>=0;){var u=32767&this[e],c=this[e++]>>15,p=s*u+c*n;r=((u=n*u+((32767&p)<<15)+a[i]+(1073741823&r))>>>30)+(p>>>15)+s*c+(r>>>30),a[i++]=1073741823&u}return r},t=30):r&&"Netscape"!=navigator.appName?(a.prototype.am=function(e,t,a,i,r,o){for(;--o>=0;){var n=t*this[e++]+a[i]+r;r=Math.floor(n/67108864),a[i++]=67108863&n}return r},t=26):(a.prototype.am=function(e,t,a,i,r,o){for(var n=16383&t,s=t>>14;--o>=0;){var u=16383&this[e],c=this[e++]>>14,p=s*u+c*n;r=((u=n*u+((16383&p)<<14)+a[i]+r)>>28)+(p>>14)+s*c,a[i++]=268435455&u}return r},t=28),a.prototype.DB=t,a.prototype.DM=(1<<t)-1,a.prototype.DV=1<<t;a.prototype.FV=Math.pow(2,52),a.prototype.F1=52-t,a.prototype.F2=2*t-52;var o,n,s="0123456789abcdefghijklmnopqrstuvwxyz",u=new Array;for(o="0".charCodeAt(0),n=0;n<=9;++n)u[o++]=n;for(o="a".charCodeAt(0),n=10;n<36;++n)u[o++]=n;for(o="A".charCodeAt(0),n=10;n<36;++n)u[o++]=n;function c(e){return s.charAt(e)}function p(e,t){var a=u[e.charCodeAt(t)];return null==a?-1:a}function l(e){var t=i();return t.fromInt(e),t}function m(e){var t,a=1;return 0!=(t=e>>>16)&&(e=t,a+=16),0!=(t=e>>8)&&(e=t,a+=8),0!=(t=e>>4)&&(e=t,a+=4),0!=(t=e>>2)&&(e=t,a+=2),0!=(t=e>>1)&&(e=t,a+=1),a}function h(e){this.m=e}function d(e){this.m=e,this.mp=e.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<e.DB-15)-1,this.mt2=2*e.t}function f(e,t){return e&t}function g(e,t){return e|t}function v(e,t){return e^t}function y(e,t){return e&~t}function b(e){if(0==e)return-1;var t=0;return 0==(65535&e)&&(e>>=16,t+=16),0==(255&e)&&(e>>=8,t+=8),0==(15&e)&&(e>>=4,t+=4),0==(3&e)&&(e>>=2,t+=2),0==(1&e)&&++t,t}function k(e){for(var t=0;0!=e;)e&=e-1,++t;return t}function w(){}function j(e){return e}function x(e){this.r2=i(),this.q3=i(),a.ONE.dlShiftTo(2*e.t,this.r2),this.mu=this.r2.divide(e),this.m=e}h.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},h.prototype.revert=function(e){return e},h.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},h.prototype.mulTo=function(e,t,a){e.multiplyTo(t,a),this.reduce(a)},h.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},d.prototype.convert=function(e){var t=i();return e.abs().dlShiftTo(this.m.t,t),t.divRemTo(this.m,null,t),e.s<0&&t.compareTo(a.ZERO)>0&&this.m.subTo(t,t),t},d.prototype.revert=function(e){var t=i();return e.copyTo(t),this.reduce(t),t},d.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var a=32767&e[t],i=a*this.mpl+((a*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[a=t+this.m.t]+=this.m.am(0,i,e,t,0,this.m.t);e[a]>=e.DV;)e[a]-=e.DV,e[++a]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},d.prototype.mulTo=function(e,t,a){e.multiplyTo(t,a),this.reduce(a)},d.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},a.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e[t]=this[t];e.t=this.t,e.s=this.s},a.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},a.prototype.fromString=function(e,t){var i;if(16==t)i=4;else if(8==t)i=3;else if(256==t)i=8;else if(2==t)i=1;else if(32==t)i=5;else{if(4!=t)return void this.fromRadix(e,t);i=2}this.t=0,this.s=0;for(var r=e.length,o=!1,n=0;--r>=0;){var s=8==i?255&e[r]:p(e,r);s<0?"-"==e.charAt(r)&&(o=!0):(o=!1,0==n?this[this.t++]=s:n+i>this.DB?(this[this.t-1]|=(s&(1<<this.DB-n)-1)<<n,this[this.t++]=s>>this.DB-n):this[this.t-1]|=s<<n,(n+=i)>=this.DB&&(n-=this.DB))}8==i&&0!=(128&e[0])&&(this.s=-1,n>0&&(this[this.t-1]|=(1<<this.DB-n)-1<<n)),this.clamp(),o&&a.ZERO.subTo(this,this)},a.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},a.prototype.dlShiftTo=function(e,t){var a;for(a=this.t-1;a>=0;--a)t[a+e]=this[a];for(a=e-1;a>=0;--a)t[a]=0;t.t=this.t+e,t.s=this.s},a.prototype.drShiftTo=function(e,t){for(var a=e;a<this.t;++a)t[a-e]=this[a];t.t=Math.max(this.t-e,0),t.s=this.s},a.prototype.lShiftTo=function(e,t){var a,i=e%this.DB,r=this.DB-i,o=(1<<r)-1,n=Math.floor(e/this.DB),s=this.s<<i&this.DM;for(a=this.t-1;a>=0;--a)t[a+n+1]=this[a]>>r|s,s=(this[a]&o)<<i;for(a=n-1;a>=0;--a)t[a]=0;t[n]=s,t.t=this.t+n+1,t.s=this.s,t.clamp()},a.prototype.rShiftTo=function(e,t){t.s=this.s;var a=Math.floor(e/this.DB);if(a>=this.t)t.t=0;else{var i=e%this.DB,r=this.DB-i,o=(1<<i)-1;t[0]=this[a]>>i;for(var n=a+1;n<this.t;++n)t[n-a-1]|=(this[n]&o)<<r,t[n-a]=this[n]>>i;i>0&&(t[this.t-a-1]|=(this.s&o)<<r),t.t=this.t-a,t.clamp()}},a.prototype.subTo=function(e,t){for(var a=0,i=0,r=Math.min(e.t,this.t);a<r;)i+=this[a]-e[a],t[a++]=i&this.DM,i>>=this.DB;if(e.t<this.t){for(i-=e.s;a<this.t;)i+=this[a],t[a++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;a<e.t;)i-=e[a],t[a++]=i&this.DM,i>>=this.DB;i-=e.s}t.s=i<0?-1:0,i<-1?t[a++]=this.DV+i:i>0&&(t[a++]=i),t.t=a,t.clamp()},a.prototype.multiplyTo=function(e,t){var i=this.abs(),r=e.abs(),o=i.t;for(t.t=o+r.t;--o>=0;)t[o]=0;for(o=0;o<r.t;++o)t[o+i.t]=i.am(0,r[o],t,o,0,i.t);t.s=0,t.clamp(),this.s!=e.s&&a.ZERO.subTo(t,t)},a.prototype.squareTo=function(e){for(var t=this.abs(),a=e.t=2*t.t;--a>=0;)e[a]=0;for(a=0;a<t.t-1;++a){var i=t.am(a,t[a],e,2*a,0,1);(e[a+t.t]+=t.am(a+1,2*t[a],e,2*a+1,i,t.t-a-1))>=t.DV&&(e[a+t.t]-=t.DV,e[a+t.t+1]=1)}e.t>0&&(e[e.t-1]+=t.am(a,t[a],e,2*a,0,1)),e.s=0,e.clamp()},a.prototype.divRemTo=function(e,t,r){var o=e.abs();if(!(o.t<=0)){var n=this.abs();if(n.t<o.t)return null!=t&&t.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=i());var s=i(),u=this.s,c=e.s,p=this.DB-m(o[o.t-1]);p>0?(o.lShiftTo(p,s),n.lShiftTo(p,r)):(o.copyTo(s),n.copyTo(r));var l=s.t,h=s[l-1];if(0!=h){var d=h*(1<<this.F1)+(l>1?s[l-2]>>this.F2:0),f=this.FV/d,g=(1<<this.F1)/d,v=1<<this.F2,y=r.t,b=y-l,k=null==t?i():t;for(s.dlShiftTo(b,k),r.compareTo(k)>=0&&(r[r.t++]=1,r.subTo(k,r)),a.ONE.dlShiftTo(l,k),k.subTo(s,s);s.t<l;)s[s.t++]=0;for(;--b>=0;){var w=r[--y]==h?this.DM:Math.floor(r[y]*f+(r[y-1]+v)*g);if((r[y]+=s.am(0,w,r,b,0,l))<w)for(s.dlShiftTo(b,k),r.subTo(k,r);r[y]<--w;)r.subTo(k,r)}null!=t&&(r.drShiftTo(l,t),u!=c&&a.ZERO.subTo(t,t)),r.t=l,r.clamp(),p>0&&r.rShiftTo(p,r),u<0&&a.ZERO.subTo(r,r)}}},a.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},a.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},a.prototype.exp=function(e,t){if(e>4294967295||e<1)return a.ONE;var r=i(),o=i(),n=t.convert(this),s=m(e)-1;for(n.copyTo(r);--s>=0;)if(t.sqrTo(r,o),(e&1<<s)>0)t.mulTo(o,n,r);else{var u=r;r=o,o=u}return t.revert(r)},a.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var a,i=(1<<t)-1,r=!1,o="",n=this.t,s=this.DB-n*this.DB%t;if(n-- >0)for(s<this.DB&&(a=this[n]>>s)>0&&(r=!0,o=c(a));n>=0;)s<t?(a=(this[n]&(1<<s)-1)<<t-s,a|=this[--n]>>(s+=this.DB-t)):(a=this[n]>>(s-=t)&i,s<=0&&(s+=this.DB,--n)),a>0&&(r=!0),r&&(o+=c(a));return r?o:"0"},a.prototype.negate=function(){var e=i();return a.ZERO.subTo(this,e),e},a.prototype.abs=function(){return this.s<0?this.negate():this},a.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var a=this.t;if(0!=(t=a-e.t))return this.s<0?-t:t;for(;--a>=0;)if(0!=(t=this[a]-e[a]))return t;return 0},a.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+m(this[this.t-1]^this.s&this.DM)},a.prototype.mod=function(e){var t=i();return this.abs().divRemTo(e,null,t),this.s<0&&t.compareTo(a.ZERO)>0&&e.subTo(t,t),t},a.prototype.modPowInt=function(e,t){var a;return a=e<256||t.isEven()?new h(t):new d(t),this.exp(e,a)},a.ZERO=l(0),a.ONE=l(1),w.prototype.convert=j,w.prototype.revert=j,w.prototype.mulTo=function(e,t,a){e.multiplyTo(t,a)},w.prototype.sqrTo=function(e,t){e.squareTo(t)},x.prototype.convert=function(e){if(e.s<0||e.t>2*this.m.t)return e.mod(this.m);if(e.compareTo(this.m)<0)return e;var t=i();return e.copyTo(t),this.reduce(t),t},x.prototype.revert=function(e){return e},x.prototype.reduce=function(e){for(e.drShiftTo(this.m.t-1,this.r2),e.t>this.m.t+1&&(e.t=this.m.t+1,e.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);e.compareTo(this.r2)<0;)e.dAddOffset(1,this.m.t+1);for(e.subTo(this.r2,e);e.compareTo(this.m)>=0;)e.subTo(this.m,e)},x.prototype.mulTo=function(e,t,a){e.multiplyTo(t,a),this.reduce(a)},x.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)};var E,S,_,R=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],A=(1<<26)/R[R.length-1];function C(){var e;e=(new Date).getTime(),S[_++]^=255&e,S[_++]^=e>>8&255,S[_++]^=e>>16&255,S[_++]^=e>>24&255,_>=I&&(_-=I)}if(a.prototype.chunkSize=function(e){return Math.floor(Math.LN2*this.DB/Math.log(e))},a.prototype.toRadix=function(e){if(null==e&&(e=10),0==this.signum()||e<2||e>36)return"0";var t=this.chunkSize(e),a=Math.pow(e,t),r=l(a),o=i(),n=i(),s="";for(this.divRemTo(r,o,n);o.signum()>0;)s=(a+n.intValue()).toString(e).substr(1)+s,o.divRemTo(r,o,n);return n.intValue().toString(e)+s},a.prototype.fromRadix=function(e,t){this.fromInt(0),null==t&&(t=10);for(var i=this.chunkSize(t),r=Math.pow(t,i),o=!1,n=0,s=0,u=0;u<e.length;++u){var c=p(e,u);c<0?"-"==e.charAt(u)&&0==this.signum()&&(o=!0):(s=t*s+c,++n>=i&&(this.dMultiply(r),this.dAddOffset(s,0),n=0,s=0))}n>0&&(this.dMultiply(Math.pow(t,n)),this.dAddOffset(s,0)),o&&a.ZERO.subTo(this,this)},a.prototype.fromNumber=function(e,t,i){if("number"==typeof t)if(e<2)this.fromInt(1);else for(this.fromNumber(e,i),this.testBit(e-1)||this.bitwiseTo(a.ONE.shiftLeft(e-1),g,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(t);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(a.ONE.shiftLeft(e-1),this);else{var r=new Array,o=7&e;r.length=1+(e>>3),t.nextBytes(r),o>0?r[0]&=(1<<o)-1:r[0]=0,this.fromString(r,256)}},a.prototype.bitwiseTo=function(e,t,a){var i,r,o=Math.min(e.t,this.t);for(i=0;i<o;++i)a[i]=t(this[i],e[i]);if(e.t<this.t){for(r=e.s&this.DM,i=o;i<this.t;++i)a[i]=t(this[i],r);a.t=this.t}else{for(r=this.s&this.DM,i=o;i<e.t;++i)a[i]=t(r,e[i]);a.t=e.t}a.s=t(this.s,e.s),a.clamp()},a.prototype.changeBit=function(e,t){var i=a.ONE.shiftLeft(e);return this.bitwiseTo(i,t,i),i},a.prototype.addTo=function(e,t){for(var a=0,i=0,r=Math.min(e.t,this.t);a<r;)i+=this[a]+e[a],t[a++]=i&this.DM,i>>=this.DB;if(e.t<this.t){for(i+=e.s;a<this.t;)i+=this[a],t[a++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;a<e.t;)i+=e[a],t[a++]=i&this.DM,i>>=this.DB;i+=e.s}t.s=i<0?-1:0,i>0?t[a++]=i:i<-1&&(t[a++]=this.DV+i),t.t=a,t.clamp()},a.prototype.dMultiply=function(e){this[this.t]=this.am(0,e-1,this,0,0,this.t),++this.t,this.clamp()},a.prototype.dAddOffset=function(e,t){if(0!=e){for(;this.t<=t;)this[this.t++]=0;for(this[t]+=e;this[t]>=this.DV;)this[t]-=this.DV,++t>=this.t&&(this[this.t++]=0),++this[t]}},a.prototype.multiplyLowerTo=function(e,t,a){var i,r=Math.min(this.t+e.t,t);for(a.s=0,a.t=r;r>0;)a[--r]=0;for(i=a.t-this.t;r<i;++r)a[r+this.t]=this.am(0,e[r],a,r,0,this.t);for(i=Math.min(e.t,t);r<i;++r)this.am(0,e[r],a,r,0,t-r);a.clamp()},a.prototype.multiplyUpperTo=function(e,t,a){--t;var i=a.t=this.t+e.t-t;for(a.s=0;--i>=0;)a[i]=0;for(i=Math.max(t-this.t,0);i<e.t;++i)a[this.t+i-t]=this.am(t-i,e[i],a,0,0,this.t+i-t);a.clamp(),a.drShiftTo(1,a)},a.prototype.modInt=function(e){if(e<=0)return 0;var t=this.DV%e,a=this.s<0?e-1:0;if(this.t>0)if(0==t)a=this[0]%e;else for(var i=this.t-1;i>=0;--i)a=(t*a+this[i])%e;return a},a.prototype.millerRabin=function(e){var t=this.subtract(a.ONE),r=t.getLowestSetBit();if(r<=0)return!1;var o=t.shiftRight(r);(e=e+1>>1)>R.length&&(e=R.length);for(var n=i(),s=0;s<e;++s){n.fromInt(R[Math.floor(Math.random()*R.length)]);var u=n.modPow(o,this);if(0!=u.compareTo(a.ONE)&&0!=u.compareTo(t)){for(var c=1;c++<r&&0!=u.compareTo(t);)if(0==(u=u.modPowInt(2,this)).compareTo(a.ONE))return!1;if(0!=u.compareTo(t))return!1}}return!0},a.prototype.clone=function(){var e=i();return this.copyTo(e),e},a.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},a.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},a.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},a.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},a.prototype.toByteArray=function(){var e=this.t,t=new Array;t[0]=this.s;var a,i=this.DB-e*this.DB%8,r=0;if(e-- >0)for(i<this.DB&&(a=this[e]>>i)!=(this.s&this.DM)>>i&&(t[r++]=a|this.s<<this.DB-i);e>=0;)i<8?(a=(this[e]&(1<<i)-1)<<8-i,a|=this[--e]>>(i+=this.DB-8)):(a=this[e]>>(i-=8)&255,i<=0&&(i+=this.DB,--e)),0!=(128&a)&&(a|=-256),0==r&&(128&this.s)!=(128&a)&&++r,(r>0||a!=this.s)&&(t[r++]=a);return t},a.prototype.equals=function(e){return 0==this.compareTo(e)},a.prototype.min=function(e){return this.compareTo(e)<0?this:e},a.prototype.max=function(e){return this.compareTo(e)>0?this:e},a.prototype.and=function(e){var t=i();return this.bitwiseTo(e,f,t),t},a.prototype.or=function(e){var t=i();return this.bitwiseTo(e,g,t),t},a.prototype.xor=function(e){var t=i();return this.bitwiseTo(e,v,t),t},a.prototype.andNot=function(e){var t=i();return this.bitwiseTo(e,y,t),t},a.prototype.not=function(){for(var e=i(),t=0;t<this.t;++t)e[t]=this.DM&~this[t];return e.t=this.t,e.s=~this.s,e},a.prototype.shiftLeft=function(e){var t=i();return e<0?this.rShiftTo(-e,t):this.lShiftTo(e,t),t},a.prototype.shiftRight=function(e){var t=i();return e<0?this.lShiftTo(-e,t):this.rShiftTo(e,t),t},a.prototype.getLowestSetBit=function(){for(var e=0;e<this.t;++e)if(0!=this[e])return e*this.DB+b(this[e]);return this.s<0?this.t*this.DB:-1},a.prototype.bitCount=function(){for(var e=0,t=this.s&this.DM,a=0;a<this.t;++a)e+=k(this[a]^t);return e},a.prototype.testBit=function(e){var t=Math.floor(e/this.DB);return t>=this.t?0!=this.s:0!=(this[t]&1<<e%this.DB)},a.prototype.setBit=function(e){return this.changeBit(e,g)},a.prototype.clearBit=function(e){return this.changeBit(e,y)},a.prototype.flipBit=function(e){return this.changeBit(e,v)},a.prototype.add=function(e){var t=i();return this.addTo(e,t),t},a.prototype.subtract=function(e){var t=i();return this.subTo(e,t),t},a.prototype.multiply=function(e){var t=i();return this.multiplyTo(e,t),t},a.prototype.divide=function(e){var t=i();return this.divRemTo(e,t,null),t},a.prototype.remainder=function(e){var t=i();return this.divRemTo(e,null,t),t},a.prototype.divideAndRemainder=function(e){var t=i(),a=i();return this.divRemTo(e,t,a),new Array(t,a)},a.prototype.modPow=function(e,t){var a,r,o=e.bitLength(),n=l(1);if(o<=0)return n;a=o<18?1:o<48?3:o<144?4:o<768?5:6,r=o<8?new h(t):t.isEven()?new x(t):new d(t);var s=new Array,u=3,c=a-1,p=(1<<a)-1;if(s[1]=r.convert(this),a>1){var f=i();for(r.sqrTo(s[1],f);u<=p;)s[u]=i(),r.mulTo(f,s[u-2],s[u]),u+=2}var g,v,y=e.t-1,b=!0,k=i();for(o=m(e[y])-1;y>=0;){for(o>=c?g=e[y]>>o-c&p:(g=(e[y]&(1<<o+1)-1)<<c-o,y>0&&(g|=e[y-1]>>this.DB+o-c)),u=a;0==(1&g);)g>>=1,--u;if((o-=u)<0&&(o+=this.DB,--y),b)s[g].copyTo(n),b=!1;else{for(;u>1;)r.sqrTo(n,k),r.sqrTo(k,n),u-=2;u>0?r.sqrTo(n,k):(v=n,n=k,k=v),r.mulTo(k,s[g],n)}for(;y>=0&&0==(e[y]&1<<o);)r.sqrTo(n,k),v=n,n=k,k=v,--o<0&&(o=this.DB-1,--y)}return r.revert(n)},a.prototype.modInverse=function(e){var t=e.isEven();if(this.isEven()&&t||0==e.signum())return a.ZERO;for(var i=e.clone(),r=this.clone(),o=l(1),n=l(0),s=l(0),u=l(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),t?(o.isEven()&&n.isEven()||(o.addTo(this,o),n.subTo(e,n)),o.rShiftTo(1,o)):n.isEven()||n.subTo(e,n),n.rShiftTo(1,n);for(;r.isEven();)r.rShiftTo(1,r),t?(s.isEven()&&u.isEven()||(s.addTo(this,s),u.subTo(e,u)),s.rShiftTo(1,s)):u.isEven()||u.subTo(e,u),u.rShiftTo(1,u);i.compareTo(r)>=0?(i.subTo(r,i),t&&o.subTo(s,o),n.subTo(u,n)):(r.subTo(i,r),t&&s.subTo(o,s),u.subTo(n,u))}return 0!=r.compareTo(a.ONE)?a.ZERO:u.compareTo(e)>=0?u.subtract(e):u.signum()<0?(u.addTo(e,u),u.signum()<0?u.add(e):u):u},a.prototype.pow=function(e){return this.exp(e,new w)},a.prototype.gcd=function(e){var t=this.s<0?this.negate():this.clone(),a=e.s<0?e.negate():e.clone();if(t.compareTo(a)<0){var i=t;t=a,a=i}var r=t.getLowestSetBit(),o=a.getLowestSetBit();if(o<0)return t;for(r<o&&(o=r),o>0&&(t.rShiftTo(o,t),a.rShiftTo(o,a));t.signum()>0;)(r=t.getLowestSetBit())>0&&t.rShiftTo(r,t),(r=a.getLowestSetBit())>0&&a.rShiftTo(r,a),t.compareTo(a)>=0?(t.subTo(a,t),t.rShiftTo(1,t)):(a.subTo(t,a),a.rShiftTo(1,a));return o>0&&a.lShiftTo(o,a),a},a.prototype.isProbablePrime=function(e){var t,a=this.abs();if(1==a.t&&a[0]<=R[R.length-1]){for(t=0;t<R.length;++t)if(a[0]==R[t])return!0;return!1}if(a.isEven())return!1;for(t=1;t<R.length;){for(var i=R[t],r=t+1;r<R.length&&i<A;)i*=R[r++];for(i=a.modInt(i);t<r;)if(i%R[t++]==0)return!1}return a.millerRabin(e)},a.prototype.square=function(){var e=i();return this.squareTo(e),e},a.prototype.Barrett=x,null==S){var q;if(S=new Array,_=0,"undefined"!=typeof window&&window.crypto)if(window.crypto.getRandomValues){var O=new Uint8Array(32);for(window.crypto.getRandomValues(O),q=0;q<32;++q)S[_++]=O[q]}else if("Netscape"==navigator.appName&&navigator.appVersion<"5"){var P=window.crypto.random(32);for(q=0;q<P.length;++q)S[_++]=255&P.charCodeAt(q)}for(;_<I;)q=Math.floor(65536*Math.random()),S[_++]=q>>>8,S[_++]=255&q;_=0,C()}function F(){if(null==E){for(C(),(E=new T).init(S),_=0;_<S.length;++_)S[_]=0;_=0}return E.next()}function z(){}function T(){this.i=0,this.j=0,this.S=new Array}z.prototype.nextBytes=function(e){var t;for(t=0;t<e.length;++t)e[t]=F()},T.prototype.init=function(e){var t,a,i;for(t=0;t<256;++t)this.S[t]=t;for(a=0,t=0;t<256;++t)a=a+this.S[t]+e[t%e.length]&255,i=this.S[t],this.S[t]=this.S[a],this.S[a]=i;this.i=0,this.j=0},T.prototype.next=function(){var e;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,e=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=e,this.S[e+this.S[this.i]&255]};var I=256;a.SecureRandom=z,a.BigInteger=a,e.exports=a}).call(this)},function(e,t,a){!function(e){"use strict";var t=function(e){var t,a=new Float64Array(16);if(e)for(t=0;t<e.length;t++)a[t]=e[t];return a},i=function(){throw new Error("no PRNG")},r=new Uint8Array(16),o=new Uint8Array(32);o[0]=9;var n=t(),s=t([1]),u=t([56129,1]),c=t([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),p=t([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),l=t([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),m=t([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),h=t([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function d(e,t,a,i){e[t]=a>>24&255,e[t+1]=a>>16&255,e[t+2]=a>>8&255,e[t+3]=255&a,e[t+4]=i>>24&255,e[t+5]=i>>16&255,e[t+6]=i>>8&255,e[t+7]=255&i}function f(e,t,a,i,r){var o,n=0;for(o=0;o<r;o++)n|=e[t+o]^a[i+o];return(1&n-1>>>8)-1}function g(e,t,a,i){return f(e,t,a,i,16)}function v(e,t,a,i){return f(e,t,a,i,32)}function y(e,t,a,i){!function(e,t,a,i){for(var r,o=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,n=255&a[0]|(255&a[1])<<8|(255&a[2])<<16|(255&a[3])<<24,s=255&a[4]|(255&a[5])<<8|(255&a[6])<<16|(255&a[7])<<24,u=255&a[8]|(255&a[9])<<8|(255&a[10])<<16|(255&a[11])<<24,c=255&a[12]|(255&a[13])<<8|(255&a[14])<<16|(255&a[15])<<24,p=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,l=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,m=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,h=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,d=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,f=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,g=255&a[16]|(255&a[17])<<8|(255&a[18])<<16|(255&a[19])<<24,v=255&a[20]|(255&a[21])<<8|(255&a[22])<<16|(255&a[23])<<24,y=255&a[24]|(255&a[25])<<8|(255&a[26])<<16|(255&a[27])<<24,b=255&a[28]|(255&a[29])<<8|(255&a[30])<<16|(255&a[31])<<24,k=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,w=o,j=n,x=s,E=u,S=c,_=p,R=l,A=m,C=h,q=d,O=f,P=g,F=v,z=y,T=b,I=k,D=0;D<20;D+=2)w^=(r=(F^=(r=(C^=(r=(S^=(r=w+F|0)<<7|r>>>25)+w|0)<<9|r>>>23)+S|0)<<13|r>>>19)+C|0)<<18|r>>>14,_^=(r=(j^=(r=(z^=(r=(q^=(r=_+j|0)<<7|r>>>25)+_|0)<<9|r>>>23)+q|0)<<13|r>>>19)+z|0)<<18|r>>>14,O^=(r=(R^=(r=(x^=(r=(T^=(r=O+R|0)<<7|r>>>25)+O|0)<<9|r>>>23)+T|0)<<13|r>>>19)+x|0)<<18|r>>>14,I^=(r=(P^=(r=(A^=(r=(E^=(r=I+P|0)<<7|r>>>25)+I|0)<<9|r>>>23)+E|0)<<13|r>>>19)+A|0)<<18|r>>>14,w^=(r=(E^=(r=(x^=(r=(j^=(r=w+E|0)<<7|r>>>25)+w|0)<<9|r>>>23)+j|0)<<13|r>>>19)+x|0)<<18|r>>>14,_^=(r=(S^=(r=(A^=(r=(R^=(r=_+S|0)<<7|r>>>25)+_|0)<<9|r>>>23)+R|0)<<13|r>>>19)+A|0)<<18|r>>>14,O^=(r=(q^=(r=(C^=(r=(P^=(r=O+q|0)<<7|r>>>25)+O|0)<<9|r>>>23)+P|0)<<13|r>>>19)+C|0)<<18|r>>>14,I^=(r=(T^=(r=(z^=(r=(F^=(r=I+T|0)<<7|r>>>25)+I|0)<<9|r>>>23)+F|0)<<13|r>>>19)+z|0)<<18|r>>>14;w=w+o|0,j=j+n|0,x=x+s|0,E=E+u|0,S=S+c|0,_=_+p|0,R=R+l|0,A=A+m|0,C=C+h|0,q=q+d|0,O=O+f|0,P=P+g|0,F=F+v|0,z=z+y|0,T=T+b|0,I=I+k|0,e[0]=w>>>0&255,e[1]=w>>>8&255,e[2]=w>>>16&255,e[3]=w>>>24&255,e[4]=j>>>0&255,e[5]=j>>>8&255,e[6]=j>>>16&255,e[7]=j>>>24&255,e[8]=x>>>0&255,e[9]=x>>>8&255,e[10]=x>>>16&255,e[11]=x>>>24&255,e[12]=E>>>0&255,e[13]=E>>>8&255,e[14]=E>>>16&255,e[15]=E>>>24&255,e[16]=S>>>0&255,e[17]=S>>>8&255,e[18]=S>>>16&255,e[19]=S>>>24&255,e[20]=_>>>0&255,e[21]=_>>>8&255,e[22]=_>>>16&255,e[23]=_>>>24&255,e[24]=R>>>0&255,e[25]=R>>>8&255,e[26]=R>>>16&255,e[27]=R>>>24&255,e[28]=A>>>0&255,e[29]=A>>>8&255,e[30]=A>>>16&255,e[31]=A>>>24&255,e[32]=C>>>0&255,e[33]=C>>>8&255,e[34]=C>>>16&255,e[35]=C>>>24&255,e[36]=q>>>0&255,e[37]=q>>>8&255,e[38]=q>>>16&255,e[39]=q>>>24&255,e[40]=O>>>0&255,e[41]=O>>>8&255,e[42]=O>>>16&255,e[43]=O>>>24&255,e[44]=P>>>0&255,e[45]=P>>>8&255,e[46]=P>>>16&255,e[47]=P>>>24&255,e[48]=F>>>0&255,e[49]=F>>>8&255,e[50]=F>>>16&255,e[51]=F>>>24&255,e[52]=z>>>0&255,e[53]=z>>>8&255,e[54]=z>>>16&255,e[55]=z>>>24&255,e[56]=T>>>0&255,e[57]=T>>>8&255,e[58]=T>>>16&255,e[59]=T>>>24&255,e[60]=I>>>0&255,e[61]=I>>>8&255,e[62]=I>>>16&255,e[63]=I>>>24&255}(e,t,a,i)}function b(e,t,a,i){!function(e,t,a,i){for(var r,o=255&i[0]|(255&i[1])<<8|(255&i[2])<<16|(255&i[3])<<24,n=255&a[0]|(255&a[1])<<8|(255&a[2])<<16|(255&a[3])<<24,s=255&a[4]|(255&a[5])<<8|(255&a[6])<<16|(255&a[7])<<24,u=255&a[8]|(255&a[9])<<8|(255&a[10])<<16|(255&a[11])<<24,c=255&a[12]|(255&a[13])<<8|(255&a[14])<<16|(255&a[15])<<24,p=255&i[4]|(255&i[5])<<8|(255&i[6])<<16|(255&i[7])<<24,l=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,m=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,h=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,d=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,f=255&i[8]|(255&i[9])<<8|(255&i[10])<<16|(255&i[11])<<24,g=255&a[16]|(255&a[17])<<8|(255&a[18])<<16|(255&a[19])<<24,v=255&a[20]|(255&a[21])<<8|(255&a[22])<<16|(255&a[23])<<24,y=255&a[24]|(255&a[25])<<8|(255&a[26])<<16|(255&a[27])<<24,b=255&a[28]|(255&a[29])<<8|(255&a[30])<<16|(255&a[31])<<24,k=255&i[12]|(255&i[13])<<8|(255&i[14])<<16|(255&i[15])<<24,w=0;w<20;w+=2)o^=(r=(v^=(r=(h^=(r=(c^=(r=o+v|0)<<7|r>>>25)+o|0)<<9|r>>>23)+c|0)<<13|r>>>19)+h|0)<<18|r>>>14,p^=(r=(n^=(r=(y^=(r=(d^=(r=p+n|0)<<7|r>>>25)+p|0)<<9|r>>>23)+d|0)<<13|r>>>19)+y|0)<<18|r>>>14,f^=(r=(l^=(r=(s^=(r=(b^=(r=f+l|0)<<7|r>>>25)+f|0)<<9|r>>>23)+b|0)<<13|r>>>19)+s|0)<<18|r>>>14,k^=(r=(g^=(r=(m^=(r=(u^=(r=k+g|0)<<7|r>>>25)+k|0)<<9|r>>>23)+u|0)<<13|r>>>19)+m|0)<<18|r>>>14,o^=(r=(u^=(r=(s^=(r=(n^=(r=o+u|0)<<7|r>>>25)+o|0)<<9|r>>>23)+n|0)<<13|r>>>19)+s|0)<<18|r>>>14,p^=(r=(c^=(r=(m^=(r=(l^=(r=p+c|0)<<7|r>>>25)+p|0)<<9|r>>>23)+l|0)<<13|r>>>19)+m|0)<<18|r>>>14,f^=(r=(d^=(r=(h^=(r=(g^=(r=f+d|0)<<7|r>>>25)+f|0)<<9|r>>>23)+g|0)<<13|r>>>19)+h|0)<<18|r>>>14,k^=(r=(b^=(r=(y^=(r=(v^=(r=k+b|0)<<7|r>>>25)+k|0)<<9|r>>>23)+v|0)<<13|r>>>19)+y|0)<<18|r>>>14;e[0]=o>>>0&255,e[1]=o>>>8&255,e[2]=o>>>16&255,e[3]=o>>>24&255,e[4]=p>>>0&255,e[5]=p>>>8&255,e[6]=p>>>16&255,e[7]=p>>>24&255,e[8]=f>>>0&255,e[9]=f>>>8&255,e[10]=f>>>16&255,e[11]=f>>>24&255,e[12]=k>>>0&255,e[13]=k>>>8&255,e[14]=k>>>16&255,e[15]=k>>>24&255,e[16]=l>>>0&255,e[17]=l>>>8&255,e[18]=l>>>16&255,e[19]=l>>>24&255,e[20]=m>>>0&255,e[21]=m>>>8&255,e[22]=m>>>16&255,e[23]=m>>>24&255,e[24]=h>>>0&255,e[25]=h>>>8&255,e[26]=h>>>16&255,e[27]=h>>>24&255,e[28]=d>>>0&255,e[29]=d>>>8&255,e[30]=d>>>16&255,e[31]=d>>>24&255}(e,t,a,i)}var k=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function w(e,t,a,i,r,o,n){var s,u,c=new Uint8Array(16),p=new Uint8Array(64);for(u=0;u<16;u++)c[u]=0;for(u=0;u<8;u++)c[u]=o[u];for(;r>=64;){for(y(p,c,n,k),u=0;u<64;u++)e[t+u]=a[i+u]^p[u];for(s=1,u=8;u<16;u++)s=s+(255&c[u])|0,c[u]=255&s,s>>>=8;r-=64,t+=64,i+=64}if(r>0)for(y(p,c,n,k),u=0;u<r;u++)e[t+u]=a[i+u]^p[u];return 0}function j(e,t,a,i,r){var o,n,s=new Uint8Array(16),u=new Uint8Array(64);for(n=0;n<16;n++)s[n]=0;for(n=0;n<8;n++)s[n]=i[n];for(;a>=64;){for(y(u,s,r,k),n=0;n<64;n++)e[t+n]=u[n];for(o=1,n=8;n<16;n++)o=o+(255&s[n])|0,s[n]=255&o,o>>>=8;a-=64,t+=64}if(a>0)for(y(u,s,r,k),n=0;n<a;n++)e[t+n]=u[n];return 0}function x(e,t,a,i,r){var o=new Uint8Array(32);b(o,i,r,k);for(var n=new Uint8Array(8),s=0;s<8;s++)n[s]=i[s+16];return j(e,t,a,n,o)}function E(e,t,a,i,r,o,n){var s=new Uint8Array(32);b(s,o,n,k);for(var u=new Uint8Array(8),c=0;c<8;c++)u[c]=o[c+16];return w(e,t,a,i,r,u,s)}var S=function(e){var t,a,i,r,o,n,s,u;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,t=255&e[0]|(255&e[1])<<8,this.r[0]=8191&t,a=255&e[2]|(255&e[3])<<8,this.r[1]=8191&(t>>>13|a<<3),i=255&e[4]|(255&e[5])<<8,this.r[2]=7939&(a>>>10|i<<6),r=255&e[6]|(255&e[7])<<8,this.r[3]=8191&(i>>>7|r<<9),o=255&e[8]|(255&e[9])<<8,this.r[4]=255&(r>>>4|o<<12),this.r[5]=o>>>1&8190,n=255&e[10]|(255&e[11])<<8,this.r[6]=8191&(o>>>14|n<<2),s=255&e[12]|(255&e[13])<<8,this.r[7]=8065&(n>>>11|s<<5),u=255&e[14]|(255&e[15])<<8,this.r[8]=8191&(s>>>8|u<<8),this.r[9]=u>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function _(e,t,a,i,r,o){var n=new S(o);return n.update(a,i,r),n.finish(e,t),0}function R(e,t,a,i,r,o){var n=new Uint8Array(16);return _(n,0,a,i,r,o),g(e,t,n,0)}function A(e,t,a,i,r){var o;if(a<32)return-1;for(E(e,0,t,0,a,i,r),_(e,16,e,32,a-32,e),o=0;o<16;o++)e[o]=0;return 0}function C(e,t,a,i,r){var o,n=new Uint8Array(32);if(a<32)return-1;if(x(n,0,32,i,r),0!==R(t,16,t,32,a-32,n))return-1;for(E(e,0,t,0,a,i,r),o=0;o<32;o++)e[o]=0;return 0}function q(e,t){var a;for(a=0;a<16;a++)e[a]=0|t[a]}function O(e){var t,a,i=1;for(t=0;t<16;t++)a=e[t]+i+65535,i=Math.floor(a/65536),e[t]=a-65536*i;e[0]+=i-1+37*(i-1)}function P(e,t,a){for(var i,r=~(a-1),o=0;o<16;o++)i=r&(e[o]^t[o]),e[o]^=i,t[o]^=i}function F(e,a){var i,r,o,n=t(),s=t();for(i=0;i<16;i++)s[i]=a[i];for(O(s),O(s),O(s),r=0;r<2;r++){for(n[0]=s[0]-65517,i=1;i<15;i++)n[i]=s[i]-65535-(n[i-1]>>16&1),n[i-1]&=65535;n[15]=s[15]-32767-(n[14]>>16&1),o=n[15]>>16&1,n[14]&=65535,P(s,n,1-o)}for(i=0;i<16;i++)e[2*i]=255&s[i],e[2*i+1]=s[i]>>8}function z(e,t){var a=new Uint8Array(32),i=new Uint8Array(32);return F(a,e),F(i,t),v(a,0,i,0)}function T(e){var t=new Uint8Array(32);return F(t,e),1&t[0]}function I(e,t){var a;for(a=0;a<16;a++)e[a]=t[2*a]+(t[2*a+1]<<8);e[15]&=32767}function D(e,t,a){for(var i=0;i<16;i++)e[i]=t[i]+a[i]}function B(e,t,a){for(var i=0;i<16;i++)e[i]=t[i]-a[i]}function L(e,t,a){var i,r,o=0,n=0,s=0,u=0,c=0,p=0,l=0,m=0,h=0,d=0,f=0,g=0,v=0,y=0,b=0,k=0,w=0,j=0,x=0,E=0,S=0,_=0,R=0,A=0,C=0,q=0,O=0,P=0,F=0,z=0,T=0,I=a[0],D=a[1],B=a[2],L=a[3],U=a[4],N=a[5],H=a[6],M=a[7],K=a[8],$=a[9],G=a[10],V=a[11],Q=a[12],W=a[13],Y=a[14],Z=a[15];o+=(i=t[0])*I,n+=i*D,s+=i*B,u+=i*L,c+=i*U,p+=i*N,l+=i*H,m+=i*M,h+=i*K,d+=i*$,f+=i*G,g+=i*V,v+=i*Q,y+=i*W,b+=i*Y,k+=i*Z,n+=(i=t[1])*I,s+=i*D,u+=i*B,c+=i*L,p+=i*U,l+=i*N,m+=i*H,h+=i*M,d+=i*K,f+=i*$,g+=i*G,v+=i*V,y+=i*Q,b+=i*W,k+=i*Y,w+=i*Z,s+=(i=t[2])*I,u+=i*D,c+=i*B,p+=i*L,l+=i*U,m+=i*N,h+=i*H,d+=i*M,f+=i*K,g+=i*$,v+=i*G,y+=i*V,b+=i*Q,k+=i*W,w+=i*Y,j+=i*Z,u+=(i=t[3])*I,c+=i*D,p+=i*B,l+=i*L,m+=i*U,h+=i*N,d+=i*H,f+=i*M,g+=i*K,v+=i*$,y+=i*G,b+=i*V,k+=i*Q,w+=i*W,j+=i*Y,x+=i*Z,c+=(i=t[4])*I,p+=i*D,l+=i*B,m+=i*L,h+=i*U,d+=i*N,f+=i*H,g+=i*M,v+=i*K,y+=i*$,b+=i*G,k+=i*V,w+=i*Q,j+=i*W,x+=i*Y,E+=i*Z,p+=(i=t[5])*I,l+=i*D,m+=i*B,h+=i*L,d+=i*U,f+=i*N,g+=i*H,v+=i*M,y+=i*K,b+=i*$,k+=i*G,w+=i*V,j+=i*Q,x+=i*W,E+=i*Y,S+=i*Z,l+=(i=t[6])*I,m+=i*D,h+=i*B,d+=i*L,f+=i*U,g+=i*N,v+=i*H,y+=i*M,b+=i*K,k+=i*$,w+=i*G,j+=i*V,x+=i*Q,E+=i*W,S+=i*Y,_+=i*Z,m+=(i=t[7])*I,h+=i*D,d+=i*B,f+=i*L,g+=i*U,v+=i*N,y+=i*H,b+=i*M,k+=i*K,w+=i*$,j+=i*G,x+=i*V,E+=i*Q,S+=i*W,_+=i*Y,R+=i*Z,h+=(i=t[8])*I,d+=i*D,f+=i*B,g+=i*L,v+=i*U,y+=i*N,b+=i*H,k+=i*M,w+=i*K,j+=i*$,x+=i*G,E+=i*V,S+=i*Q,_+=i*W,R+=i*Y,A+=i*Z,d+=(i=t[9])*I,f+=i*D,g+=i*B,v+=i*L,y+=i*U,b+=i*N,k+=i*H,w+=i*M,j+=i*K,x+=i*$,E+=i*G,S+=i*V,_+=i*Q,R+=i*W,A+=i*Y,C+=i*Z,f+=(i=t[10])*I,g+=i*D,v+=i*B,y+=i*L,b+=i*U,k+=i*N,w+=i*H,j+=i*M,x+=i*K,E+=i*$,S+=i*G,_+=i*V,R+=i*Q,A+=i*W,C+=i*Y,q+=i*Z,g+=(i=t[11])*I,v+=i*D,y+=i*B,b+=i*L,k+=i*U,w+=i*N,j+=i*H,x+=i*M,E+=i*K,S+=i*$,_+=i*G,R+=i*V,A+=i*Q,C+=i*W,q+=i*Y,O+=i*Z,v+=(i=t[12])*I,y+=i*D,b+=i*B,k+=i*L,w+=i*U,j+=i*N,x+=i*H,E+=i*M,S+=i*K,_+=i*$,R+=i*G,A+=i*V,C+=i*Q,q+=i*W,O+=i*Y,P+=i*Z,y+=(i=t[13])*I,b+=i*D,k+=i*B,w+=i*L,j+=i*U,x+=i*N,E+=i*H,S+=i*M,_+=i*K,R+=i*$,A+=i*G,C+=i*V,q+=i*Q,O+=i*W,P+=i*Y,F+=i*Z,b+=(i=t[14])*I,k+=i*D,w+=i*B,j+=i*L,x+=i*U,E+=i*N,S+=i*H,_+=i*M,R+=i*K,A+=i*$,C+=i*G,q+=i*V,O+=i*Q,P+=i*W,F+=i*Y,z+=i*Z,k+=(i=t[15])*I,n+=38*(j+=i*B),s+=38*(x+=i*L),u+=38*(E+=i*U),c+=38*(S+=i*N),p+=38*(_+=i*H),l+=38*(R+=i*M),m+=38*(A+=i*K),h+=38*(C+=i*$),d+=38*(q+=i*G),f+=38*(O+=i*V),g+=38*(P+=i*Q),v+=38*(F+=i*W),y+=38*(z+=i*Y),b+=38*(T+=i*Z),o=(i=(o+=38*(w+=i*D))+(r=1)+65535)-65536*(r=Math.floor(i/65536)),n=(i=n+r+65535)-65536*(r=Math.floor(i/65536)),s=(i=s+r+65535)-65536*(r=Math.floor(i/65536)),u=(i=u+r+65535)-65536*(r=Math.floor(i/65536)),c=(i=c+r+65535)-65536*(r=Math.floor(i/65536)),p=(i=p+r+65535)-65536*(r=Math.floor(i/65536)),l=(i=l+r+65535)-65536*(r=Math.floor(i/65536)),m=(i=m+r+65535)-65536*(r=Math.floor(i/65536)),h=(i=h+r+65535)-65536*(r=Math.floor(i/65536)),d=(i=d+r+65535)-65536*(r=Math.floor(i/65536)),f=(i=f+r+65535)-65536*(r=Math.floor(i/65536)),g=(i=g+r+65535)-65536*(r=Math.floor(i/65536)),v=(i=v+r+65535)-65536*(r=Math.floor(i/65536)),y=(i=y+r+65535)-65536*(r=Math.floor(i/65536)),b=(i=b+r+65535)-65536*(r=Math.floor(i/65536)),k=(i=k+r+65535)-65536*(r=Math.floor(i/65536)),o=(i=(o+=r-1+37*(r-1))+(r=1)+65535)-65536*(r=Math.floor(i/65536)),n=(i=n+r+65535)-65536*(r=Math.floor(i/65536)),s=(i=s+r+65535)-65536*(r=Math.floor(i/65536)),u=(i=u+r+65535)-65536*(r=Math.floor(i/65536)),c=(i=c+r+65535)-65536*(r=Math.floor(i/65536)),p=(i=p+r+65535)-65536*(r=Math.floor(i/65536)),l=(i=l+r+65535)-65536*(r=Math.floor(i/65536)),m=(i=m+r+65535)-65536*(r=Math.floor(i/65536)),h=(i=h+r+65535)-65536*(r=Math.floor(i/65536)),d=(i=d+r+65535)-65536*(r=Math.floor(i/65536)),f=(i=f+r+65535)-65536*(r=Math.floor(i/65536)),g=(i=g+r+65535)-65536*(r=Math.floor(i/65536)),v=(i=v+r+65535)-65536*(r=Math.floor(i/65536)),y=(i=y+r+65535)-65536*(r=Math.floor(i/65536)),b=(i=b+r+65535)-65536*(r=Math.floor(i/65536)),k=(i=k+r+65535)-65536*(r=Math.floor(i/65536)),o+=r-1+37*(r-1),e[0]=o,e[1]=n,e[2]=s,e[3]=u,e[4]=c,e[5]=p,e[6]=l,e[7]=m,e[8]=h,e[9]=d,e[10]=f,e[11]=g,e[12]=v,e[13]=y,e[14]=b,e[15]=k}function U(e,t){L(e,t,t)}function N(e,a){var i,r=t();for(i=0;i<16;i++)r[i]=a[i];for(i=253;i>=0;i--)U(r,r),2!==i&&4!==i&&L(r,r,a);for(i=0;i<16;i++)e[i]=r[i]}function H(e,a,i){var r,o,n=new Uint8Array(32),s=new Float64Array(80),c=t(),p=t(),l=t(),m=t(),h=t(),d=t();for(o=0;o<31;o++)n[o]=a[o];for(n[31]=127&a[31]|64,n[0]&=248,I(s,i),o=0;o<16;o++)p[o]=s[o],m[o]=c[o]=l[o]=0;for(c[0]=m[0]=1,o=254;o>=0;--o)P(c,p,r=n[o>>>3]>>>(7&o)&1),P(l,m,r),D(h,c,l),B(c,c,l),D(l,p,m),B(p,p,m),U(m,h),U(d,c),L(c,l,c),L(l,p,h),D(h,c,l),B(c,c,l),U(p,c),B(l,m,d),L(c,l,u),D(c,c,m),L(l,l,c),L(c,m,d),L(m,p,s),U(p,h),P(c,p,r),P(l,m,r);for(o=0;o<16;o++)s[o+16]=c[o],s[o+32]=l[o],s[o+48]=p[o],s[o+64]=m[o];var f=s.subarray(32),g=s.subarray(16);return N(f,f),L(g,g,f),F(e,g),0}function M(e,t){return H(e,t,o)}function K(e,t){return i(t,32),M(e,t)}function $(e,t,a){var i=new Uint8Array(32);return H(i,a,t),b(e,r,i,k)}S.prototype.blocks=function(e,t,a){for(var i,r,o,n,s,u,c,p,l,m,h,d,f,g,v,y,b,k,w,j=this.fin?0:2048,x=this.h[0],E=this.h[1],S=this.h[2],_=this.h[3],R=this.h[4],A=this.h[5],C=this.h[6],q=this.h[7],O=this.h[8],P=this.h[9],F=this.r[0],z=this.r[1],T=this.r[2],I=this.r[3],D=this.r[4],B=this.r[5],L=this.r[6],U=this.r[7],N=this.r[8],H=this.r[9];a>=16;)m=l=0,m+=(x+=8191&(i=255&e[t+0]|(255&e[t+1])<<8))*F,m+=(E+=8191&(i>>>13|(r=255&e[t+2]|(255&e[t+3])<<8)<<3))*(5*H),m+=(S+=8191&(r>>>10|(o=255&e[t+4]|(255&e[t+5])<<8)<<6))*(5*N),m+=(_+=8191&(o>>>7|(n=255&e[t+6]|(255&e[t+7])<<8)<<9))*(5*U),l=(m+=(R+=8191&(n>>>4|(s=255&e[t+8]|(255&e[t+9])<<8)<<12))*(5*L))>>>13,m&=8191,m+=(A+=s>>>1&8191)*(5*B),m+=(C+=8191&(s>>>14|(u=255&e[t+10]|(255&e[t+11])<<8)<<2))*(5*D),m+=(q+=8191&(u>>>11|(c=255&e[t+12]|(255&e[t+13])<<8)<<5))*(5*I),m+=(O+=8191&(c>>>8|(p=255&e[t+14]|(255&e[t+15])<<8)<<8))*(5*T),h=l+=(m+=(P+=p>>>5|j)*(5*z))>>>13,h+=x*z,h+=E*F,h+=S*(5*H),h+=_*(5*N),l=(h+=R*(5*U))>>>13,h&=8191,h+=A*(5*L),h+=C*(5*B),h+=q*(5*D),h+=O*(5*I),l+=(h+=P*(5*T))>>>13,h&=8191,d=l,d+=x*T,d+=E*z,d+=S*F,d+=_*(5*H),l=(d+=R*(5*N))>>>13,d&=8191,d+=A*(5*U),d+=C*(5*L),d+=q*(5*B),d+=O*(5*D),f=l+=(d+=P*(5*I))>>>13,f+=x*I,f+=E*T,f+=S*z,f+=_*F,l=(f+=R*(5*H))>>>13,f&=8191,f+=A*(5*N),f+=C*(5*U),f+=q*(5*L),f+=O*(5*B),g=l+=(f+=P*(5*D))>>>13,g+=x*D,g+=E*I,g+=S*T,g+=_*z,l=(g+=R*F)>>>13,g&=8191,g+=A*(5*H),g+=C*(5*N),g+=q*(5*U),g+=O*(5*L),v=l+=(g+=P*(5*B))>>>13,v+=x*B,v+=E*D,v+=S*I,v+=_*T,l=(v+=R*z)>>>13,v&=8191,v+=A*F,v+=C*(5*H),v+=q*(5*N),v+=O*(5*U),y=l+=(v+=P*(5*L))>>>13,y+=x*L,y+=E*B,y+=S*D,y+=_*I,l=(y+=R*T)>>>13,y&=8191,y+=A*z,y+=C*F,y+=q*(5*H),y+=O*(5*N),b=l+=(y+=P*(5*U))>>>13,b+=x*U,b+=E*L,b+=S*B,b+=_*D,l=(b+=R*I)>>>13,b&=8191,b+=A*T,b+=C*z,b+=q*F,b+=O*(5*H),k=l+=(b+=P*(5*N))>>>13,k+=x*N,k+=E*U,k+=S*L,k+=_*B,l=(k+=R*D)>>>13,k&=8191,k+=A*I,k+=C*T,k+=q*z,k+=O*F,w=l+=(k+=P*(5*H))>>>13,w+=x*H,w+=E*N,w+=S*U,w+=_*L,l=(w+=R*B)>>>13,w&=8191,w+=A*D,w+=C*I,w+=q*T,w+=O*z,x=m=8191&(l=(l=((l+=(w+=P*F)>>>13)<<2)+l|0)+(m&=8191)|0),E=h+=l>>>=13,S=d&=8191,_=f&=8191,R=g&=8191,A=v&=8191,C=y&=8191,q=b&=8191,O=k&=8191,P=w&=8191,t+=16,a-=16;this.h[0]=x,this.h[1]=E,this.h[2]=S,this.h[3]=_,this.h[4]=R,this.h[5]=A,this.h[6]=C,this.h[7]=q,this.h[8]=O,this.h[9]=P},S.prototype.finish=function(e,t){var a,i,r,o,n=new Uint16Array(10);if(this.leftover){for(o=this.leftover,this.buffer[o++]=1;o<16;o++)this.buffer[o]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(a=this.h[1]>>>13,this.h[1]&=8191,o=2;o<10;o++)this.h[o]+=a,a=this.h[o]>>>13,this.h[o]&=8191;for(this.h[0]+=5*a,a=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=a,a=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=a,n[0]=this.h[0]+5,a=n[0]>>>13,n[0]&=8191,o=1;o<10;o++)n[o]=this.h[o]+a,a=n[o]>>>13,n[o]&=8191;for(n[9]-=8192,i=(1^a)-1,o=0;o<10;o++)n[o]&=i;for(i=~i,o=0;o<10;o++)this.h[o]=this.h[o]&i|n[o];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),r=this.h[0]+this.pad[0],this.h[0]=65535&r,o=1;o<8;o++)r=(this.h[o]+this.pad[o]|0)+(r>>>16)|0,this.h[o]=65535&r;e[t+0]=this.h[0]>>>0&255,e[t+1]=this.h[0]>>>8&255,e[t+2]=this.h[1]>>>0&255,e[t+3]=this.h[1]>>>8&255,e[t+4]=this.h[2]>>>0&255,e[t+5]=this.h[2]>>>8&255,e[t+6]=this.h[3]>>>0&255,e[t+7]=this.h[3]>>>8&255,e[t+8]=this.h[4]>>>0&255,e[t+9]=this.h[4]>>>8&255,e[t+10]=this.h[5]>>>0&255,e[t+11]=this.h[5]>>>8&255,e[t+12]=this.h[6]>>>0&255,e[t+13]=this.h[6]>>>8&255,e[t+14]=this.h[7]>>>0&255,e[t+15]=this.h[7]>>>8&255},S.prototype.update=function(e,t,a){var i,r;if(this.leftover){for((r=16-this.leftover)>a&&(r=a),i=0;i<r;i++)this.buffer[this.leftover+i]=e[t+i];if(a-=r,t+=r,this.leftover+=r,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(a>=16&&(r=a-a%16,this.blocks(e,t,r),t+=r,a-=r),a){for(i=0;i<a;i++)this.buffer[this.leftover+i]=e[t+i];this.leftover+=a}};var G=A,V=C;var Q=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function W(e,t,a,i){for(var r,o,n,s,u,c,p,l,m,h,d,f,g,v,y,b,k,w,j,x,E,S,_,R,A,C,q=new Int32Array(16),O=new Int32Array(16),P=e[0],F=e[1],z=e[2],T=e[3],I=e[4],D=e[5],B=e[6],L=e[7],U=t[0],N=t[1],H=t[2],M=t[3],K=t[4],$=t[5],G=t[6],V=t[7],W=0;i>=128;){for(j=0;j<16;j++)x=8*j+W,q[j]=a[x+0]<<24|a[x+1]<<16|a[x+2]<<8|a[x+3],O[j]=a[x+4]<<24|a[x+5]<<16|a[x+6]<<8|a[x+7];for(j=0;j<80;j++)if(r=P,o=F,n=z,s=T,u=I,c=D,p=B,L,m=U,h=N,d=H,f=M,g=K,v=$,y=G,V,_=65535&(S=V),R=S>>>16,A=65535&(E=L),C=E>>>16,_+=65535&(S=(K>>>14|I<<18)^(K>>>18|I<<14)^(I>>>9|K<<23)),R+=S>>>16,A+=65535&(E=(I>>>14|K<<18)^(I>>>18|K<<14)^(K>>>9|I<<23)),C+=E>>>16,_+=65535&(S=K&$^~K&G),R+=S>>>16,A+=65535&(E=I&D^~I&B),C+=E>>>16,E=Q[2*j],_+=65535&(S=Q[2*j+1]),R+=S>>>16,A+=65535&E,C+=E>>>16,E=q[j%16],R+=(S=O[j%16])>>>16,A+=65535&E,C+=E>>>16,A+=(R+=(_+=65535&S)>>>16)>>>16,_=65535&(S=w=65535&_|R<<16),R=S>>>16,A=65535&(E=k=65535&A|(C+=A>>>16)<<16),C=E>>>16,_+=65535&(S=(U>>>28|P<<4)^(P>>>2|U<<30)^(P>>>7|U<<25)),R+=S>>>16,A+=65535&(E=(P>>>28|U<<4)^(U>>>2|P<<30)^(U>>>7|P<<25)),C+=E>>>16,R+=(S=U&N^U&H^N&H)>>>16,A+=65535&(E=P&F^P&z^F&z),C+=E>>>16,l=65535&(A+=(R+=(_+=65535&S)>>>16)>>>16)|(C+=A>>>16)<<16,b=65535&_|R<<16,_=65535&(S=f),R=S>>>16,A=65535&(E=s),C=E>>>16,R+=(S=w)>>>16,A+=65535&(E=k),C+=E>>>16,F=r,z=o,T=n,I=s=65535&(A+=(R+=(_+=65535&S)>>>16)>>>16)|(C+=A>>>16)<<16,D=u,B=c,L=p,P=l,N=m,H=h,M=d,K=f=65535&_|R<<16,$=g,G=v,V=y,U=b,j%16==15)for(x=0;x<16;x++)E=q[x],_=65535&(S=O[x]),R=S>>>16,A=65535&E,C=E>>>16,E=q[(x+9)%16],_+=65535&(S=O[(x+9)%16]),R+=S>>>16,A+=65535&E,C+=E>>>16,k=q[(x+1)%16],_+=65535&(S=((w=O[(x+1)%16])>>>1|k<<31)^(w>>>8|k<<24)^(w>>>7|k<<25)),R+=S>>>16,A+=65535&(E=(k>>>1|w<<31)^(k>>>8|w<<24)^k>>>7),C+=E>>>16,k=q[(x+14)%16],R+=(S=((w=O[(x+14)%16])>>>19|k<<13)^(k>>>29|w<<3)^(w>>>6|k<<26))>>>16,A+=65535&(E=(k>>>19|w<<13)^(w>>>29|k<<3)^k>>>6),C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,q[x]=65535&A|C<<16,O[x]=65535&_|R<<16;_=65535&(S=U),R=S>>>16,A=65535&(E=P),C=E>>>16,E=e[0],R+=(S=t[0])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[0]=P=65535&A|C<<16,t[0]=U=65535&_|R<<16,_=65535&(S=N),R=S>>>16,A=65535&(E=F),C=E>>>16,E=e[1],R+=(S=t[1])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[1]=F=65535&A|C<<16,t[1]=N=65535&_|R<<16,_=65535&(S=H),R=S>>>16,A=65535&(E=z),C=E>>>16,E=e[2],R+=(S=t[2])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[2]=z=65535&A|C<<16,t[2]=H=65535&_|R<<16,_=65535&(S=M),R=S>>>16,A=65535&(E=T),C=E>>>16,E=e[3],R+=(S=t[3])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[3]=T=65535&A|C<<16,t[3]=M=65535&_|R<<16,_=65535&(S=K),R=S>>>16,A=65535&(E=I),C=E>>>16,E=e[4],R+=(S=t[4])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[4]=I=65535&A|C<<16,t[4]=K=65535&_|R<<16,_=65535&(S=$),R=S>>>16,A=65535&(E=D),C=E>>>16,E=e[5],R+=(S=t[5])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[5]=D=65535&A|C<<16,t[5]=$=65535&_|R<<16,_=65535&(S=G),R=S>>>16,A=65535&(E=B),C=E>>>16,E=e[6],R+=(S=t[6])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[6]=B=65535&A|C<<16,t[6]=G=65535&_|R<<16,_=65535&(S=V),R=S>>>16,A=65535&(E=L),C=E>>>16,E=e[7],R+=(S=t[7])>>>16,A+=65535&E,C+=E>>>16,C+=(A+=(R+=(_+=65535&S)>>>16)>>>16)>>>16,e[7]=L=65535&A|C<<16,t[7]=V=65535&_|R<<16,W+=128,i-=128}return i}function Y(e,t,a){var i,r=new Int32Array(8),o=new Int32Array(8),n=new Uint8Array(256),s=a;for(r[0]=1779033703,r[1]=3144134277,r[2]=1013904242,r[3]=2773480762,r[4]=1359893119,r[5]=2600822924,r[6]=528734635,r[7]=1541459225,o[0]=4089235720,o[1]=2227873595,o[2]=4271175723,o[3]=1595750129,o[4]=2917565137,o[5]=725511199,o[6]=4215389547,o[7]=327033209,W(r,o,t,a),a%=128,i=0;i<a;i++)n[i]=t[s-a+i];for(n[a]=128,n[(a=256-128*(a<112?1:0))-9]=0,d(n,a-8,s/536870912|0,s<<3),W(r,o,n,a),i=0;i<8;i++)d(e,8*i,r[i],o[i]);return 0}function Z(e,a){var i=t(),r=t(),o=t(),n=t(),s=t(),u=t(),c=t(),l=t(),m=t();B(i,e[1],e[0]),B(m,a[1],a[0]),L(i,i,m),D(r,e[0],e[1]),D(m,a[0],a[1]),L(r,r,m),L(o,e[3],a[3]),L(o,o,p),L(n,e[2],a[2]),D(n,n,n),B(s,r,i),B(u,n,o),D(c,n,o),D(l,r,i),L(e[0],s,u),L(e[1],l,c),L(e[2],c,u),L(e[3],s,l)}function J(e,t,a){var i;for(i=0;i<4;i++)P(e[i],t[i],a)}function X(e,a){var i=t(),r=t(),o=t();N(o,a[2]),L(i,a[0],o),L(r,a[1],o),F(e,r),e[31]^=T(i)<<7}function ee(e,t,a){var i,r;for(q(e[0],n),q(e[1],s),q(e[2],s),q(e[3],n),r=255;r>=0;--r)J(e,t,i=a[r/8|0]>>(7&r)&1),Z(t,e),Z(e,e),J(e,t,i)}function te(e,a){var i=[t(),t(),t(),t()];q(i[0],l),q(i[1],m),q(i[2],s),L(i[3],l,m),ee(e,i,a)}function ae(e,a,r){var o,n=new Uint8Array(64),s=[t(),t(),t(),t()];for(r||i(a,32),Y(n,a,32),n[0]&=248,n[31]&=127,n[31]|=64,te(s,n),X(e,s),o=0;o<32;o++)a[o+32]=e[o];return 0}var ie=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function re(e,t){var a,i,r,o;for(i=63;i>=32;--i){for(a=0,r=i-32,o=i-12;r<o;++r)t[r]+=a-16*t[i]*ie[r-(i-32)],a=t[r]+128>>8,t[r]-=256*a;t[r]+=a,t[i]=0}for(a=0,r=0;r<32;r++)t[r]+=a-(t[31]>>4)*ie[r],a=t[r]>>8,t[r]&=255;for(r=0;r<32;r++)t[r]-=a*ie[r];for(i=0;i<32;i++)t[i+1]+=t[i]>>8,e[i]=255&t[i]}function oe(e){var t,a=new Float64Array(64);for(t=0;t<64;t++)a[t]=e[t];for(t=0;t<64;t++)e[t]=0;re(e,a)}function ne(e,a,i,r){var o,n,s=new Uint8Array(64),u=new Uint8Array(64),c=new Uint8Array(64),p=new Float64Array(64),l=[t(),t(),t(),t()];Y(s,r,32),s[0]&=248,s[31]&=127,s[31]|=64;var m=i+64;for(o=0;o<i;o++)e[64+o]=a[o];for(o=0;o<32;o++)e[32+o]=s[32+o];for(Y(c,e.subarray(32),i+32),oe(c),te(l,c),X(e,l),o=32;o<64;o++)e[o]=r[o];for(Y(u,e,i+64),oe(u),o=0;o<64;o++)p[o]=0;for(o=0;o<32;o++)p[o]=c[o];for(o=0;o<32;o++)for(n=0;n<32;n++)p[o+n]+=u[o]*s[n];return re(e.subarray(32),p),m}function se(e,a){var i=t(),r=t(),o=t(),u=t(),p=t(),l=t(),m=t();return q(e[2],s),I(e[1],a),U(o,e[1]),L(u,o,c),B(o,o,e[2]),D(u,e[2],u),U(p,u),U(l,p),L(m,l,p),L(i,m,o),L(i,i,u),function(e,a){var i,r=t();for(i=0;i<16;i++)r[i]=a[i];for(i=250;i>=0;i--)U(r,r),1!==i&&L(r,r,a);for(i=0;i<16;i++)e[i]=r[i]}(i,i),L(i,i,o),L(i,i,u),L(i,i,u),L(e[0],i,u),U(r,e[0]),L(r,r,u),z(r,o)&&L(e[0],e[0],h),U(r,e[0]),L(r,r,u),z(r,o)?-1:(T(e[0])===a[31]>>7&&B(e[0],n,e[0]),L(e[3],e[0],e[1]),0)}function ue(e,a,i,r){var o,n=new Uint8Array(32),s=new Uint8Array(64),u=[t(),t(),t(),t()],c=[t(),t(),t(),t()];if(-1,i<64)return-1;if(se(c,r))return-1;for(o=0;o<i;o++)e[o]=a[o];for(o=0;o<32;o++)e[o+32]=r[o];if(Y(s,e,i),oe(s),ee(u,c,s),te(c,a.subarray(32)),Z(u,c),X(n,u),i-=64,v(a,0,n,0)){for(o=0;o<i;o++)e[o]=0;return-1}for(o=0;o<i;o++)e[o]=a[o+64];return i}var ce=32,pe=24,le=32,me=32,he=pe;function de(e,t){if(e.length!==ce)throw new Error("bad key size");if(t.length!==pe)throw new Error("bad nonce size")}function fe(){var e,t;for(t=0;t<arguments.length;t++)if("[object Uint8Array]"!==(e=Object.prototype.toString.call(arguments[t])))throw new TypeError("unexpected type "+e+", use Uint8Array")}function ge(e){for(var t=0;t<e.length;t++)e[t]=0}e.lowlevel={crypto_core_hsalsa20:b,crypto_stream_xor:E,crypto_stream:x,crypto_stream_salsa20_xor:w,crypto_stream_salsa20:j,crypto_onetimeauth:_,crypto_onetimeauth_verify:R,crypto_verify_16:g,crypto_verify_32:v,crypto_secretbox:A,crypto_secretbox_open:C,crypto_scalarmult:H,crypto_scalarmult_base:M,crypto_box_beforenm:$,crypto_box_afternm:G,crypto_box:function(e,t,a,i,r,o){var n=new Uint8Array(32);return $(n,r,o),G(e,t,a,i,n)},crypto_box_open:function(e,t,a,i,r,o){var n=new Uint8Array(32);return $(n,r,o),V(e,t,a,i,n)},crypto_box_keypair:K,crypto_hash:Y,crypto_sign:ne,crypto_sign_keypair:ae,crypto_sign_open:ue,crypto_secretbox_KEYBYTES:ce,crypto_secretbox_NONCEBYTES:pe,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:le,crypto_box_SECRETKEYBYTES:me,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:he,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:64,crypto_sign_PUBLICKEYBYTES:32,crypto_sign_SECRETKEYBYTES:64,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64},e.util||(e.util={},e.util.decodeUTF8=e.util.encodeUTF8=e.util.encodeBase64=e.util.decodeBase64=function(){throw new Error("nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js")}),e.randomBytes=function(e){var t=new Uint8Array(e);return i(t,e),t},e.secretbox=function(e,t,a){fe(e,t,a),de(a,t);for(var i=new Uint8Array(32+e.length),r=new Uint8Array(i.length),o=0;o<e.length;o++)i[o+32]=e[o];return A(r,i,i.length,t,a),r.subarray(16)},e.secretbox.open=function(e,t,a){fe(e,t,a),de(a,t);for(var i=new Uint8Array(16+e.length),r=new Uint8Array(i.length),o=0;o<e.length;o++)i[o+16]=e[o];return!(i.length<32)&&(0===C(r,i,i.length,t,a)&&r.subarray(32))},e.secretbox.keyLength=ce,e.secretbox.nonceLength=pe,e.secretbox.overheadLength=16,e.scalarMult=function(e,t){if(fe(e,t),32!==e.length)throw new Error("bad n size");if(32!==t.length)throw new Error("bad p size");var a=new Uint8Array(32);return H(a,e,t),a},e.scalarMult.base=function(e){if(fe(e),32!==e.length)throw new Error("bad n size");var t=new Uint8Array(32);return M(t,e),t},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(t,a,i,r){var o=e.box.before(i,r);return e.secretbox(t,a,o)},e.box.before=function(e,t){fe(e,t),function(e,t){if(e.length!==le)throw new Error("bad public key size");if(t.length!==me)throw new Error("bad secret key size")}(e,t);var a=new Uint8Array(32);return $(a,e,t),a},e.box.after=e.secretbox,e.box.open=function(t,a,i,r){var o=e.box.before(i,r);return e.secretbox.open(t,a,o)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(le),t=new Uint8Array(me);return K(e,t),{publicKey:e,secretKey:t}},e.box.keyPair.fromSecretKey=function(e){if(fe(e),e.length!==me)throw new Error("bad secret key size");var t=new Uint8Array(le);return M(t,e),{publicKey:t,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=le,e.box.secretKeyLength=me,e.box.sharedKeyLength=32,e.box.nonceLength=he,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,t){if(fe(e,t),64!==t.length)throw new Error("bad secret key size");var a=new Uint8Array(64+e.length);return ne(a,e,e.length,t),a},e.sign.open=function(e,t){if(2!==arguments.length)throw new Error("nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?");if(fe(e,t),32!==t.length)throw new Error("bad public key size");var a=new Uint8Array(e.length),i=ue(a,e,e.length,t);if(i<0)return null;for(var r=new Uint8Array(i),o=0;o<r.length;o++)r[o]=a[o];return r},e.sign.detached=function(t,a){for(var i=e.sign(t,a),r=new Uint8Array(64),o=0;o<r.length;o++)r[o]=i[o];return r},e.sign.detached.verify=function(e,t,a){if(fe(e,t,a),64!==t.length)throw new Error("bad signature size");if(32!==a.length)throw new Error("bad public key size");var i,r=new Uint8Array(64+e.length),o=new Uint8Array(64+e.length);for(i=0;i<64;i++)r[i]=t[i];for(i=0;i<e.length;i++)r[i+64]=e[i];return ue(o,r,r.length,a)>=0},e.sign.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(64);return ae(e,t),{publicKey:e,secretKey:t}},e.sign.keyPair.fromSecretKey=function(e){if(fe(e),64!==e.length)throw new Error("bad secret key size");for(var t=new Uint8Array(32),a=0;a<t.length;a++)t[a]=e[32+a];return{publicKey:t,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(fe(e),32!==e.length)throw new Error("bad seed size");for(var t=new Uint8Array(32),a=new Uint8Array(64),i=0;i<32;i++)a[i]=e[i];return ae(t,a,!0),{publicKey:t,secretKey:a}},e.sign.publicKeyLength=32,e.sign.secretKeyLength=64,e.sign.seedLength=32,e.sign.signatureLength=64,e.hash=function(e){fe(e);var t=new Uint8Array(64);return Y(t,e,e.length),t},e.hash.hashLength=64,e.verify=function(e,t){return fe(e,t),0!==e.length&&0!==t.length&&(e.length===t.length&&0===f(e,0,t,0,e.length))},e.setPRNG=function(e){i=e},function(){var t="undefined"!=typeof self?self.crypto||self.msCrypto:null;if(t&&t.getRandomValues){e.setPRNG(function(e,a){var i,r=new Uint8Array(a);for(i=0;i<a;i+=65536)t.getRandomValues(r.subarray(i,i+Math.min(a-i,65536)));for(i=0;i<a;i++)e[i]=r[i];ge(r)})}else(t=a(1))&&t.randomBytes&&e.setPRNG(function(e,a){var i,r=t.randomBytes(a);for(i=0;i<a;i++)e[i]=r[i];ge(r)})}()}(e.exports?e.exports:self.nacl=self.nacl||{})},function(e,t,a){e.exports=o;var i=a(0),r=a(2).Buffer;function o(e){i.object(e,"options"),void 0!==e.buffer&&i.buffer(e.buffer,"options.buffer"),this._size=e.buffer?e.buffer.length:1024,this._buffer=e.buffer||r.alloc(this._size),this._offset=0}o.prototype.toBuffer=function(){return this._buffer.slice(0,this._offset)},o.prototype.atEnd=function(){return this._offset>=this._buffer.length},o.prototype.remainder=function(){return this._buffer.slice(this._offset)},o.prototype.skip=function(e){this._offset+=e},o.prototype.expand=function(){this._size*=2;var e=r.alloc(this._size);this._buffer.copy(e,0),this._buffer=e},o.prototype.readPart=function(){return{data:this.readBuffer()}},o.prototype.readBuffer=function(){var e=this._buffer.readUInt32BE(this._offset);this._offset+=4,i.ok(this._offset+e<=this._buffer.length,"length out of bounds at +0x"+this._offset.toString(16)+" (data truncated?)");var t=this._buffer.slice(this._offset,this._offset+e);return this._offset+=e,t},o.prototype.readString=function(){return this.readBuffer().toString()},o.prototype.readCString=function(){for(var e=this._offset;e<this._buffer.length&&0!==this._buffer[e];)e++;i.ok(e<this._buffer.length,"c string does not terminate");var t=this._buffer.slice(this._offset,e).toString();return this._offset=e+1,t},o.prototype.readInt=function(){var e=this._buffer.readUInt32BE(this._offset);return this._offset+=4,e},o.prototype.readInt64=function(){i.ok(this._offset+8<this._buffer.length,"buffer not long enough to read Int64");var e=this._buffer.slice(this._offset,this._offset+8);return this._offset+=8,e},o.prototype.readChar=function(){return this._buffer[this._offset++]},o.prototype.writeBuffer=function(e){for(;this._offset+4+e.length>this._size;)this.expand();this._buffer.writeUInt32BE(e.length,this._offset),this._offset+=4,e.copy(this._buffer,this._offset),this._offset+=e.length},o.prototype.writeString=function(e){this.writeBuffer(r.from(e,"utf8"))},o.prototype.writeCString=function(e){for(;this._offset+1+e.length>this._size;)this.expand();this._buffer.write(e,this._offset),this._offset+=e.length,this._buffer[this._offset++]=0},o.prototype.writeInt=function(e){for(;this._offset+4>this._size;)this.expand();this._buffer.writeUInt32BE(e,this._offset),this._offset+=4},o.prototype.writeInt64=function(e){if(i.buffer(e,"value"),e.length>8){for(var t=e.slice(0,e.length-8),a=0;a<t.length;++a)i.strictEqual(t[a],0,"must fit in 64 bits of precision");e=e.slice(e.length-8,e.length)}for(;this._offset+8>this._size;)this.expand();e.copy(this._buffer,this._offset),this._offset+=8},o.prototype.writeChar=function(e){for(;this._offset+1>this._size;)this.expand();this._buffer[this._offset++]=e},o.prototype.writePart=function(e){this.writeBuffer(e.data)},o.prototype.write=function(e){for(;this._offset+e.length>this._size;)this.expand();e.copy(this._buffer,this._offset),this._offset+=e.length}},function(e,t,a){e.exports={read:function(e,t){return p.read(e,t,"pkcs8")},readPkcs8:function(e,t,a){a.peek()===r.Ber.Integer&&(i.strictEqual(t,"private","unexpected Integer at start of public key"),a.readString(r.Ber.Integer,!0));a.readSequence();var n=a.offset+a.length,p=a.readOID();switch(p){case"1.2.840.113549.1.1.1":return a._offset=n,"public"===t?function(e){e.readSequence(r.Ber.BitString),e.readByte(),e.readSequence();var t=l(e,"modulus"),a=l(e,"exponent"),i={type:"rsa",source:e.originalInput,parts:[{name:"e",data:a},{name:"n",data:t}]};return new u(i)}(a):function(e){e.readSequence(r.Ber.OctetString),e.readSequence();var t=l(e,"version");i.equal(t[0],0,"unknown RSA private key version");var a=l(e,"modulus"),o=l(e,"public exponent"),n=l(e,"private exponent"),s=l(e,"prime1"),u=l(e,"prime2"),p=l(e,"exponent1"),m=l(e,"exponent2"),h=l(e,"iqmp");return new c({type:"rsa",parts:[{name:"n",data:a},{name:"e",data:o},{name:"d",data:n},{name:"iqmp",data:h},{name:"p",data:s},{name:"q",data:u},{name:"dmodp",data:p},{name:"dmodq",data:m}]})}(a);case"1.2.840.10040.4.1":return"public"===t?function(e){e.readSequence();var t=l(e,"p"),a=l(e,"q"),i=l(e,"g");e.readSequence(r.Ber.BitString),e.readByte();var o=l(e,"y");return new u({type:"dsa",parts:[{name:"p",data:t},{name:"q",data:a},{name:"g",data:i},{name:"y",data:o}]})}(a):function(e){e.readSequence();var t=l(e,"p"),a=l(e,"q"),i=l(e,"g");e.readSequence(r.Ber.OctetString);var o=l(e,"x"),n=s.calculateDSAPublic(i,t,o);return new c({type:"dsa",parts:[{name:"p",data:t},{name:"q",data:a},{name:"g",data:i},{name:"y",data:n},{name:"x",data:o}]})}(a);case"1.2.840.10045.2.1":return"public"===t?function(e){var t=m(e);i.string(t,"a known elliptic curve");var a=e.readString(r.Ber.BitString,!0);a=s.ecNormalize(a);var n={type:"ecdsa",parts:[{name:"curve",data:o.from(t)},{name:"Q",data:a}]};return new u(n)}(a):function(e){var t=m(e);i.string(t,"a known elliptic curve"),e.readSequence(r.Ber.OctetString),e.readSequence();var a=l(e,"version");i.equal(a[0],1,"unknown version of ECDSA key");var n,u=e.readString(r.Ber.OctetString,!0);160==e.peek()&&(e.readSequence(160),e._offset+=e.length);161==e.peek()&&(e.readSequence(161),n=e.readString(r.Ber.BitString,!0),n=s.ecNormalize(n));if(void 0===n){var p=s.publicFromPrivateECDSA(t,u);n=p.part.Q.data}var h={type:"ecdsa",parts:[{name:"curve",data:o.from(t)},{name:"Q",data:n},{name:"d",data:u}]};return new c(h)}(a);case"1.3.101.112":return"public"===t?function(e){0===e.peek()&&e.readByte();var t=s.readBitString(e),a={type:"ed25519",parts:[{name:"A",data:s.zeroPadToLength(t,32)}]};return new u(a)}(a):function(e){0===e.peek()&&e.readByte();e.readSequence(r.Ber.OctetString);var t,a=e.readString(r.Ber.OctetString,!0);a=s.zeroPadToLength(a,32),e.peek()===r.Ber.BitString?(t=s.readBitString(e),t=s.zeroPadToLength(t,32)):t=s.calculateED25519Public(a);var i={type:"ed25519",parts:[{name:"A",data:s.zeroPadToLength(t,32)},{name:"k",data:s.zeroPadToLength(a,32)}]};return new c(i)}(a);case"1.3.101.110":return"public"===t?function(e){var t=s.readBitString(e),a={type:"curve25519",parts:[{name:"A",data:s.zeroPadToLength(t,32)}]};return new u(a)}(a):function(e){0===e.peek()&&e.readByte();e.readSequence(r.Ber.OctetString);var t=e.readString(r.Ber.OctetString,!0);t=s.zeroPadToLength(t,32);var a=s.calculateX25519Public(t),i={type:"curve25519",parts:[{name:"A",data:s.zeroPadToLength(a,32)},{name:"k",data:s.zeroPadToLength(t,32)}]};return new c(i)}(a);default:throw new Error("Unknown key type OID "+p)}},write:function(e,t){return p.write(e,t,"pkcs8")},writePkcs8:h,pkcs8ToBuffer:function(e){var t=new r.BerWriter;return h(t,e),t.buffer},readECDSACurve:m,writeECDSACurve:d};var i=a(0),r=a(12),o=a(2).Buffer,n=a(7),s=a(5),u=a(4),c=a(6),p=a(14);function l(e,t){return i.strictEqual(e.peek(),r.Ber.Integer,t+" is not an Integer"),s.mpNormalize(e.readString(r.Ber.Integer,!0))}function m(e){var t,a,u,c,p;if(e.peek()===r.Ber.OID){var l=e.readOID();for(a=Object.keys(n.curves),u=0;u<a.length;++u)if(c=a[u],(p=n.curves[c]).pkcs8oid===l){t=c;break}}else{e.readSequence();var m=e.readString(r.Ber.Integer,!0);i.strictEqual(m[0],1,"ECDSA key not version 1");var h={};e.readSequence();var d=e.readOID();i.strictEqual(d,"1.2.840.10045.1.1","ECDSA key is not from a prime-field");var f=h.p=s.mpNormalize(e.readString(r.Ber.Integer,!0));h.size=8*f.length-s.countZeros(f),e.readSequence(),h.a=s.mpNormalize(e.readString(r.Ber.OctetString,!0)),h.b=s.mpNormalize(e.readString(r.Ber.OctetString,!0)),e.peek()===r.Ber.BitString&&(h.s=e.readString(r.Ber.BitString,!0)),h.G=e.readString(r.Ber.OctetString,!0),i.strictEqual(h.G[0],4,"uncompressed G is required"),h.n=s.mpNormalize(e.readString(r.Ber.Integer,!0)),h.h=s.mpNormalize(e.readString(r.Ber.Integer,!0)),i.strictEqual(h.h[0],1,"a cofactor=1 curve is required"),a=Object.keys(n.curves);var g=Object.keys(h);for(u=0;u<a.length;++u){c=a[u],p=n.curves[c];for(var v=!0,y=0;y<g.length;++y){var b=g[y];if(void 0!==p[b])if("object"==typeof p[b]&&void 0!==p[b].equals){if(!p[b].equals(h[b])){v=!1;break}}else if(o.isBuffer(p[b])){if(p[b].toString("binary")!==h[b].toString("binary")){v=!1;break}}else if(p[b]!==h[b]){v=!1;break}}if(v){t=c;break}}}return t}function h(e,t){if(e.startSequence(),c.isPrivateKey(t)){var a=o.from([0]);e.writeBuffer(a,r.Ber.Integer)}switch(e.startSequence(),t.type){case"rsa":e.writeOID("1.2.840.113549.1.1.1"),c.isPrivateKey(t)?function(e,t){t.writeNull(),t.endSequence(),t.startSequence(r.Ber.OctetString),t.startSequence();var a=o.from([0]);t.writeBuffer(a,r.Ber.Integer),t.writeBuffer(e.part.n.data,r.Ber.Integer),t.writeBuffer(e.part.e.data,r.Ber.Integer),t.writeBuffer(e.part.d.data,r.Ber.Integer),t.writeBuffer(e.part.p.data,r.Ber.Integer),t.writeBuffer(e.part.q.data,r.Ber.Integer),e.part.dmodp&&e.part.dmodq||s.addRSAMissing(e);t.writeBuffer(e.part.dmodp.data,r.Ber.Integer),t.writeBuffer(e.part.dmodq.data,r.Ber.Integer),t.writeBuffer(e.part.iqmp.data,r.Ber.Integer),t.endSequence(),t.endSequence()}(t,e):function(e,t){t.writeNull(),t.endSequence(),t.startSequence(r.Ber.BitString),t.writeByte(0),t.startSequence(),t.writeBuffer(e.part.n.data,r.Ber.Integer),t.writeBuffer(e.part.e.data,r.Ber.Integer),t.endSequence(),t.endSequence()}(t,e);break;case"dsa":e.writeOID("1.2.840.10040.4.1"),c.isPrivateKey(t)?function(e,t){t.startSequence(),t.writeBuffer(e.part.p.data,r.Ber.Integer),t.writeBuffer(e.part.q.data,r.Ber.Integer),t.writeBuffer(e.part.g.data,r.Ber.Integer),t.endSequence(),t.endSequence(),t.startSequence(r.Ber.OctetString),t.writeBuffer(e.part.x.data,r.Ber.Integer),t.endSequence()}(t,e):function(e,t){t.startSequence(),t.writeBuffer(e.part.p.data,r.Ber.Integer),t.writeBuffer(e.part.q.data,r.Ber.Integer),t.writeBuffer(e.part.g.data,r.Ber.Integer),t.endSequence(),t.endSequence(),t.startSequence(r.Ber.BitString),t.writeByte(0),t.writeBuffer(e.part.y.data,r.Ber.Integer),t.endSequence()}(t,e);break;case"ecdsa":e.writeOID("1.2.840.10045.2.1"),c.isPrivateKey(t)?function(e,t){d(e,t),t.endSequence(),t.startSequence(r.Ber.OctetString),t.startSequence();var a=o.from([1]);t.writeBuffer(a,r.Ber.Integer),t.writeBuffer(e.part.d.data,r.Ber.OctetString),t.startSequence(161);var i=s.ecNormalize(e.part.Q.data,!0);t.writeBuffer(i,r.Ber.BitString),t.endSequence(),t.endSequence(),t.endSequence()}(t,e):function(e,t){d(e,t),t.endSequence();var a=s.ecNormalize(e.part.Q.data,!0);t.writeBuffer(a,r.Ber.BitString)}(t,e);break;case"ed25519":if(e.writeOID("1.3.101.112"),c.isPrivateKey(t))throw new Error("Ed25519 private keys in pkcs8 format are not supported");!function(e,t){t.endSequence(),s.writeBitString(t,e.part.A.data)}(t,e);break;default:throw new Error("Unsupported key type: "+t.type)}e.endSequence()}function d(e,t){var a=n.curves[e.curve];if(a.pkcs8oid)t.writeOID(a.pkcs8oid);else{t.startSequence();var i=o.from([1]);t.writeBuffer(i,r.Ber.Integer),t.startSequence(),t.writeOID("1.2.840.10045.1.1"),t.writeBuffer(a.p,r.Ber.Integer),t.endSequence(),t.startSequence();var s=a.p;0===s[0]&&(s=s.slice(1)),t.writeBuffer(s,r.Ber.OctetString),t.writeBuffer(a.b,r.Ber.OctetString),t.writeBuffer(a.s,r.Ber.BitString),t.endSequence(),t.writeBuffer(a.G,r.Ber.OctetString),t.writeBuffer(a.n,r.Ber.Integer);var u=a.h;u||(u=o.from([1])),t.writeBuffer(u,r.Ber.Integer),t.endSequence()}}},function(e,t,a){e.exports=g;var i=a(0),r=a(2).Buffer,o=a(7),n=a(1),s=a(25),u=(a(11),a(9)),c=(a(3),a(5)),p=a(4),l=a(6),m=a(31),h={};h.openssh=a(112),h.x509=a(61),h.pem=a(113);var d=u.CertificateParseError,f=u.InvalidAlgorithmError;function g(e){i.object(e,"options"),i.arrayOfObject(e.subjects,"options.subjects"),c.assertCompatible(e.subjects[0],m,[1,0],"options.subjects"),c.assertCompatible(e.subjectKey,p,[1,0],"options.subjectKey"),c.assertCompatible(e.issuer,m,[1,0],"options.issuer"),void 0!==e.issuerKey&&c.assertCompatible(e.issuerKey,p,[1,0],"options.issuerKey"),i.object(e.signatures,"options.signatures"),i.buffer(e.serial,"options.serial"),i.date(e.validFrom,"options.validFrom"),i.date(e.validUntil,"optons.validUntil"),i.optionalArrayOfString(e.purposes,"options.purposes"),this._hashCache={},this.subjects=e.subjects,this.issuer=e.issuer,this.subjectKey=e.subjectKey,this.issuerKey=e.issuerKey,this.signatures=e.signatures,this.serial=e.serial,this.validFrom=e.validFrom,this.validUntil=e.validUntil,this.purposes=e.purposes}g.formats=h,g.prototype.toBuffer=function(e,t){return void 0===e&&(e="x509"),i.string(e,"format"),i.object(h[e],"formats[format]"),i.optionalObject(t,"options"),h[e].write(this,t)},g.prototype.toString=function(e,t){return void 0===e&&(e="pem"),this.toBuffer(e,t).toString()},g.prototype.fingerprint=function(e){void 0===e&&(e="sha256"),i.string(e,"algorithm");var t={type:"certificate",hash:this.hash(e),algorithm:e};return new s(t)},g.prototype.hash=function(e){if(i.string(e,"algorithm"),e=e.toLowerCase(),void 0===o.hashAlgs[e])throw new f(e);if(this._hashCache[e])return this._hashCache[e];var t=n.createHash(e).update(this.toBuffer("x509")).digest();return this._hashCache[e]=t,t},g.prototype.isExpired=function(e){return void 0===e&&(e=new Date),!(e.getTime()>=this.validFrom.getTime()&&e.getTime()<this.validUntil.getTime())},g.prototype.isSignedBy=function(e){return c.assertCompatible(e,g,[1,0],"issuer"),!!this.issuer.equals(e.subjects[0])&&(!(this.issuer.purposes&&this.issuer.purposes.length>0&&-1===this.issuer.purposes.indexOf("ca"))&&this.isSignedByKey(e.subjectKey))},g.prototype.getExtension=function(e){return i.string(e,"keyOrOid"),this.getExtensions().filter(function(t){return"x509"===t.format?t.oid===e:"openssh"===t.format&&t.name===e})[0]},g.prototype.getExtensions=function(){var e=[],t=this.signatures.x509;t&&t.extras&&t.extras.exts&&t.extras.exts.forEach(function(t){t.format="x509",e.push(t)});var a=this.signatures.openssh;return a&&a.exts&&a.exts.forEach(function(t){t.format="openssh",e.push(t)}),e},g.prototype.isSignedByKey=function(e){if(c.assertCompatible(e,p,[1,2],"issuerKey"),void 0!==this.issuerKey)return this.issuerKey.fingerprint("sha512").matches(e);var t=Object.keys(this.signatures)[0],a=h[t].verify(this,e);return a&&(this.issuerKey=e),a},g.prototype.signWith=function(e){c.assertCompatible(e,l,[1,2],"key");for(var t=Object.keys(h),a=!1,i=0;i<t.length;++i){if("pem"!==t[i])!0===h[t[i]].sign(this,e)&&(a=!0)}if(!a)throw new Error("Failed to sign the certificate for any available certificate formats")},g.createSelfSigned=function(e,t,a){var o;o=Array.isArray(e)?e:[e],i.arrayOfObject(o),o.forEach(function(e){c.assertCompatible(e,m,[1,0],"subject")}),c.assertCompatible(t,l,[1,2],"private key"),i.optionalObject(a,"options"),void 0===a&&(a={}),i.optionalObject(a.validFrom,"options.validFrom"),i.optionalObject(a.validUntil,"options.validUntil");var n=a.validFrom,s=a.validUntil;if(void 0===n&&(n=new Date),void 0===s){i.optionalNumber(a.lifetime,"options.lifetime");var u=a.lifetime;void 0===u&&(u=31536e4),(s=new Date).setTime(s.getTime()+1e3*u)}i.optionalBuffer(a.serial,"options.serial");var p=a.serial;void 0===p&&(p=r.from("0000000000000001","hex"));var h=a.purposes;if(void 0===h&&(h=[]),-1===h.indexOf("signature")&&h.push("signature"),-1===h.indexOf("ca")&&h.push("ca"),-1===h.indexOf("crl")&&h.push("crl"),h.length<=3){var d=o.filter(function(e){return"host"===e.type}),f=o.filter(function(e){return"user"===e.type});d.length>0&&-1===h.indexOf("serverAuth")&&h.push("serverAuth"),f.length>0&&-1===h.indexOf("clientAuth")&&h.push("clientAuth"),(f.length>0||d.length>0)&&(-1===h.indexOf("keyAgreement")&&h.push("keyAgreement"),"rsa"===t.type&&-1===h.indexOf("encryption")&&h.push("encryption"))}var v=new g({subjects:o,issuer:o[0],subjectKey:t.toPublic(),issuerKey:t.toPublic(),signatures:{},serial:p,validFrom:n,validUntil:s,purposes:h});return v.signWith(t),v},g.create=function(e,t,a,o,n){var s;s=Array.isArray(e)?e:[e],i.arrayOfObject(s),s.forEach(function(e){c.assertCompatible(e,m,[1,0],"subject")}),c.assertCompatible(t,p,[1,0],"key"),l.isPrivateKey(t)&&(t=t.toPublic()),c.assertCompatible(a,m,[1,0],"issuer"),c.assertCompatible(o,l,[1,2],"issuer key"),i.optionalObject(n,"options"),void 0===n&&(n={}),i.optionalObject(n.validFrom,"options.validFrom"),i.optionalObject(n.validUntil,"options.validUntil");var u=n.validFrom,h=n.validUntil;if(void 0===u&&(u=new Date),void 0===h){i.optionalNumber(n.lifetime,"options.lifetime");var d=n.lifetime;void 0===d&&(d=31536e4),(h=new Date).setTime(h.getTime()+1e3*d)}i.optionalBuffer(n.serial,"options.serial");var f=n.serial;void 0===f&&(f=r.from("0000000000000001","hex"));var v=n.purposes;void 0===v&&(v=[]),-1===v.indexOf("signature")&&v.push("signature"),!0===n.ca&&(-1===v.indexOf("ca")&&v.push("ca"),-1===v.indexOf("crl")&&v.push("crl"));var y=s.filter(function(e){return"host"===e.type}),b=s.filter(function(e){return"user"===e.type});y.length>0&&-1===v.indexOf("serverAuth")&&v.push("serverAuth"),b.length>0&&-1===v.indexOf("clientAuth")&&v.push("clientAuth"),(b.length>0||y.length>0)&&(-1===v.indexOf("keyAgreement")&&v.push("keyAgreement"),"rsa"===t.type&&-1===v.indexOf("encryption")&&v.push("encryption"));var k=new g({subjects:s,issuer:a,subjectKey:t,issuerKey:o.toPublic(),signatures:{},serial:f,validFrom:u,validUntil:h,purposes:v});return k.signWith(o),k},g.parse=function(e,t,a){"string"!=typeof e&&i.buffer(e,"data"),void 0===t&&(t="auto"),i.string(t,"format"),"string"==typeof a&&(a={filename:a}),i.optionalObject(a,"options"),void 0===a&&(a={}),i.optionalString(a.filename,"options.filename"),void 0===a.filename&&(a.filename="(unnamed)"),i.object(h[t],"formats[format]");try{return h[t].read(e,a)}catch(e){throw new d(a.filename,t,e)}},g.isCertificate=function(e,t){return c.isCompatible(e,g,t)},g.prototype._sshpkApiVersion=[1,1],g._oldVersionDetect=function(e){return[1,0]}},function(e,t,a){e.exports=p;var i=a(0),r=(a(7),a(1),a(25),a(11),a(9),a(3),a(5)),o=a(12),n=a(2).Buffer,s=/^([*]|[a-z0-9][a-z0-9\-]{0,62})(?:\.([*]|[a-z0-9][a-z0-9\-]{0,62}))*$/i,u={cn:"2.5.4.3",o:"2.5.4.10",ou:"2.5.4.11",l:"2.5.4.7",s:"2.5.4.8",c:"2.5.4.6",sn:"2.5.4.4",postalCode:"2.5.4.17",serialNumber:"2.5.4.5",street:"2.5.4.9",x500UniqueIdentifier:"2.5.4.45",role:"2.5.4.72",telephoneNumber:"2.5.4.20",description:"2.5.4.13",dc:"0.9.2342.19200300.100.1.25",uid:"0.9.2342.19200300.100.1.1",mail:"0.9.2342.19200300.100.1.3",title:"2.5.4.12",gn:"2.5.4.42",initials:"2.5.4.43",pseudonym:"2.5.4.65",emailAddress:"1.2.840.113549.1.9.1"},c={};function p(e){var t=this;if(i.object(e,"options"),i.arrayOfObject(e.components,"options.components"),this.components=e.components,this.componentLookup={},this.components.forEach(function(e){e.name&&!e.oid&&(e.oid=u[e.name]),e.oid&&!e.name&&(e.name=c[e.oid]),void 0===t.componentLookup[e.name]&&(t.componentLookup[e.name]=[]),t.componentLookup[e.name].push(e)}),this.componentLookup.cn&&this.componentLookup.cn.length>0&&(this.cn=this.componentLookup.cn[0].value),i.optionalString(e.type,"options.type"),void 0===e.type)1===this.components.length&&this.componentLookup.cn&&1===this.componentLookup.cn.length&&this.componentLookup.cn[0].value.match(s)?(this.type="host",this.hostname=this.componentLookup.cn[0].value):this.componentLookup.dc&&this.components.length===this.componentLookup.dc.length?(this.type="host",this.hostname=this.componentLookup.dc.map(function(e){return e.value}).join(".")):this.componentLookup.uid&&this.components.length===this.componentLookup.uid.length?(this.type="user",this.uid=this.componentLookup.uid[0].value):this.componentLookup.cn&&1===this.componentLookup.cn.length&&this.componentLookup.cn[0].value.match(s)?(this.type="host",this.hostname=this.componentLookup.cn[0].value):this.componentLookup.uid&&1===this.componentLookup.uid.length?(this.type="user",this.uid=this.componentLookup.uid[0].value):this.componentLookup.mail&&1===this.componentLookup.mail.length?(this.type="email",this.email=this.componentLookup.mail[0].value):this.componentLookup.cn&&1===this.componentLookup.cn.length?(this.type="user",this.uid=this.componentLookup.cn[0].value):this.type="unknown";else if(this.type=e.type,"host"===this.type)this.hostname=e.hostname;else if("user"===this.type)this.uid=e.uid;else{if("email"!==this.type)throw new Error("Unknown type "+this.type);this.email=e.email}}Object.keys(u).forEach(function(e){c[u[e]]=e}),p.prototype.toString=function(){return this.components.map(function(e){var t=e.name.toUpperCase();t=t.replace(/=/g,"\\=");var a=e.value;return t+"="+(a=a.replace(/,/g,"\\,"))}).join(", ")},p.prototype.get=function(e,t){i.string(e,"name");var a=this.componentLookup[e];if(void 0!==a&&0!==a.length){if(!t&&a.length>1)throw new Error("Multiple values for attribute "+e);return t?a.map(function(e){return e.value}):a[0].value}},p.prototype.toArray=function(e){return this.components.map(function(e){return{name:e.name,value:e.value}})};var l=/[^a-zA-Z0-9 '(),+.\/:=?-]/,m=/[^\x00-\x7f]/;function h(e,t){if("**"===e||"**"===t)return!0;var a=e.split("."),i=t.split(".");if(a.length!==i.length)return!1;for(var r=0;r<a.length;++r)if("*"!==a[r]&&"*"!==i[r]&&a[r]!==i[r])return!1;return!0}p.prototype.toAsn1=function(e,t){e.startSequence(t),this.components.forEach(function(t){if(e.startSequence(o.Ber.Constructor|o.Ber.Set),e.startSequence(),e.writeOID(t.oid),t.asn1type===o.Ber.Utf8String||t.value.match(m)){var a=n.from(t.value,"utf8");e.writeBuffer(a,o.Ber.Utf8String)}else if(t.asn1type===o.Ber.IA5String||t.value.match(l))e.writeString(t.value,o.Ber.IA5String);else{var i=o.Ber.PrintableString;void 0!==t.asn1type&&(i=t.asn1type),e.writeString(t.value,i)}e.endSequence(),e.endSequence()}),e.endSequence()},p.prototype.equals=function(e){if(!p.isIdentity(e,[1,0]))return!1;if(e.components.length!==this.components.length)return!1;for(var t=0;t<this.components.length;++t){if(this.components[t].oid!==e.components[t].oid)return!1;if(!h(this.components[t].value,e.components[t].value))return!1}return!0},p.forHost=function(e){return i.string(e,"hostname"),new p({type:"host",hostname:e,components:[{name:"cn",value:e}]})},p.forUser=function(e){return i.string(e,"uid"),new p({type:"user",uid:e,components:[{name:"uid",value:e}]})},p.forEmail=function(e){return i.string(e,"email"),new p({type:"email",email:e,components:[{name:"mail",value:e}]})},p.parseDN=function(e){i.string(e,"dn");for(var t=[""],a=0,r=e;r.length>0;){var o;if(null!==(o=/^,/.exec(r)))t[++a]="",r=r.slice(o[0].length);else if(null!==(o=/^\\,/.exec(r)))t[a]+=",",r=r.slice(o[0].length);else if(null!==(o=/^\\./.exec(r)))t[a]+=o[0],r=r.slice(o[0].length);else{if(null===(o=/^[^\\,]+/.exec(r)))throw new Error("Failed to parse DN");t[a]+=o[0],r=r.slice(o[0].length)}}return new p({components:t.map(function(e){for(var t=(e=e.trim()).indexOf("=");t>0&&"\\"===e.charAt(t-1);)t=e.indexOf("=",t+1);if(-1===t)throw new Error("Failed to parse DN");return{name:e.slice(0,t).toLowerCase().replace(/\\=/g,"="),value:e.slice(t+1)}})})},p.fromArray=function(e){return i.arrayOfObject(e,"components"),e.forEach(function(e){if(i.object(e,"component"),i.string(e.name,"component.name"),!n.isBuffer(e.value)&&"string"!=typeof e.value)throw new Error("Invalid component value")}),new p({components:e})},p.parseAsn1=function(e,t){var a=[];e.readSequence(t);for(var i=e.offset+e.length;e.offset<i;){e.readSequence(o.Ber.Constructor|o.Ber.Set);var r=e.offset+e.length;e.readSequence();var n,s=e.readOID(),u=e.peek();switch(u){case o.Ber.PrintableString:case o.Ber.IA5String:case o.Ber.OctetString:case o.Ber.T61String:n=e.readString(u);break;case o.Ber.Utf8String:n=(n=e.readString(u,!0)).toString("utf8");break;case o.Ber.CharacterString:case o.Ber.BMPString:n=(n=e.readString(u,!0)).toString("utf16le");break;default:throw new Error("Unknown asn1 type "+u)}a.push({oid:s,asn1type:u,value:n}),e._offset=r}return e._offset=i,new p({components:a})},p.isIdentity=function(e,t){return r.isCompatible(e,p,t)},p.prototype._sshpkApiVersion=[1,0],p._oldVersionDetect=function(e){return[1,0]}},function(e,t,a){var i=a(0),r=a(38),o=a(3),n={sha1:!0,sha256:!0,sha512:!0},s={rsa:!0,dsa:!0,ecdsa:!0};function u(e,t){Error.captureStackTrace&&Error.captureStackTrace(this,t||u),this.message=e,this.name=t.name}function c(e){u.call(this,e,c)}o.inherits(u,Error),o.inherits(c,u),e.exports={HASH_ALGOS:n,PK_ALGOS:s,HttpSignatureError:u,InvalidAlgorithmError:c,validateAlgorithm:function(e){var t=e.toLowerCase().split("-");if(2!==t.length)throw new c(t[0].toUpperCase()+" is not a valid algorithm");if("hmac"!==t[0]&&!s[t[0]])throw new c(t[0].toUpperCase()+" type keys are not supported");if(!n[t[1]])throw new c(t[1].toUpperCase()+" is not a supported hash algorithm");return t},sshKeyToPEM:function(e){return i.string(e,"ssh_key"),r.parseKey(e,"ssh").toString("pem")},fingerprint:function(e){return i.string(e,"ssh_key"),r.parseKey(e,"ssh").fingerprint("md5").toString("hex")},pemToRsaSSHKey:function(e,t){i.equal("string",typeof e,"typeof pem");var a=r.parseKey(e,"pem");return a.comment=t,a.toString("ssh")}}},function(e,t,a){var i=a(26).BigInteger,r=i.prototype.Barrett;function o(e,t){this.x=t,this.q=e}function n(e,t,a,r){this.curve=e,this.x=t,this.y=a,this.z=null==r?i.ONE:r,this.zinv=null}function s(e,t,a){this.q=e,this.a=this.fromBigInteger(t),this.b=this.fromBigInteger(a),this.infinity=new n(this,null,null),this.reducer=new r(this.q)}o.prototype.equals=function(e){return e==this||this.q.equals(e.q)&&this.x.equals(e.x)},o.prototype.toBigInteger=function(){return this.x},o.prototype.negate=function(){return new o(this.q,this.x.negate().mod(this.q))},o.prototype.add=function(e){return new o(this.q,this.x.add(e.toBigInteger()).mod(this.q))},o.prototype.subtract=function(e){return new o(this.q,this.x.subtract(e.toBigInteger()).mod(this.q))},o.prototype.multiply=function(e){return new o(this.q,this.x.multiply(e.toBigInteger()).mod(this.q))},o.prototype.square=function(){return new o(this.q,this.x.square().mod(this.q))},o.prototype.divide=function(e){return new o(this.q,this.x.multiply(e.toBigInteger().modInverse(this.q)).mod(this.q))},n.prototype.getX=function(){null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q));var e=this.x.toBigInteger().multiply(this.zinv);return this.curve.reduce(e),this.curve.fromBigInteger(e)},n.prototype.getY=function(){null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q));var e=this.y.toBigInteger().multiply(this.zinv);return this.curve.reduce(e),this.curve.fromBigInteger(e)},n.prototype.equals=function(e){return e==this||(this.isInfinity()?e.isInfinity():e.isInfinity()?this.isInfinity():!!e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q).equals(i.ZERO)&&e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q).equals(i.ZERO))},n.prototype.isInfinity=function(){return null==this.x&&null==this.y||this.z.equals(i.ZERO)&&!this.y.toBigInteger().equals(i.ZERO)},n.prototype.negate=function(){return new n(this.curve,this.x,this.y.negate(),this.z)},n.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q),a=e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q);if(i.ZERO.equals(a))return i.ZERO.equals(t)?this.twice():this.curve.getInfinity();var r=new i("3"),o=this.x.toBigInteger(),s=this.y.toBigInteger(),u=(e.x.toBigInteger(),e.y.toBigInteger(),a.square()),c=u.multiply(a),p=o.multiply(u),l=t.square().multiply(this.z),m=l.subtract(p.shiftLeft(1)).multiply(e.z).subtract(c).multiply(a).mod(this.curve.q),h=p.multiply(r).multiply(t).subtract(s.multiply(c)).subtract(l.multiply(t)).multiply(e.z).add(t.multiply(c)).mod(this.curve.q),d=c.multiply(this.z).multiply(e.z).mod(this.curve.q);return new n(this.curve,this.curve.fromBigInteger(m),this.curve.fromBigInteger(h),d)},n.prototype.twice=function(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var e=new i("3"),t=this.x.toBigInteger(),a=this.y.toBigInteger(),r=a.multiply(this.z),o=r.multiply(a).mod(this.curve.q),s=this.curve.a.toBigInteger(),u=t.square().multiply(e);i.ZERO.equals(s)||(u=u.add(this.z.square().multiply(s)));var c=(u=u.mod(this.curve.q)).square().subtract(t.shiftLeft(3).multiply(o)).shiftLeft(1).multiply(r).mod(this.curve.q),p=u.multiply(e).multiply(t).subtract(o.shiftLeft(1)).shiftLeft(2).multiply(o).subtract(u.square().multiply(u)).mod(this.curve.q),l=r.square().multiply(r).shiftLeft(3).mod(this.curve.q);return new n(this.curve,this.curve.fromBigInteger(c),this.curve.fromBigInteger(p),l)},n.prototype.multiply=function(e){if(this.isInfinity())return this;if(0==e.signum())return this.curve.getInfinity();var t,a=e,r=a.multiply(new i("3")),o=this.negate(),n=this;for(t=r.bitLength()-2;t>0;--t){n=n.twice();var s=r.testBit(t);s!=a.testBit(t)&&(n=n.add(s?this:o))}return n},n.prototype.multiplyTwo=function(e,t,a){var i;i=e.bitLength()>a.bitLength()?e.bitLength()-1:a.bitLength()-1;for(var r=this.curve.getInfinity(),o=this.add(t);i>=0;)r=r.twice(),e.testBit(i)?r=a.testBit(i)?r.add(o):r.add(this):a.testBit(i)&&(r=r.add(t)),--i;return r},s.prototype.getQ=function(){return this.q},s.prototype.getA=function(){return this.a},s.prototype.getB=function(){return this.b},s.prototype.equals=function(e){return e==this||this.q.equals(e.q)&&this.a.equals(e.a)&&this.b.equals(e.b)},s.prototype.getInfinity=function(){return this.infinity},s.prototype.fromBigInteger=function(e){return new o(this.q,e)},s.prototype.reduce=function(e){this.reducer.reduce(e)},s.prototype.encodePointHex=function(e){if(e.isInfinity())return"00";var t=e.getX().toBigInteger().toString(16),a=e.getY().toBigInteger().toString(16),i=this.getQ().toString(16).length;for(i%2!=0&&i++;t.length<i;)t="0"+t;for(;a.length<i;)a="0"+a;return"04"+t+a},s.prototype.decodePointHex=function(e){var t;switch(parseInt(e.substr(0,2),16)){case 0:return this.infinity;case 2:t=!1;case 3:null==t&&(t=!0);var a=e.length-2,r=e.substr(2,a),o=this.fromBigInteger(new i(r,16)),s=o.multiply(o.square().add(this.getA())).add(this.getB()).sqrt();if(null==s)throw"Invalid point compression";var u=s.toBigInteger();return u.testBit(0)!=t&&(s=this.fromBigInteger(this.getQ().subtract(u))),new n(this,o,s);case 4:case 6:case 7:a=(e.length-2)/2,r=e.substr(2,a);var c=e.substr(a+2,a);return new n(this,this.fromBigInteger(new i(r,16)),this.fromBigInteger(new i(c,16)));default:return null}},s.prototype.encodeCompressedPointHex=function(e){if(e.isInfinity())return"00";var t=e.getX().toBigInteger().toString(16),a=this.getQ().toString(16).length;for(a%2!=0&&a++;t.length<a;)t="0"+t;return(e.getY().toBigInteger().isEven()?"02":"03")+t},o.prototype.getR=function(){if(null!=this.r)return this.r;this.r=null;var e=this.q.bitLength();e>128&&(-1==this.q.shiftRight(e-64).intValue()&&(this.r=i.ONE.shiftLeft(e).subtract(this.q)));return this.r},o.prototype.modMult=function(e,t){return this.modReduce(e.multiply(t))},o.prototype.modReduce=function(e){if(null!=this.getR()){for(var t=q.bitLength();e.bitLength()>t+1;){var a=e.shiftRight(t),r=e.subtract(a.shiftLeft(t));this.getR().equals(i.ONE)||(a=a.multiply(this.getR())),e=a.add(r)}for(;e.compareTo(q)>=0;)e=e.subtract(q)}else e=e.mod(q);return e},o.prototype.sqrt=function(){if(!this.q.testBit(0))throw"unsupported";if(this.q.testBit(1)){var e=new o(this.q,this.x.modPow(this.q.shiftRight(2).add(i.ONE),this.q));return e.square().equals(this)?e:null}var t=this.q.subtract(i.ONE),a=t.shiftRight(1);if(!this.x.modPow(a,this.q).equals(i.ONE))return null;var r,n,s=t.shiftRight(2).shiftLeft(1).add(i.ONE),u=this.x,c=modDouble(modDouble(u));do{var p;do{p=new i(this.q.bitLength(),new SecureRandom)}while(p.compareTo(this.q)>=0||!p.multiply(p).subtract(c).modPow(a,this.q).equals(t));var l=this.lucasSequence(p,u,s);if(r=l[0],n=l[1],this.modMult(n,n).equals(c))return n.testBit(0)&&(n=n.add(q)),n=n.shiftRight(1),new o(q,n)}while(r.equals(i.ONE)||r.equals(t));return null},o.prototype.lucasSequence=function(e,t,a){for(var r=a.bitLength(),o=a.getLowestSetBit(),n=i.ONE,s=i.TWO,u=e,c=i.ONE,p=i.ONE,l=r-1;l>=o+1;--l)c=this.modMult(c,p),a.testBit(l)?(p=this.modMult(c,t),n=this.modMult(n,u),s=this.modReduce(u.multiply(s).subtract(e.multiply(c))),u=this.modReduce(u.multiply(u).subtract(p.shiftLeft(1)))):(p=c,n=this.modReduce(n.multiply(s).subtract(c)),u=this.modReduce(u.multiply(s).subtract(e.multiply(c))),s=this.modReduce(s.multiply(s).subtract(c.shiftLeft(1))));c=this.modMult(c,p),p=this.modMult(c,t),n=this.modReduce(n.multiply(s).subtract(c)),s=this.modReduce(u.multiply(s).subtract(e.multiply(c))),c=this.modMult(c,p);for(l=1;l<=o;++l)n=this.modMult(n,s),s=this.modReduce(s.multiply(s).subtract(c.shiftLeft(1))),c=this.modMult(c,c);return[n,s]};t={ECCurveFp:s,ECPointFp:n,ECFieldElementFp:o};e.exports=t},function(e,t,a){e.exports={read:function(e,t){return c.read(e,t)},readSSHPrivate:function(e,t,u){var c=(t=new l({buffer:t})).readCString();r.strictEqual(c,h,"bad magic string");var d=t.readString(),f=t.readString(),g=t.readBuffer();if(1!==t.readInt())throw new Error("OpenSSH-format key file contains multiple keys: this is unsupported.");var v=t.readBuffer();if("public"===e)return r.ok(t.atEnd(),"excess bytes left after key"),p.read(v);var y=t.readBuffer();r.ok(t.atEnd(),"excess bytes left after key");var b=new l({buffer:g});switch(f){case"none":if("none"!==d)throw new Error('OpenSSH-format key uses KDF "none" but specifies a cipher other than "none"');break;case"bcrypt":var k=b.readBuffer(),w=b.readInt(),j=n.opensshCipherInfo(d);if(void 0===i&&(i=a(58)),"string"==typeof u.passphrase&&(u.passphrase=o.from(u.passphrase,"utf-8")),!o.isBuffer(u.passphrase))throw new m.KeyEncryptedError(u.filename,"OpenSSH");var x=new Uint8Array(u.passphrase),E=new Uint8Array(k),S=new Uint8Array(j.keySize+j.blockSize),_=i.pbkdf(x,x.length,E,E.length,S,S.length,w);if(0!==_)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");var R=(S=o.from(S)).slice(0,j.keySize),A=S.slice(j.keySize,j.keySize+j.blockSize),C=s.createDecipheriv(j.opensslName,R,A);C.setAutoPadding(!1);var q,O=[];for(C.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),C.write(y),C.end();null!==(q=C.read());)O.push(q);y=o.concat(O);break;default:throw new Error('OpenSSH-format key uses unknown KDF "'+f+'"')}var P=(t=new l({buffer:y})).readInt(),F=t.readInt();if(P!==F)throw new Error("Incorrect passphrase supplied, could not decrypt key");var z={},T=p.readInternal(z,"private",t.remainder());t.skip(z.consumed);var I=t.readString();return T.comment=I,T},write:function(e,t){var c;c=u.isPrivateKey(e)?e.toPublic():e;var p,m,d="none",f="none",g=o.alloc(0),v={blockSize:8};void 0!==t&&("string"==typeof(p=t.passphrase)&&(p=o.from(p,"utf-8")),void 0!==p&&(r.buffer(p,"options.passphrase"),r.optionalString(t.cipher,"options.cipher"),void 0===(d=t.cipher)&&(d="aes128-ctr"),v=n.opensshCipherInfo(d),f="bcrypt"));if(u.isPrivateKey(e)){m=new l({});var y=s.randomBytes(4).readUInt32BE(0);m.writeInt(y),m.writeInt(y),m.write(e.toBuffer("rfc4253")),m.writeString(e.comment||"");for(var b=1;m._offset%v.blockSize!=0;)m.writeChar(b++);m=m.toBuffer()}switch(f){case"none":break;case"bcrypt":var k=s.randomBytes(16),w=new l({});w.writeBuffer(k),w.writeInt(16),g=w.toBuffer(),void 0===i&&(i=a(58));var j=new Uint8Array(p),x=new Uint8Array(k),E=new Uint8Array(v.keySize+v.blockSize),S=i.pbkdf(j,j.length,x,x.length,E,E.length,16);if(0!==S)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");var _=(E=o.from(E)).slice(0,v.keySize),R=E.slice(v.keySize,v.keySize+v.blockSize),A=s.createCipheriv(v.opensslName,_,R);A.setAutoPadding(!1);var C,q=[];for(A.once("error",function(e){throw e}),A.write(m),A.end();null!==(C=A.read());)q.push(C);m=o.concat(q);break;default:throw new Error("Unsupported kdf "+f)}var O,P=new l({});P.writeCString(h),P.writeString(d),P.writeString(f),P.writeBuffer(g),P.writeInt(1),P.writeBuffer(c.toBuffer("rfc4253")),m&&P.writeBuffer(m);P=P.toBuffer(),O=u.isPrivateKey(e)?"OPENSSH PRIVATE KEY":"OPENSSH PUBLIC KEY";var F=P.toString("base64"),z=F.length+F.length/70+18+16+2*O.length+10;P=o.alloc(z);var T=0;T+=P.write("-----BEGIN "+O+"-----\n",T);for(var I=0;I<F.length;){var D=I+70;D>F.length&&(D=F.length),T+=P.write(F.slice(I,D),T),P[T++]=10,I=D}return T+=P.write("-----END "+O+"-----\n",T),P.slice(0,T)}};var i,r=a(0),o=(a(12),a(2).Buffer),n=(a(7),a(5)),s=a(1),u=(a(4),a(6)),c=a(14),p=a(15),l=a(28),m=a(9);var h="openssh-key-v1"},function(e,t,a){"use strict";var i=Object.prototype.hasOwnProperty,r=Object.prototype.toString,o=Object.defineProperty,n=Object.getOwnPropertyDescriptor,s=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===r.call(e)},u=function(e){if(!e||"[object Object]"!==r.call(e))return!1;var t,a=i.call(e,"constructor"),o=e.constructor&&e.constructor.prototype&&i.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!a&&!o)return!1;for(t in e);return void 0===t||i.call(e,t)},c=function(e,t){o&&"__proto__"===t.name?o(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},p=function(e,t){if("__proto__"===t){if(!i.call(e,t))return;if(n)return n(e,t).value}return e[t]};e.exports=function e(){var t,a,i,r,o,n,l=arguments[0],m=1,h=arguments.length,d=!1;for("boolean"==typeof l&&(d=l,l=arguments[1]||{},m=2),(null==l||"object"!=typeof l&&"function"!=typeof l)&&(l={});m<h;++m)if(null!=(t=arguments[m]))for(a in t)i=p(l,a),l!==(r=p(t,a))&&(d&&r&&(u(r)||(o=s(r)))?(o?(o=!1,n=i&&s(i)?i:[]):n=i&&u(i)?i:{},c(l,{name:a,newValue:e(d,n,r)})):void 0!==r&&c(l,{name:a,newValue:r}));return l}},function(e,t){e.exports=require("net")},function(e,t,a){"use strict";var i=a(99),r=a(1),o=a(23).Buffer,n="undefined"==typeof setImmediate?process.nextTick:setImmediate;t.paramsHaveRequestBody=function(e){return e.body||e.requestBodyStream||e.json&&"boolean"!=typeof e.json||e.multipart},t.safeStringify=function(e,t){var a;try{a=JSON.stringify(e,t)}catch(r){a=i(e,t)}return a},t.md5=function(e){return r.createHash("md5").update(e).digest("hex")},t.isReadStream=function(e){return e.readable&&e.path&&e.mode},t.toBase64=function(e){return o.from(e||"","utf8").toString("base64")},t.copy=function(e){var t={};return Object.keys(e).forEach(function(a){t[a]=e[a]}),t},t.version=function(){var e=process.version.replace("v","").split(".");return{major:parseInt(e[0],10),minor:parseInt(e[1],10),patch:parseInt(e[2],10)}},t.defer=n},function(e,t,a){var i=a(4),r=a(25),o=a(11),n=a(6),s=a(30),u=a(31),c=a(9);e.exports={Key:i,parseKey:i.parse,Fingerprint:r,parseFingerprint:r.parse,Signature:o,parseSignature:o.parse,PrivateKey:n,parsePrivateKey:n.parse,generatePrivateKey:n.generate,Certificate:s,parseCertificate:s.parse,createSelfSignedCertificate:s.createSelfSigned,createCertificate:s.create,Identity:u,identityFromDN:u.parseDN,identityForHost:u.forHost,identityForUser:u.forUser,identityForEmail:u.forEmail,identityFromArray:u.fromArray,FingerprintFormatError:c.FingerprintFormatError,InvalidAlgorithmError:c.InvalidAlgorithmError,KeyParseError:c.KeyParseError,SignatureParseError:c.SignatureParseError,KeyEncryptedError:c.KeyEncryptedError,CertificateParseError:c.CertificateParseError}},function(e,t){e.exports={newInvalidAsn1Error:function(e){var t=new Error;return t.name="InvalidAsn1Error",t.message=e||"",t}}},function(e,t){e.exports={EOC:0,Boolean:1,Integer:2,BitString:3,OctetString:4,Null:5,OID:6,ObjectDescriptor:7,External:8,Real:9,Enumeration:10,PDV:11,Utf8String:12,RelativeOID:13,Sequence:16,Set:17,NumericString:18,PrintableString:19,T61String:20,VideotexString:21,IA5String:22,UTCTime:23,GeneralizedTime:24,GraphicString:25,VisibleString:26,GeneralString:28,UniversalString:29,CharacterString:30,BMPString:31,Constructor:32,Context:128}},function(e,t,a){e.exports={DiffieHellman:d,generateECDSA:function(e){var t=[];if(l){var a={nistp256:"prime256v1",nistp384:"secp384r1",nistp521:"secp521r1"}[e],i=r.createECDH(a);return i.generateKeys(),t.push({name:"curve",data:o.from(e)}),t.push({name:"Q",data:i.getPublicKey()}),t.push({name:"d",data:i.getPrivateKey()}),new p({type:"ecdsa",curve:e,parts:t})}var n=new f(e),s=n.getN(),u=Math.ceil((s.bitLength()+64)/8),c=new h(r.randomBytes(u)),m=s.subtract(h.ONE),d=c.mod(m).add(h.ONE),g=n.getG().multiply(d);return d=o.from(d.toByteArray()),g=o.from(n.getCurve().encodePointHex(g),"hex"),t.push({name:"curve",data:o.from(e)}),t.push({name:"Q",data:g}),t.push({name:"d",data:d}),new p({type:"ecdsa",curve:e,parts:t})},generateED25519:function(){var e=u.sign.keyPair(),t=o.from(e.secretKey),a=o.from(e.publicKey);i.strictEqual(t.length,64),i.strictEqual(a.length,32);var r=[];return r.push({name:"A",data:a}),r.push({name:"k",data:t.slice(0,32)}),new p({type:"ed25519",parts:r})}};var i=a(0),r=a(1),o=a(2).Buffer,n=a(7),s=a(5),u=a(27),c=a(4),p=a(6),l=void 0!==r.createECDH,m=(a(110),a(33)),h=a(26).BigInteger;function d(e){if(s.assertCompatible(e,c,[1,4],"key"),this._isPriv=p.isPrivateKey(e,[1,3]),this._algo=e.type,this._curve=e.curve,this._key=e,"dsa"===e.type){if(!l)throw new Error("Due to bugs in the node 0.10 crypto API, node 0.12.x or later is required to use DH");this._dh=r.createDiffieHellman(e.part.p.data,void 0,e.part.g.data,void 0),this._p=e.part.p,this._g=e.part.g,this._isPriv&&this._dh.setPrivateKey(e.part.x.data),this._dh.setPublicKey(e.part.y.data)}else if("ecdsa"===e.type){if(!l)return this._ecParams=new f(this._curve),void(this._isPriv&&(this._priv=new v(this._ecParams,e.part.d.data)));var t={nistp256:"prime256v1",nistp384:"secp384r1",nistp521:"secp521r1"}[e.curve];if(this._dh=r.createECDH(t),"object"!=typeof this._dh||"function"!=typeof this._dh.setPrivateKey)return l=!1,void d.call(this,e);this._isPriv&&this._dh.setPrivateKey(e.part.d.data),this._dh.setPublicKey(e.part.Q.data)}else{if("curve25519"!==e.type)throw new Error("DH not supported for "+e.type+" keys");this._isPriv&&(s.assertCompatible(e,p,[1,5],"key"),this._priv=e.part.k.data)}}function f(e){var t=n.curves[e];i.object(t);var a=new h(t.p),r=new h(t.a),o=new h(t.b),s=new h(t.n),u=h.ONE,c=new m.ECCurveFp(a,r,o),p=c.decodePointHex(t.G.toString("hex"));this.curve=c,this.g=p,this.n=s,this.h=u}function g(e,t){this._params=e,0===t[0]&&(t=t.slice(1)),this._pub=e.getCurve().decodePointHex(t.toString("hex"))}function v(e,t){this._params=e,this._priv=new h(s.mpNormalize(t))}d.prototype.getPublicKey=function(){return this._isPriv?this._key.toPublic():this._key},d.prototype.getPrivateKey=function(){return this._isPriv?this._key:void 0},d.prototype.getKey=d.prototype.getPrivateKey,d.prototype._keyCheck=function(e,t){if(i.object(e,"key"),t||s.assertCompatible(e,p,[1,3],"key"),s.assertCompatible(e,c,[1,4],"key"),e.type!==this._algo)throw new Error("A "+e.type+" key cannot be used in "+this._algo+" Diffie-Hellman");if(e.curve!==this._curve)throw new Error("A key from the "+e.curve+" curve cannot be used with a "+this._curve+" Diffie-Hellman");"dsa"===e.type&&(i.deepEqual(e.part.p,this._p,"DSA key prime does not match"),i.deepEqual(e.part.g,this._g,"DSA key generator does not match"))},d.prototype.setKey=function(e){if(this._keyCheck(e),"dsa"===e.type)this._dh.setPrivateKey(e.part.x.data),this._dh.setPublicKey(e.part.y.data);else if("ecdsa"===e.type)l?(this._dh.setPrivateKey(e.part.d.data),this._dh.setPublicKey(e.part.Q.data)):this._priv=new v(this._ecParams,e.part.d.data);else if("curve25519"===e.type){var t=e.part.k;e.part.k||(t=e.part.r),this._priv=t.data,0===this._priv[0]&&(this._priv=this._priv.slice(1)),this._priv=this._priv.slice(0,32)}this._key=e,this._isPriv=!0},d.prototype.setPrivateKey=d.prototype.setKey,d.prototype.computeSecret=function(e){if(this._keyCheck(e,!0),!this._isPriv)throw new Error("DH exchange has not been initialized with a private key yet");var t;if("dsa"===this._algo)return this._dh.computeSecret(e.part.y.data);if("ecdsa"===this._algo)return l?this._dh.computeSecret(e.part.Q.data):(t=new g(this._ecParams,e.part.Q.data),this._priv.deriveSharedSecret(t));if("curve25519"===this._algo){for(t=e.part.A.data;0===t[0]&&t.length>32;)t=t.slice(1);var a=this._priv;i.strictEqual(t.length,32),i.strictEqual(a.length,32);var r=u.box.before(new Uint8Array(t),new Uint8Array(a));return o.from(r)}throw new Error("Invalid algorithm: "+this._algo)},d.prototype.generateKey=function(){var e,t,a=[];if("dsa"===this._algo)return this._dh.generateKeys(),a.push({name:"p",data:this._p.data}),a.push({name:"q",data:this._key.part.q.data}),a.push({name:"g",data:this._g.data}),a.push({name:"y",data:this._dh.getPublicKey()}),a.push({name:"x",data:this._dh.getPrivateKey()}),this._key=new p({type:"dsa",parts:a}),this._isPriv=!0,this._key;if("ecdsa"===this._algo){if(l)return this._dh.generateKeys(),a.push({name:"curve",data:o.from(this._curve)}),a.push({name:"Q",data:this._dh.getPublicKey()}),a.push({name:"d",data:this._dh.getPrivateKey()}),this._key=new p({type:"ecdsa",curve:this._curve,parts:a}),this._isPriv=!0,this._key;var n=this._ecParams.getN(),s=new h(r.randomBytes(n.bitLength())),c=n.subtract(h.ONE);return e=s.mod(c).add(h.ONE),t=this._ecParams.getG().multiply(e),e=o.from(e.toByteArray()),t=o.from(this._ecParams.getCurve().encodePointHex(t),"hex"),this._priv=new v(this._ecParams,e),a.push({name:"curve",data:o.from(this._curve)}),a.push({name:"Q",data:t}),a.push({name:"d",data:e}),this._key=new p({type:"ecdsa",curve:this._curve,parts:a}),this._isPriv=!0,this._key}if("curve25519"===this._algo){var m=u.box.keyPair();return e=o.from(m.secretKey),t=o.from(m.publicKey),e=o.concat([e,t]),i.strictEqual(e.length,64),i.strictEqual(t.length,32),a.push({name:"A",data:t}),a.push({name:"k",data:e}),this._key=new p({type:"curve25519",parts:a}),this._isPriv=!0,this._key}throw new Error("Invalid algorithm: "+this._algo)},d.prototype.generateKeys=d.prototype.generateKey,f.prototype.getCurve=function(){return this.curve},f.prototype.getG=function(){return this.g},f.prototype.getN=function(){return this.n},f.prototype.getH=function(){return this.h},v.prototype.deriveSharedSecret=function(e){i.ok(e instanceof g);var t=e._pub.multiply(this._priv);return o.from(t.getX().toBigInteger().toByteArray())}},function(e,t,a){e.exports={read:function(e,t){return p.read(e,t,"pkcs1")},readPkcs1:function(e,t,a){switch(e){case"RSA":if("public"===t)return function(e){var t=m(e,"modulus"),a=m(e,"exponent");return new u({type:"rsa",parts:[{name:"e",data:a},{name:"n",data:t}]})}(a);if("private"===t)return function(e){var t=m(e,"version");i.strictEqual(t[0],0);var a=m(e,"modulus"),r=m(e,"public exponent"),o=m(e,"private exponent"),n=m(e,"prime1"),s=m(e,"prime2"),u=m(e,"exponent1"),p=m(e,"exponent2"),l=m(e,"iqmp");return new c({type:"rsa",parts:[{name:"n",data:a},{name:"e",data:r},{name:"d",data:o},{name:"iqmp",data:l},{name:"p",data:n},{name:"q",data:s},{name:"dmodp",data:u},{name:"dmodq",data:p}]})}(a);throw new Error("Unknown key type: "+t);case"DSA":if("public"===t)return function(e){var t=m(e,"y"),a=m(e,"p"),i=m(e,"q"),r=m(e,"g");return new u({type:"dsa",parts:[{name:"y",data:t},{name:"p",data:a},{name:"q",data:i},{name:"g",data:r}]})}(a);if("private"===t)return function(e){var t=m(e,"version");i.strictEqual(t.readUInt8(0),0);var a=m(e,"p"),r=m(e,"q"),o=m(e,"g"),n=m(e,"y"),s=m(e,"x");return new c({type:"dsa",parts:[{name:"p",data:a},{name:"q",data:r},{name:"g",data:o},{name:"y",data:n},{name:"x",data:s}]})}(a);throw new Error("Unknown key type: "+t);case"EC":case"ECDSA":if("private"===t)return function(e){var t=m(e,"version");i.strictEqual(t.readUInt8(0),1);var a=e.readString(r.Ber.OctetString,!0);e.readSequence(160);var n=l(e);i.string(n,"a known elliptic curve"),e.readSequence(161);var u=e.readString(r.Ber.BitString,!0);u=s.ecNormalize(u);var p={type:"ecdsa",parts:[{name:"curve",data:o.from(n)},{name:"Q",data:u},{name:"d",data:a}]};return new c(p)}(a);if("public"===t)return function(e){e.readSequence();var t=e.readOID();i.strictEqual(t,"1.2.840.10045.2.1","must be ecPublicKey");for(var a,c=e.readOID(),p=Object.keys(n.curves),l=0;l<p.length;++l){var m=p[l],h=n.curves[m];if(h.pkcs8oid===c){a=m;break}}i.string(a,"a known ECDSA named curve");var d=e.readString(r.Ber.BitString,!0);d=s.ecNormalize(d);var f={type:"ecdsa",parts:[{name:"curve",data:o.from(a)},{name:"Q",data:d}]};return new u(f)}(a);throw new Error("Unknown key type: "+t);case"EDDSA":case"EdDSA":if("private"===t)return function(e){var t=m(e,"version");i.strictEqual(t.readUInt8(0),1);var a=e.readString(r.Ber.OctetString,!0);e.readSequence(160);var o=e.readOID();i.strictEqual(o,"1.3.101.112","the ed25519 curve identifier"),e.readSequence(161);var n=s.readBitString(e),u={type:"ed25519",parts:[{name:"A",data:s.zeroPadToLength(n,32)},{name:"k",data:a}]};return new c(u)}(a);throw new Error(t+" keys not supported with EdDSA");default:throw new Error("Unknown key algo: "+e)}},write:function(e,t){return p.write(e,t,"pkcs1")},writePkcs1:function(e,t){switch(e.startSequence(),t.type){case"rsa":c.isPrivateKey(t)?function(e,t){var a=o.from([0]);e.writeBuffer(a,r.Ber.Integer),e.writeBuffer(t.part.n.data,r.Ber.Integer),e.writeBuffer(t.part.e.data,r.Ber.Integer),e.writeBuffer(t.part.d.data,r.Ber.Integer),e.writeBuffer(t.part.p.data,r.Ber.Integer),e.writeBuffer(t.part.q.data,r.Ber.Integer),t.part.dmodp&&t.part.dmodq||s.addRSAMissing(t);e.writeBuffer(t.part.dmodp.data,r.Ber.Integer),e.writeBuffer(t.part.dmodq.data,r.Ber.Integer),e.writeBuffer(t.part.iqmp.data,r.Ber.Integer)}(e,t):function(e,t){e.writeBuffer(t.part.n.data,r.Ber.Integer),e.writeBuffer(t.part.e.data,r.Ber.Integer)}(e,t);break;case"dsa":c.isPrivateKey(t)?function(e,t){var a=o.from([0]);e.writeBuffer(a,r.Ber.Integer),e.writeBuffer(t.part.p.data,r.Ber.Integer),e.writeBuffer(t.part.q.data,r.Ber.Integer),e.writeBuffer(t.part.g.data,r.Ber.Integer),e.writeBuffer(t.part.y.data,r.Ber.Integer),e.writeBuffer(t.part.x.data,r.Ber.Integer)}(e,t):function(e,t){e.writeBuffer(t.part.y.data,r.Ber.Integer),e.writeBuffer(t.part.p.data,r.Ber.Integer),e.writeBuffer(t.part.q.data,r.Ber.Integer),e.writeBuffer(t.part.g.data,r.Ber.Integer)}(e,t);break;case"ecdsa":c.isPrivateKey(t)?function(e,t){var a=o.from([1]);e.writeBuffer(a,r.Ber.Integer),e.writeBuffer(t.part.d.data,r.Ber.OctetString),e.startSequence(160);var u=t.part.curve.data.toString(),c=n.curves[u].pkcs8oid;i.string(c,"a known ECDSA named curve"),e.writeOID(c),e.endSequence(),e.startSequence(161);var p=s.ecNormalize(t.part.Q.data,!0);e.writeBuffer(p,r.Ber.BitString),e.endSequence()}(e,t):function(e,t){e.startSequence(),e.writeOID("1.2.840.10045.2.1");var a=t.part.curve.data.toString(),o=n.curves[a].pkcs8oid;i.string(o,"a known ECDSA named curve"),e.writeOID(o),e.endSequence();var u=s.ecNormalize(t.part.Q.data,!0);e.writeBuffer(u,r.Ber.BitString)}(e,t);break;case"ed25519":c.isPrivateKey(t)?function(e,t){var a=o.from([1]);e.writeBuffer(a,r.Ber.Integer),e.writeBuffer(t.part.k.data,r.Ber.OctetString),e.startSequence(160),e.writeOID("1.3.101.112"),e.endSequence(),e.startSequence(161),s.writeBitString(e,t.part.A.data),e.endSequence()}(e,t):function(e,t){throw new Error("Public keys are not supported for EdDSA PKCS#1")}();break;default:throw new Error("Unknown key algo: "+t.type)}e.endSequence()}};var i=a(0),r=a(12),o=a(2).Buffer,n=a(7),s=a(5),u=a(4),c=a(6),p=a(14),l=a(29).readECDSACurve;function m(e,t){return i.strictEqual(e.peek(),r.Ber.Integer,t+" is not an Integer"),s.mpNormalize(e.readString(r.Ber.Integer,!0))}},function(e,t,a){e.exports={read:function(e,t){"string"!=typeof e&&(i.buffer(e,"buf"),e=e.toString("ascii"));var a=e.split("\n");if(a[0].match(/^Private-key-format\: v1/)){var u=a[1].split(" "),l=parseInt(u[1],10),m=u[2];if(!c[l])throw new Error("Unsupported algorithm: "+m);return function(e,t){if(c[e].match(/^RSA-/))return function(e){var t={};e.forEach(function(e){"Modulus:"===e.split(" ")[0]?t.n=p(e):"PublicExponent:"===e.split(" ")[0]?t.e=p(e):"PrivateExponent:"===e.split(" ")[0]?t.d=p(e):"Prime1:"===e.split(" ")[0]?t.p=p(e):"Prime2:"===e.split(" ")[0]?t.q=p(e):"Exponent1:"===e.split(" ")[0]?t.dmodp=p(e):"Exponent2:"===e.split(" ")[0]?t.dmodq=p(e):"Coefficient:"===e.split(" ")[0]&&(t.iqmp=p(e))});var a={type:"rsa",parts:[{name:"e",data:s.mpNormalize(t.e)},{name:"n",data:s.mpNormalize(t.n)},{name:"d",data:s.mpNormalize(t.d)},{name:"p",data:s.mpNormalize(t.p)},{name:"q",data:s.mpNormalize(t.q)},{name:"dmodp",data:s.mpNormalize(t.dmodp)},{name:"dmodq",data:s.mpNormalize(t.dmodq)},{name:"iqmp",data:s.mpNormalize(t.iqmp)}]};return new n(a)}(t);if("ECDSA-P384-SHA384"===c[e]||"ECDSA-P256-SHA256"===c[e]){var a=r.from(t[0].split(" ")[1],"base64"),i="nistp384",o=384;"ECDSA-P256-SHA256"===c[e]&&(i="nistp256",o=256);var u=s.publicFromPrivateECDSA(i,a),l=u.part.Q.data,m={type:"ecdsa",curve:i,size:o,parts:[{name:"curve",data:r.from(i)},{name:"d",data:a},{name:"Q",data:l}]};return new n(m)}throw new Error("Unsupported algorithm: "+c[e])}(l,a.slice(2))}var h=0;for(;a[h].match(/^\;/);)h++;if((a[h].match(/\. IN KEY /)||a[h].match(/\. IN DNSKEY /))&&0===a[h+1].length)return function(e){var t=e.split(" "),a=parseInt(t[5],10);if(!c[a])throw new Error("Unsupported algorithm: "+a);var i=t.slice(6,t.length).join(),n=r.from(i,"base64");if(c[a].match(/^RSA-/)){var u=n.readUInt8(0);if(3!=u&&1!=u)throw new Error("Cannot parse dnssec key: unsupported exponent length");var p=n.slice(1,u+1);p=s.mpNormalize(p);var l=n.slice(1+u);l=s.mpNormalize(l);var m={type:"rsa",parts:[]};return m.parts.push({name:"e",data:p}),m.parts.push({name:"n",data:l}),new o(m)}if("ECDSA-P384-SHA384"===c[a]||"ECDSA-P256-SHA256"===c[a]){var h="nistp384",d=384;c[a].match(/^ECDSA-P256-SHA256/)&&(h="nistp256",d=256);var f={type:"ecdsa",curve:h,size:d,parts:[{name:"curve",data:r.from(h)},{name:"Q",data:s.ecNormalize(n)}]};return new o(f)}throw new Error("Unsupported algorithm: "+c[a])}(a[h]);throw new Error("Cannot parse dnssec key")},write:function(e,t){if(n.isPrivateKey(e)){if("rsa"===e.type)return function(e,t){e.part.dmodp&&e.part.dmodq||s.addRSAMissing(e);var a="";a+="Private-key-format: v1.3\n",a+="Algorithm: "+function(e){if(e&&e.hashAlgo&&"sha1"!==e.hashAlgo){if("sha256"===e.hashAlgo)return"8 (RSASHA256)";if("sha512"===e.hashAlgo)return"10 (RSASHA512)";throw new Error("Unknown or unsupported hash: "+e.hashAlgo)}return"5 (RSASHA1)"}(t)+"\n";var i=s.mpDenormalize(e.part.n.data);a+="Modulus: "+i.toString("base64")+"\n";var o=s.mpDenormalize(e.part.e.data);a+="PublicExponent: "+o.toString("base64")+"\n";var n=s.mpDenormalize(e.part.d.data);a+="PrivateExponent: "+n.toString("base64")+"\n";var u=s.mpDenormalize(e.part.p.data);a+="Prime1: "+u.toString("base64")+"\n";var c=s.mpDenormalize(e.part.q.data);a+="Prime2: "+c.toString("base64")+"\n";var p=s.mpDenormalize(e.part.dmodp.data);a+="Exponent1: "+p.toString("base64")+"\n";var m=s.mpDenormalize(e.part.dmodq.data);a+="Exponent2: "+m.toString("base64")+"\n";var h=s.mpDenormalize(e.part.iqmp.data);a+="Coefficient: "+h.toString("base64")+"\n";var d=new Date;return a+="Created: "+l(d)+"\n",a+="Publish: "+l(d)+"\n",a+="Activate: "+l(d)+"\n",r.from(a,"ascii")}(e,t);if("ecdsa"===e.type)return function(e,t){var a="";if(a+="Private-key-format: v1.3\n","nistp256"===e.curve)a+="Algorithm: 13 (ECDSAP256SHA256)\n";else{if("nistp384"!==e.curve)throw new Error("Unsupported curve");a+="Algorithm: 14 (ECDSAP384SHA384)\n"}var i=e.part.d.data.toString("base64");a+="PrivateKey: "+i+"\n";var o=new Date;return a+="Created: "+l(o)+"\n",a+="Publish: "+l(o)+"\n",a+="Activate: "+l(o)+"\n",r.from(a,"ascii")}(e);throw new Error("Unsupported algorithm: "+e.type)}throw o.isKey(e)?new Error('Format "dnssec" only supports writing private keys'):new Error("key is not a Key or PrivateKey")}};var i=a(0),r=a(2).Buffer,o=a(4),n=a(6),s=a(5),u=(a(28),a(41),{"rsa-sha1":5,"rsa-sha256":8,"rsa-sha512":10,"ecdsa-p256-sha256":13,"ecdsa-p384-sha384":14}),c={};function p(e){return r.from(e.split(" ")[1],"base64")}function l(e){var t=e.getFullYear()+""+(e.getMonth()+1)+e.getUTCDate();return t+=""+e.getUTCHours()+e.getUTCMinutes(),t+=e.getUTCSeconds()}Object.keys(u).forEach(function(e){c[u[e]]=e.toUpperCase()})},function(e,t){function a(e){this.dict=e||{}}a.prototype.set=function(e,t,a){if("object"!=typeof e){void 0===a&&(a=!0);var i=this.has(e);return!a&&i?this.dict[i]=this.dict[i]+","+t:this.dict[i||e]=t,i}for(var r in e)this.set(r,e[r],t)},a.prototype.has=function(e){for(var t=Object.keys(this.dict),a=(e=e.toLowerCase(),0);a<t.length;a++)if(t[a].toLowerCase()===e)return t[a];return!1},a.prototype.get=function(e){var t,a;e=e.toLowerCase();var i=this.dict;return Object.keys(i).forEach(function(r){a=r.toLowerCase(),e===a&&(t=i[r])}),t},a.prototype.swap=function(e){var t=this.has(e);if(t!==e){if(!t)throw new Error('There is no header than matches "'+e+'"');this.dict[e]=this.dict[t],delete this.dict[t]}},a.prototype.del=function(e){var t=this.has(e);return delete this.dict[t||e]},e.exports=function(e){return new a(e)},e.exports.httpify=function(e,t){var i=new a(t);return e.setHeader=function(e,t,a){if(void 0!==t)return i.set(e,t,a)},e.hasHeader=function(e){return i.has(e)},e.getHeader=function(e){return i.get(e)},e.removeHeader=function(e){return i.del(e)},e.headers=i.dict,i}},function(e,t,a){"use strict";var i=a(142),r=a(46),o=a(22),n=a(75),s=a(144);function u(e,t,a){var i=this._refs[a];if("string"==typeof i){if(!this._refs[i])return u.call(this,e,t,i);i=this._refs[i]}if((i=i||this._schemas[a])instanceof n)return h(i.schema,this._opts.inlineRefs)?i.schema:i.validate||this._compile(i);var r,o,s,p=c.call(this,t,a);return p&&(r=p.schema,t=p.root,s=p.baseId),r instanceof n?o=r.validate||e.call(this,r.schema,t,void 0,s):void 0!==r&&(o=h(r,this._opts.inlineRefs)?r:e.call(this,r,t,void 0,s)),o}function c(e,t){var a=i.parse(t),r=f(a),o=d(this._getId(e.schema));if(0===Object.keys(e.schema).length||r!==o){var s=v(r),u=this._refs[s];if("string"==typeof u)return function(e,t,a){var i=c.call(this,e,t);if(i){var r=i.schema,o=i.baseId;e=i.root;var n=this._getId(r);return n&&(o=y(o,n)),l.call(this,a,o,r,e)}}.call(this,e,u,a);if(u instanceof n)u.validate||this._compile(u),e=u;else{if(!((u=this._schemas[s])instanceof n))return;if(u.validate||this._compile(u),s==v(t))return{schema:u,root:e,baseId:o};e=u}if(!e.schema)return;o=d(this._getId(e.schema))}return l.call(this,a,o,e.schema,e)}e.exports=u,u.normalizeId=v,u.fullPath=d,u.url=y,u.ids=function(e){var t=v(this._getId(e)),a={"":t},n={"":d(t,!1)},u={},c=this;return s(e,{allKeys:!0},function(e,t,s,p,l,m,h){if(""!==t){var d=c._getId(e),f=a[p],g=n[p]+"/"+l;if(void 0!==h&&(g+="/"+("number"==typeof h?h:o.escapeFragment(h))),"string"==typeof d){d=f=v(f?i.resolve(f,d):d);var y=c._refs[d];if("string"==typeof y&&(y=c._refs[y]),y&&y.schema){if(!r(e,y.schema))throw new Error('id "'+d+'" resolves to more than one schema')}else if(d!=v(g))if("#"==d[0]){if(u[d]&&!r(e,u[d]))throw new Error('id "'+d+'" resolves to more than one schema');u[d]=e}else c._refs[d]=g}a[t]=f,n[t]=g}}),u},u.inlineRef=h,u.schema=c;var p=o.toHash(["properties","patternProperties","enum","dependencies","definitions"]);function l(e,t,a,i){if(e.fragment=e.fragment||"","/"==e.fragment.slice(0,1)){for(var r=e.fragment.split("/"),n=1;n<r.length;n++){var s=r[n];if(s){if(void 0===(a=a[s=o.unescapeFragment(s)]))break;var u;if(!p[s]&&((u=this._getId(a))&&(t=y(t,u)),a.$ref)){var l=y(t,a.$ref),m=c.call(this,i,l);m&&(a=m.schema,i=m.root,t=m.baseId)}}}return void 0!==a&&a!==i.schema?{schema:a,root:i,baseId:t}:void 0}}var m=o.toHash(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum"]);function h(e,t){return!1!==t&&(void 0===t||!0===t?function e(t){var a;if(Array.isArray(t)){for(var i=0;i<t.length;i++)if("object"==typeof(a=t[i])&&!e(a))return!1}else for(var r in t){if("$ref"==r)return!1;if("object"==typeof(a=t[r])&&!e(a))return!1}return!0}(e):t?function e(t){var a,i=0;if(Array.isArray(t)){for(var r=0;r<t.length;r++)if("object"==typeof(a=t[r])&&(i+=e(a)),i==1/0)return 1/0}else for(var o in t){if("$ref"==o)return 1/0;if(m[o])i++;else if("object"==typeof(a=t[o])&&(i+=e(a)+1),i==1/0)return 1/0}return i}(e)<=t:void 0)}function d(e,t){return!1!==t&&(e=v(e)),f(i.parse(e))}function f(e){return i.serialize(e).split("#")[0]+"#"}var g=/#\/?$/;function v(e){return e?e.replace(g,""):""}function y(e,t){return t=v(t),i.resolve(e,t)}},function(e,t,a){"use strict";var i=Array.isArray,r=Object.keys,o=Object.prototype.hasOwnProperty;e.exports=function e(t,a){if(t===a)return!0;if(t&&a&&"object"==typeof t&&"object"==typeof a){var n,s,u,c=i(t),p=i(a);if(c&&p){if((s=t.length)!=a.length)return!1;for(n=s;0!=n--;)if(!e(t[n],a[n]))return!1;return!0}if(c!=p)return!1;var l=t instanceof Date,m=a instanceof Date;if(l!=m)return!1;if(l&&m)return t.getTime()==a.getTime();var h=t instanceof RegExp,d=a instanceof RegExp;if(h!=d)return!1;if(h&&d)return t.toString()==a.toString();var f=r(t);if((s=f.length)!==r(a).length)return!1;for(n=s;0!=n--;)if(!o.call(a,f[n]))return!1;for(n=s;0!=n--;)if(!e(t[u=f[n]],a[u]))return!1;return!0}return t!=t&&a!=a}},function(e,t,a){"use strict";var i=a(45);function r(e,t,a){this.message=a||r.message(e,t),this.missingRef=i.url(e,t),this.missingSchema=i.normalizeId(i.fullPath(this.missingRef))}function o(e){return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}e.exports={Validation:o(function(e){this.message="validation failed",this.errors=e,this.ajv=this.validation=!0}),MissingRef:o(r)},r.message=function(e,t){return"can't resolve reference "+t+" from id "+e}},function(e,t,a){var i=a(196),r=a(197);e.exports=function(e,t,a){var o=t&&a||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var n=(e=e||{}).random||(e.rng||i)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t)for(var s=0;s<16;++s)t[o+s]=n[s];return t||r(n)}},function(e,t,a){"use strict";var i=a(94),r=i.Cookie,o=i.CookieJar;function n(e){this._jar=new o(e,{looseMode:!0})}t.parse=function(e){if(e&&e.uri&&(e=e.uri),"string"!=typeof e)throw new Error("The cookie function only accepts STRING as param");return r.parse(e,{loose:!0})},n.prototype.setCookie=function(e,t,a){return this._jar.setCookieSync(e,t,a||{})},n.prototype.getCookieString=function(e){return this._jar.getCookieStringSync(e)},n.prototype.getCookies=function(e){return this._jar.getCookiesSync(e)},t.jar=function(e){return new n(e)}},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2018, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i=a(95);t.getPublicSuffix=function(e){return i.get(e)}},function(e,t){e.exports=require("punycode")},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */function i(){}t.Store=i,i.prototype.synchronous=!1,i.prototype.findCookie=function(e,t,a,i){throw new Error("findCookie is not implemented")},i.prototype.findCookies=function(e,t,a){throw new Error("findCookies is not implemented")},i.prototype.putCookie=function(e,t){throw new Error("putCookie is not implemented")},i.prototype.updateCookie=function(e,t,a){throw new Error("updateCookie is not implemented")},i.prototype.removeCookie=function(e,t,a,i){throw new Error("removeCookie is not implemented")},i.prototype.removeCookies=function(e,t,a){throw new Error("removeCookies is not implemented")},i.prototype.getAllCookies=function(e){throw new Error("getAllCookies is not implemented (therefore jar cannot be serialized)")}},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i=a(50);t.permuteDomain=function(e){var t=i.getPublicSuffix(e);if(!t)return null;if(t==e)return[e];for(var a=e.slice(0,-(t.length+1)).split(".").reverse(),r=t,o=[r];a.length;)r=a.shift()+"."+r,o.push(r);return o}},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */t.pathMatch=function(e,t){if(t===e)return!0;if(0===e.indexOf(t)){if("/"===t.substr(-1))return!0;if("/"===e.substr(t.length,1))return!0}return!1}},function(e,t){e.exports=require("buffer")},function(e,t,a){e.exports={Verifier:c,Signer:p};var i=a(27),r=a(20),o=a(3),n=a(0),s=a(2).Buffer,u=a(11);function c(e,t){if("sha512"!==t.toLowerCase())throw new Error("ED25519 only supports the use of SHA-512 hashes");this.key=e,this.chunks=[],r.Writable.call(this,{})}function p(e,t){if("sha512"!==t.toLowerCase())throw new Error("ED25519 only supports the use of SHA-512 hashes");this.key=e,this.chunks=[],r.Writable.call(this,{})}o.inherits(c,r.Writable),c.prototype._write=function(e,t,a){this.chunks.push(e),a()},c.prototype.update=function(e){"string"==typeof e&&(e=s.from(e,"binary")),this.chunks.push(e)},c.prototype.verify=function(e,t){var a;if(u.isSignature(e,[2,0])){if("ed25519"!==e.type)return!1;a=e.toBuffer("raw")}else if("string"==typeof e)a=s.from(e,"base64");else if(u.isSignature(e,[1,0]))throw new Error("signature was created by too old a version of sshpk and cannot be verified");return n.buffer(a),i.sign.detached.verify(new Uint8Array(s.concat(this.chunks)),new Uint8Array(a),new Uint8Array(this.key.part.A.data))},o.inherits(p,r.Writable),p.prototype._write=function(e,t,a){this.chunks.push(e),a()},p.prototype.update=function(e){"string"==typeof e&&(e=s.from(e,"binary")),this.chunks.push(e)},p.prototype.sign=function(){var e=i.sign.detached(new Uint8Array(s.concat(this.chunks)),new Uint8Array(s.concat([this.key.part.k.data,this.key.part.A.data]))),t=s.from(e),a=u.parse(t,"ed25519","raw");return a.hashAlgorithm="sha512",a}},function(e,t,a){e.exports={read:function(e,t){if("string"==typeof e){if(e.trim().match(/^[-]+[ ]*BEGIN/))return o.read(e,t);if(e.match(/^\s*ssh-[a-z]/))return n.read(e,t);if(e.match(/^\s*ecdsa-/))return n.read(e,t);if(e.match(/^putty-user-key-file-2:/i))return c.read(e,t);if(l(e))return u.read(e,t);e=r.from(e,"binary")}else{if(i.buffer(e),function(e){var t=0;for(;t<e.length&&(32===e[t]||10===e[t]);)++t;if(45!==e[t])return!1;for(;t<e.length&&45===e[t];)++t;for(;t<e.length&&32===e[t];)++t;return!(t+5>e.length||"BEGIN"!==e.slice(t,t+5).toString("ascii"))}(e))return o.read(e,t);if(function(e){var t=0;for(;t<e.length&&(32===e[t]||10===e[t]||9===e[t]);)++t;return t+4<=e.length&&"ssh-"===e.slice(t,t+4).toString("ascii")||t+6<=e.length&&"ecdsa-"===e.slice(t,t+6).toString("ascii")}(e))return n.read(e,t);if(function(e){var t=0;for(;t<e.length&&(32===e[t]||10===e[t]||9===e[t]);)++t;return t+22<=e.length&&"putty-user-key-file-2:"===e.slice(t,t+22).toString("ascii").toLowerCase()}(e))return c.read(e,t);if(l(e))return u.read(e,t)}if(e.readUInt32BE(0)<e.length)return s.read(e,t);throw new Error("Failed to auto-detect format of key")},write:function(e,t){throw new Error('"auto" format cannot be used for writing')}};var i=a(0),r=a(2).Buffer,o=(a(5),a(4),a(6),a(14)),n=a(59),s=a(15),u=a(43),c=a(60),p="Private-key-format: v1";function l(e){if(e.length<=p.length)return!1;if(e.slice(0,p.length).toString("ascii")===p)return!0;"string"!=typeof e&&(e=e.toString("ascii"));for(var t=e.split("\n"),a=0;t[a].match(/^\;/);)a++;return!!t[a].toString("ascii").match(/\. IN KEY /)||!!t[a].toString("ascii").match(/\. IN DNSKEY /)}},function(e,t,a){"use strict";var i=a(27).lowlevel.crypto_hash,r=0,o=function(){this.S=[new Uint32Array([3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946]),new Uint32Array([1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055]),new Uint32Array([3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504]),new Uint32Array([976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462])],this.P=new Uint32Array([608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731])};function n(e,t,a){return(e[0][t[a+3]]+e[1][t[a+2]]^e[2][t[a+1]])+e[3][t[a]]}function s(e,t){var a,i=0;for(a=0;a<4;a++,r++)r>=t&&(r=0),i=i<<8|e[r];return i}o.prototype.encipher=function(e,t){void 0===t&&(t=new Uint8Array(e.buffer),0!==e.byteOffset&&(t=t.subarray(e.byteOffset))),e[0]^=this.P[0];for(var a=1;a<16;a+=2)e[1]^=n(this.S,t,0)^this.P[a],e[0]^=n(this.S,t,4)^this.P[a+1];var i=e[0];e[0]=e[1]^this.P[17],e[1]=i},o.prototype.decipher=function(e){var t=new Uint8Array(e.buffer);0!==e.byteOffset&&(t=t.subarray(e.byteOffset)),e[0]^=this.P[17];for(var a=16;a>0;a-=2)e[1]^=n(this.S,t,0)^this.P[a],e[0]^=n(this.S,t,4)^this.P[a-1];var i=e[0];e[0]=e[1]^this.P[0],e[1]=i},o.prototype.expand0state=function(e,t){var a,i,o=new Uint32Array(2),n=new Uint8Array(o.buffer);for(a=0,r=0;a<18;a++)this.P[a]^=s(e,t);for(r=0,a=0;a<18;a+=2)this.encipher(o,n),this.P[a]=o[0],this.P[a+1]=o[1];for(a=0;a<4;a++)for(i=0;i<256;i+=2)this.encipher(o,n),this.S[a][i]=o[0],this.S[a][i+1]=o[1]},o.prototype.expandstate=function(e,t,a,i){var o,n,u=new Uint32Array(2);for(o=0,r=0;o<18;o++)this.P[o]^=s(a,i);for(o=0,r=0;o<18;o+=2)u[0]^=s(e,t),u[1]^=s(e,t),this.encipher(u),this.P[o]=u[0],this.P[o+1]=u[1];for(o=0;o<4;o++)for(n=0;n<256;n+=2)u[0]^=s(e,t),u[1]^=s(e,t),this.encipher(u),this.S[o][n]=u[0],this.S[o][n+1]=u[1];r=0},o.prototype.enc=function(e,t){for(var a=0;a<t;a++)this.encipher(e.subarray(2*a))},o.prototype.dec=function(e,t){for(var a=0;a<t;a++)this.decipher(e.subarray(2*a))};var u=8,c=32;function p(e,t,a){var i,r=new o,n=new Uint32Array(u),c=new Uint8Array([79,120,121,99,104,114,111,109,97,116,105,99,66,108,111,119,102,105,115,104,83,119,97,116,68,121,110,97,109,105,116,101]);for(r.expandstate(t,64,e,64),i=0;i<64;i++)r.expand0state(t,64),r.expand0state(e,64);for(i=0;i<u;i++)n[i]=s(c,c.byteLength);for(i=0;i<64;i++)r.enc(n,n.byteLength/8);for(i=0;i<u;i++)a[4*i+3]=n[i]>>>24,a[4*i+2]=n[i]>>>16,a[4*i+1]=n[i]>>>8,a[4*i+0]=n[i]}e.exports={BLOCKS:u,HASHSIZE:c,hash:p,pbkdf:function(e,t,a,r,o,n,s){var u,l,m,h,d,f,g=new Uint8Array(64),v=new Uint8Array(64),y=new Uint8Array(c),b=new Uint8Array(c),k=new Uint8Array(r+4),w=n;if(s<1)return-1;if(0===t||0===r||0===n||n>y.byteLength*y.byteLength||r>1<<20)return-1;for(h=Math.floor((n+y.byteLength-1)/y.byteLength),m=Math.floor((n+h-1)/h),u=0;u<r;u++)k[u]=a[u];for(i(g,e,t),f=1;n>0;f++){for(k[r+0]=f>>>24,k[r+1]=f>>>16,k[r+2]=f>>>8,k[r+3]=f,i(v,k,r+4),p(g,v,b),u=y.byteLength;u--;)y[u]=b[u];for(u=1;u<s;u++)for(i(v,b,b.byteLength),p(g,v,b),l=0;l<y.byteLength;l++)y[l]^=b[l];for(m=Math.min(m,n),u=0;u<m&&!((d=u*h+(f-1))>=w);u++)o[d]=y[u];n-=u}return 0}}},function(e,t,a){e.exports={read:function(e,t){"string"!=typeof e&&(i.buffer(e,"buf"),e=e.toString("ascii"));var a=e.trim().replace(/[\\\r]/g,""),n=a.match(s);n||(n=a.match(u));i.ok(n,"key must match regex");var c,p=o.algToKeyType(n[1]),l=r.from(n[2],"base64"),m={};if(n[4])try{c=o.read(l)}catch(e){n=a.match(u),i.ok(n,"key must match regex"),l=r.from(n[2],"base64"),c=o.readInternal(m,"public",l)}else c=o.readInternal(m,"public",l);if(i.strictEqual(p,c.type),n[4]&&n[4].length>0)c.comment=n[4];else if(m.consumed){var h=n[2]+(n[3]?n[3]:""),d=4*Math.ceil(m.consumed/3);h=h.slice(0,d-2).replace(/[^a-zA-Z0-9+\/=]/g,"")+h.slice(d-2);var f=m.consumed%3;for(f>0&&"="!==h.slice(d-1,d)&&d--;"="===h.slice(d,d+1);)d++;var g=h.slice(d);(g=g.replace(/[\r\n]/g," ").replace(/^\s+/,"")).match(/^[a-zA-Z0-9]/)&&(c.comment=g)}return c},write:function(e,t){if(i.object(e),!n.isKey(e))throw new Error("Must be a public key");var a=[],s=o.keyTypeToAlg(e);a.push(s);var u=o.write(e);a.push(u.toString("base64")),e.comment&&a.push(e.comment);return r.from(a.join(" "))}};var i=a(0),r=a(2).Buffer,o=a(15),n=(a(5),a(4)),s=(a(6),a(34),/^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([ \t]+([^ \t][^\n]*[\n]*)?)?$/),u=/^([a-z0-9-]+)[ \t\n]+([a-zA-Z0-9+\/][a-zA-Z0-9+\/ \t\n=]*)([^a-zA-Z0-9+\/ \t\n=].*)?$/},function(e,t,a){e.exports={read:function(e,t){var a,n=e.toString("ascii").split(/[\r\n]+/),u=!1,c=0;for(;c<n.length;)if((a=s(n[c++]))&&"putty-user-key-file-2"===a[0].toLowerCase()){u=!0;break}if(!u)throw new Error("No PuTTY format first line found");var p=a[1];a=s(n[c++]),i.equal(a[0].toLowerCase(),"encryption"),a=s(n[c++]),i.equal(a[0].toLowerCase(),"comment");var l=a[1];a=s(n[c++]),i.equal(a[0].toLowerCase(),"public-lines");var m=parseInt(a[1],10);if(!isFinite(m)||m<0||m>n.length)throw new Error("Invalid public-lines count");var h=r.from(n.slice(c,c+m).join(""),"base64"),d=o.algToKeyType(p),f=o.read(h);if(f.type!==d)throw new Error("Outer key algorithm mismatch");return f.comment=l,f},write:function(e,t){if(i.object(e),!n.isKey(e))throw new Error("Must be a public key");var a=o.keyTypeToAlg(e),s=o.write(e),u=e.comment||"",c=function(e,t){var a=[],i=0;for(;i<e.length;)a.push(e.slice(i,i+64)),i+=64;return a}(s.toString("base64"));return c.unshift("Public-Lines: "+c.length),c.unshift("Comment: "+u),c.unshift("Encryption: none"),c.unshift("PuTTY-User-Key-File-2: "+a),r.from(c.join("\n")+"\n")}};var i=a(0),r=a(2).Buffer,o=a(15),n=a(4);a(9);function s(e){var t=e.indexOf(":");if(-1===t)return null;var a=e.slice(0,t);for(++t;" "===e[t];)++t;return[a,e.slice(t)]}},function(e,t,a){e.exports={read:function(e,t){"string"==typeof e&&(e=o.from(e,"binary"));i.buffer(e,"buf");var a=new r.BerReader(e);if(a.readSequence(),Math.abs(a.length-a.remain)>1)throw new Error("DER sequence does not contain whole byte stream");var m=a.offset;a.readSequence();var d=a.offset+a.length,g=d;if(a.peek()===l(0)){a.readSequence(l(0));var v=a.readInt();i.ok(v<=3,"only x.509 versions up to v3 supported")}var y={signatures:{}},b=y.signatures.x509={};b.extras={},y.serial=function(e,t){return i.strictEqual(e.peek(),r.Ber.Integer,t+" is not an Integer"),n.mpNormalize(e.readString(r.Ber.Integer,!0))}(a,"serial"),a.readSequence();var k=a.offset+a.length,j=a.readOID();if(void 0===h[j])throw new Error("unknown signature algorithm "+j);a._offset=k,y.issuer=s.parseAsn1(a),a.readSequence(),y.validFrom=f(a),y.validUntil=f(a),y.subjects=[s.parseAsn1(a)],a.readSequence(),k=a.offset+a.length,y.subjectKey=p.readPkcs8(void 0,"public",a),a._offset=k,a.peek()===l(1)&&(a.readSequence(l(1)),b.extras.issuerUniqueID=e.slice(a.offset,a.offset+a.length),a._offset+=a.length);a.peek()===l(2)&&(a.readSequence(l(2)),b.extras.subjectUniqueID=e.slice(a.offset,a.offset+a.length),a._offset+=a.length);if(a.peek()===l(3)){a.readSequence(l(3));var x=a.offset+a.length;for(a.readSequence();a.offset<x;)w(y,e,a);i.strictEqual(a.offset,x)}i.strictEqual(a.offset,d),a.readSequence(),k=a.offset+a.length;var E=a.readOID(),S=h[E];if(void 0===S)throw new Error("unknown signature algorithm "+E);a._offset=k;var _=a.readString(r.Ber.BitString,!0);0===_[0]&&(_=_.slice(1));var R=S.split("-");return b.signature=u.parse(_,R[0],"asn1"),b.signature.hashAlgorithm=R[1],b.algo=S,b.cache=e.slice(m,g),new c(y)},verify:function(e,t){var a=e.signatures.x509;i.object(a,"x509 signature");var o=a.algo.split("-");if(o[0]!==t.type)return!1;var n=a.cache;if(void 0===n){var s=new r.BerWriter;S(e,s),n=s.buffer}var u=t.createVerify(o[1]);return u.write(n),u.verify(a.signature)},sign:function(e,t){void 0===e.signatures.x509&&(e.signatures.x509={});var a=e.signatures.x509;if(a.algo=t.type+"-"+t.defaultHashAlgorithm(),void 0===h[a.algo])return!1;var i=new r.BerWriter;S(e,i);var o=i.buffer;a.cache=o;var n=t.createSign();return n.write(o),e.signatures.x509.signature=n.sign(),!0},signAsync:function(e,t,a){void 0===e.signatures.x509&&(e.signatures.x509={});var i=e.signatures.x509,o=new r.BerWriter;S(e,o);var n=o.buffer;i.cache=n,t(n,function(e,t){e?a(e):(i.algo=t.type+"-"+t.hashAlgorithm,void 0!==h[i.algo]?(i.signature=t,a()):a(new Error('Invalid signing algorithm "'+i.algo+'"')))})},write:function(e,t){var a=e.signatures.x509;i.object(a,"x509 signature");var n=new r.BerWriter;n.startSequence(),a.cache?(n._ensure(a.cache.length),a.cache.copy(n._buf,n._offset),n._offset+=a.cache.length):S(e,n);n.startSequence(),n.writeOID(h[a.algo]),a.algo.match(/^rsa-/)&&n.writeNull();n.endSequence();var s=a.signature.toBuffer("asn1"),u=o.alloc(s.length+1);return u[0]=0,s.copy(u,1),n.writeBuffer(u,r.Ber.BitString),n.endSequence(),n.buffer}};var i=a(0),r=a(12),o=a(2).Buffer,n=(a(7),a(5)),s=(a(4),a(6),a(14),a(31)),u=a(11),c=a(30),p=a(29);function l(e){return r.Ber.Context|r.Ber.Constructor|e}function m(e){return r.Ber.Context|e}var h={"rsa-md5":"1.2.840.113549.1.1.4","rsa-sha1":"1.2.840.113549.1.1.5","rsa-sha256":"1.2.840.113549.1.1.11","rsa-sha384":"1.2.840.113549.1.1.12","rsa-sha512":"1.2.840.113549.1.1.13","dsa-sha1":"1.2.840.10040.4.3","dsa-sha256":"2.16.840.1.101.3.4.3.2","ecdsa-sha1":"1.2.840.10045.4.1","ecdsa-sha256":"1.2.840.10045.4.3.2","ecdsa-sha384":"1.2.840.10045.4.3.3","ecdsa-sha512":"1.2.840.10045.4.3.4","ed25519-sha512":"1.3.101.112"};Object.keys(h).forEach(function(e){h[h[e]]=e}),h["1.3.14.3.2.3"]="rsa-md5",h["1.3.14.3.2.29"]="rsa-sha1";var d={issuerKeyId:"2.5.29.35",altName:"2.5.29.17",basicConstraints:"2.5.29.19",keyUsage:"2.5.29.15",extKeyUsage:"2.5.29.37"};function f(e){if(e.peek()===r.Ber.UTCTime)return function(e){var t=e.match(j);i.ok(t,"timestamps must be in UTC");var a=new Date,r=a.getUTCFullYear(),o=100*Math.floor(r/100),n=parseInt(t[1],10);n+=r%100<50&&n>=60?o-1:o;a.setUTCFullYear(n,parseInt(t[2],10)-1,parseInt(t[3],10)),a.setUTCHours(parseInt(t[4],10),parseInt(t[5],10)),t[6]&&t[6].length>0&&a.setUTCSeconds(parseInt(t[6],10));return a}(e.readString(r.Ber.UTCTime));if(e.peek()===r.Ber.GeneralizedTime)return function(e){var t=e.match(x);i.ok(t);var a=new Date;a.setUTCFullYear(parseInt(t[1],10),parseInt(t[2],10)-1,parseInt(t[3],10)),a.setUTCHours(parseInt(t[4],10),parseInt(t[5],10)),t[6]&&t[6].length>0&&a.setUTCSeconds(parseInt(t[6],10));return a}(e.readString(r.Ber.GeneralizedTime));throw new Error("Unsupported date format")}function g(e,t){var a,i;t.getUTCFullYear()>=2050||t.getUTCFullYear()<1950?e.writeString((i="",i+=E((a=t).getUTCFullYear(),4),i+=E(a.getUTCMonth()+1),i+=E(a.getUTCDate()),i+=E(a.getUTCHours()),i+=E(a.getUTCMinutes()),i+=E(a.getUTCSeconds()),i+="Z"),r.Ber.GeneralizedTime):e.writeString(function(e){var t="";return t+=E(e.getUTCFullYear()%100),t+=E(e.getUTCMonth()+1),t+=E(e.getUTCDate()),t+=E(e.getUTCHours()),t+=E(e.getUTCMinutes()),t+=E(e.getUTCSeconds()),t+="Z"}(t),r.Ber.UTCTime)}var v={OtherName:l(0),RFC822Name:m(1),DNSName:m(2),X400Address:l(3),DirectoryName:l(4),EDIPartyName:l(5),URI:m(6),IPAddress:m(7),OID:m(8)},y={serverAuth:"1.3.6.1.5.5.7.3.1",clientAuth:"1.3.6.1.5.5.7.3.2",codeSigning:"1.3.6.1.5.5.7.3.3",joyentDocker:"1.3.6.1.4.1.38678.1.4.1",joyentCmon:"1.3.6.1.4.1.38678.1.4.2"},b={};Object.keys(y).forEach(function(e){b[y[e]]=e});var k=["signature","identity","keyEncryption","encryption","keyAgreement","ca","crl"];function w(e,t,a){a.readSequence();var i,o,n=a.offset+a.length,u=a.readOID(),c=e.signatures.x509;switch(c.extras.exts||(c.extras.exts=[]),a.peek()===r.Ber.Boolean&&(o=a.readBoolean()),u){case d.basicConstraints:a.readSequence(r.Ber.OctetString),a.readSequence();var p=a.offset+a.length,l=!1;a.peek()===r.Ber.Boolean&&(l=a.readBoolean()),void 0===e.purposes&&(e.purposes=[]),!0===l&&e.purposes.push("ca");var m={oid:u,critical:o};a.offset<p&&a.peek()===r.Ber.Integer&&(m.pathLen=a.readInt()),c.extras.exts.push(m);break;case d.extKeyUsage:a.readSequence(r.Ber.OctetString),a.readSequence(),void 0===e.purposes&&(e.purposes=[]);for(var h=a.offset+a.length;a.offset<h;){var f=a.readOID();e.purposes.push(b[f]||f)}-1!==e.purposes.indexOf("serverAuth")&&-1===e.purposes.indexOf("clientAuth")?e.subjects.forEach(function(e){"host"!==e.type&&(e.type="host",e.hostname=e.uid||e.email||e.components[0].value)}):-1!==e.purposes.indexOf("clientAuth")&&-1===e.purposes.indexOf("serverAuth")&&e.subjects.forEach(function(e){"user"!==e.type&&(e.type="user",e.uid=e.hostname||e.email||e.components[0].value)}),c.extras.exts.push({oid:u,critical:o});break;case d.keyUsage:a.readSequence(r.Ber.OctetString);var g=a.readString(r.Ber.BitString,!0);(function(e,t){for(var a=8*(e.length-1)-e[0],i={},r=0;r<a;++r){var o=1+Math.floor(r/8),n=7-r%8,s=1<<n,u=0!=(e[o]&s),c=t[r];u&&"string"==typeof c&&(i[c]=!0)}return Object.keys(i)})(g,k).forEach(function(t){void 0===e.purposes&&(e.purposes=[]),-1===e.purposes.indexOf(t)&&e.purposes.push(t)}),c.extras.exts.push({oid:u,critical:o,bits:g});break;case d.altName:a.readSequence(r.Ber.OctetString),a.readSequence();for(var y=a.offset+a.length;a.offset<y;)switch(a.peek()){case v.OtherName:case v.EDIPartyName:a.readSequence(),a._offset+=a.length;break;case v.OID:a.readOID(v.OID);break;case v.RFC822Name:var w=a.readString(v.RFC822Name);i=s.forEmail(w),e.subjects[0].equals(i)||e.subjects.push(i);break;case v.DirectoryName:a.readSequence(v.DirectoryName),i=s.parseAsn1(a),e.subjects[0].equals(i)||e.subjects.push(i);break;case v.DNSName:var j=a.readString(v.DNSName);i=s.forHost(j),e.subjects[0].equals(i)||e.subjects.push(i);break;default:a.readString(a.peek())}c.extras.exts.push({oid:u,critical:o});break;default:c.extras.exts.push({oid:u,critical:o,data:a.readString(r.Ber.OctetString,!0)})}a._offset=n}var j=/^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;var x=/^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;function E(e,t){void 0===t&&(t=2);for(var a=""+e;a.length<t;)a="0"+a;return a}function S(e,t){var a=e.signatures.x509;i.object(a,"x509 signature"),t.startSequence(),t.startSequence(l(0)),t.writeInt(2),t.endSequence(),t.writeBuffer(n.mpNormalize(e.serial),r.Ber.Integer),t.startSequence(),t.writeOID(h[a.algo]),a.algo.match(/^rsa-/)&&t.writeNull(),t.endSequence(),e.issuer.toAsn1(t),t.startSequence(),g(t,e.validFrom),g(t,e.validUntil),t.endSequence();var o=e.subjects[0],s=e.subjects.slice(1);if(o.toAsn1(t),p.writePkcs8(t,e.subjectKey),a.extras&&a.extras.issuerUniqueID&&t.writeBuffer(a.extras.issuerUniqueID,l(1)),a.extras&&a.extras.subjectUniqueID&&t.writeBuffer(a.extras.subjectUniqueID,l(2)),s.length>0||"host"===o.type||void 0!==e.purposes&&e.purposes.length>0||a.extras&&a.extras.exts){t.startSequence(l(3)),t.startSequence();var u=[];void 0!==e.purposes&&e.purposes.length>0&&(u.push({oid:d.basicConstraints,critical:!0}),u.push({oid:d.keyUsage,critical:!0}),u.push({oid:d.extKeyUsage,critical:!0})),u.push({oid:d.altName}),a.extras&&a.extras.exts&&(u=a.extras.exts);for(var c=0;c<u.length;++c){if(t.startSequence(),t.writeOID(u[c].oid),void 0!==u[c].critical&&t.writeBoolean(u[c].critical),u[c].oid===d.altName){t.startSequence(r.Ber.OctetString),t.startSequence(),"host"===o.type&&t.writeString(o.hostname,m(2));for(var f=0;f<s.length;++f)"host"===s[f].type?t.writeString(s[f].hostname,v.DNSName):"email"===s[f].type?t.writeString(s[f].email,v.RFC822Name):(t.startSequence(v.DirectoryName),s[f].toAsn1(t),t.endSequence());t.endSequence(),t.endSequence()}else if(u[c].oid===d.basicConstraints){t.startSequence(r.Ber.OctetString),t.startSequence();var b=-1!==e.purposes.indexOf("ca"),w=u[c].pathLen;t.writeBoolean(b),void 0!==w&&t.writeInt(w),t.endSequence(),t.endSequence()}else if(u[c].oid===d.extKeyUsage)t.startSequence(r.Ber.OctetString),t.startSequence(),e.purposes.forEach(function(e){if("ca"!==e&&-1===k.indexOf(e)){var a=e;void 0!==y[e]&&(a=y[e]),t.writeOID(a)}}),t.endSequence(),t.endSequence();else if(u[c].oid===d.keyUsage){if(t.startSequence(r.Ber.OctetString),void 0!==u[c].bits)t.writeBuffer(u[c].bits,r.Ber.BitString);else{var j=_(e.purposes,k);t.writeBuffer(j,r.Ber.BitString)}t.endSequence()}else t.writeBuffer(u[c].data,r.Ber.OctetString);t.endSequence()}t.endSequence(),t.endSequence()}t.endSequence()}function _(e,t){var a=t.length,i=Math.ceil(a/8),r=8*i-a,n=o.alloc(1+i);n[0]=r;for(var s=0;s<a;++s){var u=1+Math.floor(s/8),c=1<<7-s%8,p=t[s];if(void 0!==p)-1!==e.indexOf(p)&&(n[u]|=c)}return n}},function(e,t,a){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i,r,o,n=a(122),s=a(16).extname,u=/^\s*([^;\s]*)(?:;|\s|$)/,c=/^text\//i;function p(e){if(!e||"string"!=typeof e)return!1;var t=u.exec(e),a=t&&n[t[1].toLowerCase()];return a&&a.charset?a.charset:!(!t||!c.test(t[1]))&&"UTF-8"}t.charset=p,t.charsets={lookup:p},t.contentType=function(e){if(!e||"string"!=typeof e)return!1;var a=-1===e.indexOf("/")?t.lookup(e):e;if(!a)return!1;if(-1===a.indexOf("charset")){var i=t.charset(a);i&&(a+="; charset="+i.toLowerCase())}return a},t.extension=function(e){if(!e||"string"!=typeof e)return!1;var a=u.exec(e),i=a&&t.extensions[a[1].toLowerCase()];if(!i||!i.length)return!1;return i[0]},t.extensions=Object.create(null),t.lookup=function(e){if(!e||"string"!=typeof e)return!1;var a=s("x."+e).toLowerCase().substr(1);if(!a)return!1;return t.types[a]||!1},t.types=Object.create(null),i=t.extensions,r=t.types,o=["nginx","apache",void 0,"iana"],Object.keys(n).forEach(function(e){var t=n[e],a=t.extensions;if(a&&a.length){i[e]=a;for(var s=0;s<a.length;s++){var u=a[s];if(r[u]){var c=o.indexOf(n[r[u]].source),p=o.indexOf(t.source);if("application/octet-stream"!==r[u]&&(c>p||c===p&&"application/"===r[u].substr(0,12)))continue}r[u]=e}}})},function(e,t){e.exports=require("tls")},function(e,t,a){var i=a(3),r=a(20).Stream,o=a(126),n=a(127);function s(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null}e.exports=s,i.inherits(s,r),s.create=function(e){var t=new this;for(var a in e=e||{})t[a]=e[a];return t},s.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!Buffer.isBuffer(e)},s.prototype.append=function(e){if(s.isStreamLike(e)){if(!(e instanceof o)){var t=o.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=t}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},s.prototype.pipe=function(e,t){return r.prototype.pipe.call(this,e,t),this.resume(),e},s.prototype._getNext=function(){this._currentStream=null;var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){s.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),n(this._pipeNext.bind(this,e))}.bind(this)):this._pipeNext(e):this.end()},s.prototype._pipeNext=function(e){if(this._currentStream=e,s.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var t=e;this.write(t),this._getNext()},s.prototype._handleErrors=function(e){var t=this;e.on("error",function(e){t._emitError(e)})},s.prototype.write=function(e){this.emit("data",e)},s.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},s.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},s.prototype.end=function(){this._reset(),this.emit("end")},s.prototype.destroy=function(){this._reset(),this.emit("close")},s.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},s.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},s.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach(function(t){t.dataSize&&(e.dataSize+=t.dataSize)}),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},s.prototype._emitError=function(e){this._reset(),this.emit("error",e)}},function(e,t,a){var i=a(66),r=a(67);e.exports=function(e,t,a,o){var n=a.keyedList?a.keyedList[a.index]:a.index;a.jobs[n]=function(e,t,a,r){var o;o=2==e.length?e(a,i(r)):e(a,t,i(r));return o}(t,n,e[n],function(e,t){n in a.jobs&&(delete a.jobs[n],e?r(a):a.results[n]=t,o(e,a.results))})}},function(e,t,a){var i=a(130);e.exports=function(e){var t=!1;return i(function(){t=!0}),function(a,r){t?e(a,r):i(function(){e(a,r)})}}},function(e,t){e.exports=function(e){Object.keys(e.jobs).forEach(function(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}.bind(e)),e.jobs={}}},function(e,t){e.exports=function(e,t){var a=!Array.isArray(e),i={index:0,keyedList:a||t?Object.keys(e):null,jobs:{},results:a?{}:[],size:a?Object.keys(e).length:e.length};t&&i.keyedList.sort(a?t:function(a,i){return t(e[a],e[i])});return i}},function(e,t,a){var i=a(67),r=a(66);e.exports=function(e){if(!Object.keys(this.jobs).length)return;this.index=this.size,i(this),r(e)(null,this.results)}},function(e,t,a){var i=a(65),r=a(68),o=a(69);function n(e,t){return e<t?-1:e>t?1:0}e.exports=function(e,t,a,n){var s=r(e,a);return i(e,t,s,function a(r,o){r?n(r,o):(s.index++,s.index<(s.keyedList||e).length?i(e,t,s,a):n(null,s.results))}),o.bind(s,n)},e.exports.ascending=n,e.exports.descending=function(e,t){return-1*n(e,t)}},function(e,t,a){var i=a(20);function r(e){return e instanceof i.Stream}function o(e){return r(e)&&"function"==typeof e._read&&"object"==typeof e._readableState}function n(e){return r(e)&&"function"==typeof e._write&&"object"==typeof e._writableState}e.exports=r,e.exports.isReadable=o,e.exports.isWritable=n,e.exports.isDuplex=function(e){return o(e)&&n(e)}},function(e,t,a){"use strict";var i=a(136),r=a(137),o=a(74);e.exports={formats:o,parse:r,stringify:i}},function(e,t,a){"use strict";var i=Object.prototype.hasOwnProperty,r=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),o=function(e,t){for(var a=t&&t.plainObjects?Object.create(null):{},i=0;i<e.length;++i)void 0!==e[i]&&(a[i]=e[i]);return a};e.exports={arrayToObject:o,assign:function(e,t){return Object.keys(t).reduce(function(e,a){return e[a]=t[a],e},e)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],a=[],i=0;i<t.length;++i)for(var r=t[i],o=r.obj[r.prop],n=Object.keys(o),s=0;s<n.length;++s){var u=n[s],c=o[u];"object"==typeof c&&null!==c&&-1===a.indexOf(c)&&(t.push({obj:o,prop:u}),a.push(c))}return function(e){for(var t;e.length;){var a=e.pop();if(t=a.obj[a.prop],Array.isArray(t)){for(var i=[],r=0;r<t.length;++r)void 0!==t[r]&&i.push(t[r]);a.obj[a.prop]=i}}return t}(t)},decode:function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(t){return e}},encode:function(e){if(0===e.length)return e;for(var t="string"==typeof e?e:String(e),a="",i=0;i<t.length;++i){var o=t.charCodeAt(i);45===o||46===o||95===o||126===o||o>=48&&o<=57||o>=65&&o<=90||o>=97&&o<=122?a+=t.charAt(i):o<128?a+=r[o]:o<2048?a+=r[192|o>>6]+r[128|63&o]:o<55296||o>=57344?a+=r[224|o>>12]+r[128|o>>6&63]+r[128|63&o]:(i+=1,o=65536+((1023&o)<<10|1023&t.charCodeAt(i)),a+=r[240|o>>18]+r[128|o>>12&63]+r[128|o>>6&63]+r[128|63&o])}return a},isBuffer:function(e){return null!=e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,a,r){if(!a)return t;if("object"!=typeof a){if(Array.isArray(t))t.push(a);else{if("object"!=typeof t)return[t,a];(r.plainObjects||r.allowPrototypes||!i.call(Object.prototype,a))&&(t[a]=!0)}return t}if("object"!=typeof t)return[t].concat(a);var n=t;return Array.isArray(t)&&!Array.isArray(a)&&(n=o(t,r)),Array.isArray(t)&&Array.isArray(a)?(a.forEach(function(a,o){i.call(t,o)?t[o]&&"object"==typeof t[o]?t[o]=e(t[o],a,r):t.push(a):t[o]=a}),t):Object.keys(a).reduce(function(t,o){var n=a[o];return i.call(t,o)?t[o]=e(t[o],n,r):t[o]=n,t},n)}}},function(e,t,a){"use strict";var i=String.prototype.replace,r=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return i.call(e,r,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},function(e,t,a){"use strict";var i=a(22);e.exports=function(e){i.copy(e,this)}},function(e,t,a){"use strict";e.exports=function(e,t){t||(t={}),"function"==typeof t&&(t={cmp:t});var a,i="boolean"==typeof t.cycles&&t.cycles,r=t.cmp&&(a=t.cmp,function(e){return function(t,i){var r={key:t,value:e[t]},o={key:i,value:e[i]};return a(r,o)}}),o=[];return function e(t){if(t&&t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if("number"==typeof t)return isFinite(t)?""+t:"null";if("object"!=typeof t)return JSON.stringify(t);var a,n;if(Array.isArray(t)){for(n="[",a=0;a<t.length;a++)a&&(n+=","),n+=e(t[a])||"null";return n+"]"}if(null===t)return"null";if(-1!==o.indexOf(t)){if(i)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var s=o.push(t)-1,u=Object.keys(t).sort(r&&r(t));for(n="",a=0;a<u.length;a++){var c=u[a],p=e(t[c]);p&&(n&&(n+=","),n+=JSON.stringify(c)+":"+p)}return o.splice(s,1),"{"+n+"}"}}(e)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i="",r=!0===e.schema.$async,o=e.util.schemaHasRulesExcept(e.schema,e.RULES.all,"$ref"),n=e.self._getId(e.schema);if(e.isTop&&(i+=" var validate = ",r&&(e.async=!0,i+="async "),i+="function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ",n&&(e.opts.sourceCode||e.opts.processCode)&&(i+=" /*# sourceURL="+n+" */ ")),"boolean"==typeof e.schema||!o&&!e.schema.$ref){var s=e.level,u=e.dataLevel,c=e.schema["false schema"],p=e.schemaPath+e.util.getProperty("false schema"),l=e.errSchemaPath+"/false schema",m=!e.opts.allErrors,h="data"+(u||""),d="valid"+s;if(!1===e.schema){e.isTop?m=!0:i+=" var "+d+" = false; ",(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'false schema' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'boolean schema is false' "),e.opts.verbose&&(i+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),i+=" } "):i+=" {} ";var f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else e.isTop?i+=r?" return data; ":" validate.errors = null; return true; ":i+=" var "+d+" = true; ";return e.isTop&&(i+=" }; return validate; "),i}if(e.isTop){var g=e.isTop;s=e.level=0,u=e.dataLevel=0,h="data";e.rootId=e.resolve.fullPath(e.self._getId(e.root.schema)),e.baseId=e.baseId||e.rootId,delete e.isTop,e.dataPathArr=[void 0],i+=" var vErrors = null; ",i+=" var errors = 0;     ",i+=" if (rootData === undefined) rootData = data; "}else{s=e.level,h="data"+((u=e.dataLevel)||"");if(n&&(e.baseId=e.resolve.url(e.baseId,n)),r&&!e.async)throw new Error("async schema in sync schema");i+=" var errs_"+s+" = errors;"}d="valid"+s,m=!e.opts.allErrors;var v="",y="",b=e.schema.type,k=Array.isArray(b);if(b&&e.opts.nullable&&!0===e.schema.nullable&&(k?-1==b.indexOf("null")&&(b=b.concat("null")):"null"!=b&&(b=[b,"null"],k=!0)),k&&1==b.length&&(b=b[0],k=!1),e.schema.$ref&&o){if("fail"==e.opts.extendRefs)throw new Error('$ref: validation keywords used in schema at path "'+e.errSchemaPath+'" (see option extendRefs)');!0!==e.opts.extendRefs&&(o=!1,e.logger.warn('$ref: keywords ignored in schema at path "'+e.errSchemaPath+'"'))}if(e.schema.$comment&&e.opts.$comment&&(i+=" "+e.RULES.all.$comment.code(e,"$comment")),b){if(e.opts.coerceTypes)var w=e.util.coerceToTypes(e.opts.coerceTypes,b);var j=e.RULES.types[b];if(w||k||!0===j||j&&!W(j)){p=e.schemaPath+".type",l=e.errSchemaPath+"/type",p=e.schemaPath+".type",l=e.errSchemaPath+"/type";var x=k?"checkDataTypes":"checkDataType";if(i+=" if ("+e.util[x](b,h,!0)+") { ",w){var E="dataType"+s,S="coerced"+s;i+=" var "+E+" = typeof "+h+"; ","array"==e.opts.coerceTypes&&(i+=" if ("+E+" == 'object' && Array.isArray("+h+")) "+E+" = 'array'; "),i+=" var "+S+" = undefined; ";var _="",R=w;if(R)for(var A,C=-1,q=R.length-1;C<q;)A=R[C+=1],C&&(i+=" if ("+S+" === undefined) { ",_+="}"),"array"==e.opts.coerceTypes&&"array"!=A&&(i+=" if ("+E+" == 'array' && "+h+".length == 1) { "+S+" = "+h+" = "+h+"[0]; "+E+" = typeof "+h+";  } "),"string"==A?i+=" if ("+E+" == 'number' || "+E+" == 'boolean') "+S+" = '' + "+h+"; else if ("+h+" === null) "+S+" = ''; ":"number"==A||"integer"==A?(i+=" if ("+E+" == 'boolean' || "+h+" === null || ("+E+" == 'string' && "+h+" && "+h+" == +"+h+" ","integer"==A&&(i+=" && !("+h+" % 1)"),i+=")) "+S+" = +"+h+"; "):"boolean"==A?i+=" if ("+h+" === 'false' || "+h+" === 0 || "+h+" === null) "+S+" = false; else if ("+h+" === 'true' || "+h+" === 1) "+S+" = true; ":"null"==A?i+=" if ("+h+" === '' || "+h+" === 0 || "+h+" === false) "+S+" = null; ":"array"==e.opts.coerceTypes&&"array"==A&&(i+=" if ("+E+" == 'string' || "+E+" == 'number' || "+E+" == 'boolean' || "+h+" == null) "+S+" = ["+h+"]; ");i+=" "+_+" if ("+S+" === undefined) {   ",(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { type: '",i+=k?""+b.join(","):""+b,i+="' } ",!1!==e.opts.messages&&(i+=" , message: 'should be ",i+=k?""+b.join(","):""+b,i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),i+=" } "):i+=" {} ";f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else {  ";var O=u?"data"+(u-1||""):"parentData";i+=" "+h+" = "+S+"; ",u||(i+="if ("+O+" !== undefined)"),i+=" "+O+"["+(u?e.dataPathArr[u]:"parentDataProperty")+"] = "+S+"; } "}else{(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { type: '",i+=k?""+b.join(","):""+b,i+="' } ",!1!==e.opts.messages&&(i+=" , message: 'should be ",i+=k?""+b.join(","):""+b,i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),i+=" } "):i+=" {} ";f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}i+=" } "}}if(e.schema.$ref&&!o)i+=" "+e.RULES.all.$ref.code(e,"$ref")+" ",m&&(i+=" } if (errors === ",i+=g?"0":"errs_"+s,i+=") { ",y+="}");else{var P=e.RULES;if(P)for(var F=-1,z=P.length-1;F<z;)if(W(j=P[F+=1])){if(j.type&&(i+=" if ("+e.util.checkDataType(j.type,h)+") { "),e.opts.useDefaults&&!e.compositeRule)if("object"==j.type&&e.schema.properties){c=e.schema.properties;var T=Object.keys(c);if(T)for(var I,D=-1,B=T.length-1;D<B;){if(void 0!==(U=c[I=T[D+=1]]).default)i+="  if ("+(H=h+e.util.getProperty(I))+" === undefined ","empty"==e.opts.useDefaults&&(i+=" || "+H+" === null || "+H+" === '' "),i+=" ) "+H+" = ","shared"==e.opts.useDefaults?i+=" "+e.useDefault(U.default)+" ":i+=" "+JSON.stringify(U.default)+" ",i+="; "}}else if("array"==j.type&&Array.isArray(e.schema.items)){var L=e.schema.items;if(L){C=-1;for(var U,N=L.length-1;C<N;){var H;if(void 0!==(U=L[C+=1]).default)i+="  if ("+(H=h+"["+C+"]")+" === undefined ","empty"==e.opts.useDefaults&&(i+=" || "+H+" === null || "+H+" === '' "),i+=" ) "+H+" = ","shared"==e.opts.useDefaults?i+=" "+e.useDefault(U.default)+" ":i+=" "+JSON.stringify(U.default)+" ",i+="; "}}}var M=j.rules;if(M)for(var K,$=-1,G=M.length-1;$<G;)if(Y(K=M[$+=1])){var V=K.code(e,K.keyword,j.type);V&&(i+=" "+V+" ",m&&(v+="}"))}if(m&&(i+=" "+v+" ",v=""),j.type&&(i+=" } ",b&&b===j.type&&!w)){i+=" else { ";var Q;p=e.schemaPath+".type",l=e.errSchemaPath+"/type";(Q=Q||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { type: '",i+=k?""+b.join(","):""+b,i+="' } ",!1!==e.opts.messages&&(i+=" , message: 'should be ",i+=k?""+b.join(","):""+b,i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),i+=" } "):i+=" {} ";f=i;i=Q.pop(),!e.compositeRule&&m?e.async?i+=" throw new ValidationError(["+f+"]); ":i+=" validate.errors = ["+f+"]; return false; ":i+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } "}m&&(i+=" if (errors === ",i+=g?"0":"errs_"+s,i+=") { ",y+="}")}}function W(e){for(var t=e.rules,a=0;a<t.length;a++)if(Y(t[a]))return!0}function Y(t){return void 0!==e.schema[t.keyword]||t.implements&&function(t){for(var a=t.implements,i=0;i<a.length;i++)if(void 0!==e.schema[a[i]])return!0}(t)}return m&&(i+=" "+y+" "),g?(r?(i+=" if (errors === 0) return data;           ",i+=" else throw new ValidationError(vErrors); "):(i+=" validate.errors = vErrors; ",i+=" return errors === 0;       "),i+=" }; return validate;"):i+=" var "+d+" = errors === errs_"+s+";",i=e.util.cleanUpCode(i),g&&(i=e.util.finalCleanUpCode(i,r)),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s;var h="maximum"==t,d=h?"exclusiveMaximum":"exclusiveMinimum",f=e.schema[d],g=e.opts.$data&&f&&f.$data,v=h?"<":">",y=h?">":"<",b=void 0;if(g){var k=e.util.getData(f.$data,n,e.dataPathArr),w="exclusive"+o,j="exclType"+o,x="exclIsNumber"+o,E="' + "+(R="op"+o)+" + '";r+=" var schemaExcl"+o+" = "+k+"; ",r+=" var "+w+"; var "+j+" = typeof "+(k="schemaExcl"+o)+"; if ("+j+" != 'boolean' && "+j+" != 'undefined' && "+j+" != 'number') { ";var S;b=d;(S=S||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: '"+(b||"_exclusiveLimit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: {} ",!1!==e.opts.messages&&(r+=" , message: '"+d+" should be boolean' "),e.opts.verbose&&(r+=" , schema: validate.schema"+u+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var _=r;r=S.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+_+"]); ":r+=" validate.errors = ["+_+"]; return false; ":r+=" var err = "+_+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } else if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),r+=" "+j+" == 'number' ? ( ("+w+" = "+i+" === undefined || "+k+" "+v+"= "+i+") ? "+l+" "+y+"= "+k+" : "+l+" "+y+" "+i+" ) : ( ("+w+" = "+k+" === true) ? "+l+" "+y+"= "+i+" : "+l+" "+y+" "+i+" ) || "+l+" !== "+l+") { var op"+o+" = "+w+" ? '"+v+"' : '"+v+"='; ",void 0===s&&(b=d,c=e.errSchemaPath+"/"+d,i=k,m=g)}else{E=v;if((x="number"==typeof f)&&m){var R="'"+E+"'";r+=" if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),r+=" ( "+i+" === undefined || "+f+" "+v+"= "+i+" ? "+l+" "+y+"= "+f+" : "+l+" "+y+" "+i+" ) || "+l+" !== "+l+") { "}else{x&&void 0===s?(w=!0,b=d,c=e.errSchemaPath+"/"+d,i=f,y+="="):(x&&(i=Math[h?"min":"max"](f,s)),f===(!x||i)?(w=!0,b=d,c=e.errSchemaPath+"/"+d,y+="="):(w=!1,E+="="));R="'"+E+"'";r+=" if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),r+=" "+l+" "+y+" "+i+" || "+l+" !== "+l+") { "}}b=b||t,(S=S||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: '"+(b||"_limit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { comparison: "+R+", limit: "+i+", exclusive: "+w+" } ",!1!==e.opts.messages&&(r+=" , message: 'should be "+E+" ",r+=m?"' + "+i:i+"'"),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";_=r;return r=S.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+_+"]); ":r+=" validate.errors = ["+_+"]; return false; ":r+=" var err = "+_+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s,r+="if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),r+=" "+l+".length "+("maxItems"==t?">":"<")+" "+i+") { ";var h=t,d=d||[];d.push(r),r="",!1!==e.createErrors?(r+=" { keyword: '"+(h||"_limitItems")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { limit: "+i+" } ",!1!==e.opts.messages&&(r+=" , message: 'should NOT have ",r+="maxItems"==t?"more":"fewer",r+=" than ",r+=m?"' + "+i+" + '":""+s,r+=" items' "),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var f=r;return r=d.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+f+"]); ":r+=" validate.errors = ["+f+"]; return false; ":r+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+="} ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s;var h="maxLength"==t?">":"<";r+="if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),!1===e.opts.unicode?r+=" "+l+".length ":r+=" ucs2length("+l+") ",r+=" "+h+" "+i+") { ";var d=t,f=f||[];f.push(r),r="",!1!==e.createErrors?(r+=" { keyword: '"+(d||"_limitLength")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { limit: "+i+" } ",!1!==e.opts.messages&&(r+=" , message: 'should NOT be ",r+="maxLength"==t?"longer":"shorter",r+=" than ",r+=m?"' + "+i+" + '":""+s,r+=" characters' "),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var g=r;return r=f.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+g+"]); ":r+=" validate.errors = ["+g+"]; return false; ":r+=" var err = "+g+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+="} ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s,r+="if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'number') || "),r+=" Object.keys("+l+").length "+("maxProperties"==t?">":"<")+" "+i+") { ";var h=t,d=d||[];d.push(r),r="",!1!==e.createErrors?(r+=" { keyword: '"+(h||"_limitProperties")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { limit: "+i+" } ",!1!==e.opts.messages&&(r+=" , message: 'should NOT have ",r+="maxProperties"==t?"more":"fewer",r+=" than ",r+=m?"' + "+i+" + '":""+s,r+=" properties' "),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var f=r;return r=d.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+f+"]); ":r+=" validate.errors = ["+f+"]; return false; ":r+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+="} ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";var i=a(232),r=a(8),o=a(10);function n(e){var t=(e.path_prefix?e.path_prefix:"")+"/plugins/servlet";if(!e.host)throw new Error(o.NO_HOST_ERROR);if(!e.oauth.consumer_key)throw new Error(o.NO_CONSUMER_KEY_ERROR);if(!e.oauth.private_key)throw new Error(o.NO_PRIVATE_KEY_ERROR);var a=e.oauth.consumer_key,n=e.oauth.private_key,s=r.format({protocol:e.protocol?e.protocol:"https",hostname:e.host,port:e.port?e.port:null,pathname:t+"/oauth/request-token"}),u=r.format({protocol:e.protocol?e.protocol:"https",hostname:e.host,port:e.port?e.port:null,pathname:t+"/oauth/access-token"}),c=e.oauth.callback_url?e.oauth.callback_url:"oob";return new i.OAuth(s,u,a,n,"1.0",c,"RSA-SHA1")}t.getAuthorizeURL=function(e,t){var a=(e.path_prefix?e.path_prefix:"")+"/plugins/servlet",i=r.format({protocol:e.protocol?e.protocol:"https",hostname:e.host,port:e.port?e.port:null,pathname:a+"/oauth/authorize"});n(e).getOAuthRequestToken(function(e,a,r){return e?t(e):t(null,{url:i+"?oauth_token="+a,token:a,token_secret:r})})},t.swapRequestTokenWithAccessToken=function(e,t){if(!e.oauth.oauth_verifier)throw new Error(o.NO_VERIFIER_ERROR);var a=n(e),i=e.oauth.token,r=e.oauth.token_secret,s=e.oauth.oauth_verifier;a.getOAuthAccessToken(i,r,s,t)}},function(e,t,a){var i=a(1),r=a(233),o=a(17),n=a(19),s=a(8),u=a(24),c=a(84);t.OAuth=function(e,t,a,i,r,o,n,s,u){if(this._isEcho=!1,this._requestUrl=e,this._accessUrl=t,this._consumerKey=a,this._consumerSecret=this._encodeData(i),"RSA-SHA1"==n&&(this._privateKey=i),this._version=r,this._authorize_callback=void 0===o?"oob":o,"PLAINTEXT"!=n&&"HMAC-SHA1"!=n&&"RSA-SHA1"!=n)throw new Error("Un-supported signature method: "+n);this._signatureMethod=n,this._nonceSize=s||32,this._headers=u||{Accept:"*/*",Connection:"close","User-Agent":"Node authentication"},this._clientOptions=this._defaultClientOptions={requestTokenHttpMethod:"POST",accessTokenHttpMethod:"POST",followRedirects:!0},this._oauthParameterSeperator=","},t.OAuthEcho=function(e,t,a,i,r,o,n,s){if(this._isEcho=!0,this._realm=e,this._verifyCredentials=t,this._consumerKey=a,this._consumerSecret=this._encodeData(i),"RSA-SHA1"==o&&(this._privateKey=i),this._version=r,"PLAINTEXT"!=o&&"HMAC-SHA1"!=o&&"RSA-SHA1"!=o)throw new Error("Un-supported signature method: "+o);this._signatureMethod=o,this._nonceSize=n||32,this._headers=s||{Accept:"*/*",Connection:"close","User-Agent":"Node authentication"},this._oauthParameterSeperator=","},t.OAuthEcho.prototype=t.OAuth.prototype,t.OAuth.prototype._getTimestamp=function(){return Math.floor((new Date).getTime()/1e3)},t.OAuth.prototype._encodeData=function(e){return null==e||""==e?"":encodeURIComponent(e).replace(/\!/g,"%21").replace(/\'/g,"%27").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/\*/g,"%2A")},t.OAuth.prototype._decodeData=function(e){return null!=e&&(e=e.replace(/\+/g," ")),decodeURIComponent(e)},t.OAuth.prototype._getSignature=function(e,t,a,i){var r=this._createSignatureBase(e,t,a);return this._createSignature(r,i)},t.OAuth.prototype._normalizeUrl=function(e){var t=s.parse(e,!0),a="";return t.port&&("http:"==t.protocol&&"80"!=t.port||"https:"==t.protocol&&"443"!=t.port)&&(a=":"+t.port),t.pathname&&""!=t.pathname||(t.pathname="/"),t.protocol+"//"+t.hostname+a+t.pathname},t.OAuth.prototype._isParameterNameAnOAuthParameter=function(e){var t=e.match("^oauth_");return!(!t||"oauth_"!==t[0])},t.OAuth.prototype._buildAuthorizationHeaders=function(e){var t="OAuth ";this._isEcho&&(t+='realm="'+this._realm+'",');for(var a=0;a<e.length;a++)this._isParameterNameAnOAuthParameter(e[a][0])&&(t+=this._encodeData(e[a][0])+'="'+this._encodeData(e[a][1])+'"'+this._oauthParameterSeperator);return t=t.substring(0,t.length-this._oauthParameterSeperator.length)},t.OAuth.prototype._makeArrayOfArgumentsHash=function(e){var t=[];for(var a in e)if(e.hasOwnProperty(a)){var i=e[a];if(Array.isArray(i))for(var r=0;r<i.length;r++)t[t.length]=[a,i[r]];else t[t.length]=[a,i]}return t},t.OAuth.prototype._sortRequestParams=function(e){return e.sort(function(e,t){return e[0]==t[0]?e[1]<t[1]?-1:1:e[0]<t[0]?-1:1}),e},t.OAuth.prototype._normaliseRequestParams=function(e){for(var t=this._makeArrayOfArgumentsHash(e),a=0;a<t.length;a++)t[a][0]=this._encodeData(t[a][0]),t[a][1]=this._encodeData(t[a][1]);t=this._sortRequestParams(t);for(e="",a=0;a<t.length;a++)e+=t[a][0],e+="=",e+=t[a][1],a<t.length-1&&(e+="&");return e},t.OAuth.prototype._createSignatureBase=function(e,t,a){return t=this._encodeData(this._normalizeUrl(t)),a=this._encodeData(a),e.toUpperCase()+"&"+t+"&"+a},t.OAuth.prototype._createSignature=function(e,t){if(void 0===t)t="";else t=this._encodeData(t);var a=this._consumerSecret+"&"+t,o="";return"PLAINTEXT"==this._signatureMethod?o=a:"RSA-SHA1"==this._signatureMethod?(a=this._privateKey||"",o=i.createSign("RSA-SHA1").update(e).sign(a,"base64")):o=i.Hmac?i.createHmac("sha1",a).update(e).digest("base64"):r.HMACSHA1(a,e),o},t.OAuth.prototype.NONCE_CHARS=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","0","1","2","3","4","5","6","7","8","9"],t.OAuth.prototype._getNonce=function(e){for(var t,a=[],i=this.NONCE_CHARS,r=i.length,o=0;o<e;o++)t=Math.floor(Math.random()*r),a[o]=i[t];return a.join("")},t.OAuth.prototype._createClient=function(e,t,a,i,r,s){var u={host:t,port:e,path:i,method:a,headers:r};return(s?n:o).request(u)},t.OAuth.prototype._prepareParameters=function(e,t,a,i,r){var o,n={oauth_timestamp:this._getTimestamp(),oauth_nonce:this._getNonce(this._nonceSize),oauth_version:this._version,oauth_signature_method:this._signatureMethod,oauth_consumer_key:this._consumerKey};if(e&&(n.oauth_token=e),this._isEcho)o=this._getSignature("GET",this._verifyCredentials,this._normaliseRequestParams(n),t);else{if(r)for(var c in r)r.hasOwnProperty(c)&&(n[c]=r[c]);var p=s.parse(i,!1);if(p.query){var l,m=u.parse(p.query);for(var c in m){var h=m[c];if("object"==typeof h)for(l in h)n[c+"["+l+"]"]=h[l];else n[c]=h}}o=this._getSignature(a,i,this._normaliseRequestParams(n),t)}var d=this._sortRequestParams(this._makeArrayOfArgumentsHash(n));return d[d.length]=["oauth_signature",o],d},t.OAuth.prototype._performSecureRequest=function(e,t,a,i,r,o,n,p){var l=this._prepareParameters(e,t,a,i,r);n||(n="application/x-www-form-urlencoded");var m=s.parse(i,!1);"http:"!=m.protocol||m.port||(m.port=80),"https:"!=m.protocol||m.port||(m.port=443);var h,d,f={},g=this._buildAuthorizationHeaders(l);for(var v in this._isEcho?f["X-Verify-Credentials-Authorization"]=g:f.Authorization=g,f.Host=m.host,this._headers)this._headers.hasOwnProperty(v)&&(f[v]=this._headers[v]);for(var v in r)this._isParameterNameAnOAuthParameter(v)&&delete r[v];"POST"!=a&&"PUT"!=a||null!=o||null==r||(o=u.stringify(r).replace(/\!/g,"%21").replace(/\'/g,"%27").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/\*/g,"%2A")),o?Buffer.isBuffer(o)?f["Content-length"]=o.length:f["Content-length"]=Buffer.byteLength(o):f["Content-length"]=0,f["Content-Type"]=n,m.pathname&&""!=m.pathname||(m.pathname="/"),h=m.query?m.pathname+"?"+m.query:m.pathname,d="https:"==m.protocol?this._createClient(m.port,m.hostname,a,h,f,!0):this._createClient(m.port,m.hostname,a,h,f);var y=this._clientOptions;if(!p)return"POST"!=a&&"PUT"!=a||null==o||""==o||d.write(o),d;var b="",k=this,w=c.isAnEarlyCloseHost(m.hostname),j=!1,x=function(i){j||(j=!0,i.statusCode>=200&&i.statusCode<=299?p(null,b,i):(301==i.statusCode||302==i.statusCode)&&y.followRedirects&&i.headers&&i.headers.location?k._performSecureRequest(e,t,a,i.headers.location,r,o,n,p):p({statusCode:i.statusCode,data:b},b,i))};d.on("response",function(e){e.setEncoding("utf8"),e.on("data",function(e){b+=e}),e.on("end",function(){x(e)}),e.on("close",function(){w&&x(e)})}),d.on("error",function(e){j||(j=!0,p(e))}),"POST"!=a&&"PUT"!=a||null==o||""==o||d.write(o),d.end()},t.OAuth.prototype.setClientOptions=function(e){var t,a={},i=Object.prototype.hasOwnProperty;for(t in this._defaultClientOptions)i.call(e,t)?a[t]=e[t]:a[t]=this._defaultClientOptions[t];this._clientOptions=a},t.OAuth.prototype.getOAuthAccessToken=function(e,t,a,i){var r={};"function"==typeof a?i=a:r.oauth_verifier=a,this._performSecureRequest(e,t,this._clientOptions.accessTokenHttpMethod,this._accessUrl,r,null,null,function(e,t,a){if(e)i(e);else{var r=u.parse(t),o=r.oauth_token;delete r.oauth_token;var n=r.oauth_token_secret;delete r.oauth_token_secret,i(null,o,n,r)}})},t.OAuth.prototype.getProtectedResource=function(e,t,a,i,r){this._performSecureRequest(a,i,t,e,null,"",null,r)},t.OAuth.prototype.delete=function(e,t,a,i){return this._performSecureRequest(t,a,"DELETE",e,null,"",null,i)},t.OAuth.prototype.get=function(e,t,a,i){return this._performSecureRequest(t,a,"GET",e,null,"",null,i)},t.OAuth.prototype._putOrPost=function(e,t,a,i,r,o,n){var s=null;return"function"==typeof o&&(n=o,o=null),"string"==typeof r||Buffer.isBuffer(r)||(o="application/x-www-form-urlencoded",s=r,r=null),this._performSecureRequest(a,i,e,t,s,r,o,n)},t.OAuth.prototype.put=function(e,t,a,i,r,o){return this._putOrPost("PUT",e,t,a,i,r,o)},t.OAuth.prototype.post=function(e,t,a,i,r,o){return this._putOrPost("POST",e,t,a,i,r,o)},t.OAuth.prototype.getOAuthRequestToken=function(e,t){"function"==typeof e&&(t=e,e={}),this._authorize_callback&&(e.oauth_callback=this._authorize_callback),this._performSecureRequest(null,null,this._clientOptions.requestTokenHttpMethod,this._requestUrl,e,null,null,function(e,a,i){if(e)t(e);else{var r=u.parse(a),o=r.oauth_token,n=r.oauth_token_secret;delete r.oauth_token,delete r.oauth_token_secret,t(null,o,n,r)}})},t.OAuth.prototype.signUrl=function(e,t,a,i){if(void 0===i)i="GET";for(var r=this._prepareParameters(t,a,i,e,{}),o=s.parse(e,!1),n="",u=0;u<r.length;u++)n+=r[u][0]+"="+this._encodeData(r[u][1])+"&";return n=n.substring(0,n.length-1),o.protocol+"//"+o.host+o.pathname+"?"+n},t.OAuth.prototype.authHeader=function(e,t,a,i){if(void 0===i)i="GET";var r=this._prepareParameters(t,a,i,e,{});return this._buildAuthorizationHeaders(r)}},function(e,t){e.exports.isAnEarlyCloseHost=function(e){return e&&e.match(".*google(apis)?.com$")}},function(e,t,a){"use strict";var i=a(8),r=a(93),o=a(207),n=a(208),s=a(209),u=a(210),c=a(211),p=a(212),l=a(213),m=a(214),h=a(215),d=a(216),f=a(10),g=a(217),v=a(218),y=a(219),b=a(220),k=a(221),w=a(222),j=a(223),x=a(224),E=a(225),S=a(226),_=a(227),R=a(228),A=a(229),C=a(230),q=a(231),O=a(82),P=a(235),F=a(236),z=a(237),T=a(238),I=a(239),D=a(240),B=a(241),L=a(242),U=a(243),N=a(244),H=a(245),M=a(246),K=a(247),$=a(248),G=a(249),V=a(250),Q=a(251),W=a(252),Y=a(253),Z=a(254),J=a(255),X=a(256),ee=a(257),te=a(258),ae=e.exports=function(e){if(!e.host)throw new Error(f.NO_HOST_ERROR);if(this.host=e.host,this.protocol=e.protocol?e.protocol:"https",this.path_prefix=e.path_prefix?e.path_prefix:"/",this.port=e.port,this.apiVersion=2,this.agileApiVersion="1.0",this.authApiVersion="1",this.webhookApiVersion="1.0",this.promise=e.promise||Promise,this.requestLib=e.request||r,this.rejectUnauthorized=e.rejectUnauthorized,e.oauth){if(!e.oauth.consumer_key)throw new Error(f.NO_CONSUMER_KEY_ERROR);if(!e.oauth.private_key)throw new Error(f.NO_PRIVATE_KEY_ERROR);if(!e.oauth.token)throw new Error(f.NO_OAUTH_TOKEN_ERROR);if(!e.oauth.token_secret)throw new Error(f.NO_OAUTH_TOKEN_SECRET_ERROR);this.oauthConfig=e.oauth,this.oauthConfig.signature_method="RSA-SHA1"}else if(e.basic_auth)if(e.basic_auth.base64)this.basic_auth={base64:e.basic_auth.base64};else{if(!e.basic_auth.username)throw new Error(f.NO_USERNAME_ERROR);if(!e.basic_auth.password)throw new Error(f.NO_PASSWORD_ERROR);this.basic_auth={user:e.basic_auth.username,pass:e.basic_auth.password}}e.cookie_jar&&(this.cookie_jar=e.cookie_jar),this.applicationProperties=new o(this),this.attachment=new n(this),this.auditing=new s(this),this.auth=new u(this),this.avatar=new c(this),this.board=new p(this),this.comment=new l(this),this.component=new m(this),this.customFieldOption=new h(this),this.dashboard=new d(this),this.field=new g(this),this.filter=new v(this),this.group=new y(this),this.groupUserPicker=new b(this),this.groups=new k(this),this.issue=new w(this),this.issueLink=new j(this),this.issueLinkType=new x(this),this.issueType=new E(this),this.jql=new S(this),this.licenseRole=new _(this),this.licenseValidator=new R(this),this.myPermissions=new A(this),this.myPreferences=new C(this),this.myself=new q(this),this.password=new P(this),this.permissions=new F(this),this.permissionScheme=new z(this),this.priority=new T(this),this.project=new I(this),this.projectCategory=new D(this),this.projectValidate=new B(this),this.reindex=new L(this),this.resolution=new U(this),this.roles=new N(this),this.screens=new H(this),this.search=new M(this),this.securityLevel=new K(this),this.serverInfo=new $(this),this.settings=new G(this),this.sprint=new V(this),this.status=new Q(this),this.statusCategory=new W(this),this.user=new Y(this),this.version=new Z(this),this.webhook=new J(this),this.workflow=new X(this),this.workflowScheme=new ee(this),this.worklog=new te(this)};(function(){this.buildURL=function(e){var t=this.path_prefix+"rest/api/",a=this.apiVersion,r=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+a+e});return decodeURIComponent(r)},this.buildAgileURL=function(e){var t=this.path_prefix+"rest/agile/",a=this.agileApiVersion,r=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+a+e});return decodeURIComponent(r)},this.buildAuthURL=function(e){var t=this.path_prefix+"rest/auth/",a=this.authApiVersion,r=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+a+e});return decodeURIComponent(r)},this.buildWebhookURL=function(e){var t=this.path_prefix+"rest/webhooks/",a=this.webhookApiVersion,r=i.format({protocol:this.protocol,hostname:this.host,port:this.port,pathname:t+a+e});return decodeURIComponent(r)},this.makeRequest=function(e,t,a){let i=this.requestLib;if(e.rejectUnauthorized=this.rejectUnauthorized,this.oauthConfig?e.oauth=this.oauthConfig:this.basic_auth&&(this.basic_auth.base64?(e.headers||(e.headers={}),e.headers.Authorization="Basic "+this.basic_auth.base64):e.auth=this.basic_auth),this.cookie_jar&&(e.jar=this.cookie_jar),t)i(e,function(e,i,r){if(e||2!=i.statusCode.toString()[0])return t(e||r,null,i);if("string"==typeof r)try{r=JSON.parse(r)}catch(e){return t(e,null,i)}return t(null,a||r,i)});else if(this.promise)return new this.promise(function(t,a){var r=i(e),o=null;r.on("request",function(e){o=e}),r.on("response",function(i){var r="2"!==i.statusCode.toString()[0],n=[],s=n.push.bind(n);i.on("data",s),i.on("end",function(){var s=n.join("");if("["===s[0]||"{"===s[0])try{s=JSON.parse(s)}catch(e){}if(r)return i.body=s,void(e.debug?a({result:JSON.stringify(i),debug:{options:e,request:{headers:o._headers},response:{headers:i.headers}}}):a(JSON.stringify(i)));e.debug?t({result:s,debug:{options:e,request:{headers:o._headers},response:{headers:i.headers}}}):t(s)})}),r.on("error",a)})}}).call(ae.prototype),ae.oauth_util=a(82),t.oauth_util=O},function(e,t){var a=1/0,i="[object Symbol]",r=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,o=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,n="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",s="["+n+"]",u="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",c="\\d+",p="[\\u2700-\\u27bf]",l="[a-z\\xdf-\\xf6\\xf8-\\xff]",m="[^\\ud800-\\udfff"+n+c+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",h="(?:\\ud83c[\\udde6-\\uddff]){2}",d="[\\ud800-\\udbff][\\udc00-\\udfff]",f="[A-Z\\xc0-\\xd6\\xd8-\\xde]",g="(?:"+l+"|"+m+")",v="(?:"+f+"|"+m+")",y="(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?",b="[\\ufe0e\\ufe0f]?"+y+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",h,d].join("|")+")[\\ufe0e\\ufe0f]?"+y+")*"),k="(?:"+[p,h,d].join("|")+")"+b,w=RegExp("['’]","g"),j=RegExp(u,"g"),x=RegExp([f+"?"+l+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[s,f,"$"].join("|")+")",v+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[s,f+g,"$"].join("|")+")",f+"?"+g+"+(?:['’](?:d|ll|m|re|s|t|ve))?",f+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",c,k].join("|"),"g"),E=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,S="object"==typeof global&&global&&global.Object===Object&&global,_="object"==typeof self&&self&&self.Object===Object&&self,R=S||_||Function("return this")();var A,C=(A={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==A?void 0:A[e]});var q=Object.prototype.toString,O=R.Symbol,P=O?O.prototype:void 0,F=P?P.toString:void 0;function z(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&q.call(e)==i}(e))return F?F.call(e):"";var t=e+"";return"0"==t&&1/e==-a?"-0":t}function T(e){return null==e?"":z(e)}var I,D=(I=function(e,t,a){return e+(a?"_":"")+t.toLowerCase()},function(e){return function(e,t,a,i){var r=-1,o=e?e.length:0;for(i&&o&&(a=e[++r]);++r<o;)a=t(a,e[r],r,e);return a}(function(e,t,a){return e=T(e),void 0===(t=a?void 0:t)?function(e){return E.test(e)}(e)?function(e){return e.match(x)||[]}(e):function(e){return e.match(r)||[]}(e):e.match(t)||[]}(function(e){return(e=T(e))&&e.replace(o,C).replace(j,"")}(e).replace(w,"")),I,"")});e.exports=D},function(e,t){var a=1/0,i="[object Symbol]",r=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,o=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,n="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",s="[\\ud800-\\udfff]",u="["+n+"]",c="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",p="\\d+",l="[\\u2700-\\u27bf]",m="[a-z\\xdf-\\xf6\\xf8-\\xff]",h="[^\\ud800-\\udfff"+n+p+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",d="\\ud83c[\\udffb-\\udfff]",f="[^\\ud800-\\udfff]",g="(?:\\ud83c[\\udde6-\\uddff]){2}",v="[\\ud800-\\udbff][\\udc00-\\udfff]",y="[A-Z\\xc0-\\xd6\\xd8-\\xde]",b="(?:"+m+"|"+h+")",k="(?:"+y+"|"+h+")",w="(?:"+c+"|"+d+")"+"?",j="[\\ufe0e\\ufe0f]?"+w+("(?:\\u200d(?:"+[f,g,v].join("|")+")[\\ufe0e\\ufe0f]?"+w+")*"),x="(?:"+[l,g,v].join("|")+")"+j,E="(?:"+[f+c+"?",c,g,v,s].join("|")+")",S=RegExp("['’]","g"),_=RegExp(c,"g"),R=RegExp(d+"(?="+d+")|"+E+j,"g"),A=RegExp([y+"?"+m+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[u,y,"$"].join("|")+")",k+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[u,y+b,"$"].join("|")+")",y+"?"+b+"+(?:['’](?:d|ll|m|re|s|t|ve))?",y+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",p,x].join("|"),"g"),C=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),q=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,O="object"==typeof global&&global&&global.Object===Object&&global,P="object"==typeof self&&self&&self.Object===Object&&self,F=O||P||Function("return this")();var z,T=(z={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==z?void 0:z[e]});function I(e){return C.test(e)}function D(e){return I(e)?function(e){return e.match(R)||[]}(e):function(e){return e.split("")}(e)}var B=Object.prototype.toString,L=F.Symbol,U=L?L.prototype:void 0,N=U?U.toString:void 0;function H(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&B.call(e)==i}(e))return N?N.call(e):"";var t=e+"";return"0"==t&&1/e==-a?"-0":t}function M(e,t,a){var i=e.length;return a=void 0===a?i:a,!t&&a>=i?e:function(e,t,a){var i=-1,r=e.length;t<0&&(t=-t>r?0:r+t),(a=a>r?r:a)<0&&(a+=r),r=t>a?0:a-t>>>0,t>>>=0;for(var o=Array(r);++i<r;)o[i]=e[i+t];return o}(e,t,a)}function K(e){return null==e?"":H(e)}var $,G=($=function(e,t,a){return t=t.toLowerCase(),e+(a?Q(K(t).toLowerCase()):t)},function(e){return function(e,t,a,i){var r=-1,o=e?e.length:0;for(i&&o&&(a=e[++r]);++r<o;)a=t(a,e[r],r,e);return a}(function(e,t,a){return e=K(e),void 0===(t=a?void 0:t)?function(e){return q.test(e)}(e)?function(e){return e.match(A)||[]}(e):function(e){return e.match(r)||[]}(e):e.match(t)||[]}(function(e){return(e=K(e))&&e.replace(o,T).replace(_,"")}(e).replace(S,"")),$,"")});var V,Q=(V="toUpperCase",function(e){var t=I(e=K(e))?D(e):void 0,a=t?t[0]:e.charAt(0),i=t?M(t,1).join(""):e.slice(1);return a[V]()+i});e.exports=G},function(e,t){var a=1/0,i="[object Symbol]",r=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,o=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,n="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",s="["+n+"]",u="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",c="\\d+",p="[\\u2700-\\u27bf]",l="[a-z\\xdf-\\xf6\\xf8-\\xff]",m="[^\\ud800-\\udfff"+n+c+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",h="(?:\\ud83c[\\udde6-\\uddff]){2}",d="[\\ud800-\\udbff][\\udc00-\\udfff]",f="[A-Z\\xc0-\\xd6\\xd8-\\xde]",g="(?:"+l+"|"+m+")",v="(?:"+f+"|"+m+")",y="(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?",b="[\\ufe0e\\ufe0f]?"+y+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",h,d].join("|")+")[\\ufe0e\\ufe0f]?"+y+")*"),k="(?:"+[p,h,d].join("|")+")"+b,w=RegExp("['’]","g"),j=RegExp(u,"g"),x=RegExp([f+"?"+l+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[s,f,"$"].join("|")+")",v+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[s,f+g,"$"].join("|")+")",f+"?"+g+"+(?:['’](?:d|ll|m|re|s|t|ve))?",f+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",c,k].join("|"),"g"),E=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,S="object"==typeof global&&global&&global.Object===Object&&global,_="object"==typeof self&&self&&self.Object===Object&&self,R=S||_||Function("return this")();var A,C=(A={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==A?void 0:A[e]});var q=Object.prototype.toString,O=R.Symbol,P=O?O.prototype:void 0,F=P?P.toString:void 0;function z(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&q.call(e)==i}(e))return F?F.call(e):"";var t=e+"";return"0"==t&&1/e==-a?"-0":t}function T(e){return null==e?"":z(e)}var I,D=(I=function(e,t,a){return e+(a?"-":"")+t.toLowerCase()},function(e){return function(e,t,a,i){var r=-1,o=e?e.length:0;for(i&&o&&(a=e[++r]);++r<o;)a=t(a,e[r],r,e);return a}(function(e,t,a){return e=T(e),void 0===(t=a?void 0:t)?function(e){return E.test(e)}(e)?function(e){return e.match(x)||[]}(e):function(e){return e.match(r)||[]}(e):e.match(t)||[]}(function(e){return(e=T(e))&&e.replace(o,C).replace(j,"")}(e).replace(w,"")),I,"")});e.exports=D},function(e,t){e.exports=require("os")},function(e,t){e.exports=require("child_process")},function(e,t){e.exports=require("readline")},function(e,t,a){var i=a(16),r=a(13),o=parseInt("0777",8);function n(e,t,a,s){"function"==typeof t?(a=t,t={}):t&&"object"==typeof t||(t={mode:t});var u=t.mode,c=t.fs||r;void 0===u&&(u=o&~process.umask()),s||(s=null);var p=a||function(){};e=i.resolve(e),c.mkdir(e,u,function(a){if(!a)return p(null,s=s||e);switch(a.code){case"ENOENT":n(i.dirname(e),t,function(a,i){a?p(a,i):n(e,t,p,i)});break;default:c.stat(e,function(e,t){e||!t.isDirectory()?p(a,s):p(null,s)})}})}e.exports=n.mkdirp=n.mkdirP=n,n.sync=function e(t,a,n){a&&"object"==typeof a||(a={mode:a});var s=a.mode,u=a.fs||r;void 0===s&&(s=o&~process.umask()),n||(n=null),t=i.resolve(t);try{u.mkdirSync(t,s),n=n||t}catch(r){switch(r.code){case"ENOENT":n=e(i.dirname(t),a,n),e(t,a,n);break;default:var c;try{c=u.statSync(t)}catch(e){throw r}if(!c.isDirectory())throw r}}return n}},function(e,t,a){"use strict";var i=a(35),r=a(49),o=a(37).paramsHaveRequestBody;function n(e,t,a){"function"==typeof t&&(a=t);var r={};return"object"==typeof t?i(r,t,{uri:e}):i(r,"string"==typeof e?{uri:e}:e),r.callback=a||r.callback,r}function s(e,t,a){if(void 0===e)throw new Error("undefined is not a valid uri or options object.");var i=n(e,t,a);if("HEAD"===i.method&&o(i))throw new Error("HTTP HEAD requests MUST NOT include a request body.");return new s.Request(i)}function u(e){var t=e.toUpperCase();return function(e,a,i){var r=n(e,a,i);return r.method=t,s(r,r.callback)}}function c(e,t,a,r){return function(o,s,u){var c=n(o,s,u),p={};return i(!0,p,t,c),p.pool=c.pool||t.pool,r&&(p.method=r.toUpperCase()),"function"==typeof a&&(e=a),e(p,p.callback)}}s.get=u("get"),s.head=u("head"),s.options=u("options"),s.post=u("post"),s.put=u("put"),s.patch=u("patch"),s.del=u("delete"),s.delete=u("delete"),s.jar=function(e){return r.jar(e)},s.cookie=function(e){return r.parse(e)},s.defaults=function(e,t){var a=this;"function"==typeof(e=e||{})&&(t=e,e={});var i=c(a,e,t);return["get","head","post","put","patch","del","delete"].forEach(function(r){i[r]=c(a[r],e,t,r)}),i.cookie=c(a.cookie,e,t),i.jar=a.jar,i.defaults=a.defaults,i},s.forever=function(e,t){var a={};return t&&i(a,t),e&&(a.agentOptions=e),a.forever=!0,s.defaults(a)},e.exports=s,s.Request=a(100),s.initParams=n,Object.defineProperty(s,"debug",{enumerable:!0,get:function(){return s.Request.debug},set:function(e){s.Request.debug=e}})},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i,r=a(36),o=a(8).parse,n=a(3),s=a(50),u=a(52).Store,c=a(97).MemoryCookieStore,p=a(54).pathMatch,l=a(98).version;try{i=a(51)}catch(e){console.warn("tough-cookie: can't load punycode; won't use punycode for domain normalization")}var m=/^[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]+$/,h=/[\x00-\x1F]/,d=["\n","\r","\0"],f=/[\x20-\x3A\x3C-\x7E]+/,g=/[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/,v={jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11},y=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],b=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],k=2147483647e3;function w(e,t,a,i){for(var r=0;r<e.length;){var o=e.charCodeAt(r);if(o<=47||o>=58)break;r++}return r<t||r>a?null:i||r==e.length?parseInt(e.substr(0,r),10):null}function j(e){var t=e.split(":"),a=[0,0,0];if(3!==t.length)return null;for(var i=0;i<3;i++){var r=2==i,o=w(t[i],1,2,r);if(null===o)return null;a[i]=o}return a}function x(e){e=String(e).substr(0,3).toLowerCase();var t=v[e];return t>=0?t:null}function E(e){if(e){var t=e.split(g);if(t){for(var a=null,i=null,r=null,o=null,n=null,s=null,u=0;u<t.length;u++){var c,p=t[u].trim();if(p.length)null===r&&(c=j(p))?(a=c[0],i=c[1],r=c[2]):null!==o||null===(c=w(p,1,2,!0))?null!==n||null===(c=x(p))?null===s&&null!==(c=w(p,2,4,!0))&&((s=c)>=70&&s<=99?s+=1900:s>=0&&s<=69&&(s+=2e3)):n=c:o=c}if(!(null===o||null===n||null===s||null===r||o<1||o>31||s<1601||a>23||i>59||r>59))return new Date(Date.UTC(s,n,o,a,i,r))}}}function S(e){var t=e.getUTCDate();t=t>=10?t:"0"+t;var a=e.getUTCHours();a=a>=10?a:"0"+a;var i=e.getUTCMinutes();i=i>=10?i:"0"+i;var r=e.getUTCSeconds();return r=r>=10?r:"0"+r,b[e.getUTCDay()]+", "+t+" "+y[e.getUTCMonth()]+" "+e.getUTCFullYear()+" "+a+":"+i+":"+r+" GMT"}function _(e){return null==e?null:(e=e.trim().replace(/^\./,""),i&&/[^\u0001-\u007f]/.test(e)&&(e=i.toASCII(e)),e.toLowerCase())}function R(e,t,a){if(null==e||null==t)return null;if(!1!==a&&(e=_(e),t=_(t)),e==t)return!0;if(r.isIP(e))return!1;var i=e.indexOf(t);return!(i<=0)&&(e.length===t.length+i&&"."===e.substr(i-1,1))}function A(e){if(!e||"/"!==e.substr(0,1))return"/";if("/"===e)return e;var t=e.lastIndexOf("/");return 0===t?"/":e.slice(0,t)}function C(e,t){var a,i,r=(e=function(e){for(var t=0;t<d.length;t++){var a=e.indexOf(d[t]);-1!==a&&(e=e.substr(0,a))}return e}(e)).indexOf("=");if(t)0===r&&(r=(e=e.substr(1)).indexOf("="));else if(r<=0)return;if(r<=0?(a="",i=e.trim()):(a=e.substr(0,r).trim(),i=e.substr(r+1).trim()),!h.test(a)&&!h.test(i)){var o=new T;return o.key=a,o.value=i,o}}function q(e,t){t&&"object"==typeof t||(t={});var a=(e=e.trim()).indexOf(";"),i=C(-1===a?e:e.substr(0,a),!!t.loose);if(i){if(-1===a)return i;var r=e.slice(a+1).trim();if(0===r.length)return i;for(var o=r.split(";");o.length;){var n=o.shift().trim();if(0!==n.length){var s,u,c=n.indexOf("=");switch(-1===c?(s=n,u=null):(s=n.substr(0,c),u=n.substr(c+1)),s=s.trim().toLowerCase(),u&&(u=u.trim()),s){case"expires":if(u){var p=E(u);p&&(i.expires=p)}break;case"max-age":if(u&&/^-?[0-9]+$/.test(u)){var l=parseInt(u,10);i.setMaxAge(l)}break;case"domain":if(u){var m=u.trim().replace(/^\./,"");m&&(i.domain=m.toLowerCase())}break;case"path":i.path=u&&"/"===u[0]?u:null;break;case"secure":i.secure=!0;break;case"httponly":i.httpOnly=!0;break;default:i.extensions=i.extensions||[],i.extensions.push(n)}}}return i}}function O(e){var t;try{t=JSON.parse(e)}catch(e){return e}return t}function P(e){if(!e)return null;var t;if("string"==typeof e){if((t=O(e))instanceof Error)return null}else t=e;for(var a=new T,i=0;i<T.serializableProperties.length;i++){var r=T.serializableProperties[i];void 0!==t[r]&&t[r]!==T.prototype[r]&&("expires"===r||"creation"===r||"lastAccessed"===r?null===t[r]?a[r]=null:a[r]="Infinity"==t[r]?"Infinity":new Date(t[r]):a[r]=t[r])}return a}function F(e,t){var a=0,i=e.path?e.path.length:0;return 0!==(a=(t.path?t.path.length:0)-i)?a:0!==(a=(e.creation?e.creation.getTime():k)-(t.creation?t.creation.getTime():k))?a:a=e.creationIndex-t.creationIndex}function z(e){if(e instanceof Object)return e;try{e=decodeURI(e)}catch(e){}return o(e)}function T(e){e=e||{},Object.keys(e).forEach(function(t){T.prototype.hasOwnProperty(t)&&T.prototype[t]!==e[t]&&"_"!==t.substr(0,1)&&(this[t]=e[t])},this),this.creation=this.creation||new Date,Object.defineProperty(this,"creationIndex",{configurable:!1,enumerable:!1,writable:!0,value:++T.cookiesCreated})}function I(e,t){"boolean"==typeof t?t={rejectPublicSuffixes:t}:null==t&&(t={}),null!=t.rejectPublicSuffixes&&(this.rejectPublicSuffixes=t.rejectPublicSuffixes),null!=t.looseMode&&(this.enableLooseMode=t.looseMode),e||(e=new c),this.store=e}T.cookiesCreated=0,T.parse=q,T.fromJSON=P,T.prototype.key="",T.prototype.value="",T.prototype.expires="Infinity",T.prototype.maxAge=null,T.prototype.domain=null,T.prototype.path=null,T.prototype.secure=!1,T.prototype.httpOnly=!1,T.prototype.extensions=null,T.prototype.hostOnly=null,T.prototype.pathIsDefault=null,T.prototype.creation=null,T.prototype.lastAccessed=null,Object.defineProperty(T.prototype,"creationIndex",{configurable:!0,enumerable:!1,writable:!0,value:0}),T.serializableProperties=Object.keys(T.prototype).filter(function(e){return!(T.prototype[e]instanceof Function||"creationIndex"===e||"_"===e.substr(0,1))}),T.prototype.inspect=function(){var e=Date.now();return'Cookie="'+this.toString()+"; hostOnly="+(null!=this.hostOnly?this.hostOnly:"?")+"; aAge="+(this.lastAccessed?e-this.lastAccessed.getTime()+"ms":"?")+"; cAge="+(this.creation?e-this.creation.getTime()+"ms":"?")+'"'},n.inspect.custom&&(T.prototype[n.inspect.custom]=T.prototype.inspect),T.prototype.toJSON=function(){for(var e={},t=T.serializableProperties,a=0;a<t.length;a++){var i=t[a];this[i]!==T.prototype[i]&&("expires"===i||"creation"===i||"lastAccessed"===i?null===this[i]?e[i]=null:e[i]="Infinity"==this[i]?"Infinity":this[i].toISOString():"maxAge"===i?null!==this[i]&&(e[i]=this[i]==1/0||this[i]==-1/0?this[i].toString():this[i]):this[i]!==T.prototype[i]&&(e[i]=this[i]))}return e},T.prototype.clone=function(){return P(this.toJSON())},T.prototype.validate=function(){if(!m.test(this.value))return!1;if(!(this.expires==1/0||this.expires instanceof Date||E(this.expires)))return!1;if(null!=this.maxAge&&this.maxAge<=0)return!1;if(null!=this.path&&!f.test(this.path))return!1;var e=this.cdomain();if(e){if(e.match(/\.$/))return!1;if(null==s.getPublicSuffix(e))return!1}return!0},T.prototype.setExpires=function(e){e instanceof Date?this.expires=e:this.expires=E(e)||"Infinity"},T.prototype.setMaxAge=function(e){this.maxAge=e===1/0||e===-1/0?e.toString():e},T.prototype.cookieString=function(){var e=this.value;return null==e&&(e=""),""===this.key?e:this.key+"="+e},T.prototype.toString=function(){var e=this.cookieString();return this.expires!=1/0&&(this.expires instanceof Date?e+="; Expires="+S(this.expires):e+="; Expires="+this.expires),null!=this.maxAge&&this.maxAge!=1/0&&(e+="; Max-Age="+this.maxAge),this.domain&&!this.hostOnly&&(e+="; Domain="+this.domain),this.path&&(e+="; Path="+this.path),this.secure&&(e+="; Secure"),this.httpOnly&&(e+="; HttpOnly"),this.extensions&&this.extensions.forEach(function(t){e+="; "+t}),e},T.prototype.TTL=function(e){if(null!=this.maxAge)return this.maxAge<=0?0:1e3*this.maxAge;var t=this.expires;return t!=1/0?(t instanceof Date||(t=E(t)||1/0),t==1/0?1/0:t.getTime()-(e||Date.now())):1/0},T.prototype.expiryTime=function(e){if(null!=this.maxAge){var t=e||this.creation||new Date,a=this.maxAge<=0?-1/0:1e3*this.maxAge;return t.getTime()+a}return this.expires==1/0?1/0:this.expires.getTime()},T.prototype.expiryDate=function(e){var t=this.expiryTime(e);return t==1/0?new Date(k):t==-1/0?new Date(0):new Date(t)},T.prototype.isPersistent=function(){return null!=this.maxAge||this.expires!=1/0},T.prototype.cdomain=T.prototype.canonicalizedDomain=function(){return null==this.domain?null:_(this.domain)},I.prototype.store=null,I.prototype.rejectPublicSuffixes=!0,I.prototype.enableLooseMode=!1;var D=[];D.push("setCookie"),I.prototype.setCookie=function(e,t,a,i){var r,o=z(t);a instanceof Function&&(i=a,a={});var n=_(o.hostname),u=this.enableLooseMode;if(null!=a.loose&&(u=a.loose),e instanceof T||(e=T.parse(e,{loose:u})),!e)return r=new Error("Cookie failed to parse"),i(a.ignoreError?null:r);var c=a.now||new Date;if(this.rejectPublicSuffixes&&e.domain&&null==s.getPublicSuffix(e.cdomain()))return r=new Error("Cookie has domain set to a public suffix"),i(a.ignoreError?null:r);if(e.domain){if(!R(n,e.cdomain(),!1))return r=new Error("Cookie not in this host's domain. Cookie:"+e.cdomain()+" Request:"+n),i(a.ignoreError?null:r);null==e.hostOnly&&(e.hostOnly=!1)}else e.hostOnly=!0,e.domain=n;if(e.path&&"/"===e.path[0]||(e.path=A(o.pathname),e.pathIsDefault=!0),!1===a.http&&e.httpOnly)return r=new Error("Cookie is HttpOnly and this isn't an HTTP API"),i(a.ignoreError?null:r);var p=this.store;p.updateCookie||(p.updateCookie=function(e,t,a){this.putCookie(t,a)}),p.findCookie(e.domain,e.path,e.key,function(t,r){if(t)return i(t);var o=function(t){if(t)return i(t);i(null,e)};if(r){if(!1===a.http&&r.httpOnly)return t=new Error("old Cookie is HttpOnly and this isn't an HTTP API"),i(a.ignoreError?null:t);e.creation=r.creation,e.creationIndex=r.creationIndex,e.lastAccessed=c,p.updateCookie(r,e,o)}else e.creation=e.lastAccessed=c,p.putCookie(e,o)})},D.push("getCookies"),I.prototype.getCookies=function(e,t,a){var i=z(e);t instanceof Function&&(a=t,t={});var r=_(i.hostname),o=i.pathname||"/",n=t.secure;null!=n||!i.protocol||"https:"!=i.protocol&&"wss:"!=i.protocol||(n=!0);var s=t.http;null==s&&(s=!0);var u=t.now||Date.now(),c=!1!==t.expire,l=!!t.allPaths,m=this.store;function h(e){if(e.hostOnly){if(e.domain!=r)return!1}else if(!R(r,e.domain,!1))return!1;return!(!l&&!p(o,e.path))&&(!(e.secure&&!n)&&(!(e.httpOnly&&!s)&&(!(c&&e.expiryTime()<=u)||(m.removeCookie(e.domain,e.path,e.key,function(){}),!1))))}m.findCookies(r,l?null:o,function(e,i){if(e)return a(e);i=i.filter(h),!1!==t.sort&&(i=i.sort(F));var r=new Date;i.forEach(function(e){e.lastAccessed=r}),a(null,i)})},D.push("getCookieString"),I.prototype.getCookieString=function(){var e=Array.prototype.slice.call(arguments,0),t=e.pop();e.push(function(e,a){e?t(e):t(null,a.sort(F).map(function(e){return e.cookieString()}).join("; "))}),this.getCookies.apply(this,e)},D.push("getSetCookieStrings"),I.prototype.getSetCookieStrings=function(){var e=Array.prototype.slice.call(arguments,0),t=e.pop();e.push(function(e,a){e?t(e):t(null,a.map(function(e){return e.toString()}))}),this.getCookies.apply(this,e)},D.push("serialize"),I.prototype.serialize=function(e){var t=this.store.constructor.name;"Object"===t&&(t=null);var a={version:"tough-cookie@"+l,storeType:t,rejectPublicSuffixes:!!this.rejectPublicSuffixes,cookies:[]};if(!this.store.getAllCookies||"function"!=typeof this.store.getAllCookies)return e(new Error("store does not support getAllCookies and cannot be serialized"));this.store.getAllCookies(function(t,i){return t?e(t):(a.cookies=i.map(function(e){return delete(e=e instanceof T?e.toJSON():e).creationIndex,e}),e(null,a))})},I.prototype.toJSON=function(){return this.serializeSync()},D.push("_importCookies"),I.prototype._importCookies=function(e,t){var a=this,i=e.cookies;if(!i||!Array.isArray(i))return t(new Error("serialized jar has no cookies array"));i=i.slice(),function e(r){if(r)return t(r);if(!i.length)return t(r,a);var o;try{o=P(i.shift())}catch(e){return t(e)}if(null===o)return e(null);a.store.putCookie(o,e)}()},I.deserialize=function(e,t,a){var i;if(3!==arguments.length&&(a=t,t=null),"string"==typeof e){if((i=O(e))instanceof Error)return a(i)}else i=e;var r=new I(t,i.rejectPublicSuffixes);r._importCookies(i,function(e){if(e)return a(e);a(null,r)})},I.deserializeSync=function(e,t){var a="string"==typeof e?JSON.parse(e):e,i=new I(t,a.rejectPublicSuffixes);if(!i.store.synchronous)throw new Error("CookieJar store is not synchronous; use async API instead.");return i._importCookiesSync(a),i},I.fromJSON=I.deserializeSync,D.push("clone"),I.prototype.clone=function(e,t){1===arguments.length&&(t=e,e=null),this.serialize(function(a,i){if(a)return t(a);I.deserialize(e,i,t)})},D.forEach(function(e){I.prototype[e+"Sync"]=function(e){return function(){if(!this.store.synchronous)throw new Error("CookieJar store is not synchronous; use async API instead.");var t,a,i=Array.prototype.slice.call(arguments);if(i.push(function(e,i){t=e,a=i}),this[e].apply(this,i),t)throw t;return a}}(e)}),t.CookieJar=I,t.Cookie=T,t.Store=u,t.MemoryCookieStore=c,t.parseDate=E,t.formatDate=S,t.parse=q,t.fromJSON=P,t.domainMatch=R,t.defaultPath=A,t.pathMatch=p,t.getPublicSuffix=s.getPublicSuffix,t.cookieCompare=F,t.permuteDomain=a(53).permuteDomain,t.permutePath=function(e){if("/"===e)return["/"];e.lastIndexOf("/")===e.length-1&&(e=e.substr(0,e.length-1));for(var t=[e];e.length>1;){var a=e.lastIndexOf("/");if(0===a)break;e=e.substr(0,a),t.push(e)}return t.push("/"),t},t.canonicalDomain=_},function(e,t,a){"use strict";var i=a(51),r={};r.rules=a(96).map(function(e){return{rule:e,suffix:e.replace(/^(\*\.|\!)/,""),punySuffix:-1,wildcard:"*"===e.charAt(0),exception:"!"===e.charAt(0)}}),r.endsWith=function(e,t){return-1!==e.indexOf(t,e.length-t.length)},r.findRule=function(e){var t=i.toASCII(e);return r.rules.reduce(function(e,a){return-1===a.punySuffix&&(a.punySuffix=i.toASCII(a.suffix)),r.endsWith(t,"."+a.punySuffix)||t===a.punySuffix?a:e},null)},t.errorCodes={DOMAIN_TOO_SHORT:"Domain name too short.",DOMAIN_TOO_LONG:"Domain name too long. It should be no more than 255 chars.",LABEL_STARTS_WITH_DASH:"Domain name label can not start with a dash.",LABEL_ENDS_WITH_DASH:"Domain name label can not end with a dash.",LABEL_TOO_LONG:"Domain name label should be at most 63 chars long.",LABEL_TOO_SHORT:"Domain name label should be at least 1 character long.",LABEL_INVALID_CHARS:"Domain name label can only contain alphanumeric characters or dashes."},r.validate=function(e){var t=i.toASCII(e);if(t.length<1)return"DOMAIN_TOO_SHORT";if(t.length>255)return"DOMAIN_TOO_LONG";for(var a,r=t.split("."),o=0;o<r.length;++o){if(!(a=r[o]).length)return"LABEL_TOO_SHORT";if(a.length>63)return"LABEL_TOO_LONG";if("-"===a.charAt(0))return"LABEL_STARTS_WITH_DASH";if("-"===a.charAt(a.length-1))return"LABEL_ENDS_WITH_DASH";if(!/^[a-z0-9\-]+$/.test(a))return"LABEL_INVALID_CHARS"}},t.parse=function(e){if("string"!=typeof e)throw new TypeError("Domain name must be a string.");var a=e.slice(0).toLowerCase();"."===a.charAt(a.length-1)&&(a=a.slice(0,a.length-1));var o=r.validate(a);if(o)return{input:e,error:{message:t.errorCodes[o],code:o}};var n={input:e,tld:null,sld:null,domain:null,subdomain:null,listed:!1},s=a.split(".");if("local"===s[s.length-1])return n;var u=function(){return/xn--/.test(a)?(n.domain&&(n.domain=i.toASCII(n.domain)),n.subdomain&&(n.subdomain=i.toASCII(n.subdomain)),n):n},c=r.findRule(a);if(!c)return s.length<2?n:(n.tld=s.pop(),n.sld=s.pop(),n.domain=[n.sld,n.tld].join("."),s.length&&(n.subdomain=s.pop()),u());n.listed=!0;var p=c.suffix.split("."),l=s.slice(0,s.length-p.length);return c.exception&&l.push(p.shift()),n.tld=p.join("."),l.length?(c.wildcard&&(p.unshift(l.pop()),n.tld=p.join(".")),l.length?(n.sld=l.pop(),n.domain=[n.sld,n.tld].join("."),l.length&&(n.subdomain=l.join(".")),u()):u()):u()},t.get=function(e){return e&&t.parse(e).domain||null},t.isValid=function(e){var a=t.parse(e);return Boolean(a.domain&&a.listed)}},function(e){e.exports=["ac","com.ac","edu.ac","gov.ac","net.ac","mil.ac","org.ac","ad","nom.ad","ae","co.ae","net.ae","org.ae","sch.ae","ac.ae","gov.ae","mil.ae","aero","accident-investigation.aero","accident-prevention.aero","aerobatic.aero","aeroclub.aero","aerodrome.aero","agents.aero","aircraft.aero","airline.aero","airport.aero","air-surveillance.aero","airtraffic.aero","air-traffic-control.aero","ambulance.aero","amusement.aero","association.aero","author.aero","ballooning.aero","broker.aero","caa.aero","cargo.aero","catering.aero","certification.aero","championship.aero","charter.aero","civilaviation.aero","club.aero","conference.aero","consultant.aero","consulting.aero","control.aero","council.aero","crew.aero","design.aero","dgca.aero","educator.aero","emergency.aero","engine.aero","engineer.aero","entertainment.aero","equipment.aero","exchange.aero","express.aero","federation.aero","flight.aero","freight.aero","fuel.aero","gliding.aero","government.aero","groundhandling.aero","group.aero","hanggliding.aero","homebuilt.aero","insurance.aero","journal.aero","journalist.aero","leasing.aero","logistics.aero","magazine.aero","maintenance.aero","media.aero","microlight.aero","modelling.aero","navigation.aero","parachuting.aero","paragliding.aero","passenger-association.aero","pilot.aero","press.aero","production.aero","recreation.aero","repbody.aero","res.aero","research.aero","rotorcraft.aero","safety.aero","scientist.aero","services.aero","show.aero","skydiving.aero","software.aero","student.aero","trader.aero","trading.aero","trainer.aero","union.aero","workinggroup.aero","works.aero","af","gov.af","com.af","org.af","net.af","edu.af","ag","com.ag","org.ag","net.ag","co.ag","nom.ag","ai","off.ai","com.ai","net.ai","org.ai","al","com.al","edu.al","gov.al","mil.al","net.al","org.al","am","ao","ed.ao","gv.ao","og.ao","co.ao","pb.ao","it.ao","aq","ar","com.ar","edu.ar","gob.ar","gov.ar","int.ar","mil.ar","musica.ar","net.ar","org.ar","tur.ar","arpa","e164.arpa","in-addr.arpa","ip6.arpa","iris.arpa","uri.arpa","urn.arpa","as","gov.as","asia","at","ac.at","co.at","gv.at","or.at","au","com.au","net.au","org.au","edu.au","gov.au","asn.au","id.au","info.au","conf.au","oz.au","act.au","nsw.au","nt.au","qld.au","sa.au","tas.au","vic.au","wa.au","act.edu.au","nsw.edu.au","nt.edu.au","qld.edu.au","sa.edu.au","tas.edu.au","vic.edu.au","wa.edu.au","qld.gov.au","sa.gov.au","tas.gov.au","vic.gov.au","wa.gov.au","aw","com.aw","ax","az","com.az","net.az","int.az","gov.az","org.az","edu.az","info.az","pp.az","mil.az","name.az","pro.az","biz.az","ba","com.ba","edu.ba","gov.ba","mil.ba","net.ba","org.ba","bb","biz.bb","co.bb","com.bb","edu.bb","gov.bb","info.bb","net.bb","org.bb","store.bb","tv.bb","*.bd","be","ac.be","bf","gov.bf","bg","a.bg","b.bg","c.bg","d.bg","e.bg","f.bg","g.bg","h.bg","i.bg","j.bg","k.bg","l.bg","m.bg","n.bg","o.bg","p.bg","q.bg","r.bg","s.bg","t.bg","u.bg","v.bg","w.bg","x.bg","y.bg","z.bg","0.bg","1.bg","2.bg","3.bg","4.bg","5.bg","6.bg","7.bg","8.bg","9.bg","bh","com.bh","edu.bh","net.bh","org.bh","gov.bh","bi","co.bi","com.bi","edu.bi","or.bi","org.bi","biz","bj","asso.bj","barreau.bj","gouv.bj","bm","com.bm","edu.bm","gov.bm","net.bm","org.bm","bn","com.bn","edu.bn","gov.bn","net.bn","org.bn","bo","com.bo","edu.bo","gob.bo","int.bo","org.bo","net.bo","mil.bo","tv.bo","web.bo","academia.bo","agro.bo","arte.bo","blog.bo","bolivia.bo","ciencia.bo","cooperativa.bo","democracia.bo","deporte.bo","ecologia.bo","economia.bo","empresa.bo","indigena.bo","industria.bo","info.bo","medicina.bo","movimiento.bo","musica.bo","natural.bo","nombre.bo","noticias.bo","patria.bo","politica.bo","profesional.bo","plurinacional.bo","pueblo.bo","revista.bo","salud.bo","tecnologia.bo","tksat.bo","transporte.bo","wiki.bo","br","9guacu.br","abc.br","adm.br","adv.br","agr.br","aju.br","am.br","anani.br","aparecida.br","arq.br","art.br","ato.br","b.br","barueri.br","belem.br","bhz.br","bio.br","blog.br","bmd.br","boavista.br","bsb.br","campinagrande.br","campinas.br","caxias.br","cim.br","cng.br","cnt.br","com.br","contagem.br","coop.br","cri.br","cuiaba.br","curitiba.br","def.br","ecn.br","eco.br","edu.br","emp.br","eng.br","esp.br","etc.br","eti.br","far.br","feira.br","flog.br","floripa.br","fm.br","fnd.br","fortal.br","fot.br","foz.br","fst.br","g12.br","ggf.br","goiania.br","gov.br","ac.gov.br","al.gov.br","am.gov.br","ap.gov.br","ba.gov.br","ce.gov.br","df.gov.br","es.gov.br","go.gov.br","ma.gov.br","mg.gov.br","ms.gov.br","mt.gov.br","pa.gov.br","pb.gov.br","pe.gov.br","pi.gov.br","pr.gov.br","rj.gov.br","rn.gov.br","ro.gov.br","rr.gov.br","rs.gov.br","sc.gov.br","se.gov.br","sp.gov.br","to.gov.br","gru.br","imb.br","ind.br","inf.br","jab.br","jampa.br","jdf.br","joinville.br","jor.br","jus.br","leg.br","lel.br","londrina.br","macapa.br","maceio.br","manaus.br","maringa.br","mat.br","med.br","mil.br","morena.br","mp.br","mus.br","natal.br","net.br","niteroi.br","*.nom.br","not.br","ntr.br","odo.br","ong.br","org.br","osasco.br","palmas.br","poa.br","ppg.br","pro.br","psc.br","psi.br","pvh.br","qsl.br","radio.br","rec.br","recife.br","ribeirao.br","rio.br","riobranco.br","riopreto.br","salvador.br","sampa.br","santamaria.br","santoandre.br","saobernardo.br","saogonca.br","sjc.br","slg.br","slz.br","sorocaba.br","srv.br","taxi.br","teo.br","the.br","tmp.br","trd.br","tur.br","tv.br","udi.br","vet.br","vix.br","vlog.br","wiki.br","zlg.br","bs","com.bs","net.bs","org.bs","edu.bs","gov.bs","bt","com.bt","edu.bt","gov.bt","net.bt","org.bt","bv","bw","co.bw","org.bw","by","gov.by","mil.by","com.by","of.by","bz","com.bz","net.bz","org.bz","edu.bz","gov.bz","ca","ab.ca","bc.ca","mb.ca","nb.ca","nf.ca","nl.ca","ns.ca","nt.ca","nu.ca","on.ca","pe.ca","qc.ca","sk.ca","yk.ca","gc.ca","cat","cc","cd","gov.cd","cf","cg","ch","ci","org.ci","or.ci","com.ci","co.ci","edu.ci","ed.ci","ac.ci","net.ci","go.ci","asso.ci","aéroport.ci","int.ci","presse.ci","md.ci","gouv.ci","*.ck","!www.ck","cl","gov.cl","gob.cl","co.cl","mil.cl","cm","co.cm","com.cm","gov.cm","net.cm","cn","ac.cn","com.cn","edu.cn","gov.cn","net.cn","org.cn","mil.cn","公司.cn","网络.cn","網絡.cn","ah.cn","bj.cn","cq.cn","fj.cn","gd.cn","gs.cn","gz.cn","gx.cn","ha.cn","hb.cn","he.cn","hi.cn","hl.cn","hn.cn","jl.cn","js.cn","jx.cn","ln.cn","nm.cn","nx.cn","qh.cn","sc.cn","sd.cn","sh.cn","sn.cn","sx.cn","tj.cn","xj.cn","xz.cn","yn.cn","zj.cn","hk.cn","mo.cn","tw.cn","co","arts.co","com.co","edu.co","firm.co","gov.co","info.co","int.co","mil.co","net.co","nom.co","org.co","rec.co","web.co","com","coop","cr","ac.cr","co.cr","ed.cr","fi.cr","go.cr","or.cr","sa.cr","cu","com.cu","edu.cu","org.cu","net.cu","gov.cu","inf.cu","cv","cw","com.cw","edu.cw","net.cw","org.cw","cx","gov.cx","cy","ac.cy","biz.cy","com.cy","ekloges.cy","gov.cy","ltd.cy","name.cy","net.cy","org.cy","parliament.cy","press.cy","pro.cy","tm.cy","cz","de","dj","dk","dm","com.dm","net.dm","org.dm","edu.dm","gov.dm","do","art.do","com.do","edu.do","gob.do","gov.do","mil.do","net.do","org.do","sld.do","web.do","dz","com.dz","org.dz","net.dz","gov.dz","edu.dz","asso.dz","pol.dz","art.dz","ec","com.ec","info.ec","net.ec","fin.ec","k12.ec","med.ec","pro.ec","org.ec","edu.ec","gov.ec","gob.ec","mil.ec","edu","ee","edu.ee","gov.ee","riik.ee","lib.ee","med.ee","com.ee","pri.ee","aip.ee","org.ee","fie.ee","eg","com.eg","edu.eg","eun.eg","gov.eg","mil.eg","name.eg","net.eg","org.eg","sci.eg","*.er","es","com.es","nom.es","org.es","gob.es","edu.es","et","com.et","gov.et","org.et","edu.et","biz.et","name.et","info.et","net.et","eu","fi","aland.fi","*.fj","*.fk","fm","fo","fr","com.fr","asso.fr","nom.fr","prd.fr","presse.fr","tm.fr","aeroport.fr","assedic.fr","avocat.fr","avoues.fr","cci.fr","chambagri.fr","chirurgiens-dentistes.fr","experts-comptables.fr","geometre-expert.fr","gouv.fr","greta.fr","huissier-justice.fr","medecin.fr","notaires.fr","pharmacien.fr","port.fr","veterinaire.fr","ga","gb","gd","ge","com.ge","edu.ge","gov.ge","org.ge","mil.ge","net.ge","pvt.ge","gf","gg","co.gg","net.gg","org.gg","gh","com.gh","edu.gh","gov.gh","org.gh","mil.gh","gi","com.gi","ltd.gi","gov.gi","mod.gi","edu.gi","org.gi","gl","co.gl","com.gl","edu.gl","net.gl","org.gl","gm","gn","ac.gn","com.gn","edu.gn","gov.gn","org.gn","net.gn","gov","gp","com.gp","net.gp","mobi.gp","edu.gp","org.gp","asso.gp","gq","gr","com.gr","edu.gr","net.gr","org.gr","gov.gr","gs","gt","com.gt","edu.gt","gob.gt","ind.gt","mil.gt","net.gt","org.gt","gu","com.gu","edu.gu","gov.gu","guam.gu","info.gu","net.gu","org.gu","web.gu","gw","gy","co.gy","com.gy","edu.gy","gov.gy","net.gy","org.gy","hk","com.hk","edu.hk","gov.hk","idv.hk","net.hk","org.hk","公司.hk","教育.hk","敎育.hk","政府.hk","個人.hk","个人.hk","箇人.hk","網络.hk","网络.hk","组織.hk","網絡.hk","网絡.hk","组织.hk","組織.hk","組织.hk","hm","hn","com.hn","edu.hn","org.hn","net.hn","mil.hn","gob.hn","hr","iz.hr","from.hr","name.hr","com.hr","ht","com.ht","shop.ht","firm.ht","info.ht","adult.ht","net.ht","pro.ht","org.ht","med.ht","art.ht","coop.ht","pol.ht","asso.ht","edu.ht","rel.ht","gouv.ht","perso.ht","hu","co.hu","info.hu","org.hu","priv.hu","sport.hu","tm.hu","2000.hu","agrar.hu","bolt.hu","casino.hu","city.hu","erotica.hu","erotika.hu","film.hu","forum.hu","games.hu","hotel.hu","ingatlan.hu","jogasz.hu","konyvelo.hu","lakas.hu","media.hu","news.hu","reklam.hu","sex.hu","shop.hu","suli.hu","szex.hu","tozsde.hu","utazas.hu","video.hu","id","ac.id","biz.id","co.id","desa.id","go.id","mil.id","my.id","net.id","or.id","ponpes.id","sch.id","web.id","ie","gov.ie","il","ac.il","co.il","gov.il","idf.il","k12.il","muni.il","net.il","org.il","im","ac.im","co.im","com.im","ltd.co.im","net.im","org.im","plc.co.im","tt.im","tv.im","in","co.in","firm.in","net.in","org.in","gen.in","ind.in","nic.in","ac.in","edu.in","res.in","gov.in","mil.in","info","int","eu.int","io","com.io","iq","gov.iq","edu.iq","mil.iq","com.iq","org.iq","net.iq","ir","ac.ir","co.ir","gov.ir","id.ir","net.ir","org.ir","sch.ir","ایران.ir","ايران.ir","is","net.is","com.is","edu.is","gov.is","org.is","int.is","it","gov.it","edu.it","abr.it","abruzzo.it","aosta-valley.it","aostavalley.it","bas.it","basilicata.it","cal.it","calabria.it","cam.it","campania.it","emilia-romagna.it","emiliaromagna.it","emr.it","friuli-v-giulia.it","friuli-ve-giulia.it","friuli-vegiulia.it","friuli-venezia-giulia.it","friuli-veneziagiulia.it","friuli-vgiulia.it","friuliv-giulia.it","friulive-giulia.it","friulivegiulia.it","friulivenezia-giulia.it","friuliveneziagiulia.it","friulivgiulia.it","fvg.it","laz.it","lazio.it","lig.it","liguria.it","lom.it","lombardia.it","lombardy.it","lucania.it","mar.it","marche.it","mol.it","molise.it","piedmont.it","piemonte.it","pmn.it","pug.it","puglia.it","sar.it","sardegna.it","sardinia.it","sic.it","sicilia.it","sicily.it","taa.it","tos.it","toscana.it","trentin-sud-tirol.it","trentin-süd-tirol.it","trentin-sudtirol.it","trentin-südtirol.it","trentin-sued-tirol.it","trentin-suedtirol.it","trentino-a-adige.it","trentino-aadige.it","trentino-alto-adige.it","trentino-altoadige.it","trentino-s-tirol.it","trentino-stirol.it","trentino-sud-tirol.it","trentino-süd-tirol.it","trentino-sudtirol.it","trentino-südtirol.it","trentino-sued-tirol.it","trentino-suedtirol.it","trentino.it","trentinoa-adige.it","trentinoaadige.it","trentinoalto-adige.it","trentinoaltoadige.it","trentinos-tirol.it","trentinostirol.it","trentinosud-tirol.it","trentinosüd-tirol.it","trentinosudtirol.it","trentinosüdtirol.it","trentinosued-tirol.it","trentinosuedtirol.it","trentinsud-tirol.it","trentinsüd-tirol.it","trentinsudtirol.it","trentinsüdtirol.it","trentinsued-tirol.it","trentinsuedtirol.it","tuscany.it","umb.it","umbria.it","val-d-aosta.it","val-daosta.it","vald-aosta.it","valdaosta.it","valle-aosta.it","valle-d-aosta.it","valle-daosta.it","valleaosta.it","valled-aosta.it","valledaosta.it","vallee-aoste.it","vallée-aoste.it","vallee-d-aoste.it","vallée-d-aoste.it","valleeaoste.it","valléeaoste.it","valleedaoste.it","valléedaoste.it","vao.it","vda.it","ven.it","veneto.it","ag.it","agrigento.it","al.it","alessandria.it","alto-adige.it","altoadige.it","an.it","ancona.it","andria-barletta-trani.it","andria-trani-barletta.it","andriabarlettatrani.it","andriatranibarletta.it","ao.it","aosta.it","aoste.it","ap.it","aq.it","aquila.it","ar.it","arezzo.it","ascoli-piceno.it","ascolipiceno.it","asti.it","at.it","av.it","avellino.it","ba.it","balsan-sudtirol.it","balsan-südtirol.it","balsan-suedtirol.it","balsan.it","bari.it","barletta-trani-andria.it","barlettatraniandria.it","belluno.it","benevento.it","bergamo.it","bg.it","bi.it","biella.it","bl.it","bn.it","bo.it","bologna.it","bolzano-altoadige.it","bolzano.it","bozen-sudtirol.it","bozen-südtirol.it","bozen-suedtirol.it","bozen.it","br.it","brescia.it","brindisi.it","bs.it","bt.it","bulsan-sudtirol.it","bulsan-südtirol.it","bulsan-suedtirol.it","bulsan.it","bz.it","ca.it","cagliari.it","caltanissetta.it","campidano-medio.it","campidanomedio.it","campobasso.it","carbonia-iglesias.it","carboniaiglesias.it","carrara-massa.it","carraramassa.it","caserta.it","catania.it","catanzaro.it","cb.it","ce.it","cesena-forli.it","cesena-forlì.it","cesenaforli.it","cesenaforlì.it","ch.it","chieti.it","ci.it","cl.it","cn.it","co.it","como.it","cosenza.it","cr.it","cremona.it","crotone.it","cs.it","ct.it","cuneo.it","cz.it","dell-ogliastra.it","dellogliastra.it","en.it","enna.it","fc.it","fe.it","fermo.it","ferrara.it","fg.it","fi.it","firenze.it","florence.it","fm.it","foggia.it","forli-cesena.it","forlì-cesena.it","forlicesena.it","forlìcesena.it","fr.it","frosinone.it","ge.it","genoa.it","genova.it","go.it","gorizia.it","gr.it","grosseto.it","iglesias-carbonia.it","iglesiascarbonia.it","im.it","imperia.it","is.it","isernia.it","kr.it","la-spezia.it","laquila.it","laspezia.it","latina.it","lc.it","le.it","lecce.it","lecco.it","li.it","livorno.it","lo.it","lodi.it","lt.it","lu.it","lucca.it","macerata.it","mantova.it","massa-carrara.it","massacarrara.it","matera.it","mb.it","mc.it","me.it","medio-campidano.it","mediocampidano.it","messina.it","mi.it","milan.it","milano.it","mn.it","mo.it","modena.it","monza-brianza.it","monza-e-della-brianza.it","monza.it","monzabrianza.it","monzaebrianza.it","monzaedellabrianza.it","ms.it","mt.it","na.it","naples.it","napoli.it","no.it","novara.it","nu.it","nuoro.it","og.it","ogliastra.it","olbia-tempio.it","olbiatempio.it","or.it","oristano.it","ot.it","pa.it","padova.it","padua.it","palermo.it","parma.it","pavia.it","pc.it","pd.it","pe.it","perugia.it","pesaro-urbino.it","pesarourbino.it","pescara.it","pg.it","pi.it","piacenza.it","pisa.it","pistoia.it","pn.it","po.it","pordenone.it","potenza.it","pr.it","prato.it","pt.it","pu.it","pv.it","pz.it","ra.it","ragusa.it","ravenna.it","rc.it","re.it","reggio-calabria.it","reggio-emilia.it","reggiocalabria.it","reggioemilia.it","rg.it","ri.it","rieti.it","rimini.it","rm.it","rn.it","ro.it","roma.it","rome.it","rovigo.it","sa.it","salerno.it","sassari.it","savona.it","si.it","siena.it","siracusa.it","so.it","sondrio.it","sp.it","sr.it","ss.it","suedtirol.it","südtirol.it","sv.it","ta.it","taranto.it","te.it","tempio-olbia.it","tempioolbia.it","teramo.it","terni.it","tn.it","to.it","torino.it","tp.it","tr.it","trani-andria-barletta.it","trani-barletta-andria.it","traniandriabarletta.it","tranibarlettaandria.it","trapani.it","trento.it","treviso.it","trieste.it","ts.it","turin.it","tv.it","ud.it","udine.it","urbino-pesaro.it","urbinopesaro.it","va.it","varese.it","vb.it","vc.it","ve.it","venezia.it","venice.it","verbania.it","vercelli.it","verona.it","vi.it","vibo-valentia.it","vibovalentia.it","vicenza.it","viterbo.it","vr.it","vs.it","vt.it","vv.it","je","co.je","net.je","org.je","*.jm","jo","com.jo","org.jo","net.jo","edu.jo","sch.jo","gov.jo","mil.jo","name.jo","jobs","jp","ac.jp","ad.jp","co.jp","ed.jp","go.jp","gr.jp","lg.jp","ne.jp","or.jp","aichi.jp","akita.jp","aomori.jp","chiba.jp","ehime.jp","fukui.jp","fukuoka.jp","fukushima.jp","gifu.jp","gunma.jp","hiroshima.jp","hokkaido.jp","hyogo.jp","ibaraki.jp","ishikawa.jp","iwate.jp","kagawa.jp","kagoshima.jp","kanagawa.jp","kochi.jp","kumamoto.jp","kyoto.jp","mie.jp","miyagi.jp","miyazaki.jp","nagano.jp","nagasaki.jp","nara.jp","niigata.jp","oita.jp","okayama.jp","okinawa.jp","osaka.jp","saga.jp","saitama.jp","shiga.jp","shimane.jp","shizuoka.jp","tochigi.jp","tokushima.jp","tokyo.jp","tottori.jp","toyama.jp","wakayama.jp","yamagata.jp","yamaguchi.jp","yamanashi.jp","栃木.jp","愛知.jp","愛媛.jp","兵庫.jp","熊本.jp","茨城.jp","北海道.jp","千葉.jp","和歌山.jp","長崎.jp","長野.jp","新潟.jp","青森.jp","静岡.jp","東京.jp","石川.jp","埼玉.jp","三重.jp","京都.jp","佐賀.jp","大分.jp","大阪.jp","奈良.jp","宮城.jp","宮崎.jp","富山.jp","山口.jp","山形.jp","山梨.jp","岩手.jp","岐阜.jp","岡山.jp","島根.jp","広島.jp","徳島.jp","沖縄.jp","滋賀.jp","神奈川.jp","福井.jp","福岡.jp","福島.jp","秋田.jp","群馬.jp","香川.jp","高知.jp","鳥取.jp","鹿児島.jp","*.kawasaki.jp","*.kitakyushu.jp","*.kobe.jp","*.nagoya.jp","*.sapporo.jp","*.sendai.jp","*.yokohama.jp","!city.kawasaki.jp","!city.kitakyushu.jp","!city.kobe.jp","!city.nagoya.jp","!city.sapporo.jp","!city.sendai.jp","!city.yokohama.jp","aisai.aichi.jp","ama.aichi.jp","anjo.aichi.jp","asuke.aichi.jp","chiryu.aichi.jp","chita.aichi.jp","fuso.aichi.jp","gamagori.aichi.jp","handa.aichi.jp","hazu.aichi.jp","hekinan.aichi.jp","higashiura.aichi.jp","ichinomiya.aichi.jp","inazawa.aichi.jp","inuyama.aichi.jp","isshiki.aichi.jp","iwakura.aichi.jp","kanie.aichi.jp","kariya.aichi.jp","kasugai.aichi.jp","kira.aichi.jp","kiyosu.aichi.jp","komaki.aichi.jp","konan.aichi.jp","kota.aichi.jp","mihama.aichi.jp","miyoshi.aichi.jp","nishio.aichi.jp","nisshin.aichi.jp","obu.aichi.jp","oguchi.aichi.jp","oharu.aichi.jp","okazaki.aichi.jp","owariasahi.aichi.jp","seto.aichi.jp","shikatsu.aichi.jp","shinshiro.aichi.jp","shitara.aichi.jp","tahara.aichi.jp","takahama.aichi.jp","tobishima.aichi.jp","toei.aichi.jp","togo.aichi.jp","tokai.aichi.jp","tokoname.aichi.jp","toyoake.aichi.jp","toyohashi.aichi.jp","toyokawa.aichi.jp","toyone.aichi.jp","toyota.aichi.jp","tsushima.aichi.jp","yatomi.aichi.jp","akita.akita.jp","daisen.akita.jp","fujisato.akita.jp","gojome.akita.jp","hachirogata.akita.jp","happou.akita.jp","higashinaruse.akita.jp","honjo.akita.jp","honjyo.akita.jp","ikawa.akita.jp","kamikoani.akita.jp","kamioka.akita.jp","katagami.akita.jp","kazuno.akita.jp","kitaakita.akita.jp","kosaka.akita.jp","kyowa.akita.jp","misato.akita.jp","mitane.akita.jp","moriyoshi.akita.jp","nikaho.akita.jp","noshiro.akita.jp","odate.akita.jp","oga.akita.jp","ogata.akita.jp","semboku.akita.jp","yokote.akita.jp","yurihonjo.akita.jp","aomori.aomori.jp","gonohe.aomori.jp","hachinohe.aomori.jp","hashikami.aomori.jp","hiranai.aomori.jp","hirosaki.aomori.jp","itayanagi.aomori.jp","kuroishi.aomori.jp","misawa.aomori.jp","mutsu.aomori.jp","nakadomari.aomori.jp","noheji.aomori.jp","oirase.aomori.jp","owani.aomori.jp","rokunohe.aomori.jp","sannohe.aomori.jp","shichinohe.aomori.jp","shingo.aomori.jp","takko.aomori.jp","towada.aomori.jp","tsugaru.aomori.jp","tsuruta.aomori.jp","abiko.chiba.jp","asahi.chiba.jp","chonan.chiba.jp","chosei.chiba.jp","choshi.chiba.jp","chuo.chiba.jp","funabashi.chiba.jp","futtsu.chiba.jp","hanamigawa.chiba.jp","ichihara.chiba.jp","ichikawa.chiba.jp","ichinomiya.chiba.jp","inzai.chiba.jp","isumi.chiba.jp","kamagaya.chiba.jp","kamogawa.chiba.jp","kashiwa.chiba.jp","katori.chiba.jp","katsuura.chiba.jp","kimitsu.chiba.jp","kisarazu.chiba.jp","kozaki.chiba.jp","kujukuri.chiba.jp","kyonan.chiba.jp","matsudo.chiba.jp","midori.chiba.jp","mihama.chiba.jp","minamiboso.chiba.jp","mobara.chiba.jp","mutsuzawa.chiba.jp","nagara.chiba.jp","nagareyama.chiba.jp","narashino.chiba.jp","narita.chiba.jp","noda.chiba.jp","oamishirasato.chiba.jp","omigawa.chiba.jp","onjuku.chiba.jp","otaki.chiba.jp","sakae.chiba.jp","sakura.chiba.jp","shimofusa.chiba.jp","shirako.chiba.jp","shiroi.chiba.jp","shisui.chiba.jp","sodegaura.chiba.jp","sosa.chiba.jp","tako.chiba.jp","tateyama.chiba.jp","togane.chiba.jp","tohnosho.chiba.jp","tomisato.chiba.jp","urayasu.chiba.jp","yachimata.chiba.jp","yachiyo.chiba.jp","yokaichiba.chiba.jp","yokoshibahikari.chiba.jp","yotsukaido.chiba.jp","ainan.ehime.jp","honai.ehime.jp","ikata.ehime.jp","imabari.ehime.jp","iyo.ehime.jp","kamijima.ehime.jp","kihoku.ehime.jp","kumakogen.ehime.jp","masaki.ehime.jp","matsuno.ehime.jp","matsuyama.ehime.jp","namikata.ehime.jp","niihama.ehime.jp","ozu.ehime.jp","saijo.ehime.jp","seiyo.ehime.jp","shikokuchuo.ehime.jp","tobe.ehime.jp","toon.ehime.jp","uchiko.ehime.jp","uwajima.ehime.jp","yawatahama.ehime.jp","echizen.fukui.jp","eiheiji.fukui.jp","fukui.fukui.jp","ikeda.fukui.jp","katsuyama.fukui.jp","mihama.fukui.jp","minamiechizen.fukui.jp","obama.fukui.jp","ohi.fukui.jp","ono.fukui.jp","sabae.fukui.jp","sakai.fukui.jp","takahama.fukui.jp","tsuruga.fukui.jp","wakasa.fukui.jp","ashiya.fukuoka.jp","buzen.fukuoka.jp","chikugo.fukuoka.jp","chikuho.fukuoka.jp","chikujo.fukuoka.jp","chikushino.fukuoka.jp","chikuzen.fukuoka.jp","chuo.fukuoka.jp","dazaifu.fukuoka.jp","fukuchi.fukuoka.jp","hakata.fukuoka.jp","higashi.fukuoka.jp","hirokawa.fukuoka.jp","hisayama.fukuoka.jp","iizuka.fukuoka.jp","inatsuki.fukuoka.jp","kaho.fukuoka.jp","kasuga.fukuoka.jp","kasuya.fukuoka.jp","kawara.fukuoka.jp","keisen.fukuoka.jp","koga.fukuoka.jp","kurate.fukuoka.jp","kurogi.fukuoka.jp","kurume.fukuoka.jp","minami.fukuoka.jp","miyako.fukuoka.jp","miyama.fukuoka.jp","miyawaka.fukuoka.jp","mizumaki.fukuoka.jp","munakata.fukuoka.jp","nakagawa.fukuoka.jp","nakama.fukuoka.jp","nishi.fukuoka.jp","nogata.fukuoka.jp","ogori.fukuoka.jp","okagaki.fukuoka.jp","okawa.fukuoka.jp","oki.fukuoka.jp","omuta.fukuoka.jp","onga.fukuoka.jp","onojo.fukuoka.jp","oto.fukuoka.jp","saigawa.fukuoka.jp","sasaguri.fukuoka.jp","shingu.fukuoka.jp","shinyoshitomi.fukuoka.jp","shonai.fukuoka.jp","soeda.fukuoka.jp","sue.fukuoka.jp","tachiarai.fukuoka.jp","tagawa.fukuoka.jp","takata.fukuoka.jp","toho.fukuoka.jp","toyotsu.fukuoka.jp","tsuiki.fukuoka.jp","ukiha.fukuoka.jp","umi.fukuoka.jp","usui.fukuoka.jp","yamada.fukuoka.jp","yame.fukuoka.jp","yanagawa.fukuoka.jp","yukuhashi.fukuoka.jp","aizubange.fukushima.jp","aizumisato.fukushima.jp","aizuwakamatsu.fukushima.jp","asakawa.fukushima.jp","bandai.fukushima.jp","date.fukushima.jp","fukushima.fukushima.jp","furudono.fukushima.jp","futaba.fukushima.jp","hanawa.fukushima.jp","higashi.fukushima.jp","hirata.fukushima.jp","hirono.fukushima.jp","iitate.fukushima.jp","inawashiro.fukushima.jp","ishikawa.fukushima.jp","iwaki.fukushima.jp","izumizaki.fukushima.jp","kagamiishi.fukushima.jp","kaneyama.fukushima.jp","kawamata.fukushima.jp","kitakata.fukushima.jp","kitashiobara.fukushima.jp","koori.fukushima.jp","koriyama.fukushima.jp","kunimi.fukushima.jp","miharu.fukushima.jp","mishima.fukushima.jp","namie.fukushima.jp","nango.fukushima.jp","nishiaizu.fukushima.jp","nishigo.fukushima.jp","okuma.fukushima.jp","omotego.fukushima.jp","ono.fukushima.jp","otama.fukushima.jp","samegawa.fukushima.jp","shimogo.fukushima.jp","shirakawa.fukushima.jp","showa.fukushima.jp","soma.fukushima.jp","sukagawa.fukushima.jp","taishin.fukushima.jp","tamakawa.fukushima.jp","tanagura.fukushima.jp","tenei.fukushima.jp","yabuki.fukushima.jp","yamato.fukushima.jp","yamatsuri.fukushima.jp","yanaizu.fukushima.jp","yugawa.fukushima.jp","anpachi.gifu.jp","ena.gifu.jp","gifu.gifu.jp","ginan.gifu.jp","godo.gifu.jp","gujo.gifu.jp","hashima.gifu.jp","hichiso.gifu.jp","hida.gifu.jp","higashishirakawa.gifu.jp","ibigawa.gifu.jp","ikeda.gifu.jp","kakamigahara.gifu.jp","kani.gifu.jp","kasahara.gifu.jp","kasamatsu.gifu.jp","kawaue.gifu.jp","kitagata.gifu.jp","mino.gifu.jp","minokamo.gifu.jp","mitake.gifu.jp","mizunami.gifu.jp","motosu.gifu.jp","nakatsugawa.gifu.jp","ogaki.gifu.jp","sakahogi.gifu.jp","seki.gifu.jp","sekigahara.gifu.jp","shirakawa.gifu.jp","tajimi.gifu.jp","takayama.gifu.jp","tarui.gifu.jp","toki.gifu.jp","tomika.gifu.jp","wanouchi.gifu.jp","yamagata.gifu.jp","yaotsu.gifu.jp","yoro.gifu.jp","annaka.gunma.jp","chiyoda.gunma.jp","fujioka.gunma.jp","higashiagatsuma.gunma.jp","isesaki.gunma.jp","itakura.gunma.jp","kanna.gunma.jp","kanra.gunma.jp","katashina.gunma.jp","kawaba.gunma.jp","kiryu.gunma.jp","kusatsu.gunma.jp","maebashi.gunma.jp","meiwa.gunma.jp","midori.gunma.jp","minakami.gunma.jp","naganohara.gunma.jp","nakanojo.gunma.jp","nanmoku.gunma.jp","numata.gunma.jp","oizumi.gunma.jp","ora.gunma.jp","ota.gunma.jp","shibukawa.gunma.jp","shimonita.gunma.jp","shinto.gunma.jp","showa.gunma.jp","takasaki.gunma.jp","takayama.gunma.jp","tamamura.gunma.jp","tatebayashi.gunma.jp","tomioka.gunma.jp","tsukiyono.gunma.jp","tsumagoi.gunma.jp","ueno.gunma.jp","yoshioka.gunma.jp","asaminami.hiroshima.jp","daiwa.hiroshima.jp","etajima.hiroshima.jp","fuchu.hiroshima.jp","fukuyama.hiroshima.jp","hatsukaichi.hiroshima.jp","higashihiroshima.hiroshima.jp","hongo.hiroshima.jp","jinsekikogen.hiroshima.jp","kaita.hiroshima.jp","kui.hiroshima.jp","kumano.hiroshima.jp","kure.hiroshima.jp","mihara.hiroshima.jp","miyoshi.hiroshima.jp","naka.hiroshima.jp","onomichi.hiroshima.jp","osakikamijima.hiroshima.jp","otake.hiroshima.jp","saka.hiroshima.jp","sera.hiroshima.jp","seranishi.hiroshima.jp","shinichi.hiroshima.jp","shobara.hiroshima.jp","takehara.hiroshima.jp","abashiri.hokkaido.jp","abira.hokkaido.jp","aibetsu.hokkaido.jp","akabira.hokkaido.jp","akkeshi.hokkaido.jp","asahikawa.hokkaido.jp","ashibetsu.hokkaido.jp","ashoro.hokkaido.jp","assabu.hokkaido.jp","atsuma.hokkaido.jp","bibai.hokkaido.jp","biei.hokkaido.jp","bifuka.hokkaido.jp","bihoro.hokkaido.jp","biratori.hokkaido.jp","chippubetsu.hokkaido.jp","chitose.hokkaido.jp","date.hokkaido.jp","ebetsu.hokkaido.jp","embetsu.hokkaido.jp","eniwa.hokkaido.jp","erimo.hokkaido.jp","esan.hokkaido.jp","esashi.hokkaido.jp","fukagawa.hokkaido.jp","fukushima.hokkaido.jp","furano.hokkaido.jp","furubira.hokkaido.jp","haboro.hokkaido.jp","hakodate.hokkaido.jp","hamatonbetsu.hokkaido.jp","hidaka.hokkaido.jp","higashikagura.hokkaido.jp","higashikawa.hokkaido.jp","hiroo.hokkaido.jp","hokuryu.hokkaido.jp","hokuto.hokkaido.jp","honbetsu.hokkaido.jp","horokanai.hokkaido.jp","horonobe.hokkaido.jp","ikeda.hokkaido.jp","imakane.hokkaido.jp","ishikari.hokkaido.jp","iwamizawa.hokkaido.jp","iwanai.hokkaido.jp","kamifurano.hokkaido.jp","kamikawa.hokkaido.jp","kamishihoro.hokkaido.jp","kamisunagawa.hokkaido.jp","kamoenai.hokkaido.jp","kayabe.hokkaido.jp","kembuchi.hokkaido.jp","kikonai.hokkaido.jp","kimobetsu.hokkaido.jp","kitahiroshima.hokkaido.jp","kitami.hokkaido.jp","kiyosato.hokkaido.jp","koshimizu.hokkaido.jp","kunneppu.hokkaido.jp","kuriyama.hokkaido.jp","kuromatsunai.hokkaido.jp","kushiro.hokkaido.jp","kutchan.hokkaido.jp","kyowa.hokkaido.jp","mashike.hokkaido.jp","matsumae.hokkaido.jp","mikasa.hokkaido.jp","minamifurano.hokkaido.jp","mombetsu.hokkaido.jp","moseushi.hokkaido.jp","mukawa.hokkaido.jp","muroran.hokkaido.jp","naie.hokkaido.jp","nakagawa.hokkaido.jp","nakasatsunai.hokkaido.jp","nakatombetsu.hokkaido.jp","nanae.hokkaido.jp","nanporo.hokkaido.jp","nayoro.hokkaido.jp","nemuro.hokkaido.jp","niikappu.hokkaido.jp","niki.hokkaido.jp","nishiokoppe.hokkaido.jp","noboribetsu.hokkaido.jp","numata.hokkaido.jp","obihiro.hokkaido.jp","obira.hokkaido.jp","oketo.hokkaido.jp","okoppe.hokkaido.jp","otaru.hokkaido.jp","otobe.hokkaido.jp","otofuke.hokkaido.jp","otoineppu.hokkaido.jp","oumu.hokkaido.jp","ozora.hokkaido.jp","pippu.hokkaido.jp","rankoshi.hokkaido.jp","rebun.hokkaido.jp","rikubetsu.hokkaido.jp","rishiri.hokkaido.jp","rishirifuji.hokkaido.jp","saroma.hokkaido.jp","sarufutsu.hokkaido.jp","shakotan.hokkaido.jp","shari.hokkaido.jp","shibecha.hokkaido.jp","shibetsu.hokkaido.jp","shikabe.hokkaido.jp","shikaoi.hokkaido.jp","shimamaki.hokkaido.jp","shimizu.hokkaido.jp","shimokawa.hokkaido.jp","shinshinotsu.hokkaido.jp","shintoku.hokkaido.jp","shiranuka.hokkaido.jp","shiraoi.hokkaido.jp","shiriuchi.hokkaido.jp","sobetsu.hokkaido.jp","sunagawa.hokkaido.jp","taiki.hokkaido.jp","takasu.hokkaido.jp","takikawa.hokkaido.jp","takinoue.hokkaido.jp","teshikaga.hokkaido.jp","tobetsu.hokkaido.jp","tohma.hokkaido.jp","tomakomai.hokkaido.jp","tomari.hokkaido.jp","toya.hokkaido.jp","toyako.hokkaido.jp","toyotomi.hokkaido.jp","toyoura.hokkaido.jp","tsubetsu.hokkaido.jp","tsukigata.hokkaido.jp","urakawa.hokkaido.jp","urausu.hokkaido.jp","uryu.hokkaido.jp","utashinai.hokkaido.jp","wakkanai.hokkaido.jp","wassamu.hokkaido.jp","yakumo.hokkaido.jp","yoichi.hokkaido.jp","aioi.hyogo.jp","akashi.hyogo.jp","ako.hyogo.jp","amagasaki.hyogo.jp","aogaki.hyogo.jp","asago.hyogo.jp","ashiya.hyogo.jp","awaji.hyogo.jp","fukusaki.hyogo.jp","goshiki.hyogo.jp","harima.hyogo.jp","himeji.hyogo.jp","ichikawa.hyogo.jp","inagawa.hyogo.jp","itami.hyogo.jp","kakogawa.hyogo.jp","kamigori.hyogo.jp","kamikawa.hyogo.jp","kasai.hyogo.jp","kasuga.hyogo.jp","kawanishi.hyogo.jp","miki.hyogo.jp","minamiawaji.hyogo.jp","nishinomiya.hyogo.jp","nishiwaki.hyogo.jp","ono.hyogo.jp","sanda.hyogo.jp","sannan.hyogo.jp","sasayama.hyogo.jp","sayo.hyogo.jp","shingu.hyogo.jp","shinonsen.hyogo.jp","shiso.hyogo.jp","sumoto.hyogo.jp","taishi.hyogo.jp","taka.hyogo.jp","takarazuka.hyogo.jp","takasago.hyogo.jp","takino.hyogo.jp","tamba.hyogo.jp","tatsuno.hyogo.jp","toyooka.hyogo.jp","yabu.hyogo.jp","yashiro.hyogo.jp","yoka.hyogo.jp","yokawa.hyogo.jp","ami.ibaraki.jp","asahi.ibaraki.jp","bando.ibaraki.jp","chikusei.ibaraki.jp","daigo.ibaraki.jp","fujishiro.ibaraki.jp","hitachi.ibaraki.jp","hitachinaka.ibaraki.jp","hitachiomiya.ibaraki.jp","hitachiota.ibaraki.jp","ibaraki.ibaraki.jp","ina.ibaraki.jp","inashiki.ibaraki.jp","itako.ibaraki.jp","iwama.ibaraki.jp","joso.ibaraki.jp","kamisu.ibaraki.jp","kasama.ibaraki.jp","kashima.ibaraki.jp","kasumigaura.ibaraki.jp","koga.ibaraki.jp","miho.ibaraki.jp","mito.ibaraki.jp","moriya.ibaraki.jp","naka.ibaraki.jp","namegata.ibaraki.jp","oarai.ibaraki.jp","ogawa.ibaraki.jp","omitama.ibaraki.jp","ryugasaki.ibaraki.jp","sakai.ibaraki.jp","sakuragawa.ibaraki.jp","shimodate.ibaraki.jp","shimotsuma.ibaraki.jp","shirosato.ibaraki.jp","sowa.ibaraki.jp","suifu.ibaraki.jp","takahagi.ibaraki.jp","tamatsukuri.ibaraki.jp","tokai.ibaraki.jp","tomobe.ibaraki.jp","tone.ibaraki.jp","toride.ibaraki.jp","tsuchiura.ibaraki.jp","tsukuba.ibaraki.jp","uchihara.ibaraki.jp","ushiku.ibaraki.jp","yachiyo.ibaraki.jp","yamagata.ibaraki.jp","yawara.ibaraki.jp","yuki.ibaraki.jp","anamizu.ishikawa.jp","hakui.ishikawa.jp","hakusan.ishikawa.jp","kaga.ishikawa.jp","kahoku.ishikawa.jp","kanazawa.ishikawa.jp","kawakita.ishikawa.jp","komatsu.ishikawa.jp","nakanoto.ishikawa.jp","nanao.ishikawa.jp","nomi.ishikawa.jp","nonoichi.ishikawa.jp","noto.ishikawa.jp","shika.ishikawa.jp","suzu.ishikawa.jp","tsubata.ishikawa.jp","tsurugi.ishikawa.jp","uchinada.ishikawa.jp","wajima.ishikawa.jp","fudai.iwate.jp","fujisawa.iwate.jp","hanamaki.iwate.jp","hiraizumi.iwate.jp","hirono.iwate.jp","ichinohe.iwate.jp","ichinoseki.iwate.jp","iwaizumi.iwate.jp","iwate.iwate.jp","joboji.iwate.jp","kamaishi.iwate.jp","kanegasaki.iwate.jp","karumai.iwate.jp","kawai.iwate.jp","kitakami.iwate.jp","kuji.iwate.jp","kunohe.iwate.jp","kuzumaki.iwate.jp","miyako.iwate.jp","mizusawa.iwate.jp","morioka.iwate.jp","ninohe.iwate.jp","noda.iwate.jp","ofunato.iwate.jp","oshu.iwate.jp","otsuchi.iwate.jp","rikuzentakata.iwate.jp","shiwa.iwate.jp","shizukuishi.iwate.jp","sumita.iwate.jp","tanohata.iwate.jp","tono.iwate.jp","yahaba.iwate.jp","yamada.iwate.jp","ayagawa.kagawa.jp","higashikagawa.kagawa.jp","kanonji.kagawa.jp","kotohira.kagawa.jp","manno.kagawa.jp","marugame.kagawa.jp","mitoyo.kagawa.jp","naoshima.kagawa.jp","sanuki.kagawa.jp","tadotsu.kagawa.jp","takamatsu.kagawa.jp","tonosho.kagawa.jp","uchinomi.kagawa.jp","utazu.kagawa.jp","zentsuji.kagawa.jp","akune.kagoshima.jp","amami.kagoshima.jp","hioki.kagoshima.jp","isa.kagoshima.jp","isen.kagoshima.jp","izumi.kagoshima.jp","kagoshima.kagoshima.jp","kanoya.kagoshima.jp","kawanabe.kagoshima.jp","kinko.kagoshima.jp","kouyama.kagoshima.jp","makurazaki.kagoshima.jp","matsumoto.kagoshima.jp","minamitane.kagoshima.jp","nakatane.kagoshima.jp","nishinoomote.kagoshima.jp","satsumasendai.kagoshima.jp","soo.kagoshima.jp","tarumizu.kagoshima.jp","yusui.kagoshima.jp","aikawa.kanagawa.jp","atsugi.kanagawa.jp","ayase.kanagawa.jp","chigasaki.kanagawa.jp","ebina.kanagawa.jp","fujisawa.kanagawa.jp","hadano.kanagawa.jp","hakone.kanagawa.jp","hiratsuka.kanagawa.jp","isehara.kanagawa.jp","kaisei.kanagawa.jp","kamakura.kanagawa.jp","kiyokawa.kanagawa.jp","matsuda.kanagawa.jp","minamiashigara.kanagawa.jp","miura.kanagawa.jp","nakai.kanagawa.jp","ninomiya.kanagawa.jp","odawara.kanagawa.jp","oi.kanagawa.jp","oiso.kanagawa.jp","sagamihara.kanagawa.jp","samukawa.kanagawa.jp","tsukui.kanagawa.jp","yamakita.kanagawa.jp","yamato.kanagawa.jp","yokosuka.kanagawa.jp","yugawara.kanagawa.jp","zama.kanagawa.jp","zushi.kanagawa.jp","aki.kochi.jp","geisei.kochi.jp","hidaka.kochi.jp","higashitsuno.kochi.jp","ino.kochi.jp","kagami.kochi.jp","kami.kochi.jp","kitagawa.kochi.jp","kochi.kochi.jp","mihara.kochi.jp","motoyama.kochi.jp","muroto.kochi.jp","nahari.kochi.jp","nakamura.kochi.jp","nankoku.kochi.jp","nishitosa.kochi.jp","niyodogawa.kochi.jp","ochi.kochi.jp","okawa.kochi.jp","otoyo.kochi.jp","otsuki.kochi.jp","sakawa.kochi.jp","sukumo.kochi.jp","susaki.kochi.jp","tosa.kochi.jp","tosashimizu.kochi.jp","toyo.kochi.jp","tsuno.kochi.jp","umaji.kochi.jp","yasuda.kochi.jp","yusuhara.kochi.jp","amakusa.kumamoto.jp","arao.kumamoto.jp","aso.kumamoto.jp","choyo.kumamoto.jp","gyokuto.kumamoto.jp","kamiamakusa.kumamoto.jp","kikuchi.kumamoto.jp","kumamoto.kumamoto.jp","mashiki.kumamoto.jp","mifune.kumamoto.jp","minamata.kumamoto.jp","minamioguni.kumamoto.jp","nagasu.kumamoto.jp","nishihara.kumamoto.jp","oguni.kumamoto.jp","ozu.kumamoto.jp","sumoto.kumamoto.jp","takamori.kumamoto.jp","uki.kumamoto.jp","uto.kumamoto.jp","yamaga.kumamoto.jp","yamato.kumamoto.jp","yatsushiro.kumamoto.jp","ayabe.kyoto.jp","fukuchiyama.kyoto.jp","higashiyama.kyoto.jp","ide.kyoto.jp","ine.kyoto.jp","joyo.kyoto.jp","kameoka.kyoto.jp","kamo.kyoto.jp","kita.kyoto.jp","kizu.kyoto.jp","kumiyama.kyoto.jp","kyotamba.kyoto.jp","kyotanabe.kyoto.jp","kyotango.kyoto.jp","maizuru.kyoto.jp","minami.kyoto.jp","minamiyamashiro.kyoto.jp","miyazu.kyoto.jp","muko.kyoto.jp","nagaokakyo.kyoto.jp","nakagyo.kyoto.jp","nantan.kyoto.jp","oyamazaki.kyoto.jp","sakyo.kyoto.jp","seika.kyoto.jp","tanabe.kyoto.jp","uji.kyoto.jp","ujitawara.kyoto.jp","wazuka.kyoto.jp","yamashina.kyoto.jp","yawata.kyoto.jp","asahi.mie.jp","inabe.mie.jp","ise.mie.jp","kameyama.mie.jp","kawagoe.mie.jp","kiho.mie.jp","kisosaki.mie.jp","kiwa.mie.jp","komono.mie.jp","kumano.mie.jp","kuwana.mie.jp","matsusaka.mie.jp","meiwa.mie.jp","mihama.mie.jp","minamiise.mie.jp","misugi.mie.jp","miyama.mie.jp","nabari.mie.jp","shima.mie.jp","suzuka.mie.jp","tado.mie.jp","taiki.mie.jp","taki.mie.jp","tamaki.mie.jp","toba.mie.jp","tsu.mie.jp","udono.mie.jp","ureshino.mie.jp","watarai.mie.jp","yokkaichi.mie.jp","furukawa.miyagi.jp","higashimatsushima.miyagi.jp","ishinomaki.miyagi.jp","iwanuma.miyagi.jp","kakuda.miyagi.jp","kami.miyagi.jp","kawasaki.miyagi.jp","marumori.miyagi.jp","matsushima.miyagi.jp","minamisanriku.miyagi.jp","misato.miyagi.jp","murata.miyagi.jp","natori.miyagi.jp","ogawara.miyagi.jp","ohira.miyagi.jp","onagawa.miyagi.jp","osaki.miyagi.jp","rifu.miyagi.jp","semine.miyagi.jp","shibata.miyagi.jp","shichikashuku.miyagi.jp","shikama.miyagi.jp","shiogama.miyagi.jp","shiroishi.miyagi.jp","tagajo.miyagi.jp","taiwa.miyagi.jp","tome.miyagi.jp","tomiya.miyagi.jp","wakuya.miyagi.jp","watari.miyagi.jp","yamamoto.miyagi.jp","zao.miyagi.jp","aya.miyazaki.jp","ebino.miyazaki.jp","gokase.miyazaki.jp","hyuga.miyazaki.jp","kadogawa.miyazaki.jp","kawaminami.miyazaki.jp","kijo.miyazaki.jp","kitagawa.miyazaki.jp","kitakata.miyazaki.jp","kitaura.miyazaki.jp","kobayashi.miyazaki.jp","kunitomi.miyazaki.jp","kushima.miyazaki.jp","mimata.miyazaki.jp","miyakonojo.miyazaki.jp","miyazaki.miyazaki.jp","morotsuka.miyazaki.jp","nichinan.miyazaki.jp","nishimera.miyazaki.jp","nobeoka.miyazaki.jp","saito.miyazaki.jp","shiiba.miyazaki.jp","shintomi.miyazaki.jp","takaharu.miyazaki.jp","takanabe.miyazaki.jp","takazaki.miyazaki.jp","tsuno.miyazaki.jp","achi.nagano.jp","agematsu.nagano.jp","anan.nagano.jp","aoki.nagano.jp","asahi.nagano.jp","azumino.nagano.jp","chikuhoku.nagano.jp","chikuma.nagano.jp","chino.nagano.jp","fujimi.nagano.jp","hakuba.nagano.jp","hara.nagano.jp","hiraya.nagano.jp","iida.nagano.jp","iijima.nagano.jp","iiyama.nagano.jp","iizuna.nagano.jp","ikeda.nagano.jp","ikusaka.nagano.jp","ina.nagano.jp","karuizawa.nagano.jp","kawakami.nagano.jp","kiso.nagano.jp","kisofukushima.nagano.jp","kitaaiki.nagano.jp","komagane.nagano.jp","komoro.nagano.jp","matsukawa.nagano.jp","matsumoto.nagano.jp","miasa.nagano.jp","minamiaiki.nagano.jp","minamimaki.nagano.jp","minamiminowa.nagano.jp","minowa.nagano.jp","miyada.nagano.jp","miyota.nagano.jp","mochizuki.nagano.jp","nagano.nagano.jp","nagawa.nagano.jp","nagiso.nagano.jp","nakagawa.nagano.jp","nakano.nagano.jp","nozawaonsen.nagano.jp","obuse.nagano.jp","ogawa.nagano.jp","okaya.nagano.jp","omachi.nagano.jp","omi.nagano.jp","ookuwa.nagano.jp","ooshika.nagano.jp","otaki.nagano.jp","otari.nagano.jp","sakae.nagano.jp","sakaki.nagano.jp","saku.nagano.jp","sakuho.nagano.jp","shimosuwa.nagano.jp","shinanomachi.nagano.jp","shiojiri.nagano.jp","suwa.nagano.jp","suzaka.nagano.jp","takagi.nagano.jp","takamori.nagano.jp","takayama.nagano.jp","tateshina.nagano.jp","tatsuno.nagano.jp","togakushi.nagano.jp","togura.nagano.jp","tomi.nagano.jp","ueda.nagano.jp","wada.nagano.jp","yamagata.nagano.jp","yamanouchi.nagano.jp","yasaka.nagano.jp","yasuoka.nagano.jp","chijiwa.nagasaki.jp","futsu.nagasaki.jp","goto.nagasaki.jp","hasami.nagasaki.jp","hirado.nagasaki.jp","iki.nagasaki.jp","isahaya.nagasaki.jp","kawatana.nagasaki.jp","kuchinotsu.nagasaki.jp","matsuura.nagasaki.jp","nagasaki.nagasaki.jp","obama.nagasaki.jp","omura.nagasaki.jp","oseto.nagasaki.jp","saikai.nagasaki.jp","sasebo.nagasaki.jp","seihi.nagasaki.jp","shimabara.nagasaki.jp","shinkamigoto.nagasaki.jp","togitsu.nagasaki.jp","tsushima.nagasaki.jp","unzen.nagasaki.jp","ando.nara.jp","gose.nara.jp","heguri.nara.jp","higashiyoshino.nara.jp","ikaruga.nara.jp","ikoma.nara.jp","kamikitayama.nara.jp","kanmaki.nara.jp","kashiba.nara.jp","kashihara.nara.jp","katsuragi.nara.jp","kawai.nara.jp","kawakami.nara.jp","kawanishi.nara.jp","koryo.nara.jp","kurotaki.nara.jp","mitsue.nara.jp","miyake.nara.jp","nara.nara.jp","nosegawa.nara.jp","oji.nara.jp","ouda.nara.jp","oyodo.nara.jp","sakurai.nara.jp","sango.nara.jp","shimoichi.nara.jp","shimokitayama.nara.jp","shinjo.nara.jp","soni.nara.jp","takatori.nara.jp","tawaramoto.nara.jp","tenkawa.nara.jp","tenri.nara.jp","uda.nara.jp","yamatokoriyama.nara.jp","yamatotakada.nara.jp","yamazoe.nara.jp","yoshino.nara.jp","aga.niigata.jp","agano.niigata.jp","gosen.niigata.jp","itoigawa.niigata.jp","izumozaki.niigata.jp","joetsu.niigata.jp","kamo.niigata.jp","kariwa.niigata.jp","kashiwazaki.niigata.jp","minamiuonuma.niigata.jp","mitsuke.niigata.jp","muika.niigata.jp","murakami.niigata.jp","myoko.niigata.jp","nagaoka.niigata.jp","niigata.niigata.jp","ojiya.niigata.jp","omi.niigata.jp","sado.niigata.jp","sanjo.niigata.jp","seiro.niigata.jp","seirou.niigata.jp","sekikawa.niigata.jp","shibata.niigata.jp","tagami.niigata.jp","tainai.niigata.jp","tochio.niigata.jp","tokamachi.niigata.jp","tsubame.niigata.jp","tsunan.niigata.jp","uonuma.niigata.jp","yahiko.niigata.jp","yoita.niigata.jp","yuzawa.niigata.jp","beppu.oita.jp","bungoono.oita.jp","bungotakada.oita.jp","hasama.oita.jp","hiji.oita.jp","himeshima.oita.jp","hita.oita.jp","kamitsue.oita.jp","kokonoe.oita.jp","kuju.oita.jp","kunisaki.oita.jp","kusu.oita.jp","oita.oita.jp","saiki.oita.jp","taketa.oita.jp","tsukumi.oita.jp","usa.oita.jp","usuki.oita.jp","yufu.oita.jp","akaiwa.okayama.jp","asakuchi.okayama.jp","bizen.okayama.jp","hayashima.okayama.jp","ibara.okayama.jp","kagamino.okayama.jp","kasaoka.okayama.jp","kibichuo.okayama.jp","kumenan.okayama.jp","kurashiki.okayama.jp","maniwa.okayama.jp","misaki.okayama.jp","nagi.okayama.jp","niimi.okayama.jp","nishiawakura.okayama.jp","okayama.okayama.jp","satosho.okayama.jp","setouchi.okayama.jp","shinjo.okayama.jp","shoo.okayama.jp","soja.okayama.jp","takahashi.okayama.jp","tamano.okayama.jp","tsuyama.okayama.jp","wake.okayama.jp","yakage.okayama.jp","aguni.okinawa.jp","ginowan.okinawa.jp","ginoza.okinawa.jp","gushikami.okinawa.jp","haebaru.okinawa.jp","higashi.okinawa.jp","hirara.okinawa.jp","iheya.okinawa.jp","ishigaki.okinawa.jp","ishikawa.okinawa.jp","itoman.okinawa.jp","izena.okinawa.jp","kadena.okinawa.jp","kin.okinawa.jp","kitadaito.okinawa.jp","kitanakagusuku.okinawa.jp","kumejima.okinawa.jp","kunigami.okinawa.jp","minamidaito.okinawa.jp","motobu.okinawa.jp","nago.okinawa.jp","naha.okinawa.jp","nakagusuku.okinawa.jp","nakijin.okinawa.jp","nanjo.okinawa.jp","nishihara.okinawa.jp","ogimi.okinawa.jp","okinawa.okinawa.jp","onna.okinawa.jp","shimoji.okinawa.jp","taketomi.okinawa.jp","tarama.okinawa.jp","tokashiki.okinawa.jp","tomigusuku.okinawa.jp","tonaki.okinawa.jp","urasoe.okinawa.jp","uruma.okinawa.jp","yaese.okinawa.jp","yomitan.okinawa.jp","yonabaru.okinawa.jp","yonaguni.okinawa.jp","zamami.okinawa.jp","abeno.osaka.jp","chihayaakasaka.osaka.jp","chuo.osaka.jp","daito.osaka.jp","fujiidera.osaka.jp","habikino.osaka.jp","hannan.osaka.jp","higashiosaka.osaka.jp","higashisumiyoshi.osaka.jp","higashiyodogawa.osaka.jp","hirakata.osaka.jp","ibaraki.osaka.jp","ikeda.osaka.jp","izumi.osaka.jp","izumiotsu.osaka.jp","izumisano.osaka.jp","kadoma.osaka.jp","kaizuka.osaka.jp","kanan.osaka.jp","kashiwara.osaka.jp","katano.osaka.jp","kawachinagano.osaka.jp","kishiwada.osaka.jp","kita.osaka.jp","kumatori.osaka.jp","matsubara.osaka.jp","minato.osaka.jp","minoh.osaka.jp","misaki.osaka.jp","moriguchi.osaka.jp","neyagawa.osaka.jp","nishi.osaka.jp","nose.osaka.jp","osakasayama.osaka.jp","sakai.osaka.jp","sayama.osaka.jp","sennan.osaka.jp","settsu.osaka.jp","shijonawate.osaka.jp","shimamoto.osaka.jp","suita.osaka.jp","tadaoka.osaka.jp","taishi.osaka.jp","tajiri.osaka.jp","takaishi.osaka.jp","takatsuki.osaka.jp","tondabayashi.osaka.jp","toyonaka.osaka.jp","toyono.osaka.jp","yao.osaka.jp","ariake.saga.jp","arita.saga.jp","fukudomi.saga.jp","genkai.saga.jp","hamatama.saga.jp","hizen.saga.jp","imari.saga.jp","kamimine.saga.jp","kanzaki.saga.jp","karatsu.saga.jp","kashima.saga.jp","kitagata.saga.jp","kitahata.saga.jp","kiyama.saga.jp","kouhoku.saga.jp","kyuragi.saga.jp","nishiarita.saga.jp","ogi.saga.jp","omachi.saga.jp","ouchi.saga.jp","saga.saga.jp","shiroishi.saga.jp","taku.saga.jp","tara.saga.jp","tosu.saga.jp","yoshinogari.saga.jp","arakawa.saitama.jp","asaka.saitama.jp","chichibu.saitama.jp","fujimi.saitama.jp","fujimino.saitama.jp","fukaya.saitama.jp","hanno.saitama.jp","hanyu.saitama.jp","hasuda.saitama.jp","hatogaya.saitama.jp","hatoyama.saitama.jp","hidaka.saitama.jp","higashichichibu.saitama.jp","higashimatsuyama.saitama.jp","honjo.saitama.jp","ina.saitama.jp","iruma.saitama.jp","iwatsuki.saitama.jp","kamiizumi.saitama.jp","kamikawa.saitama.jp","kamisato.saitama.jp","kasukabe.saitama.jp","kawagoe.saitama.jp","kawaguchi.saitama.jp","kawajima.saitama.jp","kazo.saitama.jp","kitamoto.saitama.jp","koshigaya.saitama.jp","kounosu.saitama.jp","kuki.saitama.jp","kumagaya.saitama.jp","matsubushi.saitama.jp","minano.saitama.jp","misato.saitama.jp","miyashiro.saitama.jp","miyoshi.saitama.jp","moroyama.saitama.jp","nagatoro.saitama.jp","namegawa.saitama.jp","niiza.saitama.jp","ogano.saitama.jp","ogawa.saitama.jp","ogose.saitama.jp","okegawa.saitama.jp","omiya.saitama.jp","otaki.saitama.jp","ranzan.saitama.jp","ryokami.saitama.jp","saitama.saitama.jp","sakado.saitama.jp","satte.saitama.jp","sayama.saitama.jp","shiki.saitama.jp","shiraoka.saitama.jp","soka.saitama.jp","sugito.saitama.jp","toda.saitama.jp","tokigawa.saitama.jp","tokorozawa.saitama.jp","tsurugashima.saitama.jp","urawa.saitama.jp","warabi.saitama.jp","yashio.saitama.jp","yokoze.saitama.jp","yono.saitama.jp","yorii.saitama.jp","yoshida.saitama.jp","yoshikawa.saitama.jp","yoshimi.saitama.jp","aisho.shiga.jp","gamo.shiga.jp","higashiomi.shiga.jp","hikone.shiga.jp","koka.shiga.jp","konan.shiga.jp","kosei.shiga.jp","koto.shiga.jp","kusatsu.shiga.jp","maibara.shiga.jp","moriyama.shiga.jp","nagahama.shiga.jp","nishiazai.shiga.jp","notogawa.shiga.jp","omihachiman.shiga.jp","otsu.shiga.jp","ritto.shiga.jp","ryuoh.shiga.jp","takashima.shiga.jp","takatsuki.shiga.jp","torahime.shiga.jp","toyosato.shiga.jp","yasu.shiga.jp","akagi.shimane.jp","ama.shimane.jp","gotsu.shimane.jp","hamada.shimane.jp","higashiizumo.shimane.jp","hikawa.shimane.jp","hikimi.shimane.jp","izumo.shimane.jp","kakinoki.shimane.jp","masuda.shimane.jp","matsue.shimane.jp","misato.shimane.jp","nishinoshima.shimane.jp","ohda.shimane.jp","okinoshima.shimane.jp","okuizumo.shimane.jp","shimane.shimane.jp","tamayu.shimane.jp","tsuwano.shimane.jp","unnan.shimane.jp","yakumo.shimane.jp","yasugi.shimane.jp","yatsuka.shimane.jp","arai.shizuoka.jp","atami.shizuoka.jp","fuji.shizuoka.jp","fujieda.shizuoka.jp","fujikawa.shizuoka.jp","fujinomiya.shizuoka.jp","fukuroi.shizuoka.jp","gotemba.shizuoka.jp","haibara.shizuoka.jp","hamamatsu.shizuoka.jp","higashiizu.shizuoka.jp","ito.shizuoka.jp","iwata.shizuoka.jp","izu.shizuoka.jp","izunokuni.shizuoka.jp","kakegawa.shizuoka.jp","kannami.shizuoka.jp","kawanehon.shizuoka.jp","kawazu.shizuoka.jp","kikugawa.shizuoka.jp","kosai.shizuoka.jp","makinohara.shizuoka.jp","matsuzaki.shizuoka.jp","minamiizu.shizuoka.jp","mishima.shizuoka.jp","morimachi.shizuoka.jp","nishiizu.shizuoka.jp","numazu.shizuoka.jp","omaezaki.shizuoka.jp","shimada.shizuoka.jp","shimizu.shizuoka.jp","shimoda.shizuoka.jp","shizuoka.shizuoka.jp","susono.shizuoka.jp","yaizu.shizuoka.jp","yoshida.shizuoka.jp","ashikaga.tochigi.jp","bato.tochigi.jp","haga.tochigi.jp","ichikai.tochigi.jp","iwafune.tochigi.jp","kaminokawa.tochigi.jp","kanuma.tochigi.jp","karasuyama.tochigi.jp","kuroiso.tochigi.jp","mashiko.tochigi.jp","mibu.tochigi.jp","moka.tochigi.jp","motegi.tochigi.jp","nasu.tochigi.jp","nasushiobara.tochigi.jp","nikko.tochigi.jp","nishikata.tochigi.jp","nogi.tochigi.jp","ohira.tochigi.jp","ohtawara.tochigi.jp","oyama.tochigi.jp","sakura.tochigi.jp","sano.tochigi.jp","shimotsuke.tochigi.jp","shioya.tochigi.jp","takanezawa.tochigi.jp","tochigi.tochigi.jp","tsuga.tochigi.jp","ujiie.tochigi.jp","utsunomiya.tochigi.jp","yaita.tochigi.jp","aizumi.tokushima.jp","anan.tokushima.jp","ichiba.tokushima.jp","itano.tokushima.jp","kainan.tokushima.jp","komatsushima.tokushima.jp","matsushige.tokushima.jp","mima.tokushima.jp","minami.tokushima.jp","miyoshi.tokushima.jp","mugi.tokushima.jp","nakagawa.tokushima.jp","naruto.tokushima.jp","sanagochi.tokushima.jp","shishikui.tokushima.jp","tokushima.tokushima.jp","wajiki.tokushima.jp","adachi.tokyo.jp","akiruno.tokyo.jp","akishima.tokyo.jp","aogashima.tokyo.jp","arakawa.tokyo.jp","bunkyo.tokyo.jp","chiyoda.tokyo.jp","chofu.tokyo.jp","chuo.tokyo.jp","edogawa.tokyo.jp","fuchu.tokyo.jp","fussa.tokyo.jp","hachijo.tokyo.jp","hachioji.tokyo.jp","hamura.tokyo.jp","higashikurume.tokyo.jp","higashimurayama.tokyo.jp","higashiyamato.tokyo.jp","hino.tokyo.jp","hinode.tokyo.jp","hinohara.tokyo.jp","inagi.tokyo.jp","itabashi.tokyo.jp","katsushika.tokyo.jp","kita.tokyo.jp","kiyose.tokyo.jp","kodaira.tokyo.jp","koganei.tokyo.jp","kokubunji.tokyo.jp","komae.tokyo.jp","koto.tokyo.jp","kouzushima.tokyo.jp","kunitachi.tokyo.jp","machida.tokyo.jp","meguro.tokyo.jp","minato.tokyo.jp","mitaka.tokyo.jp","mizuho.tokyo.jp","musashimurayama.tokyo.jp","musashino.tokyo.jp","nakano.tokyo.jp","nerima.tokyo.jp","ogasawara.tokyo.jp","okutama.tokyo.jp","ome.tokyo.jp","oshima.tokyo.jp","ota.tokyo.jp","setagaya.tokyo.jp","shibuya.tokyo.jp","shinagawa.tokyo.jp","shinjuku.tokyo.jp","suginami.tokyo.jp","sumida.tokyo.jp","tachikawa.tokyo.jp","taito.tokyo.jp","tama.tokyo.jp","toshima.tokyo.jp","chizu.tottori.jp","hino.tottori.jp","kawahara.tottori.jp","koge.tottori.jp","kotoura.tottori.jp","misasa.tottori.jp","nanbu.tottori.jp","nichinan.tottori.jp","sakaiminato.tottori.jp","tottori.tottori.jp","wakasa.tottori.jp","yazu.tottori.jp","yonago.tottori.jp","asahi.toyama.jp","fuchu.toyama.jp","fukumitsu.toyama.jp","funahashi.toyama.jp","himi.toyama.jp","imizu.toyama.jp","inami.toyama.jp","johana.toyama.jp","kamiichi.toyama.jp","kurobe.toyama.jp","nakaniikawa.toyama.jp","namerikawa.toyama.jp","nanto.toyama.jp","nyuzen.toyama.jp","oyabe.toyama.jp","taira.toyama.jp","takaoka.toyama.jp","tateyama.toyama.jp","toga.toyama.jp","tonami.toyama.jp","toyama.toyama.jp","unazuki.toyama.jp","uozu.toyama.jp","yamada.toyama.jp","arida.wakayama.jp","aridagawa.wakayama.jp","gobo.wakayama.jp","hashimoto.wakayama.jp","hidaka.wakayama.jp","hirogawa.wakayama.jp","inami.wakayama.jp","iwade.wakayama.jp","kainan.wakayama.jp","kamitonda.wakayama.jp","katsuragi.wakayama.jp","kimino.wakayama.jp","kinokawa.wakayama.jp","kitayama.wakayama.jp","koya.wakayama.jp","koza.wakayama.jp","kozagawa.wakayama.jp","kudoyama.wakayama.jp","kushimoto.wakayama.jp","mihama.wakayama.jp","misato.wakayama.jp","nachikatsuura.wakayama.jp","shingu.wakayama.jp","shirahama.wakayama.jp","taiji.wakayama.jp","tanabe.wakayama.jp","wakayama.wakayama.jp","yuasa.wakayama.jp","yura.wakayama.jp","asahi.yamagata.jp","funagata.yamagata.jp","higashine.yamagata.jp","iide.yamagata.jp","kahoku.yamagata.jp","kaminoyama.yamagata.jp","kaneyama.yamagata.jp","kawanishi.yamagata.jp","mamurogawa.yamagata.jp","mikawa.yamagata.jp","murayama.yamagata.jp","nagai.yamagata.jp","nakayama.yamagata.jp","nanyo.yamagata.jp","nishikawa.yamagata.jp","obanazawa.yamagata.jp","oe.yamagata.jp","oguni.yamagata.jp","ohkura.yamagata.jp","oishida.yamagata.jp","sagae.yamagata.jp","sakata.yamagata.jp","sakegawa.yamagata.jp","shinjo.yamagata.jp","shirataka.yamagata.jp","shonai.yamagata.jp","takahata.yamagata.jp","tendo.yamagata.jp","tozawa.yamagata.jp","tsuruoka.yamagata.jp","yamagata.yamagata.jp","yamanobe.yamagata.jp","yonezawa.yamagata.jp","yuza.yamagata.jp","abu.yamaguchi.jp","hagi.yamaguchi.jp","hikari.yamaguchi.jp","hofu.yamaguchi.jp","iwakuni.yamaguchi.jp","kudamatsu.yamaguchi.jp","mitou.yamaguchi.jp","nagato.yamaguchi.jp","oshima.yamaguchi.jp","shimonoseki.yamaguchi.jp","shunan.yamaguchi.jp","tabuse.yamaguchi.jp","tokuyama.yamaguchi.jp","toyota.yamaguchi.jp","ube.yamaguchi.jp","yuu.yamaguchi.jp","chuo.yamanashi.jp","doshi.yamanashi.jp","fuefuki.yamanashi.jp","fujikawa.yamanashi.jp","fujikawaguchiko.yamanashi.jp","fujiyoshida.yamanashi.jp","hayakawa.yamanashi.jp","hokuto.yamanashi.jp","ichikawamisato.yamanashi.jp","kai.yamanashi.jp","kofu.yamanashi.jp","koshu.yamanashi.jp","kosuge.yamanashi.jp","minami-alps.yamanashi.jp","minobu.yamanashi.jp","nakamichi.yamanashi.jp","nanbu.yamanashi.jp","narusawa.yamanashi.jp","nirasaki.yamanashi.jp","nishikatsura.yamanashi.jp","oshino.yamanashi.jp","otsuki.yamanashi.jp","showa.yamanashi.jp","tabayama.yamanashi.jp","tsuru.yamanashi.jp","uenohara.yamanashi.jp","yamanakako.yamanashi.jp","yamanashi.yamanashi.jp","ke","ac.ke","co.ke","go.ke","info.ke","me.ke","mobi.ke","ne.ke","or.ke","sc.ke","kg","org.kg","net.kg","com.kg","edu.kg","gov.kg","mil.kg","*.kh","ki","edu.ki","biz.ki","net.ki","org.ki","gov.ki","info.ki","com.ki","km","org.km","nom.km","gov.km","prd.km","tm.km","edu.km","mil.km","ass.km","com.km","coop.km","asso.km","presse.km","medecin.km","notaires.km","pharmaciens.km","veterinaire.km","gouv.km","kn","net.kn","org.kn","edu.kn","gov.kn","kp","com.kp","edu.kp","gov.kp","org.kp","rep.kp","tra.kp","kr","ac.kr","co.kr","es.kr","go.kr","hs.kr","kg.kr","mil.kr","ms.kr","ne.kr","or.kr","pe.kr","re.kr","sc.kr","busan.kr","chungbuk.kr","chungnam.kr","daegu.kr","daejeon.kr","gangwon.kr","gwangju.kr","gyeongbuk.kr","gyeonggi.kr","gyeongnam.kr","incheon.kr","jeju.kr","jeonbuk.kr","jeonnam.kr","seoul.kr","ulsan.kr","kw","com.kw","edu.kw","emb.kw","gov.kw","ind.kw","net.kw","org.kw","ky","edu.ky","gov.ky","com.ky","org.ky","net.ky","kz","org.kz","edu.kz","net.kz","gov.kz","mil.kz","com.kz","la","int.la","net.la","info.la","edu.la","gov.la","per.la","com.la","org.la","lb","com.lb","edu.lb","gov.lb","net.lb","org.lb","lc","com.lc","net.lc","co.lc","org.lc","edu.lc","gov.lc","li","lk","gov.lk","sch.lk","net.lk","int.lk","com.lk","org.lk","edu.lk","ngo.lk","soc.lk","web.lk","ltd.lk","assn.lk","grp.lk","hotel.lk","ac.lk","lr","com.lr","edu.lr","gov.lr","org.lr","net.lr","ls","co.ls","org.ls","lt","gov.lt","lu","lv","com.lv","edu.lv","gov.lv","org.lv","mil.lv","id.lv","net.lv","asn.lv","conf.lv","ly","com.ly","net.ly","gov.ly","plc.ly","edu.ly","sch.ly","med.ly","org.ly","id.ly","ma","co.ma","net.ma","gov.ma","org.ma","ac.ma","press.ma","mc","tm.mc","asso.mc","md","me","co.me","net.me","org.me","edu.me","ac.me","gov.me","its.me","priv.me","mg","org.mg","nom.mg","gov.mg","prd.mg","tm.mg","edu.mg","mil.mg","com.mg","co.mg","mh","mil","mk","com.mk","org.mk","net.mk","edu.mk","gov.mk","inf.mk","name.mk","ml","com.ml","edu.ml","gouv.ml","gov.ml","net.ml","org.ml","presse.ml","*.mm","mn","gov.mn","edu.mn","org.mn","mo","com.mo","net.mo","org.mo","edu.mo","gov.mo","mobi","mp","mq","mr","gov.mr","ms","com.ms","edu.ms","gov.ms","net.ms","org.ms","mt","com.mt","edu.mt","net.mt","org.mt","mu","com.mu","net.mu","org.mu","gov.mu","ac.mu","co.mu","or.mu","museum","academy.museum","agriculture.museum","air.museum","airguard.museum","alabama.museum","alaska.museum","amber.museum","ambulance.museum","american.museum","americana.museum","americanantiques.museum","americanart.museum","amsterdam.museum","and.museum","annefrank.museum","anthro.museum","anthropology.museum","antiques.museum","aquarium.museum","arboretum.museum","archaeological.museum","archaeology.museum","architecture.museum","art.museum","artanddesign.museum","artcenter.museum","artdeco.museum","arteducation.museum","artgallery.museum","arts.museum","artsandcrafts.museum","asmatart.museum","assassination.museum","assisi.museum","association.museum","astronomy.museum","atlanta.museum","austin.museum","australia.museum","automotive.museum","aviation.museum","axis.museum","badajoz.museum","baghdad.museum","bahn.museum","bale.museum","baltimore.museum","barcelona.museum","baseball.museum","basel.museum","baths.museum","bauern.museum","beauxarts.museum","beeldengeluid.museum","bellevue.museum","bergbau.museum","berkeley.museum","berlin.museum","bern.museum","bible.museum","bilbao.museum","bill.museum","birdart.museum","birthplace.museum","bonn.museum","boston.museum","botanical.museum","botanicalgarden.museum","botanicgarden.museum","botany.museum","brandywinevalley.museum","brasil.museum","bristol.museum","british.museum","britishcolumbia.museum","broadcast.museum","brunel.museum","brussel.museum","brussels.museum","bruxelles.museum","building.museum","burghof.museum","bus.museum","bushey.museum","cadaques.museum","california.museum","cambridge.museum","can.museum","canada.museum","capebreton.museum","carrier.museum","cartoonart.museum","casadelamoneda.museum","castle.museum","castres.museum","celtic.museum","center.museum","chattanooga.museum","cheltenham.museum","chesapeakebay.museum","chicago.museum","children.museum","childrens.museum","childrensgarden.museum","chiropractic.museum","chocolate.museum","christiansburg.museum","cincinnati.museum","cinema.museum","circus.museum","civilisation.museum","civilization.museum","civilwar.museum","clinton.museum","clock.museum","coal.museum","coastaldefence.museum","cody.museum","coldwar.museum","collection.museum","colonialwilliamsburg.museum","coloradoplateau.museum","columbia.museum","columbus.museum","communication.museum","communications.museum","community.museum","computer.museum","computerhistory.museum","comunicações.museum","contemporary.museum","contemporaryart.museum","convent.museum","copenhagen.museum","corporation.museum","correios-e-telecomunicações.museum","corvette.museum","costume.museum","countryestate.museum","county.museum","crafts.museum","cranbrook.museum","creation.museum","cultural.museum","culturalcenter.museum","culture.museum","cyber.museum","cymru.museum","dali.museum","dallas.museum","database.museum","ddr.museum","decorativearts.museum","delaware.museum","delmenhorst.museum","denmark.museum","depot.museum","design.museum","detroit.museum","dinosaur.museum","discovery.museum","dolls.museum","donostia.museum","durham.museum","eastafrica.museum","eastcoast.museum","education.museum","educational.museum","egyptian.museum","eisenbahn.museum","elburg.museum","elvendrell.museum","embroidery.museum","encyclopedic.museum","england.museum","entomology.museum","environment.museum","environmentalconservation.museum","epilepsy.museum","essex.museum","estate.museum","ethnology.museum","exeter.museum","exhibition.museum","family.museum","farm.museum","farmequipment.museum","farmers.museum","farmstead.museum","field.museum","figueres.museum","filatelia.museum","film.museum","fineart.museum","finearts.museum","finland.museum","flanders.museum","florida.museum","force.museum","fortmissoula.museum","fortworth.museum","foundation.museum","francaise.museum","frankfurt.museum","franziskaner.museum","freemasonry.museum","freiburg.museum","fribourg.museum","frog.museum","fundacio.museum","furniture.museum","gallery.museum","garden.museum","gateway.museum","geelvinck.museum","gemological.museum","geology.museum","georgia.museum","giessen.museum","glas.museum","glass.museum","gorge.museum","grandrapids.museum","graz.museum","guernsey.museum","halloffame.museum","hamburg.museum","handson.museum","harvestcelebration.museum","hawaii.museum","health.museum","heimatunduhren.museum","hellas.museum","helsinki.museum","hembygdsforbund.museum","heritage.museum","histoire.museum","historical.museum","historicalsociety.museum","historichouses.museum","historisch.museum","historisches.museum","history.museum","historyofscience.museum","horology.museum","house.museum","humanities.museum","illustration.museum","imageandsound.museum","indian.museum","indiana.museum","indianapolis.museum","indianmarket.museum","intelligence.museum","interactive.museum","iraq.museum","iron.museum","isleofman.museum","jamison.museum","jefferson.museum","jerusalem.museum","jewelry.museum","jewish.museum","jewishart.museum","jfk.museum","journalism.museum","judaica.museum","judygarland.museum","juedisches.museum","juif.museum","karate.museum","karikatur.museum","kids.museum","koebenhavn.museum","koeln.museum","kunst.museum","kunstsammlung.museum","kunstunddesign.museum","labor.museum","labour.museum","lajolla.museum","lancashire.museum","landes.museum","lans.museum","läns.museum","larsson.museum","lewismiller.museum","lincoln.museum","linz.museum","living.museum","livinghistory.museum","localhistory.museum","london.museum","losangeles.museum","louvre.museum","loyalist.museum","lucerne.museum","luxembourg.museum","luzern.museum","mad.museum","madrid.museum","mallorca.museum","manchester.museum","mansion.museum","mansions.museum","manx.museum","marburg.museum","maritime.museum","maritimo.museum","maryland.museum","marylhurst.museum","media.museum","medical.museum","medizinhistorisches.museum","meeres.museum","memorial.museum","mesaverde.museum","michigan.museum","midatlantic.museum","military.museum","mill.museum","miners.museum","mining.museum","minnesota.museum","missile.museum","missoula.museum","modern.museum","moma.museum","money.museum","monmouth.museum","monticello.museum","montreal.museum","moscow.museum","motorcycle.museum","muenchen.museum","muenster.museum","mulhouse.museum","muncie.museum","museet.museum","museumcenter.museum","museumvereniging.museum","music.museum","national.museum","nationalfirearms.museum","nationalheritage.museum","nativeamerican.museum","naturalhistory.museum","naturalhistorymuseum.museum","naturalsciences.museum","nature.museum","naturhistorisches.museum","natuurwetenschappen.museum","naumburg.museum","naval.museum","nebraska.museum","neues.museum","newhampshire.museum","newjersey.museum","newmexico.museum","newport.museum","newspaper.museum","newyork.museum","niepce.museum","norfolk.museum","north.museum","nrw.museum","nuernberg.museum","nuremberg.museum","nyc.museum","nyny.museum","oceanographic.museum","oceanographique.museum","omaha.museum","online.museum","ontario.museum","openair.museum","oregon.museum","oregontrail.museum","otago.museum","oxford.museum","pacific.museum","paderborn.museum","palace.museum","paleo.museum","palmsprings.museum","panama.museum","paris.museum","pasadena.museum","pharmacy.museum","philadelphia.museum","philadelphiaarea.museum","philately.museum","phoenix.museum","photography.museum","pilots.museum","pittsburgh.museum","planetarium.museum","plantation.museum","plants.museum","plaza.museum","portal.museum","portland.museum","portlligat.museum","posts-and-telecommunications.museum","preservation.museum","presidio.museum","press.museum","project.museum","public.museum","pubol.museum","quebec.museum","railroad.museum","railway.museum","research.museum","resistance.museum","riodejaneiro.museum","rochester.museum","rockart.museum","roma.museum","russia.museum","saintlouis.museum","salem.museum","salvadordali.museum","salzburg.museum","sandiego.museum","sanfrancisco.museum","santabarbara.museum","santacruz.museum","santafe.museum","saskatchewan.museum","satx.museum","savannahga.museum","schlesisches.museum","schoenbrunn.museum","schokoladen.museum","school.museum","schweiz.museum","science.museum","scienceandhistory.museum","scienceandindustry.museum","sciencecenter.museum","sciencecenters.museum","science-fiction.museum","sciencehistory.museum","sciences.museum","sciencesnaturelles.museum","scotland.museum","seaport.museum","settlement.museum","settlers.museum","shell.museum","sherbrooke.museum","sibenik.museum","silk.museum","ski.museum","skole.museum","society.museum","sologne.museum","soundandvision.museum","southcarolina.museum","southwest.museum","space.museum","spy.museum","square.museum","stadt.museum","stalbans.museum","starnberg.museum","state.museum","stateofdelaware.museum","station.museum","steam.museum","steiermark.museum","stjohn.museum","stockholm.museum","stpetersburg.museum","stuttgart.museum","suisse.museum","surgeonshall.museum","surrey.museum","svizzera.museum","sweden.museum","sydney.museum","tank.museum","tcm.museum","technology.museum","telekommunikation.museum","television.museum","texas.museum","textile.museum","theater.museum","time.museum","timekeeping.museum","topology.museum","torino.museum","touch.museum","town.museum","transport.museum","tree.museum","trolley.museum","trust.museum","trustee.museum","uhren.museum","ulm.museum","undersea.museum","university.museum","usa.museum","usantiques.museum","usarts.museum","uscountryestate.museum","usculture.museum","usdecorativearts.museum","usgarden.museum","ushistory.museum","ushuaia.museum","uslivinghistory.museum","utah.museum","uvic.museum","valley.museum","vantaa.museum","versailles.museum","viking.museum","village.museum","virginia.museum","virtual.museum","virtuel.museum","vlaanderen.museum","volkenkunde.museum","wales.museum","wallonie.museum","war.museum","washingtondc.museum","watchandclock.museum","watch-and-clock.museum","western.museum","westfalen.museum","whaling.museum","wildlife.museum","williamsburg.museum","windmill.museum","workshop.museum","york.museum","yorkshire.museum","yosemite.museum","youth.museum","zoological.museum","zoology.museum","ירושלים.museum","иком.museum","mv","aero.mv","biz.mv","com.mv","coop.mv","edu.mv","gov.mv","info.mv","int.mv","mil.mv","museum.mv","name.mv","net.mv","org.mv","pro.mv","mw","ac.mw","biz.mw","co.mw","com.mw","coop.mw","edu.mw","gov.mw","int.mw","museum.mw","net.mw","org.mw","mx","com.mx","org.mx","gob.mx","edu.mx","net.mx","my","com.my","net.my","org.my","gov.my","edu.my","mil.my","name.my","mz","ac.mz","adv.mz","co.mz","edu.mz","gov.mz","mil.mz","net.mz","org.mz","na","info.na","pro.na","name.na","school.na","or.na","dr.na","us.na","mx.na","ca.na","in.na","cc.na","tv.na","ws.na","mobi.na","co.na","com.na","org.na","name","nc","asso.nc","nom.nc","ne","net","nf","com.nf","net.nf","per.nf","rec.nf","web.nf","arts.nf","firm.nf","info.nf","other.nf","store.nf","ng","com.ng","edu.ng","gov.ng","i.ng","mil.ng","mobi.ng","name.ng","net.ng","org.ng","sch.ng","ni","ac.ni","biz.ni","co.ni","com.ni","edu.ni","gob.ni","in.ni","info.ni","int.ni","mil.ni","net.ni","nom.ni","org.ni","web.ni","nl","bv.nl","no","fhs.no","vgs.no","fylkesbibl.no","folkebibl.no","museum.no","idrett.no","priv.no","mil.no","stat.no","dep.no","kommune.no","herad.no","aa.no","ah.no","bu.no","fm.no","hl.no","hm.no","jan-mayen.no","mr.no","nl.no","nt.no","of.no","ol.no","oslo.no","rl.no","sf.no","st.no","svalbard.no","tm.no","tr.no","va.no","vf.no","gs.aa.no","gs.ah.no","gs.bu.no","gs.fm.no","gs.hl.no","gs.hm.no","gs.jan-mayen.no","gs.mr.no","gs.nl.no","gs.nt.no","gs.of.no","gs.ol.no","gs.oslo.no","gs.rl.no","gs.sf.no","gs.st.no","gs.svalbard.no","gs.tm.no","gs.tr.no","gs.va.no","gs.vf.no","akrehamn.no","åkrehamn.no","algard.no","ålgård.no","arna.no","brumunddal.no","bryne.no","bronnoysund.no","brønnøysund.no","drobak.no","drøbak.no","egersund.no","fetsund.no","floro.no","florø.no","fredrikstad.no","hokksund.no","honefoss.no","hønefoss.no","jessheim.no","jorpeland.no","jørpeland.no","kirkenes.no","kopervik.no","krokstadelva.no","langevag.no","langevåg.no","leirvik.no","mjondalen.no","mjøndalen.no","mo-i-rana.no","mosjoen.no","mosjøen.no","nesoddtangen.no","orkanger.no","osoyro.no","osøyro.no","raholt.no","råholt.no","sandnessjoen.no","sandnessjøen.no","skedsmokorset.no","slattum.no","spjelkavik.no","stathelle.no","stavern.no","stjordalshalsen.no","stjørdalshalsen.no","tananger.no","tranby.no","vossevangen.no","afjord.no","åfjord.no","agdenes.no","al.no","ål.no","alesund.no","ålesund.no","alstahaug.no","alta.no","áltá.no","alaheadju.no","álaheadju.no","alvdal.no","amli.no","åmli.no","amot.no","åmot.no","andebu.no","andoy.no","andøy.no","andasuolo.no","ardal.no","årdal.no","aremark.no","arendal.no","ås.no","aseral.no","åseral.no","asker.no","askim.no","askvoll.no","askoy.no","askøy.no","asnes.no","åsnes.no","audnedaln.no","aukra.no","aure.no","aurland.no","aurskog-holand.no","aurskog-høland.no","austevoll.no","austrheim.no","averoy.no","averøy.no","balestrand.no","ballangen.no","balat.no","bálát.no","balsfjord.no","bahccavuotna.no","báhccavuotna.no","bamble.no","bardu.no","beardu.no","beiarn.no","bajddar.no","bájddar.no","baidar.no","báidár.no","berg.no","bergen.no","berlevag.no","berlevåg.no","bearalvahki.no","bearalváhki.no","bindal.no","birkenes.no","bjarkoy.no","bjarkøy.no","bjerkreim.no","bjugn.no","bodo.no","bodø.no","badaddja.no","bådåddjå.no","budejju.no","bokn.no","bremanger.no","bronnoy.no","brønnøy.no","bygland.no","bykle.no","barum.no","bærum.no","bo.telemark.no","bø.telemark.no","bo.nordland.no","bø.nordland.no","bievat.no","bievát.no","bomlo.no","bømlo.no","batsfjord.no","båtsfjord.no","bahcavuotna.no","báhcavuotna.no","dovre.no","drammen.no","drangedal.no","dyroy.no","dyrøy.no","donna.no","dønna.no","eid.no","eidfjord.no","eidsberg.no","eidskog.no","eidsvoll.no","eigersund.no","elverum.no","enebakk.no","engerdal.no","etne.no","etnedal.no","evenes.no","evenassi.no","evenášši.no","evje-og-hornnes.no","farsund.no","fauske.no","fuossko.no","fuoisku.no","fedje.no","fet.no","finnoy.no","finnøy.no","fitjar.no","fjaler.no","fjell.no","flakstad.no","flatanger.no","flekkefjord.no","flesberg.no","flora.no","fla.no","flå.no","folldal.no","forsand.no","fosnes.no","frei.no","frogn.no","froland.no","frosta.no","frana.no","fræna.no","froya.no","frøya.no","fusa.no","fyresdal.no","forde.no","førde.no","gamvik.no","gangaviika.no","gáŋgaviika.no","gaular.no","gausdal.no","gildeskal.no","gildeskål.no","giske.no","gjemnes.no","gjerdrum.no","gjerstad.no","gjesdal.no","gjovik.no","gjøvik.no","gloppen.no","gol.no","gran.no","grane.no","granvin.no","gratangen.no","grimstad.no","grong.no","kraanghke.no","kråanghke.no","grue.no","gulen.no","hadsel.no","halden.no","halsa.no","hamar.no","hamaroy.no","habmer.no","hábmer.no","hapmir.no","hápmir.no","hammerfest.no","hammarfeasta.no","hámmárfeasta.no","haram.no","hareid.no","harstad.no","hasvik.no","aknoluokta.no","ákŋoluokta.no","hattfjelldal.no","aarborte.no","haugesund.no","hemne.no","hemnes.no","hemsedal.no","heroy.more-og-romsdal.no","herøy.møre-og-romsdal.no","heroy.nordland.no","herøy.nordland.no","hitra.no","hjartdal.no","hjelmeland.no","hobol.no","hobøl.no","hof.no","hol.no","hole.no","holmestrand.no","holtalen.no","holtålen.no","hornindal.no","horten.no","hurdal.no","hurum.no","hvaler.no","hyllestad.no","hagebostad.no","hægebostad.no","hoyanger.no","høyanger.no","hoylandet.no","høylandet.no","ha.no","hå.no","ibestad.no","inderoy.no","inderøy.no","iveland.no","jevnaker.no","jondal.no","jolster.no","jølster.no","karasjok.no","karasjohka.no","kárášjohka.no","karlsoy.no","galsa.no","gálsá.no","karmoy.no","karmøy.no","kautokeino.no","guovdageaidnu.no","klepp.no","klabu.no","klæbu.no","kongsberg.no","kongsvinger.no","kragero.no","kragerø.no","kristiansand.no","kristiansund.no","krodsherad.no","krødsherad.no","kvalsund.no","rahkkeravju.no","ráhkkerávju.no","kvam.no","kvinesdal.no","kvinnherad.no","kviteseid.no","kvitsoy.no","kvitsøy.no","kvafjord.no","kvæfjord.no","giehtavuoatna.no","kvanangen.no","kvænangen.no","navuotna.no","návuotna.no","kafjord.no","kåfjord.no","gaivuotna.no","gáivuotna.no","larvik.no","lavangen.no","lavagis.no","loabat.no","loabát.no","lebesby.no","davvesiida.no","leikanger.no","leirfjord.no","leka.no","leksvik.no","lenvik.no","leangaviika.no","leaŋgaviika.no","lesja.no","levanger.no","lier.no","lierne.no","lillehammer.no","lillesand.no","lindesnes.no","lindas.no","lindås.no","lom.no","loppa.no","lahppi.no","láhppi.no","lund.no","lunner.no","luroy.no","lurøy.no","luster.no","lyngdal.no","lyngen.no","ivgu.no","lardal.no","lerdal.no","lærdal.no","lodingen.no","lødingen.no","lorenskog.no","lørenskog.no","loten.no","løten.no","malvik.no","masoy.no","måsøy.no","muosat.no","muosát.no","mandal.no","marker.no","marnardal.no","masfjorden.no","meland.no","meldal.no","melhus.no","meloy.no","meløy.no","meraker.no","meråker.no","moareke.no","moåreke.no","midsund.no","midtre-gauldal.no","modalen.no","modum.no","molde.no","moskenes.no","moss.no","mosvik.no","malselv.no","målselv.no","malatvuopmi.no","málatvuopmi.no","namdalseid.no","aejrie.no","namsos.no","namsskogan.no","naamesjevuemie.no","nååmesjevuemie.no","laakesvuemie.no","nannestad.no","narvik.no","narviika.no","naustdal.no","nedre-eiker.no","nes.akershus.no","nes.buskerud.no","nesna.no","nesodden.no","nesseby.no","unjarga.no","unjárga.no","nesset.no","nissedal.no","nittedal.no","nord-aurdal.no","nord-fron.no","nord-odal.no","norddal.no","nordkapp.no","davvenjarga.no","davvenjárga.no","nordre-land.no","nordreisa.no","raisa.no","ráisa.no","nore-og-uvdal.no","notodden.no","naroy.no","nærøy.no","notteroy.no","nøtterøy.no","odda.no","oksnes.no","øksnes.no","oppdal.no","oppegard.no","oppegård.no","orkdal.no","orland.no","ørland.no","orskog.no","ørskog.no","orsta.no","ørsta.no","os.hedmark.no","os.hordaland.no","osen.no","osteroy.no","osterøy.no","ostre-toten.no","østre-toten.no","overhalla.no","ovre-eiker.no","øvre-eiker.no","oyer.no","øyer.no","oygarden.no","øygarden.no","oystre-slidre.no","øystre-slidre.no","porsanger.no","porsangu.no","porsáŋgu.no","porsgrunn.no","radoy.no","radøy.no","rakkestad.no","rana.no","ruovat.no","randaberg.no","rauma.no","rendalen.no","rennebu.no","rennesoy.no","rennesøy.no","rindal.no","ringebu.no","ringerike.no","ringsaker.no","rissa.no","risor.no","risør.no","roan.no","rollag.no","rygge.no","ralingen.no","rælingen.no","rodoy.no","rødøy.no","romskog.no","rømskog.no","roros.no","røros.no","rost.no","røst.no","royken.no","røyken.no","royrvik.no","røyrvik.no","rade.no","råde.no","salangen.no","siellak.no","saltdal.no","salat.no","sálát.no","sálat.no","samnanger.no","sande.more-og-romsdal.no","sande.møre-og-romsdal.no","sande.vestfold.no","sandefjord.no","sandnes.no","sandoy.no","sandøy.no","sarpsborg.no","sauda.no","sauherad.no","sel.no","selbu.no","selje.no","seljord.no","sigdal.no","siljan.no","sirdal.no","skaun.no","skedsmo.no","ski.no","skien.no","skiptvet.no","skjervoy.no","skjervøy.no","skierva.no","skiervá.no","skjak.no","skjåk.no","skodje.no","skanland.no","skånland.no","skanit.no","skánit.no","smola.no","smøla.no","snillfjord.no","snasa.no","snåsa.no","snoasa.no","snaase.no","snåase.no","sogndal.no","sokndal.no","sola.no","solund.no","songdalen.no","sortland.no","spydeberg.no","stange.no","stavanger.no","steigen.no","steinkjer.no","stjordal.no","stjørdal.no","stokke.no","stor-elvdal.no","stord.no","stordal.no","storfjord.no","omasvuotna.no","strand.no","stranda.no","stryn.no","sula.no","suldal.no","sund.no","sunndal.no","surnadal.no","sveio.no","svelvik.no","sykkylven.no","sogne.no","søgne.no","somna.no","sømna.no","sondre-land.no","søndre-land.no","sor-aurdal.no","sør-aurdal.no","sor-fron.no","sør-fron.no","sor-odal.no","sør-odal.no","sor-varanger.no","sør-varanger.no","matta-varjjat.no","mátta-várjjat.no","sorfold.no","sørfold.no","sorreisa.no","sørreisa.no","sorum.no","sørum.no","tana.no","deatnu.no","time.no","tingvoll.no","tinn.no","tjeldsund.no","dielddanuorri.no","tjome.no","tjøme.no","tokke.no","tolga.no","torsken.no","tranoy.no","tranøy.no","tromso.no","tromsø.no","tromsa.no","romsa.no","trondheim.no","troandin.no","trysil.no","trana.no","træna.no","trogstad.no","trøgstad.no","tvedestrand.no","tydal.no","tynset.no","tysfjord.no","divtasvuodna.no","divttasvuotna.no","tysnes.no","tysvar.no","tysvær.no","tonsberg.no","tønsberg.no","ullensaker.no","ullensvang.no","ulvik.no","utsira.no","vadso.no","vadsø.no","cahcesuolo.no","čáhcesuolo.no","vaksdal.no","valle.no","vang.no","vanylven.no","vardo.no","vardø.no","varggat.no","várggát.no","vefsn.no","vaapste.no","vega.no","vegarshei.no","vegårshei.no","vennesla.no","verdal.no","verran.no","vestby.no","vestnes.no","vestre-slidre.no","vestre-toten.no","vestvagoy.no","vestvågøy.no","vevelstad.no","vik.no","vikna.no","vindafjord.no","volda.no","voss.no","varoy.no","værøy.no","vagan.no","vågan.no","voagat.no","vagsoy.no","vågsøy.no","vaga.no","vågå.no","valer.ostfold.no","våler.østfold.no","valer.hedmark.no","våler.hedmark.no","*.np","nr","biz.nr","info.nr","gov.nr","edu.nr","org.nr","net.nr","com.nr","nu","nz","ac.nz","co.nz","cri.nz","geek.nz","gen.nz","govt.nz","health.nz","iwi.nz","kiwi.nz","maori.nz","mil.nz","māori.nz","net.nz","org.nz","parliament.nz","school.nz","om","co.om","com.om","edu.om","gov.om","med.om","museum.om","net.om","org.om","pro.om","onion","org","pa","ac.pa","gob.pa","com.pa","org.pa","sld.pa","edu.pa","net.pa","ing.pa","abo.pa","med.pa","nom.pa","pe","edu.pe","gob.pe","nom.pe","mil.pe","org.pe","com.pe","net.pe","pf","com.pf","org.pf","edu.pf","*.pg","ph","com.ph","net.ph","org.ph","gov.ph","edu.ph","ngo.ph","mil.ph","i.ph","pk","com.pk","net.pk","edu.pk","org.pk","fam.pk","biz.pk","web.pk","gov.pk","gob.pk","gok.pk","gon.pk","gop.pk","gos.pk","info.pk","pl","com.pl","net.pl","org.pl","aid.pl","agro.pl","atm.pl","auto.pl","biz.pl","edu.pl","gmina.pl","gsm.pl","info.pl","mail.pl","miasta.pl","media.pl","mil.pl","nieruchomosci.pl","nom.pl","pc.pl","powiat.pl","priv.pl","realestate.pl","rel.pl","sex.pl","shop.pl","sklep.pl","sos.pl","szkola.pl","targi.pl","tm.pl","tourism.pl","travel.pl","turystyka.pl","gov.pl","ap.gov.pl","ic.gov.pl","is.gov.pl","us.gov.pl","kmpsp.gov.pl","kppsp.gov.pl","kwpsp.gov.pl","psp.gov.pl","wskr.gov.pl","kwp.gov.pl","mw.gov.pl","ug.gov.pl","um.gov.pl","umig.gov.pl","ugim.gov.pl","upow.gov.pl","uw.gov.pl","starostwo.gov.pl","pa.gov.pl","po.gov.pl","psse.gov.pl","pup.gov.pl","rzgw.gov.pl","sa.gov.pl","so.gov.pl","sr.gov.pl","wsa.gov.pl","sko.gov.pl","uzs.gov.pl","wiih.gov.pl","winb.gov.pl","pinb.gov.pl","wios.gov.pl","witd.gov.pl","wzmiuw.gov.pl","piw.gov.pl","wiw.gov.pl","griw.gov.pl","wif.gov.pl","oum.gov.pl","sdn.gov.pl","zp.gov.pl","uppo.gov.pl","mup.gov.pl","wuoz.gov.pl","konsulat.gov.pl","oirm.gov.pl","augustow.pl","babia-gora.pl","bedzin.pl","beskidy.pl","bialowieza.pl","bialystok.pl","bielawa.pl","bieszczady.pl","boleslawiec.pl","bydgoszcz.pl","bytom.pl","cieszyn.pl","czeladz.pl","czest.pl","dlugoleka.pl","elblag.pl","elk.pl","glogow.pl","gniezno.pl","gorlice.pl","grajewo.pl","ilawa.pl","jaworzno.pl","jelenia-gora.pl","jgora.pl","kalisz.pl","kazimierz-dolny.pl","karpacz.pl","kartuzy.pl","kaszuby.pl","katowice.pl","kepno.pl","ketrzyn.pl","klodzko.pl","kobierzyce.pl","kolobrzeg.pl","konin.pl","konskowola.pl","kutno.pl","lapy.pl","lebork.pl","legnica.pl","lezajsk.pl","limanowa.pl","lomza.pl","lowicz.pl","lubin.pl","lukow.pl","malbork.pl","malopolska.pl","mazowsze.pl","mazury.pl","mielec.pl","mielno.pl","mragowo.pl","naklo.pl","nowaruda.pl","nysa.pl","olawa.pl","olecko.pl","olkusz.pl","olsztyn.pl","opoczno.pl","opole.pl","ostroda.pl","ostroleka.pl","ostrowiec.pl","ostrowwlkp.pl","pila.pl","pisz.pl","podhale.pl","podlasie.pl","polkowice.pl","pomorze.pl","pomorskie.pl","prochowice.pl","pruszkow.pl","przeworsk.pl","pulawy.pl","radom.pl","rawa-maz.pl","rybnik.pl","rzeszow.pl","sanok.pl","sejny.pl","slask.pl","slupsk.pl","sosnowiec.pl","stalowa-wola.pl","skoczow.pl","starachowice.pl","stargard.pl","suwalki.pl","swidnica.pl","swiebodzin.pl","swinoujscie.pl","szczecin.pl","szczytno.pl","tarnobrzeg.pl","tgory.pl","turek.pl","tychy.pl","ustka.pl","walbrzych.pl","warmia.pl","warszawa.pl","waw.pl","wegrow.pl","wielun.pl","wlocl.pl","wloclawek.pl","wodzislaw.pl","wolomin.pl","wroclaw.pl","zachpomor.pl","zagan.pl","zarow.pl","zgora.pl","zgorzelec.pl","pm","pn","gov.pn","co.pn","org.pn","edu.pn","net.pn","post","pr","com.pr","net.pr","org.pr","gov.pr","edu.pr","isla.pr","pro.pr","biz.pr","info.pr","name.pr","est.pr","prof.pr","ac.pr","pro","aaa.pro","aca.pro","acct.pro","avocat.pro","bar.pro","cpa.pro","eng.pro","jur.pro","law.pro","med.pro","recht.pro","ps","edu.ps","gov.ps","sec.ps","plo.ps","com.ps","org.ps","net.ps","pt","net.pt","gov.pt","org.pt","edu.pt","int.pt","publ.pt","com.pt","nome.pt","pw","co.pw","ne.pw","or.pw","ed.pw","go.pw","belau.pw","py","com.py","coop.py","edu.py","gov.py","mil.py","net.py","org.py","qa","com.qa","edu.qa","gov.qa","mil.qa","name.qa","net.qa","org.qa","sch.qa","re","asso.re","com.re","nom.re","ro","arts.ro","com.ro","firm.ro","info.ro","nom.ro","nt.ro","org.ro","rec.ro","store.ro","tm.ro","www.ro","rs","ac.rs","co.rs","edu.rs","gov.rs","in.rs","org.rs","ru","ac.ru","edu.ru","gov.ru","int.ru","mil.ru","test.ru","rw","gov.rw","net.rw","edu.rw","ac.rw","com.rw","co.rw","int.rw","mil.rw","gouv.rw","sa","com.sa","net.sa","org.sa","gov.sa","med.sa","pub.sa","edu.sa","sch.sa","sb","com.sb","edu.sb","gov.sb","net.sb","org.sb","sc","com.sc","gov.sc","net.sc","org.sc","edu.sc","sd","com.sd","net.sd","org.sd","edu.sd","med.sd","tv.sd","gov.sd","info.sd","se","a.se","ac.se","b.se","bd.se","brand.se","c.se","d.se","e.se","f.se","fh.se","fhsk.se","fhv.se","g.se","h.se","i.se","k.se","komforb.se","kommunalforbund.se","komvux.se","l.se","lanbib.se","m.se","n.se","naturbruksgymn.se","o.se","org.se","p.se","parti.se","pp.se","press.se","r.se","s.se","t.se","tm.se","u.se","w.se","x.se","y.se","z.se","sg","com.sg","net.sg","org.sg","gov.sg","edu.sg","per.sg","sh","com.sh","net.sh","gov.sh","org.sh","mil.sh","si","sj","sk","sl","com.sl","net.sl","edu.sl","gov.sl","org.sl","sm","sn","art.sn","com.sn","edu.sn","gouv.sn","org.sn","perso.sn","univ.sn","so","com.so","net.so","org.so","sr","st","co.st","com.st","consulado.st","edu.st","embaixada.st","gov.st","mil.st","net.st","org.st","principe.st","saotome.st","store.st","su","sv","com.sv","edu.sv","gob.sv","org.sv","red.sv","sx","gov.sx","sy","edu.sy","gov.sy","net.sy","mil.sy","com.sy","org.sy","sz","co.sz","ac.sz","org.sz","tc","td","tel","tf","tg","th","ac.th","co.th","go.th","in.th","mi.th","net.th","or.th","tj","ac.tj","biz.tj","co.tj","com.tj","edu.tj","go.tj","gov.tj","int.tj","mil.tj","name.tj","net.tj","nic.tj","org.tj","test.tj","web.tj","tk","tl","gov.tl","tm","com.tm","co.tm","org.tm","net.tm","nom.tm","gov.tm","mil.tm","edu.tm","tn","com.tn","ens.tn","fin.tn","gov.tn","ind.tn","intl.tn","nat.tn","net.tn","org.tn","info.tn","perso.tn","tourism.tn","edunet.tn","rnrt.tn","rns.tn","rnu.tn","mincom.tn","agrinet.tn","defense.tn","turen.tn","to","com.to","gov.to","net.to","org.to","edu.to","mil.to","tr","com.tr","info.tr","biz.tr","net.tr","org.tr","web.tr","gen.tr","tv.tr","av.tr","dr.tr","bbs.tr","name.tr","tel.tr","gov.tr","bel.tr","pol.tr","mil.tr","k12.tr","edu.tr","kep.tr","nc.tr","gov.nc.tr","tt","co.tt","com.tt","org.tt","net.tt","biz.tt","info.tt","pro.tt","int.tt","coop.tt","jobs.tt","mobi.tt","travel.tt","museum.tt","aero.tt","name.tt","gov.tt","edu.tt","tv","tw","edu.tw","gov.tw","mil.tw","com.tw","net.tw","org.tw","idv.tw","game.tw","ebiz.tw","club.tw","網路.tw","組織.tw","商業.tw","tz","ac.tz","co.tz","go.tz","hotel.tz","info.tz","me.tz","mil.tz","mobi.tz","ne.tz","or.tz","sc.tz","tv.tz","ua","com.ua","edu.ua","gov.ua","in.ua","net.ua","org.ua","cherkassy.ua","cherkasy.ua","chernigov.ua","chernihiv.ua","chernivtsi.ua","chernovtsy.ua","ck.ua","cn.ua","cr.ua","crimea.ua","cv.ua","dn.ua","dnepropetrovsk.ua","dnipropetrovsk.ua","dominic.ua","donetsk.ua","dp.ua","if.ua","ivano-frankivsk.ua","kh.ua","kharkiv.ua","kharkov.ua","kherson.ua","khmelnitskiy.ua","khmelnytskyi.ua","kiev.ua","kirovograd.ua","km.ua","kr.ua","krym.ua","ks.ua","kv.ua","kyiv.ua","lg.ua","lt.ua","lugansk.ua","lutsk.ua","lv.ua","lviv.ua","mk.ua","mykolaiv.ua","nikolaev.ua","od.ua","odesa.ua","odessa.ua","pl.ua","poltava.ua","rivne.ua","rovno.ua","rv.ua","sb.ua","sebastopol.ua","sevastopol.ua","sm.ua","sumy.ua","te.ua","ternopil.ua","uz.ua","uzhgorod.ua","vinnica.ua","vinnytsia.ua","vn.ua","volyn.ua","yalta.ua","zaporizhzhe.ua","zaporizhzhia.ua","zhitomir.ua","zhytomyr.ua","zp.ua","zt.ua","ug","co.ug","or.ug","ac.ug","sc.ug","go.ug","ne.ug","com.ug","org.ug","uk","ac.uk","co.uk","gov.uk","ltd.uk","me.uk","net.uk","nhs.uk","org.uk","plc.uk","police.uk","*.sch.uk","us","dni.us","fed.us","isa.us","kids.us","nsn.us","ak.us","al.us","ar.us","as.us","az.us","ca.us","co.us","ct.us","dc.us","de.us","fl.us","ga.us","gu.us","hi.us","ia.us","id.us","il.us","in.us","ks.us","ky.us","la.us","ma.us","md.us","me.us","mi.us","mn.us","mo.us","ms.us","mt.us","nc.us","nd.us","ne.us","nh.us","nj.us","nm.us","nv.us","ny.us","oh.us","ok.us","or.us","pa.us","pr.us","ri.us","sc.us","sd.us","tn.us","tx.us","ut.us","vi.us","vt.us","va.us","wa.us","wi.us","wv.us","wy.us","k12.ak.us","k12.al.us","k12.ar.us","k12.as.us","k12.az.us","k12.ca.us","k12.co.us","k12.ct.us","k12.dc.us","k12.de.us","k12.fl.us","k12.ga.us","k12.gu.us","k12.ia.us","k12.id.us","k12.il.us","k12.in.us","k12.ks.us","k12.ky.us","k12.la.us","k12.ma.us","k12.md.us","k12.me.us","k12.mi.us","k12.mn.us","k12.mo.us","k12.ms.us","k12.mt.us","k12.nc.us","k12.ne.us","k12.nh.us","k12.nj.us","k12.nm.us","k12.nv.us","k12.ny.us","k12.oh.us","k12.ok.us","k12.or.us","k12.pa.us","k12.pr.us","k12.ri.us","k12.sc.us","k12.tn.us","k12.tx.us","k12.ut.us","k12.vi.us","k12.vt.us","k12.va.us","k12.wa.us","k12.wi.us","k12.wy.us","cc.ak.us","cc.al.us","cc.ar.us","cc.as.us","cc.az.us","cc.ca.us","cc.co.us","cc.ct.us","cc.dc.us","cc.de.us","cc.fl.us","cc.ga.us","cc.gu.us","cc.hi.us","cc.ia.us","cc.id.us","cc.il.us","cc.in.us","cc.ks.us","cc.ky.us","cc.la.us","cc.ma.us","cc.md.us","cc.me.us","cc.mi.us","cc.mn.us","cc.mo.us","cc.ms.us","cc.mt.us","cc.nc.us","cc.nd.us","cc.ne.us","cc.nh.us","cc.nj.us","cc.nm.us","cc.nv.us","cc.ny.us","cc.oh.us","cc.ok.us","cc.or.us","cc.pa.us","cc.pr.us","cc.ri.us","cc.sc.us","cc.sd.us","cc.tn.us","cc.tx.us","cc.ut.us","cc.vi.us","cc.vt.us","cc.va.us","cc.wa.us","cc.wi.us","cc.wv.us","cc.wy.us","lib.ak.us","lib.al.us","lib.ar.us","lib.as.us","lib.az.us","lib.ca.us","lib.co.us","lib.ct.us","lib.dc.us","lib.fl.us","lib.ga.us","lib.gu.us","lib.hi.us","lib.ia.us","lib.id.us","lib.il.us","lib.in.us","lib.ks.us","lib.ky.us","lib.la.us","lib.ma.us","lib.md.us","lib.me.us","lib.mi.us","lib.mn.us","lib.mo.us","lib.ms.us","lib.mt.us","lib.nc.us","lib.nd.us","lib.ne.us","lib.nh.us","lib.nj.us","lib.nm.us","lib.nv.us","lib.ny.us","lib.oh.us","lib.ok.us","lib.or.us","lib.pa.us","lib.pr.us","lib.ri.us","lib.sc.us","lib.sd.us","lib.tn.us","lib.tx.us","lib.ut.us","lib.vi.us","lib.vt.us","lib.va.us","lib.wa.us","lib.wi.us","lib.wy.us","pvt.k12.ma.us","chtr.k12.ma.us","paroch.k12.ma.us","ann-arbor.mi.us","cog.mi.us","dst.mi.us","eaton.mi.us","gen.mi.us","mus.mi.us","tec.mi.us","washtenaw.mi.us","uy","com.uy","edu.uy","gub.uy","mil.uy","net.uy","org.uy","uz","co.uz","com.uz","net.uz","org.uz","va","vc","com.vc","net.vc","org.vc","gov.vc","mil.vc","edu.vc","ve","arts.ve","co.ve","com.ve","e12.ve","edu.ve","firm.ve","gob.ve","gov.ve","info.ve","int.ve","mil.ve","net.ve","org.ve","rec.ve","store.ve","tec.ve","web.ve","vg","vi","co.vi","com.vi","k12.vi","net.vi","org.vi","vn","com.vn","net.vn","org.vn","edu.vn","gov.vn","int.vn","ac.vn","biz.vn","info.vn","name.vn","pro.vn","health.vn","vu","com.vu","edu.vu","net.vu","org.vu","wf","ws","com.ws","net.ws","org.ws","gov.ws","edu.ws","yt","امارات","հայ","বাংলা","бг","бел","中国","中國","الجزائر","مصر","ею","გე","ελ","香港","公司.香港","教育.香港","政府.香港","個人.香港","網絡.香港","組織.香港","ಭಾರತ","ଭାରତ","ভাৰত","भारतम्","भारोत","ڀارت","ഭാരതം","भारत","بارت","بھارت","భారత్","ભારત","ਭਾਰਤ","ভারত","இந்தியா","ایران","ايران","عراق","الاردن","한국","қаз","ලංකා","இலங்கை","المغرب","мкд","мон","澳門","澳门","مليسيا","عمان","پاکستان","پاكستان","فلسطين","срб","пр.срб","орг.срб","обр.срб","од.срб","упр.срб","ак.срб","рф","قطر","السعودية","السعودیة","السعودیۃ","السعوديه","سودان","新加坡","சிங்கப்பூர்","سورية","سوريا","ไทย","ศึกษา.ไทย","ธุรกิจ.ไทย","รัฐบาล.ไทย","ทหาร.ไทย","เน็ต.ไทย","องค์กร.ไทย","تونس","台灣","台湾","臺灣","укр","اليمن","xxx","*.ye","ac.za","agric.za","alt.za","co.za","edu.za","gov.za","grondar.za","law.za","mil.za","net.za","ngo.za","nis.za","nom.za","org.za","school.za","tm.za","web.za","zm","ac.zm","biz.zm","co.zm","com.zm","edu.zm","gov.zm","info.zm","mil.zm","net.zm","org.zm","sch.zm","zw","ac.zw","co.zw","gov.zw","mil.zw","org.zw","aaa","aarp","abarth","abb","abbott","abbvie","abc","able","abogado","abudhabi","academy","accenture","accountant","accountants","aco","active","actor","adac","ads","adult","aeg","aetna","afamilycompany","afl","africa","agakhan","agency","aig","aigo","airbus","airforce","airtel","akdn","alfaromeo","alibaba","alipay","allfinanz","allstate","ally","alsace","alstom","americanexpress","americanfamily","amex","amfam","amica","amsterdam","analytics","android","anquan","anz","aol","apartments","app","apple","aquarelle","arab","aramco","archi","army","art","arte","asda","associates","athleta","attorney","auction","audi","audible","audio","auspost","author","auto","autos","avianca","aws","axa","azure","baby","baidu","banamex","bananarepublic","band","bank","bar","barcelona","barclaycard","barclays","barefoot","bargains","baseball","basketball","bauhaus","bayern","bbc","bbt","bbva","bcg","bcn","beats","beauty","beer","bentley","berlin","best","bestbuy","bet","bharti","bible","bid","bike","bing","bingo","bio","black","blackfriday","blanco","blockbuster","blog","bloomberg","blue","bms","bmw","bnl","bnpparibas","boats","boehringer","bofa","bom","bond","boo","book","booking","bosch","bostik","boston","bot","boutique","box","bradesco","bridgestone","broadway","broker","brother","brussels","budapest","bugatti","build","builders","business","buy","buzz","bzh","cab","cafe","cal","call","calvinklein","cam","camera","camp","cancerresearch","canon","capetown","capital","capitalone","car","caravan","cards","care","career","careers","cars","cartier","casa","case","caseih","cash","casino","catering","catholic","cba","cbn","cbre","cbs","ceb","center","ceo","cern","cfa","cfd","chanel","channel","charity","chase","chat","cheap","chintai","christmas","chrome","chrysler","church","cipriani","circle","cisco","citadel","citi","citic","city","cityeats","claims","cleaning","click","clinic","clinique","clothing","cloud","club","clubmed","coach","codes","coffee","college","cologne","comcast","commbank","community","company","compare","computer","comsec","condos","construction","consulting","contact","contractors","cooking","cookingchannel","cool","corsica","country","coupon","coupons","courses","credit","creditcard","creditunion","cricket","crown","crs","cruise","cruises","csc","cuisinella","cymru","cyou","dabur","dad","dance","data","date","dating","datsun","day","dclk","dds","deal","dealer","deals","degree","delivery","dell","deloitte","delta","democrat","dental","dentist","desi","design","dev","dhl","diamonds","diet","digital","direct","directory","discount","discover","dish","diy","dnp","docs","doctor","dodge","dog","doha","domains","dot","download","drive","dtv","dubai","duck","dunlop","duns","dupont","durban","dvag","dvr","earth","eat","eco","edeka","education","email","emerck","energy","engineer","engineering","enterprises","epost","epson","equipment","ericsson","erni","esq","estate","esurance","etisalat","eurovision","eus","events","everbank","exchange","expert","exposed","express","extraspace","fage","fail","fairwinds","faith","family","fan","fans","farm","farmers","fashion","fast","fedex","feedback","ferrari","ferrero","fiat","fidelity","fido","film","final","finance","financial","fire","firestone","firmdale","fish","fishing","fit","fitness","flickr","flights","flir","florist","flowers","fly","foo","food","foodnetwork","football","ford","forex","forsale","forum","foundation","fox","free","fresenius","frl","frogans","frontdoor","frontier","ftr","fujitsu","fujixerox","fun","fund","furniture","futbol","fyi","gal","gallery","gallo","gallup","game","games","gap","garden","gbiz","gdn","gea","gent","genting","george","ggee","gift","gifts","gives","giving","glade","glass","gle","global","globo","gmail","gmbh","gmo","gmx","godaddy","gold","goldpoint","golf","goo","goodyear","goog","google","gop","got","grainger","graphics","gratis","green","gripe","grocery","group","guardian","gucci","guge","guide","guitars","guru","hair","hamburg","hangout","haus","hbo","hdfc","hdfcbank","health","healthcare","help","helsinki","here","hermes","hgtv","hiphop","hisamitsu","hitachi","hiv","hkt","hockey","holdings","holiday","homedepot","homegoods","homes","homesense","honda","honeywell","horse","hospital","host","hosting","hot","hoteles","hotels","hotmail","house","how","hsbc","hughes","hyatt","hyundai","ibm","icbc","ice","icu","ieee","ifm","ikano","imamat","imdb","immo","immobilien","inc","industries","infiniti","ing","ink","institute","insurance","insure","intel","international","intuit","investments","ipiranga","irish","iselect","ismaili","ist","istanbul","itau","itv","iveco","jaguar","java","jcb","jcp","jeep","jetzt","jewelry","jio","jll","jmp","jnj","joburg","jot","joy","jpmorgan","jprs","juegos","juniper","kaufen","kddi","kerryhotels","kerrylogistics","kerryproperties","kfh","kia","kim","kinder","kindle","kitchen","kiwi","koeln","komatsu","kosher","kpmg","kpn","krd","kred","kuokgroup","kyoto","lacaixa","ladbrokes","lamborghini","lamer","lancaster","lancia","lancome","land","landrover","lanxess","lasalle","lat","latino","latrobe","law","lawyer","lds","lease","leclerc","lefrak","legal","lego","lexus","lgbt","liaison","lidl","life","lifeinsurance","lifestyle","lighting","like","lilly","limited","limo","lincoln","linde","link","lipsy","live","living","lixil","llc","loan","loans","locker","locus","loft","lol","london","lotte","lotto","love","lpl","lplfinancial","ltd","ltda","lundbeck","lupin","luxe","luxury","macys","madrid","maif","maison","makeup","man","management","mango","map","market","marketing","markets","marriott","marshalls","maserati","mattel","mba","mckinsey","med","media","meet","melbourne","meme","memorial","men","menu","merckmsd","metlife","miami","microsoft","mini","mint","mit","mitsubishi","mlb","mls","mma","mobile","mobily","moda","moe","moi","mom","monash","money","monster","mopar","mormon","mortgage","moscow","moto","motorcycles","mov","movie","movistar","msd","mtn","mtr","mutual","nab","nadex","nagoya","nationwide","natura","navy","nba","nec","netbank","netflix","network","neustar","new","newholland","news","next","nextdirect","nexus","nfl","ngo","nhk","nico","nike","nikon","ninja","nissan","nissay","nokia","northwesternmutual","norton","now","nowruz","nowtv","nra","nrw","ntt","nyc","obi","observer","off","office","okinawa","olayan","olayangroup","oldnavy","ollo","omega","one","ong","onl","online","onyourside","ooo","open","oracle","orange","organic","origins","osaka","otsuka","ott","ovh","page","panasonic","paris","pars","partners","parts","party","passagens","pay","pccw","pet","pfizer","pharmacy","phd","philips","phone","photo","photography","photos","physio","piaget","pics","pictet","pictures","pid","pin","ping","pink","pioneer","pizza","place","play","playstation","plumbing","plus","pnc","pohl","poker","politie","porn","pramerica","praxi","press","prime","prod","productions","prof","progressive","promo","properties","property","protection","pru","prudential","pub","pwc","qpon","quebec","quest","qvc","racing","radio","raid","read","realestate","realtor","realty","recipes","red","redstone","redumbrella","rehab","reise","reisen","reit","reliance","ren","rent","rentals","repair","report","republican","rest","restaurant","review","reviews","rexroth","rich","richardli","ricoh","rightathome","ril","rio","rip","rmit","rocher","rocks","rodeo","rogers","room","rsvp","rugby","ruhr","run","rwe","ryukyu","saarland","safe","safety","sakura","sale","salon","samsclub","samsung","sandvik","sandvikcoromant","sanofi","sap","sarl","sas","save","saxo","sbi","sbs","sca","scb","schaeffler","schmidt","scholarships","school","schule","schwarz","science","scjohnson","scor","scot","search","seat","secure","security","seek","select","sener","services","ses","seven","sew","sex","sexy","sfr","shangrila","sharp","shaw","shell","shia","shiksha","shoes","shop","shopping","shouji","show","showtime","shriram","silk","sina","singles","site","ski","skin","sky","skype","sling","smart","smile","sncf","soccer","social","softbank","software","sohu","solar","solutions","song","sony","soy","space","spiegel","sport","spot","spreadbetting","srl","srt","stada","staples","star","starhub","statebank","statefarm","statoil","stc","stcgroup","stockholm","storage","store","stream","studio","study","style","sucks","supplies","supply","support","surf","surgery","suzuki","swatch","swiftcover","swiss","sydney","symantec","systems","tab","taipei","talk","taobao","target","tatamotors","tatar","tattoo","tax","taxi","tci","tdk","team","tech","technology","telefonica","temasek","tennis","teva","thd","theater","theatre","tiaa","tickets","tienda","tiffany","tips","tires","tirol","tjmaxx","tjx","tkmaxx","tmall","today","tokyo","tools","top","toray","toshiba","total","tours","town","toyota","toys","trade","trading","training","travel","travelchannel","travelers","travelersinsurance","trust","trv","tube","tui","tunes","tushu","tvs","ubank","ubs","uconnect","unicom","university","uno","uol","ups","vacations","vana","vanguard","vegas","ventures","verisign","versicherung","vet","viajes","video","vig","viking","villas","vin","vip","virgin","visa","vision","vistaprint","viva","vivo","vlaanderen","vodka","volkswagen","volvo","vote","voting","voto","voyage","vuelos","wales","walmart","walter","wang","wanggou","warman","watch","watches","weather","weatherchannel","webcam","weber","website","wed","wedding","weibo","weir","whoswho","wien","wiki","williamhill","win","windows","wine","winners","wme","wolterskluwer","woodside","work","works","world","wow","wtc","wtf","xbox","xerox","xfinity","xihuan","xin","कॉम","セール","佛山","慈善","集团","在线","大众汽车","点看","คอม","八卦","موقع","公益","公司","香格里拉","网站","移动","我爱你","москва","католик","онлайн","сайт","联通","קום","时尚","微博","淡马锡","ファッション","орг","नेट","ストア","삼성","商标","商店","商城","дети","ポイント","新闻","工行","家電","كوم","中文网","中信","娱乐","谷歌","電訊盈科","购物","クラウド","通販","网店","संगठन","餐厅","网络","ком","诺基亚","食品","飞利浦","手表","手机","ارامكو","العليان","اتصالات","بازار","موبايلي","ابوظبي","كاثوليك","همراه","닷컴","政府","شبكة","بيتك","عرب","机构","组织机构","健康","招聘","рус","珠宝","大拿","みんな","グーグル","世界","書籍","网址","닷넷","コム","天主教","游戏","vermögensberater","vermögensberatung","企业","信息","嘉里大酒店","嘉里","广东","政务","xyz","yachts","yahoo","yamaxun","yandex","yodobashi","yoga","yokohama","you","youtube","yun","zappos","zara","zero","zip","zippo","zone","zuerich","cc.ua","inf.ua","ltd.ua","beep.pl","*.compute.estate","*.alces.network","alwaysdata.net","cloudfront.net","*.compute.amazonaws.com","*.compute-1.amazonaws.com","*.compute.amazonaws.com.cn","us-east-1.amazonaws.com","cn-north-1.eb.amazonaws.com.cn","cn-northwest-1.eb.amazonaws.com.cn","elasticbeanstalk.com","ap-northeast-1.elasticbeanstalk.com","ap-northeast-2.elasticbeanstalk.com","ap-northeast-3.elasticbeanstalk.com","ap-south-1.elasticbeanstalk.com","ap-southeast-1.elasticbeanstalk.com","ap-southeast-2.elasticbeanstalk.com","ca-central-1.elasticbeanstalk.com","eu-central-1.elasticbeanstalk.com","eu-west-1.elasticbeanstalk.com","eu-west-2.elasticbeanstalk.com","eu-west-3.elasticbeanstalk.com","sa-east-1.elasticbeanstalk.com","us-east-1.elasticbeanstalk.com","us-east-2.elasticbeanstalk.com","us-gov-west-1.elasticbeanstalk.com","us-west-1.elasticbeanstalk.com","us-west-2.elasticbeanstalk.com","*.elb.amazonaws.com","*.elb.amazonaws.com.cn","s3.amazonaws.com","s3-ap-northeast-1.amazonaws.com","s3-ap-northeast-2.amazonaws.com","s3-ap-south-1.amazonaws.com","s3-ap-southeast-1.amazonaws.com","s3-ap-southeast-2.amazonaws.com","s3-ca-central-1.amazonaws.com","s3-eu-central-1.amazonaws.com","s3-eu-west-1.amazonaws.com","s3-eu-west-2.amazonaws.com","s3-eu-west-3.amazonaws.com","s3-external-1.amazonaws.com","s3-fips-us-gov-west-1.amazonaws.com","s3-sa-east-1.amazonaws.com","s3-us-gov-west-1.amazonaws.com","s3-us-east-2.amazonaws.com","s3-us-west-1.amazonaws.com","s3-us-west-2.amazonaws.com","s3.ap-northeast-2.amazonaws.com","s3.ap-south-1.amazonaws.com","s3.cn-north-1.amazonaws.com.cn","s3.ca-central-1.amazonaws.com","s3.eu-central-1.amazonaws.com","s3.eu-west-2.amazonaws.com","s3.eu-west-3.amazonaws.com","s3.us-east-2.amazonaws.com","s3.dualstack.ap-northeast-1.amazonaws.com","s3.dualstack.ap-northeast-2.amazonaws.com","s3.dualstack.ap-south-1.amazonaws.com","s3.dualstack.ap-southeast-1.amazonaws.com","s3.dualstack.ap-southeast-2.amazonaws.com","s3.dualstack.ca-central-1.amazonaws.com","s3.dualstack.eu-central-1.amazonaws.com","s3.dualstack.eu-west-1.amazonaws.com","s3.dualstack.eu-west-2.amazonaws.com","s3.dualstack.eu-west-3.amazonaws.com","s3.dualstack.sa-east-1.amazonaws.com","s3.dualstack.us-east-1.amazonaws.com","s3.dualstack.us-east-2.amazonaws.com","s3-website-us-east-1.amazonaws.com","s3-website-us-west-1.amazonaws.com","s3-website-us-west-2.amazonaws.com","s3-website-ap-northeast-1.amazonaws.com","s3-website-ap-southeast-1.amazonaws.com","s3-website-ap-southeast-2.amazonaws.com","s3-website-eu-west-1.amazonaws.com","s3-website-sa-east-1.amazonaws.com","s3-website.ap-northeast-2.amazonaws.com","s3-website.ap-south-1.amazonaws.com","s3-website.ca-central-1.amazonaws.com","s3-website.eu-central-1.amazonaws.com","s3-website.eu-west-2.amazonaws.com","s3-website.eu-west-3.amazonaws.com","s3-website.us-east-2.amazonaws.com","t3l3p0rt.net","tele.amune.org","apigee.io","on-aptible.com","user.party.eus","pimienta.org","poivron.org","potager.org","sweetpepper.org","myasustor.com","myfritz.net","*.awdev.ca","*.advisor.ws","backplaneapp.io","betainabox.com","bnr.la","blackbaudcdn.net","boomla.net","boxfuse.io","square7.ch","bplaced.com","bplaced.de","square7.de","bplaced.net","square7.net","browsersafetymark.io","mycd.eu","ae.org","ar.com","br.com","cn.com","com.de","com.se","de.com","eu.com","gb.com","gb.net","hu.com","hu.net","jp.net","jpn.com","kr.com","mex.com","no.com","qc.com","ru.com","sa.com","se.net","uk.com","uk.net","us.com","uy.com","za.bz","za.com","africa.com","gr.com","in.net","us.org","co.com","c.la","certmgr.org","xenapponazure.com","virtueeldomein.nl","cleverapps.io","c66.me","cloud66.ws","jdevcloud.com","wpdevcloud.com","cloudaccess.host","freesite.host","cloudaccess.net","cloudcontrolled.com","cloudcontrolapp.com","co.ca","*.otap.co","co.cz","c.cdn77.org","cdn77-ssl.net","r.cdn77.net","rsc.cdn77.org","ssl.origin.cdn77-secure.org","cloudns.asia","cloudns.biz","cloudns.club","cloudns.cc","cloudns.eu","cloudns.in","cloudns.info","cloudns.org","cloudns.pro","cloudns.pw","cloudns.us","cloudeity.net","cnpy.gdn","co.nl","co.no","webhosting.be","hosting-cluster.nl","dyn.cosidns.de","dynamisches-dns.de","dnsupdater.de","internet-dns.de","l-o-g-i-n.de","dynamic-dns.info","feste-ip.net","knx-server.net","static-access.net","realm.cz","*.cryptonomic.net","cupcake.is","cyon.link","cyon.site","daplie.me","localhost.daplie.me","dattolocal.com","dattorelay.com","dattoweb.com","mydatto.com","dattolocal.net","mydatto.net","biz.dk","co.dk","firm.dk","reg.dk","store.dk","debian.net","dedyn.io","dnshome.de","drayddns.com","dreamhosters.com","mydrobo.com","drud.io","drud.us","duckdns.org","dy.fi","tunk.org","dyndns-at-home.com","dyndns-at-work.com","dyndns-blog.com","dyndns-free.com","dyndns-home.com","dyndns-ip.com","dyndns-mail.com","dyndns-office.com","dyndns-pics.com","dyndns-remote.com","dyndns-server.com","dyndns-web.com","dyndns-wiki.com","dyndns-work.com","dyndns.biz","dyndns.info","dyndns.org","dyndns.tv","at-band-camp.net","ath.cx","barrel-of-knowledge.info","barrell-of-knowledge.info","better-than.tv","blogdns.com","blogdns.net","blogdns.org","blogsite.org","boldlygoingnowhere.org","broke-it.net","buyshouses.net","cechire.com","dnsalias.com","dnsalias.net","dnsalias.org","dnsdojo.com","dnsdojo.net","dnsdojo.org","does-it.net","doesntexist.com","doesntexist.org","dontexist.com","dontexist.net","dontexist.org","doomdns.com","doomdns.org","dvrdns.org","dyn-o-saur.com","dynalias.com","dynalias.net","dynalias.org","dynathome.net","dyndns.ws","endofinternet.net","endofinternet.org","endoftheinternet.org","est-a-la-maison.com","est-a-la-masion.com","est-le-patron.com","est-mon-blogueur.com","for-better.biz","for-more.biz","for-our.info","for-some.biz","for-the.biz","forgot.her.name","forgot.his.name","from-ak.com","from-al.com","from-ar.com","from-az.net","from-ca.com","from-co.net","from-ct.com","from-dc.com","from-de.com","from-fl.com","from-ga.com","from-hi.com","from-ia.com","from-id.com","from-il.com","from-in.com","from-ks.com","from-ky.com","from-la.net","from-ma.com","from-md.com","from-me.org","from-mi.com","from-mn.com","from-mo.com","from-ms.com","from-mt.com","from-nc.com","from-nd.com","from-ne.com","from-nh.com","from-nj.com","from-nm.com","from-nv.com","from-ny.net","from-oh.com","from-ok.com","from-or.com","from-pa.com","from-pr.com","from-ri.com","from-sc.com","from-sd.com","from-tn.com","from-tx.com","from-ut.com","from-va.com","from-vt.com","from-wa.com","from-wi.com","from-wv.com","from-wy.com","ftpaccess.cc","fuettertdasnetz.de","game-host.org","game-server.cc","getmyip.com","gets-it.net","go.dyndns.org","gotdns.com","gotdns.org","groks-the.info","groks-this.info","ham-radio-op.net","here-for-more.info","hobby-site.com","hobby-site.org","home.dyndns.org","homedns.org","homeftp.net","homeftp.org","homeip.net","homelinux.com","homelinux.net","homelinux.org","homeunix.com","homeunix.net","homeunix.org","iamallama.com","in-the-band.net","is-a-anarchist.com","is-a-blogger.com","is-a-bookkeeper.com","is-a-bruinsfan.org","is-a-bulls-fan.com","is-a-candidate.org","is-a-caterer.com","is-a-celticsfan.org","is-a-chef.com","is-a-chef.net","is-a-chef.org","is-a-conservative.com","is-a-cpa.com","is-a-cubicle-slave.com","is-a-democrat.com","is-a-designer.com","is-a-doctor.com","is-a-financialadvisor.com","is-a-geek.com","is-a-geek.net","is-a-geek.org","is-a-green.com","is-a-guru.com","is-a-hard-worker.com","is-a-hunter.com","is-a-knight.org","is-a-landscaper.com","is-a-lawyer.com","is-a-liberal.com","is-a-libertarian.com","is-a-linux-user.org","is-a-llama.com","is-a-musician.com","is-a-nascarfan.com","is-a-nurse.com","is-a-painter.com","is-a-patsfan.org","is-a-personaltrainer.com","is-a-photographer.com","is-a-player.com","is-a-republican.com","is-a-rockstar.com","is-a-socialist.com","is-a-soxfan.org","is-a-student.com","is-a-teacher.com","is-a-techie.com","is-a-therapist.com","is-an-accountant.com","is-an-actor.com","is-an-actress.com","is-an-anarchist.com","is-an-artist.com","is-an-engineer.com","is-an-entertainer.com","is-by.us","is-certified.com","is-found.org","is-gone.com","is-into-anime.com","is-into-cars.com","is-into-cartoons.com","is-into-games.com","is-leet.com","is-lost.org","is-not-certified.com","is-saved.org","is-slick.com","is-uberleet.com","is-very-bad.org","is-very-evil.org","is-very-good.org","is-very-nice.org","is-very-sweet.org","is-with-theband.com","isa-geek.com","isa-geek.net","isa-geek.org","isa-hockeynut.com","issmarterthanyou.com","isteingeek.de","istmein.de","kicks-ass.net","kicks-ass.org","knowsitall.info","land-4-sale.us","lebtimnetz.de","leitungsen.de","likes-pie.com","likescandy.com","merseine.nu","mine.nu","misconfused.org","mypets.ws","myphotos.cc","neat-url.com","office-on-the.net","on-the-web.tv","podzone.net","podzone.org","readmyblog.org","saves-the-whales.com","scrapper-site.net","scrapping.cc","selfip.biz","selfip.com","selfip.info","selfip.net","selfip.org","sells-for-less.com","sells-for-u.com","sells-it.net","sellsyourhome.org","servebbs.com","servebbs.net","servebbs.org","serveftp.net","serveftp.org","servegame.org","shacknet.nu","simple-url.com","space-to-rent.com","stuff-4-sale.org","stuff-4-sale.us","teaches-yoga.com","thruhere.net","traeumtgerade.de","webhop.biz","webhop.info","webhop.net","webhop.org","worse-than.tv","writesthisblog.com","ddnss.de","dyn.ddnss.de","dyndns.ddnss.de","dyndns1.de","dyn-ip24.de","home-webserver.de","dyn.home-webserver.de","myhome-server.de","ddnss.org","definima.net","definima.io","bci.dnstrace.pro","ddnsfree.com","ddnsgeek.com","giize.com","gleeze.com","kozow.com","loseyourip.com","ooguy.com","theworkpc.com","casacam.net","dynu.net","accesscam.org","camdvr.org","freeddns.org","mywire.org","webredirect.org","myddns.rocks","blogsite.xyz","dynv6.net","e4.cz","mytuleap.com","enonic.io","customer.enonic.io","eu.org","al.eu.org","asso.eu.org","at.eu.org","au.eu.org","be.eu.org","bg.eu.org","ca.eu.org","cd.eu.org","ch.eu.org","cn.eu.org","cy.eu.org","cz.eu.org","de.eu.org","dk.eu.org","edu.eu.org","ee.eu.org","es.eu.org","fi.eu.org","fr.eu.org","gr.eu.org","hr.eu.org","hu.eu.org","ie.eu.org","il.eu.org","in.eu.org","int.eu.org","is.eu.org","it.eu.org","jp.eu.org","kr.eu.org","lt.eu.org","lu.eu.org","lv.eu.org","mc.eu.org","me.eu.org","mk.eu.org","mt.eu.org","my.eu.org","net.eu.org","ng.eu.org","nl.eu.org","no.eu.org","nz.eu.org","paris.eu.org","pl.eu.org","pt.eu.org","q-a.eu.org","ro.eu.org","ru.eu.org","se.eu.org","si.eu.org","sk.eu.org","tr.eu.org","uk.eu.org","us.eu.org","eu-1.evennode.com","eu-2.evennode.com","eu-3.evennode.com","eu-4.evennode.com","us-1.evennode.com","us-2.evennode.com","us-3.evennode.com","us-4.evennode.com","twmail.cc","twmail.net","twmail.org","mymailer.com.tw","url.tw","apps.fbsbx.com","ru.net","adygeya.ru","bashkiria.ru","bir.ru","cbg.ru","com.ru","dagestan.ru","grozny.ru","kalmykia.ru","kustanai.ru","marine.ru","mordovia.ru","msk.ru","mytis.ru","nalchik.ru","nov.ru","pyatigorsk.ru","spb.ru","vladikavkaz.ru","vladimir.ru","abkhazia.su","adygeya.su","aktyubinsk.su","arkhangelsk.su","armenia.su","ashgabad.su","azerbaijan.su","balashov.su","bashkiria.su","bryansk.su","bukhara.su","chimkent.su","dagestan.su","east-kazakhstan.su","exnet.su","georgia.su","grozny.su","ivanovo.su","jambyl.su","kalmykia.su","kaluga.su","karacol.su","karaganda.su","karelia.su","khakassia.su","krasnodar.su","kurgan.su","kustanai.su","lenug.su","mangyshlak.su","mordovia.su","msk.su","murmansk.su","nalchik.su","navoi.su","north-kazakhstan.su","nov.su","obninsk.su","penza.su","pokrovsk.su","sochi.su","spb.su","tashkent.su","termez.su","togliatti.su","troitsk.su","tselinograd.su","tula.su","tuva.su","vladikavkaz.su","vladimir.su","vologda.su","channelsdvr.net","fastlylb.net","map.fastlylb.net","freetls.fastly.net","map.fastly.net","a.prod.fastly.net","global.prod.fastly.net","a.ssl.fastly.net","b.ssl.fastly.net","global.ssl.fastly.net","fastpanel.direct","fastvps-server.com","fhapp.xyz","fedorainfracloud.org","fedorapeople.org","cloud.fedoraproject.org","app.os.fedoraproject.org","app.os.stg.fedoraproject.org","filegear.me","firebaseapp.com","flynnhub.com","flynnhosting.net","freebox-os.com","freeboxos.com","fbx-os.fr","fbxos.fr","freebox-os.fr","freeboxos.fr","freedesktop.org","*.futurecms.at","*.ex.futurecms.at","*.in.futurecms.at","futurehosting.at","futuremailing.at","*.ex.ortsinfo.at","*.kunden.ortsinfo.at","*.statics.cloud","service.gov.uk","github.io","githubusercontent.com","gitlab.io","homeoffice.gov.uk","ro.im","shop.ro","goip.de","*.0emm.com","appspot.com","blogspot.ae","blogspot.al","blogspot.am","blogspot.ba","blogspot.be","blogspot.bg","blogspot.bj","blogspot.ca","blogspot.cf","blogspot.ch","blogspot.cl","blogspot.co.at","blogspot.co.id","blogspot.co.il","blogspot.co.ke","blogspot.co.nz","blogspot.co.uk","blogspot.co.za","blogspot.com","blogspot.com.ar","blogspot.com.au","blogspot.com.br","blogspot.com.by","blogspot.com.co","blogspot.com.cy","blogspot.com.ee","blogspot.com.eg","blogspot.com.es","blogspot.com.mt","blogspot.com.ng","blogspot.com.tr","blogspot.com.uy","blogspot.cv","blogspot.cz","blogspot.de","blogspot.dk","blogspot.fi","blogspot.fr","blogspot.gr","blogspot.hk","blogspot.hr","blogspot.hu","blogspot.ie","blogspot.in","blogspot.is","blogspot.it","blogspot.jp","blogspot.kr","blogspot.li","blogspot.lt","blogspot.lu","blogspot.md","blogspot.mk","blogspot.mr","blogspot.mx","blogspot.my","blogspot.nl","blogspot.no","blogspot.pe","blogspot.pt","blogspot.qa","blogspot.re","blogspot.ro","blogspot.rs","blogspot.ru","blogspot.se","blogspot.sg","blogspot.si","blogspot.sk","blogspot.sn","blogspot.td","blogspot.tw","blogspot.ug","blogspot.vn","cloudfunctions.net","cloud.goog","codespot.com","googleapis.com","googlecode.com","pagespeedmobilizer.com","publishproxy.com","withgoogle.com","withyoutube.com","hashbang.sh","hasura.app","hasura-app.io","hepforge.org","herokuapp.com","herokussl.com","myravendb.com","ravendb.community","ravendb.me","development.run","ravendb.run","moonscale.net","iki.fi","biz.at","info.at","info.cx","ac.leg.br","al.leg.br","am.leg.br","ap.leg.br","ba.leg.br","ce.leg.br","df.leg.br","es.leg.br","go.leg.br","ma.leg.br","mg.leg.br","ms.leg.br","mt.leg.br","pa.leg.br","pb.leg.br","pe.leg.br","pi.leg.br","pr.leg.br","rj.leg.br","rn.leg.br","ro.leg.br","rr.leg.br","rs.leg.br","sc.leg.br","se.leg.br","sp.leg.br","to.leg.br","pixolino.com","ipifony.net","mein-iserv.de","test-iserv.de","myjino.ru","*.hosting.myjino.ru","*.landing.myjino.ru","*.spectrum.myjino.ru","*.vps.myjino.ru","*.triton.zone","*.cns.joyent.com","js.org","keymachine.de","knightpoint.systems","co.krd","edu.krd","git-repos.de","lcube-server.de","svn-repos.de","app.lmpm.com","linkitools.space","linkyard.cloud","linkyard-cloud.ch","we.bs","uklugs.org","glug.org.uk","lug.org.uk","lugs.org.uk","barsy.bg","barsy.co.uk","barsyonline.co.uk","barsycenter.com","barsyonline.com","barsy.club","barsy.de","barsy.eu","barsy.in","barsy.info","barsy.io","barsy.me","barsy.menu","barsy.mobi","barsy.net","barsy.online","barsy.org","barsy.pro","barsy.pub","barsy.shop","barsy.site","barsy.support","barsy.uk","*.magentosite.cloud","mayfirst.info","mayfirst.org","hb.cldmail.ru","miniserver.com","memset.net","cloud.metacentrum.cz","custom.metacentrum.cz","flt.cloud.muni.cz","usr.cloud.muni.cz","meteorapp.com","eu.meteorapp.com","co.pl","azurecontainer.io","azurewebsites.net","azure-mobile.net","cloudapp.net","mozilla-iot.org","bmoattachments.org","net.ru","org.ru","pp.ru","bitballoon.com","netlify.com","4u.com","ngrok.io","nh-serv.co.uk","nfshost.com","dnsking.ch","mypi.co","n4t.co","001www.com","ddnslive.com","myiphost.com","forumz.info","16-b.it","32-b.it","64-b.it","soundcast.me","tcp4.me","dnsup.net","hicam.net","now-dns.net","ownip.net","vpndns.net","dynserv.org","now-dns.org","x443.pw","now-dns.top","ntdll.top","freeddns.us","crafting.xyz","zapto.xyz","nsupdate.info","nerdpol.ovh","blogsyte.com","brasilia.me","cable-modem.org","ciscofreak.com","collegefan.org","couchpotatofries.org","damnserver.com","ddns.me","ditchyourip.com","dnsfor.me","dnsiskinky.com","dvrcam.info","dynns.com","eating-organic.net","fantasyleague.cc","geekgalaxy.com","golffan.us","health-carereform.com","homesecuritymac.com","homesecuritypc.com","hopto.me","ilovecollege.info","loginto.me","mlbfan.org","mmafan.biz","myactivedirectory.com","mydissent.net","myeffect.net","mymediapc.net","mypsx.net","mysecuritycamera.com","mysecuritycamera.net","mysecuritycamera.org","net-freaks.com","nflfan.org","nhlfan.net","no-ip.ca","no-ip.co.uk","no-ip.net","noip.us","onthewifi.com","pgafan.net","point2this.com","pointto.us","privatizehealthinsurance.net","quicksytes.com","read-books.org","securitytactics.com","serveexchange.com","servehumour.com","servep2p.com","servesarcasm.com","stufftoread.com","ufcfan.org","unusualperson.com","workisboring.com","3utilities.com","bounceme.net","ddns.net","ddnsking.com","gotdns.ch","hopto.org","myftp.biz","myftp.org","myvnc.com","no-ip.biz","no-ip.info","no-ip.org","noip.me","redirectme.net","servebeer.com","serveblog.net","servecounterstrike.com","serveftp.com","servegame.com","servehalflife.com","servehttp.com","serveirc.com","serveminecraft.net","servemp3.com","servepics.com","servequake.com","sytes.net","webhop.me","zapto.org","stage.nodeart.io","nodum.co","nodum.io","pcloud.host","nyc.mn","nom.ae","nom.af","nom.ai","nom.al","nym.by","nym.bz","nom.cl","nom.gd","nom.ge","nom.gl","nym.gr","nom.gt","nym.gy","nom.hn","nym.ie","nom.im","nom.ke","nym.kz","nym.la","nym.lc","nom.li","nym.li","nym.lt","nym.lu","nym.me","nom.mk","nym.mn","nym.mx","nom.nu","nym.nz","nym.pe","nym.pt","nom.pw","nom.qa","nym.ro","nom.rs","nom.si","nym.sk","nom.st","nym.su","nym.sx","nom.tj","nym.tw","nom.ug","nom.uy","nom.vc","nom.vg","cya.gg","cloudycluster.net","nid.io","opencraft.hosting","operaunite.com","outsystemscloud.com","ownprovider.com","own.pm","ox.rs","oy.lc","pgfog.com","pagefrontapp.com","art.pl","gliwice.pl","krakow.pl","poznan.pl","wroc.pl","zakopane.pl","pantheonsite.io","gotpantheon.com","mypep.link","on-web.fr","*.platform.sh","*.platformsh.site","xen.prgmr.com","priv.at","protonet.io","chirurgiens-dentistes-en-france.fr","byen.site","ras.ru","qa2.com","dev-myqnapcloud.com","alpha-myqnapcloud.com","myqnapcloud.com","*.quipelements.com","vapor.cloud","vaporcloud.io","rackmaze.com","rackmaze.net","rhcloud.com","resindevice.io","devices.resinstaging.io","hzc.io","wellbeingzone.eu","ptplus.fit","wellbeingzone.co.uk","sandcats.io","logoip.de","logoip.com","schokokeks.net","scrysec.com","firewall-gateway.com","firewall-gateway.de","my-gateway.de","my-router.de","spdns.de","spdns.eu","firewall-gateway.net","my-firewall.org","myfirewall.org","spdns.org","*.s5y.io","*.sensiosite.cloud","biz.ua","co.ua","pp.ua","shiftedit.io","myshopblocks.com","1kapp.com","appchizi.com","applinzi.com","sinaapp.com","vipsinaapp.com","bounty-full.com","alpha.bounty-full.com","beta.bounty-full.com","static.land","dev.static.land","sites.static.land","apps.lair.io","*.stolos.io","spacekit.io","customer.speedpartner.de","storj.farm","utwente.io","temp-dns.com","diskstation.me","dscloud.biz","dscloud.me","dscloud.mobi","dsmynas.com","dsmynas.net","dsmynas.org","familyds.com","familyds.net","familyds.org","i234.me","myds.me","synology.me","vpnplus.to","taifun-dns.de","gda.pl","gdansk.pl","gdynia.pl","med.pl","sopot.pl","gwiddle.co.uk","cust.dev.thingdust.io","cust.disrec.thingdust.io","cust.prod.thingdust.io","cust.testing.thingdust.io","bloxcms.com","townnews-staging.com","12hp.at","2ix.at","4lima.at","lima-city.at","12hp.ch","2ix.ch","4lima.ch","lima-city.ch","trafficplex.cloud","de.cool","12hp.de","2ix.de","4lima.de","lima-city.de","1337.pictures","clan.rip","lima-city.rocks","webspace.rocks","lima.zone","*.transurl.be","*.transurl.eu","*.transurl.nl","tuxfamily.org","dd-dns.de","diskstation.eu","diskstation.org","dray-dns.de","draydns.de","dyn-vpn.de","dynvpn.de","mein-vigor.de","my-vigor.de","my-wan.de","syno-ds.de","synology-diskstation.de","synology-ds.de","uber.space","*.uberspace.de","hk.com","hk.org","ltd.hk","inc.hk","virtualuser.de","virtual-user.de","lib.de.us","2038.io","router.management","v-info.info","wedeploy.io","wedeploy.me","wedeploy.sh","remotewd.com","wmflabs.org","half.host","xnbay.com","u2.xnbay.com","u2-local.xnbay.com","cistron.nl","demon.nl","xs4all.space","official.academy","yolasite.com","ybo.faith","yombo.me","homelink.one","ybo.party","ybo.review","ybo.science","ybo.trade","nohost.me","noho.st","za.net","za.org","now.sh","zone.id"]},function(e,t,a){"use strict";
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */var i=a(52).Store,r=a(53).permuteDomain,o=a(54).pathMatch,n=a(3);function s(){i.call(this),this.idx={}}n.inherits(s,i),t.MemoryCookieStore=s,s.prototype.idx=null,s.prototype.synchronous=!0,s.prototype.inspect=function(){return"{ idx: "+n.inspect(this.idx,!1,2)+" }"},n.inspect.custom&&(s.prototype[n.inspect.custom]=s.prototype.inspect),s.prototype.findCookie=function(e,t,a,i){return this.idx[e]&&this.idx[e][t]?i(null,this.idx[e][t][a]||null):i(null,void 0)},s.prototype.findCookies=function(e,t,a){var i,n=[];if(!e)return a(null,[]);i=t?function(e){Object.keys(e).forEach(function(a){if(o(t,a)){var i=e[a];for(var r in i)n.push(i[r])}})}:function(e){for(var t in e){var a=e[t];for(var i in a)n.push(a[i])}};var s=r(e)||[e],u=this.idx;s.forEach(function(e){var t=u[e];t&&i(t)}),a(null,n)},s.prototype.putCookie=function(e,t){this.idx[e.domain]||(this.idx[e.domain]={}),this.idx[e.domain][e.path]||(this.idx[e.domain][e.path]={}),this.idx[e.domain][e.path][e.key]=e,t(null)},s.prototype.updateCookie=function(e,t,a){this.putCookie(t,a)},s.prototype.removeCookie=function(e,t,a,i){this.idx[e]&&this.idx[e][t]&&this.idx[e][t][a]&&delete this.idx[e][t][a],i(null)},s.prototype.removeCookies=function(e,t,a){return this.idx[e]&&(t?delete this.idx[e][t]:delete this.idx[e]),a(null)},s.prototype.getAllCookies=function(e){var t=[],a=this.idx;Object.keys(a).forEach(function(e){Object.keys(a[e]).forEach(function(i){Object.keys(a[e][i]).forEach(function(r){null!==r&&t.push(a[e][i][r])})})}),t.sort(function(e,t){return(e.creationIndex||0)-(t.creationIndex||0)}),e(null,t)}},function(e){e.exports={author:{name:"Jeremy Stashewsky",email:"jstash@gmail.com",website:"https://github.com/stash"},contributors:[{name:"Alexander Savin",website:"https://github.com/apsavin"},{name:"Ian Livingstone",website:"https://github.com/ianlivingstone"},{name:"Ivan Nikulin",website:"https://github.com/inikulin"},{name:"Lalit Kapoor",website:"https://github.com/lalitkapoor"},{name:"Sam Thompson",website:"https://github.com/sambthompson"},{name:"Sebastian Mayr",website:"https://github.com/Sebmaster"}],license:"BSD-3-Clause",name:"tough-cookie",description:"RFC6265 Cookies and Cookie Jar for node.js",keywords:["HTTP","cookie","cookies","set-cookie","cookiejar","jar","RFC6265","RFC2965"],version:"2.4.3",homepage:"https://github.com/salesforce/tough-cookie",repository:{type:"git",url:"git://github.com/salesforce/tough-cookie.git"},bugs:{url:"https://github.com/salesforce/tough-cookie/issues"},main:"./lib/cookie",files:["lib"],scripts:{test:"vows test/*_test.js",cover:"nyc --reporter=lcov --reporter=html vows test/*_test.js"},engines:{node:">=0.8"},devDependencies:{async:"^1.4.2",nyc:"^11.6.0","string.prototype.repeat":"^0.2.0",vows:"^0.8.1"},dependencies:{psl:"^1.1.24",punycode:"^1.4.1"}}},function(e,t){function a(e,t){var a=[],i=[];return null==t&&(t=function(e,t){return a[0]===t?"[Circular ~]":"[Circular ~."+i.slice(0,a.indexOf(t)).join(".")+"]"}),function(r,o){if(a.length>0){var n=a.indexOf(this);~n?a.splice(n+1):a.push(this),~n?i.splice(n,1/0,r):i.push(r),~a.indexOf(o)&&(o=t.call(this,r,o))}else a.push(o);return null==e?o:e.call(this,r,o)}}(e.exports=function(e,t,i,r){return JSON.stringify(e,a(t,r),i)}).getSerialize=a},function(e,t,a){"use strict";var i=a(17),r=a(19),o=a(8),n=a(3),s=a(20),u=a(101),c=a(102),p=a(103),l=a(105),m=a(62),h=a(44),d=a(124),f=a(125),g=a(35),v=a(71),y=a(133).strict,b=a(37),k=a(49),w=a(134),j=a(135).Querystring,x=a(138).Har,E=a(195).Auth,S=a(198).OAuth,_=a(200),R=a(201).Multipart,A=a(202).Redirect,C=a(203).Tunnel,q=a(206),O=a(23).Buffer,P=b.safeStringify,F=b.isReadStream,z=b.toBase64,T=b.defer,I=b.copy,D=b.version,B=k.jar(),L={};function U(){return{uri:this.uri,method:this.method,headers:this.headers}}function N(){return{statusCode:this.statusCode,body:this.body,headers:this.headers,request:U.call(this.request)}}function H(e){e.har&&(this._har=new x(this),e=this._har.options(e)),s.Stream.call(this);var t=Object.keys(H.prototype),a=function(e,t){var a={};for(var i in t)-1===e.indexOf(i)&&(a[i]=t[i]);return a}(t,e);g(this,a),e=function(e,t){var a={};for(var i in t){var r=!(-1===e.indexOf(i)),o="function"==typeof t[i];r&&o||(a[i]=t[i])}return a}(t,e),this.readable=!0,this.writable=!0,e.method&&(this.explicitMethod=!0),this._qs=new j(this),this._auth=new E(this),this._oauth=new S(this),this._multipart=new R(this),this._redirect=new A(this),this._tunnel=new C(this),this.init(e)}function M(){H.debug&&console.error("REQUEST %s",n.format.apply(n,arguments))}n.inherits(H,s.Stream),H.debug=process.env.NODE_DEBUG&&/\brequest\b/.test(process.env.NODE_DEBUG),H.prototype.debug=M,H.prototype.init=function(e){var t=this;for(var a in e||(e={}),t.headers=t.headers?I(t.headers):{},t.headers)void 0===t.headers[a]&&delete t.headers[a];if(h.httpify(t,t.headers),t.method||(t.method=e.method||"GET"),t.localAddress||(t.localAddress=e.localAddress),t._qs.init(e),M(e),t.pool||!1===t.pool||(t.pool=L),t.dests=t.dests||[],t.__isRequestRequest=!0,!t._callback&&t.callback&&(t._callback=t.callback,t.callback=function(){t._callbackCalled||(t._callbackCalled=!0,t._callback.apply(t,arguments))},t.on("error",t.callback.bind()),t.on("complete",t.callback.bind(t,null))),!t.uri&&t.url&&(t.uri=t.url,delete t.url),t.baseUrl){if("string"!=typeof t.baseUrl)return t.emit("error",new Error("options.baseUrl must be a string"));if("string"!=typeof t.uri)return t.emit("error",new Error("options.uri must be a string when using options.baseUrl"));if(0===t.uri.indexOf("//")||-1!==t.uri.indexOf("://"))return t.emit("error",new Error("options.uri must be a path when using options.baseUrl"));var n=t.baseUrl.lastIndexOf("/")===t.baseUrl.length-1,s=0===t.uri.indexOf("/");n&&s?t.uri=t.baseUrl+t.uri.slice(1):n||s?t.uri=t.baseUrl+t.uri:""===t.uri?t.uri=t.baseUrl:t.uri=t.baseUrl+"/"+t.uri,delete t.baseUrl}if(!t.uri)return t.emit("error",new Error("options.uri is a required argument"));if("string"==typeof t.uri&&(t.uri=o.parse(t.uri)),t.uri.href||(t.uri.href=o.format(t.uri)),"unix:"===t.uri.protocol)return t.emit("error",new Error("`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`"));if("unix"===t.uri.host&&t.enableUnixSocket(),!1===t.strictSSL&&(t.rejectUnauthorized=!1),t.uri.pathname||(t.uri.pathname="/"),!(t.uri.host||t.uri.hostname&&t.uri.port||t.uri.isUnix)){var u='Invalid URI "'+o.format(t.uri)+'"';return 0===Object.keys(e).length&&(u+=". This can be caused by a crappy redirection."),t.abort(),t.emit("error",new Error(u))}if(t.hasOwnProperty("proxy")||(t.proxy=w(t.uri)),t.tunnel=t._tunnel.isEnabled(),t.proxy&&t._tunnel.setup(e),t._redirect.onRequest(e),t.setHost=!1,!t.hasHeader("host")){var c=t.originalHostHeaderName||"host";t.setHeader(c,t.uri.host),t.uri.port&&("80"===t.uri.port&&"http:"===t.uri.protocol||"443"===t.uri.port&&"https:"===t.uri.protocol)&&t.setHeader(c,t.uri.hostname),t.setHost=!0}if(t.jar(t._jar||e.jar),t.uri.port||("http:"===t.uri.protocol?t.uri.port=80:"https:"===t.uri.protocol&&(t.uri.port=443)),t.proxy&&!t.tunnel?(t.port=t.proxy.port,t.host=t.proxy.hostname):(t.port=t.uri.port,t.host=t.uri.hostname),e.form&&t.form(e.form),e.formData){var p=e.formData,l=t.form(),f=function(e,t){t&&t.hasOwnProperty("value")&&t.hasOwnProperty("options")?l.append(e,t.value,t.options):l.append(e,t)};for(var g in p)if(p.hasOwnProperty(g)){var b=p[g];if(b instanceof Array)for(var k=0;k<b.length;k++)f(g,b[k]);else f(g,b)}}if(e.qs&&t.qs(e.qs),t.uri.path?t.path=t.uri.path:t.path=t.uri.pathname+(t.uri.search||""),0===t.path.length&&(t.path="/"),e.aws&&t.aws(e.aws),e.hawk&&t.hawk(e.hawk),e.httpSignature&&t.httpSignature(e.httpSignature),e.auth&&(Object.prototype.hasOwnProperty.call(e.auth,"username")&&(e.auth.user=e.auth.username),Object.prototype.hasOwnProperty.call(e.auth,"password")&&(e.auth.pass=e.auth.password),t.auth(e.auth.user,e.auth.pass,e.auth.sendImmediately,e.auth.bearer)),t.gzip&&!t.hasHeader("accept-encoding")&&t.setHeader("accept-encoding","gzip, deflate"),t.uri.auth&&!t.hasHeader("authorization")){var j=t.uri.auth.split(":").map(function(e){return t._qs.unescape(e)});t.auth(j[0],j.slice(1).join(":"),!0)}if(!t.tunnel&&t.proxy&&t.proxy.auth&&!t.hasHeader("proxy-authorization")){var x=t.proxy.auth.split(":").map(function(e){return t._qs.unescape(e)}),E="Basic "+z(x.join(":"));t.setHeader("proxy-authorization",E)}function S(){var e;(y(t.body)&&(t.body=O.from(t.body)),t.hasHeader("content-length"))||((e="string"==typeof t.body?O.byteLength(t.body):Array.isArray(t.body)?t.body.reduce(function(e,t){return e+t.length},0):t.body.length)?t.setHeader("content-length",e):t.emit("error",new Error("Argument error, options.body.")))}t.proxy&&!t.tunnel&&(t.path=t.uri.protocol+"//"+t.uri.host+t.path),e.json&&t.json(e.json),e.multipart&&t.multipart(e.multipart),e.time&&(t.timing=!0,t.elapsedTime=t.elapsedTime||0),t.body&&!v(t.body)&&S(),e.oauth?t.oauth(e.oauth):t._oauth.params&&t.hasHeader("authorization")&&t.oauth(t._oauth.params);var _=t.proxy&&!t.tunnel?t.proxy.protocol:t.uri.protocol,R={"http:":i,"https:":r},A=t.httpModules||{};if(t.httpModule=A[_]||R[_],!t.httpModule)return t.emit("error",new Error("Invalid protocol: "+_));if(e.ca&&(t.ca=e.ca),!t.agent)if(e.agentOptions&&(t.agentOptions=e.agentOptions),e.agentClass)t.agentClass=e.agentClass;else if(e.forever){var C=D();0===C.major&&C.minor<=10?t.agentClass="http:"===_?d:d.SSL:(t.agentClass=t.httpModule.Agent,t.agentOptions=t.agentOptions||{},t.agentOptions.keepAlive=!0)}else t.agentClass=t.httpModule.Agent;!1===t.pool?t.agent=!1:t.agent=t.agent||t.getNewAgent(),t.on("pipe",function(e){if(t.ntick&&t._started&&t.emit("error",new Error("You cannot pipe to this stream after the outbound request has started.")),t.src=e,F(e))t.hasHeader("content-type")||t.setHeader("content-type",m.lookup(e.path));else{if(e.headers)for(var a in e.headers)t.hasHeader(a)||t.setHeader(a,e.headers[a]);t._json&&!t.hasHeader("content-type")&&t.setHeader("content-type","application/json"),e.method&&!t.explicitMethod&&(t.method=e.method)}}),T(function(){if(!t._aborted){var e=function(){if(t._form&&(t._auth.hasAuth?t._auth.hasAuth&&t._auth.sentAuth&&t._form.pipe(t):t._form.pipe(t)),t._multipart&&t._multipart.chunked&&t._multipart.body.pipe(t),t.body)v(t.body)?t.body.pipe(t):(S(),Array.isArray(t.body)?t.body.forEach(function(e){t.write(e)}):t.write(t.body),t.end());else if(t.requestBodyStream)console.warn("options.requestBodyStream is deprecated, please pass the request object to stream.pipe."),t.requestBodyStream.pipe(t);else if(!t.src){if(t._auth.hasAuth&&!t._auth.sentAuth)return void t.end();"GET"!==t.method&&void 0!==t.method&&t.setHeader("content-length",0),t.end()}};t._form&&!t.hasHeader("content-length")?(t.setHeader(t._form.getHeaders(),!0),t._form.getLength(function(a,i){a||isNaN(i)||t.setHeader("content-length",i),e()})):e(),t.ntick=!0}})},H.prototype.getNewAgent=function(){var e=this.agentClass,t={};if(this.agentOptions)for(var a in this.agentOptions)t[a]=this.agentOptions[a];this.ca&&(t.ca=this.ca),this.ciphers&&(t.ciphers=this.ciphers),this.secureProtocol&&(t.secureProtocol=this.secureProtocol),this.secureOptions&&(t.secureOptions=this.secureOptions),void 0!==this.rejectUnauthorized&&(t.rejectUnauthorized=this.rejectUnauthorized),this.cert&&this.key&&(t.key=this.key,t.cert=this.cert),this.pfx&&(t.pfx=this.pfx),this.passphrase&&(t.passphrase=this.passphrase);var i="";e!==this.httpModule.Agent&&(i+=e.name);var r=this.proxy;return"string"==typeof r&&(r=o.parse(r)),(r&&"https:"===r.protocol||"https:"===this.uri.protocol)&&(t.ca&&(i&&(i+=":"),i+=t.ca),void 0!==t.rejectUnauthorized&&(i&&(i+=":"),i+=t.rejectUnauthorized),t.cert&&(i&&(i+=":"),i+=t.cert.toString("ascii")+t.key.toString("ascii")),t.pfx&&(i&&(i+=":"),i+=t.pfx.toString("ascii")),t.ciphers&&(i&&(i+=":"),i+=t.ciphers),t.secureProtocol&&(i&&(i+=":"),i+=t.secureProtocol),t.secureOptions&&(i&&(i+=":"),i+=t.secureOptions)),this.pool===L&&!i&&0===Object.keys(t).length&&this.httpModule.globalAgent?this.httpModule.globalAgent:(i=this.uri.protocol+i,this.pool[i]||(this.pool[i]=new e(t),this.pool.maxSockets&&(this.pool[i].maxSockets=this.pool.maxSockets)),this.pool[i])},H.prototype.start=function(){var e=this;if(e.timing)var t=(new Date).getTime(),a=q();if(!e._aborted){e._started=!0,e.method=e.method||"GET",e.href=e.uri.href,e.src&&e.src.stat&&e.src.stat.size&&!e.hasHeader("content-length")&&e.setHeader("content-length",e.src.stat.size),e._aws&&e.aws(e._aws,!0);var i,r=I(e);delete r.auth,M("make request",e.uri.href),delete r.timeout;try{e.req=e.httpModule.request(r)}catch(t){return void e.emit("error",t)}e.timing&&(e.startTime=t,e.startTimeNow=a,e.timings={}),e.timeout&&!e.timeoutTimer&&(e.timeout<0?i=0:"number"==typeof e.timeout&&isFinite(e.timeout)&&(i=e.timeout)),e.req.on("response",e.onRequestResponse.bind(e)),e.req.on("error",e.onRequestError.bind(e)),e.req.on("drain",function(){e.emit("drain")}),e.req.on("socket",function(t){var a=t._connecting||t.connecting;if(e.timing&&(e.timings.socket=q()-e.startTimeNow,a)){var r=function(){e.timings.lookup=q()-e.startTimeNow},o=function(){e.timings.connect=q()-e.startTimeNow};t.once("lookup",r),t.once("connect",o),e.req.once("error",function(){t.removeListener("lookup",r),t.removeListener("connect",o)})}var n=function(){e.req.setTimeout(i,function(){if(e.req){e.abort();var t=new Error("ESOCKETTIMEDOUT");t.code="ESOCKETTIMEDOUT",t.connect=!1,e.emit("error",t)}})};if(void 0!==i)if(a){var s=function(){t.removeListener("connect",s),clearTimeout(e.timeoutTimer),e.timeoutTimer=null,n()};t.on("connect",s),e.req.on("error",function(e){t.removeListener("connect",s)}),e.timeoutTimer=setTimeout(function(){t.removeListener("connect",s),e.abort();var a=new Error("ETIMEDOUT");a.code="ETIMEDOUT",a.connect=!0,e.emit("error",a)},i)}else n();e.emit("socket",t)}),e.emit("request",e.req)}},H.prototype.onRequestError=function(e){if(!this._aborted){if(this.req&&this.req._reusedSocket&&"ECONNRESET"===e.code&&this.agent.addRequestNoreuse)return this.agent={addRequest:this.agent.addRequestNoreuse.bind(this.agent)},this.start(),void this.req.end();this.timeout&&this.timeoutTimer&&(clearTimeout(this.timeoutTimer),this.timeoutTimer=null),this.emit("error",e)}},H.prototype.onRequestResponse=function(e){var t=this;if(t.timing&&(t.timings.response=q()-t.startTimeNow),M("onRequestResponse",t.uri.href,e.statusCode,e.headers),e.on("end",function(){t.timing&&(t.timings.end=q()-t.startTimeNow,e.timingStart=t.startTime,t.timings.socket||(t.timings.socket=0),t.timings.lookup||(t.timings.lookup=t.timings.socket),t.timings.connect||(t.timings.connect=t.timings.lookup),t.timings.response||(t.timings.response=t.timings.connect),M("elapsed time",t.timings.end),t.elapsedTime+=Math.round(t.timings.end),e.elapsedTime=t.elapsedTime,e.timings=t.timings,e.timingPhases={wait:t.timings.socket,dns:t.timings.lookup-t.timings.socket,tcp:t.timings.connect-t.timings.lookup,firstByte:t.timings.response-t.timings.connect,download:t.timings.end-t.timings.response,total:t.timings.end}),M("response end",t.uri.href,e.statusCode,e.headers)}),t._aborted)return M("aborted",t.uri.href),void e.resume();if(t.response=e,e.request=t,e.toJSON=N,t.httpModule!==r||!t.strictSSL||e.hasOwnProperty("socket")&&e.socket.authorized){t.originalHost=t.getHeader("host"),t.originalHostHeaderName||(t.originalHostHeaderName=t.hasHeader("host")),t.setHost&&t.removeHeader("host"),t.timeout&&t.timeoutTimer&&(clearTimeout(t.timeoutTimer),t.timeoutTimer=null);var a=t._jar&&t._jar.setCookie?t._jar:B,i=function(e){try{a.setCookie(e,t.uri.href,{ignoreError:!0})}catch(e){t.emit("error",e)}};if(e.caseless=h(e.headers),e.caseless.has("set-cookie")&&!t._disableCookies){var o=e.caseless.has("set-cookie");Array.isArray(e.headers[o])?e.headers[o].forEach(i):i(e.headers[o])}if(!t._redirect.onResponse(e)){e.on("close",function(){t._ended||t.response.emit("end")}),e.once("end",function(){t._ended=!0});var n,s;if(!t.gzip||(s=e.statusCode,"HEAD"===t.method||s>=100&&s<200||204===s||304===s))n=e;else{var c=e.headers["content-encoding"]||"identity";c=c.trim().toLowerCase();var p={flush:u.Z_SYNC_FLUSH,finishFlush:u.Z_SYNC_FLUSH};"gzip"===c?(n=u.createGunzip(p),e.pipe(n)):"deflate"===c?(n=u.createInflate(p),e.pipe(n)):("identity"!==c&&M("ignoring unrecognized Content-Encoding "+c),n=e)}t.encoding&&(0!==t.dests.length?console.error("Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid."):n.setEncoding(t.encoding)),t._paused&&n.pause(),t.responseContent=n,t.emit("response",e),t.dests.forEach(function(e){t.pipeDest(e)}),n.on("data",function(a){t.timing&&!t.responseStarted&&(t.responseStartTime=(new Date).getTime(),e.responseStartTime=t.responseStartTime),t._destdata=!0,t.emit("data",a)}),n.once("end",function(e){t.emit("end",e)}),n.on("error",function(e){t.emit("error",e)}),n.on("close",function(){t.emit("close")}),t.callback?t.readResponseBody(e):t.on("end",function(){t._aborted?M("aborted",t.uri.href):t.emit("complete",e)}),M("finish init function",t.uri.href)}}else{M("strict ssl error",t.uri.href);var l=e.hasOwnProperty("socket")?e.socket.authorizationError:t.uri.href+" does not support SSL";t.emit("error",new Error("SSL Error: "+l))}},H.prototype.readResponseBody=function(e){var t=this;M("reading response's body");var a=[],i=0,r=[];t.on("data",function(e){O.isBuffer(e)?e.length&&(i+=e.length,a.push(e)):r.push(e)}),t.on("end",function(){if(M("end event",t.uri.href),t._aborted)return M("aborted",t.uri.href),a=[],void(i=0);if(i?(M("has body",t.uri.href,i),e.body=O.concat(a,i),null!==t.encoding&&(e.body=e.body.toString(t.encoding)),a=[],i=0):r.length&&("utf8"===t.encoding&&r[0].length>0&&"\ufeff"===r[0][0]&&(r[0]=r[0].substring(1)),e.body=r.join("")),t._json)try{e.body=JSON.parse(e.body,t._jsonReviver)}catch(e){M("invalid JSON received",t.uri.href)}M("emitting complete",t.uri.href),void 0!==e.body||t._json||(e.body=null===t.encoding?O.alloc(0):""),t.emit("complete",e,e.body)})},H.prototype.abort=function(){this._aborted=!0,this.req?this.req.abort():this.response&&this.response.destroy(),this.emit("abort")},H.prototype.pipeDest=function(e){var t=this.response;if(e.headers&&!e.headersSent){if(t.caseless.has("content-type")){var a=t.caseless.has("content-type");e.setHeader?e.setHeader(a,t.headers[a]):e.headers[a]=t.headers[a]}if(t.caseless.has("content-length")){var i=t.caseless.has("content-length");e.setHeader?e.setHeader(i,t.headers[i]):e.headers[i]=t.headers[i]}}if(e.setHeader&&!e.headersSent){for(var r in t.headers)this.gzip&&"content-encoding"===r||e.setHeader(r,t.headers[r]);e.statusCode=t.statusCode}this.pipefilter&&this.pipefilter(t,e)},H.prototype.qs=function(e,t){var a;for(var i in a=!t&&this.uri.query?this._qs.parse(this.uri.query):{},e)a[i]=e[i];var r=this._qs.stringify(a);return""===r?this:(this.uri=o.parse(this.uri.href.split("?")[0]+"?"+r),this.url=this.uri,this.path=this.uri.path,"unix"===this.uri.host&&this.enableUnixSocket(),this)},H.prototype.form=function(e){var t=this;return e?(/^application\/x-www-form-urlencoded\b/.test(t.getHeader("content-type"))||t.setHeader("content-type","application/x-www-form-urlencoded"),t.body="string"==typeof e?t._qs.rfc3986(e.toString("utf8")):t._qs.stringify(e).toString("utf8"),t):(t._form=new f,t._form.on("error",function(e){e.message="form-data: "+e.message,t.emit("error",e),t.abort()}),t._form)},H.prototype.multipart=function(e){return this._multipart.onRequest(e),this._multipart.chunked||(this.body=this._multipart.body),this},H.prototype.json=function(e){return this.hasHeader("accept")||this.setHeader("accept","application/json"),"function"==typeof this.jsonReplacer&&(this._jsonReplacer=this.jsonReplacer),this._json=!0,"boolean"==typeof e?void 0!==this.body&&(/^application\/x-www-form-urlencoded\b/.test(this.getHeader("content-type"))?this.body=this._qs.rfc3986(this.body):this.body=P(this.body,this._jsonReplacer),this.hasHeader("content-type")||this.setHeader("content-type","application/json")):(this.body=P(e,this._jsonReplacer),this.hasHeader("content-type")||this.setHeader("content-type","application/json")),"function"==typeof this.jsonReviver&&(this._jsonReviver=this.jsonReviver),this},H.prototype.getHeader=function(e,t){var a,i;return t||(t=this.headers),Object.keys(t).forEach(function(r){r.length===e.length&&(i=new RegExp(e,"i"),r.match(i)&&(a=t[r]))}),a},H.prototype.enableUnixSocket=function(){var e=this.uri.path.split(":"),t=e[0],a=e[1];this.socketPath=t,this.uri.pathname=a,this.uri.path=a,this.uri.host=t,this.uri.hostname=t,this.uri.isUnix=!0},H.prototype.auth=function(e,t,a,i){return this._auth.onRequest(e,t,a,i),this},H.prototype.aws=function(e,t){if(!t)return this._aws=e,this;if(4===e.sign_version||"4"===e.sign_version){var a={host:this.uri.host,path:this.uri.path,method:this.method,headers:this.headers,body:this.body};e.service&&(a.service=e.service);var i=p.sign(a,{accessKeyId:e.key,secretAccessKey:e.secret,sessionToken:e.session});this.setHeader("authorization",i.headers.Authorization),this.setHeader("x-amz-date",i.headers["X-Amz-Date"]),i.headers["X-Amz-Security-Token"]&&this.setHeader("x-amz-security-token",i.headers["X-Amz-Security-Token"])}else{var r=new Date;this.setHeader("date",r.toUTCString());var o={key:e.key,secret:e.secret,verb:this.method.toUpperCase(),date:r,contentType:this.getHeader("content-type")||"",md5:this.getHeader("content-md5")||"",amazonHeaders:c.canonicalizeHeaders(this.headers)},n=this.uri.path;e.bucket&&n?o.resource="/"+e.bucket+n:e.bucket&&!n?o.resource="/"+e.bucket:!e.bucket&&n?o.resource=n:e.bucket||n||(o.resource="/"),o.resource=c.canonicalizeResource(o.resource),this.setHeader("authorization",c.authorization(o))}return this},H.prototype.httpSignature=function(e){var t=this;return l.signRequest({getHeader:function(e){return t.getHeader(e,t.headers)},setHeader:function(e,a){t.setHeader(e,a)},method:t.method,path:t.path},e),M("httpSignature authorization",t.getHeader("authorization")),t},H.prototype.hawk=function(e){this.setHeader("Authorization",_.header(this.uri,this.method,e))},H.prototype.oauth=function(e){return this._oauth.onRequest(e),this},H.prototype.jar=function(e){var t;if(0===this._redirect.redirectsFollowed&&(this.originalCookieHeader=this.getHeader("cookie")),e){var a=e&&e.getCookieString?e:B,i=this.uri.href;a&&(t=a.getCookieString(i))}else t=!1,this._disableCookies=!0;return t&&t.length&&(this.originalCookieHeader?this.setHeader("cookie",this.originalCookieHeader+"; "+t):this.setHeader("cookie",t)),this._jar=e,this},H.prototype.pipe=function(e,t){if(!this.response)return this.dests.push(e),s.Stream.prototype.pipe.call(this,e,t),e;if(this._destdata)this.emit("error",new Error("You cannot pipe after data has been emitted from the response."));else{if(!this._ended)return s.Stream.prototype.pipe.call(this,e,t),this.pipeDest(e),e;this.emit("error",new Error("You cannot pipe after the response has been ended."))}},H.prototype.write=function(){if(!this._aborted)return this._started||this.start(),this.req?this.req.write.apply(this.req,arguments):void 0},H.prototype.end=function(e){this._aborted||(e&&this.write(e),this._started||this.start(),this.req&&this.req.end())},H.prototype.pause=function(){this.responseContent?this.responseContent.pause.apply(this.responseContent,arguments):this._paused=!0},H.prototype.resume=function(){this.responseContent?this.responseContent.resume.apply(this.responseContent,arguments):this._paused=!1},H.prototype.destroy=function(){this._ended?this.response&&this.response.destroy():this.end()},H.defaultProxyHeaderWhiteList=C.defaultProxyHeaderWhiteList.slice(),H.defaultProxyHeaderExclusiveList=C.defaultProxyHeaderExclusiveList.slice(),H.prototype.toJSON=U,e.exports=H},function(e,t){e.exports=require("zlib")},function(e,t,a){
/*!
 *  Copyright 2010 LearnBoost <dev@learnboost.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var i=a(1),r=a(8).parse,o=["acl","location","logging","notification","partNumber","policy","requestPayment","torrent","uploadId","uploads","versionId","versioning","versions","website"];function n(e){return"AWS "+e.key+":"+u(e)}function s(e){return i.createHmac("sha1",e.secret).update(e.message).digest("base64")}function u(e){return e.message=c(e),s(e)}function c(e){var t=e.amazonHeaders||"";return t&&(t+="\n"),[e.verb,e.md5,e.contentType,e.date?e.date.toUTCString():"",t+e.resource].join("\n")}function p(e){return"GET\n\n\n"+e.date+"\n"+e.resource}e.exports=n,e.exports.authorization=n,e.exports.hmacSha1=s,e.exports.sign=u,e.exports.signQuery=function(e){return e.message=p(e),s(e)},e.exports.stringToSign=c,e.exports.queryStringToSign=p,e.exports.canonicalizeHeaders=function(e){for(var t=[],a=Object.keys(e),i=0,r=a.length;i<r;++i){var o,n=e[o=a[i]];0===(o=o.toLowerCase()).indexOf("x-amz")&&t.push(o+":"+n)}return t.sort().join("\n")},e.exports.canonicalizeResource=function(e){var t=r(e,!0),a=t.pathname,i=[];return Object.keys(t.query).forEach(function(e){if(~o.indexOf(e)){var a=""==t.query[e]?"":"="+encodeURIComponent(t.query[e]);i.push(e+a)}}),a+(i.length?"?"+i.sort().join("&"):"")}},function(e,t,a){var i=t,r=a(8),o=a(24),n=a(1),s=a(104)(1e3);function u(e,t,a){return n.createHmac("sha256",e).update(t,"utf8").digest(a)}function c(e,t){return n.createHash("sha256").update(e,"utf8").digest(t)}function p(e){return e.replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e,t){"string"==typeof e&&(e=r.parse(e));var a=e.headers=e.headers||{},i=this.matchHost(e.hostname||e.host||a.Host||a.host);this.request=e,this.credentials=t||this.defaultCredentials(),this.service=e.service||i[0]||"",this.region=e.region||i[1]||"us-east-1","email"===this.service&&(this.service="ses"),!e.method&&e.body&&(e.method="POST"),a.Host||a.host||(a.Host=e.hostname||e.host||this.createHost(),e.port&&(a.Host+=":"+e.port)),e.hostname||e.host||(e.hostname=a.Host||a.host),this.isCodeCommitGit="codecommit"===this.service&&"GIT"===e.method}l.prototype.matchHost=function(e){var t=((e||"").match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com(\.cn)?$/)||[]).slice(1,3);return"es"===t[1]&&(t=t.reverse()),t},l.prototype.isSingleRegion=function(){return["s3","sdb"].indexOf(this.service)>=0&&"us-east-1"===this.region||["cloudfront","ls","route53","iam","importexport","sts"].indexOf(this.service)>=0},l.prototype.createHost=function(){var e=this.isSingleRegion()?"":("s3"===this.service&&"us-east-1"!==this.region?"-":".")+this.region;return("ses"===this.service?"email":this.service)+e+".amazonaws.com"},l.prototype.prepareRequest=function(){this.parsePath();var e,t=this.request,a=t.headers;t.signQuery?(this.parsedPath.query=e=this.parsedPath.query||{},this.credentials.sessionToken&&(e["X-Amz-Security-Token"]=this.credentials.sessionToken),"s3"!==this.service||e["X-Amz-Expires"]||(e["X-Amz-Expires"]=86400),e["X-Amz-Date"]?this.datetime=e["X-Amz-Date"]:e["X-Amz-Date"]=this.getDateTime(),e["X-Amz-Algorithm"]="AWS4-HMAC-SHA256",e["X-Amz-Credential"]=this.credentials.accessKeyId+"/"+this.credentialString(),e["X-Amz-SignedHeaders"]=this.signedHeaders()):(t.doNotModifyHeaders||this.isCodeCommitGit||(!t.body||a["Content-Type"]||a["content-type"]||(a["Content-Type"]="application/x-www-form-urlencoded; charset=utf-8"),!t.body||a["Content-Length"]||a["content-length"]||(a["Content-Length"]=Buffer.byteLength(t.body)),!this.credentials.sessionToken||a["X-Amz-Security-Token"]||a["x-amz-security-token"]||(a["X-Amz-Security-Token"]=this.credentials.sessionToken),"s3"!==this.service||a["X-Amz-Content-Sha256"]||a["x-amz-content-sha256"]||(a["X-Amz-Content-Sha256"]=c(this.request.body||"","hex")),a["X-Amz-Date"]||a["x-amz-date"]?this.datetime=a["X-Amz-Date"]||a["x-amz-date"]:a["X-Amz-Date"]=this.getDateTime()),delete a.Authorization,delete a.authorization)},l.prototype.sign=function(){return this.parsedPath||this.prepareRequest(),this.request.signQuery?this.parsedPath.query["X-Amz-Signature"]=this.signature():this.request.headers.Authorization=this.authHeader(),this.request.path=this.formatPath(),this.request},l.prototype.getDateTime=function(){if(!this.datetime){var e=this.request.headers,t=new Date(e.Date||e.date||new Date);this.datetime=t.toISOString().replace(/[:\-]|\.\d{3}/g,""),this.isCodeCommitGit&&(this.datetime=this.datetime.slice(0,-1))}return this.datetime},l.prototype.getDate=function(){return this.getDateTime().substr(0,8)},l.prototype.authHeader=function(){return["AWS4-HMAC-SHA256 Credential="+this.credentials.accessKeyId+"/"+this.credentialString(),"SignedHeaders="+this.signedHeaders(),"Signature="+this.signature()].join(", ")},l.prototype.signature=function(){var e,t,a,i=this.getDate(),r=[this.credentials.secretAccessKey,i,this.region,this.service].join(),o=s.get(r);return o||(e=u("AWS4"+this.credentials.secretAccessKey,i),t=u(e,this.region),a=u(t,this.service),o=u(a,"aws4_request"),s.set(r,o)),u(o,this.stringToSign(),"hex")},l.prototype.stringToSign=function(){return["AWS4-HMAC-SHA256",this.getDateTime(),this.credentialString(),c(this.canonicalString(),"hex")].join("\n")},l.prototype.canonicalString=function(){this.parsedPath||this.prepareRequest();var e,t=this.parsedPath.path,a=this.parsedPath.query,i=this.request.headers,r="",n="s3"!==this.service,s="s3"===this.service||this.request.doNotEncodePath,u="s3"===this.service,l="s3"===this.service;return e="s3"===this.service&&this.request.signQuery?"UNSIGNED-PAYLOAD":this.isCodeCommitGit?"":i["X-Amz-Content-Sha256"]||i["x-amz-content-sha256"]||c(this.request.body||"","hex"),a&&(r=p(o.stringify(Object.keys(a).sort().reduce(function(e,t){return t?(e[t]=Array.isArray(a[t])?l?a[t][0]:a[t].slice().sort():a[t],e):e},{})))),"/"!==t&&(n&&(t=t.replace(/\/{2,}/g,"/")),"/"!==(t=t.split("/").reduce(function(e,t){return n&&".."===t?e.pop():n&&"."===t||(s&&(t=decodeURIComponent(t)),e.push(p(encodeURIComponent(t)))),e},[]).join("/"))[0]&&(t="/"+t),u&&(t=t.replace(/%2F/g,"/"))),[this.request.method||"GET",t,r,this.canonicalHeaders()+"\n",this.signedHeaders(),e].join("\n")},l.prototype.canonicalHeaders=function(){var e=this.request.headers;return Object.keys(e).sort(function(e,t){return e.toLowerCase()<t.toLowerCase()?-1:1}).map(function(t){return t.toLowerCase()+":"+e[t].toString().trim().replace(/\s+/g," ")}).join("\n")},l.prototype.signedHeaders=function(){return Object.keys(this.request.headers).map(function(e){return e.toLowerCase()}).sort().join(";")},l.prototype.credentialString=function(){return[this.getDate(),this.region,this.service,"aws4_request"].join("/")},l.prototype.defaultCredentials=function(){var e=process.env;return{accessKeyId:e.AWS_ACCESS_KEY_ID||e.AWS_ACCESS_KEY,secretAccessKey:e.AWS_SECRET_ACCESS_KEY||e.AWS_SECRET_KEY,sessionToken:e.AWS_SESSION_TOKEN}},l.prototype.parsePath=function(){var e=this.request.path||"/",t=e.indexOf("?"),a=null;t>=0&&(a=o.parse(e.slice(t+1)),e=e.slice(0,t)),/[^0-9A-Za-z!'()*\-._~%\/]/.test(e)&&(e=e.split("/").map(function(e){return encodeURIComponent(decodeURIComponent(e))}).join("/")),this.parsedPath={path:e,query:a}},l.prototype.formatPath=function(){var e=this.parsedPath.path,t=this.parsedPath.query;return t?(null!=t[""]&&delete t[""],e+"?"+p(o.stringify(t))):e},i.RequestSigner=l,i.sign=function(e,t){return new l(e,t).sign()}},function(e,t){function a(e){this.capacity=0|e,this.map=Object.create(null),this.list=new i}function i(){this.firstNode=null,this.lastNode=null}function r(e,t){this.key=e,this.val=t,this.prev=null,this.next=null}e.exports=function(e){return new a(e)},a.prototype.get=function(e){var t=this.map[e];if(null!=t)return this.used(t),t.val},a.prototype.set=function(e,t){var a=this.map[e];if(null!=a)a.val=t;else{if(this.capacity||this.prune(),!this.capacity)return!1;a=new r(e,t),this.map[e]=a,this.capacity--}return this.used(a),!0},a.prototype.used=function(e){this.list.moveToFront(e)},a.prototype.prune=function(){var e=this.list.pop();null!=e&&(delete this.map[e.key],this.capacity++)},i.prototype.moveToFront=function(e){this.firstNode!=e&&(this.remove(e),null==this.firstNode?(this.firstNode=e,this.lastNode=e,e.prev=null,e.next=null):(e.prev=null,e.next=this.firstNode,e.next.prev=e,this.firstNode=e))},i.prototype.pop=function(){var e=this.lastNode;return null!=e&&this.remove(e),e},i.prototype.remove=function(e){this.firstNode==e?this.firstNode=e.next:null!=e.prev&&(e.prev.next=e.next),this.lastNode==e?this.lastNode=e.prev:null!=e.next&&(e.next.prev=e.prev)}},function(e,t,a){var i=a(106),r=a(114),o=a(121),n=a(32);e.exports={parse:i.parseRequest,parseRequest:i.parseRequest,sign:r.signRequest,signRequest:r.signRequest,createSigner:r.createSigner,isSigner:r.isSigner,sshKeyToPEM:n.sshKeyToPEM,sshKeyFingerprint:n.fingerprint,pemToRsaSSHKey:n.pemToRsaSSHKey,verify:o.verifySignature,verifySignature:o.verifySignature,verifyHMAC:o.verifyHMAC}},function(e,t,a){var i=a(0),r=a(3),o=a(32),n=(o.HASH_ALGOS,o.PK_ALGOS,o.HttpSignatureError),s=o.InvalidAlgorithmError,u=o.validateAlgorithm,c=0,p=1,l=0,m=1,h=2,d=3;function f(e){n.call(this,e,f)}function g(e){n.call(this,e,g)}function v(e){n.call(this,e,v)}function y(e){n.call(this,e,y)}function b(e){n.call(this,e,b)}r.inherits(f,n),r.inherits(g,n),r.inherits(v,n),r.inherits(y,n),r.inherits(b,n),e.exports={parseRequest:function(e,t){i.object(e,"request"),i.object(e.headers,"request.headers"),void 0===t&&(t={}),void 0===t.headers&&(t.headers=[e.headers["x-date"]?"x-date":"date"]),i.object(t,"options"),i.arrayOfString(t.headers,"options.headers"),i.optionalFinite(t.clockSkew,"options.clockSkew");var a=t.authorizationHeaderName||"authorization";if(!e.headers[a])throw new y("no "+a+" header present in the request");t.clockSkew=t.clockSkew||300;var r,o=0,n=c,k=l,w="",j="",x={scheme:"",params:{},signingString:""},E=e.headers[a];for(o=0;o<E.length;o++){var S=E.charAt(o);switch(Number(n)){case c:" "!==S?x.scheme+=S:n=p;break;case p:switch(Number(k)){case l:var _=S.charCodeAt(0);if(_>=65&&_<=90||_>=97&&_<=122)w+=S;else{if("="!==S)throw new g("bad param format");if(0===w.length)throw new g("bad param format");k=m}break;case m:if('"'!==S)throw new g("bad param format");j="",k=h;break;case h:'"'===S?(x.params[w]=j,k=d):j+=S;break;case d:if(","!==S)throw new g("bad param format");w="",k=l;break;default:throw new Error("Invalid substate")}break;default:throw new Error("Invalid substate")}}if(x.params.headers&&""!==x.params.headers?x.params.headers=x.params.headers.split(" "):e.headers["x-date"]?x.params.headers=["x-date"]:x.params.headers=["date"],!x.scheme||"Signature"!==x.scheme)throw new g('scheme was not "Signature"');if(!x.params.keyId)throw new g("keyId was not specified");if(!x.params.algorithm)throw new g("algorithm was not specified");if(!x.params.signature)throw new g("signature was not specified");x.params.algorithm=x.params.algorithm.toLowerCase();try{u(x.params.algorithm)}catch(e){throw e instanceof s?new v(x.params.algorithm+" is not supported"):e}for(o=0;o<x.params.headers.length;o++){var R=x.params.headers[o].toLowerCase();if(x.params.headers[o]=R,"request-line"===R){if(t.strict)throw new b("request-line is not a valid header with strict parsing enabled.");x.signingString+=e.method+" "+e.url+" HTTP/"+e.httpVersion}else if("(request-target)"===R)x.signingString+="(request-target): "+e.method.toLowerCase()+" "+e.url;else{var A=e.headers[R];if(void 0===A)throw new y(R+" was not in the request");x.signingString+=R+": "+A}o+1<x.params.headers.length&&(x.signingString+="\n")}if(e.headers.date||e.headers["x-date"]){r=e.headers["x-date"]?new Date(e.headers["x-date"]):new Date(e.headers.date);var C=new Date,q=Math.abs(C.getTime()-r.getTime());if(q>1e3*t.clockSkew)throw new f("clock skew of "+q/1e3+"s was greater than "+t.clockSkew+"s")}if(t.headers.forEach(function(e){if(x.params.headers.indexOf(e.toLowerCase())<0)throw new y(e+" was not a signed header")}),t.algorithms&&-1===t.algorithms.indexOf(x.params.algorithm))throw new v(x.params.algorithm+" is not a supported algorithm");return x.algorithm=x.params.algorithm.toUpperCase(),x.keyId=x.params.keyId,x}}},function(e,t,a){var i=a(39),r=a(40),o=a(108),n=a(109);for(var s in e.exports={Reader:o,Writer:n},r)r.hasOwnProperty(s)&&(e.exports[s]=r[s]);for(var u in i)i.hasOwnProperty(u)&&(e.exports[u]=i[u])},function(e,t,a){var i=a(21),r=a(2).Buffer,o=a(40),n=a(39).newInvalidAsn1Error;function s(e){if(!e||!r.isBuffer(e))throw new TypeError("data must be a node Buffer");this._buf=e,this._size=e.length,this._len=0,this._offset=0}Object.defineProperty(s.prototype,"length",{enumerable:!0,get:function(){return this._len}}),Object.defineProperty(s.prototype,"offset",{enumerable:!0,get:function(){return this._offset}}),Object.defineProperty(s.prototype,"remain",{get:function(){return this._size-this._offset}}),Object.defineProperty(s.prototype,"buffer",{get:function(){return this._buf.slice(this._offset)}}),s.prototype.readByte=function(e){if(this._size-this._offset<1)return null;var t=255&this._buf[this._offset];return e||(this._offset+=1),t},s.prototype.peek=function(){return this.readByte(!0)},s.prototype.readLength=function(e){if(void 0===e&&(e=this._offset),e>=this._size)return null;var t=255&this._buf[e++];if(null===t)return null;if(128==(128&t)){if(0===(t&=127))throw n("Indefinite length not supported");if(t>4)throw n("encoding too long");if(this._size-e<t)return null;this._len=0;for(var a=0;a<t;a++)this._len=(this._len<<8)+(255&this._buf[e++])}else this._len=t;return e},s.prototype.readSequence=function(e){var t=this.peek();if(null===t)return null;if(void 0!==e&&e!==t)throw n("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var a=this.readLength(this._offset+1);return null===a?null:(this._offset=a,t)},s.prototype.readInt=function(){return this._readTag(o.Integer)},s.prototype.readBoolean=function(){return 0!==this._readTag(o.Boolean)},s.prototype.readEnumeration=function(){return this._readTag(o.Enumeration)},s.prototype.readString=function(e,t){e||(e=o.OctetString);var a=this.peek();if(null===a)return null;if(a!==e)throw n("Expected 0x"+e.toString(16)+": got 0x"+a.toString(16));var i=this.readLength(this._offset+1);if(null===i)return null;if(this.length>this._size-i)return null;if(this._offset=i,0===this.length)return t?r.alloc(0):"";var s=this._buf.slice(this._offset,this._offset+this.length);return this._offset+=this.length,t?s:s.toString("utf8")},s.prototype.readOID=function(e){e||(e=o.OID);var t=this.readString(e,!0);if(null===t)return null;for(var a=[],i=0,r=0;r<t.length;r++){var n=255&t[r];i<<=7,i+=127&n,0==(128&n)&&(a.push(i),i=0)}return i=a.shift(),a.unshift(i%40),a.unshift(i/40>>0),a.join(".")},s.prototype._readTag=function(e){i.ok(void 0!==e);var t=this.peek();if(null===t)return null;if(t!==e)throw n("Expected 0x"+e.toString(16)+": got 0x"+t.toString(16));var a=this.readLength(this._offset+1);if(null===a)return null;if(this.length>4)throw n("Integer too long: "+this.length);if(this.length>this._size-a)return null;this._offset=a;for(var r=this._buf[this._offset],o=0,s=0;s<this.length;s++)o<<=8,o|=255&this._buf[this._offset++];return 128==(128&r)&&4!==s&&(o-=1<<8*s),o>>0},e.exports=s},function(e,t,a){var i=a(21),r=a(2).Buffer,o=a(40),n=a(39).newInvalidAsn1Error,s={size:1024,growthFactor:8};function u(e){var t,a;t=s,a=e||{},i.ok(t),i.equal(typeof t,"object"),i.ok(a),i.equal(typeof a,"object"),Object.getOwnPropertyNames(t).forEach(function(e){if(!a[e]){var i=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(a,e,i)}}),e=a,this._buf=r.alloc(e.size||1024),this._size=this._buf.length,this._offset=0,this._options=e,this._seq=[]}Object.defineProperty(u.prototype,"buffer",{get:function(){if(this._seq.length)throw n(this._seq.length+" unended sequence(s)");return this._buf.slice(0,this._offset)}}),u.prototype.writeByte=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");this._ensure(1),this._buf[this._offset++]=e},u.prototype.writeInt=function(e,t){if("number"!=typeof e)throw new TypeError("argument must be a Number");"number"!=typeof t&&(t=o.Integer);for(var a=4;(0==(4286578688&e)||-8388608==(4286578688&e))&&a>1;)a--,e<<=8;if(a>4)throw n("BER ints cannot be > 0xffffffff");for(this._ensure(2+a),this._buf[this._offset++]=t,this._buf[this._offset++]=a;a-- >0;)this._buf[this._offset++]=(4278190080&e)>>>24,e<<=8},u.prototype.writeNull=function(){this.writeByte(o.Null),this.writeByte(0)},u.prototype.writeEnumeration=function(e,t){if("number"!=typeof e)throw new TypeError("argument must be a Number");return"number"!=typeof t&&(t=o.Enumeration),this.writeInt(e,t)},u.prototype.writeBoolean=function(e,t){if("boolean"!=typeof e)throw new TypeError("argument must be a Boolean");"number"!=typeof t&&(t=o.Boolean),this._ensure(3),this._buf[this._offset++]=t,this._buf[this._offset++]=1,this._buf[this._offset++]=e?255:0},u.prototype.writeString=function(e,t){if("string"!=typeof e)throw new TypeError("argument must be a string (was: "+typeof e+")");"number"!=typeof t&&(t=o.OctetString);var a=r.byteLength(e);this.writeByte(t),this.writeLength(a),a&&(this._ensure(a),this._buf.write(e,this._offset),this._offset+=a)},u.prototype.writeBuffer=function(e,t){if("number"!=typeof t)throw new TypeError("tag must be a number");if(!r.isBuffer(e))throw new TypeError("argument must be a buffer");this.writeByte(t),this.writeLength(e.length),this._ensure(e.length),e.copy(this._buf,this._offset,0,e.length),this._offset+=e.length},u.prototype.writeStringArray=function(e){if(!e instanceof Array)throw new TypeError("argument must be an Array[String]");var t=this;e.forEach(function(e){t.writeString(e)})},u.prototype.writeOID=function(e,t){if("string"!=typeof e)throw new TypeError("argument must be a string");if("number"!=typeof t&&(t=o.OID),!/^([0-9]+\.){3,}[0-9]+$/.test(e))throw new Error("argument is not a valid OID string");var a=e.split("."),i=[];i.push(40*parseInt(a[0],10)+parseInt(a[1],10)),a.slice(2).forEach(function(e){!function(e,t){t<128?e.push(t):t<16384?(e.push(t>>>7|128),e.push(127&t)):t<2097152?(e.push(t>>>14|128),e.push(255&(t>>>7|128)),e.push(127&t)):t<268435456?(e.push(t>>>21|128),e.push(255&(t>>>14|128)),e.push(255&(t>>>7|128)),e.push(127&t)):(e.push(255&(t>>>28|128)),e.push(255&(t>>>21|128)),e.push(255&(t>>>14|128)),e.push(255&(t>>>7|128)),e.push(127&t))}(i,parseInt(e,10))});var r=this;this._ensure(2+i.length),this.writeByte(t),this.writeLength(i.length),i.forEach(function(e){r.writeByte(e)})},u.prototype.writeLength=function(e){if("number"!=typeof e)throw new TypeError("argument must be a Number");if(this._ensure(4),e<=127)this._buf[this._offset++]=e;else if(e<=255)this._buf[this._offset++]=129,this._buf[this._offset++]=e;else if(e<=65535)this._buf[this._offset++]=130,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e;else{if(!(e<=16777215))throw n("Length too long (> 4 bytes)");this._buf[this._offset++]=131,this._buf[this._offset++]=e>>16,this._buf[this._offset++]=e>>8,this._buf[this._offset++]=e}},u.prototype.startSequence=function(e){"number"!=typeof e&&(e=o.Sequence|o.Constructor),this.writeByte(e),this._seq.push(this._offset),this._ensure(3),this._offset+=3},u.prototype.endSequence=function(){var e=this._seq.pop(),t=e+3,a=this._offset-t;if(a<=127)this._shift(t,a,-2),this._buf[e]=a;else if(a<=255)this._shift(t,a,-1),this._buf[e]=129,this._buf[e+1]=a;else if(a<=65535)this._buf[e]=130,this._buf[e+1]=a>>8,this._buf[e+2]=a;else{if(!(a<=16777215))throw n("Sequence too long");this._shift(t,a,1),this._buf[e]=131,this._buf[e+1]=a>>16,this._buf[e+2]=a>>8,this._buf[e+3]=a}},u.prototype._shift=function(e,t,a){i.ok(void 0!==e),i.ok(void 0!==t),i.ok(a),this._buf.copy(this._buf,e+a,e,e+t),this._offset+=a},u.prototype._ensure=function(e){if(i.ok(e),this._size-this._offset<e){var t=this._size*this._options.growthFactor;t-this._offset<e&&(t+=e);var a=r.alloc(t);this._buf.copy(a,0,0,this._offset),this._buf=a,this._size=t}},e.exports=u},function(e,t,a){var i=a(1),r=a(26).BigInteger,o=(a(33).ECPointFp,a(2).Buffer);function n(e,t){return e.length>=t?e:n("0"+e,t)}t.ECCurves=a(111),t.ECKey=function(e,t,a){var s,u=e(),c=u.getN(),p=Math.floor(c.bitLength()/8);if(t)if(a){e=u.getCurve();this.P=e.decodePointHex(t.toString("hex"))}else{if(t.length!=p)return!1;s=new r(t.toString("hex"),16)}else{var l=c.subtract(r.ONE),m=new r(i.randomBytes(c.bitLength()));s=m.mod(l).add(r.ONE),this.P=u.getG().multiply(s)}this.P&&(this.PublicKey=o.from(u.getCurve().encodeCompressedPointHex(this.P),"hex")),s&&(this.PrivateKey=o.from(n(s.toString(16),2*p),"hex"),this.deriveSharedSecret=function(e){if(!e||!e.P)return!1;var t=e.P.multiply(s);return o.from(n(t.getX().toBigInteger().toString(16),2*p),"hex")})}},function(e,t,a){var i=a(26).BigInteger,r=a(33).ECCurveFp;function o(e,t,a,i){this.curve=e,this.g=t,this.n=a,this.h=i}function n(e){return new i(e,16)}function s(){var e=n("FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF"),t=n("FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC"),a=n("E87579C11079F43DD824993C2CEE5ED3"),s=n("FFFFFFFE0000000075A30D1B9038A115"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("04161FF7528B899B2D0C28607CA52C5B86CF5AC8395BAFEB13C02DA292DDED7A83");return new o(c,p,s,u)}function u(){var e=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73"),t=i.ZERO,a=n("7"),s=n("0100000000000000000001B8FA16DFAB9ACA16B6B3"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("043B4C382CE37AA192A4019E763036F4F5DD4D7EBB938CF935318FDCED6BC28286531733C3F03C4FEE");return new o(c,p,s,u)}function c(){var e=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF"),t=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC"),a=n("1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45"),s=n("0100000000000000000001F4C8F927AED3CA752257"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("044A96B5688EF573284664698968C38BB913CBFC8223A628553168947D59DCC912042351377AC5FB32");return new o(c,p,s,u)}function p(){var e=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37"),t=i.ZERO,a=n("3"),s=n("FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("04DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D");return new o(c,p,s,u)}function l(){var e=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF"),t=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC"),a=n("64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1"),s=n("FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("04188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF101207192B95FFC8DA78631011ED6B24CDD573F977A11E794811");return new o(c,p,s,u)}function m(){var e=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001"),t=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE"),a=n("B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4"),s=n("FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("04B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34");return new o(c,p,s,u)}function h(){var e=n("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF"),t=n("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC"),a=n("5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B"),s=n("FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551"),u=i.ONE,c=new r(e,t,a),p=c.decodePointHex("046B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C2964FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5");return new o(c,p,s,u)}o.prototype.getCurve=function(){return this.curve},o.prototype.getG=function(){return this.g},o.prototype.getN=function(){return this.n},o.prototype.getH=function(){return this.h},e.exports={secp128r1:s,secp160k1:u,secp160r1:c,secp192k1:p,secp192r1:l,secp224r1:m,secp256r1:h}},function(e,t,a){e.exports={read:function(e,t){n.isBuffer(e)&&(e=e.toString("ascii"));var a=e.trim().split(/[ \t\n]+/g);if(a.length<2||a.length>3)throw new Error("Not a valid SSH certificate line");var i=a[0],r=a[1];return g(r=n.from(r,"base64"),i)},verify:function(e,t){return!1},sign:function(e,t){void 0===e.signatures.openssh&&(e.signatures.openssh={});try{var a=b(e,!0)}catch(t){return delete e.signatures.openssh,!1}var i=e.signatures.openssh,r=void 0;"rsa"!==t.type&&"dsa"!==t.type||(r="sha1");var o=t.createSign(r);return o.write(a),i.signature=o.sign(),!0},signAsync:function(e,t,a){void 0===e.signatures.openssh&&(e.signatures.openssh={});try{var i=b(e,!0)}catch(t){return delete e.signatures.openssh,void a(t)}var r=e.signatures.openssh;t(i,function(e,t){if(e)a(e);else{try{t.toBuffer("ssh")}catch(e){return void a(e)}r.signature=t,a()}})},write:function(e,t){void 0===t&&(t={});var a=b(e),i=k(e.subjectKey)+" "+a.toString("base64");t.comment&&(i=i+" "+t.comment);return i},fromBuffer:g,toBuffer:b};var i=a(0),r=a(28),o=a(1),n=a(2).Buffer,s=a(7),u=a(4),c=(a(6),a(31)),p=a(15),l=a(11),m=a(5),h=a(30);var d={user:1,host:2};Object.keys(d).forEach(function(e){d[d[e]]=e});var f=/^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;function g(e,t,a){var o=new r({buffer:e}),n=o.readString();if(void 0!==t&&n!==t)throw new Error("SSH certificate algorithm mismatch");void 0===t&&(t=n);var g={signatures:{}};g.signatures.openssh={},g.signatures.openssh.nonce=o.readBuffer();var y={},b=y.parts=[];y.type=function(e){if("ssh-rsa-cert-v01@openssh.com"===e)return"rsa";if("ssh-dss-cert-v01@openssh.com"===e)return"dsa";if(e.match(f))return"ecdsa";if("ssh-ed25519-cert-v01@openssh.com"===e)return"ed25519";throw new Error("Unsupported cert type "+e)}(t);for(var k=s.info[y.type].parts.length;b.length<k;)b.push(o.readPart());i.ok(b.length>=1,"key must have at least one part");var w=s.info[y.type];if("ecdsa"===y.type){var j=f.exec(t);i.ok(null!==j),i.strictEqual(j[1],b[0].data.toString())}for(var x=0;x<w.parts.length;++x)if(b[x].name=w.parts[x],"curve"!==b[x].name&&!1!==w.normalize){var E=b[x];E.data=m.mpNormalize(E.data)}g.subjectKey=new u(y),g.serial=o.readInt64();var S=d[o.readInt()];i.string(S,"valid cert type"),g.signatures.openssh.keyId=o.readString();for(var _=[],R=o.readBuffer(),A=new r({buffer:R});!A.atEnd();)_.push(A.readString());0===_.length&&(_=["*"]),g.subjects=_.map(function(e){if("user"===S)return c.forUser(e);if("host"===S)return c.forHost(e);throw new Error("Unknown identity type "+S)}),g.validFrom=v(o.readInt64()),g.validUntil=v(o.readInt64());for(var C,q=[],O=new r({buffer:o.readBuffer()});!O.atEnd();)(C={critical:!0}).name=O.readString(),C.data=O.readBuffer(),q.push(C);for(O=new r({buffer:o.readBuffer()});!O.atEnd();)(C={critical:!1}).name=O.readString(),C.data=O.readBuffer(),q.push(C);g.signatures.openssh.exts=q,o.readBuffer();var P=o.readBuffer();g.issuerKey=p.read(P),g.issuer=c.forHost("**");var F=o.readBuffer();return g.signatures.openssh.signature=l.parse(F,g.issuerKey.type,"ssh"),void 0!==a&&(a.remainder=o.remainder(),a.consumed=o._offset),new h(g)}function v(e){var t=4294967296*e.readUInt32BE(0);t+=e.readUInt32BE(4);var a=new Date;return a.setTime(1e3*t),a.sourceInt64=e,a}function y(e){if(void 0!==e.sourceInt64)return e.sourceInt64;var t=Math.round(e.getTime()/1e3),a=Math.floor(t/4294967296),i=Math.floor(t%4294967296),r=n.alloc(8);return r.writeUInt32BE(a,0),r.writeUInt32BE(i,4),r}function b(e,t){i.object(e.signatures.openssh,"signature for openssh format");var a=e.signatures.openssh;void 0===a.nonce&&(a.nonce=o.randomBytes(16));var u=new r({});u.writeString(k(e.subjectKey)),u.writeBuffer(a.nonce);var c=e.subjectKey;s.info[c.type].parts.forEach(function(e){u.writePart(c.part[e])}),u.writeInt64(e.serial);var l=e.subjects[0].type;i.notStrictEqual(l,"unknown"),e.subjects.forEach(function(e){i.strictEqual(e.type,l)}),l=d[l],u.writeInt(l),void 0===a.keyId&&(a.keyId=e.subjects[0].type+"_"+(e.subjects[0].uid||e.subjects[0].hostname)),u.writeString(a.keyId);var m=new r({});e.subjects.forEach(function(e){l===d.host?m.writeString(e.hostname):l===d.user&&m.writeString(e.uid)}),u.writeBuffer(m.toBuffer()),u.writeInt64(y(e.validFrom)),u.writeInt64(y(e.validUntil));var h=a.exts;void 0===h&&(h=[]);var f=new r({});return h.forEach(function(e){!0===e.critical&&(f.writeString(e.name),f.writeBuffer(e.data))}),u.writeBuffer(f.toBuffer()),f=new r({}),h.forEach(function(e){!0!==e.critical&&(f.writeString(e.name),f.writeBuffer(e.data))}),u.writeBuffer(f.toBuffer()),u.writeBuffer(n.alloc(0)),m=p.write(e.issuerKey),u.writeBuffer(m),t||u.writeBuffer(a.signature.toBuffer("ssh")),u.toBuffer()}function k(e){if("rsa"===e.type)return"ssh-rsa-cert-v01@openssh.com";if("dsa"===e.type)return"ssh-dss-cert-v01@openssh.com";if("ecdsa"===e.type)return"ecdsa-sha2-"+e.curve+"-cert-v01@openssh.com";if("ed25519"===e.type)return"ssh-ed25519-cert-v01@openssh.com";throw new Error("Unsupported key type "+e.type)}},function(e,t,a){var i=a(61);e.exports={read:function(e,t){"string"!=typeof e&&(r.buffer(e,"buf"),e=e.toString("ascii"));var a,n,s=e.trim().split(/[\r\n]+/g),u=-1;for(;!a&&u<s.length;)a=s[++u].match(/[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);r.ok(a,"invalid PEM header");var c=s.length;for(;!n&&c>0;)n=s[--c].match(/[-]+[ ]*END CERTIFICATE[ ]*[-]+/);r.ok(n,"invalid PEM footer"),s=s.slice(u,c+1);var p={};for(;s=s.slice(1),a=s[0].match(/^([A-Za-z0-9-]+): (.+)$/);)p[a[1].toLowerCase()]=a[2];return s=s.slice(0,-1).join(""),e=o.from(s,"base64"),i.read(e,t)},verify:i.verify,sign:i.sign,write:function(e,t){var a=i.write(e,t),r=a.toString("base64"),n=r.length+r.length/64+18+16+2*"CERTIFICATE".length+10,s=o.alloc(n),u=0;u+=s.write("-----BEGIN CERTIFICATE-----\n",u);for(var c=0;c<r.length;){var p=c+64;p>r.length&&(p=r.length),u+=s.write(r.slice(c,p),u),s[u++]=10,c=p}return u+=s.write("-----END CERTIFICATE-----\n",u),s.slice(0,u)}};var r=a(0),o=(a(12),a(2).Buffer);a(7),a(5),a(4),a(6),a(14),a(31),a(11),a(30)},function(e,t,a){var i=a(0),r=a(1),o=(a(17),a(3)),n=a(38),s=a(115),u=a(32),c=a(3).format,p=u.HASH_ALGOS,l=u.PK_ALGOS,m=u.InvalidAlgorithmError,h=u.HttpSignatureError,d=u.validateAlgorithm,f='Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';function g(e){h.call(this,e,g)}function v(e){h.call(this,e,v)}function y(e){i.object(e,"options");var t=[];if(void 0!==e.algorithm&&(i.string(e.algorithm,"options.algorithm"),t=d(e.algorithm)),this.rs_alg=t,void 0!==e.sign)i.func(e.sign,"options.sign"),this.rs_signFunc=e.sign;else if("hmac"===t[0]&&void 0!==e.key){if(i.string(e.keyId,"options.keyId"),this.rs_keyId=e.keyId,"string"!=typeof e.key&&!Buffer.isBuffer(e.key))throw new TypeError("options.key for HMAC must be a string or Buffer");this.rs_signer=r.createHmac(t[1].toUpperCase(),e.key),this.rs_signer.sign=function(){var e=this.digest("base64");return{hashAlgorithm:t[1],toString:function(){return e}}}}else{if(void 0===e.key)throw new TypeError("options.sign (func) or options.key is required");var a=e.key;if(("string"==typeof a||Buffer.isBuffer(a))&&(a=n.parsePrivateKey(a)),i.ok(n.PrivateKey.isPrivateKey(a,[1,2]),"options.key must be a sshpk.PrivateKey"),this.rs_key=a,i.string(e.keyId,"options.keyId"),this.rs_keyId=e.keyId,!l[a.type])throw new m(a.type.toUpperCase()+" type keys are not supported");if(void 0!==t[0]&&a.type!==t[0])throw new m("options.key must be a "+t[0].toUpperCase()+" key, was given a "+a.type.toUpperCase()+" key instead");this.rs_signer=a.createSign(t[1])}this.rs_headers=[],this.rs_lines=[]}o.inherits(g,h),o.inherits(v,h),y.prototype.writeHeader=function(e,t){if(i.string(e,"header"),e=e.toLowerCase(),i.string(t,"value"),this.rs_headers.push(e),this.rs_signFunc)this.rs_lines.push(e+": "+t);else{var a=e+": "+t;this.rs_headers.length>0&&(a="\n"+a),this.rs_signer.update(a)}return t},y.prototype.writeDateHeader=function(){return this.writeHeader("date",s.rfc1123(new Date))},y.prototype.writeTarget=function(e,t){i.string(e,"method"),i.string(t,"path"),e=e.toLowerCase(),this.writeHeader("(request-target)",e+" "+t)},y.prototype.sign=function(e){if(i.func(e,"callback"),this.rs_headers.length<1)throw new Error("At least one header must be signed");var t,a;if(this.rs_signFunc){var r=this.rs_lines.join("\n"),o=this;this.rs_signFunc(r,function(r,n){if(r)e(r);else{try{i.object(n,"signature"),i.string(n.keyId,"signature.keyId"),i.string(n.algorithm,"signature.algorithm"),i.string(n.signature,"signature.signature"),t=d(n.algorithm),a=c(f,n.keyId,n.algorithm,o.rs_headers.join(" "),n.signature)}catch(t){return void e(t)}e(null,a)}})}else{try{var n=this.rs_signer.sign()}catch(t){return void e(t)}t=(this.rs_alg[0]||this.rs_key.type)+"-"+n.hashAlgorithm;var s=n.toString();a=c(f,this.rs_keyId,t,this.rs_headers.join(" "),s),e(null,a)}},e.exports={isSigner:function(e){return"object"==typeof e&&e instanceof y},createSigner:function(e){return new y(e)},signRequest:function(e,t){i.object(e,"request"),i.object(t,"options"),i.optionalString(t.algorithm,"options.algorithm"),i.string(t.keyId,"options.keyId"),i.optionalArrayOfString(t.headers,"options.headers"),i.optionalString(t.httpVersion,"options.httpVersion"),e.getHeader("Date")||e.setHeader("Date",s.rfc1123(new Date)),t.headers||(t.headers=["date"]),t.httpVersion||(t.httpVersion="1.1");var a,o=[];t.algorithm&&(t.algorithm=t.algorithm.toLowerCase(),o=d(t.algorithm));var u,h="";for(a=0;a<t.headers.length;a++){if("string"!=typeof t.headers[a])throw new TypeError("options.headers must be an array of Strings");var y=t.headers[a].toLowerCase();if("request-line"===y){if(t.strict)throw new v("request-line is not a valid header with strict parsing enabled.");h+=e.method+" "+e.path+" HTTP/"+t.httpVersion}else if("(request-target)"===y)h+="(request-target): "+e.method.toLowerCase()+" "+e.path;else{var b=e.getHeader(y);if(void 0===b||""===b)throw new g(y+" was not in the request");h+=y+": "+b}a+1<t.headers.length&&(h+="\n")}if(e.hasOwnProperty("_stringToSign")&&(e._stringToSign=h),"hmac"===o[0]){if("string"!=typeof t.key&&!Buffer.isBuffer(t.key))throw new TypeError("options.key must be a string or Buffer");var k=r.createHmac(o[1].toUpperCase(),t.key);k.update(h),u=k.digest("base64")}else{var w=t.key;if(("string"==typeof w||Buffer.isBuffer(w))&&(w=n.parsePrivateKey(t.key)),i.ok(n.PrivateKey.isPrivateKey(w,[1,2]),"options.key must be a sshpk.PrivateKey"),!l[w.type])throw new m(w.type.toUpperCase()+" type keys are not supported");if(void 0!==o[0]&&w.type!==o[0])throw new m("options.key must be a "+o[0].toUpperCase()+" key, was given a "+w.type.toUpperCase()+" key instead");var j=w.createSign(o[1]);j.update(h);var x=j.sign();if(!p[x.hashAlgorithm])throw new m(x.hashAlgorithm.toUpperCase()+" is not a supported hash algorithm");t.algorithm=w.type+"-"+x.hashAlgorithm,u=x.toString(),i.notStrictEqual(u,"","empty signature produced")}var E=t.authorizationHeaderName||"Authorization";return e.setHeader(E,c(f,t.keyId,t.algorithm,t.headers.join(" "),u)),!0}}},function(e,t,a){var i=a(0),r=(a(3),a(116)),o=a(117),n=a(120);function s(e,t){return i.equal(typeof t,"string"),Object.prototype.hasOwnProperty.call(e,t)}t.deepCopy=function e(t){var a,i;var r="__deepCopy";if(t&&t[r])throw new Error("attempted deep copy of cyclic object");if(t&&t.constructor==Object){for(i in a={},t[r]=!0,t)i!=r&&(a[i]=e(t[i]));return delete t[r],a}if(t&&t.constructor==Array){for(a=[],t[r]=!0,i=0;i<t.length;i++)a.push(e(t[i]));return delete t[r],a}return t},t.deepEqual=function e(t,a){if(typeof t!=typeof a)return!1;if(null===t||null===a||"object"!=typeof t)return t===a;if(t.constructor!=a.constructor)return!1;var i;for(i in t){if(!a.hasOwnProperty(i))return!1;if(!e(t[i],a[i]))return!1}for(i in a)if(!t.hasOwnProperty(i))return!1;return!0},t.isEmpty=function(e){var t;for(t in e)return!1;return!0},t.hasKey=s,t.forEachKey=function(e,t){for(var a in e)s(e,a)&&t(a,e[a])},t.pluck=function(e,t){return i.equal(typeof t,"string"),function e(t,a){if(null!==t&&"object"==typeof t){if(t.hasOwnProperty(a))return t[a];var i=a.indexOf(".");if(-1!=i){var r=a.substr(0,i);if(t.hasOwnProperty(r))return e(t[r],a.substr(i+1))}}}(e,t)},t.flattenObject=function e(t,a){if(0===a)return[t];i.ok(null!==t);i.equal(typeof t,"object");i.equal(typeof a,"number");i.ok(a>=0);var r=[];var o;for(o in t)e(t[o],a-1).forEach(function(e){r.push([o].concat(e))});return r},t.flattenIter=function(e,t,a){!function e(t,a,r,o){var n;var s;if(0===a)return(n=r.slice(0)).push(t),void o(n);i.ok(null!==t);i.equal(typeof t,"object");i.equal(typeof a,"number");i.ok(a>=0);for(s in t)(n=r.slice(0)).push(s),e(t[s],a-1,n,o)}(e,t,[],a)},t.validateJsonObject=P,t.validateJsonObjectJS=P,t.randElt=function(e){return i.ok(Array.isArray(e)&&e.length>0,"randElt argument must be a non-empty array"),e[Math.floor(Math.random()*e.length)]},t.extraProperties=function(e,t){i.ok("object"==typeof e&&null!==e,"obj argument must be a non-null object"),i.ok(Array.isArray(t),"allowed argument must be an array of strings");for(var a=0;a<t.length;a++)i.ok("string"==typeof t[a],"allowed argument must be an array of strings");return Object.keys(e).filter(function(e){return-1===t.indexOf(e)})},t.mergeObjects=I,t.startsWith=function(e,t){return e.substr(0,t.length)==t},t.endsWith=function(e,t){return e.substr(e.length-t.length,t.length)==t},t.parseInteger=function(e,t){i.string(e,"str"),i.optionalObject(t,"options");var a,r=!1,o=m;t&&(r=s(t,"base"),o=I(o,t),i.number(o.base,"options.base"),i.ok(o.base>=2,"options.base >= 2"),i.ok(o.base<=36,"options.base <= 36"),i.bool(o.allowSign,"options.allowSign"),i.bool(o.allowPrefix,"options.allowPrefix"),i.bool(o.allowTrailing,"options.allowTrailing"),i.bool(o.allowImprecise,"options.allowImprecise"),i.bool(o.trimWhitespace,"options.trimWhitespace"),i.bool(o.leadingZeroIsOctal,"options.leadingZeroIsOctal"),o.leadingZeroIsOctal&&i.ok(!r,'"base" and "leadingZeroIsOctal" are mutually exclusive'));var n,u=-1,c=o.base,h=1,d=0,f=0,k=e.length;if(o.trimWhitespace)for(;f<k&&O(e.charCodeAt(f));)++f;o.allowSign&&("-"===e[f]?(f+=1,h=-1):"+"===e[f]&&(f+=1));"0"===e[f]&&(o.allowPrefix&&(-1===(u=function(e){return e===j||e===g?2:e===x||e===v?8:e===E||e===y?10:e===S||e===b?16:-1}(e.charCodeAt(f+1)))||r&&u!==c||(c=u,f+=2)),-1===u&&o.leadingZeroIsOctal&&(c=8));for(n=f;f<k&&(-1!==(a=q(e.charCodeAt(f)))&&a<c);++f)d*=c,d+=a;if(n===f)return new Error("invalid number: "+JSON.stringify(e));if(o.trimWhitespace)for(;f<k&&O(e.charCodeAt(f));)++f;if(f<k&&!o.allowTrailing)return new Error("trailing characters after number: "+JSON.stringify(e.slice(f)));if(0===d)return 0;var w=d*h;if(!o.allowImprecise&&(d>p||w<l))return new Error("number is outside of the supported range: "+JSON.stringify(e.slice(n,f)));return w},t.iso8601=function(e){"number"==typeof e&&(e=new Date(e));return i.ok(e.constructor===Date),r.sprintf("%4d-%02d-%02dT%02d:%02d:%02d.%03dZ",e.getUTCFullYear(),e.getUTCMonth()+1,e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds())},t.rfc1123=function(e){return r.sprintf("%s, %02d %s %04d %02d:%02d:%02d GMT",c[e.getUTCDay()],e.getUTCDate(),u[e.getUTCMonth()],e.getUTCFullYear(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds())},t.parseDateTime=function(e){var t=+e;return isNaN(t)?new Date(e):new Date(t)},t.hrtimediff=z,t.hrtimeDiff=z,t.hrtimeAccum=T,t.hrtimeAdd=function(e,t){return F(e),T([e[0],e[1]],t)},t.hrtimeNanosec=function(e){return F(e),Math.floor(1e9*e[0]+e[1])},t.hrtimeMicrosec=function(e){return F(e),Math.floor(1e6*e[0]+e[1]/1e3)},t.hrtimeMillisec=function(e){return F(e),Math.floor(1e3*e[0]+e[1]/1e6)};var u=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],c=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];var p=Number.MAX_SAFE_INTEGER||9007199254740991,l=Number.MIN_SAFE_INTEGER||-9007199254740991,m={base:10,allowSign:!0,allowPrefix:!1,allowTrailing:!1,allowImprecise:!1,trimWhitespace:!1,leadingZeroIsOctal:!1},h=48,d=57,f=65,g=66,v=79,y=84,b=88,k=90,w=97,j=98,x=111,E=116,S=120,_=122,R=48,A=55,C=87;function q(e){return e>=h&&e<=d?e-R:e>=f&&e<=k?e-A:e>=w&&e<=_?e-C:-1}function O(e){return 32===e||e>=9&&e<=13||160===e||5760===e||6158===e||e>=8192&&e<=8202||8232===e||8233===e||8239===e||8287===e||12288===e||65279===e}function P(e,t){var a=n.validate(t,e);if(0===a.errors.length)return null;var i,r,s=a.errors[0],u=s.property,c=s.message.toLowerCase();-1!=(i=c.indexOf("the property "))&&-1!=(r=c.indexOf(" is not defined in the schema and the schema does not allow additional properties"))&&(i+="the property ".length,u=""===u?c.substr(i,r-i):u+"."+c.substr(i,r-i),c="unsupported property");var p=new o.VError('property "%s": %s',u,c);return p.jsv_details=s,p}function F(e){i.ok(e[0]>=0&&e[1]>=0,"negative numbers not allowed in hrtimes"),i.ok(e[1]<1e9,"nanoseconds column overflow")}function z(e,t){F(e),F(t),i.ok(e[0]>t[0]||e[0]==t[0]&&e[1]>=t[1],"negative differences not allowed");var a=[e[0]-t[0],0];return e[1]>=t[1]?a[1]=e[1]-t[1]:(a[0]--,a[1]=1e9-(t[1]-e[1])),a}function T(e,t){return F(e),F(t),e[1]+=t[1],e[1]>=1e9&&(e[0]++,e[1]-=1e9),e[0]+=t[0],e}function I(e,t,a){var i,r;if(i={},a)for(r in a)i[r]=a[r];if(e)for(r in e)i[r]=e[r];if(t)for(r in t)i[r]=t[r];return i}},function(e,t,a){var i=a(21),r=a(3);function o(e){var t,a,o,n,c,p,l,m,h,d=["([^%]*)","%","(['\\-+ #0]*?)","([1-9]\\d*)?","(\\.([1-9]\\d*))?","[lhjztL]*?","([diouxXfFeEgGaAcCsSp%jr])"].join(""),f=new RegExp(d),g=Array.prototype.slice.call(arguments,1),v="",y=1;for(i.equal("string",typeof e);null!==(h=f.exec(e));)if(v+=h[1],e=e.substring(h[0].length),t=h[2]||"",a=h[3]||0,o=h[4]||"",c=!1,l=!1,p=" ","%"!=(n=h[6])){if(0===g.length)throw new Error("too few args to sprintf");if(m=g.shift(),y++,t.match(/[\' #]/))throw new Error("unsupported flags: "+t);if(o.length>0)throw new Error("non-zero precision not supported");switch(t.match(/-/)&&(c=!0),t.match(/0/)&&(p="0"),t.match(/\+/)&&(l=!0),n){case"s":if(null==m)throw new Error("argument "+y+": attempted to print undefined or null as a string");v+=s(p,a,c,m.toString());break;case"d":m=Math.floor(m);case"f":v+=(l=l&&m>0?"+":"")+s(p,a,c,m.toString());break;case"x":v+=s(p,a,c,m.toString(16));break;case"j":0===a&&(a=10),v+=r.inspect(m,!1,a);break;case"r":v+=u(m);break;default:throw new Error("unsupported conversion: "+n)}}else v+="%";return v+=e}function n(e){var t=Array.prototype.slice.call(arguments,1);return e.write(o.apply(this,t))}function s(e,t,a,i){for(var r=i;r.length<t;)a?r+=e:r=e+r;return r}function u(e){var t;if(!(e instanceof Error))throw new Error(o("invalid type for %%r: %j",e));if(t="EXCEPTION: "+e.constructor.name+": "+e.stack,e.cause&&"function"==typeof e.cause){var a=e.cause();a&&(t+="\nCaused by: "+u(a))}return t}t.sprintf=o,t.printf=function(){var e=Array.prototype.slice.call(arguments);e.unshift(process.stdout),n.apply(null,e)},t.fprintf=n},function(e,t,a){var i=a(0),r=a(3),o=a(118),n=a(119).isError,s=o.sprintf;function u(e){var t,a,r,o;if(i.object(e,"args"),i.bool(e.strict,"args.strict"),i.array(e.argv,"args.argv"),0===(t=e.argv).length)a={},r=[];else if(n(t[0]))a={cause:t[0]},r=t.slice(1);else if("object"==typeof t[0]){for(o in a={},t[0])a[o]=t[0][o];r=t.slice(1)}else i.string(t[0],"first argument to VError, SError, or WError constructor must be a string, object, or Error"),a={},r=t;return i.object(a),a.strict||e.strict||(r=r.map(function(e){return null===e?"null":void 0===e?"undefined":e})),{options:a,shortmessage:0===r.length?"":s.apply(null,r)}}function c(){var e,t,a,r,o,s,p;if(e=Array.prototype.slice.call(arguments,0),!(this instanceof c))return t=Object.create(c.prototype),c.apply(t,arguments),t;if((a=u({argv:e,strict:!1})).options.name&&(i.string(a.options.name,'error\'s "name" must be a string'),this.name=a.options.name),this.jse_shortmsg=a.shortmessage,s=a.shortmessage,(r=a.options.cause)&&(i.ok(n(r),"cause is not an Error"),this.jse_cause=r,a.options.skipCauseMessage||(s+=": "+r.message)),this.jse_info={},a.options.info)for(p in a.options.info)this.jse_info[p]=a.options.info[p];return this.message=s,Error.call(this,s),Error.captureStackTrace&&(o=a.options.constructorOpt||this.constructor,Error.captureStackTrace(this,o)),this}function p(){var e,t,a,i;return e=Array.prototype.slice.call(arguments,0),this instanceof p?(i=(a=u({argv:e,strict:!0})).options,c.call(this,i,"%s",a.shortmessage),this):(t=Object.create(p.prototype),p.apply(t,arguments),t)}function l(e){i.array(e,"list of errors"),i.ok(e.length>0,"must be at least one error"),this.ase_errors=e,c.call(this,{cause:e[0]},"first of %d error%s",e.length,1==e.length?"":"s")}function m(){var e,t,a,i;return e=Array.prototype.slice.call(arguments,0),this instanceof m?((i=(a=u({argv:e,strict:!1})).options).skipCauseMessage=!0,c.call(this,i,"%s",a.shortmessage),this):(t=Object.create(m.prototype),m.apply(t,e),t)}e.exports=c,c.VError=c,c.SError=p,c.WError=m,c.MultiError=l,r.inherits(c,Error),c.prototype.name="VError",c.prototype.toString=function(){var e=this.hasOwnProperty("name")&&this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(e+=": "+this.message),e},c.prototype.cause=function(){var e=c.cause(this);return null===e?void 0:e},c.cause=function(e){return i.ok(n(e),"err must be an Error"),n(e.jse_cause)?e.jse_cause:null},c.info=function(e){var t,a,r;if(i.ok(n(e),"err must be an Error"),t=null!==(a=c.cause(e))?c.info(a):{},"object"==typeof e.jse_info&&null!==e.jse_info)for(r in e.jse_info)t[r]=e.jse_info[r];return t},c.findCauseByName=function(e,t){var a;for(i.ok(n(e),"err must be an Error"),i.string(t,"name"),i.ok(t.length>0,"name cannot be empty"),a=e;null!==a;a=c.cause(a))if(i.ok(n(a)),a.name==t)return a;return null},c.hasCauseWithName=function(e,t){return null!==c.findCauseByName(e,t)},c.fullStack=function(e){i.ok(n(e),"err must be an Error");var t=c.cause(e);return t?e.stack+"\ncaused by: "+c.fullStack(t):e.stack},c.errorFromList=function(e){return i.arrayOfObject(e,"errors"),0===e.length?null:(e.forEach(function(e){i.ok(n(e))}),1==e.length?e[0]:new l(e))},c.errorForEach=function(e,t){i.ok(n(e),"err must be an Error"),i.func(t,"func"),e instanceof l?e.errors().forEach(function(e){t(e)}):t(e)},r.inherits(p,c),r.inherits(l,c),l.prototype.name="MultiError",l.prototype.errors=function(){return this.ase_errors.slice(0)},r.inherits(m,c),m.prototype.name="WError",m.prototype.toString=function(){var e=this.hasOwnProperty("name")&&this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(e+=": "+this.message),this.jse_cause&&this.jse_cause.message&&(e+="; caused by "+this.jse_cause.toString()),e},m.prototype.cause=function(e){return n(e)&&(this.jse_cause=e),this.jse_cause}},function(e,t,a){var i=a(21),r=a(3);function o(e){var t,a,o,s,p,l,m,h,d,f,g,v=["([^%]*)","%","(['\\-+ #0]*?)","([1-9]\\d*)?","(\\.([1-9]\\d*))?","[lhjztL]*?","([diouxXfFeEgGaAcCsSp%jr])"].join(""),y=new RegExp(v),b=Array.prototype.slice.call(arguments,1),k=e,w="",j=1,x=0;for(i.equal("string",typeof k,"first argument must be a format string");null!==(d=y.exec(k));)if(w+=d[1],k=k.substring(d[0].length),g=d[0].substring(d[1].length),f=x+d[1].length+1,x+=d[0].length,t=d[2]||"",a=d[3]||0,o=d[4]||"",p=!1,m=!1,l=" ","%"!=(s=d[6])){if(0===b.length)throw n(e,f,g,"has no matching argument (too few arguments passed)");if(h=b.shift(),j++,t.match(/[\' #]/))throw n(e,f,g,"uses unsupported flags");if(o.length>0)throw n(e,f,g,"uses non-zero precision (not supported)");switch(t.match(/-/)&&(p=!0),t.match(/0/)&&(l="0"),t.match(/\+/)&&(m=!0),s){case"s":if(null==h)throw n(e,f,g,"attempted to print undefined or null as a string (argument "+j+" to sprintf)");w+=u(l,a,p,h.toString());break;case"d":h=Math.floor(h);case"f":w+=(m=m&&h>0?"+":"")+u(l,a,p,h.toString());break;case"x":w+=u(l,a,p,h.toString(16));break;case"j":0===a&&(a=10),w+=r.inspect(h,!1,a);break;case"r":w+=c(h);break;default:throw n(e,f,g,"is not supported")}}else w+="%";return w+=k}function n(e,t,a,r){return i.equal(typeof e,"string"),i.equal(typeof a,"string"),i.equal(typeof t,"number"),i.equal(typeof r,"string"),new Error('format string "'+e+'": conversion specifier "'+a+'" at character '+t+" "+r)}function s(e){var t=Array.prototype.slice.call(arguments,1);return e.write(o.apply(this,t))}function u(e,t,a,i){for(var r=i;r.length<t;)a?r+=e:r=e+r;return r}function c(e){var t;if(!(e instanceof Error))throw new Error(o("invalid type for %%r: %j",e));if(t="EXCEPTION: "+e.constructor.name+": "+e.stack,e.cause&&"function"==typeof e.cause){var a=e.cause();a&&(t+="\nCaused by: "+c(a))}return t}t.sprintf=o,t.printf=function(){var e=Array.prototype.slice.call(arguments);e.unshift(process.stdout),s.apply(null,e)},t.fprintf=s},function(e,t){function a(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===a(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===a(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===a(e)},t.isError=function(e){return"[object Error]"===a(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=Buffer.isBuffer},function(e,t,a){var i;void 0===(i=function(){return function(){var e=a;e.Integer={type:"integer"};var t={String:String,Boolean:Boolean,Number:Number,Object:Object,Array:Array,Date:Date};function a(e,t){return a(e,t,{changing:!1})}e.validate=a,e.checkPropertyChange=function(e,t,i){return a(e,t,{changing:i||"property"})};var a=e._validate=function(e,a,i){i||(i={});var r=i.changing;function o(e){return e.type||t[e.name]==e&&e.name.toLowerCase()}var n=[];function s(e,t,a,u){var c;function p(e){n.push({property:a,message:e})}if(a+=a?"number"==typeof u?"["+u+"]":void 0===u?"":"."+u:u,("object"!=typeof t||t instanceof Array)&&(a||"function"!=typeof t)&&(!t||!o(t)))return"function"==typeof t?e instanceof t||p("is not an instance of the class/constructor "+t.name):t&&p("Invalid schema/property definition "+t),null;function l(e,t){if(e){if(!("string"!=typeof e||"any"==e||("null"==e?null===t:typeof t==e)||t instanceof Array&&"array"==e||t instanceof Date&&"date"==e||"integer"==e&&t%1==0))return[{property:a,message:typeof t+" value found, but a "+e+" is required"}];if(e instanceof Array){for(var i=[],r=0;r<e.length&&(i=l(e[r],t)).length;r++);if(i.length)return i}else if("object"==typeof e){var o=n;n=[],s(t,e,a);var u=n;return n=o,u}}return[]}if(r&&t.readonly&&p("is a readonly field, it can not be changed"),t.extends&&s(e,t.extends,a,u),void 0===e)t.required&&p("is missing and it is required");else if(n=n.concat(l(o(t),e)),t.disallow&&!l(t.disallow,e).length&&p(" disallowed value was matched"),null!==e){if(e instanceof Array){if(t.items){var m=t.items instanceof Array,h=t.items;for(u=0,c=e.length;u<c;u+=1)m&&(h=t.items[u]),i.coerce&&(e[u]=i.coerce(e[u],h)),n.concat(s(e[u],h,a,u))}t.minItems&&e.length<t.minItems&&p("There must be a minimum of "+t.minItems+" in the array"),t.maxItems&&e.length>t.maxItems&&p("There must be a maximum of "+t.maxItems+" in the array")}else(t.properties||t.additionalProperties)&&n.concat(function(e,t,a,o){if("object"==typeof t)for(var u in("object"!=typeof e||e instanceof Array)&&n.push({property:a,message:"an object is required"}),t)if(t.hasOwnProperty(u)){var c=e[u];if(void 0===c&&i.existingOnly)continue;var p=t[u];void 0===c&&p.default&&(c=e[u]=p.default),i.coerce&&u in e&&(c=e[u]=i.coerce(c,p)),s(c,p,a,u)}for(u in e){if(e.hasOwnProperty(u)&&("_"!=u.charAt(0)||"_"!=u.charAt(1))&&t&&!t[u]&&!1===o){if(i.filter){delete e[u];continue}n.push({property:a,message:typeof c+"The property "+u+" is not defined in the schema and the schema does not allow additional properties"})}var l=t&&t[u]&&t[u].requires;!l||l in e||n.push({property:a,message:"the presence of the property "+u+" requires that "+l+" also be present"}),c=e[u],!o||t&&"object"==typeof t&&u in t||(i.coerce&&(c=e[u]=i.coerce(c,o)),s(c,o,a,u)),!r&&c&&c.$schema&&(n=n.concat(s(c,c.$schema,a,u)))}return n}(e,t.properties,a,t.additionalProperties));if(t.pattern&&"string"==typeof e&&!e.match(t.pattern)&&p("does not match the regex pattern "+t.pattern),t.maxLength&&"string"==typeof e&&e.length>t.maxLength&&p("may only be "+t.maxLength+" characters long"),t.minLength&&"string"==typeof e&&e.length<t.minLength&&p("must be at least "+t.minLength+" characters long"),void 0!==typeof t.minimum&&typeof e==typeof t.minimum&&t.minimum>e&&p("must have a minimum value of "+t.minimum),void 0!==typeof t.maximum&&typeof e==typeof t.maximum&&t.maximum<e&&p("must have a maximum value of "+t.maximum),t.enum){var d,f=t.enum;c=f.length;for(var g=0;g<c;g++)if(f[g]===e){d=1;break}d||p("does not have a value in the enumeration "+f.join(", "))}"number"==typeof t.maxDecimal&&e.toString().match(new RegExp("\\.[0-9]{"+(t.maxDecimal+1)+",}"))&&p("may only have "+t.maxDecimal+" digits of decimal places")}return null}return a&&s(e,a,"",r||""),!r&&e&&e.$schema&&s(e,e.$schema,"",""),{valid:!n.length,errors:n}};return e.mustBeValid=function(e){if(!e.valid)throw new TypeError(e.errors.map(function(e){return"for property "+e.property+": "+e.message}).join(", \n"))},e}()}.apply(t,[]))||(e.exports=i)},function(e,t,a){var i=a(0),r=a(1),o=a(38),n=a(32),s=(n.HASH_ALGOS,n.PK_ALGOS,n.InvalidAlgorithmError,n.HttpSignatureError,n.validateAlgorithm);e.exports={verifySignature:function(e,t){i.object(e,"parsedSignature"),("string"==typeof t||Buffer.isBuffer(t))&&(t=o.parseKey(t)),i.ok(o.Key.isKey(t,[1,1]),"pubkey must be a sshpk.Key");var a=s(e.algorithm);if("hmac"===a[0]||a[0]!==t.type)return!1;var r=t.createVerify(a[1]);return r.update(e.signingString),r.verify(e.params.signature,"base64")},verifyHMAC:function(e,t){i.object(e,"parsedHMAC"),i.string(t,"secret");var a=s(e.algorithm);if("hmac"!==a[0])return!1;var o=a[1].toUpperCase(),n=r.createHmac(o,t);n.update(e.signingString);var u=r.createHmac(o,t);u.update(n.digest()),u=u.digest();var c=r.createHmac(o,t);return c.update(new Buffer(e.params.signature,"base64")),c=c.digest(),"string"==typeof u?u===c:Buffer.isBuffer(u)&&!u.equals?u.toString("binary")===c.toString("binary"):u.equals(c)}}},function(e,t,a){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=a(123)},function(e){e.exports={"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/cbor":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["ecma","es"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0},"application/fhir+json":{source:"iana",compressible:!0},"application/fhir+xml":{source:"iana",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mmt-usd+xml":{source:"iana",compressible:!0},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",compressible:!0},"application/msc-mixer+xml":{source:"iana",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana"},"application/n-triples":{source:"iana"},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana"},"application/news-groupinfo":{source:"iana"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana"},"application/nss":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p2p-overlay+xml":{source:"iana",compressible:!0},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana"},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",compressible:!0},"application/pidf-diff+xml":{source:"iana",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0},"application/route-s-tsid+xml":{source:"iana",compressible:!0},"application/route-usd+xml":{source:"iana",compressible:!0},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana"},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana"},"application/ttml+xml":{source:"iana",compressible:!0},"application/tve-trigger":{source:"iana"},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0},"application/urc-targetdesc+xml":{source:"iana",compressible:!0},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["keynote"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana"},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana"},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",compressible:!0},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"apache",extensions:["der","crt","pem"]},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0},"application/xcap-caps+xml":{source:"iana",compressible:!0},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana"},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana"},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tone":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana"},"image/avcs":{source:"iana"},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/stl":{source:"iana"},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana"},"model/vnd.parasolid.transmit.binary":{source:"iana"},"model/vnd.parasolid.transmit.text":{source:"iana"},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.usdz+zip":{source:"iana",compressible:!1},"model/vnd.valve.source.compiled-map":{source:"iana"},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana"},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana"},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana",compressible:!1},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fwdred":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shex":{extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana"},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vp8":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}},function(e,t,a){e.exports=c,c.SSL=p;var i=a(3),r=a(17).Agent,o=a(36),n=a(63),s=a(19).Agent;function u(e,t){return"string"==typeof e?e+":"+t:e.host+":"+e.port+":"+(e.localAddress?e.localAddress+":":":")}function c(e){var t=this;t.options=e||{},t.requests={},t.sockets={},t.freeSockets={},t.maxSockets=t.options.maxSockets||r.defaultMaxSockets,t.minSockets=t.options.minSockets||c.defaultMinSockets,t.on("free",function(e,a,i){var r=u(a,i);if(t.requests[r]&&t.requests[r].length)t.requests[r].shift().onSocket(e);else if(t.sockets[r].length<t.minSockets){t.freeSockets[r]||(t.freeSockets[r]=[]),t.freeSockets[r].push(e);var o=function(){e.destroy()};e._onIdleError=o,e.on("error",o)}else e.destroy()})}function p(e){c.call(this,e)}i.inherits(c,r),c.defaultMinSockets=5,c.prototype.createConnection=o.createConnection,c.prototype.addRequestNoreuse=r.prototype.addRequest,c.prototype.addRequest=function(e,t,a){var i=u(t,a);if("string"!=typeof t){var r=t;a=r.port,t=r.host}if(this.freeSockets[i]&&this.freeSockets[i].length>0&&!e.useChunkedEncodingByDefault){var o=this.freeSockets[i].pop();o.removeListener("error",o._onIdleError),delete o._onIdleError,e._reusedSocket=!0,e.onSocket(o)}else this.addRequestNoreuse(e,t,a)},c.prototype.removeSocket=function(e,t,a,i){var r;this.sockets[t]?-1!==(r=this.sockets[t].indexOf(e))&&this.sockets[t].splice(r,1):this.sockets[t]&&0===this.sockets[t].length&&(delete this.sockets[t],delete this.requests[t]);this.freeSockets[t]&&(-1!==(r=this.freeSockets[t].indexOf(e))&&(this.freeSockets[t].splice(r,1),0===this.freeSockets[t].length&&delete this.freeSockets[t]));this.requests[t]&&this.requests[t].length&&this.createSocket(t,a,i).emit("free")},i.inherits(p,c),p.prototype.createConnection=function(e,t,a){a="object"==typeof e?e:"object"==typeof t?t:"object"==typeof a?a:{};"number"==typeof e&&(a.port=e);"string"==typeof t&&(a.host=t);return n.connect(a)},p.prototype.addRequestNoreuse=s.prototype.addRequest},function(e,t,a){var i=a(64),r=a(3),o=a(16),n=a(17),s=a(19),u=a(8).parse,c=a(13),p=a(62),l=a(128),m=a(132);function h(e){if(!(this instanceof h))return new h;for(var t in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],i.call(this),e=e||{})this[t]=e[t]}e.exports=h,r.inherits(h,i),h.LINE_BREAK="\r\n",h.DEFAULT_CONTENT_TYPE="application/octet-stream",h.prototype.append=function(e,t,a){"string"==typeof(a=a||{})&&(a={filename:a});var o=i.prototype.append.bind(this);if("number"==typeof t&&(t=""+t),r.isArray(t))this._error(new Error("Arrays are not supported."));else{var n=this._multiPartHeader(e,t,a),s=this._multiPartFooter();o(n),o(t),o(s),this._trackLength(n,t,a)}},h.prototype._trackLength=function(e,t,a){var i=0;null!=a.knownLength?i+=+a.knownLength:Buffer.isBuffer(t)?i=t.length:"string"==typeof t&&(i=Buffer.byteLength(t)),this._valueLength+=i,this._overheadLength+=Buffer.byteLength(e)+h.LINE_BREAK.length,t&&(t.path||t.readable&&t.hasOwnProperty("httpVersion"))&&(a.knownLength||this._valuesToMeasure.push(t))},h.prototype._lengthRetriever=function(e,t){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?t(null,e.end+1-(e.start?e.start:0)):c.stat(e.path,function(a,i){var r;a?t(a):(r=i.size-(e.start?e.start:0),t(null,r))}):e.hasOwnProperty("httpVersion")?t(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",function(a){e.pause(),t(null,+a.headers["content-length"])}),e.resume()):t("Unknown stream")},h.prototype._multiPartHeader=function(e,t,a){if("string"==typeof a.header)return a.header;var i,r=this._getContentDisposition(t,a),o=this._getContentType(t,a),n="",s={"Content-Disposition":["form-data",'name="'+e+'"'].concat(r||[]),"Content-Type":[].concat(o||[])};for(var u in"object"==typeof a.header&&m(s,a.header),s)s.hasOwnProperty(u)&&null!=(i=s[u])&&(Array.isArray(i)||(i=[i]),i.length&&(n+=u+": "+i.join("; ")+h.LINE_BREAK));return"--"+this.getBoundary()+h.LINE_BREAK+n+h.LINE_BREAK},h.prototype._getContentDisposition=function(e,t){var a,i;return"string"==typeof t.filepath?a=o.normalize(t.filepath).replace(/\\/g,"/"):t.filename||e.name||e.path?a=o.basename(t.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(a=o.basename(e.client._httpMessage.path)),a&&(i='filename="'+a+'"'),i},h.prototype._getContentType=function(e,t){var a=t.contentType;return!a&&e.name&&(a=p.lookup(e.name)),!a&&e.path&&(a=p.lookup(e.path)),!a&&e.readable&&e.hasOwnProperty("httpVersion")&&(a=e.headers["content-type"]),a||!t.filepath&&!t.filename||(a=p.lookup(t.filepath||t.filename)),a||"object"!=typeof e||(a=h.DEFAULT_CONTENT_TYPE),a},h.prototype._multiPartFooter=function(){return function(e){var t=h.LINE_BREAK;0===this._streams.length&&(t+=this._lastBoundary()),e(t)}.bind(this)},h.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+h.LINE_BREAK},h.prototype.getHeaders=function(e){var t,a={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(t in e)e.hasOwnProperty(t)&&(a[t.toLowerCase()]=e[t]);return a},h.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},h.prototype._generateBoundary=function(){for(var e="--------------------------",t=0;t<24;t++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},h.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},h.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},h.prototype.getLength=function(e){var t=this._overheadLength+this._valueLength;this._streams.length&&(t+=this._lastBoundary().length),this._valuesToMeasure.length?l.parallel(this._valuesToMeasure,this._lengthRetriever,function(a,i){a?e(a):(i.forEach(function(e){t+=e}),e(null,t))}):process.nextTick(e.bind(this,null,t))},h.prototype.submit=function(e,t){var a,i,r={method:"post"};return"string"==typeof e?(e=u(e),i=m({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},r)):(i=m(e,r)).port||(i.port="https:"==i.protocol?443:80),i.headers=this.getHeaders(e.headers),a="https:"==i.protocol?s.request(i):n.request(i),this.getLength(function(e,i){e?this._error(e):(a.setHeader("Content-Length",i),this.pipe(a),t&&(a.on("error",t),a.on("response",t.bind(this,null))))}.bind(this)),a},h.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},h.prototype.toString=function(){return"[object FormData]"}},function(e,t,a){var i=a(20).Stream,r=a(3);function o(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}e.exports=o,r.inherits(o,i),o.create=function(e,t){var a=new this;for(var i in t=t||{})a[i]=t[i];a.source=e;var r=e.emit;return e.emit=function(){return a._handleEmit(arguments),r.apply(e,arguments)},e.on("error",function(){}),a.pauseStream&&e.pause(),a},Object.defineProperty(o.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),o.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},o.prototype.resume=function(){this._released||this.release(),this.source.resume()},o.prototype.pause=function(){this.source.pause()},o.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},o.prototype.pipe=function(){var e=i.prototype.pipe.apply(this,arguments);return this.resume(),e},o.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},o.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}},function(e,t){e.exports=function(e){var t="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;t?t(e):setTimeout(e,0)}},function(e,t,a){e.exports={parallel:a(129),serial:a(131),serialOrdered:a(70)}},function(e,t,a){var i=a(65),r=a(68),o=a(69);e.exports=function(e,t,a){var n=r(e);for(;n.index<(n.keyedList||e).length;)i(e,t,n,function(e,t){e?a(e,t):0!==Object.keys(n.jobs).length||a(null,n.results)}),n.index++;return o.bind(n,a)}},function(e,t){e.exports=function(e){var t="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;t?t(e):setTimeout(e,0)}},function(e,t,a){var i=a(70);e.exports=function(e,t,a){return i(e,t,null,a)}},function(e,t){e.exports=function(e,t){return Object.keys(t).forEach(function(a){e[a]=e[a]||t[a]}),e}},function(e,t){e.exports=r,r.strict=o,r.loose=n;var a=Object.prototype.toString,i={"[object Int8Array]":!0,"[object Int16Array]":!0,"[object Int32Array]":!0,"[object Uint8Array]":!0,"[object Uint8ClampedArray]":!0,"[object Uint16Array]":!0,"[object Uint32Array]":!0,"[object Float32Array]":!0,"[object Float64Array]":!0};function r(e){return o(e)||n(e)}function o(e){return e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Uint16Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array}function n(e){return i[a.call(e)]}},function(e,t,a){"use strict";function i(e){return e.replace(/^\.*/,".").toLowerCase()}function r(e){var t=(e=e.trim().toLowerCase()).split(":",2);return{hostname:i(t[0]),port:t[1],hasPort:e.indexOf(":")>-1}}e.exports=function(e){var t=process.env.NO_PROXY||process.env.no_proxy||"";return"*"===t?null:""!==t&&function(e,t){var a=e.port||("https:"===e.protocol?"443":"80"),o=i(e.hostname);return t.split(",").map(r).some(function(e){var t=o.indexOf(e.hostname),i=t>-1&&t===o.length-e.hostname.length;return e.hasPort?a===e.port&&i:i})}(e,t)?null:"http:"===e.protocol?process.env.HTTP_PROXY||process.env.http_proxy||null:"https:"===e.protocol&&(process.env.HTTPS_PROXY||process.env.https_proxy||process.env.HTTP_PROXY||process.env.http_proxy)||null}},function(e,t,a){"use strict";var i=a(72),r=a(24);function o(e){this.request=e,this.lib=null,this.useQuerystring=null,this.parseOptions=null,this.stringifyOptions=null}o.prototype.init=function(e){this.lib||(this.useQuerystring=e.useQuerystring,this.lib=this.useQuerystring?r:i,this.parseOptions=e.qsParseOptions||{},this.stringifyOptions=e.qsStringifyOptions||{})},o.prototype.stringify=function(e){return this.useQuerystring?this.rfc3986(this.lib.stringify(e,this.stringifyOptions.sep||null,this.stringifyOptions.eq||null,this.stringifyOptions)):this.lib.stringify(e,this.stringifyOptions)},o.prototype.parse=function(e){return this.useQuerystring?this.lib.parse(e,this.parseOptions.sep||null,this.parseOptions.eq||null,this.parseOptions):this.lib.parse(e,this.parseOptions)},o.prototype.rfc3986=function(e){return e.replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})},o.prototype.unescape=r.unescape,t.Querystring=o},function(e,t,a){"use strict";var i=a(73),r=a(74),o={brackets:function(e){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},n=Date.prototype.toISOString,s={delimiter:"&",encode:!0,encoder:i.encode,encodeValuesOnly:!1,serializeDate:function(e){return n.call(e)},skipNulls:!1,strictNullHandling:!1},u=function e(t,a,r,o,n,u,c,p,l,m,h,d){var f=t;if("function"==typeof c)f=c(a,f);else if(f instanceof Date)f=m(f);else if(null===f){if(o)return u&&!d?u(a,s.encoder):a;f=""}if("string"==typeof f||"number"==typeof f||"boolean"==typeof f||i.isBuffer(f))return u?[h(d?a:u(a,s.encoder))+"="+h(u(f,s.encoder))]:[h(a)+"="+h(String(f))];var g,v=[];if(void 0===f)return v;if(Array.isArray(c))g=c;else{var y=Object.keys(f);g=p?y.sort(p):y}for(var b=0;b<g.length;++b){var k=g[b];n&&null===f[k]||(v=Array.isArray(f)?v.concat(e(f[k],r(a,k),r,o,n,u,c,p,l,m,h,d)):v.concat(e(f[k],a+(l?"."+k:"["+k+"]"),r,o,n,u,c,p,l,m,h,d)))}return v};e.exports=function(e,t){var a=e,n=t?i.assign({},t):{};if(null!==n.encoder&&void 0!==n.encoder&&"function"!=typeof n.encoder)throw new TypeError("Encoder has to be a function.");var c=void 0===n.delimiter?s.delimiter:n.delimiter,p="boolean"==typeof n.strictNullHandling?n.strictNullHandling:s.strictNullHandling,l="boolean"==typeof n.skipNulls?n.skipNulls:s.skipNulls,m="boolean"==typeof n.encode?n.encode:s.encode,h="function"==typeof n.encoder?n.encoder:s.encoder,d="function"==typeof n.sort?n.sort:null,f=void 0!==n.allowDots&&n.allowDots,g="function"==typeof n.serializeDate?n.serializeDate:s.serializeDate,v="boolean"==typeof n.encodeValuesOnly?n.encodeValuesOnly:s.encodeValuesOnly;if(void 0===n.format)n.format=r.default;else if(!Object.prototype.hasOwnProperty.call(r.formatters,n.format))throw new TypeError("Unknown format option provided.");var y,b,k=r.formatters[n.format];"function"==typeof n.filter?a=(b=n.filter)("",a):Array.isArray(n.filter)&&(y=b=n.filter);var w,j=[];if("object"!=typeof a||null===a)return"";w=n.arrayFormat in o?n.arrayFormat:"indices"in n?n.indices?"indices":"repeat":"indices";var x=o[w];y||(y=Object.keys(a)),d&&y.sort(d);for(var E=0;E<y.length;++E){var S=y[E];l&&null===a[S]||(j=j.concat(u(a[S],S,x,p,l,m?h:null,b,d,f,g,k,v)))}var _=j.join(c),R=!0===n.addQueryPrefix?"?":"";return _.length>0?R+_:""}},function(e,t,a){"use strict";var i=a(73),r=Object.prototype.hasOwnProperty,o={allowDots:!1,allowPrototypes:!1,arrayLimit:20,decoder:i.decode,delimiter:"&",depth:5,parameterLimit:1e3,plainObjects:!1,strictNullHandling:!1},n=function(e,t,a){if(e){var i=a.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,o=/(\[[^[\]]*])/g,n=/(\[[^[\]]*])/.exec(i),s=n?i.slice(0,n.index):i,u=[];if(s){if(!a.plainObjects&&r.call(Object.prototype,s)&&!a.allowPrototypes)return;u.push(s)}for(var c=0;null!==(n=o.exec(i))&&c<a.depth;){if(c+=1,!a.plainObjects&&r.call(Object.prototype,n[1].slice(1,-1))&&!a.allowPrototypes)return;u.push(n[1])}return n&&u.push("["+i.slice(n.index)+"]"),function(e,t,a){for(var i=t,r=e.length-1;r>=0;--r){var o,n=e[r];if("[]"===n)o=(o=[]).concat(i);else{o=a.plainObjects?Object.create(null):{};var s="["===n.charAt(0)&&"]"===n.charAt(n.length-1)?n.slice(1,-1):n,u=parseInt(s,10);!isNaN(u)&&n!==s&&String(u)===s&&u>=0&&a.parseArrays&&u<=a.arrayLimit?(o=[])[u]=i:o[s]=i}i=o}return i}(u,t,a)}};e.exports=function(e,t){var a=t?i.assign({},t):{};if(null!==a.decoder&&void 0!==a.decoder&&"function"!=typeof a.decoder)throw new TypeError("Decoder has to be a function.");if(a.ignoreQueryPrefix=!0===a.ignoreQueryPrefix,a.delimiter="string"==typeof a.delimiter||i.isRegExp(a.delimiter)?a.delimiter:o.delimiter,a.depth="number"==typeof a.depth?a.depth:o.depth,a.arrayLimit="number"==typeof a.arrayLimit?a.arrayLimit:o.arrayLimit,a.parseArrays=!1!==a.parseArrays,a.decoder="function"==typeof a.decoder?a.decoder:o.decoder,a.allowDots="boolean"==typeof a.allowDots?a.allowDots:o.allowDots,a.plainObjects="boolean"==typeof a.plainObjects?a.plainObjects:o.plainObjects,a.allowPrototypes="boolean"==typeof a.allowPrototypes?a.allowPrototypes:o.allowPrototypes,a.parameterLimit="number"==typeof a.parameterLimit?a.parameterLimit:o.parameterLimit,a.strictNullHandling="boolean"==typeof a.strictNullHandling?a.strictNullHandling:o.strictNullHandling,""===e||null==e)return a.plainObjects?Object.create(null):{};for(var s="string"==typeof e?function(e,t){for(var a={},i=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,n=t.parameterLimit===1/0?void 0:t.parameterLimit,s=i.split(t.delimiter,n),u=0;u<s.length;++u){var c,p,l=s[u],m=l.indexOf("]="),h=-1===m?l.indexOf("="):m+1;-1===h?(c=t.decoder(l,o.decoder),p=t.strictNullHandling?null:""):(c=t.decoder(l.slice(0,h),o.decoder),p=t.decoder(l.slice(h+1),o.decoder)),r.call(a,c)?a[c]=[].concat(a[c]).concat(p):a[c]=p}return a}(e,a):e,u=a.plainObjects?Object.create(null):{},c=Object.keys(s),p=0;p<c.length;++p){var l=c[p],m=n(l,s[l],a);u=i.merge(u,m,a)}return i.compact(u)}},function(e,t,a){"use strict";var i=a(13),r=a(24),o=a(139),n=a(35);function s(e){this.request=e}s.prototype.reducer=function(e,t){if(void 0===e[t.name])return e[t.name]=t.value,e;var a=[e[t.name],t.value];return e[t.name]=a,e},s.prototype.prep=function(e){if(e.queryObj={},e.headersObj={},e.postData.jsonObj=!1,e.postData.paramsObj=!1,e.queryString&&e.queryString.length&&(e.queryObj=e.queryString.reduce(this.reducer,{})),e.headers&&e.headers.length&&(e.headersObj=e.headers.reduceRight(function(e,t){return e[t.name]=t.value,e},{})),e.cookies&&e.cookies.length){var t=e.cookies.map(function(e){return e.name+"="+e.value});t.length&&(e.headersObj.cookie=t.join("; "))}function a(t){return t.some(function(t){return 0===e.postData.mimeType.indexOf(t)})}if(a(["multipart/mixed","multipart/related","multipart/form-data","multipart/alternative"]))e.postData.mimeType="multipart/form-data";else if(a(["application/x-www-form-urlencoded"]))e.postData.params?(e.postData.paramsObj=e.postData.params.reduce(this.reducer,{}),e.postData.text=r.stringify(e.postData.paramsObj)):e.postData.text="";else if(a(["text/json","text/x-json","application/json","application/x-json"])&&(e.postData.mimeType="application/json",e.postData.text))try{e.postData.jsonObj=JSON.parse(e.postData.text)}catch(t){this.request.debug(t),e.postData.mimeType="text/plain"}return e},s.prototype.options=function(e){if(!e.har)return e;var t={};if(n(t,e.har),t.log&&t.log.entries&&(t=t.log.entries[0]),t.url=t.url||e.url||e.uri||e.baseUrl||"/",t.httpVersion=t.httpVersion||"HTTP/1.1",t.queryString=t.queryString||[],t.headers=t.headers||[],t.cookies=t.cookies||[],t.postData=t.postData||{},t.postData.mimeType=t.postData.mimeType||"application/octet-stream",t.bodySize=0,t.headersSize=0,t.postData.size=0,!o.request(t))return e;var a=this.prep(t);function r(e){return 0===a.postData.mimeType.indexOf(e)}return a.url&&(e.url=a.url),a.method&&(e.method=a.method),Object.keys(a.queryObj).length&&(e.qs=a.queryObj),Object.keys(a.headersObj).length&&(e.headers=a.headersObj),r("application/x-www-form-urlencoded")?e.form=a.postData.paramsObj:r("application/json")?a.postData.jsonObj&&(e.body=a.postData.jsonObj,e.json=!0):r("multipart/form-data")?(e.formData={},a.postData.params.forEach(function(t){var a={};t.fileName||t.fileName||t.contentType?(t.fileName&&!t.value?a.value=i.createReadStream(t.fileName):t.value&&(a.value=t.value),t.fileName&&(a.options={filename:t.fileName,contentType:t.contentType?t.contentType:null}),e.formData[t.name]=a):e.formData[t.name]=t.value})):a.postData.text&&(e.body=a.postData.text),e},t.Har=s},function(e,t,a){var i,r=a(140),o=a(174),n=a(175);function s(e,t){t=t||{};var s=(i=i||function(){var e=new r({allErrors:!0});return e.addMetaSchema(a(194)),e.addSchema(n),e}()).getSchema(e+".json");return new Promise(function(e,a){s(t)?e(t):a(new o(s.errors))})}t.afterRequest=function(e){return s("afterRequest",e)},t.beforeRequest=function(e){return s("beforeRequest",e)},t.browser=function(e){return s("browser",e)},t.cache=function(e){return s("cache",e)},t.content=function(e){return s("content",e)},t.cookie=function(e){return s("cookie",e)},t.creator=function(e){return s("creator",e)},t.entry=function(e){return s("entry",e)},t.har=function(e){return s("har",e)},t.header=function(e){return s("header",e)},t.log=function(e){return s("log",e)},t.page=function(e){return s("page",e)},t.pageTimings=function(e){return s("pageTimings",e)},t.postData=function(e){return s("postData",e)},t.query=function(e){return s("query",e)},t.request=function(e){return s("request",e)},t.response=function(e){return s("response",e)},t.timings=function(e){return s("timings",e)}},function(e,t,a){"use strict";var i=a(141),r=a(45),o=a(145),n=a(75),s=a(76),u=a(146),c=a(147),p=a(168),l=a(22);e.exports=v,v.prototype.validate=function(e,t){var a;if("string"==typeof e){if(!(a=this.getSchema(e)))throw new Error('no schema with key or ref "'+e+'"')}else{var i=this._addSchema(e);a=i.validate||this._compile(i)}var r=a(t);!0!==a.$async&&(this.errors=a.errors);return r},v.prototype.compile=function(e,t){var a=this._addSchema(e,void 0,t);return a.validate||this._compile(a)},v.prototype.addSchema=function(e,t,a,i){if(Array.isArray(e)){for(var o=0;o<e.length;o++)this.addSchema(e[o],void 0,a,i);return this}var n=this._getId(e);if(void 0!==n&&"string"!=typeof n)throw new Error("schema id must be string");return x(this,t=r.normalizeId(t||n)),this._schemas[t]=this._addSchema(e,a,i,!0),this},v.prototype.addMetaSchema=function(e,t,a){return this.addSchema(e,t,a,!0),this},v.prototype.validateSchema=function(e,t){var a=e.$schema;if(void 0!==a&&"string"!=typeof a)throw new Error("$schema must be a string");if(!(a=a||this._opts.defaultMeta||(i=this,r=i._opts.meta,i._opts.defaultMeta="object"==typeof r?i._getId(r)||r:i.getSchema(d)?d:void 0,i._opts.defaultMeta)))return this.logger.warn("meta-schema not available"),this.errors=null,!0;var i,r;var o=this.validate(a,e);if(!o&&t){var n="schema is invalid: "+this.errorsText();if("log"!=this._opts.validateSchema)throw new Error(n);this.logger.error(n)}return o},v.prototype.getSchema=function(e){var t=y(this,e);switch(typeof t){case"object":return t.validate||this._compile(t);case"string":return this.getSchema(t);case"undefined":return function(e,t){var a=r.schema.call(e,{schema:{}},t);if(a){var o=a.schema,s=a.root,u=a.baseId,c=i.call(e,o,s,void 0,u);return e._fragments[t]=new n({ref:t,fragment:!0,schema:o,root:s,baseId:u,validate:c}),c}}(this,e)}},v.prototype.removeSchema=function(e){if(e instanceof RegExp)return b(this,this._schemas,e),b(this,this._refs,e),this;switch(typeof e){case"undefined":return b(this,this._schemas),b(this,this._refs),this._cache.clear(),this;case"string":var t=y(this,e);return t&&this._cache.del(t.cacheKey),delete this._schemas[e],delete this._refs[e],this;case"object":var a=this._opts.serialize,i=a?a(e):e;this._cache.del(i);var o=this._getId(e);o&&(o=r.normalizeId(o),delete this._schemas[o],delete this._refs[o])}return this},v.prototype.addFormat=function(e,t){"string"==typeof t&&(t=new RegExp(t));return this._formats[e]=t,this},v.prototype.errorsText=function(e,t){if(!(e=e||this.errors))return"No errors";for(var a=void 0===(t=t||{}).separator?", ":t.separator,i=void 0===t.dataVar?"data":t.dataVar,r="",o=0;o<e.length;o++){var n=e[o];n&&(r+=i+n.dataPath+" "+n.message+a)}return r.slice(0,-a.length)},v.prototype._addSchema=function(e,t,a,i){if("object"!=typeof e&&"boolean"!=typeof e)throw new Error("schema should be object or boolean");var o=this._opts.serialize,s=o?o(e):e,u=this._cache.get(s);if(u)return u;i=i||!1!==this._opts.addUsedSchema;var c=r.normalizeId(this._getId(e));c&&i&&x(this,c);var p,l=!1!==this._opts.validateSchema&&!t;l&&!(p=c&&c==r.normalizeId(e.$schema))&&this.validateSchema(e,!0);var m=r.ids.call(this,e),h=new n({id:c,schema:e,localRefs:m,cacheKey:s,meta:a});"#"!=c[0]&&i&&(this._refs[c]=h);this._cache.put(s,h),l&&p&&this.validateSchema(e,!0);return h},v.prototype._compile=function(e,t){if(e.compiling)return e.validate=o,o.schema=e.schema,o.errors=null,o.root=t||o,!0===e.schema.$async&&(o.$async=!0),o;var a,r;e.compiling=!0,e.meta&&(a=this._opts,this._opts=this._metaOpts);try{r=i.call(this,e.schema,t,e.localRefs)}catch(t){throw delete e.validate,t}finally{e.compiling=!1,e.meta&&(this._opts=a)}return e.validate=r,e.refs=r.refs,e.refVal=r.refVal,e.root=r.root,r;function o(){var t=e.validate,a=t.apply(this,arguments);return o.errors=t.errors,a}},v.prototype.compileAsync=a(169);var m=a(170);v.prototype.addKeyword=m.add,v.prototype.getKeyword=m.get,v.prototype.removeKeyword=m.remove;var h=a(47);v.ValidationError=h.Validation,v.MissingRefError=h.MissingRef,v.$dataMetaSchema=p;var d="http://json-schema.org/draft-07/schema",f=["removeAdditional","useDefaults","coerceTypes"],g=["/properties"];function v(e){if(!(this instanceof v))return new v(e);e=this._opts=l.copy(e)||{},function(e){var t=e._opts.logger;if(!1===t)e.logger={log:E,warn:E,error:E};else{if(void 0===t&&(t=console),!("object"==typeof t&&t.log&&t.warn&&t.error))throw new Error("logger must implement log, warn and error methods");e.logger=t}}(this),this._schemas={},this._refs={},this._fragments={},this._formats=u(e.format),this._cache=e.cache||new o,this._loadingSchemas={},this._compilations=[],this.RULES=c(),this._getId=function(e){switch(e.schemaId){case"auto":return j;case"id":return k;default:return w}}(e),e.loopRequired=e.loopRequired||1/0,"property"==e.errorDataPath&&(e._errorDataPathProperty=!0),void 0===e.serialize&&(e.serialize=s),this._metaOpts=function(e){for(var t=l.copy(e._opts),a=0;a<f.length;a++)delete t[f[a]];return t}(this),e.formats&&function(e){for(var t in e._opts.formats){var a=e._opts.formats[t];e.addFormat(t,a)}}(this),function(e){var t;e._opts.$data&&(t=a(172),e.addMetaSchema(t,t.$id,!0));if(!1===e._opts.meta)return;var i=a(173);e._opts.$data&&(i=p(i,g));e.addMetaSchema(i,d,!0),e._refs["http://json-schema.org/schema"]=d}(this),"object"==typeof e.meta&&this.addMetaSchema(e.meta),e.nullable&&this.addKeyword("nullable",{metaSchema:{const:!0}}),function(e){var t=e._opts.schemas;if(!t)return;if(Array.isArray(t))e.addSchema(t);else for(var a in t)e.addSchema(t[a],a)}(this)}function y(e,t){return t=r.normalizeId(t),e._schemas[t]||e._refs[t]||e._fragments[t]}function b(e,t,a){for(var i in t){var r=t[i];r.meta||a&&!a.test(i)||(e._cache.del(r.cacheKey),delete t[i])}}function k(e){return e.$id&&this.logger.warn("schema $id ignored",e.$id),e.id}function w(e){return e.id&&this.logger.warn("schema id ignored",e.id),e.$id}function j(e){if(e.$id&&e.id&&e.$id!=e.id)throw new Error("schema $id is different from id");return e.$id||e.id}function x(e,t){if(e._schemas[t]||e._refs[t])throw new Error('schema with key or id "'+t+'" already exists')}function E(){}},function(e,t,a){"use strict";var i=a(45),r=a(22),o=a(47),n=a(76),s=a(77),u=r.ucs2length,c=a(46),p=o.Validation;function l(e,t,a){for(var i=0;i<this._compilations.length;i++){var r=this._compilations[i];if(r.schema==e&&r.root==t&&r.baseId==a)return i}return-1}function m(e,t){return"var pattern"+e+" = new RegExp("+r.toQuotedString(t[e])+");"}function h(e){return"var default"+e+" = defaults["+e+"];"}function d(e,t){return void 0===t[e]?"":"var refVal"+e+" = refVal["+e+"];"}function f(e){return"var customRule"+e+" = customRules["+e+"];"}function g(e,t){if(!e.length)return"";for(var a="",i=0;i<e.length;i++)a+=t(i,e);return a}e.exports=function e(t,a,v,y){var b=this,k=this._opts,w=[void 0],j={},x=[],E={},S=[],_={},R=[];a=a||{schema:t,refVal:w,refs:j};var A=function(e,t,a){var i=l.call(this,e,t,a);return i>=0?{index:i,compiling:!0}:(i=this._compilations.length,this._compilations[i]={schema:e,root:t,baseId:a},{index:i,compiling:!1})}.call(this,t,a,y);var C=this._compilations[A.index];if(A.compiling)return C.callValidate=function e(){var t=C.validate;var a=t.apply(this,arguments);e.errors=t.errors;return a};var q=this._formats;var O=this.RULES;try{var P=z(t,a,v,y);C.validate=P;var F=C.callValidate;return F&&(F.schema=P.schema,F.errors=null,F.refs=P.refs,F.refVal=P.refVal,F.root=P.root,F.$async=P.$async,k.sourceCode&&(F.source=P.source)),P}finally{(function(e,t,a){var i=l.call(this,e,t,a);i>=0&&this._compilations.splice(i,1)}).call(this,t,a,y)}function z(t,n,l,v){var y=!n||n&&n.schema==t;if(n.schema!=a.schema)return e.call(b,t,n,l,v);var E,_=!0===t.$async,A=s({isTop:!0,schema:t,isRoot:y,baseId:v,root:n,schemaPath:"",errSchemaPath:"#",errorPath:'""',MissingRefError:o.MissingRef,RULES:O,validate:s,util:r,resolve:i,resolveRef:T,usePattern:B,useDefault:L,useCustomRule:U,opts:k,formats:q,logger:b.logger,self:b});A=g(w,d)+g(x,m)+g(S,h)+g(R,f)+A,k.processCode&&(A=k.processCode(A));try{var C=new Function("self","RULES","formats","root","refVal","defaults","customRules","equal","ucs2length","ValidationError",A);E=C(b,O,q,a,w,S,R,c,u,p),w[0]=E}catch(e){throw b.logger.error("Error compiling schema, function code:",A),e}return E.schema=t,E.errors=null,E.refs=j,E.refVal=w,E.root=y?E:n,_&&(E.$async=!0),!0===k.sourceCode&&(E.source={code:A,patterns:x,defaults:S}),E}function T(t,r,o){r=i.url(t,r);var n,s,u=j[r];if(void 0!==u)return D(n=w[u],s="refVal["+u+"]");if(!o&&a.refs){var c=a.refs[r];if(void 0!==c)return n=a.refVal[c],s=I(r,n),D(n,s)}s=I(r);var p=i.call(b,z,a,r);if(void 0===p){var l=v&&v[r];l&&(p=i.inlineRef(l,k.inlineRefs)?l:e.call(b,l,a,v,t))}if(void 0!==p)return function(e,t){var a=j[e];w[a]=t}(r,p),D(p,s);!function(e){delete j[e]}(r)}function I(e,t){var a=w.length;return w[a]=t,j[e]=a,"refVal"+a}function D(e,t){return"object"==typeof e||"boolean"==typeof e?{code:t,schema:e,inline:!0}:{code:t,$async:e&&!!e.$async}}function B(e){var t=E[e];return void 0===t&&(t=E[e]=x.length,x[t]=e),"pattern"+t}function L(e){switch(typeof e){case"boolean":case"number":return""+e;case"string":return r.toQuotedString(e);case"object":if(null===e)return"null";var t=n(e),a=_[t];return void 0===a&&(a=_[t]=S.length,S[a]=e),"default"+a}}function U(e,t,a,i){var r=e.definition.validateSchema;if(r&&!1!==b._opts.validateSchema){var o=r(t);if(!o){var n="keyword schema is invalid: "+b.errorsText(r.errors);if("log"!=b._opts.validateSchema)throw new Error(n);b.logger.error(n)}}var s,u=e.definition.compile,c=e.definition.inline,p=e.definition.macro;if(u)s=u.call(b,t,a,i);else if(p)s=p.call(b,t,a,i),!1!==k.validateSchema&&b.validateSchema(s,!0);else if(c)s=c.call(b,i,e.keyword,t,a);else if(!(s=e.definition.validate))return;if(void 0===s)throw new Error('custom keyword "'+e.keyword+'"failed to compile');var l=R.length;return R[l]=s,{code:"customRule"+l,validate:s}}}},function(e,t,a){
/** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
!function(e){"use strict";function t(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];if(t.length>1){t[0]=t[0].slice(0,-1);for(var i=t.length-1,r=1;r<i;++r)t[r]=t[r].slice(1,-1);return t[i]=t[i].slice(1),t.join("")}return t[0]}function a(e){return"(?:"+e+")"}function i(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function r(e){return e.toUpperCase()}function o(e){var i=t("[0-9]","[A-Fa-f]"),r=a(a("%[EFef]"+i+"%"+i+i+"%"+i+i)+"|"+a("%[89A-Fa-f]"+i+"%"+i+i)+"|"+a("%"+i+i)),o="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",n=t("[\\:\\/\\?\\#\\[\\]\\@]",o),s=e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]",u=e?"[\\uE000-\\uF8FF]":"[]",c=t("[A-Za-z]","[0-9]","[\\-\\.\\_\\~]",s),p=a("[A-Za-z]"+t("[A-Za-z]","[0-9]","[\\+\\-\\.]")+"*"),l=a(a(r+"|"+t(c,o,"[\\:]"))+"*"),m=(a(a("25[0-5]")+"|"+a("2[0-4][0-9]")+"|"+a("1[0-9][0-9]")+"|"+a("[1-9][0-9]")+"|[0-9]"),a(a("25[0-5]")+"|"+a("2[0-4][0-9]")+"|"+a("1[0-9][0-9]")+"|"+a("0?[1-9][0-9]")+"|0?0?[0-9]")),h=a(m+"\\."+m+"\\."+m+"\\."+m),d=a(i+"{1,4}"),f=a(a(d+"\\:"+d)+"|"+h),g=a(a(d+"\\:")+"{6}"+f),v=a("\\:\\:"+a(d+"\\:")+"{5}"+f),y=a(a(d)+"?\\:\\:"+a(d+"\\:")+"{4}"+f),b=a(a(a(d+"\\:")+"{0,1}"+d)+"?\\:\\:"+a(d+"\\:")+"{3}"+f),k=a(a(a(d+"\\:")+"{0,2}"+d)+"?\\:\\:"+a(d+"\\:")+"{2}"+f),w=a(a(a(d+"\\:")+"{0,3}"+d)+"?\\:\\:"+d+"\\:"+f),j=a(a(a(d+"\\:")+"{0,4}"+d)+"?\\:\\:"+f),x=a(a(a(d+"\\:")+"{0,5}"+d)+"?\\:\\:"+d),E=a(a(a(d+"\\:")+"{0,6}"+d)+"?\\:\\:"),S=a([g,v,y,b,k,w,j,x,E].join("|")),_=a(a(c+"|"+r)+"+"),R=(a(S+"\\%25"+_),a(S+a("\\%25|\\%(?!"+i+"{2})")+_)),A=a("[vV]"+i+"+\\."+t(c,o,"[\\:]")+"+"),C=a("\\["+a(R+"|"+S+"|"+A)+"\\]"),q=a(a(r+"|"+t(c,o))+"*"),O=a(C+"|"+h+"(?!"+q+")|"+q),P=a("[0-9]*"),F=a(a(l+"@")+"?"+O+a("\\:"+P)+"?"),z=a(r+"|"+t(c,o,"[\\:\\@]")),T=a(z+"*"),I=a(z+"+"),D=a(a(r+"|"+t(c,o,"[\\@]"))+"+"),B=a(a("\\/"+T)+"*"),L=a("\\/"+a(I+B)+"?"),U=a(D+B),N=a(I+B),H="(?!"+z+")",M=(a(B+"|"+L+"|"+U+"|"+N+"|"+H),a(a(z+"|"+t("[\\/\\?]",u))+"*")),K=a(a(z+"|[\\/\\?]")+"*"),$=a(a("\\/\\/"+F+B)+"|"+L+"|"+N+"|"+H),G=a(p+"\\:"+$+a("\\?"+M)+"?"+a("\\#"+K)+"?"),V=a(a("\\/\\/"+F+B)+"|"+L+"|"+U+"|"+H),Q=a(V+a("\\?"+M)+"?"+a("\\#"+K)+"?");return a(G+"|"+Q),a(p+"\\:"+$+a("\\?"+M)+"?"),a(a("\\/\\/("+a("("+l+")@")+"?("+O+")"+a("\\:("+P+")")+"?)")+"?("+B+"|"+L+"|"+N+"|"+H+")"),a("\\?("+M+")"),a("\\#("+K+")"),a(a("\\/\\/("+a("("+l+")@")+"?("+O+")"+a("\\:("+P+")")+"?)")+"?("+B+"|"+L+"|"+U+"|"+H+")"),a("\\?("+M+")"),a("\\#("+K+")"),a(a("\\/\\/("+a("("+l+")@")+"?("+O+")"+a("\\:("+P+")")+"?)")+"?("+B+"|"+L+"|"+N+"|"+H+")"),a("\\?("+M+")"),a("\\#("+K+")"),a("("+l+")@"),a("\\:("+P+")"),{NOT_SCHEME:new RegExp(t("[^]","[A-Za-z]","[0-9]","[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",c,o),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",c,o),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",c,o),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",c,o),"g"),NOT_QUERY:new RegExp(t("[^\\%]",c,o,"[\\:\\@\\/\\?]",u),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",c,o,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",c,o),"g"),UNRESERVED:new RegExp(c,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",c,n),"g"),PCT_ENCODED:new RegExp(r,"g"),IPV4ADDRESS:new RegExp("^("+h+")$"),IPV6ADDRESS:new RegExp("^\\[?("+S+")"+a(a("\\%25|\\%(?!"+i+"{2})")+"("+_+")")+"?\\]?$")}}var n=o(!1),s=o(!0),u=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var a=[],i=!0,r=!1,o=void 0;try{for(var n,s=e[Symbol.iterator]();!(i=(n=s.next()).done)&&(a.push(n.value),!t||a.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{!i&&s.return&&s.return()}finally{if(r)throw o}}return a}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},c=2147483647,p=/^xn--/,l=/[^\0-\x7E]/,m=/[\x2E\u3002\uFF0E\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},d=Math.floor,f=String.fromCharCode;function g(e){throw new RangeError(h[e])}function v(e,t){var a=e.split("@"),i="";a.length>1&&(i=a[0]+"@",e=a[1]);var r=(e=e.replace(m,".")).split("."),o=function(e,t){for(var a=[],i=e.length;i--;)a[i]=t(e[i]);return a}(r,t).join(".");return i+o}function y(e){for(var t=[],a=0,i=e.length;a<i;){var r=e.charCodeAt(a++);if(r>=55296&&r<=56319&&a<i){var o=e.charCodeAt(a++);56320==(64512&o)?t.push(((1023&r)<<10)+(1023&o)+65536):(t.push(r),a--)}else t.push(r)}return t}var b=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},k=function(e,t,a){var i=0;for(e=a?d(e/700):e>>1,e+=d(e/t);e>455;i+=36)e=d(e/35);return d(i+36*e/(e+38))},w=function(e){var t,a=[],i=e.length,r=0,o=128,n=72,s=e.lastIndexOf("-");s<0&&(s=0);for(var u=0;u<s;++u)e.charCodeAt(u)>=128&&g("not-basic"),a.push(e.charCodeAt(u));for(var p=s>0?s+1:0;p<i;){for(var l=r,m=1,h=36;;h+=36){p>=i&&g("invalid-input");var f=(t=e.charCodeAt(p++))-48<10?t-22:t-65<26?t-65:t-97<26?t-97:36;(f>=36||f>d((c-r)/m))&&g("overflow"),r+=f*m;var v=h<=n?1:h>=n+26?26:h-n;if(f<v)break;var y=36-v;m>d(c/y)&&g("overflow"),m*=y}var b=a.length+1;n=k(r-l,b,0==l),d(r/b)>c-o&&g("overflow"),o+=d(r/b),r%=b,a.splice(r++,0,o)}return String.fromCodePoint.apply(String,a)},j=function(e){var t=[],a=(e=y(e)).length,i=128,r=0,o=72,n=!0,s=!1,u=void 0;try{for(var p,l=e[Symbol.iterator]();!(n=(p=l.next()).done);n=!0){var m=p.value;m<128&&t.push(f(m))}}catch(e){s=!0,u=e}finally{try{!n&&l.return&&l.return()}finally{if(s)throw u}}var h=t.length,v=h;for(h&&t.push("-");v<a;){var w=c,j=!0,x=!1,E=void 0;try{for(var S,_=e[Symbol.iterator]();!(j=(S=_.next()).done);j=!0){var R=S.value;R>=i&&R<w&&(w=R)}}catch(e){x=!0,E=e}finally{try{!j&&_.return&&_.return()}finally{if(x)throw E}}var A=v+1;w-i>d((c-r)/A)&&g("overflow"),r+=(w-i)*A,i=w;var C=!0,q=!1,O=void 0;try{for(var P,F=e[Symbol.iterator]();!(C=(P=F.next()).done);C=!0){var z=P.value;if(z<i&&++r>c&&g("overflow"),z==i){for(var T=r,I=36;;I+=36){var D=I<=o?1:I>=o+26?26:I-o;if(T<D)break;var B=T-D,L=36-D;t.push(f(b(D+B%L,0))),T=d(B/L)}t.push(f(b(T,0))),o=k(r,A,v==h),r=0,++v}}}catch(e){q=!0,O=e}finally{try{!C&&F.return&&F.return()}finally{if(q)throw O}}++r,++i}return t.join("")},x={version:"2.1.0",ucs2:{decode:y,encode:function(e){return String.fromCodePoint.apply(String,function(e){if(Array.isArray(e)){for(var t=0,a=Array(e.length);t<e.length;t++)a[t]=e[t];return a}return Array.from(e)}(e))}},decode:w,encode:j,toASCII:function(e){return v(e,function(e){return l.test(e)?"xn--"+j(e):e})},toUnicode:function(e){return v(e,function(e){return p.test(e)?w(e.slice(4).toLowerCase()):e})}},E={};function S(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function _(e){for(var t="",a=0,i=e.length;a<i;){var r=parseInt(e.substr(a+1,2),16);if(r<128)t+=String.fromCharCode(r),a+=3;else if(r>=194&&r<224){if(i-a>=6){var o=parseInt(e.substr(a+4,2),16);t+=String.fromCharCode((31&r)<<6|63&o)}else t+=e.substr(a,6);a+=6}else if(r>=224){if(i-a>=9){var n=parseInt(e.substr(a+4,2),16),s=parseInt(e.substr(a+7,2),16);t+=String.fromCharCode((15&r)<<12|(63&n)<<6|63&s)}else t+=e.substr(a,9);a+=9}else t+=e.substr(a,3),a+=3}return t}function R(e,t){function a(e){var a=_(e);return a.match(t.UNRESERVED)?a:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,a).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,a).replace(t.NOT_USERINFO,S).replace(t.PCT_ENCODED,r)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,a).toLowerCase().replace(t.NOT_HOST,S).replace(t.PCT_ENCODED,r)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,a).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,S).replace(t.PCT_ENCODED,r)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,a).replace(t.NOT_QUERY,S).replace(t.PCT_ENCODED,r)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,a).replace(t.NOT_FRAGMENT,S).replace(t.PCT_ENCODED,r)),e}function A(e){return e.replace(/^0*(.*)/,"$1")||"0"}function C(e,t){var a=e.match(t.IPV4ADDRESS)||[],i=u(a,2),r=i[1];return r?r.split(".").map(A).join("."):e}function q(e,t){var a=e.match(t.IPV6ADDRESS)||[],i=u(a,3),r=i[1],o=i[2];if(r){for(var n=r.toLowerCase().split("::").reverse(),s=u(n,2),c=s[0],p=s[1],l=p?p.split(":").map(A):[],m=c.split(":").map(A),h=t.IPV4ADDRESS.test(m[m.length-1]),d=h?7:8,f=m.length-d,g=Array(d),v=0;v<d;++v)g[v]=l[v]||m[f+v]||"";h&&(g[d-1]=C(g[d-1],t));var y=g.reduce(function(e,t,a){if(!t||"0"===t){var i=e[e.length-1];i&&i.index+i.length===a?i.length++:e.push({index:a,length:1})}return e},[]),b=y.sort(function(e,t){return t.length-e.length})[0],k=void 0;if(b&&b.length>1){var w=g.slice(0,b.index),j=g.slice(b.index+b.length);k=w.join(":")+"::"+j.join(":")}else k=g.join(":");return o&&(k+="%"+o),k}return e}var O=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,P=void 0==="".match(/(){0}/)[1];function F(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a={},i=!1!==t.iri?s:n;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var r=e.match(O);if(r){P?(a.scheme=r[1],a.userinfo=r[3],a.host=r[4],a.port=parseInt(r[5],10),a.path=r[6]||"",a.query=r[7],a.fragment=r[8],isNaN(a.port)&&(a.port=r[5])):(a.scheme=r[1]||void 0,a.userinfo=-1!==e.indexOf("@")?r[3]:void 0,a.host=-1!==e.indexOf("//")?r[4]:void 0,a.port=parseInt(r[5],10),a.path=r[6]||"",a.query=-1!==e.indexOf("?")?r[7]:void 0,a.fragment=-1!==e.indexOf("#")?r[8]:void 0,isNaN(a.port)&&(a.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?r[4]:void 0)),a.host&&(a.host=q(C(a.host,i),i)),void 0!==a.scheme||void 0!==a.userinfo||void 0!==a.host||void 0!==a.port||a.path||void 0!==a.query?void 0===a.scheme?a.reference="relative":void 0===a.fragment?a.reference="absolute":a.reference="uri":a.reference="same-document",t.reference&&"suffix"!==t.reference&&t.reference!==a.reference&&(a.error=a.error||"URI is not a "+t.reference+" reference.");var o=E[(t.scheme||a.scheme||"").toLowerCase()];if(t.unicodeSupport||o&&o.unicodeSupport)R(a,i);else{if(a.host&&(t.domainHost||o&&o.domainHost))try{a.host=x.toASCII(a.host.replace(i.PCT_ENCODED,_).toLowerCase())}catch(e){a.error=a.error||"Host's domain name can not be converted to ASCII via punycode: "+e}R(a,n)}o&&o.parse&&o.parse(a,t)}else a.error=a.error||"URI can not be parsed.";return a}var z=/^\.\.?\//,T=/^\/\.(\/|$)/,I=/^\/\.\.(\/|$)/,D=/^\/?(?:.|\n)*?(?=\/|$)/;function B(e){for(var t=[];e.length;)if(e.match(z))e=e.replace(z,"");else if(e.match(T))e=e.replace(T,"/");else if(e.match(I))e=e.replace(I,"/"),t.pop();else if("."===e||".."===e)e="";else{var a=e.match(D);if(!a)throw new Error("Unexpected dot segment condition");var i=a[0];e=e.slice(i.length),t.push(i)}return t.join("")}function L(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.iri?s:n,i=[],r=E[(t.scheme||e.scheme||"").toLowerCase()];if(r&&r.serialize&&r.serialize(e,t),e.host)if(a.IPV6ADDRESS.test(e.host));else if(t.domainHost||r&&r.domainHost)try{e.host=t.iri?x.toUnicode(e.host):x.toASCII(e.host.replace(a.PCT_ENCODED,_).toLowerCase())}catch(a){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+a}R(e,a),"suffix"!==t.reference&&e.scheme&&(i.push(e.scheme),i.push(":"));var o=function(e,t){var a=!1!==t.iri?s:n,i=[];return void 0!==e.userinfo&&(i.push(e.userinfo),i.push("@")),void 0!==e.host&&i.push(q(C(String(e.host),a),a).replace(a.IPV6ADDRESS,function(e,t,a){return"["+t+(a?"%25"+a:"")+"]"})),"number"==typeof e.port&&(i.push(":"),i.push(e.port.toString(10))),i.length?i.join(""):void 0}(e,t);if(void 0!==o&&("suffix"!==t.reference&&i.push("//"),i.push(o),e.path&&"/"!==e.path.charAt(0)&&i.push("/")),void 0!==e.path){var u=e.path;t.absolutePath||r&&r.absolutePath||(u=B(u)),void 0===o&&(u=u.replace(/^\/\//,"/%2F")),i.push(u)}return void 0!==e.query&&(i.push("?"),i.push(e.query)),void 0!==e.fragment&&(i.push("#"),i.push(e.fragment)),i.join("")}function U(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments[3],r={};return i||(e=F(L(e,a),a),t=F(L(t,a),a)),!(a=a||{}).tolerant&&t.scheme?(r.scheme=t.scheme,r.userinfo=t.userinfo,r.host=t.host,r.port=t.port,r.path=B(t.path||""),r.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(r.userinfo=t.userinfo,r.host=t.host,r.port=t.port,r.path=B(t.path||""),r.query=t.query):(t.path?("/"===t.path.charAt(0)?r.path=B(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?r.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:r.path=t.path:r.path="/"+t.path,r.path=B(r.path)),r.query=t.query):(r.path=e.path,void 0!==t.query?r.query=t.query:r.query=e.query),r.userinfo=e.userinfo,r.host=e.host,r.port=e.port),r.scheme=e.scheme),r.fragment=t.fragment,r}function N(e,t){return e&&e.toString().replace(t&&t.iri?s.PCT_ENCODED:n.PCT_ENCODED,_)}var H={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){return e.port!==("https"!==String(e.scheme).toLowerCase()?80:443)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},M={scheme:"https",domainHost:H.domainHost,parse:H.parse,serialize:H.serialize},K={},$="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",G="[0-9A-Fa-f]",V=a(a("%[EFef][0-9A-Fa-f]%"+G+G+"%"+G+G)+"|"+a("%[89A-Fa-f][0-9A-Fa-f]%"+G+G)+"|"+a("%"+G+G)),Q=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),W=new RegExp($,"g"),Y=new RegExp(V,"g"),Z=new RegExp(t("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',Q),"g"),J=new RegExp(t("[^]",$,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),X=J;function ee(e){var t=_(e);return t.match(W)?t:e}var te={scheme:"mailto",parse:function(e,t){var a=e,i=a.to=a.path?a.path.split(","):[];if(a.path=void 0,a.query){for(var r=!1,o={},n=a.query.split("&"),s=0,u=n.length;s<u;++s){var c=n[s].split("=");switch(c[0]){case"to":for(var p=c[1].split(","),l=0,m=p.length;l<m;++l)i.push(p[l]);break;case"subject":a.subject=N(c[1],t);break;case"body":a.body=N(c[1],t);break;default:r=!0,o[N(c[0],t)]=N(c[1],t)}}r&&(a.headers=o)}a.query=void 0;for(var h=0,d=i.length;h<d;++h){var f=i[h].split("@");if(f[0]=N(f[0]),t.unicodeSupport)f[1]=N(f[1],t).toLowerCase();else try{f[1]=x.toASCII(N(f[1],t).toLowerCase())}catch(e){a.error=a.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}i[h]=f.join("@")}return a},serialize:function(e,t){var a,i=e,o=null!=(a=e.to)?a instanceof Array?a:"number"!=typeof a.length||a.split||a.setInterval||a.call?[a]:Array.prototype.slice.call(a):[];if(o){for(var n=0,s=o.length;n<s;++n){var u=String(o[n]),c=u.lastIndexOf("@"),p=u.slice(0,c).replace(Y,ee).replace(Y,r).replace(Z,S),l=u.slice(c+1);try{l=t.iri?x.toUnicode(l):x.toASCII(N(l,t).toLowerCase())}catch(e){i.error=i.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e}o[n]=p+"@"+l}i.path=o.join(",")}var m=e.headers=e.headers||{};e.subject&&(m.subject=e.subject),e.body&&(m.body=e.body);var h=[];for(var d in m)m[d]!==K[d]&&h.push(d.replace(Y,ee).replace(Y,r).replace(J,S)+"="+m[d].replace(Y,ee).replace(Y,r).replace(X,S));return h.length&&(i.query=h.join("&")),i}},ae=/^([^\:]+)\:(.*)/,ie={scheme:"urn",parse:function(e,t){var a=e.path&&e.path.match(ae),i=e;if(a){var r=t.scheme||i.scheme||"urn",o=a[1].toLowerCase(),n=a[2],s=r+":"+(t.nid||o),u=E[s];i.nid=o,i.nss=n,i.path=void 0,u&&(i=u.parse(i,t))}else i.error=i.error||"URN can not be parsed.";return i},serialize:function(e,t){var a=t.scheme||e.scheme||"urn",i=e.nid,r=a+":"+(t.nid||i),o=E[r];o&&(e=o.serialize(e,t));var n=e,s=e.nss;return n.path=(i||t.nid)+":"+s,n}},re=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,oe={scheme:"urn:uuid",parse:function(e,t){var a=e;return a.uuid=a.nss,a.nss=void 0,t.tolerant||a.uuid&&a.uuid.match(re)||(a.error=a.error||"UUID is not valid."),a},serialize:function(e,t){var a=e;return a.nss=(e.uuid||"").toLowerCase(),a}};E[H.scheme]=H,E[M.scheme]=M,E[te.scheme]=te,E[ie.scheme]=ie,E[oe.scheme]=oe,e.SCHEMES=E,e.pctEncChar=S,e.pctDecChars=_,e.parse=F,e.removeDotSegments=B,e.serialize=L,e.resolveComponents=U,e.resolve=function(e,t,a){var i=function(e,t){var a=e;if(t)for(var i in t)a[i]=t[i];return a}({scheme:"null"},a);return L(U(F(e,i),F(t,i),i,!0),i)},e.normalize=function(e,t){return"string"==typeof e?e=L(F(e,t),t):"object"===i(e)&&(e=F(L(e,t),t)),e},e.equal=function(e,t,a){return"string"==typeof e?e=L(F(e,a),a):"object"===i(e)&&(e=L(e,a)),"string"==typeof t?t=L(F(t,a),a):"object"===i(t)&&(t=L(t,a)),e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace(t&&t.iri?s.ESCAPE:n.ESCAPE,S)},e.unescapeComponent=N,Object.defineProperty(e,"__esModule",{value:!0})}(t)},function(e,t,a){"use strict";e.exports=function(e){for(var t,a=0,i=e.length,r=0;r<i;)a++,(t=e.charCodeAt(r++))>=55296&&t<=56319&&r<i&&56320==(64512&(t=e.charCodeAt(r)))&&r++;return a}},function(e,t,a){"use strict";var i=e.exports=function(e,t,a){"function"==typeof t&&(a=t,t={}),function e(t,a,r,o,n,s,u,c,p,l){if(o&&"object"==typeof o&&!Array.isArray(o)){for(var m in a(o,n,s,u,c,p,l),o){var h=o[m];if(Array.isArray(h)){if(m in i.arrayKeywords)for(var d=0;d<h.length;d++)e(t,a,r,h[d],n+"/"+m+"/"+d,s,n,m,o,d)}else if(m in i.propsKeywords){if(h&&"object"==typeof h)for(var f in h)e(t,a,r,h[f],n+"/"+m+"/"+f.replace(/~/g,"~0").replace(/\//g,"~1"),s,n,m,o,f)}else(m in i.keywords||t.allKeys&&!(m in i.skipKeywords))&&e(t,a,r,h,n+"/"+m,s,n,m,o)}r(o,n,s,u,c,p,l)}}(t,"function"==typeof(a=t.cb||a)?a:a.pre||function(){},a.post||function(){},e,"",e)};i.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0},i.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},i.propsKeywords={definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},i.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0}},function(e,t,a){"use strict";var i=e.exports=function(){this._cache={}};i.prototype.put=function(e,t){this._cache[e]=t},i.prototype.get=function(e){return this._cache[e]},i.prototype.del=function(e){delete this._cache[e]},i.prototype.clear=function(){this._cache={}}},function(e,t,a){"use strict";var i=a(22),r=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,o=[0,31,28,31,30,31,30,31,31,30,31,30,31],n=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i,s=/^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i,u=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?$/i,c=/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#.\/;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,p=/^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i,l=/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,m=/^(?:\/(?:[^~\/]|~0|~1)*)*$/,h=/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,d=/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~\/]|~0|~1)*)*)$/;function f(e){return e="full"==e?"full":"fast",i.copy(f[e])}function g(e){var t=e.match(r);if(!t)return!1;var a=+t[1],i=+t[2],n=+t[3];return i>=1&&i<=12&&n>=1&&n<=(2==i&&function(e){return e%4==0&&(e%100!=0||e%400==0)}(a)?29:o[i])}function v(e,t){var a=e.match(n);if(!a)return!1;var i=a[1],r=a[2],o=a[3],s=a[5];return(i<=23&&r<=59&&o<=59||23==i&&59==r&&60==o)&&(!t||s)}e.exports=f,f.fast={date:/^\d\d\d\d-[0-1]\d-[0-3]\d$/,time:/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,"date-time":/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,uri:/^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i,"uri-reference":/^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,"uri-template":c,url:p,email:/^[a-z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,hostname:s,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:w,uuid:l,"json-pointer":m,"json-pointer-uri-fragment":h,"relative-json-pointer":d},f.full={date:g,time:v,"date-time":function(e){var t=e.split(y);return 2==t.length&&g(t[0])&&v(t[1],!0)},uri:function(e){return b.test(e)&&u.test(e)},"uri-reference":/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@\/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@\/?]|%[0-9a-f]{2})*)?$/i,"uri-template":c,url:p,email:/^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:function(e){return e.length<=255&&s.test(e)},ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:w,uuid:l,"json-pointer":m,"json-pointer-uri-fragment":h,"relative-json-pointer":d};var y=/t|\s/i;var b=/\/|:/;var k=/[^\\]\\Z/;function w(e){if(k.test(e))return!1;try{return new RegExp(e),!0}catch(e){return!1}}},function(e,t,a){"use strict";var i=a(148),r=a(22).toHash;e.exports=function(){var e=[{type:"number",rules:[{maximum:["exclusiveMaximum"]},{minimum:["exclusiveMinimum"]},"multipleOf","format"]},{type:"string",rules:["maxLength","minLength","pattern","format"]},{type:"array",rules:["maxItems","minItems","items","contains","uniqueItems"]},{type:"object",rules:["maxProperties","minProperties","required","dependencies","propertyNames",{properties:["additionalProperties","patternProperties"]}]},{rules:["$ref","const","enum","not","anyOf","oneOf","allOf","if"]}],t=["type","$comment"];return e.all=r(t),e.types=r(["number","integer","string","array","object","boolean","null"]),e.forEach(function(a){a.rules=a.rules.map(function(a){var r;if("object"==typeof a){var o=Object.keys(a)[0];r=a[o],a=o,r.forEach(function(a){t.push(a),e.all[a]=!0})}return t.push(a),e.all[a]={keyword:a,code:i[a],implements:r}}),e.all.$comment={keyword:"$comment",code:i.$comment},a.type&&(e.types[a.type]=a)}),e.keywords=r(t.concat(["$schema","$id","id","$data","title","description","default","definitions","examples","readOnly","writeOnly","contentMediaType","contentEncoding","additionalItems","then","else"])),e.custom={},e}},function(e,t,a){"use strict";e.exports={$ref:a(149),allOf:a(150),anyOf:a(151),$comment:a(152),const:a(153),contains:a(154),dependencies:a(155),enum:a(156),format:a(157),if:a(158),items:a(159),maximum:a(78),minimum:a(78),maxItems:a(79),minItems:a(79),maxLength:a(80),minLength:a(80),maxProperties:a(81),minProperties:a(81),multipleOf:a(160),not:a(161),oneOf:a(162),pattern:a(163),properties:a(164),propertyNames:a(165),required:a(166),uniqueItems:a(167),validate:a(77)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r,o=" ",n=e.level,s=e.dataLevel,u=e.schema[t],c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(s||""),m="valid"+n;if("#"==u||"#/"==u)e.isRoot?(i=e.async,r="validate"):(i=!0===e.root.schema.$async,r="root.refVal[0]");else{var h=e.resolveRef(e.baseId,u,e.isRoot);if(void 0===h){var d=e.MissingRefError.message(e.baseId,u);if("fail"==e.opts.missingRefs){e.logger.error(d),(y=y||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '$ref' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { ref: '"+e.util.escapeQuotes(u)+"' } ",!1!==e.opts.messages&&(o+=" , message: 'can\\'t resolve reference "+e.util.escapeQuotes(u)+"' "),e.opts.verbose&&(o+=" , schema: "+e.util.toQuotedString(u)+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),o+=" } "):o+=" {} ";var f=o;o=y.pop(),!e.compositeRule&&p?e.async?o+=" throw new ValidationError(["+f+"]); ":o+=" validate.errors = ["+f+"]; return false; ":o+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",p&&(o+=" if (false) { ")}else{if("ignore"!=e.opts.missingRefs)throw new e.MissingRefError(e.baseId,u,d);e.logger.warn(d),p&&(o+=" if (true) { ")}}else if(h.inline){var g=e.util.copy(e);g.level++;var v="valid"+g.level;g.schema=h.schema,g.schemaPath="",g.errSchemaPath=u,o+=" "+e.validate(g).replace(/validate\.schema/g,h.code)+" ",p&&(o+=" if ("+v+") { ")}else i=!0===h.$async||e.async&&!1!==h.$async,r=h.code}if(r){var y;(y=y||[]).push(o),o="",e.opts.passContext?o+=" "+r+".call(this, ":o+=" "+r+"( ",o+=" "+l+", (dataPath || '')",'""'!=e.errorPath&&(o+=" + "+e.errorPath);var b=o+=" , "+(s?"data"+(s-1||""):"parentData")+" , "+(s?e.dataPathArr[s]:"parentDataProperty")+", rootData)  ";if(o=y.pop(),i){if(!e.async)throw new Error("async schema referenced by sync schema");p&&(o+=" var "+m+"; "),o+=" try { await "+b+"; ",p&&(o+=" "+m+" = true; "),o+=" } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ",p&&(o+=" "+m+" = false; "),o+=" } ",p&&(o+=" if ("+m+") { ")}else o+=" if (!"+b+") { if (vErrors === null) vErrors = "+r+".errors; else vErrors = vErrors.concat("+r+".errors); errors = vErrors.length; } ",p&&(o+=" else { ")}return o}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.schema[t],o=e.schemaPath+e.util.getProperty(t),n=e.errSchemaPath+"/"+t,s=!e.opts.allErrors,u=e.util.copy(e),c="";u.level++;var p="valid"+u.level,l=u.baseId,m=!0,h=r;if(h)for(var d,f=-1,g=h.length-1;f<g;)d=h[f+=1],e.util.schemaHasRules(d,e.RULES.all)&&(m=!1,u.schema=d,u.schemaPath=o+"["+f+"]",u.errSchemaPath=n+"/"+f,i+="  "+e.validate(u)+" ",u.baseId=l,s&&(i+=" if ("+p+") { ",c+="}"));return s&&(i+=m?" if (true) { ":" "+c.slice(0,-1)+" "),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m="errs__"+r,h=e.util.copy(e),d="";h.level++;var f="valid"+h.level;if(n.every(function(t){return e.util.schemaHasRules(t,e.RULES.all)})){var g=h.baseId;i+=" var "+m+" = errors; var "+l+" = false;  ";var v=e.compositeRule;e.compositeRule=h.compositeRule=!0;var y=n;if(y)for(var b,k=-1,w=y.length-1;k<w;)b=y[k+=1],h.schema=b,h.schemaPath=s+"["+k+"]",h.errSchemaPath=u+"/"+k,i+="  "+e.validate(h)+" ",h.baseId=g,i+=" "+l+" = "+l+" || "+f+"; if (!"+l+") { ",d+="}";e.compositeRule=h.compositeRule=v,i+=" "+d+" if (!"+l+") {   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'anyOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should match some schema in anyOf' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),i+=" } else {  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; } ",e.opts.allErrors&&(i+=" } "),i=e.util.cleanUpCode(i)}else c&&(i+=" if (true) { ");return i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.schema[t],o=e.errSchemaPath+"/"+t,n=(e.opts.allErrors,e.util.toQuotedString(r));return!0===e.opts.$comment?i+=" console.log("+n+");":"function"==typeof e.opts.$comment&&(i+=" self._opts.$comment("+n+", "+e.util.toQuotedString(o)+", validate.root.schema);"),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m=e.opts.$data&&n&&n.$data;m&&(i+=" var schema"+r+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; "),m||(i+=" var schema"+r+" = validate.schema"+s+";"),i+="var "+l+" = equal("+p+", schema"+r+"); if (!"+l+") {   ";var h=h||[];h.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'const' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { allowedValue: schema"+r+" } ",!1!==e.opts.messages&&(i+=" , message: 'should be equal to constant' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var d=i;return i=h.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+d+"]); ":i+=" validate.errors = ["+d+"]; return false; ":i+=" var err = "+d+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" }",c&&(i+=" else { "),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m="errs__"+r,h=e.util.copy(e);h.level++;var d="valid"+h.level,f="i"+r,g=h.dataLevel=e.dataLevel+1,v="data"+g,y=e.baseId,b=e.util.schemaHasRules(n,e.RULES.all);if(i+="var "+m+" = errors;var "+l+";",b){var k=e.compositeRule;e.compositeRule=h.compositeRule=!0,h.schema=n,h.schemaPath=s,h.errSchemaPath=u,i+=" var "+d+" = false; for (var "+f+" = 0; "+f+" < "+p+".length; "+f+"++) { ",h.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers,!0);var w=p+"["+f+"]";h.dataPathArr[g]=f;var j=e.validate(h);h.baseId=y,e.util.varOccurences(j,v)<2?i+=" "+e.util.varReplace(j,v,w)+" ":i+=" var "+v+" = "+w+"; "+j+" ",i+=" if ("+d+") break; }  ",e.compositeRule=h.compositeRule=k,i+="  if (!"+d+") {"}else i+=" if ("+p+".length == 0) {";var x=x||[];x.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'contains' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should contain a valid item' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var E=i;return i=x.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+E+"]); ":i+=" validate.errors = ["+E+"]; return false; ":i+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else { ",b&&(i+="  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; } "),e.opts.allErrors&&(i+=" } "),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="errs__"+r,m=e.util.copy(e),h="";m.level++;var d="valid"+m.level,f={},g={},v=e.opts.ownProperties;for(w in n){var y=n[w],b=Array.isArray(y)?g:f;b[w]=y}i+="var "+l+" = errors;";var k=e.errorPath;for(var w in i+="var missing"+r+";",g)if((b=g[w]).length){if(i+=" if ( "+p+e.util.getProperty(w)+" !== undefined ",v&&(i+=" && Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(w)+"') "),c){i+=" && ( ";var j=b;if(j)for(var x=-1,E=j.length-1;x<E;){q=j[x+=1],x&&(i+=" || "),i+=" ( ( "+(z=p+(F=e.util.getProperty(q)))+" === undefined ",v&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(q)+"') "),i+=") && (missing"+r+" = "+e.util.toQuotedString(e.opts.jsonPointers?q:F)+") ) "}i+=")) {  ";var S="missing"+r,_="' + "+S+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(k,S,!0):k+" + "+S);var R=R||[];R.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { property: '"+e.util.escapeQuotes(w)+"', missingProperty: '"+_+"', depsCount: "+b.length+", deps: '"+e.util.escapeQuotes(1==b.length?b[0]:b.join(", "))+"' } ",!1!==e.opts.messages&&(i+=" , message: 'should have ",1==b.length?i+="property "+e.util.escapeQuotes(b[0]):i+="properties "+e.util.escapeQuotes(b.join(", ")),i+=" when property "+e.util.escapeQuotes(w)+" is present' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var A=i;i=R.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+A+"]); ":i+=" validate.errors = ["+A+"]; return false; ":i+=" var err = "+A+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else{i+=" ) { ";var C=b;if(C)for(var q,O=-1,P=C.length-1;O<P;){q=C[O+=1];var F=e.util.getProperty(q),z=(_=e.util.escapeQuotes(q),p+F);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(k,q,e.opts.jsonPointers)),i+=" if ( "+z+" === undefined ",v&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(q)+"') "),i+=") {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { property: '"+e.util.escapeQuotes(w)+"', missingProperty: '"+_+"', depsCount: "+b.length+", deps: '"+e.util.escapeQuotes(1==b.length?b[0]:b.join(", "))+"' } ",!1!==e.opts.messages&&(i+=" , message: 'should have ",1==b.length?i+="property "+e.util.escapeQuotes(b[0]):i+="properties "+e.util.escapeQuotes(b.join(", ")),i+=" when property "+e.util.escapeQuotes(w)+" is present' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}i+=" }   ",c&&(h+="}",i+=" else { ")}e.errorPath=k;var T=m.baseId;for(var w in f){y=f[w];e.util.schemaHasRules(y,e.RULES.all)&&(i+=" "+d+" = true; if ( "+p+e.util.getProperty(w)+" !== undefined ",v&&(i+=" && Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(w)+"') "),i+=") { ",m.schema=y,m.schemaPath=s+e.util.getProperty(w),m.errSchemaPath=u+"/"+e.util.escapeFragment(w),i+="  "+e.validate(m)+" ",m.baseId=T,i+=" }  ",c&&(i+=" if ("+d+") { ",h+="}"))}return c&&(i+="   "+h+" if ("+l+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m=e.opts.$data&&n&&n.$data;m&&(i+=" var schema"+r+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; ");var h="i"+r,d="schema"+r;m||(i+=" var "+d+" = validate.schema"+s+";"),i+="var "+l+";",m&&(i+=" if (schema"+r+" === undefined) "+l+" = true; else if (!Array.isArray(schema"+r+")) "+l+" = false; else {"),i+=l+" = false;for (var "+h+"=0; "+h+"<"+d+".length; "+h+"++) if (equal("+p+", "+d+"["+h+"])) { "+l+" = true; break; }",m&&(i+="  }  "),i+=" if (!"+l+") {   ";var f=f||[];f.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'enum' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { allowedValues: schema"+r+" } ",!1!==e.opts.messages&&(i+=" , message: 'should be equal to one of the allowed values' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var g=i;return i=f.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+g+"]); ":i+=" validate.errors = ["+g+"]; return false; ":i+=" var err = "+g+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" }",c&&(i+=" else { "),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||"");if(!1===e.opts.format)return c&&(i+=" if (true) { "),i;var l,m=e.opts.$data&&n&&n.$data;m?(i+=" var schema"+r+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; ",l="schema"+r):l=n;var h=e.opts.unknownFormats,d=Array.isArray(h);if(m){i+=" var "+(f="format"+r)+" = formats["+l+"]; var "+(g="isObject"+r)+" = typeof "+f+" == 'object' && !("+f+" instanceof RegExp) && "+f+".validate; var "+(v="formatType"+r)+" = "+g+" && "+f+".type || 'string'; if ("+g+") { ",e.async&&(i+=" var async"+r+" = "+f+".async; "),i+=" "+f+" = "+f+".validate; } if (  ",m&&(i+=" ("+l+" !== undefined && typeof "+l+" != 'string') || "),i+=" (","ignore"!=h&&(i+=" ("+l+" && !"+f+" ",d&&(i+=" && self._opts.unknownFormats.indexOf("+l+") == -1 "),i+=") || "),i+=" ("+f+" && "+v+" == '"+a+"' && !(typeof "+f+" == 'function' ? ",e.async?i+=" (async"+r+" ? await "+f+"("+p+") : "+f+"("+p+")) ":i+=" "+f+"("+p+") ",i+=" : "+f+".test("+p+"))))) {"}else{var f;if(!(f=e.formats[n])){if("ignore"==h)return e.logger.warn('unknown format "'+n+'" ignored in schema at path "'+e.errSchemaPath+'"'),c&&(i+=" if (true) { "),i;if(d&&h.indexOf(n)>=0)return c&&(i+=" if (true) { "),i;throw new Error('unknown format "'+n+'" is used in schema at path "'+e.errSchemaPath+'"')}var g,v=(g="object"==typeof f&&!(f instanceof RegExp)&&f.validate)&&f.type||"string";if(g){var y=!0===f.async;f=f.validate}if(v!=a)return c&&(i+=" if (true) { "),i;if(y){if(!e.async)throw new Error("async format in sync schema");i+=" if (!(await "+(b="formats"+e.util.getProperty(n)+".validate")+"("+p+"))) { "}else{i+=" if (! ";var b="formats"+e.util.getProperty(n);g&&(b+=".validate"),i+="function"==typeof f?" "+b+"("+p+") ":" "+b+".test("+p+") ",i+=") { "}}var k=k||[];k.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'format' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { format:  ",i+=m?""+l:""+e.util.toQuotedString(n),i+="  } ",!1!==e.opts.messages&&(i+=" , message: 'should match format \"",i+=m?"' + "+l+" + '":""+e.util.escapeQuotes(n),i+="\"' "),e.opts.verbose&&(i+=" , schema:  ",i+=m?"validate.schema"+s:""+e.util.toQuotedString(n),i+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var w=i;return i=k.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+w+"]); ":i+=" validate.errors = ["+w+"]; return false; ":i+=" var err = "+w+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } ",c&&(i+=" else { "),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m="errs__"+r,h=e.util.copy(e);h.level++;var d="valid"+h.level,f=e.schema.then,g=e.schema.else,v=void 0!==f&&e.util.schemaHasRules(f,e.RULES.all),y=void 0!==g&&e.util.schemaHasRules(g,e.RULES.all),b=h.baseId;if(v||y){var k;h.createErrors=!1,h.schema=n,h.schemaPath=s,h.errSchemaPath=u,i+=" var "+m+" = errors; var "+l+" = true;  ";var w=e.compositeRule;e.compositeRule=h.compositeRule=!0,i+="  "+e.validate(h)+" ",h.baseId=b,h.createErrors=!0,i+="  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; }  ",e.compositeRule=h.compositeRule=w,v?(i+=" if ("+d+") {  ",h.schema=e.schema.then,h.schemaPath=e.schemaPath+".then",h.errSchemaPath=e.errSchemaPath+"/then",i+="  "+e.validate(h)+" ",h.baseId=b,i+=" "+l+" = "+d+"; ",v&&y?i+=" var "+(k="ifClause"+r)+" = 'then'; ":k="'then'",i+=" } ",y&&(i+=" else { ")):i+=" if (!"+d+") { ",y&&(h.schema=e.schema.else,h.schemaPath=e.schemaPath+".else",h.errSchemaPath=e.errSchemaPath+"/else",i+="  "+e.validate(h)+" ",h.baseId=b,i+=" "+l+" = "+d+"; ",v&&y?i+=" var "+(k="ifClause"+r)+" = 'else'; ":k="'else'",i+=" } "),i+=" if (!"+l+") {   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'if' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { failingKeyword: "+k+" } ",!1!==e.opts.messages&&(i+=" , message: 'should match \"' + "+k+" + '\" schema' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),i+=" }   ",c&&(i+=" else { "),i=e.util.cleanUpCode(i)}else c&&(i+=" if (true) { ");return i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m="errs__"+r,h=e.util.copy(e),d="";h.level++;var f="valid"+h.level,g="i"+r,v=h.dataLevel=e.dataLevel+1,y="data"+v,b=e.baseId;if(i+="var "+m+" = errors;var "+l+";",Array.isArray(n)){var k=e.schema.additionalItems;if(!1===k){i+=" "+l+" = "+p+".length <= "+n.length+"; ";var w=u;u=e.errSchemaPath+"/additionalItems",i+="  if (!"+l+") {   ";var j=j||[];j.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'additionalItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { limit: "+n.length+" } ",!1!==e.opts.messages&&(i+=" , message: 'should NOT have more than "+n.length+" items' "),e.opts.verbose&&(i+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var x=i;i=j.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+x+"]); ":i+=" validate.errors = ["+x+"]; return false; ":i+=" var err = "+x+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } ",u=w,c&&(d+="}",i+=" else { ")}var E=n;if(E)for(var S,_=-1,R=E.length-1;_<R;)if(S=E[_+=1],e.util.schemaHasRules(S,e.RULES.all)){i+=" "+f+" = true; if ("+p+".length > "+_+") { ";var A=p+"["+_+"]";h.schema=S,h.schemaPath=s+"["+_+"]",h.errSchemaPath=u+"/"+_,h.errorPath=e.util.getPathExpr(e.errorPath,_,e.opts.jsonPointers,!0),h.dataPathArr[v]=_;var C=e.validate(h);h.baseId=b,e.util.varOccurences(C,y)<2?i+=" "+e.util.varReplace(C,y,A)+" ":i+=" var "+y+" = "+A+"; "+C+" ",i+=" }  ",c&&(i+=" if ("+f+") { ",d+="}")}if("object"==typeof k&&e.util.schemaHasRules(k,e.RULES.all)){h.schema=k,h.schemaPath=e.schemaPath+".additionalItems",h.errSchemaPath=e.errSchemaPath+"/additionalItems",i+=" "+f+" = true; if ("+p+".length > "+n.length+") {  for (var "+g+" = "+n.length+"; "+g+" < "+p+".length; "+g+"++) { ",h.errorPath=e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers,!0);A=p+"["+g+"]";h.dataPathArr[v]=g;C=e.validate(h);h.baseId=b,e.util.varOccurences(C,y)<2?i+=" "+e.util.varReplace(C,y,A)+" ":i+=" var "+y+" = "+A+"; "+C+" ",c&&(i+=" if (!"+f+") break; "),i+=" } }  ",c&&(i+=" if ("+f+") { ",d+="}")}}else if(e.util.schemaHasRules(n,e.RULES.all)){h.schema=n,h.schemaPath=s,h.errSchemaPath=u,i+="  for (var "+g+" = 0; "+g+" < "+p+".length; "+g+"++) { ",h.errorPath=e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers,!0);A=p+"["+g+"]";h.dataPathArr[v]=g;C=e.validate(h);h.baseId=b,e.util.varOccurences(C,y)<2?i+=" "+e.util.varReplace(C,y,A)+" ":i+=" var "+y+" = "+A+"; "+C+" ",c&&(i+=" if (!"+f+") break; "),i+=" }"}return c&&(i+=" "+d+" if ("+m+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s,r+="var division"+o+";if (",m&&(r+=" "+i+" !== undefined && ( typeof "+i+" != 'number' || "),r+=" (division"+o+" = "+l+" / "+i+", ",e.opts.multipleOfPrecision?r+=" Math.abs(Math.round(division"+o+") - division"+o+") > 1e-"+e.opts.multipleOfPrecision+" ":r+=" division"+o+" !== parseInt(division"+o+") ",r+=" ) ",m&&(r+="  )  "),r+=" ) {   ";var h=h||[];h.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'multipleOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { multipleOf: "+i+" } ",!1!==e.opts.messages&&(r+=" , message: 'should be multiple of ",r+=m?"' + "+i:i+"'"),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var d=r;return r=h.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+d+"]); ":r+=" validate.errors = ["+d+"]; return false; ":r+=" var err = "+d+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+="} ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="errs__"+r,m=e.util.copy(e);m.level++;var h="valid"+m.level;if(e.util.schemaHasRules(n,e.RULES.all)){m.schema=n,m.schemaPath=s,m.errSchemaPath=u,i+=" var "+l+" = errors;  ";var d,f=e.compositeRule;e.compositeRule=m.compositeRule=!0,m.createErrors=!1,m.opts.allErrors&&(d=m.opts.allErrors,m.opts.allErrors=!1),i+=" "+e.validate(m)+" ",m.createErrors=!0,d&&(m.opts.allErrors=d),e.compositeRule=m.compositeRule=f,i+=" if ("+h+") {   ";var g=g||[];g.push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should NOT be valid' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var v=i;i=g.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+v+"]); ":i+=" validate.errors = ["+v+"]; return false; ":i+=" var err = "+v+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else {  errors = "+l+"; if (vErrors !== null) { if ("+l+") vErrors.length = "+l+"; else vErrors = null; } ",e.opts.allErrors&&(i+=" } ")}else i+="  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: {} ",!1!==e.opts.messages&&(i+=" , message: 'should NOT be valid' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",c&&(i+=" if (false) { ");return i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m="errs__"+r,h=e.util.copy(e),d="";h.level++;var f="valid"+h.level,g=h.baseId,v="prevValid"+r,y="passingSchemas"+r;i+="var "+m+" = errors , "+v+" = false , "+l+" = false , "+y+" = null; ";var b=e.compositeRule;e.compositeRule=h.compositeRule=!0;var k=n;if(k)for(var w,j=-1,x=k.length-1;j<x;)w=k[j+=1],e.util.schemaHasRules(w,e.RULES.all)?(h.schema=w,h.schemaPath=s+"["+j+"]",h.errSchemaPath=u+"/"+j,i+="  "+e.validate(h)+" ",h.baseId=g):i+=" var "+f+" = true; ",j&&(i+=" if ("+f+" && "+v+") { "+l+" = false; "+y+" = ["+y+", "+j+"]; } else { ",d+="}"),i+=" if ("+f+") { "+l+" = "+v+" = true; "+y+" = "+j+"; }";return e.compositeRule=h.compositeRule=b,i+=d+"if (!"+l+") {   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'oneOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { passingSchemas: "+y+" } ",!1!==e.opts.messages&&(i+=" , message: 'should match exactly one schema in oneOf' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),i+="} else {  errors = "+m+"; if (vErrors !== null) { if ("+m+") vErrors.length = "+m+"; else vErrors = null; }",e.opts.allErrors&&(i+=" } "),i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m=e.opts.$data&&s&&s.$data;m?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s,r+="if ( ",m&&(r+=" ("+i+" !== undefined && typeof "+i+" != 'string') || "),r+=" !"+(m?"(new RegExp("+i+"))":e.usePattern(s))+".test("+l+") ) {   ";var h=h||[];h.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'pattern' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { pattern:  ",r+=m?""+i:""+e.util.toQuotedString(s),r+="  } ",!1!==e.opts.messages&&(r+=" , message: 'should match pattern \"",r+=m?"' + "+i+" + '":""+e.util.escapeQuotes(s),r+="\"' "),e.opts.verbose&&(r+=" , schema:  ",r+=m?"validate.schema"+u:""+e.util.toQuotedString(s),r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var d=r;return r=h.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+d+"]); ":r+=" validate.errors = ["+d+"]; return false; ":r+=" var err = "+d+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+="} ",p&&(r+=" else { "),r}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="errs__"+r,m=e.util.copy(e),h="";m.level++;var d="valid"+m.level,f="key"+r,g="idx"+r,v=m.dataLevel=e.dataLevel+1,y="data"+v,b="dataProperties"+r,k=Object.keys(n||{}),w=e.schema.patternProperties||{},j=Object.keys(w),x=e.schema.additionalProperties,E=k.length||j.length,S=!1===x,_="object"==typeof x&&Object.keys(x).length,R=e.opts.removeAdditional,A=S||_||R,C=e.opts.ownProperties,q=e.baseId,O=e.schema.required;if(O&&(!e.opts.$data||!O.$data)&&O.length<e.opts.loopRequired)var P=e.util.toHash(O);if(i+="var "+l+" = errors;var "+d+" = true;",C&&(i+=" var "+b+" = undefined;"),A){if(i+=C?" "+b+" = "+b+" || Object.keys("+p+"); for (var "+g+"=0; "+g+"<"+b+".length; "+g+"++) { var "+f+" = "+b+"["+g+"]; ":" for (var "+f+" in "+p+") { ",E){if(i+=" var isAdditional"+r+" = !(false ",k.length)if(k.length>8)i+=" || validate.schema"+s+".hasOwnProperty("+f+") ";else{var F=k;if(F)for(var z=-1,T=F.length-1;z<T;)Q=F[z+=1],i+=" || "+f+" == "+e.util.toQuotedString(Q)+" "}if(j.length){var I=j;if(I)for(var D=-1,B=I.length-1;D<B;)re=I[D+=1],i+=" || "+e.usePattern(re)+".test("+f+") "}i+=" ); if (isAdditional"+r+") { "}if("all"==R)i+=" delete "+p+"["+f+"]; ";else{var L=e.errorPath,U="' + "+f+" + '";if(e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers)),S)if(R)i+=" delete "+p+"["+f+"]; ";else{i+=" "+d+" = false; ";var N=u;u=e.errSchemaPath+"/additionalProperties",(te=te||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'additionalProperties' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { additionalProperty: '"+U+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is an invalid additional property":i+="should NOT have additional properties",i+="' "),e.opts.verbose&&(i+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var H=i;i=te.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+H+"]); ":i+=" validate.errors = ["+H+"]; return false; ":i+=" var err = "+H+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",u=N,c&&(i+=" break; ")}else if(_)if("failing"==R){i+=" var "+l+" = errors;  ";var M=e.compositeRule;e.compositeRule=m.compositeRule=!0,m.schema=x,m.schemaPath=e.schemaPath+".additionalProperties",m.errSchemaPath=e.errSchemaPath+"/additionalProperties",m.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);var K=p+"["+f+"]";m.dataPathArr[v]=f;var $=e.validate(m);m.baseId=q,e.util.varOccurences($,y)<2?i+=" "+e.util.varReplace($,y,K)+" ":i+=" var "+y+" = "+K+"; "+$+" ",i+=" if (!"+d+") { errors = "+l+"; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete "+p+"["+f+"]; }  ",e.compositeRule=m.compositeRule=M}else{m.schema=x,m.schemaPath=e.schemaPath+".additionalProperties",m.errSchemaPath=e.errSchemaPath+"/additionalProperties",m.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);K=p+"["+f+"]";m.dataPathArr[v]=f;$=e.validate(m);m.baseId=q,e.util.varOccurences($,y)<2?i+=" "+e.util.varReplace($,y,K)+" ":i+=" var "+y+" = "+K+"; "+$+" ",c&&(i+=" if (!"+d+") break; ")}e.errorPath=L}E&&(i+=" } "),i+=" }  ",c&&(i+=" if ("+d+") { ",h+="}")}var G=e.opts.useDefaults&&!e.compositeRule;if(k.length){var V=k;if(V)for(var Q,W=-1,Y=V.length-1;W<Y;){var Z=n[Q=V[W+=1]];if(e.util.schemaHasRules(Z,e.RULES.all)){var J=e.util.getProperty(Q),X=(K=p+J,G&&void 0!==Z.default);m.schema=Z,m.schemaPath=s+J,m.errSchemaPath=u+"/"+e.util.escapeFragment(Q),m.errorPath=e.util.getPath(e.errorPath,Q,e.opts.jsonPointers),m.dataPathArr[v]=e.util.toQuotedString(Q);$=e.validate(m);if(m.baseId=q,e.util.varOccurences($,y)<2){$=e.util.varReplace($,y,K);var ee=K}else{ee=y;i+=" var "+y+" = "+K+"; "}if(X)i+=" "+$+" ";else{if(P&&P[Q]){i+=" if ( "+ee+" === undefined ",C&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(Q)+"') "),i+=") { "+d+" = false; ";L=e.errorPath,N=u;var te,ae=e.util.escapeQuotes(Q);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(L,Q,e.opts.jsonPointers)),u=e.errSchemaPath+"/required",(te=te||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+ae+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+ae+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";H=i;i=te.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+H+"]); ":i+=" validate.errors = ["+H+"]; return false; ":i+=" var err = "+H+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",u=N,e.errorPath=L,i+=" } else { "}else c?(i+=" if ( "+ee+" === undefined ",C&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(Q)+"') "),i+=") { "+d+" = true; } else { "):(i+=" if ("+ee+" !== undefined ",C&&(i+=" &&   Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(Q)+"') "),i+=" ) { ");i+=" "+$+" } "}}c&&(i+=" if ("+d+") { ",h+="}")}}if(j.length){var ie=j;if(ie)for(var re,oe=-1,ne=ie.length-1;oe<ne;){Z=w[re=ie[oe+=1]];if(e.util.schemaHasRules(Z,e.RULES.all)){m.schema=Z,m.schemaPath=e.schemaPath+".patternProperties"+e.util.getProperty(re),m.errSchemaPath=e.errSchemaPath+"/patternProperties/"+e.util.escapeFragment(re),i+=C?" "+b+" = "+b+" || Object.keys("+p+"); for (var "+g+"=0; "+g+"<"+b+".length; "+g+"++) { var "+f+" = "+b+"["+g+"]; ":" for (var "+f+" in "+p+") { ",i+=" if ("+e.usePattern(re)+".test("+f+")) { ",m.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);K=p+"["+f+"]";m.dataPathArr[v]=f;$=e.validate(m);m.baseId=q,e.util.varOccurences($,y)<2?i+=" "+e.util.varReplace($,y,K)+" ":i+=" var "+y+" = "+K+"; "+$+" ",c&&(i+=" if (!"+d+") break; "),i+=" } ",c&&(i+=" else "+d+" = true; "),i+=" }  ",c&&(i+=" if ("+d+") { ",h+="}")}}}return c&&(i+=" "+h+" if ("+l+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="errs__"+r,m=e.util.copy(e);m.level++;var h="valid"+m.level;if(i+="var "+l+" = errors;",e.util.schemaHasRules(n,e.RULES.all)){m.schema=n,m.schemaPath=s,m.errSchemaPath=u;var d="key"+r,f="idx"+r,g="i"+r,v="' + "+d+" + '",y="data"+(m.dataLevel=e.dataLevel+1),b="dataProperties"+r,k=e.opts.ownProperties,w=e.baseId;k&&(i+=" var "+b+" = undefined; "),i+=k?" "+b+" = "+b+" || Object.keys("+p+"); for (var "+f+"=0; "+f+"<"+b+".length; "+f+"++) { var "+d+" = "+b+"["+f+"]; ":" for (var "+d+" in "+p+") { ",i+=" var startErrs"+r+" = errors; ";var j=d,x=e.compositeRule;e.compositeRule=m.compositeRule=!0;var E=e.validate(m);m.baseId=w,e.util.varOccurences(E,y)<2?i+=" "+e.util.varReplace(E,y,j)+" ":i+=" var "+y+" = "+j+"; "+E+" ",e.compositeRule=m.compositeRule=x,i+=" if (!"+h+") { for (var "+g+"=startErrs"+r+"; "+g+"<errors; "+g+"++) { vErrors["+g+"].propertyName = "+d+"; }   var err =   ",!1!==e.createErrors?(i+=" { keyword: 'propertyNames' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { propertyName: '"+v+"' } ",!1!==e.opts.messages&&(i+=" , message: 'property name \\'"+v+"\\' is invalid' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?i+=" throw new ValidationError(vErrors); ":i+=" validate.errors = vErrors; return false; "),c&&(i+=" break; "),i+=" } }"}return c&&(i+="  if ("+l+" == errors) {"),i=e.util.cleanUpCode(i)}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i=" ",r=e.level,o=e.dataLevel,n=e.schema[t],s=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,p="data"+(o||""),l="valid"+r,m=e.opts.$data&&n&&n.$data;m&&(i+=" var schema"+r+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; ");var h="schema"+r;if(!m)if(n.length<e.opts.loopRequired&&e.schema.properties&&Object.keys(e.schema.properties).length){var d=[],f=n;if(f)for(var g,v=-1,y=f.length-1;v<y;){g=f[v+=1];var b=e.schema.properties[g];b&&e.util.schemaHasRules(b,e.RULES.all)||(d[d.length]=g)}}else d=n;if(m||d.length){var k=e.errorPath,w=m||d.length>=e.opts.loopRequired,j=e.opts.ownProperties;if(c)if(i+=" var missing"+r+"; ",w){m||(i+=" var "+h+" = validate.schema"+s+"; ");var x="' + "+(C="schema"+r+"["+(_="i"+r)+"]")+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(k,C,e.opts.jsonPointers)),i+=" var "+l+" = true; ",m&&(i+=" if (schema"+r+" === undefined) "+l+" = true; else if (!Array.isArray(schema"+r+")) "+l+" = false; else {"),i+=" for (var "+_+" = 0; "+_+" < "+h+".length; "+_+"++) { "+l+" = "+p+"["+h+"["+_+"]] !== undefined ",j&&(i+=" &&   Object.prototype.hasOwnProperty.call("+p+", "+h+"["+_+"]) "),i+="; if (!"+l+") break; } ",m&&(i+="  }  "),i+="  if (!"+l+") {   ",(A=A||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+x+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+x+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";var E=i;i=A.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+E+"]); ":i+=" validate.errors = ["+E+"]; return false; ":i+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else { "}else{i+=" if ( ";var S=d;if(S)for(var _=-1,R=S.length-1;_<R;){O=S[_+=1],_&&(i+=" || "),i+=" ( ( "+(T=p+(z=e.util.getProperty(O)))+" === undefined ",j&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(O)+"') "),i+=") && (missing"+r+" = "+e.util.toQuotedString(e.opts.jsonPointers?O:z)+") ) "}i+=") {  ";var A;x="' + "+(C="missing"+r)+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(k,C,!0):k+" + "+C),(A=A||[]).push(i),i="",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+x+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+x+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ";E=i;i=A.pop(),!e.compositeRule&&c?e.async?i+=" throw new ValidationError(["+E+"]); ":i+=" validate.errors = ["+E+"]; return false; ":i+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else { "}else if(w){m||(i+=" var "+h+" = validate.schema"+s+"; ");var C;x="' + "+(C="schema"+r+"["+(_="i"+r)+"]")+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(k,C,e.opts.jsonPointers)),m&&(i+=" if ("+h+" && !Array.isArray("+h+")) {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+x+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+x+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if ("+h+" !== undefined) { "),i+=" for (var "+_+" = 0; "+_+" < "+h+".length; "+_+"++) { if ("+p+"["+h+"["+_+"]] === undefined ",j&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", "+h+"["+_+"]) "),i+=") {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+x+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+x+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ",m&&(i+="  }  ")}else{var q=d;if(q)for(var O,P=-1,F=q.length-1;P<F;){O=q[P+=1];var z=e.util.getProperty(O),T=(x=e.util.escapeQuotes(O),p+z);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(k,O,e.opts.jsonPointers)),i+=" if ( "+T+" === undefined ",j&&(i+=" || ! Object.prototype.hasOwnProperty.call("+p+", '"+e.util.escapeQuotes(O)+"') "),i+=") {  var err =   ",!1!==e.createErrors?(i+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { missingProperty: '"+x+"' } ",!1!==e.opts.messages&&(i+=" , message: '",e.opts._errorDataPathProperty?i+="is a required property":i+="should have required property \\'"+x+"\\'",i+="' "),e.opts.verbose&&(i+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),i+=" } "):i+=" {} ",i+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}e.errorPath=k}else c&&(i+=" if (true) {");return i}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r=" ",o=e.level,n=e.dataLevel,s=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,l="data"+(n||""),m="valid"+o,h=e.opts.$data&&s&&s.$data;if(h?(r+=" var schema"+o+" = "+e.util.getData(s.$data,n,e.dataPathArr)+"; ",i="schema"+o):i=s,(s||h)&&!1!==e.opts.uniqueItems){h&&(r+=" var "+m+"; if ("+i+" === false || "+i+" === undefined) "+m+" = true; else if (typeof "+i+" != 'boolean') "+m+" = false; else { "),r+=" var i = "+l+".length , "+m+" = true , j; if (i > 1) { ";var d=e.schema.items&&e.schema.items.type,f=Array.isArray(d);if(!d||"object"==d||"array"==d||f&&(d.indexOf("object")>=0||d.indexOf("array")>=0))r+=" outer: for (;i--;) { for (j = i; j--;) { if (equal("+l+"[i], "+l+"[j])) { "+m+" = false; break outer; } } } ";else{r+=" var itemIndices = {}, item; for (;i--;) { var item = "+l+"[i]; ";var g="checkDataType"+(f?"s":"");r+=" if ("+e.util[g](d,"item",!0)+") continue; ",f&&(r+=" if (typeof item == 'string') item = '\"' + item; "),r+=" if (typeof itemIndices[item] == 'number') { "+m+" = false; j = itemIndices[item]; break; } itemIndices[item] = i; } "}r+=" } ",h&&(r+="  }  "),r+=" if (!"+m+") {   ";var v=v||[];v.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'uniqueItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { i: i, j: j } ",!1!==e.opts.messages&&(r+=" , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "),e.opts.verbose&&(r+=" , schema:  ",r+=h?"validate.schema"+u:""+s,r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+l+" "),r+=" } "):r+=" {} ";var y=r;r=v.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+y+"]); ":r+=" validate.errors = ["+y+"]; return false; ":r+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } ",p&&(r+=" else { ")}else p&&(r+=" if (true) { ");return r}},function(e,t,a){"use strict";var i=["multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","additionalItems","maxItems","minItems","uniqueItems","maxProperties","minProperties","required","additionalProperties","enum","format","const"];e.exports=function(e,t){for(var a=0;a<t.length;a++){e=JSON.parse(JSON.stringify(e));var r,o=t[a].split("/"),n=e;for(r=1;r<o.length;r++)n=n[o[r]];for(r=0;r<i.length;r++){var s=i[r],u=n[s];u&&(n[s]={anyOf:[u,{$ref:"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#"}]})}}return e}},function(e,t,a){"use strict";var i=a(47).MissingRef;e.exports=function e(t,a,r){var o=this;if("function"!=typeof this._opts.loadSchema)throw new Error("options.loadSchema should be a function");"function"==typeof a&&(r=a,a=void 0);var n=s(t).then(function(){var e=o._addSchema(t,void 0,a);return e.validate||function e(t){try{return o._compile(t)}catch(e){if(e instanceof i)return function r(e){var r=e.missingSchema;if(c(r))throw new Error("Schema "+r+" is loaded but "+e.missingRef+" cannot be resolved");var n=o._loadingSchemas[r];n||(n=o._loadingSchemas[r]=o._opts.loadSchema(r)).then(u,u);return n.then(function(e){if(!c(r))return s(e).then(function(){c(r)||o.addSchema(e,r,void 0,a)})}).then(function(){return function e(t){try{return o._compile(t)}catch(e){if(e instanceof i)return r(e);throw e}function r(i){var r=i.missingSchema;if(c(r))throw new Error("Schema "+r+" is loaded but "+i.missingRef+" cannot be resolved");var n=o._loadingSchemas[r];return n||(n=o._loadingSchemas[r]=o._opts.loadSchema(r)).then(u,u),n.then(function(e){if(!c(r))return s(e).then(function(){c(r)||o.addSchema(e,r,void 0,a)})}).then(function(){return e(t)});function u(){delete o._loadingSchemas[r]}function c(e){return o._refs[e]||o._schemas[e]}}}(t)});function u(){delete o._loadingSchemas[r]}function c(e){return o._refs[e]||o._schemas[e]}}(e);throw e}function r(i){var r=i.missingSchema;if(c(r))throw new Error("Schema "+r+" is loaded but "+i.missingRef+" cannot be resolved");var n=o._loadingSchemas[r];return n||(n=o._loadingSchemas[r]=o._opts.loadSchema(r)).then(u,u),n.then(function(e){if(!c(r))return s(e).then(function(){c(r)||o.addSchema(e,r,void 0,a)})}).then(function(){return e(t)});function u(){delete o._loadingSchemas[r]}function c(e){return o._refs[e]||o._schemas[e]}}}(e)});r&&n.then(function(e){r(null,e)},r);return n;function s(t){var a=t.$schema;return a&&!o.getSchema(a)?e.call(o,{$ref:a},!0):Promise.resolve()}}},function(e,t,a){"use strict";var i=/^[a-z_$][a-z0-9_$-]*$/i,r=a(171);e.exports={add:function(e,t){var a=this.RULES;if(a.keywords[e])throw new Error("Keyword "+e+" is already defined");if(!i.test(e))throw new Error("Keyword "+e+" is not a valid identifier");if(t){if(t.macro&&void 0!==t.valid)throw new Error('"valid" option cannot be used with macro keywords');var o=t.type;if(Array.isArray(o)){var n,s=o.length;for(n=0;n<s;n++)l(o[n]);for(n=0;n<s;n++)p(e,o[n],t)}else o&&l(o),p(e,o,t);var u=!0===t.$data&&this._opts.$data;if(u&&!t.validate)throw new Error('$data support: "validate" function is not defined');var c=t.metaSchema;c&&(u&&(c={anyOf:[c,{$ref:"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#"}]}),t.validateSchema=this.compile(c,!0))}function p(e,t,i){for(var o,n=0;n<a.length;n++){var s=a[n];if(s.type==t){o=s;break}}o||(o={type:t,rules:[]},a.push(o));var u={keyword:e,definition:i,custom:!0,code:r,implements:i.implements};o.rules.push(u),a.custom[e]=u}function l(e){if(!a.types[e])throw new Error("Unknown type "+e)}return a.keywords[e]=a.all[e]=!0,this},get:function(e){var t=this.RULES.custom[e];return t?t.definition:this.RULES.keywords[e]||!1},remove:function(e){var t=this.RULES;delete t.keywords[e],delete t.all[e],delete t.custom[e];for(var a=0;a<t.length;a++)for(var i=t[a].rules,r=0;r<i.length;r++)if(i[r].keyword==e){i.splice(r,1);break}return this}}},function(e,t,a){"use strict";e.exports=function(e,t,a){var i,r,o=" ",n=e.level,s=e.dataLevel,u=e.schema[t],c=e.schemaPath+e.util.getProperty(t),p=e.errSchemaPath+"/"+t,l=!e.opts.allErrors,m="data"+(s||""),h="valid"+n,d="errs__"+n,f=e.opts.$data&&u&&u.$data;f?(o+=" var schema"+n+" = "+e.util.getData(u.$data,s,e.dataPathArr)+"; ",r="schema"+n):r=u;var g,v,y,b,k,w="definition"+n,j=this.definition,x="";if(f&&j.$data){k="keywordValidate"+n;var E=j.validateSchema;o+=" var "+w+" = RULES.custom['"+t+"'].definition; var "+k+" = "+w+".validate;"}else{if(!(b=e.useCustomRule(this,u,e.schema,e)))return;r="validate.schema"+c,k=b.code,g=j.compile,v=j.inline,y=j.macro}var S=k+".errors",_="i"+n,R="ruleErr"+n,A=j.async;if(A&&!e.async)throw new Error("async keyword in sync schema");if(v||y||(o+=S+" = null;"),o+="var "+d+" = errors;var "+h+";",f&&j.$data&&(x+="}",o+=" if ("+r+" === undefined) { "+h+" = true; } else { ",E&&(x+="}",o+=" "+h+" = "+w+".validateSchema("+r+"); if ("+h+") { ")),v)j.statements?o+=" "+b.validate+" ":o+=" "+h+" = "+b.validate+"; ";else if(y){var C=e.util.copy(e);x="";C.level++;var q="valid"+C.level;C.schema=b.validate,C.schemaPath="";var O=e.compositeRule;e.compositeRule=C.compositeRule=!0;var P=e.validate(C).replace(/validate\.schema/g,k);e.compositeRule=C.compositeRule=O,o+=" "+P}else{(I=I||[]).push(o),o="",o+="  "+k+".call( ",e.opts.passContext?o+="this":o+="self",g||!1===j.schema?o+=" , "+m+" ":o+=" , "+r+" , "+m+" , validate.schema"+e.schemaPath+" ",o+=" , (dataPath || '')",'""'!=e.errorPath&&(o+=" + "+e.errorPath);var F=s?"data"+(s-1||""):"parentData",z=s?e.dataPathArr[s]:"parentDataProperty",T=o+=" , "+F+" , "+z+" , rootData )  ";o=I.pop(),!1===j.errors?(o+=" "+h+" = ",A&&(o+="await "),o+=T+"; "):o+=A?" var "+(S="customErrors"+n)+" = null; try { "+h+" = await "+T+"; } catch (e) { "+h+" = false; if (e instanceof ValidationError) "+S+" = e.errors; else throw e; } ":" "+S+" = null; "+h+" = "+T+"; "}if(j.modifying&&(o+=" if ("+F+") "+m+" = "+F+"["+z+"];"),o+=""+x,j.valid)l&&(o+=" if (true) { ");else{var I;o+=" if ( ",void 0===j.valid?(o+=" !",o+=y?""+q:""+h):o+=" "+!j.valid+" ",o+=") { ",i=this.keyword,(I=I||[]).push(o),o="",(I=I||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '"+(i||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { keyword: '"+this.keyword+"' } ",!1!==e.opts.messages&&(o+=" , message: 'should pass \""+this.keyword+"\" keyword validation' "),e.opts.verbose&&(o+=" , schema: validate.schema"+c+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+m+" "),o+=" } "):o+=" {} ";var D=o;o=I.pop(),!e.compositeRule&&l?e.async?o+=" throw new ValidationError(["+D+"]); ":o+=" validate.errors = ["+D+"]; return false; ":o+=" var err = "+D+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";var B=o;o=I.pop(),v?j.errors?"full"!=j.errors&&(o+="  for (var "+_+"="+d+"; "+_+"<errors; "+_+"++) { var "+R+" = vErrors["+_+"]; if ("+R+".dataPath === undefined) "+R+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+R+".schemaPath === undefined) { "+R+'.schemaPath = "'+p+'"; } ',e.opts.verbose&&(o+=" "+R+".schema = "+r+"; "+R+".data = "+m+"; "),o+=" } "):!1===j.errors?o+=" "+B+" ":(o+=" if ("+d+" == errors) { "+B+" } else {  for (var "+_+"="+d+"; "+_+"<errors; "+_+"++) { var "+R+" = vErrors["+_+"]; if ("+R+".dataPath === undefined) "+R+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+R+".schemaPath === undefined) { "+R+'.schemaPath = "'+p+'"; } ',e.opts.verbose&&(o+=" "+R+".schema = "+r+"; "+R+".data = "+m+"; "),o+=" } } "):y?(o+="   var err =   ",!1!==e.createErrors?(o+=" { keyword: '"+(i||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { keyword: '"+this.keyword+"' } ",!1!==e.opts.messages&&(o+=" , message: 'should pass \""+this.keyword+"\" keyword validation' "),e.opts.verbose&&(o+=" , schema: validate.schema"+c+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+m+" "),o+=" } "):o+=" {} ",o+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&l&&(e.async?o+=" throw new ValidationError(vErrors); ":o+=" validate.errors = vErrors; return false; ")):!1===j.errors?o+=" "+B+" ":(o+=" if (Array.isArray("+S+")) { if (vErrors === null) vErrors = "+S+"; else vErrors = vErrors.concat("+S+"); errors = vErrors.length;  for (var "+_+"="+d+"; "+_+"<errors; "+_+"++) { var "+R+" = vErrors["+_+"]; if ("+R+".dataPath === undefined) "+R+".dataPath = (dataPath || '') + "+e.errorPath+";  "+R+'.schemaPath = "'+p+'";  ',e.opts.verbose&&(o+=" "+R+".schema = "+r+"; "+R+".data = "+m+"; "),o+=" } } else { "+B+" } "),o+=" } ",l&&(o+=" else { ")}return o}},function(e){e.exports={$schema:"http://json-schema.org/draft-07/schema#",$id:"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON Schema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1}},function(e){e.exports={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0}},function(e,t){function a(e){this.name="HARError",this.message="validation failed",this.errors=e,"function"==typeof Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error("validation failed").stack}a.prototype=Error.prototype,e.exports=a},function(e,t,a){"use strict";e.exports={afterRequest:a(176),beforeRequest:a(177),browser:a(178),cache:a(179),content:a(180),cookie:a(181),creator:a(182),entry:a(183),har:a(184),header:a(185),log:a(186),page:a(187),pageTimings:a(188),postData:a(189),query:a(190),request:a(191),response:a(192),timings:a(193)}},function(e){e.exports={$id:"afterRequest.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["lastAccess","eTag","hitCount"],properties:{expires:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},lastAccess:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},eTag:{type:"string"},hitCount:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"beforeRequest.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["lastAccess","eTag","hitCount"],properties:{expires:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},lastAccess:{type:"string",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?"},eTag:{type:"string"},hitCount:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"browser.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","version"],properties:{name:{type:"string"},version:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"cache.json#",$schema:"http://json-schema.org/draft-06/schema#",properties:{beforeRequest:{oneOf:[{type:"null"},{$ref:"beforeRequest.json#"}]},afterRequest:{oneOf:[{type:"null"},{$ref:"afterRequest.json#"}]},comment:{type:"string"}}}},function(e){e.exports={$id:"content.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["size","mimeType"],properties:{size:{type:"integer"},compression:{type:"integer"},mimeType:{type:"string"},text:{type:"string"},encoding:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"cookie.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","value"],properties:{name:{type:"string"},value:{type:"string"},path:{type:"string"},domain:{type:"string"},expires:{type:["string","null"],format:"date-time"},httpOnly:{type:"boolean"},secure:{type:"boolean"},comment:{type:"string"}}}},function(e){e.exports={$id:"creator.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","version"],properties:{name:{type:"string"},version:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"entry.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["startedDateTime","time","request","response","cache","timings"],properties:{pageref:{type:"string"},startedDateTime:{type:"string",format:"date-time",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"},time:{type:"number",min:0},request:{$ref:"request.json#"},response:{$ref:"response.json#"},cache:{$ref:"cache.json#"},timings:{$ref:"timings.json#"},serverIPAddress:{type:"string",oneOf:[{format:"ipv4"},{format:"ipv6"}]},connection:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"har.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["log"],properties:{log:{$ref:"log.json#"}}}},function(e){e.exports={$id:"header.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","value"],properties:{name:{type:"string"},value:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"log.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["version","creator","entries"],properties:{version:{type:"string"},creator:{$ref:"creator.json#"},browser:{$ref:"browser.json#"},pages:{type:"array",items:{$ref:"page.json#"}},entries:{type:"array",items:{$ref:"entry.json#"}},comment:{type:"string"}}}},function(e){e.exports={$id:"page.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["startedDateTime","id","title","pageTimings"],properties:{startedDateTime:{type:"string",format:"date-time",pattern:"^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"},id:{type:"string",unique:!0},title:{type:"string"},pageTimings:{$ref:"pageTimings.json#"},comment:{type:"string"}}}},function(e){e.exports={$id:"pageTimings.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",properties:{onContentLoad:{type:"number",min:-1},onLoad:{type:"number",min:-1},comment:{type:"string"}}}},function(e){e.exports={$id:"postData.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",optional:!0,required:["mimeType"],properties:{mimeType:{type:"string"},text:{type:"string"},params:{type:"array",required:["name"],properties:{name:{type:"string"},value:{type:"string"},fileName:{type:"string"},contentType:{type:"string"},comment:{type:"string"}}},comment:{type:"string"}}}},function(e){e.exports={$id:"query.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["name","value"],properties:{name:{type:"string"},value:{type:"string"},comment:{type:"string"}}}},function(e){e.exports={$id:"request.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["method","url","httpVersion","cookies","headers","queryString","headersSize","bodySize"],properties:{method:{type:"string"},url:{type:"string",format:"uri"},httpVersion:{type:"string"},cookies:{type:"array",items:{$ref:"cookie.json#"}},headers:{type:"array",items:{$ref:"header.json#"}},queryString:{type:"array",items:{$ref:"query.json#"}},postData:{$ref:"postData.json#"},headersSize:{type:"integer"},bodySize:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"response.json#",$schema:"http://json-schema.org/draft-06/schema#",type:"object",required:["status","statusText","httpVersion","cookies","headers","content","redirectURL","headersSize","bodySize"],properties:{status:{type:"integer"},statusText:{type:"string"},httpVersion:{type:"string"},cookies:{type:"array",items:{$ref:"cookie.json#"}},headers:{type:"array",items:{$ref:"header.json#"}},content:{$ref:"content.json#"},redirectURL:{type:"string"},headersSize:{type:"integer"},bodySize:{type:"integer"},comment:{type:"string"}}}},function(e){e.exports={$id:"timings.json#",$schema:"http://json-schema.org/draft-06/schema#",required:["send","wait","receive"],properties:{dns:{type:"number",min:-1},connect:{type:"number",min:-1},blocked:{type:"number",min:-1},send:{type:"number",min:-1},wait:{type:"number",min:-1},receive:{type:"number",min:-1},ssl:{type:"number",min:-1},comment:{type:"string"}}}},function(e){e.exports={$schema:"http://json-schema.org/draft-06/schema#",$id:"http://json-schema.org/draft-06/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},title:{type:"string"},description:{type:"string"},default:{},examples:{type:"array",items:{}},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:{}},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:{},enum:{type:"array",minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:{}}},function(e,t,a){"use strict";var i=a(44),r=a(48),o=a(37),n=o.md5,s=o.toBase64;function u(e){this.request=e,this.hasAuth=!1,this.sentAuth=!1,this.bearerToken=null,this.user=null,this.pass=null}u.prototype.basic=function(e,t,a){if(("string"!=typeof e||void 0!==t&&"string"!=typeof t)&&this.request.emit("error",new Error("auth() received invalid user or password")),this.user=e,this.pass=t,this.hasAuth=!0,a||void 0===a){var i="Basic "+s(e+":"+(t||""));return this.sentAuth=!0,i}},u.prototype.bearer=function(e,t){if(this.bearerToken=e,this.hasAuth=!0,t||void 0===t){"function"==typeof e&&(e=e());var a="Bearer "+(e||"");return this.sentAuth=!0,a}},u.prototype.digest=function(e,t,a){for(var i={},o=/([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi;;){var s=o.exec(a);if(!s)break;i[s[1]]=s[2]||s[3]}var u=/(^|,)\s*auth\s*($|,)/.test(i.qop)&&"auth",c=u&&"00000001",p=u&&r().replace(/-/g,""),l=function(e,t,a,i,r,o){var s=n(t+":"+a+":"+i);return e&&"md5-sess"===e.toLowerCase()?n(s+":"+r+":"+o):s}(i.algorithm,this.user,i.realm,this.pass,i.nonce,p),m=n(e+":"+t),h=n(u?l+":"+i.nonce+":"+c+":"+p+":"+u+":"+m:l+":"+i.nonce+":"+m),d={username:this.user,realm:i.realm,nonce:i.nonce,uri:t,qop:u,response:h,nc:c,cnonce:p,algorithm:i.algorithm,opaque:i.opaque};for(var f in a=[],d)d[f]&&("qop"===f||"nc"===f||"algorithm"===f?a.push(f+"="+d[f]):a.push(f+'="'+d[f]+'"'));return a="Digest "+a.join(", "),this.sentAuth=!0,a},u.prototype.onRequest=function(e,t,a,i){var r,o=this.request;void 0===i&&void 0===e?this.request.emit("error",new Error("no auth mechanism defined")):r=void 0!==i?this.bearer(i,a):this.basic(e,t,a),r&&o.setHeader("authorization",r)},u.prototype.onResponse=function(e){var t=this.request;if(!this.hasAuth||this.sentAuth)return null;var a=i(e.headers).get("www-authenticate"),r=a&&a.split(" ")[0].toLowerCase();switch(t.debug("reauth",r),r){case"basic":return this.basic(this.user,this.pass,!0);case"bearer":return this.bearer(this.bearerToken,!0);case"digest":return this.digest(t.method,t.path,a)}},t.Auth=u},function(e,t,a){var i=a(1);e.exports=function(){return i.randomBytes(16)}},function(e,t){for(var a=[],i=0;i<256;++i)a[i]=(i+256).toString(16).substr(1);e.exports=function(e,t){var i=t||0,r=a;return[r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],"-",r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]],r[e[i++]]].join("")}},function(e,t,a){"use strict";var i=a(8),r=a(72),o=a(44),n=a(48),s=a(199),u=a(1),c=a(23).Buffer;function p(e){this.request=e,this.params=null}p.prototype.buildParams=function(e,t,a,i,r,o){var u={};for(var c in e)u["oauth_"+c]=e[c];u.oauth_version||(u.oauth_version="1.0"),u.oauth_timestamp||(u.oauth_timestamp=Math.floor(Date.now()/1e3).toString()),u.oauth_nonce||(u.oauth_nonce=n().replace(/-/g,"")),u.oauth_signature_method||(u.oauth_signature_method="HMAC-SHA1");var p=u.oauth_consumer_secret||u.oauth_private_key;delete u.oauth_consumer_secret,delete u.oauth_private_key;var l=u.oauth_token_secret;delete u.oauth_token_secret;var m=u.oauth_realm;delete u.oauth_realm,delete u.oauth_transport_method;var h=t.protocol+"//"+t.host+t.pathname,d=o.parse([].concat(i,r,o.stringify(u)).join("&"));return u.oauth_signature=s.sign(u.oauth_signature_method,a,h,d,p,l),m&&(u.realm=m),u},p.prototype.buildBodyHash=function(e,t){["HMAC-SHA1","RSA-SHA1"].indexOf(e.signature_method||"HMAC-SHA1")<0&&this.request.emit("error",new Error("oauth: "+e.signature_method+" signature_method not supported with body_hash signing."));var a=u.createHash("sha1");a.update(t||"");var i=a.digest("hex");return c.from(i,"hex").toString("base64")},p.prototype.concatParams=function(e,t,a){a=a||"";var i=Object.keys(e).filter(function(e){return"realm"!==e&&"oauth_signature"!==e}).sort();return e.realm&&i.splice(0,0,"realm"),i.push("oauth_signature"),i.map(function(t){return t+"="+a+s.rfc3986(e[t])+a}).join(t)},p.prototype.onRequest=function(e){this.params=e;var t,a,n=this.request.uri||{},s=this.request.method||"",u=o(this.request.headers),c=this.request.body||"",p=this.request.qsLib||r,l=u.get("content-type")||"",m="application/x-www-form-urlencoded",h=e.transport_method||"header";l.slice(0,m.length)===m&&(l=m,t=c),n.query&&(a=n.query),"body"!==h||"POST"===s&&l===m||this.request.emit("error",new Error("oauth: transport_method of body requires POST and content-type "+m)),t||"boolean"!=typeof e.body_hash||(e.body_hash=this.buildBodyHash(e,this.request.body.toString()));var d=this.buildParams(e,n,s,a,t,p);switch(h){case"header":this.request.setHeader("Authorization","OAuth "+this.concatParams(d,",",'"'));break;case"query":var f=this.request.uri.href+=(a?"&":"?")+this.concatParams(d,"&");this.request.uri=i.parse(f),this.request.path=this.request.uri.path;break;case"body":this.request.body=(t?t+"&":"")+this.concatParams(d,"&");break;default:this.request.emit("error",new Error("oauth: transport_method invalid"))}},t.OAuth=p},function(e,t,a){var i=a(1);function r(e,t,a){return i.createHmac(a,e).update(t).digest("base64")}function o(e){return encodeURIComponent(e).replace(/!/g,"%21").replace(/\*/g,"%2A").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/'/g,"%27")}function n(e,t){return e>t?1:e<t?-1:0}function s(e,t,a){var i=function(e){var t,a,i=[];for(t in e)if(a=e[t],Array.isArray(a))for(var r=0;r<a.length;r++)i.push([t,a[r]]);else if("object"==typeof a)for(var o in a)i.push([t+"["+o+"]",a[o]]);else i.push([t,a]);return i}(a).map(function(e){return[o(e[0]),o(e[1]||"")]}).sort(function(e,t){return n(e[0],t[0])||n(e[1],t[1])}).map(function(e){return e.join("=")}).join("&");return[o(e?e.toUpperCase():"GET"),o(t),o(i)].join("&")}function u(e,t,a,i,n){var u=s(e,t,a);return r([i||"",n||""].map(o).join("&"),u,"sha1")}function c(e,t,a,i,n){var u=s(e,t,a);return r([i||"",n||""].map(o).join("&"),u,"sha256")}function p(e,t,a,r,o){return function(e,t){return i.createSign("RSA-SHA1").update(t).sign(e,"base64")}(r||"",s(e,t,a))}function l(e,t){return[e||"",t||""].map(o).join("&")}t.hmacsign=u,t.hmacsign256=c,t.rsasign=p,t.plaintext=l,t.sign=function(e,t,a,i,r,o){var n,s=1;switch(e){case"RSA-SHA1":n=p;break;case"HMAC-SHA1":n=u;break;case"HMAC-SHA256":n=c;break;case"PLAINTEXT":n=l,s=4;break;default:throw new Error("Signature method not supported: "+e)}return n.apply(null,[].slice.call(arguments,s))},t.rfc3986=o,t.generateBase=s},function(e,t,a){"use strict";var i=a(1);t.calculateMac=function(e,t){var a="hawk.1.header\n"+t.ts+"\n"+t.nonce+"\n"+(t.method||"").toUpperCase()+"\n"+t.resource+"\n"+t.host.toLowerCase()+"\n"+t.port+"\n"+(t.hash||"")+"\n";return t.ext&&(a+=t.ext.replace("\\","\\\\").replace("\n","\\n")),a+="\n",t.app&&(a=a+t.app+"\n"+(t.dlg||"")+"\n"),i.createHmac(e.algorithm,e.key).update(a).digest("base64")},t.header=function(e,a,r){var o=r.timestamp||Math.floor((Date.now()+(r.localtimeOffsetMsec||0))/1e3),n=r.credentials;if(!(n&&n.id&&n.key&&n.algorithm))return"";if(-1===["sha1","sha256"].indexOf(n.algorithm))return"";var s,u,c,p,l,m,h={ts:o,nonce:r.nonce||(s=6,u=6*(s+1),i.randomBytes(Math.ceil(u/8)).toString("base64").replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"").slice(0,s)),method:a,resource:e.pathname+(e.search||""),host:e.hostname,port:e.port||("http:"===e.protocol?80:443),hash:r.hash,ext:r.ext,app:r.app,dlg:r.dlg};h.hash||!r.payload&&""!==r.payload||(h.hash=(c=r.payload,p=n.algorithm,l=r.contentType,(m=i.createHash(p)).update("hawk.1.payload\n"),m.update((l?l.split(";")[0].trim().toLowerCase():"")+"\n"),m.update(c||""),m.update("\n"),m.digest("base64")));var d=t.calculateMac(n,h),f=null!==h.ext&&void 0!==h.ext&&""!==h.ext,g='Hawk id="'+n.id+'", ts="'+h.ts+'", nonce="'+h.nonce+(h.hash?'", hash="'+h.hash:"")+(f?'", ext="'+h.ext.replace(/\\/g,"\\\\").replace(/"/g,'\\"'):"")+'", mac="'+d+'"';return h.app&&(g=g+', app="'+h.app+(h.dlg?'", dlg="'+h.dlg:"")+'"'),g}},function(e,t,a){"use strict";var i=a(48),r=a(64),o=a(71),n=a(23).Buffer;function s(e){this.request=e,this.boundary=i(),this.chunked=!1,this.body=null}s.prototype.isChunked=function(e){var t=this,a=!1,i=e.data||e;return i.forEach||t.request.emit("error",new Error("Argument error, options.multipart.")),void 0!==e.chunked&&(a=e.chunked),"chunked"===t.request.getHeader("transfer-encoding")&&(a=!0),a||i.forEach(function(e){void 0===e.body&&t.request.emit("error",new Error("Body attribute missing in multipart.")),o(e.body)&&(a=!0)}),a},s.prototype.setHeaders=function(e){e&&!this.request.hasHeader("transfer-encoding")&&this.request.setHeader("transfer-encoding","chunked");var t=this.request.getHeader("content-type");t&&-1!==t.indexOf("multipart")?-1!==t.indexOf("boundary")?this.boundary=t.replace(/.*boundary=([^\s;]+).*/,"$1"):this.request.setHeader("content-type",t+"; boundary="+this.boundary):this.request.setHeader("content-type","multipart/related; boundary="+this.boundary)},s.prototype.build=function(e,t){var a=this,i=t?new r:[];function o(e){return"number"==typeof e&&(e=e.toString()),t?i.append(e):i.push(n.from(e))}return a.request.preambleCRLF&&o("\r\n"),e.forEach(function(e){var t="--"+a.boundary+"\r\n";Object.keys(e).forEach(function(a){"body"!==a&&(t+=a+": "+e[a]+"\r\n")}),o(t+="\r\n"),o(e.body),o("\r\n")}),o("--"+a.boundary+"--"),a.request.postambleCRLF&&o("\r\n"),i},s.prototype.onRequest=function(e){var t=this.isChunked(e),a=e.data||e;this.setHeaders(t),this.chunked=t,this.body=this.build(a,t)},t.Multipart=s},function(e,t,a){"use strict";var i=a(8),r=/^https?:/;function o(e){this.request=e,this.followRedirect=!0,this.followRedirects=!0,this.followAllRedirects=!1,this.followOriginalHttpMethod=!1,this.allowRedirect=function(){return!0},this.maxRedirects=10,this.redirects=[],this.redirectsFollowed=0,this.removeRefererHeader=!1}o.prototype.onRequest=function(e){void 0!==e.maxRedirects&&(this.maxRedirects=e.maxRedirects),"function"==typeof e.followRedirect&&(this.allowRedirect=e.followRedirect),void 0!==e.followRedirect&&(this.followRedirects=!!e.followRedirect),void 0!==e.followAllRedirects&&(this.followAllRedirects=e.followAllRedirects),(this.followRedirects||this.followAllRedirects)&&(this.redirects=this.redirects||[]),void 0!==e.removeRefererHeader&&(this.removeRefererHeader=e.removeRefererHeader),void 0!==e.followOriginalHttpMethod&&(this.followOriginalHttpMethod=e.followOriginalHttpMethod)},o.prototype.redirectTo=function(e){var t=this.request,a=null;if(e.statusCode>=300&&e.statusCode<400&&e.caseless.has("location")){var i=e.caseless.get("location");if(t.debug("redirect",i),this.followAllRedirects)a=i;else if(this.followRedirects)switch(t.method){case"PATCH":case"PUT":case"POST":case"DELETE":break;default:a=i}}else if(401===e.statusCode){var r=t._auth.onResponse(e);r&&(t.setHeader("authorization",r),a=t.uri)}return a},o.prototype.onResponse=function(e){var t=this.request,a=this.redirectTo(e);if(!a||!this.allowRedirect.call(t,e))return!1;if(t.debug("redirect to",a),e.resume&&e.resume(),this.redirectsFollowed>=this.maxRedirects)return t.emit("error",new Error("Exceeded maxRedirects. Probably stuck in a redirect loop "+t.uri.href)),!1;this.redirectsFollowed+=1,r.test(a)||(a=i.resolve(t.uri.href,a));var o=t.uri;return t.uri=i.parse(a),t.uri.protocol!==o.protocol&&delete t.agent,this.redirects.push({statusCode:e.statusCode,redirectUri:a}),this.followAllRedirects&&"HEAD"!==t.method&&401!==e.statusCode&&307!==e.statusCode&&(t.method=this.followOriginalHttpMethod?t.method:"GET"),delete t.src,delete t.req,delete t._started,401!==e.statusCode&&307!==e.statusCode&&(delete t.body,delete t._form,t.headers&&(t.removeHeader("host"),t.removeHeader("content-type"),t.removeHeader("content-length"),t.uri.hostname!==t.originalHost.split(":")[0]&&t.removeHeader("authorization"))),this.removeRefererHeader||t.setHeader("referer",o.href),t.emit("redirect"),t.init(),!0},t.Redirect=o},function(e,t,a){"use strict";var i=a(8),r=a(204),o=["accept","accept-charset","accept-encoding","accept-language","accept-ranges","cache-control","content-encoding","content-language","content-location","content-md5","content-range","content-type","connection","date","expect","max-forwards","pragma","referer","te","user-agent","via"],n=["proxy-authorization"];function s(e){this.request=e,this.proxyHeaderWhiteList=o,this.proxyHeaderExclusiveList=[],void 0!==e.tunnel&&(this.tunnelOverride=e.tunnel)}s.prototype.isEnabled=function(){var e=this.request;return void 0!==this.tunnelOverride?this.tunnelOverride:"https:"===e.uri.protocol},s.prototype.setup=function(e){var t=this.request;if(e=e||{},"string"==typeof t.proxy&&(t.proxy=i.parse(t.proxy)),!t.proxy||!t.tunnel)return!1;e.proxyHeaderWhiteList&&(this.proxyHeaderWhiteList=e.proxyHeaderWhiteList),e.proxyHeaderExclusiveList&&(this.proxyHeaderExclusiveList=e.proxyHeaderExclusiveList);var a,o,s,u,c=this.proxyHeaderExclusiveList.concat(n),p=this.proxyHeaderWhiteList.concat(c),l=function(e,t){var a=t.reduce(function(e,t){return e[t.toLowerCase()]=!0,e},{});return Object.keys(e).filter(function(e){return a[e.toLowerCase()]}).reduce(function(t,a){return t[a]=e[a],t},{})}(t.headers,p);l.host=(a=t.uri,o=a.port,s=a.protocol,u=a.hostname+":",u+=o||("https:"===s?"443":"80")),c.forEach(t.removeHeader,t);var m=function(e){var t=function(e,t){return["https:"===e.protocol?"https":"http","https:"===t.protocol?"Https":"Http"].join("Over")}(e.uri,e.proxy);return r[t]}(t),h=function(e,t){var a=e.proxy;return{proxy:{host:a.hostname,port:+a.port,proxyAuth:a.auth,headers:t},headers:e.headers,ca:e.ca,cert:e.cert,key:e.key,passphrase:e.passphrase,pfx:e.pfx,ciphers:e.ciphers,rejectUnauthorized:e.rejectUnauthorized,secureOptions:e.secureOptions,secureProtocol:e.secureProtocol}}(t,l);return t.agent=m(h),!0},s.defaultProxyHeaderWhiteList=o,s.defaultProxyHeaderExclusiveList=n,t.Tunnel=s},function(e,t,a){"use strict";a(36);var i,r=a(63),o=a(17),n=a(19),s=a(205),u=a(21),c=a(3),p=a(23).Buffer;function l(e){var t=this;t.options=e||{},t.proxyOptions=t.options.proxy||{},t.maxSockets=t.options.maxSockets||o.Agent.defaultMaxSockets,t.requests=[],t.sockets=[],t.on("free",function(e,a,i){for(var r=0,o=t.requests.length;r<o;++r){var n=t.requests[r];if(n.host===a&&n.port===i)return t.requests.splice(r,1),void n.request.onSocket(e)}e.destroy(),t.removeSocket(e)})}function m(e,t){var a=this;l.prototype.createSocket.call(a,e,function(i){var o=r.connect(0,h({},a.options,{servername:e.host,socket:i}));a.sockets[a.sockets.indexOf(i)]=o,t(o)})}function h(e){for(var t=1,a=arguments.length;t<a;++t){var i=arguments[t];if("object"==typeof i)for(var r=Object.keys(i),o=0,n=r.length;o<n;++o){var s=r[o];void 0!==i[s]&&(e[s]=i[s])}}return e}t.httpOverHttp=function(e){var t=new l(e);return t.request=o.request,t},t.httpsOverHttp=function(e){var t=new l(e);return t.request=o.request,t.createSocket=m,t.defaultPort=443,t},t.httpOverHttps=function(e){var t=new l(e);return t.request=n.request,t},t.httpsOverHttps=function(e){var t=new l(e);return t.request=n.request,t.createSocket=m,t.defaultPort=443,t},c.inherits(l,s.EventEmitter),l.prototype.addRequest=function(e,t){"string"==typeof t&&(t={host:t,port:arguments[2],path:arguments[3]}),this.sockets.length>=this.maxSockets?this.requests.push({host:t.host,port:t.port,request:e}):this.createConnection({host:t.host,port:t.port,request:e})},l.prototype.createConnection=function(e){var t=this;t.createSocket(e,function(a){function i(){t.emit("free",a,e.host,e.port)}function r(e){t.removeSocket(a),a.removeListener("free",i),a.removeListener("close",r),a.removeListener("agentRemove",r)}a.on("free",i),a.on("close",r),a.on("agentRemove",r),e.request.onSocket(a)})},l.prototype.createSocket=function(e,t){var a=this,r={};a.sockets.push(r);var o=h({},a.proxyOptions,{method:"CONNECT",path:e.host+":"+e.port,agent:!1});o.proxyAuth&&(o.headers=o.headers||{},o.headers["Proxy-Authorization"]="Basic "+p.from(o.proxyAuth).toString("base64")),i("making CONNECT request");var n=a.request(o);function s(o,s,c){if(n.removeAllListeners(),s.removeAllListeners(),200===o.statusCode)u.equal(c.length,0),i("tunneling connection has established"),a.sockets[a.sockets.indexOf(r)]=s,t(s);else{i("tunneling socket could not be established, statusCode=%d",o.statusCode);var p=new Error("tunneling socket could not be established, statusCode="+o.statusCode);p.code="ECONNRESET",e.request.emit("error",p),a.removeSocket(r)}}n.useChunkedEncodingByDefault=!1,n.once("response",function(e){e.upgrade=!0}),n.once("upgrade",function(e,t,a){process.nextTick(function(){s(e,t,a)})}),n.once("connect",s),n.once("error",function(t){n.removeAllListeners(),i("tunneling socket could not be established, cause=%s\n",t.message,t.stack);var o=new Error("tunneling socket could not be established, cause="+t.message);o.code="ECONNRESET",e.request.emit("error",o),a.removeSocket(r)}),n.end()},l.prototype.removeSocket=function(e){var t=this.sockets.indexOf(e);if(-1!==t){this.sockets.splice(t,1);var a=this.requests.shift();a&&this.createConnection(a)}},i=process.env.NODE_DEBUG&&/\btunnel\b/.test(process.env.NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments);"string"==typeof e[0]?e[0]="TUNNEL: "+e[0]:e.unshift("TUNNEL:"),console.error.apply(console,e)}:function(){},t.debug=i},function(e,t){e.exports=require("events")},function(e,t){(function(){var t,a,i,r,o,n;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(e.exports=function(){return(t()-o)/1e6},a=process.hrtime,r=(t=function(){var e;return 1e9*(e=a())[0]+e[1]})(),n=1e9*process.uptime(),o=r-n):Date.now?(e.exports=function(){return Date.now()-i},i=Date.now()):(e.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getProperties=function(e,t){var a={};e&&(e.key&&(a.key=e.key),e.keyFilter&&(a.keyFilter=e.keyFilter),e.permissionLevel&&(a.keyFilter=e.permissionLevel));var i={uri:this.jiraClient.buildURL("/application-properties"),method:"GET",followAllRedirects:!0,qs:a};return this.jiraClient.makeRequest(i,t)},this.setProperty=function(e,t){var a={uri:this.jiraClient.buildURL("/application-properties"),method:"GET",followAllRedirects:!0,body:e.property};return this.jiraClient.makeRequest(a,t,"Property Updated")}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.getAttachment=function(e,t){if(!e.attachmentId)throw new Error(i.NO_ATTACHMENT_ID_ERROR);var a={uri:this.jiraClient.buildURL("/attachment/"+e.attachmentId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteAttachment=function(e,t){if(!e.attachmentId)throw new Error(i.NO_ATTACHMENT_ID_ERROR);var a={uri:this.jiraClient.buildURL("/attachment/"+e.attachmentId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"Attachment Deleted")},this.getGlobalAttachmentMetadata=function(e,t){var a={uri:this.jiraClient.buildURL("/attachment/meta"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.getAudits=function(e,t){var a={uri:this.jiraClient.buildURL("/auditing/record"),json:!0,followAllRedirects:!0,method:"GET",qs:{offset:e.offset,limit:e.limit,filter:e.filter,from:e.from,to:e.to}};return this.jiraClient.makeRequest(a,t)},this.createAudit=function(e,t){if(!e.audit)throw new Error(i.NO_AUDIT_ERROR);var a={uri:this.jiraClient.buildURL("/auditing/record"),json:!0,followAllRedirects:!0,method:"POST",body:e.audit};return this.jiraClient.makeRequest(a,t,"Audit Record Added")}}},function(e,t,a){"use strict";a(13),a(16);e.exports=function(e){this.jiraClient=e,this.logout=function(e){var t={uri:this.jiraClient.buildAuthURL("/session"),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,e),"User logged out."},this.login=function(e,t){var a={uri:this.jiraClient.buildAuthURL("/session"),method:"POST",json:!0,followAllRedirects:!0,body:e};return this.jiraClient.makeRequest(a,t,"User logged in.")},this.currentUser=function(e){var t={uri:this.jiraClient.buildURL("/session"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(t,e)}}},function(e,t,a){"use strict";var i=a(13),r=a(16),o=a(10);e.exports=function(e){this.jiraClient=e,this.getAvatars=function(e,t){if(!e.avatarType)throw new Error(o.NO_AVATAR_TYPE_ERROR);var a={method:"GET",json:!0,followAllRedirects:!0,uri:this.jiraClient.buildURL("/avatar/"+e.avatarType+"/system")};return this.jiraClient.makeRequest(a,t)},this.createTemporaryAvatar=function(e,t){if(!e.avatarType)throw new Error(o.NO_AVATAR_TYPE_ERROR);var a=i.statSync(e.avatarFilePath).size,n=r.basename(e.avatarFilePath),s={method:"POST",json:!0,followAllRedirects:!0,uri:this.jiraClient.buildURL("/avatar/"+e.avatarType+"/temporary"),headers:{"X-Atlassian-Token":"no-check"},qs:{filename:n,size:a},formData:{file:i.createReadStream(e.avatarFilePath)}};return delete s.body,this.jiraClient.makeRequest(s,t)},this.cropTemporaryAvatar=function(e,t){if(!e.avatarType)throw new Error(o.NO_AVATAR_TYPE_ERROR);var a={method:"POST",json:!0,followAllRedirects:!0,uri:this.jiraClient.buildURL("/avatar/"+e.avatarType+"/temporaryCrop"),headers:{"X-Atlassian-Token":"no-check"},body:e.crop};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllBoards=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board"),method:"GET",json:!0,followAllRedirects:!0,qs:{type:e.type,startAt:e.startAt,name:e.name,projectKeyOrId:e.projectKeyOrId,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.getBoard=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.getIssuesForBoard=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/issue"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,fields:e.fields.join(","),expand:e.expand}};return this.jiraClient.makeRequest(a,t)},this.getSprintsForBoard=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/sprint"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,state:e.state}};return this.jiraClient.makeRequest(a,t)},this.getIssuesForBacklog=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/backlog"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields}};return this.jiraClient.makeRequest(a,t)},this.getBoardConfiguration=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/configuration"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createBoard=function(e,t,a,i,r){var o={uri:this.jiraClient.buildAgileURL("/board"),method:"POST",followAllRedirects:!0,json:!0,body:{name:e,type:t,filterId:a,location:i}};return this.jiraClient.makeRequest(o,r)},this.getProjectsForBoard=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/board/"+e.boardId+"/project"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.getCommentPropertyKeys=function(e,t){var a=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(a,t)},this.setCommentProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_COMMENT_PROPERTY_KEY_ERROR);if(!e.propertyValue)throw new Error(i.NO_COMMENT_PROPERTY_VALUE_ERROR);var a=this.buildRequestOptions(e,"/"+e.propertyKey,"PUT",e.propertyValue);return this.jiraClient.makeRequest(a,t,"Property Edited")},this.getCommentProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_COMMENT_PROPERTY_KEY_ERROR);var a=this.buildRequestOptions(e,"/"+e.propertyKey,"GET");return this.jiraClient.makeRequest(a,t)},this.deleteCommentProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_COMMENT_PROPERTY_KEY_ERROR);var a=this.buildRequestOptions(e,"/"+e.propertyKey,"DELETE");return this.jiraClient.makeRequest(a,t,"Comment property deleted")},this.buildRequestOptions=function(e,t,a,r,o){if(!e.commentId)throw new Error(i.NO_COMMENT_ID);var n="/comment/"+e.commentId+"/properties";return o||(o={}),r||(r={}),e.fields&&(o.fields="",e.fields.forEach(function(e){o.fields+=e+","})),e.expand&&(o.expand="",e.expand.forEach(function(e){o.expand+=e+","})),{uri:this.jiraClient.buildURL(n+t),method:a,body:r,qs:o,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createComponent=function(e,t){var a={uri:this.jiraClient.buildURL("/component"),method:"POST",json:!0,followAllRedirects:!0,body:e.component};return this.jiraClient.makeRequest(a,t)},this.editComponent=function(e,t){var a={uri:this.jiraClient.buildURL("/component/"+e.id),method:"PUT",json:!0,followAllRedirects:!0,body:e.component};return this.jiraClient.makeRequest(a,t)},this.getComponent=function(e,t){var a={uri:this.jiraClient.buildURL("/component/"+e.id),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteComponent=function(e,t){var a={uri:this.jiraClient.buildURL("/component/"+e.id),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"Project Component Deleted")},this.getRelatedIssueCounts=function(e,t){var a={uri:this.jiraClient.buildURL("/component/"+e.id+"/relatedIssueCounts"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.getCustomFieldOption=function(e,t){if(!e.fieldOptionId)throw new Error(i.NO_FIELD_OPTION_ID_ERROR);var a={uri:this.jiraClient.buildURL("/customFieldOption/"+e.fieldOptionId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllDashboards=function(e,t){var a={uri:this.jiraClient.buildURL("/dashboard"),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.getDashboard=function(e,t){var a={uri:this.jiraClient.buildURL("/dashboard/"+e.dashboardId),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllFields=function(e,t){var a={uri:this.jiraClient.buildURL("/field"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createCustomField=function(e,t){var a={uri:this.jiraClient.buildURL("/field"),method:"POST",json:!0,followAllRedirects:!0,body:e.field};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createFilter=function(e,t){var a={uri:this.jiraClient.buildURL("/filter"),method:"POST",json:!0,followAllRedirects:!0,qs:{},body:e.filter};return e.expand&&(a.qs.expand="",e.expand.forEach(function(e){a.qs.expand+=e+","})),this.jiraClient.makeRequest(a,t)},this.getFilter=function(e,t){var a=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(a,t)},this.getFilters=function(e,t){var a={uri:this.jiraClient.buildURL("/filter"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.updateFilter=function(e,t){var a=this.buildRequestOptions(e,"","PUT",e.filter);return this.jiraClient.makeRequest(a,t)},this.deleteFilter=function(e,t){var a=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(a,t,"Filter Deleted")},this.getFilterColumns=function(e,t){var a=this.buildRequestOptions(e,"/columns","GET");return this.jiraClient.makeRequest(a,t)},this.setFilterColumns=function(e,t){var a={columns:e.columns},i=this.buildRequestOptions(e,"/columns","PUT",a);return this.jiraClient.makeRequest(i,t,"Columns Updated")},this.resetFilterColumns=function(e,t){var a=this.buildRequestOptions(e,"/columns","DELETE");return this.jiraClient.makeRequest(a,t,"Columns Reset")},this.addSharePermission=function(e,t){var a=this.buildRequestOptions(e,"/permission","POST",e.permission);return this.jiraClient.makeRequest(a,t,"Share Permission Added")},this.getDefaultShareScore=function(e,t){var a={uri:this.jiraClient.buildURL("/filter/defaultShareScope"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.setDefaultShareScope=function(e,t){var a={uri:this.jiraClient.buildURL("/filter/defaultShareScope"),method:"PUT",json:!0,followAllRedirects:!0,body:{scope:e.scope}};return this.jiraClient.makeRequest(a,t)},this.getFavoriteFilters=function(e,t){var a={uri:this.jiraClient.buildURL("/filter/favourite"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,i,r){var o="/filter/"+e.filterId;return r||(r={}),i||(i={}),e.fields&&(r.fields="",e.fields.forEach(function(e){r.fields+=e+","}),r.fields=r.fields.slice(0,-1)),e.expand&&(r.expand="",e.expand.forEach(function(e){r.expand+=e+","}),r.expand=r.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(o+t),method:a,body:i,qs:r,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createGroup=function(e,t){var a={uri:this.jiraClient.buildURL("/group"),method:"POST",json:!0,followAllRedirects:!0,body:e.group};return this.jiraClient.makeRequest(a,t)},this.getGroup=function(e,t){var a={groupname:e.groupName};e.expand&&(a.expand="",e.expand.forEach(function(e){a.expand+=e+","}));var i={uri:this.jiraClient.buildURL("/group"),method:"GET",json:!0,followAllRedirects:!0,qs:a};return this.jiraClient.makeRequest(i,t)},this.getMembers=function(e,t){var a={groupname:e.groupName,includeInactiveUsers:e.includeInactiveUsers,startAt:e.startAt,maxResults:e.maxResults},i={uri:this.jiraClient.buildURL("/group/member"),method:"GET",json:!0,followAllRedirects:!0,qs:a};return this.jiraClient.makeRequest(i,t)},this.addUserToGroup=function(e,t){var a={uri:this.jiraClient.buildURL("/group/user"),method:"POST",json:!0,followAllRedirects:!0,qs:{groupname:e.groupName},body:{name:e.userName}};return this.jiraClient.makeRequest(a,t)},this.removeUserFromGroup=function(e,t){var a={uri:this.jiraClient.buildURL("/group/user"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{groupname:e.groupName,username:e.userName}};return this.jiraClient.makeRequest(a,t,"User Removed from Group")},this.deleteGroup=function(e,t){var a={uri:this.jiraClient.buildURL("/group"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{groupname:e.groupName,swapGroup:e.swapGroup}};return this.jiraClient.makeRequest(a,t,"Group Deleted")}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.findUsersAndGroups=function(e,t){var a={uri:this.jiraClient.buildURL("/groupuserpicker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,maxResults:e.maxResults,showAvatar:e.showAvatar,fieldId:e.fieldId,projectId:e.projectId,issueTypeId:e.issueTypeId}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.findGroups=function(e,t){var a={uri:this.jiraClient.buildURL("/groups/picker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,exclude:e.exclude,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(10),r=a(13);e.exports=function(e){this.jiraClient=e,this.getIssueEstimation=function(e,t){var a="/issue/"+(e.issueId||e.issueKey)+"/estimation",i={uri:this.jiraClient.buildAgileURL(a),method:"GET",json:!0,followAllRedirects:!0,qs:{boardId:e.boardId,filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(i,t)},this.setIssueEstimation=function(e,t){var a="/issue/"+(e.issueId||e.issueKey)+"/estimation",i={uri:this.jiraClient.buildAgileURL(a),method:"PUT",json:!0,followAllRedirects:!0,body:{value:e.value,filter:e.filter,startAt:e.startAt,maxResults:e.maxResults},qs:{boardId:e.boardId}};return this.jiraClient.makeRequest(i,t)},this.setIssueRanks=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/issue/rank"),method:"PUT",json:!0,followAllRedirects:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.createIssue=function(e,t){var a={uri:this.jiraClient.buildURL("/issue"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.getCreateMetadata=function(e,t){var a={uri:this.jiraClient.buildURL("/issue/createmeta"),method:"GET",followAllRedirects:!0,json:!0,qs:{projectIds:e.projectIds,projectKeys:e.projectKeys,issuetypeIds:e.issuetypeIds,issuetypeNames:e.issuetypeNames,expand:e.expand}};return this.jiraClient.makeRequest(a,t)},this.bulkCreate=function(e,t){var a={uri:this.jiraClient.buildURL("/issue/bulk"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.getIssue=function(e,t){if(e.agile)var a="/issue/"+(e.issueId||e.issueKey),i={uri:this.jiraClient.buildAgileURL(a),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults,expand:e.expand}};else var i=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(i,t)},this.deleteIssue=function(e,t){var a=this.buildRequestOptions(e,"","DELETE",null,{deleteSubtasks:e.deleteSubtasks});return this.jiraClient.makeRequest(a,t,"Issue Deleted")},this.editIssue=function(e,t){if(!e.issue)throw new Error(i.NO_ISSUE_ERROR);var a=this.buildRequestOptions(e,"","PUT",e.issue,e.qs);return this.jiraClient.makeRequest(a,t,"Issue Updated")},this.assignIssue=function(e,t){if(!("string"==typeof e.assignee&&e.assignee.length||null===e.assignee))throw new Error(i.NO_ASSIGNEE_ERROR);var a=this.buildRequestOptions(e,"/assignee","PUT",{name:e.assignee});return this.jiraClient.makeRequest(a,t,"Issue Assigned")},this.getComments=function(e,t){var a=this.buildRequestOptions(e,"/comment","GET");return this.jiraClient.makeRequest(a,t)},this.addComment=function(e,t){var a;return a=e.comment.body?this.buildRequestOptions(e,"/comment","POST",e.comment):this.buildRequestOptions(e,"/comment","POST",{body:e.comment}),this.jiraClient.makeRequest(a,t)},this.getComment=function(e,t){if(!e.commentId)throw new Error(i.NO_COMMENT_ID);var a=this.buildRequestOptions(e,"/comment/"+e.commentId,"GET");return this.jiraClient.makeRequest(a,t)},this.editComment=function(e,t){if(!e.comment)throw new Error(i.NO_COMMENT_ERROR);if(!e.commentId)throw new Error(i.NO_COMMENT_ID);var a=this.buildRequestOptions(e,"/comment/"+e.commentId,"PUT",e.comment);return this.jiraClient.makeRequest(a,t)},this.deleteComment=function(e,t){if(!e.commentId)throw new Error(i.NO_COMMENT_ID);var a=this.buildRequestOptions(e,"/comment/"+e.commentId,"DELETE");return this.jiraClient.makeRequest(a,t,"Comment Deleted")},this.getEditMetadata=function(e,t){var a=this.buildRequestOptions(e,"/editmeta","GET");return this.jiraClient.makeRequest(a,t)},this.sendEmailNotification=function(e,t){if(!e.notification)throw new Error(i.NO_NOTIFICATION_ERROR);var a=this.buildRequestOptions(e,"/notify","POST",e.notification);return this.jiraClient.makeRequest(a,t,"Notifications Sent")},this.getRemoteLinks=function(e,t){var a=this.buildRequestOptions(e,"/remotelink","GET",null,{globalId:e.globalId});return this.jiraClient.makeRequest(a,t)},this.createRemoteLink=function(e,t){var a=this.buildRequestOptions(e,"/remotelink","POST",e.remoteLink);return this.jiraClient.makeRequest(a,t)},this.updateRemoteLink=function(e,t){this.createRemoteLink(e,t)},this.deleteRemoteLink=function(e,t){if(!e.globalId)throw new Error(i.NO_GLOBAL_ID_ERROR);var a=this.buildRequestOptions(e,"/remotelink","DELETE",null,{globalId:e.globalId});return this.jiraClient.makeRequest(a,t,"RemoteLink Deleted")},this.getRemoteLinkById=function(e,t){if(!e.linkId)throw new Error(i.NO_LINK_ID_ERROR);var a=this.buildRequestOptions(e,"/remotelink/"+e.linkId,"GET");return this.jiraClient.makeRequest(a,t)},this.updateRemoteLinkById=function(e,t){if(!e.linkId)throw new Error(i.NO_LINK_ID_ERROR);var a=this.buildRequestOptions(e,"/remotelink/"+e.linkId,"PUT",e.remoteLink);return this.jiraClient.makeRequest(a,t,"RemoteLink Updated")},this.deleteRemoteLinkById=function(e,t){if(!e.linkId)throw new Error(i.NO_LINK_ID_ERROR);var a=this.buildRequestOptions(e,"/remotelink/"+e.linkId,"DELETE");return this.jiraClient.makeRequest(a,t,"RemoteLink Deleted")},this.getTransitions=function(e,t){var a=this.buildRequestOptions(e,"/transitions","GET",null,{transitionId:e.transitionId});return this.jiraClient.makeRequest(a,t)},this.transitionIssue=function(e,t){if(!e.transition)throw new Error(i.NO_TRANSITION_ERROR);var a;return a=e.transition.transition?this.buildRequestOptions(e,"/transitions","POST",e.transition):this.buildRequestOptions(e,"/transitions","POST",e),this.jiraClient.makeRequest(a,t,"Issue Transitioned")},this.unvote=function(e,t){var a=this.buildRequestOptions(e,"/votes","DELETE");return this.jiraClient.makeRequest(a,t,"Vote Removed")},this.vote=function(e,t){var a=this.buildRequestOptions(e,"/votes","POST");return this.jiraClient.makeRequest(a,t,"Vote Added")},this.getVotes=function(e,t){var a=this.buildRequestOptions(e,"/votes","GET");return this.jiraClient.makeRequest(a,t)},this.getWatchers=function(e,t){var a=this.buildRequestOptions(e,"/watchers","GET");return this.jiraClient.makeRequest(a,t)},this.addWatcher=function(e,t){if(!e.watcher)throw new Error(i.NO_WATCHER_ERROR);var a=this.buildRequestOptions(e,"/watchers","POST",e.watcher);return this.jiraClient.makeRequest(a,t,"Watcher Added")},this.removeWatcher=function(e,t){if(!e.watcher)throw new Error(i.NO_WATCHER_ERROR);var a=this.buildRequestOptions(e,"/watchers","DELETE",null,{username:e.watcher});return this.jiraClient.makeRequest(a,t,"Watcher Removed")},this.getWorkLogs=function(e,t){var a=this.buildRequestOptions(e,"/worklog","GET");return this.jiraClient.makeRequest(a,t)},this.addWorkLog=function(e,t){if(!e.worklog)throw new Error(i.NO_WORKLOG_ERROR);var a=this.buildRequestOptions(e,"/worklog","POST",e.worklog,{newEstimate:e.newEstimate,reduceBy:e.reduceBy,adjustEstimate:e.adjustEstimate});return this.jiraClient.makeRequest(a,t,"Worklog Added")},this.getWorkLog=function(e,t){if(!e.worklogId)throw new Error(i.NO_WORKLOG_ID_ERROR);var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId,"GET");return this.jiraClient.makeRequest(a,t)},this.updateWorkLog=function(e,t){if(!e.worklogId)throw new Error(i.NO_WORKLOG_ID_ERROR);if(!e.worklog)throw new Error(i.NO_WORKLOG_ERROR);var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId,"PUT",e.worklog,{newEstimate:e.newEstimate,adjustEstimate:e.adjustEstimate});return this.jiraClient.makeRequest(a,t)},this.deleteWorkLog=function(e,t){if(!e.worklogId)throw new Error(i.NO_WORKLOG_ID_ERROR);var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId,"DELETE",null,{newEstimate:e.newEstimate,increaseBy:e.increaseBy,adjustEstimate:e.adjustEstimate});return this.jiraClient.makeRequest(a,t,"Work Log Deleted")},this.addAttachment=function(e,t){if(!e.filename)throw new Error(i.NO_FILENAME_ERROR);var a=this.buildRequestOptions(e,"/attachments","POST");delete a.body,e.filename.constructor!==Array&&(e.filename=[e.filename]);var o=e.filename.map(function(e){return r.createReadStream(e)});return a.formData={file:o},a.headers={"X-Atlassian-Token":"nocheck"},this.jiraClient.makeRequest(a,t)},this.getProperties=function(e,t){var a=this.buildRequestOptions(e,"/properties","GET");return this.jiraClient.makeRequest(a,t)},this.setProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_PROPERTY_KEY_ERROR);if(!e.propertyValue)throw new Error(i.NO_PROPERTY_VALUE_ERROR);var a=this.buildRequestOptions(e,"/properties/"+e.propertyKey,"PUT",e.propertyValue);return this.jiraClient.makeRequest(a,t,"Property Set")},this.getProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_PROPERTY_KEY_ERROR);var a=this.buildRequestOptions(e,"/properties/"+e.propertyKey,"GET");return this.jiraClient.makeRequest(a,t)},this.deleteProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_PROPERTY_KEY_ERROR);var a=this.buildRequestOptions(e,"/properties/"+e.propertyKey,"DELETE");return this.jiraClient.makeRequest(a,t,"Property Deleted")},this.setWorklogProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_PROPERTY_KEY_ERROR);if(!e.propertyValue)throw new Error(i.NO_PROPERTY_VALUE_ERROR);var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId+"/properties/"+e.propertyKey,"PUT",e.propertyValue);return this.jiraClient.makeRequest(a,t,"Property Set")},this.getWorkLogProperties=function(e,t){var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId+"/properties/","GET");return this.jiraClient.makeRequest(a,t)},this.getWorkLogProperty=function(e,t){if(!e.propertyKey)throw new Error(i.NO_PROPERTY_KEY_ERROR);var a=this.buildRequestOptions(e,"/worklog/"+e.worklogId+"/properties/"+e.propertyKey,"GET");return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,r,o){if(!e.issueId&&!e.issueKey)throw new Error(i.NO_ISSUE_IDENTIFIER);var n=e.issueId||e.issueKey,s="/issue/"+n;return o||(o={}),r||(r={}),e.fields&&(o.fields="",e.fields.forEach(function(e){o.fields+=e+","})),e.expand&&(o.expand="",e.expand.forEach(function(e){o.expand+=e+","})),e.properties&&(o.properties="",e.properties.forEach(function(e){o.properties+=e+","})),{uri:this.jiraClient.buildURL(s+t),method:a,body:r,qs:o,followAllRedirects:!0,json:!0}},this.getIssuePicker=function(e,t){var a={uri:this.jiraClient.buildURL("/issue/picker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,currentJQL:e.currentJQL,currentIssueKey:e.currentIssueKey,currentProjectId:e.currentProjectId,showSubTasks:e.showSubTasks,showSubTaskParent:e.showSubTaskParent}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.createIssueLink=function(e,t){if(!e.issueLink)throw new Error(i.NO_ISSUE_LINK_ERROR);var a={method:"POST",uri:this.jiraClient.buildURL("/issueLink"),json:!0,followAllRedirects:!0,body:e.issueLink};return this.jiraClient.makeRequest(a,t,"Issue Link Created")},this.getIssueLink=function(e,t){if(!e.linkId)throw new Error(i.NO_ISSUE_LINK_ID_ERROR);var a={method:"GET",uri:this.jiraClient.buildURL("/issueLink/"+e.linkId),json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteIssueLink=function(e,t){if(!e.linkId)throw new Error(i.NO_ISSUE_LINK_ID_ERROR);var a={method:"DELETE",uri:this.jiraClient.buildURL("/issueLink/"+e.linkId),json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"Issue Link Deleted")}}},function(e,t,a){"use strict";var i=a(10);e.exports=function(e){this.jiraClient=e,this.getAvailableTypes=function(e,t){var a={uri:this.jiraClient.buildURL("/issueLinkType"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createIssueLinkType=function(e,t){var a={uri:this.jiraClient.buildURL("/issueLinkType"),method:"POST",json:!0,followAllRedirects:!0,body:e.linkType};return this.jiraClient.makeRequest(a,t)},this.getIssueLinkType=function(e,t){if(!e.issueLinkTypeId)throw new Error(i.NO_ISSUE_LINK_TYPE_ID);var a={uri:this.jiraClient.buildURL("/issueLinkType/"+e.issueLinkTypeId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteIssueLinkType=function(e,t){if(!e.issueLinkTypeId)throw new Error(i.NO_ISSUE_LINK_TYPE_ID);var a={uri:this.jiraClient.buildURL("/issueLinkType/"+e.issueLinkTypeId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"IssueLink type deleted.")},this.editIssueLinkType=function(e,t){if(!e.issueLinkTypeId)throw new Error(i.NO_ISSUE_LINK_TYPE_ID);var a={uri:this.jiraClient.buildURL("/issueLinkType/"+e.issueLinkTypeId),method:"PUT",json:!0,followAllRedirects:!0,body:e.issueLinkType};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllIssueTypes=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createIssueType=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype"),method:"POST",json:!0,followAllRedirects:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.getIssueType=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteIssueType=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{alternativeIssueTypeId:e.alternativeIssueTypeId}};return this.jiraClient.makeRequest(a,t)},this.updateIssueType=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId),method:"PUT",json:!0,followAllRedirects:!0,body:e.issueType};return this.jiraClient.makeRequest(a,t)},this.getAlternativeIssueTypes=function(e,t){var a={uri:this.jiraClient.buildURL("/issuetype/"+e.issueTypeId+"/alternatives"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAutoCompleteData=function(e,t){var a={uri:this.jiraClient.buildURL("/jql/autocompletedata"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllLicenseRoles=function(e,t){var a={uri:this.jiraClient.buildURL("/licenserole"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getLicenseRole=function(e,t){var a={uri:this.jiraClient.buildURL("/licenserole/"+e.roleId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.editLicenseRole=function(e,t){var a={uri:this.jiraClient.buildURL("/licenserole/"+e.roleId),method:"PUT",json:!0,followAllRedirects:!0,body:e.role};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.validateLicense=function(e,t){var a={uri:this.jiraClient.buildURL("/licenseValidator"),method:"POST",json:!0,followAllRedirects:!0,body:e.license};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getMyPermissions=function(e,t){var a={uri:this.jiraClient.buildURL("/mypermissions"),method:"GET",json:!0,followAllRedirects:!0,qs:{issueId:e.issueId,issueKey:e.issueKey,projectId:e.projectId,projectKey:e.projectKey}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getPreference=function(e,t){var a={uri:this.jiraClient.buildURL("/mypreferences"),method:"GET",json:!0,followAllRedirects:!0,qs:{key:e.key}};return this.jiraClient.makeRequest(a,t)},this.editPreference=function(e,t){var a={uri:this.jiraClient.buildURL("/mypreferences"),method:"PUT",json:!0,followAllRedirects:!0,qs:{key:e.key},body:e.value};return this.jiraClient.makeRequest(a,t)},this.deletePreference=function(e,t){var a={uri:this.jiraClient.buildURL("/mypreferences"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{key:e.key}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getMyself=function(e,t){var a={uri:this.jiraClient.buildURL("/myself"),method:"GET",json:!0,followAllRedirects:!0,debug:e};return this.jiraClient.makeRequest(a,t)},this.editMyself=function(e,t){var a={uri:this.jiraClient.buildURL("/myself"),method:"PUT",json:!0,followAllRedirects:!0,body:e.newData};return this.jiraClient.makeRequest(a,t)},this.changePassword=function(e,t){var a={uri:this.jiraClient.buildURL("/myself/password"),method:"PUT",json:!0,followAllRedirects:!0,body:e.newData};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){t.OAuth=a(83).OAuth,t.OAuthEcho=a(83).OAuthEcho,t.OAuth2=a(234).OAuth2},function(e,t){var a="=";function i(e,t){var a=n(e);a.length>16&&(a=u(a,8*e.length));for(var i=Array(16),r=Array(16),o=0;o<16;o++)i[o]=909522486^a[o],r[o]=1549556828^a[o];var c=u(i.concat(n(t)),512+8*t.length);return s(u(r.concat(c),672))}function r(e){for(var t="",i=e.length,r=0;r<i;r+=3)for(var o=e.charCodeAt(r)<<16|(r+1<i?e.charCodeAt(r+1)<<8:0)|(r+2<i?e.charCodeAt(r+2):0),n=0;n<4;n++)8*r+6*n>8*e.length?t+=a:t+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(o>>>6*(3-n)&63);return t}function o(e){for(var t,a,i="",r=-1;++r<e.length;)t=e.charCodeAt(r),a=r+1<e.length?e.charCodeAt(r+1):0,55296<=t&&t<=56319&&56320<=a&&a<=57343&&(t=65536+((1023&t)<<10)+(1023&a),r++),t<=127?i+=String.fromCharCode(t):t<=2047?i+=String.fromCharCode(192|t>>>6&31,128|63&t):t<=65535?i+=String.fromCharCode(224|t>>>12&15,128|t>>>6&63,128|63&t):t<=2097151&&(i+=String.fromCharCode(240|t>>>18&7,128|t>>>12&63,128|t>>>6&63,128|63&t));return i}function n(e){for(var t=Array(e.length>>2),a=0;a<t.length;a++)t[a]=0;for(a=0;a<8*e.length;a+=8)t[a>>5]|=(255&e.charCodeAt(a/8))<<24-a%32;return t}function s(e){for(var t="",a=0;a<32*e.length;a+=8)t+=String.fromCharCode(e[a>>5]>>>24-a%32&255);return t}function u(e,t){e[t>>5]|=128<<24-t%32,e[15+(t+64>>9<<4)]=t;for(var a=Array(80),i=1732584193,r=-271733879,o=-1732584194,n=271733878,s=-1009589776,u=0;u<e.length;u+=16){for(var h=i,d=r,f=o,g=n,v=s,y=0;y<80;y++){a[y]=y<16?e[u+y]:m(a[y-3]^a[y-8]^a[y-14]^a[y-16],1);var b=l(l(m(i,5),c(y,r,o,n)),l(l(s,a[y]),p(y)));s=n,n=o,o=m(r,30),r=i,i=b}i=l(i,h),r=l(r,d),o=l(o,f),n=l(n,g),s=l(s,v)}return Array(i,r,o,n,s)}function c(e,t,a,i){return e<20?t&a|~t&i:e<40?t^a^i:e<60?t&a|t&i|a&i:t^a^i}function p(e){return e<20?1518500249:e<40?1859775393:e<60?-1894007588:-899497514}function l(e,t){var a=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(a>>16)<<16|65535&a}function m(e,t){return e<<t|e>>>32-t}t.HMACSHA1=function(e,t){return a=t,r(i(o(e),o(a)));var a}},function(e,t,a){var i=a(24),r=(a(1),a(19)),o=a(17),n=a(8),s=a(84);t.OAuth2=function(e,t,a,i,r,o){this._clientId=e,this._clientSecret=t,this._baseSite=a,this._authorizeUrl=i||"/oauth/authorize",this._accessTokenUrl=r||"/oauth/access_token",this._accessTokenName="access_token",this._authMethod="Bearer",this._customHeaders=o||{},this._useAuthorizationHeaderForGET=!1,this._agent=void 0},t.OAuth2.prototype.setAgent=function(e){this._agent=e},t.OAuth2.prototype.setAccessTokenName=function(e){this._accessTokenName=e},t.OAuth2.prototype.setAuthMethod=function(e){this._authMethod=e},t.OAuth2.prototype.useAuthorizationHeaderforGET=function(e){this._useAuthorizationHeaderForGET=e},t.OAuth2.prototype._getAccessTokenUrl=function(){return this._baseSite+this._accessTokenUrl},t.OAuth2.prototype.buildAuthHeader=function(e){return this._authMethod+" "+e},t.OAuth2.prototype._chooseHttpLibrary=function(e){var t=r;return"https:"!=e.protocol&&(t=o),t},t.OAuth2.prototype._request=function(e,t,a,r,o,s){var u=n.parse(t,!0);"https:"!=u.protocol||u.port||(u.port=443);var c=this._chooseHttpLibrary(u),p={};for(var l in this._customHeaders)p[l]=this._customHeaders[l];if(a)for(var l in a)p[l]=a[l];p.Host=u.host,p["User-Agent"]||(p["User-Agent"]="Node-oauth"),r?Buffer.isBuffer(r)?p["Content-Length"]=r.length:p["Content-Length"]=Buffer.byteLength(r):p["Content-length"]=0,!o||"Authorization"in p||(u.query||(u.query={}),u.query[this._accessTokenName]=o);var m=i.stringify(u.query);m&&(m="?"+m);var h={host:u.hostname,port:u.port,path:u.pathname+m,method:e,headers:p};this._executeRequest(c,h,r,s)},t.OAuth2.prototype._executeRequest=function(e,t,a,i){var r=s.isAnEarlyCloseHost(t.host),o=!1;function n(e,t){o||(o=!0,e.statusCode>=200&&e.statusCode<=299||301==e.statusCode||302==e.statusCode?i(null,t,e):i({statusCode:e.statusCode,data:t}))}var u="";this._agent&&(t.agent=this._agent);var c=e.request(t);c.on("response",function(e){e.on("data",function(e){u+=e}),e.on("close",function(t){r&&n(e,u)}),e.addListener("end",function(){n(e,u)})}),c.on("error",function(e){o=!0,i(e)}),"POST"!=t.method&&"PUT"!=t.method||!a||c.write(a),c.end()},t.OAuth2.prototype.getAuthorizeUrl=function(e){return(e=e||{}).client_id=this._clientId,this._baseSite+this._authorizeUrl+"?"+i.stringify(e)},t.OAuth2.prototype.getOAuthAccessToken=function(e,t,a){(t=t||{}).client_id=this._clientId,t.client_secret=this._clientSecret,t["refresh_token"===t.grant_type?"refresh_token":"code"]=e;var r=i.stringify(t);this._request("POST",this._getAccessTokenUrl(),{"Content-Type":"application/x-www-form-urlencoded"},r,null,function(e,t,r){if(e)a(e);else{var o;try{o=JSON.parse(t)}catch(e){o=i.parse(t)}var n=o.access_token,s=o.refresh_token;delete o.refresh_token,a(null,n,s,o)}})},t.OAuth2.prototype.getProtectedResource=function(e,t,a){this._request("GET",e,{},"",t,a)},t.OAuth2.prototype.get=function(e,t,a){if(this._useAuthorizationHeaderForGET){var i={Authorization:this.buildAuthHeader(t)};t=null}else i={};this._request("GET",e,i,"",t,a)}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getPasswordPolicy=function(e,t){var a={uri:this.jiraClient.buildURL("/password/policy"),method:"GET",json:!0,followAllRedirects:!0,qs:{hasOldPassword:e.hasOldPassword}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllPermissions=function(e,t){var a={uri:this.jiraClient.buildURL("/permissions"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllPermissionSchemes=function(e,t){var a=e.expand;e.expand&&e.expand instanceof Array&&(a=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme"),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:a}};return this.jiraClient.makeRequest(i,t)},this.createPermissionScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/permissionscheme"),method:"POST",json:!0,followAllRedirects:!0,body:e.scheme};return this.jiraClient.makeRequest(a,t)},this.getPermissionScheme=function(e,t){var a=e.expand;e.expand&&e.expand instanceof Array&&(a=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:a}};return this.jiraClient.makeRequest(i,t)},this.editPermissionScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId),method:"PUT",json:!0,followAllRedirects:!0,body:e.scheme};return this.jiraClient.makeRequest(a,t)},this.deletePermissionScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"Permission Scheme removed.")},this.getPermissionSchemeGrants=function(e,t){var a=e.expand;e.expand&&e.expand instanceof Array&&(a=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission"),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:a}};return this.jiraClient.makeRequest(i,t)},this.createPermissionGrantInScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission"),method:"POST",json:!0,followAllRedirects:!0,body:e.grant};return this.jiraClient.makeRequest(a,t)},this.deletePermissionGrantFromScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission/"+e.permissionId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t,"Permission removed from scheme.")},this.getPermissionSchemeGrantById=function(e,t){var a=e.expand;e.expand&&e.expand instanceof Array&&(a=e.expand.join(","));var i={uri:this.jiraClient.buildURL("/permissionscheme/"+e.schemeId+"/permission/"+e.permissionId),method:"GET",json:!0,followAllRedirects:!0,qs:{expand:a}};return this.jiraClient.makeRequest(i,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllPriorities=function(e,t){var a={uri:this.jiraClient.buildURL("/priority"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getPriority=function(e,t){var a={uri:this.jiraClient.buildURL("/priority/"+e.priorityId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllProjects=function(e,t){var a=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(a,t)},this.deleteProject=function(e,t){var a=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(a,t,"Project Deleted")},this.createProject=function(e,t){var a={uri:this.jiraClient.buildURL("/project"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.getProjectProperties=function(e,t){var a=this.buildRequestOptions(e,"/properties","GET");return this.jiraClient.makeRequest(a,t)},this.getProject=function(e,t){var a=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(a,t)},this.getComponents=function(e,t){var a=this.buildRequestOptions(e,"/components","GET");return this.jiraClient.makeRequest(a,t)},this.getStatuses=function(e,t){var a=this.buildRequestOptions(e,"/statuses","GET");return this.jiraClient.makeRequest(a,t)},this.getVersions=function(e,t){var a=this.buildRequestOptions(e,"/versions","GET");return this.jiraClient.makeRequest(a,t)},this.getRoles=function(e,t){var a=this.buildRequestOptions(e,"/role","GET");return this.jiraClient.makeRequest(a,t)},this.getRole=function(e,t){var a=this.buildRequestOptions(e,"/role/"+e.roleId,"GET");return this.jiraClient.makeRequest(a,t)},this.updateRole=function(e,t){var a=this.buildRequestOptions(e,"/role/"+e.roleId,"PUT",e.newRole);return this.jiraClient.makeRequest(a,t)},this.addToRole=function(e,t){var a=this.buildRequestOptions(e,"/role/"+e.roleId,"POST",e.newRole);return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,i,r){var o=(e=e||{}).projectIdOrKey?"/project/"+e.projectIdOrKey:"/project";return r||(r={}),i||(i={}),e.fields&&(r.fields="",e.fields.forEach(function(e){r.fields+=e+","}),r.fields=r.fields.slice(0,-1)),e.expand&&(r.expand="",e.expand.forEach(function(e){r.expand+=e+","}),r.expand=r.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(o+t),method:a,body:i,qs:r,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllProjectCategories=function(e,t){var a={uri:this.jiraClient.buildURL("/projectCategory"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getProjectCategory=function(e,t){var a={uri:this.jiraClient.buildURL("/projectCategory/"+e.projectCategoryId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.validateProjectKey=function(e,t){var a={uri:this.jiraClient.buildURL("/projectvalidate/key"),method:"GET",json:!0,followAllRedirects:!0,qs:{key:e.projectKey}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.doReindex=function(e,t){var a={uri:this.jiraClient.buildURL("/reindex"),method:"POST",json:!0,followAllRedirects:!0,qs:{type:e.type,indexComments:e.indexComments,indexChangeHistory:e.indexChangeHistory}};return this.jiraClient.makeRequest(a,t)},this.getReindex=function(e,t){var a={uri:this.jiraClient.buildURL("/reindex"),method:"GET",json:!0,followAllRedirects:!0,qs:{taskId:e.taskId}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllResolutions=function(e,t){var a={uri:this.jiraClient.buildURL("/resolution"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getResolution=function(e,t){var a={uri:this.jiraClient.buildURL("/resolution/"+e.resolutionId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAll=function(e,t){var a={uri:this.jiraClient.buildURL("/role"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createRole=function(e,t){var a={uri:this.jiraClient.buildURL("/role"),method:"POST",json:!0,followAllRedirects:!0,body:e.role};return this.jiraClient.makeRequest(a,t)},this.getRoleById=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.updateRole=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId),method:"PUT",json:!0,followAllRedirects:!0,body:e.role};return this.jiraClient.makeRequest(a,t)},this.deleteRole=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{swap:e.swap}};return this.jiraClient.makeRequest(a,t)},this.getActors=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId+"/actors"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.addActors=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId+"/actors"),method:"POST",json:!0,followAllRedirects:!0,body:{user:e.user,group:e.group}};return this.jiraClient.makeRequest(a,t)},this.removeActor=function(e,t){var a={uri:this.jiraClient.buildURL("/role/"+e.roleId+"/actors"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{user:e.user,group:e.group}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAvailableFields=function(e,t){var a=this.buildRequestOptions(e,"/availableFields","GET");return this.jiraClient.makeRequest(a,t)},this.getTabs=function(e,t){var a=this.buildRequestOptions(e,"/tabs","GET");return this.jiraClient.makeRequest(a,t)},this.createTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs","POST",{name:e.name});return this.jiraClient.makeRequest(a,t)},this.renameTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId,"PUT",{name:e.name});return this.jiraClient.makeRequest(a,t)},this.deleteTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId,"DELETE");return this.jiraClient.makeRequest(a,t,"Tab Deleted")},this.addFieldToTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields","POST",e.fieldId);return this.jiraClient.makeRequest(a,t)},this.getFieldsInTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields","GET");return this.jiraClient.makeRequest(a,t)},this.removeFieldFromTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields/"+e.fieldId,"DELETE");return this.jiraClient.makeRequest(a,t,"Field Removed From Tab")},this.moveFieldOnTab=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/fields/"+e.fieldId+"/move","POST",{position:e.newPosition});return this.jiraClient.makeRequest(a,t,"Field Moved")},this.moveTabPosition=function(e,t){var a=this.buildRequestOptions(e,"/tabs/"+e.tabId+"/move/"+e.newPosition,"POST");return this.jiraClient.makeRequest(a,t,"Tab Moved")},this.addFieldToDefaultTab=function(e,t){var a={uri:this.jiraClient.buildURL("/screens/addToDefault/"+e.fieldId),method:"POST",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,i,r){var o="/screens/"+e.screenId;return r||(r={}),i||(i={}),e.fields&&(r.fields="",e.fields.forEach(function(e){r.fields+=e+","}),r.fields=r.fields.slice(0,-1)),e.expand&&(r.expand="",e.expand.forEach(function(e){r.expand+=e+","}),r.expand=r.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(o+t),method:a,body:i,qs:r,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.search=function(e,t){e.method=e.method||"POST";var a={uri:this.jiraClient.buildURL("/search"),method:e.method,json:!0,followAllRedirects:!0,timeout:e.timeout||1e4},i={jql:e.jql,startAt:e.startAt,maxResults:e.maxResults,validateQuery:e.validateQuery,fields:e.fields,expand:e.expand,properties:e.properties};return"POST"===e.method?a.body=i:a.qs=i,this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getSecurityLevel=function(e,t){var a={uri:this.jiraClient.buildURL("/securitylevel/"+e.securityLevelId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getServerInfo=function(e,t){var a={uri:this.jiraClient.buildURL("/serverInfo"),method:"GET",json:!0,followAllRedirects:!0,qs:{doHealthCheck:e.doHealthCheck}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.setBaseUrl=function(e,t){var a={uri:this.jiraClient.buildURL("/settings/baseUrl"),method:"PUT",json:!0,followAllRedirects:!0,body:e.newUrl};return this.jiraClient.makeRequest(a,t)},this.getIssueNavColumns=function(e,t){var a={uri:this.jiraClient.buildURL("/settings/columns"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createSprint=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/sprint"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(a,t)},this.getSprint=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/sprint/"+e.sprintId),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.updateSprint=function(e,t){var a=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+a),method:"PUT",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,t)},this.partiallyUpdateSprint=function(e,t){var a=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+a),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,t)},this.deleteSprint=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/sprint/"+e.sprintId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.getSprintIssues=function(e,t){var a={uri:this.jiraClient.buildAgileURL("/sprint/"+e.sprintId+"/issue"),method:"GET",json:!0,followAllRedirects:!0,qs:{startAt:e.startAt,maxResults:e.maxResults,jql:e.jql,validateQuery:e.validateQuery,fields:e.fields,expand:e.expand}};return this.jiraClient.makeRequest(a,t)},this.moveSprintIssues=function(e,t){var a=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+a+"/issue"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,t)},this.swapSprint=function(e,t){var a=e.sprintId;delete e.sprintId;var i={uri:this.jiraClient.buildAgileURL("/sprint/"+a+"/swap"),method:"POST",followAllRedirects:!0,json:!0,body:e};return this.jiraClient.makeRequest(i,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllStatuses=function(e,t){var a={uri:this.jiraClient.buildURL("/status"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getStatus=function(e,t){var a={uri:this.jiraClient.buildURL("/status/"+e.statusId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllStatusCategories=function(e,t){var a={uri:this.jiraClient.buildURL("/statuscategory"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getStatusCategory=function(e,t){var a={uri:this.jiraClient.buildURL("/statuscategory/"+e.statusCategoryIdOrKey),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";var i=a(13),r=a(16);e.exports=function(e){this.jiraClient=e,this.getUser=function(e,t){var a={uri:this.jiraClient.buildURL("/user"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey,expand:e.expand}};return e.expand&&(a.qs.expand="",e.expand.forEach(function(e){a.qs.expand+=e+","})),this.jiraClient.makeRequest(a,t)},this.deleteUser=function(e,t){var a={uri:this.jiraClient.buildURL("/user"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey}};return this.jiraClient.makeRequest(a,t,"User removed.")},this.createUser=function(e,t){var a={uri:this.jiraClient.buildURL("/user"),method:"POST",json:!0,followAllRedirects:!0,body:e.user};return this.jiraClient.makeRequest(a,t)},this.editUser=function(e,t){var a={uri:this.jiraClient.buildURL("/user"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey},body:e.user};return this.jiraClient.makeRequest(a,t)},this.multiProjectSearchAssignable=function(e,t){var a="";e.projectKeys&&(e.projectKeys.forEach(function(e){a+=e+","}),a=a.slice(0,-1));var i={uri:this.jiraClient.buildURL("/user/assignable/multiProjectSearch"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,projectKeys:a,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(i,t)},this.searchAssignable=function(e,t){var a={uri:this.jiraClient.buildURL("/user/assignable/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,project:e.project,issueKey:e.issueKey,startAt:e.startAt,maxResults:e.maxResults,actionDescriptorId:e.actionDescriptorId}};return this.jiraClient.makeRequest(a,t)},this.createTemporaryAvatar=function(e,t){var a=r.extname(e.filepath).slice(1),o=r.basename(e.filepath),n=i.statSync(e.filepath).size;a="jpg"==a?"jpeg":a;var s={uri:this.jiraClient.buildURL("/user/avatar/temporary"),method:"POST",followAllRedirects:!0,qs:{username:e.username,filename:o,size:n},body:i.readFileSync(e.filepath),headers:{"X-Atlassian-Token":"no-check","Content-Type":"image/"+a}};return this.jiraClient.makeRequest(s,t)},this.convertTemporaryAvatar=function(e,t){var a={uri:this.jiraClient.buildURL("/user/avatar/"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username},body:{id:e.avatarId},headers:{"X-Atlassian-Token":"no-check"}};return this.jiraClient.makeRequest(a,t,"Avatar Converted")},this.deleteAvatar=function(e,t){var a={uri:this.jiraClient.buildURL("/user/avatar/"+e.avatarId),method:"DELETE",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(a,t,"Avatar Deleted")},this.getAvatars=function(e,t){var a={uri:this.jiraClient.buildURL("/user/avatars"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(a,t)},this.getDefaultColumns=function(e,t){var a={uri:this.jiraClient.buildURL("/user/columns"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(a,t)},this.setDefaultColumns=function(e,t){var a={uri:this.jiraClient.buildURL("/user/columns"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username},body:{columns:e.columns}};return this.jiraClient.makeRequest(a,t,"Default Columns Set")},this.resetDefaultColumns=function(e,t){var a={uri:this.jiraClient.buildURL("/user/columns"),method:"DELETE",json:!0,followAllRedirects:!0,qs:{username:e.username}};return this.jiraClient.makeRequest(a,t,"Default Columns Reset")},this.changePassword=function(e,t){var a={uri:this.jiraClient.buildURL("/user/password"),method:"PUT",json:!0,followAllRedirects:!0,qs:{username:e.username,key:e.userKey},body:{password:e.password}};return this.jiraClient.makeRequest(a,t,"Password Changed")},this.searchPermissions=function(e,t){var a="";e.permissions&&(e.permissions.forEach(function(e){a+=e+","}),a=a.slice(0,-1));var i={uri:this.jiraClient.buildURL("/user/permission/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,permissions:a,issueKey:e.issueKey,projectKey:e.projectKey,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(i,t)},this.searchPicker=function(e,t){var a={uri:this.jiraClient.buildURL("/user/picker"),method:"GET",json:!0,followAllRedirects:!0,qs:{query:e.query,maxResults:e.maxResults,showAvatar:e.showAvatar,exclude:e.exclude}};return this.jiraClient.makeRequest(a,t)},this.search=function(e,t){var a={uri:this.jiraClient.buildURL("/user/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,maxResults:e.maxResults,startAt:e.startAt,includeActive:e.includeActive,includeInactive:e.includeInactive}};return this.jiraClient.makeRequest(a,t)},this.viewIssueSearch=function(e,t){var a={uri:this.jiraClient.buildURL("/user/viewissue/search"),method:"GET",json:!0,followAllRedirects:!0,qs:{username:e.username,issueKey:e.issueKey,projectKey:e.projectKey,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createVersion=function(e,t){var a={uri:this.jiraClient.buildURL("/version"),method:"POST",json:!0,followAllRedirects:!0,body:e.version};return this.jiraClient.makeRequest(a,t)},this.moveVersion=function(e,t){var a=this.buildRequestOptions(e,"/move","POST",{position:e.position,after:e.after});return this.jiraClient.makeRequest(a,t)},this.getAllVersions=function(e,t){var a={uri:this.jiraClient.buildAgileURL(`/board/${e.boardId}/version`),method:"GET",json:!0,followAllRedirects:!0,qs:{filter:e.filter,startAt:e.startAt,maxResults:e.maxResults}};return this.jiraClient.makeRequest(a,t)},this.getVersion=function(e,t){var a=this.buildRequestOptions(e,"","GET");return this.jiraClient.makeRequest(a,t)},this.editVersion=function(e,t){var a=this.buildRequestOptions(e,"","PUT",e.version);return this.jiraClient.makeRequest(a,t)},this.getRelatedIssueCounts=function(e,t){var a=this.buildRequestOptions(e,"/relatedIssueCounts","GET");return this.jiraClient.makeRequest(a,t)},this.getUnresolvedIssueCount=function(e,t){var a=this.buildRequestOptions(e,"/unresolvedIssueCount","GET");return this.jiraClient.makeRequest(a,t)},this.getRemoteLinks=function(e,t){var a=this.buildRequestOptions(e,"/remotelink","GET");return this.jiraClient.makeRequest(a,t)},this.createRemoteLink=function(e,t){var a=this.buildRequestOptions(e,"/remotelink","POST",e.remoteLink);return this.jiraClient.makeRequest(a,t,"Remotelink Created")},this.getRemoteLink=function(e,t){var a=this.buildRequestOptions(e,"/remotelink/"+e.remoteLinkId,"GET");return this.jiraClient.makeRequest(a,t)},this.deleteRemoteLink=function(e,t){var a=this.buildRequestOptions(e,"/remotelink/"+e.remoteLinkId,"DELETE");return this.jiraClient.makeRequest(a,t,"Remote Link Deleted")},this.deleteVersion=function(e,t){var a=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(a,t,"Version Deleted")},this.deleteAllRemoteLinks=function(e,t){var a=this.buildRequestOptions(e,"/remotelink","DELETE");return this.jiraClient.makeRequest(a,t,"Remote Links Deleted")},this.getGlobalRemoteLink=function(e,t){var a={uri:this.jiraClient.buildURL("/version/remotelink"),method:"GET",json:!0,followAllRedirects:!0,qs:{globalId:e.globalId}};return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,i,r){var o="/version/"+e.versionId;return r||(r={}),i||(i={}),e.fields&&(r.fields="",e.fields.forEach(function(e){r.fields+=e+","}),r.fields=r.fields.slice(0,-1)),e.expand&&(r.expand="",e.expand.forEach(function(e){r.expand+=e+","}),r.expand=r.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(o+t),method:a,body:i,qs:r,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getAllWebhooks=function(e,t){var a={uri:this.jiraClient.buildWebhookURL("/webhook"),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.getWebhook=function(e,t){var a={uri:this.jiraClient.buildWebhookURL("/webhook/"+e.webhookId),method:"GET",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.createWebhook=function(e,t){var a={uri:this.jiraClient.buildWebhookURL("/webhook"),method:"POST",json:!0,body:e,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)},this.deleteWebhook=function(e,t){var a={uri:this.jiraClient.buildWebhookURL("/webhook/"+e.webhookId),method:"DELETE",json:!0,followAllRedirects:!0};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getWorkflows=function(e,t){var a={};e&&"object"==typeof e&&e.hasOwnProperty("workflowName")&&(a.workflowName=e.workflowName);var i={uri:this.jiraClient.buildURL("/workflow"),method:"GET",json:!0,followAllRedirects:!0,qs:a};return this.jiraClient.makeRequest(i,t)}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.createWorkflowScheme=function(e,t){var a={uri:this.jiraClient.buildURL("/workflowscheme"),method:"POST",json:!0,followAllRedirects:!0,body:e.workflowScheme};return this.jiraClient.makeRequest(a,t)},this.editWorkflowScheme=function(e,t){var a=this.buildRequestOptions(e,"","PUT",e.workflowScheme);return this.jiraClient.makeRequest(a,t)},this.getWorkflowScheme=function(e,t){var a=this.buildRequestOptions(e,"","GET",null,{returnDraftIfExists:e.returnDraftIfExists});return this.jiraClient.makeRequest(a,t)},this.deleteWorkflowScheme=function(e,t){var a=this.buildRequestOptions(e,"","DELETE");return this.jiraClient.makeRequest(a,t,"Workflow Scheme Deleted")},this.createDraft=function(e,t){var a=this.buildRequestOptions(e,"/createdraft","POST");return this.jiraClient.makeRequest(a,t)},this.getDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/default","GET",null,{returnDraftIfExists:e.returnDraftIfExists});return this.jiraClient.makeRequest(a,t)},this.removeDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/default","DELETE",null,{updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(a,t)},this.setDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/default","PUT",{workflow:e.workflowName,updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(a,t)},this.getDraft=function(e,t){var a=this.buildRequestOptions(e,"/draft","GET");return this.jiraClient.makeRequest(a,t)},this.editDraft=function(e,t){var a=this.buildRequestOptions(e,"/draft","PUT",e.draft);return this.jiraClient.makeRequest(a,t)},this.deleteDraft=function(e,t){var a=this.buildRequestOptions(e,"/draft","DELETE");return this.jiraClient.makeRequest(a,t)},this.getDraftDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/default","GET");return this.jiraClient.makeRequest(a,t)},this.setDraftDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/default","PUT",{workflow:e.workflowName,updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(a,t)},this.removeDraftDefaultWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/default","DELETE");return this.jiraClient.makeRequest(a,t)},this.getIssueType=function(e,t){var a=this.buildRequestOptions(e,"/issuetype/"+e.issueType,"GET",null,{returnDraftIfExists:e.returnDraftIfExists});return this.jiraClient.makeRequest(a,t)},this.editIssueType=function(e,t){var a=this.buildRequestOptions(e,"/issuetype/"+e.issueType,"PUT",{workflow:e.workflow,updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(a,t)},this.removeIssueType=function(e,t){var a=this.buildRequestOptions(e,"/issuetype/"+e.issueType,"DELETE",null,{updateDraftIfNeeded:e.updateDraftIfNeeded});return this.jiraClient.makeRequest(a,t)},this.getDraftIssueType=function(e,t){var a=this.buildRequestOptions(e,"/draft/issuetype/"+e.issueType,"GET");return this.jiraClient.makeRequest(a,t)},this.editDraftIssueType=function(e,t){var a=this.buildRequestOptions(e,"/draft/issuetype/"+e.issueType,"PUT",{workflow:e.workflow});return this.jiraClient.makeRequest(a,t)},this.removeDraftIssueType=function(e,t){var a=this.buildRequestOptions(e,"/draft/issuetype/"+e.issueType,"DELETE");return this.jiraClient.makeRequest(a,t)},this.getWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/workflow","GET",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.getDraftWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/workflow","GET",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.editWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/workflow","PUT",{workflow:e.workflowName,issueTypes:e.issueTypes},{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.editDraftWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/workflow","PUT",{workflow:e.workflowName,issueTypes:e.issueTypes},{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.deleteWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/workflow","DELETE",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.deleteDraftWorkflow=function(e,t){var a=this.buildRequestOptions(e,"/draft/workflow","DELETE",null,{workflowName:e.workflowName});return this.jiraClient.makeRequest(a,t)},this.buildRequestOptions=function(e,t,a,i,r){var o="/workflowscheme/"+e.workflowSchemeId;return r||(r={}),i||(i={}),e.fields&&(r.fields="",e.fields.forEach(function(e){r.fields+=e+","}),r.fields=r.fields.slice(0,-1)),e.expand&&(r.expand="",e.expand.forEach(function(e){r.expand+=e+","}),r.expand=r.expand.slice(0,-1)),{uri:this.jiraClient.buildURL(o+t),method:a,body:i,qs:r,followAllRedirects:!0,json:!0}}}},function(e,t,a){"use strict";e.exports=function(e){this.jiraClient=e,this.getWorklogDeleted=function(e,t){var a={uri:this.jiraClient.buildURL("/worklog/deleted"),method:"GET",json:!0,followAllRedirects:!0,qs:{since:e.since}};return this.jiraClient.makeRequest(a,t)},this.worklogList=function(e,t){var a={uri:this.jiraClient.buildURL("/worklog/list"),method:"POST",json:!0,followAllRedirects:!0,body:{ids:e.ids}};return this.jiraClient.makeRequest(a,t)},this.getWorklogUpdated=function(e,t){var a={uri:this.jiraClient.buildURL("/worklog/updated"),method:"GET",json:!0,followAllRedirects:!0,qs:{since:e.since}};return this.jiraClient.makeRequest(a,t)}}},function(e,t,a){"use strict";a.r(t);var i=a(18),r=a.n(i),o=new RegExp(/(?:!kira)\s+(\S+)(?:\s+(\S+))?(?:\s+(.*))?/),n=function(e){switch(e){case 0:return":zero:";case 1:return":one:";case 2:return":two:";case 3:return":three:";case 4:return":four:";case 5:return":five:";case 6:return":six:";case 7:return":seven:";case 8:return":eight:";case 9:return":nine:";case 10:return":keycap_ten:";default:return":question:"}},s=function(e,t){return"".concat(n(t)," *").concat(e.key,"* ").concat(function(e){switch(e){case"Done":return":white_check_mark:";case"To Do":return":statue_of_liberty:";default:return":building_construction:"}}(e.status)," ").concat(e.summary," - ").concat(e.url)},u=function(e,t,a){if(!t.length)return"I got nothing from Jira.";var i=t.slice(0,11),r="@".concat(e.from," I got ").concat(t.length," tickets from Jira")+(t>11?". Here are the first 11:\n\n":":\n\n"),o=i.map(s).join("\n");return a?r+o+"\n\n"+a:r+o},c=function(e,t,a,i){return e.jira.getOrSearch(a.query).then(function(r){return e.bot.chat.send(t,{body:u(a,r,i)}).then(function(e){var t=e.id;return{count:r.length>11?11:r.length,id:t,issues:r}})})},p=function(e,t,a){return c(e,t,a,"To confirm commenting, click on emojis below in the next 2 minutes:").then(function(i){var r=i.count,o=i.id,s=i.issues;e.comment.add(o,a,s),function e(t,a,i,r,o){return r<o&&t.bot.chat.react(a,i,n(r)).then(function(){return e(t,a,i,r+1,o)})}(e,t,o,0,r)})},l=function(e,t){return e.config.jira.usernameMapper[t]||t},m=function(e,t,a){return e.bot.chat.react(t,a,":eyes:")},h=function(e,t){var a=function(e){if(function(e){return e&&e.content&&"reaction"===e.content.type}(e))return{from:e.sender.username,type:"reacji",reactToID:e.content.reaction.m,emoji:e.content.reaction.b};if(!function(e){return e&&e.content&&"text"===e.content.type&&"string"==typeof e.content.text.body&&e.content.text.body.startsWith("!kira")}(e))return null;var t=e.content.text.body.match(o);if(!t||t.length<2)return{type:"unknown"};switch(t[1]){case"help":return{type:"help"};case"search":return t.length<3?{type:"unknown"}:{from:e.sender.username,type:"search",query:t[2]};case"comment":return t.length<4?{type:"unknown"}:{from:e.sender.username,type:"comment",query:t[2],comment:t[3]};default:return{type:"unknown"}}}(t);if(console.debug({msg:"got message",parsedMessage:a}),a)switch(a.type){case"unknown":case"help":return void function(e,t){e.bot.chat.send(t,{body:"Usage: \n  `!kira search <query>`\n  `!kira comment <query> <your comment>`\n"})}(e,t.channel);case"search":return m(e,t.channel,t.id),void function(e,t,a){c(e,t,a)}(e,t.channel,a);case"comment":return m(e,t.channel,t.id),void p(e,t.channel,a);case"reacji":return void function(e,t,a){var i=e.comment.get(a.reactToID);if(i&&a.from!==e.config.keybase.username){var r=function(e){switch(e){case":zero:":return 0;case":one:":return 1;case":two:":return 2;case":three:":return 3;case":four:":return 4;case":five:":return 5;case":six:":return 6;case":seven:":return 7;case":eight:":return 8;case":nine:":return 9;case":keycap_ten:":return 10;default:return null}}(a.emoji);if("number"==typeof r&&!(r>=i.issues.length)){var o=i.issues[r].key,n="Comment by ".concat(l(e,i.message.from))+(i.message.from===a.from?": ":" (confirmed by ".concat(l(e,a.from),"): "))+i.message.comment;e.jira.addComment(o,n).then(function(i){return e.bot.chat.send(t,{body:"@".concat(a.from," Done! ").concat(i)})})}}}(e,t.channel,a);default:return void console.error({error:"how could this happen"})}},d=a(3),f=a.n(d);function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var v=a(85),y=a.n(v);function b(e){return function(e){if(Array.isArray(e)){for(var t=0,a=new Array(e.length);t<e.length;t++)a[t]=e[t];return a}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function k(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],i=!0,r=!1,o=void 0;try{for(var n,s=e[Symbol.iterator]();!(i=(n=s.next()).done)&&(a.push(n.value),!t||a.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{i||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function w(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function j(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var x=function(e){return!!e.match(/[A-Za-z]+-[0-9]+/)},E=function(){function e(t){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),j(this,"_config",void 0),j(this,"_jira",void 0),j(this,"jiraRespMapper",function(e){return{key:e.key,summary:e.fields.summary,status:e.fields.status.statusCategory.name,url:"https://".concat(a._config.jira.host,"/browse/").concat(e.key)}}),this._config=t,this._jira=new y.a({host:t.jira.host,basic_auth:{username:t.jira.username,password:t.jira.password}})}var t,a,i;return t=e,(a=[{key:"getOrSearch",value:function(e){var t=this;return Promise.all([x(e)?this._jira.issue.getIssue({issueKey:e,fields:["key","summary","status"]}):new Promise(function(e){return e()}),this._jira.search.search({jql:'text ~ "'.concat(e,'"'),fields:"key,summary,status",method:"GET",maxResults:11})]).then(function(e){var a=k(e,2),i=a[0],r=a[1];return[].concat(b(i?[i]:[]),b(r?r.issues:[])).map(t.jiraRespMapper)})}},{key:"addComment",value:function(e,t){var a=this;return this._jira.issue.addComment({issueKey:e,comment:{body:t}}).then(function(t){var i=t.id;return"https://".concat(a._config.jira.host,"/browse/").concat(e,"?focusedCommentId=").concat(i)})}}])&&w(t.prototype,a),i&&w(t,i),e}();function S(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var _,R,A=f.a.promisify(setTimeout),C=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),S(this,"_respMsgIDToCommentMessage",new Map),S(this,"add",function(e,a,i){t._respMsgIDToCommentMessage.set(e,{message:a,issues:i}),A(12e4).then(function(){return t._respMsgIDToCommentMessage.delete(e)})}),S(this,"get",function(e){return t._respMsgIDToCommentMessage.get(e)})},q=function(e){try{return function(e){if("object"!==g(e))return null;if("object"!==g(e.keybase))return null;if("string"!=typeof e.keybase.username)return null;if("string"!=typeof e.keybase.paperkey)return null;if(!Array.isArray(e.keybase.channels))return null;var t=!0,a=!1,i=void 0;try{for(var r,o=e.keybase.channels[Symbol.iterator]();!(t=(r=o.next()).done);t=!0)if("object"!==g(r.value))return null}catch(e){a=!0,i=e}finally{try{t||null==o.return||o.return()}finally{if(a)throw i}}return"object"!==g(e.jira)?null:"string"!=typeof e.jira.host?null:"string"!=typeof e.jira.username?null:"string"!=typeof e.jira.password?null:e.jira.usernameMapper&&Array.isArray(e.jira.usernameMapper)?null:e}(JSON.parse(Buffer.from(e,"base64").toString()))}catch(e){return console.error(e),null}}(process.env.KIRA_CONFIG||"");q?(_=q,R={bot:new r.a,config:_,comment:new C,jira:new E(_)},R.bot.init(R.config.keybase.username,R.config.keybase.paperkey,{verbose:!0}).then(function(){return R})).then(function(e){e.bot.chat.watchAllChannelsForNewMessages(function(t){return e.config.keybase.channels.some(function(e){return a=e,i=t.channel,["name","public","membersType","topicType","topicName"].reduce(function(e,t){return a[t]===i[t]},!0);var a,i})&&h(e,t)})}):(console.error("invalid config"),console.error(process.env.KIRA_CONFIG),process.exit(1))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,